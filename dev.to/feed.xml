<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What are metadata and meta tags</title>
      <author>Magda Ros≈Çaniec</author>
      <pubDate>Sun, 18 Apr 2021 19:53:52 +0000</pubDate>
      <link>https://dev.to/makneta/what-are-metadata-and-meta-tags-3c3</link>
      <guid>https://dev.to/makneta/what-are-metadata-and-meta-tags-3c3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-metadata"&gt;
  &lt;/a&gt;
  What is metadata?
&lt;/h2&gt;

&lt;p&gt;Metadata is data about data. It means that it's usually a short description or summary that describes the content. &lt;/p&gt;

&lt;p&gt;When we are learning HTML we usually omit that part as not so important because it is something we can't see on our websites. But it can be read by search engines so metadata is important for SEO purposes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-we-add-metadata-to-our-websites"&gt;
  &lt;/a&gt;
  How do we add metadata to our websites?
&lt;/h2&gt;

&lt;p&gt;The place for metadata is in the head of our HTML document. There, we're supposed to add Meta Tags. &lt;/p&gt;

&lt;p&gt;When we use code editors with Emmet, we usually can produce the skeleton of our HTML file typing only !, so we often don't think about meta tags. We already have things like the character set used in the page (charset tag), the version of Internet Explorer (http-equiv="X-UA-Compatible", content="IE=edge") and set the viewport to the device-with that helps with making our website responsive.&lt;/p&gt;

&lt;p&gt;Let's look at the file produced with Emmet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also have the title tag there. Always remember to add your title. For SEO purpose it is good to start the title from a keyword but it shouldn‚Äôt be overloaded with keywords. The length of the title should be less than 60 characters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-other-meta-tags-can-we-use"&gt;
  &lt;/a&gt;
  What other meta tags can we use?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;description&lt;/strong&gt; - it‚Äôs a summary of your page, you can write to your users to encourage them to click, you can use keywords here as well as add an offer or a discount. &lt;br&gt;
&lt;strong&gt;author&lt;/strong&gt; - here you can add the author of the website&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;meta name="description" content="This is the description of a site that would be seen in the google search"&amp;gt;
 &amp;lt;meta name="author" content="Your name"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Meta tags are not only important for SEO purposes but also to prepare nice shareable social media objects. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-prepare-nice-social-media-cards-using-meta-tags"&gt;
  &lt;/a&gt;
  How to prepare nice Social Media cards using Meta Tags?
&lt;/h2&gt;

&lt;p&gt;A few years ago Facebook introduced Open Graph meta tags. Thanks to them we can control how URLs of our website are displayed on Social Media. &lt;/p&gt;

&lt;p&gt;Open Graph tags has got &lt;strong&gt;og:&lt;/strong&gt; before tag‚Äôs property&lt;/p&gt;

&lt;p&gt;Mostly used tags are:&lt;br&gt;
&lt;strong&gt;og:title&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;meta property=‚Äùog:title‚Äù content=‚ÄùTitle of the content‚Äù /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;og:url&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;meta property=‚Äùog:url‚Äù content=‚Äùhttps://yourwebsite.com‚Äù /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;*&lt;em&gt;og:image *&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;meta property=‚Äùog:image‚Äù content=‚Äùhttps://yourwebsite.com/photo-link.png‚Äù /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;*&lt;em&gt;og:type *&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;meta property=‚Äùog:type‚Äù content=‚Äùarticle or website‚Äù /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;og:description&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;meta property=‚Äùog:description‚Äù content=‚Äùdescription you want to have on the social media card‚Äù /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After adding those Open Graph tags you can check how your social media card will look like on this page: &lt;br&gt;
&lt;a href="https://www.opengraph.xyz/"&gt;https://www.opengraph.xyz/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
    </item>
    <item>
      <title>AWS Learn In Public Week 8, Elastic Beanstalk</title>
      <author>Harris Geo üë®üèª‚Äçüíª</author>
      <pubDate>Sun, 18 Apr 2021 19:53:31 +0000</pubDate>
      <link>https://dev.to/harrisgeo88/aws-learn-in-public-week-8-elastic-beanstalk-1hcb</link>
      <guid>https://dev.to/harrisgeo88/aws-learn-in-public-week-8-elastic-beanstalk-1hcb</guid>
      <description>&lt;p&gt;This has been an exciting week as London is starting to open up little by little. We agreed with the rest of my team at work that whoever wants can start to the office twice per week. Finally after a long winter of staying at home the whole day every day, we can start seeing some people again. The only downside of it is that it broke my routine of tweeting about AWS services.&lt;/p&gt;

&lt;p&gt;In this blog post we're going to talk about Beanstalk which is a really interesting service as it can glue the majority of the stuff you need when creating an environment. I don't understand why not everyone uses it. &lt;/p&gt;

&lt;p&gt;Definitely once I finish this project and get my certification this will be one of the first services that I'm going to dive deep into it. Without further ado let's check it out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-beanstalk"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/harrisgeo88/status/1381582874453942272"&gt;AWS Beanstalk&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-is-aws-elastic-beanstalk"&gt;
  &lt;/a&gt;
  What is AWS Elastic Beanstalk?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A platform as a service for deploying applications to AWS&lt;/li&gt;
&lt;li&gt;It is a layer for configuring how to use other services like EC2, Auto Scaling Groups, Load Balancers, RDS etc.&lt;/li&gt;
&lt;li&gt;Using Elastic Beanstalk is free but you only pay for the underlying resources&lt;/li&gt;
&lt;li&gt;Elastic Beanstalk is a managed service and can also be used for deployment strategies&lt;/li&gt;
&lt;li&gt;The idea behind it is that the developer is responsible for the code and Beanstalk for the infrastructure&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#there-are-3-architecture-models"&gt;
  &lt;/a&gt;
  There are 3 architecture models
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Single Instance Deployment which is great for dev environments&lt;/li&gt;
&lt;li&gt;Load Balancer with Auto Scaling Groups which is the standard model for production web apps&lt;/li&gt;
&lt;li&gt;Auto Scaling Groups only which is mainly for analytics and workers services&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We can version our applications to environments and promote them to the next environment until we reach production. We can customise these stages to whatever we want. e.g. dev - staging - prod. Rollback feature is also available&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deployment-options"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/harrisgeo88/status/1382320050892328967"&gt;Deployment options&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#all-at-once"&gt;
  &lt;/a&gt;
  All at once
&lt;/h3&gt;

&lt;p&gt;We have the "&lt;strong&gt;all at once&lt;/strong&gt;" option where you can deploy all instances in one go.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This option has downtime but it is the fastest way to deploy&lt;/li&gt;
&lt;li&gt;It is great for dev environments that require quick iterations and also there are no additional costs to it&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#rolling"&gt;
  &lt;/a&gt;
  Rolling
&lt;/h3&gt;

&lt;p&gt;We have the &lt;strong&gt;rolling&lt;/strong&gt; option where slow update the current instances with new once until our application only contains the new code. Let's say our app has 4 instances. 2 of them are going to be updated (below capacity) with the new version and then the next 2.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rolling-with-additional-batches"&gt;
  &lt;/a&gt;
  Rolling with additional batches
&lt;/h3&gt;

&lt;p&gt;We have the &lt;strong&gt;rolling with additional batches&lt;/strong&gt; option. Here we use the same logic as before but instead of updating the current instances, we add a few extra. The deployment is longer, has small extra costs but is good for production&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#immutable"&gt;
  &lt;/a&gt;
  Immutable
&lt;/h3&gt;

&lt;p&gt;We have the &lt;strong&gt;immutable&lt;/strong&gt; option where we spin up a complete new set of instances (double the amount in total) and once the new version is out and running, we terminate the old ones. This option has 0 downtime, is great for prod but is quite costly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#blue-green-deployments"&gt;
  &lt;/a&gt;
  Blue / Green deployments
&lt;/h3&gt;

&lt;p&gt;Finally we have the &lt;strong&gt;blue / green deployment&lt;/strong&gt; option&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We create a new env with the new app version (green) and direct 10% of the traffic to it&lt;/li&gt;
&lt;li&gt;The old env (blue) will handle 90% of the traffic&lt;/li&gt;
&lt;li&gt;We setup weighted policies in Route53&lt;/li&gt;
&lt;li&gt;Once we are happy, Beanstalk can swap urls&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#beanstalk-under-the-hood"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/harrisgeo88/status/1383032620066439172"&gt;Beanstalk under the hood&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Let's talk a bit more about how AWS Beanstalk works under the hood. It basically relies on AWS CloudFormation to provision any other AWS services (Infrastructure As Code). To do that we can define a .ebextensions folder inside which we provision any service we want&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-docker-with-beanstalk"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/harrisgeo88/status/1383800508247277576"&gt;Running Docker with Beanstalk&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#single-docker-container"&gt;
  &lt;/a&gt;
  Single Docker Container
&lt;/h3&gt;

&lt;p&gt;Single Docker for simple setups where we run our app as a single Docker container.&lt;/p&gt;

&lt;p&gt;We provide:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;Dockerfile&lt;/code&gt; which will be used to build and run our container&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;Dockerrun.aws.json&lt;/code&gt; v1 file for existing images which can be in ECR or Dockerhub&lt;/li&gt;
&lt;li&gt;Uses EC2 under the hood&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#multi-docker-container"&gt;
  &lt;/a&gt;
  Multi Docker Container
&lt;/h3&gt;

&lt;p&gt;Multi Docker which runs multiple containers per EC2.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It will create and ECS cluster, EC2 instances for it, a Load Balancer in High Availability mode, task definitions and execution.&lt;/li&gt;
&lt;li&gt;It requires a &lt;code&gt;Dockerrun.aws.json&lt;/code&gt; v2 config file at the root of the project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Multi Docker also uses the &lt;code&gt;Dockerrun.aws.json&lt;/code&gt; v2 config file to generate the ECS task definition. We need to have our docker images prebuilt and stored in ECR&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;I really don't understand why not more people use Beanstalk. It really simplifies the whole deployment process and putting all the services together.&lt;/p&gt;

&lt;p&gt;On the surface this looks really really simple but Beanstalk is just the tip of the iceberg. Next week we are going to talk about CloudFormation and a little bit of Cloudfront.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>learninpublic</category>
      <category>beanstalk</category>
    </item>
    <item>
      <title>Dynamic Dimension React Container with Transition Effect - Part 2, Resize Observer</title>
      <author>AnxinYang</author>
      <pubDate>Sun, 18 Apr 2021 19:49:49 +0000</pubDate>
      <link>https://dev.to/anxinyang/dynamic-dimension-react-container-with-transition-effect-part-2-resize-observer-5h18</link>
      <guid>https://dev.to/anxinyang/dynamic-dimension-react-container-with-transition-effect-part-2-resize-observer-5h18</guid>
      <description>&lt;div class="ltag__link"&gt;
  &lt;a href="/anxinyang" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yzFxyWnh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7B3tBYdS--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/616431/e6f9dfb8-453b-4d99-bed9-2afd981567c6.png" alt="anxinyang image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/anxinyang/dynamic-dimension-react-container-with-transition-effect-47a9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Dynamic Dimension React Container with Transition Effect - Part 1&lt;/h2&gt;
      &lt;h3&gt;AnxinYang „Éª Apr 18 „Éª 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#transition&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;In part one, we create a dynamic dimension container that can handle child elements with static dimensions.&lt;/p&gt;

&lt;p&gt;In this part, we are going to create a dynamic dimension container that can handle child elements that have dynamic dimension.&lt;/p&gt;

&lt;p&gt;In order to do that, we need use the Resize Observer API&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-resize-observer-api"&gt;
  &lt;/a&gt;
  What is Resize Observer API?
&lt;/h3&gt;

&lt;p&gt;In short term, it's like the &lt;code&gt;onresize&lt;/code&gt; event that trigger when, instead of the browser viewport, a document dimension have changed.&lt;/p&gt;

&lt;p&gt;For more detail, please refer to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver"&gt;MDN&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The Code
&lt;/h3&gt;

&lt;p&gt;First, let's create a hook with Resize Observer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useResizeObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setElement&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setRect&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


  &lt;span class="c1"&gt;//Clean up observer&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cleanOb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="c1"&gt;// Element has changed, disconnect old observer&lt;/span&gt;
    &lt;span class="nx"&gt;cleanOb&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ResizeObserver&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// inlineSize and blockSize in entry.borderBoxSize and contentBoxSize&lt;/span&gt;
      &lt;span class="c1"&gt;// inlineSize means height when write-mode is horizontal, and width when write-mode is vertical.&lt;/span&gt;
      &lt;span class="c1"&gt;// blockSize means width when write-mode is horizontal, and height when write-mode is vertical.&lt;/span&gt;
      &lt;span class="c1"&gt;// So, for the sake of simplicity, I will use getBoundingClientRect&lt;/span&gt;
      &lt;span class="nx"&gt;setRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}));&lt;/span&gt;
    &lt;span class="nx"&gt;ob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// disconnect when component is unmounted&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;cleanOb&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: You can use &lt;code&gt;inlineSize&lt;/code&gt; and &lt;code&gt;blockSize&lt;/code&gt; in &lt;code&gt;entry.borderBoxSize&lt;/code&gt; and &lt;code&gt;entry.contentBoxSize&lt;/code&gt;. However, they represent height or width depend on &lt;code&gt;write-mode&lt;/code&gt; of target element.&lt;/p&gt;

&lt;p&gt;And &lt;code&gt;entry.contentRect&lt;/code&gt; may be deprecated in future versions.&lt;/p&gt;

&lt;p&gt;Therefore, for the sake of simplicity, I will use getBoundingClientRect here.&lt;/p&gt;

&lt;p&gt;Now, let's use this hook in the container we created in &lt;a href="https://dev.to/anxinyang/dynamic-dimension-react-container-with-transition-effect-47a9"&gt;part1&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;DynamicContainer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useResizeObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
      &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
        &lt;span class="na"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0.3s&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;
      &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
        &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
          &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fit-content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fit-content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here is a demo, try hover the mouse over the dropdown items.&lt;br&gt;
The dropdown item will change it's text to random length string when hovered.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/hprsv"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Thank you all!&lt;/p&gt;

</description>
      <category>observer</category>
      <category>javascript</category>
      <category>react</category>
      <category>css</category>
    </item>
    <item>
      <title>Introduction to MySQL replication</title>
      <author>Klim Markelov</author>
      <pubDate>Sun, 18 Apr 2021 19:12:19 +0000</pubDate>
      <link>https://dev.to/tutelaris/introduction-to-mysql-replication-97c</link>
      <guid>https://dev.to/tutelaris/introduction-to-mysql-replication-97c</guid>
      <description>&lt;p&gt;Hello, ultra devs! üëãüèª‚ö°Ô∏è&lt;br&gt;
Today I would like to talk about Replication and how it works in MySQL.&lt;/p&gt;

&lt;p&gt;Let's start from the beginning. If you know what replication is, feel free to skip the next chapter.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-is-replication"&gt;
  &lt;/a&gt;
  What is replication?
&lt;/h3&gt;

&lt;p&gt;Basically, a replication mechanism means storing some copy of data on multiple machines. &lt;em&gt;"How is it different from backups?"&lt;/em&gt; you may wonder. Replication is a bit more than that. When a backup is just a snapshot of the data in a certain time, replication helps you to not only keep the copy of the data in real-time ensuring availability but also facilitate the overload on the database providing both reading and writing to the client and therefore increase throughput. Also, replication helps you to distribute your data storage across the globe decreasing the response time for clients from different parts of the world.&lt;/p&gt;

&lt;p&gt;In this article, we will be talking about &lt;strong&gt;leader-based&lt;/strong&gt; replication, and to continue our journey into this world, it's required to introduce several terms:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;em&gt;Leader (master)&lt;/em&gt; ‚Äì part of the replication system eligible to write and read from the database.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Follower (replica)&lt;/em&gt;  ‚Äì part of the replication system eligible &lt;em&gt;only to read&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Basically, &lt;em&gt;leader&lt;/em&gt; is responsible for all inserts, updates, deletes, and once these changes go through the &lt;em&gt;leader&lt;/em&gt;, it transfers these changes to all its &lt;em&gt;followers&lt;/em&gt; that are responsible for reads and never writes.&lt;/p&gt;

&lt;p&gt;Here is a simple example of single-leader replication with two followers:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_mLINe07--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pcwa3h4dw2fdqssu7jo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_mLINe07--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pcwa3h4dw2fdqssu7jo.png" alt="Pic.1"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-it-works-in-mysql"&gt;
  &lt;/a&gt;
  How it works in MySQL?
&lt;/h3&gt;

&lt;p&gt;Ok, now we know what replication is, but how it actually works in MySQL? How data got transferred from leader to followers and how MySQL keeps the consistency between them?&lt;/p&gt;

&lt;p&gt;Imagine the situation that dev.to is powered by MySQL. You just wrote the article and clicked on the &lt;strong&gt;Publish&lt;/strong&gt; button. Here is what happens:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Data comes to the leader and get saved in the database;&lt;/li&gt;
&lt;li&gt;The leader saves data changes in the special file called &lt;strong&gt;binary log&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;Follower copies changes in &lt;strong&gt;binary log (binlog)&lt;/strong&gt; to its own file called &lt;strong&gt;relay log&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;Follower replays these changes from &lt;strong&gt;relay log&lt;/strong&gt; to its own data.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p41VEOyM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u0rjg8cotgwpe2cpesq0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p41VEOyM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u0rjg8cotgwpe2cpesq0.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, to synchronize &lt;strong&gt;relay log&lt;/strong&gt; with leader's &lt;strong&gt;binary log&lt;/strong&gt;, MySQL starts a worker thread that is called &lt;em&gt;I/O follower thread&lt;/em&gt;. It's basically an ordinary client connection to the leader that starts reading its &lt;strong&gt;binary log&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Digging a bit into details, we can ask a quite reasonable question: in which format do &lt;strong&gt;binary log&lt;/strong&gt; and &lt;strong&gt;relay log&lt;/strong&gt; store the data?&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#replication-types"&gt;
  &lt;/a&gt;
  Replication types
&lt;/h3&gt;

&lt;p&gt;Currently, MySQL supports two types of replication: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Statement-based replication;&lt;/li&gt;
&lt;li&gt;Row-based replication.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;
  &lt;a href="#statementbased-replication"&gt;
  &lt;/a&gt;
  Statement-based replication
&lt;/h4&gt;

&lt;p&gt;So, as it's clear from the name, &lt;strong&gt;statement-based replication&lt;/strong&gt; records the whole query that changed the state of the data in &lt;strong&gt;binlog&lt;/strong&gt;. So, when a follower decides to synchronize its data with the leader, it copies the query and replays it by executing this query and applying changes to its own data.&lt;/p&gt;

&lt;p&gt;This kind of replication is very easy to implement and has multiple advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It still works when the schema is different on the leader and the follower;&lt;/li&gt;
&lt;li&gt;It's easy to audit and debug;&lt;/li&gt;
&lt;li&gt;It requires not that much disk space.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, with &lt;em&gt;great advantages comes great disadvantages&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Non-deterministic functions&lt;/em&gt;. With non-deterministic functions, it can come up with different data on &lt;strong&gt;leader&lt;/strong&gt; and &lt;strong&gt;follower&lt;/strong&gt;. By non-deterministic functions I mean function like the following: &lt;code&gt;CURRENT_USER()&lt;/code&gt;, &lt;code&gt;RAND()&lt;/code&gt;, &lt;code&gt;IS_FREE_LOCK()&lt;/code&gt; and so on. Executing them first on &lt;strong&gt;leader&lt;/strong&gt; and then on &lt;strong&gt;follower&lt;/strong&gt; can lead to inconsistent data;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Performance penalty&lt;/em&gt;. Imagine if you execute the following query:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;post_statistics&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;statistics_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;posts_amount&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt; &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;without having an index on the &lt;code&gt;status&lt;/code&gt; field, and after pressing 'Enter' you just went for a tea (a hypothetical situation, I know, you probably drink coffee). The query got executed on &lt;strong&gt;leader&lt;/strong&gt;, consuming all available CPU, and then &lt;strong&gt;follower&lt;/strong&gt; picked up the baton, copied the query to its &lt;strong&gt;relay log&lt;/strong&gt;, and cheerfully ate all CPU as well;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Triggers and stored routies&lt;/em&gt;. Triggers and stored routines, as well as &lt;em&gt;Non-deterministic functions&lt;/em&gt;, can cause a lot of problems with different side-effects on &lt;strong&gt;leader&lt;/strong&gt; and &lt;strong&gt;follower&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, &lt;strong&gt;Statement-based replication&lt;/strong&gt; has its own advantages, but big disadvantages. Therefore not every database supports this type of replication, but in the case of MySQL, up until &lt;strong&gt;MySQL 5.0&lt;/strong&gt;, this type of replication was the only one supported.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#rowbased-replication"&gt;
  &lt;/a&gt;
  Row-based replication
&lt;/h4&gt;

&lt;p&gt;Compare to &lt;strong&gt;Statement-based replication&lt;/strong&gt;, &lt;strong&gt;Row-based replication&lt;/strong&gt; stores the actual data changes in &lt;strong&gt;binary log&lt;/strong&gt;, but not the query. So, when a &lt;em&gt;follower&lt;/em&gt; replicates the data, it doesn't execute the query, but applies the changes to each record it was applied to on &lt;em&gt;leader&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let's consider the advantages of this approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Less CPU intensive&lt;/em&gt;. If we execute the query, described in &lt;strong&gt;Statement-based replication&lt;/strong&gt; chapter, &lt;strong&gt;follower&lt;/strong&gt; does not replay this query, but copy the value and apply the change to its own data record. So, the query gets executed once and doesn't consume all available CPU;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Helps to find data inconsistency&lt;/em&gt;. Since &lt;strong&gt;Row-based replication&lt;/strong&gt; stores the changes only, when &lt;strong&gt;follower&lt;/strong&gt; replays these changes and tries to apply to the data that exists on &lt;strong&gt;leader&lt;/strong&gt; but doesn't exist on &lt;strong&gt;follower&lt;/strong&gt;, it throws the error. Meanwhile &lt;strong&gt;statement-based replication&lt;/strong&gt; proceeds with what it has and keeps the inconsistency hidden, complicating the ability to find the point of failure and fix it;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;No non-deterministic behavior&lt;/em&gt;. Compare to &lt;strong&gt;statement-based replication&lt;/strong&gt;, if you execute the query that has &lt;em&gt;Non-deterministic functions&lt;/em&gt;, it ends up with the same result for both &lt;strong&gt;leader&lt;/strong&gt; and &lt;strong&gt;follower&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Looks nice, that's what we were expecting from replication, right? But along with the advantages come disadvantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;High disk space consumption&lt;/em&gt;. Yeah, we just talked about &lt;em&gt;Less CPU consuming&lt;/em&gt; for this replication, but this doesn't work for all queries. Imagine if you have the following statement:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'draft'&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'published'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Considering the fact, that the &lt;code&gt;posts&lt;/code&gt; table has about &lt;em&gt;1.000.000&lt;/em&gt; of &lt;em&gt;Published&lt;/em&gt; posts, this query becomes quite expensive, since it requires storing &lt;em&gt;1.000.000&lt;/em&gt; of changes in &lt;strong&gt;binary/replication log&lt;/strong&gt; files;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Does not allow different schemas&lt;/em&gt;. Sometimes it might be useful when you have different schemas on &lt;strong&gt;leader&lt;/strong&gt; and &lt;strong&gt;follower&lt;/strong&gt; (I don't know about these cases, but they definitely exist). As it was described above, &lt;strong&gt;row-based replication&lt;/strong&gt; throws an error in case of data inconsistency, caused by different schemas;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Statement is not included in the &lt;strong&gt;binary log&lt;/strong&gt;&lt;/em&gt;. It can be not a problem at all until you try to debug or audit what's going on and what query caused damage to your database. &lt;strong&gt;Row-based replication&lt;/strong&gt; makes it hard to analyze.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we are fluent in replication process language. Everything is clear. Hold on, on the picture of replication example, we can see one &lt;strong&gt;leader&lt;/strong&gt; and two &lt;strong&gt;followers&lt;/strong&gt;. Can we do things differently?üïµÔ∏è‚Äç‚ôÄÔ∏è &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#mysql-supported-topologies"&gt;
  &lt;/a&gt;
  MySQL supported topologies
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#singleleader-replication"&gt;
  &lt;/a&gt;
  Single-leader replication
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---KfreKPY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/481z07e9as3fxomjn2gu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---KfreKPY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/481z07e9as3fxomjn2gu.png" alt="Single-leader topology"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This type of replication is the most common one. It is useful when you have a lot of reads but not that many writes. You can distribute users reads among &lt;strong&gt;followers&lt;/strong&gt; load-balancing them and therefore providing better response time. With this replication topology, you can easily add one more &lt;strong&gt;follower&lt;/strong&gt; to it. Also, this topology prevents a lot of problems that multiple leaders topology have (will be described in &lt;em&gt;Leader-leader replication&lt;/em&gt;), since it has only one &lt;strong&gt;leader&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#leaderleader-replication"&gt;
  &lt;/a&gt;
  Leader-leader replication
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0SfY08K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uge6q3vos5g12bkaomel.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0SfY08K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uge6q3vos5g12bkaomel.png" alt="Leader-leader replication"&gt;&lt;/a&gt;&lt;br&gt;
As it is visible from the picture, this topology involves two &lt;strong&gt;leaders&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This topology is useful when you have different data centers in different locations and you need to provide fast writes to both regions.&lt;/p&gt;

&lt;p&gt;But with this advantage comes a great cost. Suppose, we have a table &lt;code&gt;post_statistics&lt;/code&gt; and you just realized that the number of posts with &lt;strong&gt;Published&lt;/strong&gt; &lt;code&gt;status&lt;/code&gt; is triple more than it's actually written in table and you decide to fix the situation. So, you connect to MySQL and execute the following query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="n"&gt;posts_statistics&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;posts_amount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;posts_amount&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'published'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Meanwhile, somebody from a different part of the world just published his/her first post (just like me) and triggered the following query to be executed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="n"&gt;posts_statistics&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;posts_amount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;posts_amount&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Suppose, the original number of posts was 10k. Due to replication lag, databases ended up with two different numbers: 30.001 and 30.003. And no errors were thrown. &lt;/p&gt;

&lt;p&gt;This is a big disadvantage of this topology, and in practice, it brings more problems than advantages. But if you ended up with this topology, it's better to add few more replicas to it üòÅ&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_HOZp8gm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/523qvnf7soz5qxkhxwcu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_HOZp8gm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/523qvnf7soz5qxkhxwcu.png" alt="Leader-leader with replicas"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#activepassive-leaderleader-replication"&gt;
  &lt;/a&gt;
  Active-passive leader-leader replication
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gJxfUaxz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hos5gxyt01k0zihf5ahf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gJxfUaxz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hos5gxyt01k0zihf5ahf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Active-passive leader-leader replication&lt;/em&gt; topology one server takes the role of the &lt;strong&gt;leader&lt;/strong&gt; and another one takes the role of the &lt;strong&gt;follower&lt;/strong&gt;. But in comparison to the ordinary &lt;em&gt;leader-follower topology&lt;/em&gt;, it allows you to swap easily the &lt;strong&gt;leader&lt;/strong&gt; responsibility from one server to another. &lt;/p&gt;

&lt;p&gt;It's useful in many cases. For example, if you execute &lt;code&gt;ALTER TABLE&lt;/code&gt; that locks the whole table for reads and writes, you can stop the replication process, easily swap &lt;strong&gt;leader&lt;/strong&gt; responsibility, execute &lt;code&gt;ALTER TABLE&lt;/code&gt; on the passive server, then swap the responsibility back, restore replication process, and execute &lt;code&gt;ALTER TABLE&lt;/code&gt; on the remaining server. It can help you to keep your service alive while executing that expensive query.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#other-topologies"&gt;
  &lt;/a&gt;
  Other topologies
&lt;/h4&gt;

&lt;p&gt;There are many other topologies that are supported by MySQL:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Replication Ring topology 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IN-8DWtn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8x5ik6ozxn5i0d07h7o.png" alt="Replication Ring topology"&gt;
&lt;/li&gt;
&lt;li&gt;Tree of pyramid topology
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HsDaUqxc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uwwivdpuap96gfjxrbnp.png" alt="Tree of pyramid topology"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And many others. You can choose the best topology that fits your purposes or create your own. This is the list üëÜüèª of the most common topologies used in MySQL.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Replication&lt;/strong&gt; is a mechanism of having a consistent copy of the data storage. It provides:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Data distribution;&lt;/li&gt;
&lt;li&gt;Load balancing;&lt;/li&gt;
&lt;li&gt;Backups;&lt;/li&gt;
&lt;li&gt;High availability and failover.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Leader-based replication&lt;/em&gt; consists of &lt;strong&gt;leader&lt;/strong&gt; and &lt;strong&gt;follower&lt;/strong&gt;. Both of them have their own journal of changes: &lt;strong&gt;binary log&lt;/strong&gt; and &lt;strong&gt;relay log&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There are two types of replication:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Statement-based replication&lt;/strong&gt;. It's represented in queries itself.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Row-based replication&lt;/strong&gt;. It's represented in direct data changes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are multiple topologies for replication:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Leader-follower topology;&lt;/li&gt;
&lt;li&gt;Leader-leader topology;&lt;/li&gt;
&lt;li&gt;Leader-leader active-passive topology;&lt;/li&gt;
&lt;li&gt;Ring topology;&lt;/li&gt;
&lt;li&gt;Tree of Pyramids topology.
And many specialized topologies together with custom ones.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's it! Thank you for your attention! I hope you liked this post üòå&lt;/p&gt;

</description>
      <category>mysql</category>
      <category>replication</category>
      <category>distributedsystems</category>
    </item>
    <item>
      <title>Is Redux DEAD? Try Zustand!</title>
      <author>Marius Espejo</author>
      <pubDate>Sun, 18 Apr 2021 19:10:33 +0000</pubDate>
      <link>https://dev.to/marius/is-redux-dead-try-zustand-9g8</link>
      <guid>https://dev.to/marius/is-redux-dead-try-zustand-9g8</guid>
      <description>&lt;p&gt;With the advent of hooks a lot of ReactJS developers have moved away from Redux as the default state management of choice. &lt;/p&gt;

&lt;p&gt;However is simply using useState, useReducer, and the context API good enough? I highly recommend checking out Zustand! Dead simple and unopinionated state management!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Zustand is a small, fast and scaleable bearbones state-management solution. Has a comfy api based on hooks, isn't boilerplatey or opinionated, but still just enough to be explicit and flux-like.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://youtu.be/UcHkC5sJPWw"&gt;In this video&lt;/a&gt; we're going to walk through the basics of using Zustand. We'll also discuss the pros and cons of this approach compared to reducer-based and context-based solutions like the useReducer hook and Redux.&lt;/p&gt;

&lt;p&gt;Let me know what you think of Zustand!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/UcHkC5sJPWw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>showdev</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Composition in React</title>
      <author>Boluwatife Fakorede</author>
      <pubDate>Sun, 18 Apr 2021 18:58:43 +0000</pubDate>
      <link>https://dev.to/wati_fe/composition-in-react-1f0p</link>
      <guid>https://dev.to/wati_fe/composition-in-react-1f0p</guid>
      <description>&lt;p&gt;React implements a unidirectional pattern for data flow for building components. The pattern itself is not unique to react but followed strictly in react.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Unidirectional data flow means that data can only flow in one way alone.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Following the definition and if experienced with react, you would have noticed that the child component cannot pass data to the parent component; hence, data only flows in one way, ‚Äú&lt;strong&gt;FROM&lt;/strong&gt; the parent &lt;strong&gt;TO&lt;/strong&gt; the child.‚Äù&lt;/p&gt;

&lt;p&gt;If we need to modify the child that influences the parent or share state between two child components, we use props.&lt;/p&gt;

&lt;p&gt;Let‚Äôs see a trivial example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/header&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loggedIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoggedIn&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSetLoggedIn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setLoggedIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;loggedIn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="nx"&gt;loggedIn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;loggedIn&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;handleSetLoggedIn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSetLoggedIn&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, we make some assumptions that the App function is responsible for handling login, and it passes the &lt;em&gt;‚ÄúloggedIn‚Äù&lt;/em&gt; state and the &lt;em&gt;‚ÄúhandleSetLoggedIn‚Äù&lt;/em&gt; function to Header.&lt;/p&gt;

&lt;p&gt;Let‚Äôs investigate the Header component and see how it makes use of these props.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Profile&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./profile&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;loggedIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleSetLoggedIn&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Profile&lt;/span&gt; &lt;span class="nx"&gt;loggedIn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;loggedIn&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;handleSetLoggedIn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSetLoggedIn&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above, we can see that the Header component doesn't make use of the props but passes them to the Profile component that makes use of them. This situation is known as props drilling.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#props-drilling"&gt;
  &lt;/a&gt;
  Props drilling
&lt;/h2&gt;

&lt;p&gt;Props drilling is passing props to a child component that doesn‚Äôt need the props but helps to pass it down to its own child component, which might pass it to its own child component because it doesn‚Äôt need it as well till it gets to the child that really needs the props.&lt;/p&gt;

&lt;p&gt;The problem with props drilling is that things get messy, and debugging might become difficult quickly.&lt;/p&gt;

&lt;p&gt;A good solution might be to reach out for the context API or Redux, but that is not needed to solve this problem.&lt;/p&gt;

&lt;p&gt;We could use composition (component composition) to our advantage. In fact, the React team says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://reactjs.org/docs/context.html#before-you-use-context"&gt;If you only want to avoid passing some props through many levels, the component composition is often a simpler solution than context.&lt;br&gt;
‚Äî React Team&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-is-composition"&gt;
  &lt;/a&gt;
  What is composition?
&lt;/h2&gt;

&lt;p&gt;Composition is the act of assembling components or elements to build a whole.&lt;/p&gt;

&lt;p&gt;React gives a powerful tool that helps with composition, which is children-props.&lt;/p&gt;

&lt;p&gt;We can easily refactor our Header component like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The children‚Äôs prop is available on every component. It contains the content between the opening and closing tags of a component.&lt;/p&gt;

&lt;p&gt;Now, our Header component is a wrapper for the children we choose to render in it.&lt;/p&gt;

&lt;p&gt;This gives us the power to refactor our App component render in &lt;em&gt;‚ÄúApp.js.‚Äù&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/header&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Profile&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/profile&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loggedIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoggedIn&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSetLoggedIn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setLoggedIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;loggedIn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Profile&lt;/span&gt; &lt;span class="nx"&gt;loggedIn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;loggedIn&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;handleSetLoggedIn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSetLoggedIn&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Header&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have solved the issue with props drilling by making use of composition.&lt;/p&gt;

&lt;p&gt;This pattern also gives us the power to build more scalable reusable components, especially when building a tool, a library, or components used by a large number of people with varying needs.&lt;/p&gt;

&lt;p&gt;The next article will build a card component and see how composition can be an exciting pattern to think about and use often.&lt;/p&gt;

&lt;p&gt;Thank you for reading.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>When should you memoize in React</title>
      <author>Prateek Surana</author>
      <pubDate>Sun, 18 Apr 2021 18:28:15 +0000</pubDate>
      <link>https://dev.to/prateek3255/when-should-you-memoize-in-react-1fjc</link>
      <guid>https://dev.to/prateek3255/when-should-you-memoize-in-react-1fjc</guid>
      <description>&lt;p&gt;If you have heard about or used the React memoization methods (useMemo, useCallback, and memo), you might often get tempted to use them in situations where you might not need them.&lt;/p&gt;

&lt;p&gt;When I first learned about these methods, I also often ended up using them everywhere because what harm optimizing something could do, right?&lt;/p&gt;

&lt;p&gt;Well, as you might have guessed by now, I was wrong because these hooks and methods exist for some specific use cases, and if they're used mindlessly everywhere, they can actually worsen your app's performance.&lt;/p&gt;

&lt;p&gt;In this article, I'll try my best to explain -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Why premature optimization is bad&lt;/li&gt;
&lt;li&gt;How can you optimize your code without memoizing&lt;/li&gt;
&lt;li&gt;When should you actually memoize&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#why-premature-optimization-is-bad"&gt;
  &lt;/a&gt;
  Why premature optimization is bad
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#usecallback"&gt;
  &lt;/a&gt;
  useCallback
&lt;/h3&gt;

&lt;p&gt;Let's start with an example. What do you think about, handleChange in the below code snippet?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFirstName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/**
     * Omitted for brevity
     */&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setFirstName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"firstName"&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I used to think that &lt;code&gt;useCallback&lt;/code&gt; improves performance by returning a memoized callback that only changes if one of the dependencies changes. In our case, since the dependency array is empty, it would get memoized and would be more efficient than the normal inline function, right?&lt;/p&gt;

&lt;p&gt;But, it's not as simple as that, because &lt;strong&gt;every optimization comes with a cost associated with it&lt;/strong&gt;. And in the above case, the optimization is not worth the cost it comes with. But why?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setFirstName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above case, &lt;code&gt;useCallback()&lt;/code&gt; is called every time our &lt;code&gt;MyForm&lt;/code&gt; component re-renders. Even though it returns the same function object, still the inline function is created on every render, &lt;code&gt;useCallback&lt;/code&gt; just skips it to have the same reference to the function. Not only that, but we also have the empty dependency array, which itself is doing some work by running through some logical expressions to check if the variables inside have changed, etc.&lt;/p&gt;

&lt;p&gt;So this is not really an optimization since &lt;strong&gt;the optimization costs more than not having the optimization&lt;/strong&gt;. Also, our code is a bit more difficult to read than it was before because of the function being wrapped in a useCallback.&lt;/p&gt;

&lt;p&gt;And as far as inline functions go, this is what &lt;a href="https://reactjs.org/docs/faq-functions.html#is-it-ok-to-use-arrow-functions-in-render-methods"&gt;the official documentation on the React website&lt;/a&gt; says, and &lt;a href="https://reacttraining.com/blog/react-inline-functions-and-performance/"&gt;they are not actually as bad as you think they are&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usememo-different-yet-similar"&gt;
  &lt;/a&gt;
  useMemo different yet similar
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;useMemo&lt;/code&gt; is also very similar to &lt;code&gt;useCallback&lt;/code&gt;, with the only difference that it allows memoization to any value type. It does so by accepting a function that returns a value and is only recomputed when the items in the dependency list change. So again, if I didn't want to initialize something on every render, I could do this right?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MightiestHeroes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;heroes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Iron man&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Thor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hulk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
  &lt;span class="p"&gt;[]);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Does something with heroes, Omitted for brevity */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again the savings are so minimal that making the code more complex isn't worth it, and it's probably worse because of the same reasons, which we discussed in the previous section.&lt;/p&gt;

&lt;p&gt;For a case like this, you would be much better off by defining the array outside the component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;heroes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Iron man&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Thor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hulk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MightiestHeroes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Ommited for brevity &lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#edge-cases-with-memo"&gt;
  &lt;/a&gt;
  Edge cases with memo
&lt;/h3&gt;

&lt;p&gt;The same thing goes with &lt;code&gt;memo&lt;/code&gt;, if we're not careful enough your memoized component might end up doing more work and hence being more inefficient than the normal counterpart&lt;/p&gt;

&lt;p&gt;Take this sandbox for example, how many times do you think this memoized component will render when you are incrementing the count.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/musing-brahmagupta-chx76"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;But shouldn't it render only once because it takes only one &lt;code&gt;children&lt;/code&gt; prop which doesn't appear to be changing across renders? &lt;/p&gt;

&lt;p&gt;&lt;code&gt;memo&lt;/code&gt; does a shallow comparison of the previous props and the new props and re-renders only when the props have changed. So if you've been working with JavaScript for some time then you must be aware of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#strict_equality_using"&gt;Referential Equality&lt;/a&gt; -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prateek&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prateek&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And since &lt;code&gt;typeof children === 'object&lt;/code&gt;, the equality check in memo always returns false, so whenever the parent re-renders, it will cause our memoized component to re-render as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-you-optimize-your-code-without-memoizing"&gt;
  &lt;/a&gt;
  How can you optimize your code without memoizing
&lt;/h2&gt;

&lt;p&gt;In most cases, check if you can split the parts that change from the parts that don't change, this will probably solve most of the problems without needing to use memoization. For example, in the previous React.memo example, if we separate the heavy lifting component from the counting logic, then we can prevent the unnecessary re-renders.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/summer-bird-w6nvm"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;You can checkout Dan Abramov's article &lt;a href="https://overreacted.io/before-you-memo/"&gt;Before you Memo&lt;/a&gt; if you want to read more about it.&lt;/p&gt;

&lt;p&gt;But in some cases, you would need to use the memoization hooks and functions, so let's look at when you should use these methods.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-should-you-actually-memoize"&gt;
  &lt;/a&gt;
  When should you actually memoize
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#usecallback-and-usememo"&gt;
  &lt;/a&gt;
  useCallback and useMemo
&lt;/h3&gt;

&lt;p&gt;The main purpose of &lt;code&gt;useCallback&lt;/code&gt; is to maintain &lt;strong&gt;referential equality&lt;/strong&gt; of a function when passing it to a memoized component or using it in a dependency array (since functions are not referentially equal, as discussed above). For &lt;code&gt;useMemo&lt;/code&gt; apart from referential equality and like &lt;code&gt;memo&lt;/code&gt;, it is also a way to &lt;strong&gt;avoid recomputing expensive calculations.&lt;/strong&gt; Let's understand how they work with some examples -&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#referential-equality"&gt;
  &lt;/a&gt;
  Referential Equality
&lt;/h4&gt;

&lt;p&gt;First, let's see how these hooks help us maintain referential equality, take a look at the following example (keep in mind that this is a contrived example to explain the use case of these hooks, actual implementations will vary)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PokemonSearch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;power&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;realtimeStats&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;searchquery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSearchQuery&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;power&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;searchquery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;usePokemonSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newQuery&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/**
     * Some other stuff related to
     * analytics, omitted for brevity
     */&lt;/span&gt;
    &lt;span class="nx"&gt;setSearchQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newQuery&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;RealTimeStats&lt;/span&gt; &lt;span class="na"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;realtimeStats&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MemoizedSearch&lt;/span&gt; &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;searchquery&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;updateQuery&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;updateQuery&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SearchResult&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;usePokemonSearch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filters&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setResult&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/**
     * Fetch the pokemons using filters
     * and update the loading and result state
     * accordingly, omitted for brevity
     */&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, we have a &lt;code&gt;PokemonSearch&lt;/code&gt; component that uses the &lt;code&gt;usePokemonSearch&lt;/code&gt; custom hook to fetch the pokemons for a given set of filters. Our component receives the weight and power filters from the parent component. It also receives a prop for real-time stats, which changes quite often, as the name suggests.&lt;/p&gt;

&lt;p&gt;Our component itself handles the last filter, called &lt;code&gt;searchQuery&lt;/code&gt;, via &lt;code&gt;useState&lt;/code&gt;. We pass this filter to a memoized component called &lt;code&gt;MemoizedSearch&lt;/code&gt; with a method to update it called &lt;code&gt;updateQuery&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;You might have noticed by now the first problem with our example, every time our &lt;code&gt;PokemonSearch&lt;/code&gt; re-renders, a new reference of our &lt;code&gt;updateQuery&lt;/code&gt; function would be created (which would not be equal to the previous reference because of how referential equality works in JavaScript), causing the &lt;code&gt;MemoizedSearch&lt;/code&gt; component to re-render unnecessarily, even when the &lt;code&gt;searchQuery&lt;/code&gt; is same.&lt;/p&gt;

&lt;p&gt;This is where &lt;code&gt;useCallback&lt;/code&gt; saves the day -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newQuery&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/**
     * Some other stuff related to
     * analytics, omitted for brevity
     */&lt;/span&gt;
    &lt;span class="nx"&gt;setSearchQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newQuery&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This would help us in maintaining the same reference of the &lt;code&gt;updateQuery&lt;/code&gt; function which will avoid the unnecessary re-renders of our &lt;code&gt;MemoizedSearch&lt;/code&gt; component causing it to re-render only when the &lt;code&gt;searchQuery&lt;/code&gt; changes.&lt;/p&gt;

&lt;p&gt;If you check the &lt;code&gt;usePokemonSearch&lt;/code&gt; custom hook, it has a &lt;code&gt;useEffect&lt;/code&gt; that relies on the &lt;code&gt;filters&lt;/code&gt; prop to decide whether to fetch the details of the pokemons whenever it changes. I hope that you noticed the next problem with our example as well. Every time the &lt;code&gt;PokemonSearch&lt;/code&gt; re-renders, let's suppose not due to the change in one of the filters, it creates a new reference to our &lt;code&gt;filters&lt;/code&gt; object, which won't be referentially equal to the last one causing the &lt;code&gt;useEffect&lt;/code&gt; to run with every render of &lt;code&gt;PokemonSearch&lt;/code&gt; and hence making a lot of unnecessary API calls.&lt;/p&gt;

&lt;p&gt;Let's fix this with &lt;code&gt;useMemo&lt;/code&gt; -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;power&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;searchquery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;power&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;searchQuery&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the filter object reference will only be updated when either of our filter changes, thus calling the &lt;code&gt;useEffect&lt;/code&gt; only when one of our filters change.&lt;/p&gt;

&lt;p&gt;So the final code with all the optimizations looks like this -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PokemonSearch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;power&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;realtimeStats&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;searchquery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSearchQuery&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;power&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;searchquery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;power&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;searchQuery&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;usePokemonSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newQuery&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/**
     * Some other stuff related to
     * analytics, omitted for brevity
     */&lt;/span&gt;
    &lt;span class="nx"&gt;setSearchQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newQuery&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;RealTimeStats&lt;/span&gt; &lt;span class="na"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;realtimeStats&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MemoizedSearch&lt;/span&gt; &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;searchquery&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;updateQuery&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;updateQuery&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SearchResult&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;usePokemonSearch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filters&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setResult&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/**
     * Fetch the pokemons using filters
     * and update the loading and result state
     * accordingly, omitted for brevity
     */&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#avoiding-recomputing-expensive-calculation"&gt;
  &lt;/a&gt;
  Avoiding recomputing expensive calculation
&lt;/h4&gt;

&lt;p&gt;Apart from referential equality, the &lt;code&gt;useMemo&lt;/code&gt; hook, similar to the &lt;code&gt;memo&lt;/code&gt; function, serves one more purpose of avoiding recomputing expensive calculations with every render if they are not required.&lt;/p&gt;

&lt;p&gt;For instance, take the following example, if you try to update the name really fast, you will be able to see a certain lag because the 35th Fibonacci number (which is purposefully slow and blocks the main thread while computing) is getting calculated every time your component re-renders even though the position remains the same.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/expensive-calculation-without-usememo-p393q"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Now let's try this with &lt;code&gt;useMemo&lt;/code&gt;.  Try updating the name really fast again and see the difference -&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/expensive-calculation-with-usememo-s8hmx"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;useMemo&lt;/code&gt; we only re-calculate the Fibonacci number only when the position changes thus avoiding the unnecessary main thread work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#memo"&gt;
  &lt;/a&gt;
  memo
&lt;/h3&gt;

&lt;p&gt;If your component re-renders the same result given the same props, &lt;code&gt;React.memo&lt;/code&gt; can give you a performance boost by skipping re-rendering if the props haven't changed.&lt;/p&gt;

&lt;p&gt;Dmitri created a really nice illustration in his article &lt;a href="https://dmitripavlutin.com/use-react-memo-wisely/"&gt;Use React.memo() Wisely&lt;/a&gt; which you should use a general rule of thumb when you're thinking about memoizing a component.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j46UztS8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://prateeksurana.me/blog/img/when-to-use-react-memo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j46UztS8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://prateeksurana.me/blog/img/when-to-use-react-memo.png" alt="When should you use React.memo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enough with the concepts, let's try to understand this with an example on when &lt;code&gt;React.memo&lt;/code&gt; can be handy. In the below sandbox, we have a &lt;code&gt;usePokemon&lt;/code&gt; hook that returns some static and real-time data for a pokemon.&lt;/p&gt;

&lt;p&gt;The static details include the name image and abilities of the Pokemon. In contrast, the real-time info includes details like the number of people who want this Pokemon and the number of people who own the Pokemon, which change quite often.&lt;/p&gt;

&lt;p&gt;These details are rendered by three components &lt;code&gt;PokemonDetails&lt;/code&gt;  which renders the static details, and &lt;code&gt;Cravers&lt;/code&gt; and &lt;code&gt;Owners&lt;/code&gt;, which render the real-time info, respectively.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/pokemon-memo-tdkel"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Now, if you check the console in the above sandbox, it doesn't look good because even though &lt;code&gt;PokemonDetails&lt;/code&gt; consist of static data, it still re-renders every time any of our real-time values change, which is not very performant. So let's use the Checklist by Dmitri mentioned above to see if we should memoize it - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Is it a pure functional component, that given the same props renders the same output?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes, our &lt;code&gt;PokemonDetails&lt;/code&gt; component is functional and renders the same output with the same props ‚úÖ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Does it re-render often?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes, it re-renders often because of the realtime values provided by our custom hook ‚úÖ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Does it re-render with the same props?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes, the props it uses don't change at all across all its renders ‚úÖ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Is it a medium to big size component?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since this is a very contrived example, it isn't really isn't in the sandbox, but for the sake of this example let's assume it is (Although even though isn't very expensive but given that it satisfies the above three conditions it still is a pretty good case for memoization) ‚úÖ&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since our component satisfies the above conditions, let's memoize it -&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/pokemon-memo-forked-1j97f"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you check the console in the above sandbox, you'll see that it gets re-rendered only once, optimizing our code quite a bit by saving us potentially expensive re-renders.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you've reached this far, I assume you get the point I am trying to make here. I'll repeat it &lt;strong&gt;every optimization you do comes with a cost associated with it&lt;/strong&gt;, and the optimization is only worth it if the benefits outweigh the cost. In most cases, you might even not need to apply these methods if you can separate the parts that often change from the parts that don't change that much, as we discussed above.&lt;/p&gt;

&lt;p&gt;I know it's a bit annoying, and maybe in the future, some really smart compiler could automatically take care of these things for you, but till then, we would have to be mindful while using these optimizations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#have-i-read-this-before"&gt;
  &lt;/a&gt;
  Have I read this before?
&lt;/h2&gt;

&lt;p&gt;You might have because some parts of it were inspired by &lt;a href="https://kentcdodds.com/blog/usememo-and-usecallback"&gt;this excellent post&lt;/a&gt; by Kent C. Dodds. I liked the article, and I wanted to share some more ideas with some examples of situations that I have faced. And I have still seen many blog posts and code snippets that use these methods where they are not needed, so I thought this deserved more attention.&lt;/p&gt;

</description>
      <category>react</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Web Sohbet</title>
      <author>sohbetweb</author>
      <pubDate>Sun, 18 Apr 2021 18:26:20 +0000</pubDate>
      <link>https://dev.to/sohbetweb/web-sohbet-5h49</link>
      <guid>https://dev.to/sohbetweb/web-sohbet-5h49</guid>
      <description>&lt;p&gt;Web yazƒ±lƒ±m ve uygulamal geli≈ütirmeyi √ºcretsiz kullanƒ±cƒ±larƒ±n hizmetine sunan netlify, vercel, firebase, github ve gitlab acƒ±k kaynaklƒ± web geli≈ütirme platformlarƒ± sayesinde kendi web yazƒ±lƒ±m ya da uygulamanƒ±zƒ± olu≈üturmak ve web uygulamanƒ±zƒ± √ºcretsiz olu≈üturduƒüunuz platform √ºzerinden yayƒ±nlamak m√ºmk√ºn.&lt;br&gt;
&lt;a href="https://websohbet.sourceforge.io"&gt;https://websohbet.sourceforge.io&lt;/a&gt; sourceforge github ve gitlab destekli proje olu≈üturma ve web √ºzerinden kolayca yayƒ±nlayabileceƒüiniz bir platform&lt;br&gt;
&lt;a href="https://sohbetodalari.web.app"&gt;https://sohbetodalari.web.app&lt;/a&gt; Cloud googlenin √ºcretsiz deploy (ios, adnroid ve web) imkanƒ± sunduƒüu firebase.google.com git ve node.js uygulamalarƒ±n yanƒ± sƒ±ra wordpress web app yayƒ±nlama imkanƒ±da verir.&lt;br&gt;
&lt;a href="https://sohbet.readthedocs.io"&gt;https://sohbet.readthedocs.io&lt;/a&gt; readthedocs web sitesinin kullanƒ±cƒ±larƒ±na saƒüladƒ±ƒüƒ± u√ßretsiz docs web projesi olu≈üturma ve yayƒ±nlama sitesidir. Sphinx uygulamasƒ± ile olu≈üturƒüunuz web sitenizi github ya da gitlab projeniz i√ßerisinde barƒ±ndƒ±rarak readthedocs.io aynasƒ±nda yayƒ±nlayabilirsiniz.&lt;br&gt;
&lt;a href="https://sohbet.vercel.app"&gt;https://sohbet.vercel.app&lt;/a&gt; Vercel cok geni≈ü yelpazeli web uygulama barƒ±ndƒ±rma ve yayƒ±nlama platformudur. Gitlab ya da github √ºzerinde olu≈üturdugunuz web projenizi vercel.app alt alan adlarƒ± ile yayƒ±nlayabilirsiniz.&lt;br&gt;
Yukarƒ±da bahsettiƒüim siteleri yardƒ±mƒ± ile web proje olu≈üturmak ve yayƒ±nlamak son derece basittir. Yazƒ±lƒ±m yada kodlama bilmeden web uygulamasƒ± olu≈üturma ve yayƒ±nlama fƒ±rsatƒ± verir.&lt;/p&gt;

</description>
      <category>node</category>
      <category>git</category>
      <category>vercel</category>
      <category>firebase</category>
    </item>
    <item>
      <title>Desempenho - Economizando mem√≥ria em Structs com StructLayout</title>
      <author>William Santos</author>
      <pubDate>Sun, 18 Apr 2021 18:20:31 +0000</pubDate>
      <link>https://dev.to/wsantosdev/desempenho-economizando-memoria-em-structs-com-struclayout-345p</link>
      <guid>https://dev.to/wsantosdev/desempenho-economizando-memoria-em-structs-com-struclayout-345p</guid>
      <description>&lt;p&gt;Ol√°, este √© um artigo da se√ß√£o &lt;strong&gt;Desempenho&lt;/strong&gt; e, desta vez, vamos falar sobre StructLayout, uma forma de organiza√ß√£o dos campos de uma struct que permite economizar mem√≥ria.&lt;/p&gt;

&lt;p&gt;Antes de come√ßarmos, vale lembrar a raz√£o pela qual utilizamos structs. Structs, de forma resumida, s√£o &lt;em&gt;value types&lt;/em&gt;, que s√£o alocados em um espa√ßo de mem√≥ria n√£o monitorado pelo Garbage Collector chamado &lt;em&gt;stack&lt;/em&gt;, e tem um ciclo de vida restrito ao m√©todo onde foram declarados ou recebidos como argumentos. &lt;/p&gt;

&lt;p&gt;Portanto, utilizar structs representa uma economia de mem√≥ria do ponto de vista da aplica√ß√£o, e de processamento do ponto de vista do &lt;em&gt;runtime&lt;/em&gt;, j√° que o Garbage Collector n√£o sofrer√° press√£o por elas e, consequentemente, ser√° menos acionado.&lt;/p&gt;

&lt;p&gt;Isto dito, vamos entender como structs s√£o alinhadas na mem√≥ria.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alinhamento-em-mem%C3%B3ria"&gt;
  &lt;/a&gt;
  Alinhamento em Mem√≥ria
&lt;/h2&gt;

&lt;p&gt;O que √© alinhamento em mem√≥ria? √â a forma como o compilador distribui os bytes que ser√£o alocados para a sua struct na mem√≥ria. Por padr√£o, strcuts s√£o alinhadas em pacotes cujo tamaho √© dado de acordo com o tamanho do maior campo presente. Ou seja, se o maior campo de uma struct for um inteiro de 64bit, que tem 8 bytes, os campos de sua struct ser√£o alinhados em blocos de 8 bytes.&lt;/p&gt;

&lt;p&gt;Imagine a seguinte struct:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Lab.Desempenho.StructLayout&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Struct1&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;byte&lt;/span&gt; &lt;span class="n"&gt;Byte&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Seu alinhamento em mem√≥ria seria o seguinte:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Paddings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="nf"&gt;bytes&lt;/span&gt; &lt;span class="p"&gt;(%&lt;/span&gt;&lt;span class="m"&gt;18&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="n"&gt;space&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;|===============================|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Byte&lt;/span&gt; &lt;span class="nf"&gt;Byte&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|-------------------------------|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;padding&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|-------------------------------|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Int32&lt;/span&gt; &lt;span class="nf"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|-------------------------------|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="m"&gt;15&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Int64&lt;/span&gt; &lt;span class="nf"&gt;Long&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|===============================|&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Repare no seguinte: lendo do final do para o come√ßo da tabela acima, temos nesta struct um campo &lt;code&gt;long&lt;/code&gt; (inteiro de 64 bits, com 8 bytes), e ele determina o tamanho dos blocos de alinhamento em mem√≥ria da struct por padr√£o por ser o maior campo. Acima dele, temos 4 bytes de nosso campo &lt;code&gt;int&lt;/code&gt; (4 bytes), um &lt;code&gt;padding&lt;/code&gt; (3 bytes) e nosso campo &lt;code&gt;byte&lt;/code&gt; (1 byte).&lt;/p&gt;

&lt;p&gt;Agora, voc√™ pode estar se perguntando, o que √© esse &lt;code&gt;padding&lt;/code&gt;? Ele √© o respons√°vel por garantir que nossa struct ser√° alinhada em blocos de 8 bytes. Ou seja, caso em vez de um &lt;code&gt;int&lt;/code&gt; e um &lt;code&gt;byte&lt;/code&gt; tiv√©ssemos dois &lt;code&gt;byte&lt;/code&gt;, esse &lt;code&gt;padding&lt;/code&gt; seria de 6 bytes em vez de 3, pois 6 bytes seria a diferen√ßa do tamanho do bloco, 8 bytes, para os 2 bytes dos campos &lt;code&gt;byte&lt;/code&gt; declarados.&lt;/p&gt;

&lt;p&gt;Um detalhe muito interessante aqui √© que a ordem dos campos importa, j√° que o alinhamento tamb√©m √© dado por ele. Ent√£o, veja este outro exemplo com a mesma struct, mas trocando a ordem de nosso campo &lt;code&gt;long&lt;/code&gt; com nosso campo &lt;code&gt;int&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Lab.Desempenho.StructLayout&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Struct1&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;byte&lt;/span&gt; &lt;span class="n"&gt;Byte&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Seu alinhamento passaria a ser o seguinte:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Paddings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt; &lt;span class="nf"&gt;bytes&lt;/span&gt; &lt;span class="p"&gt;(%&lt;/span&gt;&lt;span class="m"&gt;45&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="n"&gt;space&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;|=============================|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Byte&lt;/span&gt; &lt;span class="nf"&gt;Byte&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|-----------------------------|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;padding&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|-----------------------------|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="m"&gt;15&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Int64&lt;/span&gt; &lt;span class="nf"&gt;Long&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|-----------------------------|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="m"&gt;19&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Int32&lt;/span&gt; &lt;span class="nf"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|-----------------------------|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;padding&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|=============================|&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Repare em um detalhe fundamental: n√£o apenas a organiza√ß√£o dos blocos mudou, como o tamanho da struct aumentou em 8 bytes!&lt;/p&gt;

&lt;p&gt;Isso aconteceu porque, como o alinhamento √© dado pelo campo de maior tamanho e pela ordem de declara√ß√£o, foi necess√°rio aumentar o primeiro &lt;code&gt;padding&lt;/code&gt; de 3 para 7 bytes, para acompanhar o tamanho do campo &lt;code&gt;long&lt;/code&gt; e, para que o campo &lt;code&gt;int&lt;/code&gt; tamb√©m o acompanhasse, foi necess√°rio criar um novo &lt;code&gt;padding&lt;/code&gt; com 4 bytes.&lt;/p&gt;

&lt;p&gt;Ou seja, apenas por for√ßa da ordem de declara√ß√£o de seus campos, sua struct ficou 11 bytes maior!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#structlayout-lidando-com-o-alinhamento"&gt;
  &lt;/a&gt;
  StructLayout: lidando com o alinhamento
&lt;/h2&gt;

&lt;p&gt;Agora que entendemos como nossas structs s√£o alinhadas na mem√≥ria, a pergunta que fica √©: como lidamos com isso e evitamos os &lt;code&gt;paddings&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Existem duas formas de resolver este problema. Um deles, que voc√™ j√° deve ter imaginado, √© organizar os campos em uma sequ√™ncia que resulte na menor quantidade e tamanho poss√≠vel de &lt;code&gt;paddings&lt;/code&gt;. Mas h√° uma outra forma, fornecida pelo pr√≥prio .Net que nos ajuda com essa tarefa ingrata, o atributo &lt;code&gt;StructLayout&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Com este atributo, podemos n√£o apenas definir a ordem pela qual nossos campos ser√£o distribu√≠dos pelo compilador como, tamb√©m, informar o tamanho do bloco de alinhamento, de modo a controlar a ocorr√™ncia de paddings.&lt;/p&gt;

&lt;p&gt;Vejamos um exemplo com uma nova vers√£o da mesma struct:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Runtime.InteropServices&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Lab.Desempenho.StructLayout&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;StructLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LayoutKind&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Auto&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Struct2&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;byte&lt;/span&gt; &lt;span class="n"&gt;Byte&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O resultado ser√° o seguinte:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Paddings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="nf"&gt;bytes&lt;/span&gt; &lt;span class="p"&gt;(%&lt;/span&gt;&lt;span class="m"&gt;18&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="n"&gt;space&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;|=============================|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Int64&lt;/span&gt; &lt;span class="nf"&gt;Long&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|-----------------------------|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Int32&lt;/span&gt; &lt;span class="nf"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|-----------------------------|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;    &lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Byte&lt;/span&gt; &lt;span class="nf"&gt;Byte&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|-----------------------------|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="m"&gt;15&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;padding&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|=============================|&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Repare que, neste caso, usando o atributo &lt;code&gt;StructLayout&lt;/code&gt; e informando o &lt;code&gt;LayoutKind&lt;/code&gt; como &lt;code&gt;Auto&lt;/code&gt;, o compilador se encarregou de organizar nossos campos do maior para o menor, utilizando o &lt;code&gt;padding&lt;/code&gt; de 3 bytes apenas para compensar o restante para completar os 8 bytes de nosso &lt;code&gt;long&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ou seja, utilizando o atributo com esta configura√ß√£o, nos livramos do trabalho para organizar nossos campos. &lt;/p&gt;

&lt;p&gt;Legal. N√©? Mas tem mais!&lt;/p&gt;

&lt;p&gt;√â poss√≠vel n√£o apenas determinar a ordem de alinhamento dos campos como, tamb√©m, definir o tamanho do pacote de alinhamento.&lt;/p&gt;

&lt;p&gt;Vejamos um novo exemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Runtime.InteropServices&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Lab.Desempenho.StructLayout&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;StructLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LayoutKind&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sequential&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Pack&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Struct3&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Int2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Repare que, aqui, temos o &lt;code&gt;LayoutKind.Sequential&lt;/code&gt;, que significa que o alinhamento vai seguir a mesma ordem definida no c√≥digo (que √© a op√ß√£o padr√£o). Al√©m disso, introduzimos uma propriedade chamada &lt;code&gt;Pack&lt;/code&gt;, que √© o tamanho do pacote de alinhamento dos bytes de nossos campos, com o valor 4. Isso significa que ser√£o criados blocos com 4 bytes para alinhar nossos campos, e n√£o mais 8 como seria o padr√£o dado pelo campo de maior tamanho (nosso, &lt;code&gt;long&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Portanto, o resultado ser√° o seguinte:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Paddings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nf"&gt;bytes&lt;/span&gt; &lt;span class="p"&gt;(%&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="n"&gt;space&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;|=============================|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Int32&lt;/span&gt; &lt;span class="nf"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|-----------------------------|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Int64&lt;/span&gt; &lt;span class="nf"&gt;Long&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|-----------------------------|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="m"&gt;15&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Int32&lt;/span&gt; &lt;span class="nf"&gt;Int2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|=============================|&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E voi l√°! Temos apenas os 16 bytes de nossos campos sendo alinhados. Nosso &lt;code&gt;long&lt;/code&gt; √© entendido como uma sequ√™ncia com dois blocos com 4 bytes cada, e isso permite que nossa struct evite dos dois paddings com 4 bytes que seriam criados caso a propriedade &lt;code&gt;Pack&lt;/code&gt; n√£o tivesse sido definida.&lt;/p&gt;

&lt;p&gt;Vamos colocar a afirma√ß√£o acima a prova?&lt;/p&gt;

&lt;p&gt;A struct abaixo tem a mesma distribui√ß√£o de campos do exemplo acima, mas dispensa o atributo &lt;code&gt;StructLayout&lt;/code&gt; e, por consequ√™ncia, a propriedade &lt;code&gt;Pack&lt;/code&gt; (lembrando que a aus√™ncia do atributo tem o mesmo efeito de declarar seu &lt;code&gt;LayoutKind&lt;/code&gt; como &lt;code&gt;Sequential&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Lab.Desempenho.StructLayout&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Struct4&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Int2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Veja o resultado abaixo: temos agora n√£o mais 16 bytes, mas 24. Isso porque a aus√™ncia da propriedade &lt;code&gt;Pack&lt;/code&gt; de &lt;code&gt;StructLayout&lt;/code&gt; fez retornar o comportamento padr√£o, que √© definir o tamanho do pacote a partir do campo de maior tamanho.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Paddings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="nf"&gt;bytes&lt;/span&gt; &lt;span class="p"&gt;(%&lt;/span&gt;&lt;span class="m"&gt;33&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="n"&gt;space&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;|=============================|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Int32&lt;/span&gt; &lt;span class="nf"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|-----------------------------|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;   &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;padding&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|-----------------------------|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="m"&gt;15&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Int64&lt;/span&gt; &lt;span class="nf"&gt;Long&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|-----------------------------|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="m"&gt;19&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Int32&lt;/span&gt; &lt;span class="nf"&gt;Int2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|-----------------------------|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;padding&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|=============================|&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclus√£o:
&lt;/h2&gt;

&lt;p&gt;Pudemos observar como um detalhe simples, como a forma como distribu√≠mos os campos em nossas structs pode afetar seu tamanho final e, por consequ√™ncia, o desempenho de nossa aplica√ß√£o. Sem d√∫vida uma quest√£o t√£o interessante quanto pouco conhecida.&lt;/p&gt;

&lt;p&gt;Mas t√£o interessante quando conhecer este comportamento do alinhamento das structs, √© compreender os comportamentos do compilador do C#. Conhecer a maneira como ele traduz nosso c√≥digo nos d√° uma vis√£o de como promover otimiza√ß√µes em nosso c√≥digo com um m√≠nimo de esfor√ßo.&lt;/p&gt;

&lt;p&gt;Em fututos posts da se√ß√£o &lt;strong&gt;Desempenho&lt;/strong&gt; traremos mais detalhes sobre como podemos extrair maior velocidade de execu√ß√£o e maior economia de recursos utilizando pequenos truques, sejam eles a partir de ferramentas do pr√≥prio .Net como neste caso, ou atrav√©s de simples mudan√ßas na escrita de nosso c√≥digo.&lt;/p&gt;

&lt;p&gt;Como de costume, segue um projeto de exemplo no &lt;a href="https://github.com/wsantosdev/lab-desempenho-structlayout"&gt;Github&lt;/a&gt; para verificar os resultados obtidos no post. Para a gera√ß√£o destes relat√≥rios √© utilizado um componente muito interessante, o &lt;a href="https://github.com/SergeyTeplyakov/ObjectLayoutInspector"&gt;ObjectLayoutInspector&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Gostou? Me deixe saber pelos indicadores. Tem d√∫vidas ou sugest√µes? Deixe um coment√°rio ou me procure pelas redes sociais.&lt;/p&gt;

&lt;p&gt;At√© a pr√≥xima!&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
      <category>performance</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>3-2-1 Newsletter: 2 must-have tools for content creation</title>
      <author>kapeel kokane</author>
      <pubDate>Sun, 18 Apr 2021 18:11:56 +0000</pubDate>
      <link>https://dev.to/comscience/3-2-1-newsletter-2-must-have-tools-for-content-creation-c7n</link>
      <guid>https://dev.to/comscience/3-2-1-newsletter-2-must-have-tools-for-content-creation-c7n</guid>
      <description>&lt;h3&gt;
  &lt;a href="#hi-there"&gt;
  &lt;/a&gt;
  Hi There!üëãüèæ
&lt;/h3&gt;

&lt;p&gt;üôèüèæ Welcome to my blog newsletter where every week, I share a 3-2-1 &lt;strong&gt;curated list&lt;/strong&gt; consisting of my content and also what resonated with me over the last week.&lt;/p&gt;

&lt;p&gt;üëâüèæ In this week's post, we have &lt;strong&gt;3 tweets&lt;/strong&gt;, &lt;strong&gt;2 awesome tools&lt;/strong&gt; for content creation, and &lt;strong&gt;1 video editor&lt;/strong&gt; that will help you better understand asynchronous JavaScript!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tweets"&gt;
  &lt;/a&gt;
  3Ô∏è‚É£ tweets
&lt;/h3&gt;

&lt;p&gt;1] A single page &lt;strong&gt;#sketchnote&lt;/strong&gt; created to help understand the concept of &lt;strong&gt;IIFE&lt;/strong&gt; in JavaScript.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1l_mbDFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EzRi2nfVkAUUkmV.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tCoQBxER--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1372919009939652612/E9s309tH_normal.jpg" alt="Kapeel üíô Typescript profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Kapeel üíô Typescript
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @kokaneka
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Do you know what an IIFE in JavaScript is?&lt;br&gt;&lt;br&gt;Day 31:  Here's a &lt;a href="https://twitter.com/hashtag/sketchnotes"&gt;#sketchnotes&lt;/a&gt; document that I created on the topic. &lt;br&gt;&lt;br&gt;All of my sketchnotes on &lt;a href="https://twitter.com/gumroad"&gt;@gumroad&lt;/a&gt; :&lt;br&gt;&lt;a href="https://t.co/MXg7OJTfjl"&gt;gumroad.com/kapeelkokane&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/javaScript"&gt;#javaScript&lt;/a&gt; basics series&lt;br&gt;&lt;a href="https://twitter.com/hashtag/100DaysOfCode"&gt;#100DaysOfCode&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/CodeNewbies"&gt;#CodeNewbies&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/webdev"&gt;#webdev&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:48 PM - 18 Apr 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1383839829281021955" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1383839829281021955" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1383839829281021955" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;2] A single-line code solution to find the &lt;strong&gt;smallest element&lt;/strong&gt; in a JavaScript array.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Mz5OaEv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EzHNZGSVEAI11YB.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tCoQBxER--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1372919009939652612/E9s309tH_normal.jpg" alt="Kapeel üíô Typescript profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Kapeel üíô Typescript
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @kokaneka
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Need to find the smallest element in an array? ü§î&lt;br&gt;&lt;br&gt;Day 30:  Here's a 1 line code that uses Math.min() and the spread operator&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/javaScript"&gt;#javaScript&lt;/a&gt; basics series&lt;br&gt;&lt;a href="https://twitter.com/hashtag/100DaysOfCode"&gt;#100DaysOfCode&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/CodeNewbies"&gt;#CodeNewbies&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/webdev"&gt;#webdev&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:38 PM - 16 Apr 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1383112466989686787" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1383112466989686787" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1383112466989686787" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;3] The array &lt;strong&gt;utility method&lt;/strong&gt; to &lt;code&gt;fill&lt;/code&gt; an entire array with a value. Helps in pre-filling with default value.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MzG2mUG---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/Ey8THx-VcAIMoN8.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tCoQBxER--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1372919009939652612/E9s309tH_normal.jpg" alt="Kapeel üíô Typescript profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Kapeel üíô Typescript
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @kokaneka
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Want to replace all the items of an array with a value?ü§î&lt;br&gt;&lt;br&gt;Day 28:  use Array.prototype.fill()&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/javaScript"&gt;#javaScript&lt;/a&gt; basics series&lt;br&gt;&lt;a href="https://twitter.com/hashtag/100DaysOfCode"&gt;#100DaysOfCode&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/CodeNewbies"&gt;#CodeNewbies&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/webdev"&gt;#webdev&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:48 PM - 14 Apr 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1382345063645155333" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1382345063645155333" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1382345063645155333" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h3&gt;
  &lt;a href="#tools-for-content-creation"&gt;
  &lt;/a&gt;
  2Ô∏è‚É£ tools for content creation
&lt;/h3&gt;

&lt;p&gt;These are the 2 tools that I find myself using regularly.&lt;/p&gt;

&lt;p&gt;1] The first one is &lt;a href="https://carbon.now.sh/"&gt;carbon&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mE3hWpP8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qba4evqdt79t860gpe64.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mE3hWpP8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qba4evqdt79t860gpe64.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
This tool helps you generate &lt;strong&gt;beautiful code snippets&lt;/strong&gt; and download a rendered image. It also allows for various levels of customization like &lt;em&gt;borders, shadows, fonts&lt;/em&gt;, etc. &lt;/p&gt;

&lt;p&gt;2] The second one is &lt;a href="https://excalidraw.com/"&gt;excalidraw&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BoTCpDt1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2s7h955a6e02ptm3scwq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BoTCpDt1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2s7h955a6e02ptm3scwq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
This tool lets us create &lt;strong&gt;flow charts&lt;/strong&gt; or rather any sort of drawings with a &lt;strong&gt;hand-drawn&lt;/strong&gt; feel to them. If you are into creating complex charts and want to make them different, give this tool a try.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  1Ô∏è‚É£ video
&lt;/h3&gt;

&lt;p&gt;If you want to truly understand &lt;strong&gt;asynchronous JavaScript&lt;/strong&gt;, I highly recommend this video that I came across recently. It's from the &lt;strong&gt;Google Chrome Developers&lt;/strong&gt; YouTube channel where two Google devs discuss the different caveats associated with async JavaScript:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8eHInw9_U8k"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you liked that curated list, make sure you &lt;strong&gt;follow me&lt;/strong&gt; on &lt;a href="https://twitter.com/Kokaneka"&gt;Twitter&lt;/a&gt; so that you get the resources in your feed the day I post it, instead of later down the week as a part of this newsletter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/Kokaneka"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--158Tju2z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3p4a72xpzv710bg6hfax.png" alt="My twitter profile"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope that helped! As always, keep rocking.&lt;br&gt;
Cheers üëêüèΩ :)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to deploy/update new Ghost version 4 to Heroku</title>
      <author>Lovekesh Kumar</author>
      <pubDate>Sun, 18 Apr 2021 18:02:52 +0000</pubDate>
      <link>https://dev.to/thelovekesh/how-to-deploy-update-new-ghost-version-4-to-heroku-dhg</link>
      <guid>https://dev.to/thelovekesh/how-to-deploy-update-new-ghost-version-4-to-heroku-dhg</guid>
      <description>&lt;p&gt;Ghost has currently rolled out its newer V4 publicly. The newer version of Ghost comes with fancy and new powerful features. After the launch of v4, many users who are using v3 on Heroku are in great trouble and don't know that how to trouble this problem and update to the latest version 4.&lt;/p&gt;

&lt;p&gt;Well, the problem has been solved with the brand new &lt;code&gt;ghost-v4-on-heroku&lt;/code&gt; repo. Anyone can deploy the latest ghost v4 on Heroku by simply clicking on a button.&lt;/p&gt;

&lt;p&gt;You can visit any of the links to deploy Ghost version 4 on Heroku or you can update your pre-deployed Ghost version 3 to version 4.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/thelovekesh/ghost-v4-on-heroku"&gt;GitHub Repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://heroku.com/deploy?template=https://github.com/thelovekesh/ghost-v4-on-heroku"&gt;Deploy on Heroku&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#problems-or-need-help"&gt;
  &lt;/a&gt;
  Problems or need help?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ask.codebulbs.com/"&gt;Ask Question&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/thelovekesh/ghost-v4-on-heroku/issues/new/"&gt;Open an Issue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/thelovekesh/ghost-v4-on-heroku/discussions"&gt;Use GitHub Discussions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#you-can-perform-some-more-actions-"&gt;
  &lt;/a&gt;
  You can perform some more actions ;)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/thelovekesh/ghost-v4-on-heroku/"&gt;Star the repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/thelovekesh/ghost-v4-on-heroku/fork"&gt;Fork the repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>heroku</category>
      <category>ghost</category>
      <category>ghostblog</category>
      <category>ghostv4</category>
    </item>
    <item>
      <title>What‚Äôs an Example of Good E-Commerce Database Design?</title>
      <author>Shanika Wickramasinghe</author>
      <pubDate>Sun, 18 Apr 2021 18:02:06 +0000</pubDate>
      <link>https://dev.to/fabric_commerce/what-s-an-example-of-good-e-commerce-database-design-3e9l</link>
      <guid>https://dev.to/fabric_commerce/what-s-an-example-of-good-e-commerce-database-design-3e9l</guid>
      <description>&lt;h1&gt;
  &lt;a href="#whats-an-example-of-good-ecommerce-database-design"&gt;
  &lt;/a&gt;
  What's an Example of Good E-Commerce Database Design?
&lt;/h1&gt;

&lt;p&gt;Databases are vital tools for storing, managing and retrieving information, and they are critical for building an e-commerce system. A well-structured database is the heart of a good e-commerce system that manages all the interactions of the system.&lt;/p&gt;

&lt;p&gt;A good e-commerce database design should include the following characteristics.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Simple and Functional Database Structure&lt;/strong&gt;&lt;br&gt;
The database table structure should be relatively simple but needs to cover all the required functionality without compromising the user experience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;High Performance&lt;/strong&gt;&lt;br&gt;
The database queries should execute fastly and efficiently to facilitate live customer interactions and provide a satisfactory shopping experience. Therefore, the selected database should consist of good indexing and performance optimization options.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;High Availability and Scalability&lt;/strong&gt;&lt;br&gt;
A good database design should be highly available with automatic snapshots and enable automatic scaling to support future platform growth as well as sudden traffic spikes.&lt;/p&gt;

&lt;p&gt;Based on the above characteristics, an e-commerce database design boils down into three major aspects as the following.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; The Scope of the Database.&lt;/li&gt;
&lt;li&gt; Type of the Database.&lt;/li&gt;
&lt;li&gt; Database Infrastructure.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The scope refers to the planned functionality of the database. The underlying table structure of the database, its relationships, and indexes all depend on the functionality of the e-commerce platform. The database type can vary from a relational database to a NoSQL database or a hybrid approach depending on the requirements and the underlying data structure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-scope-of-the-database"&gt;
  &lt;/a&gt;
  The Scope of the Database.
&lt;/h2&gt;

&lt;p&gt;The main consideration when designing the database is identifying the functionalities offered by the e-commerce platform. These functionalities can be further divided as core-functions and extra-functions (additional-functions).&lt;/p&gt;

&lt;p&gt;Core-functions are the functions that are necessary for facilitating the day-to-day operations of the e-commerce platform.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  User Management&lt;/li&gt;
&lt;li&gt;  Product/Inventory Management&lt;/li&gt;
&lt;li&gt;  Shopping Cart Function &lt;/li&gt;
&lt;li&gt;  Payment Management
&lt;/li&gt;
&lt;li&gt;  Shipping/Logistics Management&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Extra/Additional functions are the nice-to-have functions for the e-commerce platform that will enhance the user experience for both end-users (customers) and administrators (business). Following are some functions that come under this category.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Marketing Functions&lt;/li&gt;
&lt;li&gt;  Help Desk/Support&lt;/li&gt;
&lt;li&gt;  Advanced Analytics
&lt;/li&gt;
&lt;li&gt;  Third-Party Integrations&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#database-structure-for-corefunctions"&gt;
  &lt;/a&gt;
  Database Structure for Core-Functions
&lt;/h2&gt;

&lt;p&gt;In this section, let's see how to structure the database to facilitate the core functions. The below table structure is an example of a database design that covers the core functionality of an e-commerce platform.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z-_2SDwR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hs-fs/hubfs/ecommerce-platform-data-1.png%3Fwidth%3D1331%26name%3Decommerce-platform-data-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z-_2SDwR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hs-fs/hubfs/ecommerce-platform-data-1.png%3Fwidth%3D1331%26name%3Decommerce-platform-data-1.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This example covers all the basics of an e-commerce platform. There, the table fields and indexes depend on the design of the overall platform, and it contains three separate sections for user management, product management, and shopping process. Let's have a closer look at each section.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#user-management"&gt;
  &lt;/a&gt;
  User Management
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ojs2L5GJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hs-fs/hubfs/user-table-ecommerce-2.png%3Fwidth%3D561%26name%3Duser-table-ecommerce-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ojs2L5GJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hs-fs/hubfs/user-table-ecommerce-2.png%3Fwidth%3D561%26name%3Duser-table-ecommerce-2.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have created a user table that contains all the user details along with user_payment and user_address tables to store multiple addresses and payment details of users. This structure offers more granular control over data while eliminating duplicate records.&lt;/p&gt;

&lt;p&gt;Another way to manage users is by creating two separate user tables for end-users and administrators and assigning relationships according to their requirements, as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Kbo3QtL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hs-fs/hubfs/user-administrator-ecommerce-table-3.png%3Fwidth%3D1157%26name%3Duser-administrator-ecommerce-table-3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Kbo3QtL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hs-fs/hubfs/user-administrator-ecommerce-table-3.png%3Fwidth%3D1157%26name%3Duser-administrator-ecommerce-table-3.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#product-management"&gt;
  &lt;/a&gt;
  Product Management
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_dI5c3Xv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hs-fs/hubfs/product-management-ecommerce-table-4.png%3Fwidth%3D618%26name%3Dproduct-management-ecommerce-table-4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_dI5c3Xv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hs-fs/hubfs/product-management-ecommerce-table-4.png%3Fwidth%3D618%26name%3Dproduct-management-ecommerce-table-4.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Managing products is not simply about maintaining a list of products. You also have to manage the inventory, discounts, categories, and other attributes of the products. So, always focus on simplifying the data structure while reducing duplicates. In the above table structure, the main product table contains information about the products.&lt;/p&gt;

&lt;p&gt;There are two other separate tables called discount, product_inventory, and product_category that are connected to it through database relationships. This approach provides the greatest level of flexibility to the database. For instance, we can simply query the product_inventory table to check for inventory without going through all the data associated with other related tables. This is also a good place to utilize indexes to increase the performance of the database.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shopping-process"&gt;
  &lt;/a&gt;
  Shopping Process
&lt;/h3&gt;

&lt;p&gt;This is the most critical and complex part when it comes to designing the database. The shopping process will guide a user to search the products, add the desired products to the shopping cart, and finally complete the transaction using a payment provider.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jnuh7_F6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hs-fs/hubfs/shopping-process-ecomerce-data-table-5.png%3Fwidth%3D1100%26name%3Dshopping-process-ecomerce-data-table-5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jnuh7_F6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hs-fs/hubfs/shopping-process-ecomerce-data-table-5.png%3Fwidth%3D1100%26name%3Dshopping-process-ecomerce-data-table-5.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The heart of the e-commerce process connects users with products. A good chunk of design effort should be exhausted to streamline the shopping process. In the above example, there are shopping_session and cart_item as temporary data stores that only store the shopping session information of the current user until the order is confirmed and the data is moved to permanent storage tables with the payment details. (order_details, order_items, and payment details.). You can check out this article for a detailed explanation of how to design a shopping cart database.&lt;/p&gt;

&lt;p&gt;As shown in this section, the scope of the database structure is determined by the overall functionality of the platform. Therefore, it is paramount that you properly define the required functionality before diving into designing the database. This way, you can create a clearly defined data structure with enough flexibility to support future expansions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#type-of-the-database"&gt;
  &lt;/a&gt;
  Type of the Database
&lt;/h2&gt;

&lt;p&gt;The next consideration is to determine the type of database. To have the best e-commerce database design, you must first consider two main database types: RDBMS or NoSQL databases.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Relational database:&lt;/strong&gt; This is similar to spreadsheets and uses tables, columns, and rows to organize and retrieve data. It is built using the standard query language (SQL), and all the data is related to each other.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; MySQL, PostgreSQL, MariaDB, Microsoft SQL, Amazon RDS, Azure SQL Database&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Non-relational or NoSQL database:&lt;/strong&gt; This is a nontabular database with a flexible schema that works well for storing unstructured data. Contrary to its name, a non-relational database can store related data. It does so by nesting related data within a single data structure instead of splitting them between tables. There are various NoSQL databases, and the most popular ones are document stores and key stores.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; MongoDB, Apache Cassandra, Amazon DynamoDB, Azure CosmosDB, Couchbase.&lt;/p&gt;

&lt;p&gt;Both these database types are solid options for any e-commerce platform, and the choice is up to the designer and depends on the requirements of the platform. A relational database will provide a simple and robust platform to create the database, while NoSQL offers better data flexibility, scalability, and slightly better performance. In the coming section, we'll explore an example of e-commerce database design for each type.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ecommerce-database-design-examples"&gt;
  &lt;/a&gt;
  E-Commerce Database Design Examples
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#relational-database-design"&gt;
  &lt;/a&gt;
  Relational Database Design
&lt;/h4&gt;

&lt;p&gt;Many e-commerce sellers use a relational database design centered around the following tables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Products table&lt;/li&gt;
&lt;li&gt;  Customers/Users table&lt;/li&gt;
&lt;li&gt;  Orders table&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additional tables can be added as required to support shipping, categories, product reviews, etc. We have covered the database structure in the previous section, where the scope of the database was defined.&lt;/p&gt;

&lt;p&gt;Below, you can see a diagram of a simple e-commerce database design built using MySQL.&lt;/p&gt;

&lt;p&gt;MySQL e-commerce database design&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2YwRuFJz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hs-fs/hubfs/MySQL%2520e-commerce%2520database%2520design%25206%2520.png%3Fwidth%3D753%26name%3DMySQL%2520e-commerce%2520database%2520design%25206%2520.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2YwRuFJz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hs-fs/hubfs/MySQL%2520e-commerce%2520database%2520design%25206%2520.png%3Fwidth%3D753%26name%3DMySQL%2520e-commerce%2520database%2520design%25206%2520.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While a standard relational database design will work for many e-commerce stores, there are situations where it is advantageous for retailers to follow another approach.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#nosql-database-design"&gt;
  &lt;/a&gt;
  NoSQL database design
&lt;/h4&gt;

&lt;p&gt;Most of the world's largest online retailers, including Walmart and eBay, use NoSQL databases to power their e-commerce systems. The reason is NoSQL databases providing the required performance and scalability to effectively manage large catalogs and unstructured data like user data and images.&lt;/p&gt;

&lt;p&gt;A good example of an e-commerce database built using NoSQL technology is CouchBase, which uses a document store as its database type. With a document database, data is simpler and easier to access as an entire product can be stored in a single document instead of storing across multiple tables.&lt;/p&gt;

&lt;p&gt;Below, you can see an example of data modeling for different products with CouchBase's NoSQL database.&lt;/p&gt;

&lt;p&gt;CouchBase NoSQL data structure&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pyEcJDFm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hs-fs/hubfs/CouchBase%2520NoSQL%2520data%2520structure%25207.png%3Fwidth%3D784%26name%3DCouchBase%2520NoSQL%2520data%2520structure%25207.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pyEcJDFm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hs-fs/hubfs/CouchBase%2520NoSQL%2520data%2520structure%25207.png%3Fwidth%3D784%26name%3DCouchBase%2520NoSQL%2520data%2520structure%25207.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://info.couchbase.com/rs/302-GJY-034/images/Database_design_retail_inventory_product_catalogs.pdf"&gt;source&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hybrid-database"&gt;
  &lt;/a&gt;
  Hybrid Database
&lt;/h3&gt;

&lt;p&gt;Another exciting option is to use a combined solution utilizing an RDBMS for structured data such as user details, order details, payment details, and a NoSQL database for unstructured data such as product details or marketing information.&lt;/p&gt;

&lt;p&gt;Hybrid database structure&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i5ALJqhZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hs-fs/hubfs/Hybrid%2520ecommerce%2520database%2520structure%25208%2520.png%3Fwidth%3D394%26name%3DHybrid%2520ecommerce%2520database%2520structure%25208%2520.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i5ALJqhZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hs-fs/hubfs/Hybrid%2520ecommerce%2520database%2520structure%25208%2520.png%3Fwidth%3D394%26name%3DHybrid%2520ecommerce%2520database%2520structure%25208%2520.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Creating a Hybrid database structure is relatively more complex than using traditional database types (RDBMS or NoSQL) as a hybrid approach will utilize the application to combine data from both sources. This allows the developer to combine the strengths of both database types. However, this kind of approach is only suitable for truly complex application architectures that offer users a myriad of functions. For instance, if your purpose is to speed up an RDBMS, it's easier to configure a caching server such as Memcached rather than going for a hybrid approach.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#database-infrastructure"&gt;
  &lt;/a&gt;
  Database Infrastructure
&lt;/h1&gt;

&lt;p&gt;It is possible to select a database type and design the data structure, but we also need infrastructure to run the database. It depends on the deployment of the e-commerce platform. One option is to provision a server, install the database software and then manage all the aspects from security to maintenance. The other option is to use a managed database service like Amazon RDS, Azure SQL for RDBMS, Amazon DynamoDB, or Azure CosmosDB for NoSQL. Among these two options, the managed approach saves time and does not require any maintenance as these are SaaS offerings.&lt;/p&gt;

&lt;p&gt;Suppose you need complete control over your data, database configurations, and server security policies or deploy the database on a private network. In that case, the only option is to configure and maintain the database manually. However, with more and more businesses utilizing cloud providers nowadays, the best option would be to use a managed database. It is more applicable for an e-commerce platform where scalability and availability play a vital role in the success of the platform. So, it's almost always advisable to use a SaaS database.&lt;/p&gt;

&lt;p&gt;A managed database will offer peace of mind for any developer as it is backed by a reputed cloud provider with a service level agreement to provide maximum uptime. It will also enable the developer/administrators to focus more on creating and optimizing the database without dealing with server or database maintenance. A slight downside of a managed platform would be the higher cost associated with it when compared to managing own servers. However, when considering the total cost of ownership (TCO) and operational expenditure (OpEx), a SaaS solution is the ideal option for a growing e-commerce database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pim-software-for-multichannel-sellers"&gt;
  &lt;/a&gt;
  PIM Software for Multichannel Sellers
&lt;/h2&gt;

&lt;p&gt;Product Information Management (PIM) is a critical component of the core functionality of any good e-commerce platform. It provides a flexible solution for managing all your product data inside a single database in the cloud. Moreover, PIM is an excellent option for retailers looking to sell on multiple channels. Having a centralized database in the cloud, PIM allows easy management and delivery of product information to other marketplaces.&lt;/p&gt;

&lt;p&gt;Another main advantage of PIM is the ability to collect and organize data in a variety of formats. Different platforms have their own catalog structure, and PIM automatically sends data to these channels in the proper format.&lt;/p&gt;

&lt;p&gt;Fabric's PIM is one of the best examples of e-commerce database design using PIM software. It serves as a single source for centralizing all your data in the cloud, allowing businesses to benefit from increased productivity while ensuring all information is accurate and up to date across various channels.&lt;/p&gt;

</description>
      <category>ecommerce</category>
      <category>database</category>
      <category>sql</category>
      <category>nosql</category>
    </item>
  </channel>
</rss>
