<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Announcing Appwrite 0.9: The open source Firebase alternative </title>
      <author>Christy Jacob</author>
      <pubDate>Wed, 07 Jul 2021 14:27:41 +0000</pubDate>
      <link>https://dev.to/appwrite/announcing-appwrite-0-9-the-open-source-firebase-alternative-53ho</link>
      <guid>https://dev.to/appwrite/announcing-appwrite-0-9-the-open-source-firebase-alternative-53ho</guid>
      <description>&lt;p&gt;The last month was a crazy one. We've put together over &lt;strong&gt;250 commits&lt;/strong&gt;, &lt;strong&gt;20k lines of code&lt;/strong&gt; and countless hours to bring you the best Appwrite version ever! With that, we're incredibly excited to announce the release of &lt;strong&gt;Appwrite 0.9&lt;/strong&gt;, packed with a ton of cool new features like &lt;strong&gt;Android support&lt;/strong&gt;, &lt;strong&gt;Kotlin Server SDK&lt;/strong&gt;, &lt;strong&gt;Flutter Desktop Support&lt;/strong&gt;, and much more! Without spending any more time, let's dive in! 🤿&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Appwrite is an open-source, self-hosted Backend-as-a-Service that aims to make app development &lt;strong&gt;easier&lt;/strong&gt; with SDKs available in a variety of programming languages. Come hang out with us on &lt;a href="https://appwrite.io/discord"&gt;Discord&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#android-support"&gt;
  &lt;/a&gt;
  🤖 Android Support
&lt;/h2&gt;

&lt;p&gt;It's finally here 📌 Appwrite now has official support for Android! &lt;a href="https://github.com/appwrite/sdk-for-android"&gt;Our SDK&lt;/a&gt; has been out in the wild for over 2 weeks now - we've gathered some amazing feedback from the community, and we're now ready to present it to all of you! We've got all the setup instructions in our new &lt;a href="https://appwrite.io/docs/getting-started-for-android?"&gt;Getting Started Guide&lt;/a&gt;, but here's what you'll need to do, in a nutshell 🥜. &lt;/p&gt;

&lt;p&gt;Include the &lt;strong&gt;mavenCentral()&lt;/strong&gt; repository in your project's &lt;strong&gt;build.gradle(.kts)&lt;/strong&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight groovy"&gt;&lt;code&gt;&lt;span class="n"&gt;repositories&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;      
    &lt;span class="n"&gt;mavenCentral&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the Android SDK in your app's &lt;strong&gt;build.gradle(.kts)&lt;/strong&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight groovy"&gt;&lt;code&gt;&lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;implementation&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"io.appwrite:sdk-for-android:0.0.1"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🤩 Then make your first request using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;androidx.appcompat.app.AppCompatActivity&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.os.Bundle&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlinx.coroutines.GlobalScope&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlinx.coroutines.launch&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.Client&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.services.Account&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainActivity&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;AppCompatActivity&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;setContentView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activity_main&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;client&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;applicationContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://[HOSTNAME_OR_IP]/v1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your API Endpoint&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"5df5acd0d48c2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your project ID&lt;/span&gt;

        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;account&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="nc"&gt;GlobalScope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;launch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;response&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"email@example.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;      
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also have some example apps to help you get started&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A bare minimum &lt;a href="https://github.com/appwrite/playground-for-android"&gt;Playground App&lt;/a&gt; to help you quickly start building apps.&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://github.com/appwrite/demo-getstarted-with-android"&gt;Getting Started App&lt;/a&gt; that has interactions with all of Appwrite's endpoints.&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://github.com/appwrite/demo-quiz-with-android"&gt;Simple Quiz App&lt;/a&gt; built with Appwrite.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#kotlin-server-sdk"&gt;
  &lt;/a&gt;
  🦾 Kotlin Server SDK
&lt;/h2&gt;

&lt;p&gt;We also released a brand new &lt;a href="https://github.com/appwrite/sdk-for-kotlin"&gt;Kotlin Server SDK&lt;/a&gt; to go along with the Android one! Setting up the Kotlin SDK is a similar drill. You can check out our &lt;a href="https://appwrite.io/docs/getting-started-for-server"&gt;Getting Started Guide&lt;/a&gt; or follow along for a quick summary.&lt;/p&gt;

&lt;p&gt;Add the dependency to your &lt;strong&gt;pom.xml&lt;/strong&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.appwrite&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;sdk-for-kotlin&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.0.1&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or your &lt;strong&gt;build.gradle(.kts)&lt;/strong&gt; file if using &lt;strong&gt;Gradle&lt;/strong&gt; as your build system.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight groovy"&gt;&lt;code&gt;&lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;implementation&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"io.appwrite:sdk-for-kotlin:0.0.1"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🚀 Then make your first request using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.Client&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.services.Users&lt;/span&gt;

&lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;client&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://[HOSTNAME_OR_IP]/v1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"5df5acd0d48c2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"919c2d18fb5d4...a2ae413da83346ad2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;users&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;response&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"email@example.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;json&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also have some example apps to help you get started&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A bare minimum &lt;a href="https://github.com/appwrite/playground-for-kotlin"&gt;Playground App&lt;/a&gt; to help you quickly start building apps.&lt;/li&gt;
&lt;li&gt;We also have some really cool &lt;a href="https://github.com/appwrite/demos-for-functions"&gt;Cloud Function demos&lt;/a&gt; using our Kotlin SDK. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#flutter-desktop-support"&gt;
  &lt;/a&gt;
  🖥️ Flutter Desktop Support
&lt;/h2&gt;

&lt;p&gt;With Appwrite 0.9, we've enabled platform wide support for your Flutter Desktop Apps! You can now register your Linux, Windows and Mac apps from the Dashboard! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N128OSV_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cy3kn6js39mr4ebt59f0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N128OSV_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cy3kn6js39mr4ebt59f0.png" alt="Flutter Desktop"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-cloud-function-runtimes"&gt;
  &lt;/a&gt;
  🏃 New Cloud Function Runtimes
&lt;/h2&gt;

&lt;p&gt;Our Cloud Function runtimes list continues to grow with over 20+ (!) runtimes. This time we've added support for &lt;strong&gt;deno-1.10&lt;/strong&gt;, &lt;strong&gt;deno-1.11&lt;/strong&gt;, &lt;strong&gt;dart 2.13&lt;/strong&gt;, &lt;strong&gt;node-16.0&lt;/strong&gt; , &lt;strong&gt;java-11.0&lt;/strong&gt; and &lt;strong&gt;java-16.0&lt;/strong&gt;. We've got you covered 💪 no matter what your favourite language is! If you're looking for some creative ways to get started with Cloud Functions, feel free to check out &lt;a href="https://github.com/appwrite/demos-for-functions"&gt;our demos&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#breaking-changes"&gt;
  &lt;/a&gt;
  ⚒️ Breaking Changes
&lt;/h2&gt;

&lt;p&gt;Breaking changes are hard, but unfortunately, they're a necessary evil! We've kept those nasty breaking changes to a bare minimum with this release and only made changes to our Server SDKs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;env&lt;/code&gt; has been renamed to &lt;code&gt;runtime&lt;/code&gt; in the &lt;code&gt;POST v1/functions&lt;/code&gt; endpoint. If you're using named parameters in your server SDKs, you will need to update them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;deleteUser&lt;/code&gt; has been replaced in favour of the &lt;code&gt;delete&lt;/code&gt; method in all our Server SDKs. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#everything-else"&gt;
  &lt;/a&gt;
  🚀 Everything else
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Our Image Preview 📸 endpoint now let's you specify a gravity giving you much more control when cropping your images!  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One of our community members &lt;a href="https://github.com/Meldiron"&gt;&lt;strong&gt;@Meldiron&lt;/strong&gt;&lt;/a&gt;, helped speed up our Cloud Function executions by upto a &lt;a href="(https://github.com/appwrite/appwrite/pull/1308)"&gt;&lt;strong&gt;whopping 4s 🤯&lt;/strong&gt;&lt;/a&gt; in some cases. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We revamped our &lt;strong&gt;User Sessions UI&lt;/strong&gt; in the Dashboard to give you more fine grained information about a user's session.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xRqo9FaH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1wrsalkufc911a78pgjm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xRqo9FaH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1wrsalkufc911a78pgjm.png" alt="sessions"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We've added some additional metadata in our &lt;strong&gt;File Preview Dialog&lt;/strong&gt; to make it easier to view your file types, file size and the creation date.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iFOShZOU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guwnzctwy968b7hjjauc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iFOShZOU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guwnzctwy968b7hjjauc.png" alt="meta-data"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Internally, we've optimized our database connection pools for overall improved server performance 🤩&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Gone are the days of running multiple migration scripts to upgrade to the latest version of Appwrite! From Appwrite 0.9, it's just a single script! &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Based on popular demand, we've added a &lt;a href=""&gt;new endpoint&lt;/a&gt; to delete a session by ID and another endpoint to force update the user verification status from Server Side SDKs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Last but not the least, we've &lt;a href="https://github.com/appwrite/appwrite/pull/1225"&gt;overhauled our Email Templates&lt;/a&gt; in an attempt to offer lot more customization in the future! &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let's not forget, you also helped us reach a major milestone of &lt;strong&gt;10k Github stars&lt;/strong&gt; ⭐️ making us one of the &lt;strong&gt;top 2000&lt;/strong&gt; projects in Github history! We also crossed a landmark &lt;strong&gt;2.2M Docker pulls&lt;/strong&gt; and &lt;strong&gt;over 40k reads&lt;/strong&gt; on our blog posts! Thank you so much for all your support!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yXZpQzqQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/coo9vs3uxisxd2oubjhd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yXZpQzqQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/coo9vs3uxisxd2oubjhd.png" alt="star"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#and-more"&gt;
  &lt;/a&gt;
  😍 And More!
&lt;/h2&gt;

&lt;p&gt;We still haven't covered everything! There's lots more bug fixes and other micro optimizations we made under the hood to make your experience with Appwrite better! To get all the details on Appwrite 0.9, check out all the changes in the &lt;a href="https://github.com/appwrite/appwrite/blob/master/CHANGES.md"&gt;changelog on GitHub&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Are you curious about the big ideas we have up next, or have a great idea for Appwrite's future? Check out the &lt;a href="https://github.com/appwrite/rfc"&gt;RFC Repository&lt;/a&gt; for more details. Also, our &lt;a href="https://github.com/appwrite/awesome-appwrite"&gt;awesome-appwrite repository&lt;/a&gt; keeps growing with new tutorials, videos, and demos.&lt;/p&gt;

&lt;p&gt;If you've just discovered Appwrite and would like to get started, check out out our &lt;a href="https://30days.appwrite.io/"&gt;30 Days of Appwrite&lt;/a&gt; series where we explain step-by-step everything you need to know to build awesome Appwrite-powered apps. Follow us on &lt;a href="https://twitter.com/appwrite_io"&gt;Twitter&lt;/a&gt;, &lt;a href="https://dev.to/appwrite"&gt;Dev.to&lt;/a&gt;, or anywhere you find your friendly neighbourhood Appwrite. &lt;/p&gt;

</description>
      <category>flutter</category>
      <category>android</category>
      <category>kotlin</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Diving Into DevSecOps (Part 1) w/ John Willis</title>
      <author>Conor Bronsdon</author>
      <pubDate>Wed, 07 Jul 2021 14:06:49 +0000</pubDate>
      <link>https://dev.to/linearb/diving-into-devsecops-part-1-w-john-willis-47ll</link>
      <guid>https://dev.to/linearb/diving-into-devsecops-part-1-w-john-willis-47ll</guid>
      <description>&lt;p&gt;John Willis is a legendary DevOps speaker, mentor and author of &lt;a href="https://www.google.com/search?q=the+devops+handbook&amp;amp;rlz=1C1CHBF_enUS949US949&amp;amp;sxsrf=ALeKk029-roPGTB6J_bWkBb9WvzA5-1z8g:1624995751185&amp;amp;ei=p3fbYI7wCs6m-wSwn7fIBA&amp;amp;start=0&amp;amp;sa=N&amp;amp;ved=2ahUKEwjO34r0zL3xAhVO054KHbDPDUk4ChDy0wN6BQgBEJkB&amp;amp;biw=1920&amp;amp;bih=937"&gt;The DevOps Handbook&lt;/a&gt;. He even helped coin the term DevSecOps.&lt;/p&gt;

&lt;p&gt;But DevSecOps is one of those buzzwords that can mean a lot of things or nothing at all.&lt;/p&gt;

&lt;p&gt;In this special 2-part series of &lt;a href="https://devinterrupted.com/podcast/diving-into-devsecops-part-1/"&gt;Dev Interrupted&lt;/a&gt;, John takes us on a DevSecOps journey from the origin of the term all the way to how software developers at the team level can implement the practice.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/06Z0rH2S1zOVKccTpI800f"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Episode Highlights include:&lt;/strong&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;What DevSecOps means at the team-level&lt;/li&gt;
&lt;li&gt;First steps for implementing DevSecOps strategies at your organization&lt;/li&gt;
&lt;li&gt;Why it’s critical to start thinking about security more holistically&lt;/li&gt;
&lt;li&gt;The difference between Security, Compliance, Governance &amp;amp; Risk&lt;/li&gt;
&lt;li&gt;What is coming next for software development security&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#join-the-dev-interrupted-discord-server"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Join the Dev Interrupted Discord Server&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;With over 1200 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.gg/tpkmwM6c3g"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" alt="Join the Dev Interrupted Discord Community!"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>devsecops</category>
      <category>devteam</category>
      <category>security</category>
    </item>
    <item>
      <title>State manager of dream</title>
      <author>Slava Birch</author>
      <pubDate>Wed, 07 Jul 2021 14:00:12 +0000</pubDate>
      <link>https://dev.to/betula/state-manager-of-dream-98i</link>
      <guid>https://dev.to/betula/state-manager-of-dream-98i</guid>
      <description>&lt;p&gt;Some time ago during one of my interviews, a potential employer asked me to describe a perfect frontend framework in my wildest dreams. I gave quite a thorough answer explaining how it works, and realized that it actually was a description vaguely resembling the synthesis of React and Angular. My dream was born at that moment!&lt;/p&gt;

&lt;p&gt;Currently, when it comes to all existing frontend frameworks, those widely popular or not, I prefer React since it has a beautiful integration with the typescript. Using JSX as part of a language is really convenient. It offers a lightweight version with perfect compatibility (4 kB Preact instead of 30), with the possibility to inject it on the Webpack level without changes to your codebase. And React is simply a view system without any special solution builder, application architecture, or advanced state management control. That is just awesome!&lt;/p&gt;

&lt;p&gt;As for the organization of application logic, if we don’t find it in React we can choose one of the existing solutions.&lt;/p&gt;

&lt;p&gt;Redux has the most powerful community in that field. A big set of trusted community-based components are provided to develop a lot of popular types of applications for topical business issues. It enables you to have both a quick start and a quick make.&lt;/p&gt;

&lt;p&gt;Action, Store, and Selector are just great to add an  abstraction layer and allow you to define a way to control your state.&lt;br&gt;
&lt;strong&gt;Actions&lt;/strong&gt; can be possible to use everywhere in your app, the subscription with sagas provides a great mechanism for listening to your app’s actions and reacting to them.&lt;br&gt;
The &lt;strong&gt;immutable state&lt;/strong&gt; in the store makes your app free from a proxy-based data transformation, and provides a very easy and understandable modification for both simple and nested states.&lt;br&gt;
And &lt;strong&gt;selectors&lt;/strong&gt; that cache parts of your state for performance reasons are useful a lot as well.&lt;/p&gt;

&lt;p&gt;As far as more customizable reactivity goes, the desirable functions are either the possibility to subscribe to selector changes, or description of &lt;strong&gt;several stores&lt;/strong&gt; for modular decomposition. Other options are that you probably want to code the view component &lt;strong&gt;local logic&lt;/strong&gt; in the same way as to control your global app's store, or you want to manage the reactive state that contains not only plain javascript objects and arrays.&lt;/p&gt;

&lt;p&gt;Once similar thoughts have already come to Mobx. This is a totally different way to organize your application logic.&lt;br&gt;
Decomposition of your business issues using the &lt;strong&gt;object-oriented&lt;/strong&gt; technique is a great decision for people who have knowledge in that field. Subscription to the result changes of   of any combinations of values and selectors is really convenient.&lt;br&gt;
Great modular decomposition and transparent reactive programming both sound awesome.&lt;/p&gt;

&lt;p&gt;And on the testy is the &lt;strong&gt;streaming programming&lt;/strong&gt; there is a beautiful pattern that has Rx as the most popular implementation. It offers a &lt;strong&gt;declarative way&lt;/strong&gt; to coding your app’s actions as chaining configurable objects of reactive streams. It is a perfect instrument for event management.&lt;/p&gt;

&lt;p&gt;Well, in such a way, we can take the most appealing state control techniques, and use them however we want.&lt;/p&gt;

&lt;p&gt;And as a cherry on the cake, I like one more technique which is a &lt;strong&gt;shared stateful logic&lt;/strong&gt; decomposition. Angular implemented it as the service on dependency injection.&lt;/p&gt;

&lt;p&gt;All of the above-mentioned ideas inspired me to combine such really progressive techniques into one implementation for &lt;strong&gt;playing it together&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Stores, actions, selectors, object-oriented support, imperative and declarative styles, reactive streams, and stateful logic availability scopes - all in one, my dream implemented in &lt;a href="https://github.com/betula/realar#readme"&gt;Realar state manager&lt;/a&gt;. This is my pride and result of long, deep, and happy work.&lt;/p&gt;

&lt;p&gt;My work is not only techniques connected together, I have reached an incredibly small size with this functionality. I used a special style of the code, which achieves the maximum compression of the minified code. &lt;strong&gt;5 kB&lt;/strong&gt; for all It’s a real success story! With Preact you can get a modern frontend environment by 10kB bundle size for all you need)&lt;/p&gt;

&lt;p&gt;I’m happy after tons of deep coding hours, happy that I can share. Achievement is unlocked))))&lt;/p&gt;

&lt;p&gt;Already &lt;strong&gt;in production&lt;/strong&gt; on the &lt;a href="http://card-of-the-day.com/get-app"&gt;Card of the Day&lt;/a&gt; react native app 👍&lt;/p&gt;

&lt;p&gt;I’m looking for a sponsor because my hands have already been burning from continuing development non-stop! I want to make a beautiful form framework and a streams framework for nodes, with core on Realar. I would like to start recording teaching videos about all actual questions on the modern frontend field. And I dream of writing an open book. If you know any methods for searching sponsors, or if some of your friends know something, I urge you to tell me in the comments. It will be your great contribution to make a better world!&lt;/p&gt;

&lt;p&gt;Thanks a lot for your attention, and&lt;br&gt;
Happy coding!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/betula"&gt;
        betula
      &lt;/a&gt; / &lt;a href="https://github.com/betula/realar"&gt;
        realar
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      5 kB Advanced state manager for React
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Realar&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/realar" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3ab89da59043449736b87a767e874641148b728d9a9b55a1a8eeb0dc084b527f/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f7265616c61723f7374796c653d666c61742d737175617265" alt="npm version"&gt;&lt;/a&gt; &lt;a href="https://bundlephobia.com/result?p=realar" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/062265192a9a2b8cc274d2b070d22cc4dcc7f6f3972a7c464da1850471e21dc6/68747470733a2f2f696d672e736869656c64732e696f2f62756e646c6570686f6269612f6d696e7a69702f7265616c61723f7374796c653d666c61742d737175617265" alt="npm bundle size"&gt;&lt;/a&gt; &lt;a href="https://coveralls.io/github/betula/realar" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3119c6c3f30e566d884e04c9d754b69e8a0c0eadd7c24c9c2ed82f504f874eea/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f6769746875622f626574756c612f7265616c61723f7374796c653d666c61742d737175617265" alt="code coverage"&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/betula/realar/master/./src/types.ts"&gt;&lt;img src="https://camo.githubusercontent.com/ae0dc69716122dcf3a64aadb67707d51d81145cc1e654310fcaaa74a38989844/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f74797065732f747970657363726970743f7374796c653d666c61742d737175617265" alt="typescript supported"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Realar state manager targeted to all scale applications &lt;strong&gt;up to complex enterprise&lt;/strong&gt; solutions on a modular architecture. And has an incredible small size &lt;strong&gt;5 kB&lt;/strong&gt; for all you need.&lt;/p&gt;
&lt;h3&gt;
Usage&lt;/h3&gt;
&lt;p&gt;You can make stores and "actions" &lt;sup&gt;&lt;em&gt;&lt;a href="https://runkit.com/betula/60c071ff26dea9001373459c" rel="nofollow"&gt;play on runkit&lt;/a&gt;&lt;/em&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;store&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;value&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;add&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-s1"&gt;store&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;updater&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;state&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-s1"&gt;num&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s1"&gt;state&lt;/span&gt; &lt;span class="pl-c1"&gt;+&lt;/span&gt; &lt;span class="pl-s1"&gt;num&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;inc&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-s1"&gt;store&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;updater&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;state&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s1"&gt;state&lt;/span&gt; &lt;span class="pl-c1"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;And bind to React easily &lt;sup&gt;&lt;em&gt;&lt;a href="https://codesandbox.io/s/realar-readme-second-example-ld0g1?file=/src/App.tsx" rel="nofollow"&gt;play on codesandbox&lt;/a&gt;&lt;/em&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-v"&gt;App&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;state&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;useValue&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;store&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;

  &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;p&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;&lt;span class="pl-s1"&gt;state&lt;/span&gt;&lt;span class="pl-kos"&gt;}&lt;/span&gt;
    &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;button&lt;/span&gt; &lt;span class="pl-c1"&gt;onClick&lt;/span&gt;&lt;span class="pl-c1"&gt;=&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;&lt;span class="pl-s1"&gt;inc&lt;/span&gt;&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;+&lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;button&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;p&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;You can make streams &lt;sup&gt;&lt;em&gt;&lt;a href="https://runkit.com/betula/60c073765105e1001311b294" rel="nofollow"&gt;play on runkit&lt;/a&gt;&lt;/em&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;addendum&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;value&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'0'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;pre&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;ev&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s1"&gt;ev&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;target&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;value&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/betula/realar"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>TypeScript: Getting Started</title>
      <author>Joel P. Mugalu</author>
      <pubDate>Wed, 07 Jul 2021 13:54:43 +0000</pubDate>
      <link>https://dev.to/codingknite/typescript-getting-started-39dm</link>
      <guid>https://dev.to/codingknite/typescript-getting-started-39dm</guid>
      <description>&lt;h3&gt;
  &lt;a href="#typescript-has-taken-the-development-world-by-storm-no-wonder-it-has-over-15-million-weekly-downloads-on-npm-but-what-is-typescript-and-what-do-you-need-to-know-about-it"&gt;
  &lt;/a&gt;
  TypeScript has taken the development world by storm. No wonder it has over 15 million weekly downloads on &lt;a href="https://www.npmjs.com/package/typescript"&gt;npm&lt;/a&gt;. But what is TypeScript, and what do you need to know about it?
&lt;/h3&gt;

&lt;p&gt;In this article, I am going answer those questions. By the end you'll have a grasp of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What TypeScript is&lt;/li&gt;
&lt;li&gt;Main pillars of TypeScript&lt;/li&gt;
&lt;li&gt;Main features of TypeScript&lt;/li&gt;
&lt;li&gt;Why you should use TypeScript&lt;/li&gt;
&lt;li&gt;TypeScript basics to get you started&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First, let's address the elephant in the room.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-typescript"&gt;
  &lt;/a&gt;
  What is TypeScript?
&lt;/h2&gt;

&lt;p&gt;TypeScript is a programming language built and maintained by Microsoft.&lt;br&gt;&lt;br&gt;
It is a superset of JavaScript that adds strong type checking and is compiled into plain JavaScript code.&lt;/p&gt;

&lt;p&gt;Being a superset means that TypeScript has all the features of JavaScript as well as some additional features.&lt;/p&gt;

&lt;p&gt;TypeScript comes with features such as better development-time tooling, static code analysis, compile-time type checking, and code-level documentation.&lt;/p&gt;

&lt;p&gt;Don't worry if you have no idea what any of this means. I'll explain all of it in this article.&lt;/p&gt;

&lt;p&gt;All these features that come with TypeScript make it the perfect programming language for building large-scale JavaScript applications.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#main-pillars-of-typescript"&gt;
  &lt;/a&gt;
  Main pillars of TypeScript
&lt;/h2&gt;

&lt;p&gt;TypeScript is built upon three main pillars – namely the language, the compiler, and the language service.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#typescript-language"&gt;
  &lt;/a&gt;
  TypeScript Language
&lt;/h3&gt;

&lt;p&gt;This consists of the syntax, keywords, and type annotations of TypeScript.&lt;br&gt;&lt;br&gt;
TypeScript syntax is similar to but not the same as JavaScript syntax.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#typescript-compiler"&gt;
  &lt;/a&gt;
  TypeScript Compiler
&lt;/h3&gt;

&lt;p&gt;The compiler is responsible for compiling Typescript code into JavaScript.&lt;br&gt;&lt;br&gt;
In reality, what happens is not actually compiling but transpiling.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Compiling means that source code is transformed from a human-readable format to a machine-readable format, whereas transpiling is transforming source code from one human-readable format to another human-readable format.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The TypeScript compiler is also responsible for erasing any information related to types at compile time.&lt;/p&gt;

&lt;p&gt;Types are not valid features in JavaScript. And since TypeScript has to be compiled to plain JavaScript, anything related to types has to be erased before it can become valid JavaScript ready to be executed by the browser.&lt;/p&gt;

&lt;p&gt;The TypeScript compiler also performs code analysis. It emits errors and warnings if there's reason to do so.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#language-service"&gt;
  &lt;/a&gt;
  Language Service
&lt;/h3&gt;

&lt;p&gt;The language service is responsible for collecting type information from the source code.&lt;/p&gt;

&lt;p&gt;This information can then be used by development tools to provide IntelliSense, type hints, and refactoring alternatives.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#main-features-of-typescript"&gt;
  &lt;/a&gt;
  Main Features of TypeScript
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#type-annotations-in-typescript"&gt;
  &lt;/a&gt;
  Type Annotations in TypeScript
&lt;/h3&gt;

&lt;p&gt;Type annotation simply means assigning a type to a variable or function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;birthdayGreeter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Happy birthday &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, you are now &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; years old!`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;birthdayHero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jane User&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;birthdayGreeter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;birthdayHero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, we define a function that accepts two parameters &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;age&lt;/code&gt;. We assign &lt;code&gt;name&lt;/code&gt; to the type &lt;em&gt;string&lt;/em&gt; &lt;code&gt;age&lt;/code&gt; to the type &lt;em&gt;number&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We can also assign types to the return value of a function. In this case, our function returns a value of the type &lt;em&gt;string&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;birthdayGreeter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;Typescript&lt;/span&gt; &lt;span class="nx"&gt;would&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;an&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;we&lt;/span&gt; &lt;span class="nx"&gt;passed&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;different&lt;/span&gt; &lt;span class="nx"&gt;types&lt;/span&gt; &lt;span class="nx"&gt;than&lt;/span&gt; &lt;span class="nx"&gt;ones&lt;/span&gt; &lt;span class="nx"&gt;we&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#structural-typing-in-typescript"&gt;
  &lt;/a&gt;
  Structural Typing in TypeScript
&lt;/h3&gt;

&lt;p&gt;TypeScript is a structurally typed language meaning that if two elements have corresponding and identical features then they are considered to be of the same type.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#type-inference-in-typescript"&gt;
  &lt;/a&gt;
  Type Inference in TypeScript
&lt;/h3&gt;

&lt;p&gt;The TypeScript compiler can attempt to infer the type information if there is no specific type assigned. This means that TypeScript can assign a type to a variable or function based on its initial values or usage.&lt;/p&gt;

&lt;p&gt;Type inference usually happens when you initialize variables, set default values, and determe function return types&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;platform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;freeCodeCamp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The variable platform in the above example is assigned the type &lt;em&gt;string&lt;/em&gt; even though we didn't explicitly do so and the return value of the function &lt;code&gt;add&lt;/code&gt; is inferred the type &lt;em&gt;number&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#type-erasure-in-typescript"&gt;
  &lt;/a&gt;
  Type Erasure in TypeScript
&lt;/h3&gt;

&lt;p&gt;TypeScript removes the type system constructs during compilation:&lt;/p&gt;

&lt;p&gt;Input&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;someType&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-use-typescript"&gt;
  &lt;/a&gt;
  Why use TypeScript?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#type-checking-and-static-code-analysis"&gt;
  &lt;/a&gt;
  Type checking and static code analysis
&lt;/h3&gt;

&lt;p&gt;This reduces the overall errors in your code because TS will warn you when you wrongfully use a certain type.&lt;/p&gt;

&lt;p&gt;It also reduces runtime errors and because of static code analysis, TypeScript will throw warnings about typos and such. So this means fewer errors which could potentially mean less testing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#type-annotations-can-act-like-code-documentation"&gt;
  &lt;/a&gt;
  Type annotations can act like code documentation
&lt;/h3&gt;

&lt;p&gt;Type annotations help us to understand what type of arguments a function expects, for example, and what it returns.&lt;/p&gt;

&lt;p&gt;This makes code more readable and makes it easier for others and for us to understand what the code is supposed to do.&lt;/p&gt;

&lt;p&gt;Another advantage of TypeScript is that IDEs can provide more specific and smarter IntelliSense when they know exactly what types of data you are processing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-get-started-with-typescript"&gt;
  &lt;/a&gt;
  How to Get Started with TypeScript
&lt;/h2&gt;

&lt;p&gt;Let's begin by installing the TypeScript package. Here we have two options: we can either install it globally so we can use it on any project in the system, or we can install it to use on the specific project we're working on.&lt;/p&gt;

&lt;p&gt;You can install TypeScript globally by running this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you don't wish to install globally you can just run this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;dev&lt;/span&gt; &lt;span class="nx"&gt;typescript&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the local installation, TypeScript is installed as a Dev-dependency because we use it for development. It has to first compile to JavaScript before it can be used in production. The browser can't execute TypeScript.&lt;/p&gt;

&lt;p&gt;After installing TypeScript, we need to initiate a new project. You can do that by running the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;tsc &lt;span class="nt"&gt;--init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command initiates a new &lt;em&gt;tsconfig.json&lt;/em&gt; file in the root directory of the project. This config file comes with all the configuration options we have for using TypeScript in a project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O5_S0XfH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.freecodecamp.org/news/content/images/2021/05/image1-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O5_S0XfH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.freecodecamp.org/news/content/images/2021/05/image1-1.png" alt="an example of a tsconfig file"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All the compile options for a particular project can be specified in the tsconfig.json file under the &lt;em&gt;compileOptions&lt;/em&gt; key.&lt;/p&gt;

&lt;p&gt;The file comes with some config options by default but you can add more options to the project as needed. You can comment out or delete unused compiler options.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#builtin-types-in-typescript"&gt;
  &lt;/a&gt;
  Built-In Types in TypeScript
&lt;/h3&gt;

&lt;p&gt;Typescript comes built-in with all the primitive types in JavaScript like string, number, and boolean.&lt;/p&gt;

&lt;p&gt;The types can then be assigned to variables to specify what data type should be assigned to the variable. This is called type annotation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myAge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;TypeScript annotations are not always necessary because TypeScript automatically infers the type of a variable based on its initial value or usage. Therefore the following would also be valid TypeScript code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// myName is inferred type 'string'&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jonathan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#arrays-in-typescript"&gt;
  &lt;/a&gt;
  Arrays in TypeScript
&lt;/h3&gt;

&lt;p&gt;To specify the type of an array you can use the syntax &lt;code&gt;string[]&lt;/code&gt; or &lt;code&gt;number[]&lt;/code&gt;. This effectively means 'array of strings or array of numbers'.&lt;/p&gt;

&lt;p&gt;You'll also see people use the syntax &lt;code&gt;Array&amp;lt;number&amp;gt;&lt;/code&gt; or &lt;code&gt;Array&amp;lt;string&amp;gt;&lt;/code&gt; which means the same thing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#union-types-in-typescript"&gt;
  &lt;/a&gt;
  Union Types in TypeScript
&lt;/h3&gt;

&lt;p&gt;Union types allow us to define several types that may be assigned to a variable. For this, we use a pipe | to specify the various types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;someValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default &lt;code&gt;null | undefined&lt;/code&gt; can be assigned to any variable but TypeScript comes with the &lt;em&gt;strictNullChecks&lt;/em&gt; compiler option which does not allow assigning both to a variable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#functions-in-typescript"&gt;
  &lt;/a&gt;
  Functions in TypeScript
&lt;/h3&gt;

&lt;p&gt;Functions can also receive type annotations. However, with TypeScript functions, they can only receive the specified parameters. Nothing more nothing less.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;introduction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello, my name is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; and I'm {age} years old`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Function parameters receive normal type annotation.&lt;/p&gt;

&lt;p&gt;TypeScript functions must also specify the return data type. In the case where a function returns nothing, we can use &lt;em&gt;void&lt;/em&gt; type as the return data type.&lt;/p&gt;

&lt;p&gt;We can also use the &lt;code&gt;?&lt;/code&gt; operator to specify &lt;strong&gt;parameters that are optional&lt;/strong&gt;. In this case, Typescript won't complain if the parameter is not passed on the function call.&lt;/p&gt;

&lt;p&gt;We can also assign default values to parameters just like we would in normal JavaScript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;introduction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;developer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`Hello, my name is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; and I'm &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; years old. I work as a &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that in this example I used the JavaScript &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"&gt;arrow function&lt;/a&gt; syntax and specified that the job parameter is optional and assigned a default value 'developer' to it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-any-endraw-type-in-typescript"&gt;
  &lt;/a&gt;
  The &lt;code&gt;any&lt;/code&gt; type in TypeScript
&lt;/h3&gt;

&lt;p&gt;In TypeScript, every variable whose type cannot be inferred becomes implicitly the type &lt;em&gt;any&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Any&lt;/code&gt; is typically a wild card type that literally means 'whatever type'. We can also explicitly assign the type &lt;em&gt;any&lt;/em&gt; to a variable.&lt;/p&gt;

&lt;p&gt;However, &lt;code&gt;any&lt;/code&gt; typings are usually considered to be problematic.&lt;/p&gt;

&lt;p&gt;Typescript comes with the &lt;em&gt;noImplicitAny&lt;/em&gt; compiler option which raises an error when we assign the type &lt;em&gt;any&lt;/em&gt; to a variable or expression.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-create-your-own-types-in-typescript"&gt;
  &lt;/a&gt;
  How to Create Your Own Types in TypeScript
&lt;/h3&gt;

&lt;p&gt;TypeScript offers a way for us to define and use our own types for inputs. Here we can describe the exact type that is acceptable for a particular input.&lt;/p&gt;

&lt;p&gt;We can use the &lt;code&gt;type&lt;/code&gt; keyword to define our own types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Operator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;multiply&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;add&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;divide&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the &lt;code&gt;Operator&lt;/code&gt; type can accept either of the values. Notice how we use the OR operator &lt;code&gt;|&lt;/code&gt; to create a union type. In this case, any variable assigned the type Operator can accept any of the three values.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#typescript-example-project"&gt;
  &lt;/a&gt;
  TypeScript Example Project
&lt;/h2&gt;

&lt;p&gt;Let's now use this knowledge to create a simple calculator program. A user can only enter one of three operations - add, multiply, or divide. If you want to, take a moment and try to attempt this then you come back and follow along.&lt;/p&gt;

&lt;p&gt;Hopefully, you tried it on your own. The program may then look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Operation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;multiply&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;add&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;divide&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;calculator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;op&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;multiply&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;add&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;divide&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Can&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="nx"&gt;divide&lt;/span&gt; &lt;span class="nx"&gt;by&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Operation unknow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;          
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try to read the above code and see if you can figure out what is going on.&lt;/p&gt;

&lt;p&gt;We can also create custom types using the &lt;code&gt;interface&lt;/code&gt; keyword. Interfaces allow us to define the property and type of an object. An interface can have the ability to extend another interface.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Employee&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Manager&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Employee&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;meeting&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;topic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we define an interface Employee which has two properties - &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;title&lt;/code&gt;, both of which are of the type &lt;em&gt;string&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We then use this interface to create another interface &lt;code&gt;Manager&lt;/code&gt; which has the same properties as the Employee interface but with a meeting method.&lt;/p&gt;

&lt;p&gt;At the outset, I mentioned that Typescript is a structurally typed language. This means that if an element has the same properties as another, they're both of the same types.&lt;/p&gt;

&lt;p&gt;The same is true with interfaces. If an object has the properties of an interface then it has the type of the interface. Such an object can have additional properties as long as some properties match those of the interface.&lt;/p&gt;

&lt;p&gt;We can now use our defined interface such as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newEmployee&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;FrontEnd Developer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So far we've seen that we can create our own types using the &lt;em&gt;type&lt;/em&gt; and &lt;em&gt;interface&lt;/em&gt; keywords. But, what is the difference between the two?&lt;/p&gt;

&lt;p&gt;The most notable difference is that defining multiple interfaces with the same name will result in a merged interface. On the other hand, defining multiple types with the same name will result in an error indicating that the name is already declared.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Typescript has a lot of features that can't simply be exhausted in this article. I just highlighted a few of the features that may be helpful to understand in order to get started working with it.&lt;/p&gt;

&lt;p&gt;You can learn more about Typescript by reading the &lt;a href="https://www.typescriptlang.org/docs/"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you liked this article, consider following me on &lt;a href="https://twitter.com/codingknite"&gt;Twitter&lt;/a&gt; or connecting with me on &lt;a href="https://linkedin.com/in/joelmugalu"&gt;LinkedIn&lt;/a&gt;. I share content about programming and what am learning. Feel free to get in touch or share your thoughts regarding TypeScript in the comment section below.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Insights de carreira - Grupo Alura - Parte 1: Apoio Educacional</title>
      <author>Felipe Moreno Borges</author>
      <pubDate>Wed, 07 Jul 2021 13:51:20 +0000</pubDate>
      <link>https://dev.to/devcapu/insights-de-carreira-grupo-alura-parte-1-apoio-educacional-4af9</link>
      <guid>https://dev.to/devcapu/insights-de-carreira-grupo-alura-parte-1-apoio-educacional-4af9</guid>
      <description>&lt;h3&gt;
  &lt;a href="#sua-linguagem-do-cora%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Sua linguagem do coração
&lt;/h3&gt;

&lt;p&gt;Quando entrei no Grupo Alura eu não tinha nenhuma experiência de trabalho com programação. Tudo que eu tinha feito eram projetos pessoais e da faculdade. E em todos esses projetos eu usava a mesma linguagem, PHP. O que fazia sentido, era o que eu conhecia até aquele momento, apesar de conhecer um pouco de Java, meu conhecimento não era suficiente para entregar um projeto. E tudo que eu precisei fazer até aquele momento o PHP resolveu muito bem. &lt;/p&gt;

&lt;p&gt;O problema é que eu cheguei a acreditar que essa ferramenta era melhor que as outras - um erro muito grande - Só que no final das contas, a sua linguagem de programação é isso, uma ferramenta. E toda ferramenta se destina a resolver um problema específico. Dois anos e meio depois, fica claro que aquela paixão pelo PHP era mais uma visão deturpada do que baseada em fatos.&lt;/p&gt;

&lt;p&gt;Não me entenda errado, tudo bem gostar de uma linguagem, se possível se aprofunde nela. Mas o fato de você gostar dela, não a torna melhor que outras, uma linguagem só pode ser melhor que outra se usarmos um filtro bem específico (que seria o problema a ser resolvido). E mesmo assim o conceito de "melhor" é bem abstrato. No fim, não importa se é Java, PHP, C# ou qualquer que seja a linguagem da moda. O seu cliente não se importa com isso, o problema sendo resolvido de uma forma que de fato agregue valor importa bem mais.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mais-qualidade-do-que-quantidade"&gt;
  &lt;/a&gt;
  Mais qualidade do que quantidade
&lt;/h3&gt;

&lt;p&gt;A princípio meu trabalho não era escrever código - pelo menos não diretamente - era ajudar alunos e alunas com dúvidas técnicas e sobre carreira no fórum da comunidade. Assim como qualquer jovem no começo de carreira, eu quis mostrar proatividade, no caso respondendo o máximo de dúvidas que eu conseguisse. Paralelo a isso nós tínhamos treinamentos sobre como aprender, passar conhecimento adiante e reconhecer o nível de conhecimento da pessoa que estava aprendendo com a gente. &lt;/p&gt;

&lt;p&gt;Nesses treinamentos acabei entendendo que algumas pessoas tinham mais dificuldades para entender algum conceito, era preciso um tempo maior com pesquisa e a explicação, tempo esse, onde eu não estaria respondendo outras dúvidas. E tudo bem! As respostas começaram a ficar mais elaboradas, o passar conhecimento ficou mais claro, e com isso eu não tinha que responder a mesma dúvida 3/4 vezes (pelo menos não na maioria dos casos). &lt;/p&gt;

&lt;p&gt;Uma resposta mais elaborada, com mais exemplos e descrições aumentavam a qualidade da resposta. No fim, valia mais responder de 30-35 perguntas semanais, de forma mais elaborada do que 50-60 que fosse mais pobre em conteúdo, a satisfação comigo mesmo era maior também.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aprenda-a-ler-erros"&gt;
  &lt;/a&gt;
  Aprenda a ler erros
&lt;/h3&gt;

&lt;p&gt;Tenha um referência, de preferência que seja a própria documentação. É claro que é muito fácil você ir até um colega de trabalho e tirar a dúvida diretamente, mas o bater cabeça é importante (só não por muito tempo), seja capaz de procurar, a internet está aí, StackOverflow, posts, documentação e vídeos são seus amigos. &lt;/p&gt;

&lt;p&gt;Quando eu tinha uma dúvida não podia recorrer ao fórum da Alura, claro, seria eu que teria que responder depois. Saber procurar, vai te levar além, uma coisa é certa, em algum momento seu código vai quebrar, ler e entender a mensagem de erro já é meio caminho, o resto do caminho é solucionar.&lt;/p&gt;

&lt;p&gt;A pesquisa por conta própria vai te ajudar mesmo que de forma indireta, quando você ler de novo aquela mesma mensagem de erro, você vai lembrar de como solucionar, ou pelo menos ter uma ideia de onde pode estar errado, se alguém te dá a resposta toda vez, como você espera entender e melhorar.&lt;/p&gt;

&lt;p&gt;Não estou dizendo que você não deva procurar ajuda, muito longe disso, na verdade, estou dizendo que antes de pedir ajuda, tente solucionar você mesmo. Até porque, como desenvolvedor o seu trabalho é resolver problemas, então é nisso que você deve ser bom.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uma-rotina-de-estudos"&gt;
  &lt;/a&gt;
  Uma rotina de estudos
&lt;/h3&gt;

&lt;p&gt;Novas tecnologias surgem todo dia, sua biblioteca favorita pode ser trocada por outra mais eficiente, mais intuitiva ou que simplesmente esteja no hype. Se o seu trabalho é solucionar problemas, é importante que você estude para resolver eles da forma mais eficiente possível. Pegue 30 min do seu horário de trabalho e estude. Parece pouco, mas no longo prazo vale a pena.&lt;/p&gt;

&lt;p&gt;Como você vai ver na segunda parte desse post, eu optei por desenvolvimento mobile. Apesar disso, ter estudado sobre desenvolvimento frontend e o básico de como usar o Figma com certeza me ajudaram a como desenvolvedor mobile, seja criando protótipo (e não tendo que recorrer toda hora aos designers), ou mexendo nas telas de chromecast, que são puramente CSS. Afinal, saber é melhor que não saber.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#converse"&gt;
  &lt;/a&gt;
  Converse
&lt;/h3&gt;

&lt;p&gt;Converse com pessoas das mais diversas áreas, não só do seu time. Conversar com pessoas de marketing, instrutores e comercial me trouxeram várias experiências incríveis. Conversar com instrutores me fez entender que ninguém nasce sabendo, e que ao passar conhecimento, é umas das melhores formas de aprender, eles também têm dúvidas! É mais do que o famoso networking, é conhecer e reconhecer as pessoas independente da área, todos tem algum conhecimento a agregar. &lt;/p&gt;

&lt;p&gt;O time de tecnologia não deveria estar longe do time de operação (que é um péssimo nome, todos estão operando de alguma forma para o produto/serviço a ser entregue). Os times operam entre eles, os times são interdependentes - mesmo que indiretamente - além de insights, conversar com várias pessoas pode te garantir umas boas risadas no bar. E momentos incríveis não tem preço.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#foque"&gt;
  &lt;/a&gt;
  Foque
&lt;/h3&gt;

&lt;p&gt;Eu vivi programação antes de ser programador, estudei muito. Em alguns momentos até de uma forma exagerada, dias e noites, eu sempre soube qual era a direção, mesmo sem saber o destino. Não é sobre estude enquanto eles dormem, isso não quer dizer nada. Mas a partir do momento que você souber que é isso que você quer, não olhe pra trás, foque na sua carreira. No ensino médio eu deixei de ir em festas pra ir para evento de tecnologia ou pra estudar - e não me arrependo nem um pouco - agora que cheguei no "checkpoint" eu posso curtir mais, ir pra festas (quando a pandemia acabar). Mas naquele momento era necessário o esforço. Olhe o que é. importante pra você nesse momento e faça&lt;/p&gt;

</description>
      <category>comunidade</category>
      <category>insights</category>
      <category>carreira</category>
    </item>
    <item>
      <title>Improving Horizontal Scroll with CSS Scroll Snap</title>
      <author>Paul Golubkov</author>
      <pubDate>Wed, 07 Jul 2021 13:46:00 +0000</pubDate>
      <link>https://dev.to/paulcodes/improving-vertical-scroll-with-css-scroll-snap-2aea</link>
      <guid>https://dev.to/paulcodes/improving-vertical-scroll-with-css-scroll-snap-2aea</guid>
      <description>&lt;p&gt;The pattern with horizontal scroll is frequently found in mobile versions of sites.&lt;/p&gt;

&lt;p&gt;For example, on Airbnb's home page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--klziDyJm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625578932305/bcl8gXkXf6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--klziDyJm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625578932305/bcl8gXkXf6.gif" alt="Airbnb's vertical scroll block example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It looks smooth and the scroll always stops at the beginning of a card, but there are many bad examples on the Internet when the scroll stops in random positions. I'll not provide links to these sites, but I've created a demo for you, please see it on your phone: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/golubkov-p/full/dyWGEKe"&gt;codepen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Try to enable and disable CSS Scroll Snap behaviour by toggling the checkbox on top of the page and see a difference when scrolling.  The difference is enormous. When CSS scroll snap is enabled, the scroll behaviour is more smooth and looks like a native app.&lt;/p&gt;

&lt;p&gt;This behaviour is achieved by 2 simple CSS rules:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.scroll-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;scroll-snap-type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;mandatory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.scroll-container-child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;scroll-snap-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cool, right? You can read more about CSS Scroll Snap on  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Scroll_Snap"&gt;mdn&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#browsers-support"&gt;
  &lt;/a&gt;
  Browser's support
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wQP4NPk9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625664933009/ZTo8A0hQSf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wQP4NPk9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625664933009/ZTo8A0hQSf.png" alt="Browser's support table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It has nice browser's support and can be used in production. &lt;a href="https://caniuse.com/?search=CSS%20Scroll%20Snap"&gt;Can I Use&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it
&lt;/h2&gt;

&lt;p&gt;Thank you for reading! Add your reactions and comments.&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/paulcodes_tech"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Art of making satisfying buttons</title>
      <author>Ammadeo</author>
      <pubDate>Wed, 07 Jul 2021 13:28:32 +0000</pubDate>
      <link>https://dev.to/ammadeo/art-of-making-satisfying-buttons-1407</link>
      <guid>https://dev.to/ammadeo/art-of-making-satisfying-buttons-1407</guid>
      <description>&lt;p&gt;There is only one rule of making a satisfying button. When You press it, You need to feel the same as pressing a physical one.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#create-cohesive-3d-space"&gt;
  &lt;/a&gt;
  Create cohesive 3D space
&lt;/h1&gt;

&lt;p&gt;When You create a website, You need to imagine how it looks in 3D space. &lt;em&gt;Why bother?&lt;/em&gt; Because every time You use a shadow, You simulate that the element is either thicker or floating. Understanding 3D will help You fake depth later with CSS. Let's start with shadows.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-shadows-feel-real"&gt;
  &lt;/a&gt;
  Make shadows feel real
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2ksxVJLN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6vhaiif5rtin15lnc5d7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2ksxVJLN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6vhaiif5rtin15lnc5d7.gif" alt="The button press animation."&gt;&lt;/a&gt;&lt;/p&gt;
Shadows get smaller on the button press.



&lt;p&gt; &lt;br&gt;
Firstly there are no shadows without the light. Ask Yourself:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Where is the website's light source?&lt;/li&gt;
&lt;li&gt;How strong is it?&lt;/li&gt;
&lt;li&gt;How diffuse is it?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Answers for the above will help You decide what shape of shadows You should use and how to animate them. &lt;br&gt;
Besides the light, there is only one more rule to follow:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The thicker the button, the longer and more diffuse shadows are.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#lets-add-some-shadows"&gt;
  &lt;/a&gt;
  Let's add some shadows
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Use realistic shadows */&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;-1px&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.06&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
              &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="m"&gt;-3px&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.08&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* On button press */&lt;/span&gt;
&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:active&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Make shadows much smaller */&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.06&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
              &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;-1px&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.08&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Learn more about realistic shadows in &lt;a href="https://dev.to/devang/the-master-guide-to-smooth-realistic-shadows-in-css-463p"&gt;The master guide to smooth, realistic shadows in CSS&lt;/a&gt; by Devang Saklani.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#remember-about-perspective"&gt;
  &lt;/a&gt;
  Remember about perspective
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jL8fCicU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lknle562fd0arr26u150.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jL8fCicU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lknle562fd0arr26u150.gif" alt="The button press animation in perspective."&gt;&lt;/a&gt;&lt;/p&gt;
The button gets smaller on press.



&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#firstly-what-is-perspective"&gt;
  &lt;/a&gt;
  Firstly what is perspective?
&lt;/h3&gt;

&lt;p&gt;Simply put, perspective is an optical illusion that makes things further away appear smaller.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#perspective-in-web-design"&gt;
  &lt;/a&gt;
  Perspective in web design
&lt;/h3&gt;

&lt;p&gt;In web design, we need to fake the perspective. To do that, You can make floating elements larger than those below them. In the case of a button, it'll get smaller on press.&lt;br&gt;
That might be enough, but if You want to make perspective more obvious, You may want to show the side of a button. It'll feel like looking at the interface from an angle.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-to-implement-perspective"&gt;
  &lt;/a&gt;
  How to implement perspective?
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Make sure that transform-origin match translate() direction. 
     It makes translate() and scale() work it the same axis */&lt;/span&gt;  
  &lt;span class="nl"&gt;transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bottom&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* On button press */&lt;/span&gt;
&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:active&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Apply perspective transformation */&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="c"&gt;/* Translate down on Y axis */&lt;/span&gt;
    &lt;span class="n"&gt;translatey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.25em&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="c"&gt;/* Make button smaller */&lt;/span&gt;
    &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;For more insight on perspective, check out &lt;a href="https://www.youtube.com/watch?v=JQ6Ry_yfj80"&gt;Fix Your Perspective&lt;/a&gt; by Matt Kohr.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#make-it-move"&gt;
  &lt;/a&gt;
  Make it move
&lt;/h2&gt;

&lt;p&gt;Bear in mind, adding &lt;code&gt;transition&lt;/code&gt; is not always necessary for small scale transformations. It's like in classic animation. Our mind will fill the gaps. &lt;br&gt;
In the case of buttons, we may use a brief &lt;code&gt;transition&lt;/code&gt; to keep them pressed for a bit longer. It'll help the user to see the impact of clicking it.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-to-add-transition"&gt;
  &lt;/a&gt;
  How to add transition?
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Add short transition with a delay 
     This transition will control second half of the animation */&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="m"&gt;50ms&lt;/span&gt; &lt;span class="n"&gt;ease-in&lt;/span&gt; &lt;span class="m"&gt;10ms&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;box-shadow&lt;/span&gt; &lt;span class="m"&gt;50ms&lt;/span&gt; &lt;span class="n"&gt;ease-in&lt;/span&gt; &lt;span class="m"&gt;10ms&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* On button press */&lt;/span&gt;
&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:active&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Add short transition
     This transition will control first half of the animation */&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="m"&gt;50ms&lt;/span&gt; &lt;span class="n"&gt;ease-in&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;box-shadow&lt;/span&gt; &lt;span class="m"&gt;50ms&lt;/span&gt; &lt;span class="n"&gt;ease-in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;For the best guide on animation — check out &lt;a href="https://youtu.be/uDqjIdI4bF4"&gt;12 Principles of Animation&lt;/a&gt; by Frank Thomas &amp;amp; Ollie Johnston.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lets-see-the-implementation"&gt;
  &lt;/a&gt;
  Let's see the implementation
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ammadeo/embed/rNyEmbL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#one-last-tip"&gt;
  &lt;/a&gt;
  One last tip
&lt;/h1&gt;

&lt;p&gt;To optically centre a button's content, try moving it up a bit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/* Make bottom padding slightly larger */&lt;/span&gt;
  &lt;span class="nl"&gt;padding-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.05rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#challenge-for-you"&gt;
  &lt;/a&gt;
  Challenge for You
&lt;/h1&gt;

&lt;p&gt;Go and press some buttons around You. &lt;em&gt;For science!&lt;/em&gt;&lt;br&gt;
Btw. The hearth ❤️ button has awesome animation too&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>tutorial</category>
      <category>design</category>
    </item>
    <item>
      <title>I Wan To Buy a Coffee Machine. Do you have one ? Which  do you recommend me?</title>
      <author>Roberto Hernandez</author>
      <pubDate>Wed, 07 Jul 2021 13:13:49 +0000</pubDate>
      <link>https://dev.to/blarzhernandez/i-wan-to-buy-a-coffee-machine-do-you-have-one-which-do-you-recommend-me-124m</link>
      <guid>https://dev.to/blarzhernandez/i-wan-to-buy-a-coffee-machine-do-you-have-one-which-do-you-recommend-me-124m</guid>
      <description>&lt;p&gt;Thanks folks. Really appreciate it&lt;/p&gt;

</description>
      <category>advice</category>
      <category>coffee</category>
      <category>life</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Be a yes-woman </title>
      <author>SinnerSchrader Engineers</author>
      <pubDate>Wed, 07 Jul 2021 13:13:20 +0000</pubDate>
      <link>https://dev.to/s2engineers/be-a-yes-woman-2m3h</link>
      <guid>https://dev.to/s2engineers/be-a-yes-woman-2m3h</guid>
      <description>&lt;p&gt;&lt;em&gt;Illustration by &lt;a href="https://dribbble.com/lindagobeta"&gt;Linda Gobeta&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article was written by &lt;a href="https://www.linkedin.com/in/jana-vesel%C3%A1-prague/"&gt;Jana&lt;/a&gt; (Director Quality Assurance) for our internal International Women's Day website.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Editor's Note: Being a yes-woman is great, however, it is important to pay attention to your bodies’ signals and be a no-woman if this is what's best for you and your health.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#we-hear-and-read-about-strong-women-with-great-careers-and-achievements-and-want-to-be-like-them-we-want-to-be-strongwilled-confident-and-successful-and-if-we-hear-someone-who-says-they-dont-want-these-things-then-we-think-theyre-lying"&gt;
  &lt;/a&gt;
  We hear and read about strong women with great careers and achievements and want to be like them. We want to be strong-willed, confident, and successful. And if we hear someone who says they don’t want these things, &lt;strong&gt;then we think they’re lying.&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Not everyone needs to be a career-driven person but imagine having those personality traits in other areas of your life…&lt;/p&gt;

&lt;p&gt;Most of us are not confident enough to march into the boss’s office and ask for more money because we deserve it. Most of us are not stubborn to the point that we get what we want, to say our own opinion even if nobody else agrees. That is okay.&lt;/p&gt;

&lt;p&gt;To change that is hard, but we can start with a simple step - saying yes to opportunities.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-yes-got-me-pretty-far-without-years-of-worrying-that-i-didnt-have-enough-skills-or-that-i-am-not-a-good-fit-for-the-role"&gt;
  &lt;/a&gt;
  The “Yes” got me pretty far without years of worrying that I didn’t have enough skills or that I am not a good fit for the role.
&lt;/h2&gt;

&lt;p&gt;I remember working as a receptionist at a small firm. It was the only thing I could do after graduating high school with no specialization. I remember getting a warning and losing bonuses after I arranged milk in the wrong way. Oh, those old times…&lt;/p&gt;

&lt;p&gt;I made a lot of friends in the IT department and one day one of them came to my desk and said that he had just had an interview with an IT manager. They agreed that the role was too junior for him but he promised them that I would send them my CV and would interview for the role!&lt;/p&gt;

&lt;p&gt;You can imagine my reaction. However, I said yes.&lt;/p&gt;

&lt;p&gt;I studied books for two weeks, I googled a lot. And after a two-hour interview, I got the job of a junior tester.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The most important thing wasn’t the books. It was the “yes”.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After four years I started being pretty unhappy because I couldn’t find any common ground with my boss. It escalated so much that I found myself sitting with his boss and trying to solve the situation. Meanwhile, I was socializing outside of my project with other colleagues at the company, and one day another friend came to me, and, knowing my situation he suggested that I should change the project. He had changed his project a couple of months ago and was happy with the change. &lt;/p&gt;

&lt;p&gt;He told me that one of the project managers was looking for a Test Manager for a new project which was about to start. &lt;/p&gt;

&lt;p&gt;Wow! That was a role I wasn’t expecting to be in my career for another two years.&lt;/p&gt;

&lt;p&gt;I found myself sitting in the meeting room with an infamous project manager in the company at that time (she’s still a badass there) where she was explaining her vision of my future work: come up with a test strategy, analysis, staffing my own team, leading the testing of two teams, and be a spokesperson for the client in any testing discussions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#after-all-this-she-turned-to-me-and-asked-me-a-simple-question"&gt;
  &lt;/a&gt;
  &lt;strong&gt;After all this, she turned to me and asked me a simple question:&lt;/strong&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;h2&gt;
  &lt;a href="#do-you-have-the-courage-to-do-it-all"&gt;
  &lt;/a&gt;
  &lt;strong&gt;“Do you have the courage to do it all?”&lt;/strong&gt;
&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;My heart was pounding, I was sweating like a pig, in my head I was panicking. I didn’t have any idea about half the things she was talking about.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;However, I said yes.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Another period of books and googling was awaiting me. This time I had two months before the project started. &lt;/p&gt;

&lt;p&gt;I wrote a pretty good strategy for a newbie, I staffed a very good team that soon became self-sufficient and I advocated for our project team in front of the client. &lt;/p&gt;

&lt;p&gt;The client was a tough one. The Test Manager on the client-side couldn’t accept that there was a young girl in the same position as him. He didn’t acknowledge me at the meetings for at least three months. I remember a lot of funny situations. Thankfully, our team was perfectly aligned about responsibilities and when he tried to get around me, he couldn’t. Soon, he learned to deal with me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#after-two-years-i-decided-to-leave-the-company-and-i-came-across-a-job-ad-for-head-of-testing-challenged-and-motivated-because-leadership-became-my-favorite-topic-i-sent-in-my-cv"&gt;
  &lt;/a&gt;
  After two years I decided to leave the company and I came across a job ad for Head of Testing. Challenged and motivated because leadership became my favorite topic I sent in my CV.
&lt;/h2&gt;

&lt;p&gt;The role was completely different. No project, no testing. It was a pure management role with a team of 50 people. I had a lot of interview rounds with the owners of the company and with sales and they were struck that I was not afraid to scale my experience from 5 teammates to 50. &lt;/p&gt;

&lt;p&gt;I was afraid, a lot. This wasn’t about leading a defect meeting. It was about pitching to clients, sales, budget handling, hiring and firing, strategy and vision, KPIs, and decision making which could influence the revenue of the company.&lt;/p&gt;

&lt;p&gt;I believed in my “yes” rule and I also recognized the only risk here: If I screw up the worst thing they can do is to fire me. Being in IT I knew I could get a new job in a week. I realized the risk is not that high.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So I said yes again.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It was a hell of a ride. I had no time for adjusting. In two weeks I was running in “production”. The start was so clumsy that I had to deal with the consequences the whole year I was working there. Especially with the team, I had to fire seven people in the first months. I had to come up with a strategy for how to get the competence into green numbers, I had to come up with a solution on how to handle 50 people because doing so by myself was insane. I won my first pitch, I came up with 4 new products to sell…&lt;/p&gt;

&lt;p&gt;I burnt out four times during that year. My doctor was convincing me to leave when my stress level didn’t ease after a week of vacation. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;However, this “yes” was all worth it.&lt;/strong&gt; I learned a lot. &lt;/p&gt;

&lt;p&gt;I left after the year due to my health and also due to some decisions of the owners I wasn’t in agreement with. I found a good, calm position at SinnerSchrader as a Director where I partially work on a project and I have a small team. The company lets me indulge in various topics as leadership, diversity, or mentoring when I want to. There hasn’t even been a day of stress and it’s been a year. :)&lt;/p&gt;

&lt;p&gt;What to say to summarise? We can be scared, we can doubt ourselves, we can lack the self-confidence of successful top managers, but saying yes despite that is powerful and it gets you far. The opportunities will open before you and you’ll find out that there is nothing to be afraid of, there is a strong will inside you, and that in the worst case you will always manage to find the light in the tunnel and get out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#say-yes-from-the-heart-say-yes-to-everything-that-you-always-dreamt-of-or-what-seems-to-be-interesting-it-is-worth-it"&gt;
  &lt;/a&gt;
  Say yes from the heart. Say yes to everything that you always dreamt of, or what seems to be interesting. &lt;strong&gt;It is worth it!&lt;/strong&gt;
&lt;/h2&gt;

</description>
      <category>womenintech</category>
      <category>motivation</category>
      <category>career</category>
      <category>testing</category>
    </item>
    <item>
      <title>Operations in Dart</title>
      <author>Daniel Ko</author>
      <pubDate>Wed, 07 Jul 2021 13:10:21 +0000</pubDate>
      <link>https://dev.to/danko56666/dart-operators-369</link>
      <guid>https://dev.to/danko56666/dart-operators-369</guid>
      <description>&lt;p&gt;    Today, we'll be taking a look at operators in the Dart language. A lot of the operators are things you'd expect from your Algebra class.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#arithmetic-operators"&gt;
  &lt;/a&gt;
  Arithmetic Operators
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="c1"&gt;// addition&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// will return 3&lt;/span&gt;

&lt;span class="c1"&gt;// subtraction&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// will return 1&lt;/span&gt;

&lt;span class="c1"&gt;// multiplication&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// will return 4&lt;/span&gt;

&lt;span class="c1"&gt;// double division&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// will return 2.5;&lt;/span&gt;

&lt;span class="c1"&gt;// integer division&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// will return 2;&lt;/span&gt;

&lt;span class="c1"&gt;// modulus&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// will return 1;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The difference between integer and double division is just the type of the return value.&lt;/li&gt;
&lt;li&gt;Negative values are supported in these operators.&lt;/li&gt;
&lt;li&gt;The output is entirely dependent on the operator so even if you did 5.0~/2.0, it would still return 2.&lt;/li&gt;
&lt;li&gt;Modulus is the remainder from the division operation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#increment-decrement-operators"&gt;
  &lt;/a&gt;
  Increment / Decrement Operators
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;If you want a shorthand way to increase or decrease a value, you can use the ++ or -- operators.&lt;/li&gt;
&lt;li&gt;There are two version of these as well, known as postfix / prefix.

&lt;ul&gt;
&lt;li&gt;Prefix: The value is incremented first, then returned.&lt;/li&gt;
&lt;li&gt;Postfix: The value is returned, then incremented.&lt;/li&gt;
&lt;li&gt;Let's take a look at an example to better understand this.
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// what do you think the output will be?&lt;/span&gt;
  &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;increaseNum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;increaseNum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="kt"&gt;num&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;num&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The output will be 0, because the function returns the number (which was 0) and then gets increased, but that doesn't matter for this example.&lt;/li&gt;
&lt;li&gt;However, this example will produce the number we may have wanted.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// will print 1&lt;/span&gt;
  &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;increaseNum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;increaseNum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="kt"&gt;num&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="kt"&gt;num&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;There is another way to do a shorthand increment and assignment with += operator.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;increaseNum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;increaseNum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="kt"&gt;num&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;This will behave like a prefix increment.&lt;/li&gt;
&lt;li&gt;In addition to that, you would have benefit of being able to increase by any amount, unlike the ++ operator which limits you to only increase of 1 (or decrease of 1 with --).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#assignment-operators"&gt;
  &lt;/a&gt;
  Assignment Operators
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="c1"&gt;// basic assignment operator&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// will print 2&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// will print 0&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// will print 1&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// this actually won't compile because we can't assign a double to an int&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// will print 1&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;~/=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;You might be wondering what exactly an assignment operator is. It is essentially just something that sets the value of what we have on the left side of the = to the value on the right side.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#relational-operators"&gt;
  &lt;/a&gt;
  Relational Operators
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Relational operators evaluate two values on either side of it's operand and return either true or false depending on which it is.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#logical-operators"&gt;
  &lt;/a&gt;
  Logical Operators
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There's 3 logical operators:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;!

&lt;ul&gt;
&lt;li&gt;This operator toggles the value to the opposite boolean value of what it currently is set to.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&amp;amp;&amp;amp;

&lt;ul&gt;
&lt;li&gt;This operator evaluates an expression on both sides and returns true if both sides are true, other wise returns false.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;||

&lt;ul&gt;
&lt;li&gt;This operator evaluates an expression on both sides and returns true if one side is true.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are "truth tables" you can look up to get a better understanding of these logical operators. Here's an example of one:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SdxrRdMc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dfi.manisaskincare.pw/img/393446.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SdxrRdMc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dfi.manisaskincare.pw/img/393446.gif" alt="Alt text of image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's about it for operators in Dart. Up next is how to break up flow of logic in your programs utilizing Dart!&lt;br&gt;
If you have any question, leave a comment or reach out to me directly and I'll do my best to help you and / or revise my post for better clarity.&lt;/p&gt;

</description>
      <category>dart</category>
      <category>flutter</category>
    </item>
    <item>
      <title>Add Security Headers to your Serverless Static Site</title>
      <author>Ivonne Roberts</author>
      <pubDate>Wed, 07 Jul 2021 12:50:32 +0000</pubDate>
      <link>https://dev.to/aws-builders/add-security-headers-to-your-serverless-static-site-4i54</link>
      <guid>https://dev.to/aws-builders/add-security-headers-to-your-serverless-static-site-4i54</guid>
      <description>&lt;p&gt;Being able to create a static website hosted on AWS S3 and fronted by Amazon CloudFront has become the serverless standard these days. Both of these AWS services facilitate a lot of the heavy lifting for you by giving you performant web hosting, with features like caching at edge locations closer to your end users, and security features like mitigating DDoS attacks.&lt;/p&gt;

&lt;p&gt;One thing that required a little more effort then I’d prefer was the ability to add security headers to responses. That used to have to be done through Lambda@Edge which, while still serverless, ideally it should be reserved for more computationally involved origin resolution or response manipulation. Today you can now do that with Amazon CloudFront Functions.&lt;/p&gt;

&lt;p&gt;Amazon CloudFront Functions provide short lived simple JavaScript functions that can manipulate your response/request. Some use cases could be url rewrites/redirects, access authorization and what I will show you here, header manipulation. See Danilo Poccia’s blog post for more details around Amazon CloudFront Functions.&lt;/p&gt;

&lt;p&gt;Keep reading to see how we add the following security headers to our requests using AWS Cloudformation and Amazon CloudFront Function&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Strict-Transport-Security&lt;/li&gt;
&lt;li&gt;Content-Security-Policy&lt;/li&gt;
&lt;li&gt;X-Content-Type-Options&lt;/li&gt;
&lt;li&gt;X-Frame-Options&lt;/li&gt;
&lt;li&gt;X-XSS-Protection&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#create-your-serverless-function"&gt;
  &lt;/a&gt;
  Create your Serverless function
&lt;/h2&gt;

&lt;p&gt;In CloudFormation there are a few things you need to define. 1) The name of your function, in my case &lt;code&gt;add-security-headers&lt;/code&gt;. 2) that you want this to be published automatically. 3) Your function configuration which includes what run time it will use, which at the time of writing this only includes &lt;code&gt;cloudfront-js-1.0&lt;/code&gt;. And lastly 4) your actual code. See the complete resource definition below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;addSecurityHeadersFunction&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::CloudFront::Function&lt;/span&gt;
  &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;add-security-headers&lt;/span&gt;
    &lt;span class="na"&gt;AutoPublish&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
    &lt;span class="na"&gt;FunctionConfig&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Comment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Adds security headers to the response&lt;/span&gt;
      &lt;span class="na"&gt;Runtime&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cloudfront-js-1.0&lt;/span&gt;
    &lt;span class="na"&gt;FunctionCode&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
      &lt;span class="s"&gt;function handler(event) {&lt;/span&gt;
          &lt;span class="s"&gt;var response = event.response;&lt;/span&gt;
          &lt;span class="s"&gt;var headers = response.headers;&lt;/span&gt;

          &lt;span class="s"&gt;// Set HTTP security headers&lt;/span&gt;
          &lt;span class="s"&gt;// Since JavaScript doesn't allow for hyphens in variable names, we use the dict["key"] notation&lt;/span&gt;
          &lt;span class="s"&gt;headers['strict-transport-security'] = { value: 'max-age=63072000; includeSubdomains; preload'};&lt;/span&gt;
          &lt;span class="s"&gt;headers['content-security-policy'] = { value: "default-src 'none'; img-src 'self'; script-src 'self'; style-src 'self'; object-src 'none'"};&lt;/span&gt;
          &lt;span class="s"&gt;headers['x-content-type-options'] = { value: 'nosniff'};&lt;/span&gt;
          &lt;span class="s"&gt;headers['x-frame-options'] = {value: 'DENY'};&lt;/span&gt;
          &lt;span class="s"&gt;headers['x-xss-protection'] = {value: '1; mode=block'};&lt;/span&gt;

          &lt;span class="s"&gt;// Return the response to viewers&lt;/span&gt;
          &lt;span class="s"&gt;return response;&lt;/span&gt;
      &lt;span class="s"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#link-your-cloudfront-distribution"&gt;
  &lt;/a&gt;
  Link your CloudFront Distribution
&lt;/h2&gt;

&lt;p&gt;Now you can update your existing CloudFront Distribution by associating the function to your CacheBehavior as below and deploy your cloudformation. In my example below I’m importing the ARN from a separate template that includes all my CloudFront Functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;FunctionAssociations&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;EventType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;viewer-response&lt;/span&gt;
    &lt;span class="na"&gt;FunctionARN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!ImportValue&lt;/span&gt;
      &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Fn::Sub'&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${CloudFrontStackName}-AddSecurityHeadersFunction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#test-your-implementation"&gt;
  &lt;/a&gt;
  Test your implementation
&lt;/h2&gt;

&lt;p&gt;Once completed head over to your terminal window and use curl to test out our headers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; ivonne@my-machine ~ % curl -i https://static.ivonneroberts.com
 HTTP/1.1 200 OK
 Content-Type: text/html
 Content-Length: 87
 Connection: keep-alive
 Date: Fri, 28 May 2021 23:59:19 GMT
 Last-Modified: Fri, 28 May 2021 23:06:46 GMT
 Etag: "7875df45e56965139099615f6c5c907b"
 Accept-Ranges: bytes
 Server: AmazonS3
 Via: 1.1 3dc5af024af63cc0e8b9cf31fd852ecf.cloudfront.net (CloudFront)
 Content-Security-Policy: default-src 'none'; img-src 'self'; script-src 'self'; style-src 'self'; object-src 'none'
 Strict-Transport-Security: max-age=63072000; includeSubdomains; preload
 X-Xss-Protection: 1; mode=block
 X-Frame-Options: DENY
 X-Content-Type-Options: nosniff
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see our 5 security headers are now displayed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; Content-Security-Policy: default-src 'none'; img-src 'self'; script-src 'self'; style-src 'self'; object-src 'none'
 Strict-Transport-Security: max-age=63072000; includeSubdomains; preload
 X-Xss-Protection: 1; mode=block
 X-Frame-Options: DENY
 X-Content-Type-Options: nosniff
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Adding a Amazon CloudFront function is pretty simple and you can see the updates almost immediately. If you would like to see the full CloudFormation templates head on over my github (link below). Feel free to modify it to fit your use case. As always if you have any questions reach out!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; [&lt;a href="https://github.com/ivlo11/serverless-patterns/tree/main/static-site-with-cloudfront-function"&gt;https://github.com/ivlo11/serverless-patterns/tree/main/static-site-with-cloudfront-function&lt;/a&gt;]&lt;br&gt;
&lt;strong&gt;Documentation:&lt;/strong&gt; [&lt;a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-functions.html"&gt;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-functions.html&lt;/a&gt;]&lt;br&gt;
&lt;strong&gt;CloudFormation Documentation:&lt;/strong&gt; [&lt;a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-function.html"&gt;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-function.html&lt;/a&gt;]&lt;br&gt;
&lt;strong&gt;CloudFront Function Sample Code:&lt;/strong&gt; [&lt;a href="https://github.com/aws-samples/amazon-cloudfront-functions"&gt;https://github.com/aws-samples/amazon-cloudfront-functions&lt;/a&gt;]&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#happy-coding"&gt;
  &lt;/a&gt;
  Happy Coding!
&lt;/h2&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
      <category>s3</category>
      <category>cloudfront</category>
    </item>
    <item>
      <title>I made 150+ high-quality illustrations, totally free. Use it anywhere without attribution.</title>
      <author>hrishikesh1990</author>
      <pubDate>Wed, 07 Jul 2021 12:42:05 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/i-made-150-high-quality-illustrations-totally-free-use-it-anywhere-without-attribution-1lbg</link>
      <guid>https://dev.to/hrishikesh1990/i-made-150-high-quality-illustrations-totally-free-use-it-anywhere-without-attribution-1lbg</guid>
      <description>&lt;p&gt;Hey everyone,&lt;/p&gt;

&lt;p&gt;I know that all of you are working on exciting products. To help you make it a bit more beautiful, I have made 150+ high-quality illustrations.&lt;/p&gt;

&lt;p&gt;As the title suggests, they are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Totally free&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;2. Absolutely need NO attribution :)&lt;/strong&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#scale-and-its-launch"&gt;
  &lt;/a&gt;
  Scale and its launch
&lt;/h3&gt;

&lt;p&gt;Here's Scale's link: &lt;a href="https://2.flexiple.com/scale/multi-color-illustrations"&gt;Scale&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I just launched this on Product Hunt. Your support would mean a lot to me: &lt;a href="https://www.producthunt.com/posts/multicolor-illustrations-by-scale"&gt;https://www.producthunt.com/posts/multicolor-illustrations-by-scale&lt;/a&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#whats-new-in-scale-20"&gt;
  &lt;/a&gt;
  What's new in Scale 2.0?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Now you can tweak 3 colors in the illustration&lt;/li&gt;
&lt;li&gt;Add/remove masks from the characters&lt;/li&gt;
&lt;li&gt;Filter illustrations by Gender&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have fun and build great projects!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
      <category>showdev</category>
      <category>opensource</category>
    </item>
  </channel>
</rss>
