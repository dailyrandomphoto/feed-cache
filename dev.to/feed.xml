<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>My HNG8 internship goals</title>
      <author>AlanDouglasDan</author>
      <pubDate>Sun, 15 Aug 2021 19:42:14 +0000</pubDate>
      <link>https://dev.to/alandouglasdan/my-hng8-internship-goals-23o8</link>
      <guid>https://dev.to/alandouglasdan/my-hng8-internship-goals-23o8</guid>
      <description>&lt;p&gt;HNG internship is an 8 week remote internship program designed to find and develop the most talented software developers. The intern coders are introduced to complex programming frameworks and get to work on real world software.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How the internship works&lt;/strong&gt;&lt;br&gt;
HNG combines technology with a well proven educational system of learning to mentor interns and help them grow, which in turn advances the software ecosystem.&lt;br&gt;
The interns are given tasks that are more focused with real world experiences.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My goals as an HNG8 intern&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I'm currently a student of Uniuyo 300 level and first semester is on going, I'll use this as an opportunity to improve my time management skill. I'll also find the right balance between academics and internship.&lt;/li&gt;
&lt;li&gt;Secure a good job at the end of the internship &lt;/li&gt;
&lt;li&gt;Be a team player and collaborate with other interns in real world projects&lt;/li&gt;
&lt;li&gt;My goal is to become an expert in backend  development by the end of the internship. I'm ready to strive as hard as possible to get to the final stage.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/3q3FV65ZrUs"&gt;Figma tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/8JJ101D3knE"&gt;Git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/UB1O30fR-EE"&gt;HTML&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/W6NZfCO5SIk"&gt;JavaScript&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Read more about HNG internship here: &lt;a href="https://internship.zuri.team/"&gt;Zuri&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Full-Stack App with VueJs and Flask</title>
      <author>Bek Brace</author>
      <pubDate>Sun, 15 Aug 2021 19:28:18 +0000</pubDate>
      <link>https://dev.to/bekbrace/full-stack-app-with-vuejs-and-flask-3d32</link>
      <guid>https://dev.to/bekbrace/full-stack-app-with-vuejs-and-flask-3d32</guid>
      <description>&lt;p&gt;This is a game library full-stack web app using VueJs for Frontend design and Flask for backend server&lt;br&gt;
Vue is a progressive open-source JavaScript framework for building UI&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/lenV5aVOMp8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The word "progressive" means its implemented as additional markup to html. it basically a template model bound to a data model.&lt;/p&gt;

&lt;p&gt;If the model is updated the browsers html is updated, that is it reacts to model updates. Vue js in an example of progressive framework.&lt;/p&gt;

&lt;p&gt;Vue is not created by a Big companies such as Google for Angular or Facebook for React; but it was created by an independent software developer called Evan You.&lt;/p&gt;

&lt;p&gt;Comparable to React and Angular, it's much more approachable, and easy to grasb, so beginners can get up and running quickly.&lt;/p&gt;

&lt;p&gt;It's also as powerful as react and angular, so it provides all the features you'll need to create modern front-end applications.&lt;/p&gt;

&lt;p&gt;There are severl Vue version, but the main versions are Vue2 and Vue3. And in this tutprial we will work with Vue2&lt;/p&gt;

&lt;p&gt;&lt;a href="https://vuejs.org/v2/guide/index.html"&gt;https://vuejs.org/v2/guide/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vue provides a way to build components that encapsulate state in your javascript in a reactive way to your HTML template using what's called Declarative rendering where you can render data to the browser with straightforward template syntax, it reminds of jinja2 or the django template language with these double curly braces, where you can plug any variables and it gets to be rendered in the DOM, so the same data input will always produce the same output rendered in the DOM.&lt;/p&gt;

&lt;p&gt;FLASK&lt;/p&gt;

&lt;p&gt;&lt;a href="https://flask.palletsprojects.com/en/2.0.x/"&gt;https://flask.palletsprojects.com/en/2.0.x/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Flask is a Python microframework like Pyramid, bottle or CherryPy, and with it we'll build a a RESTful API today, I also have a tutorial to show you how to create a restful API in Flask in two different ways. And I have a crash course on Flask, you can check it out if you like&lt;/p&gt;

&lt;p&gt;The good thing about microframeworks like Flask, is we don't have out of the box tools and features like in Django or TurboGears, so you will have to build everything manually which is a great thing for learning and self-improvement as a developer in my opinion.&lt;/p&gt;

&lt;p&gt;Shoutout to Michael Hermann, for letting me use his code base to create this tutorial&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/mikeherman"&gt;https://twitter.com/mikeherman&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mherman.org"&gt;https://mherman.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github Link : &lt;a href="https://github.com/BekBrace/VueJS-Flask-Full-Stack-Application"&gt;https://github.com/BekBrace/VueJS-Flask-Full-Stack-Application&lt;/a&gt;&lt;br&gt;
Website : &lt;a href="https://bkbrace.com"&gt;https://bkbrace.com&lt;/a&gt;&lt;br&gt;
Peace out,&lt;br&gt;
Bek&lt;/p&gt;

</description>
      <category>vue</category>
      <category>python</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Operating Systems Interview Preparation Notes</title>
      <author>Abhinandan Sharma</author>
      <pubDate>Sun, 15 Aug 2021 19:08:10 +0000</pubDate>
      <link>https://dev.to/abhi824/operating-systems-interview-preparation-notes-408l</link>
      <guid>https://dev.to/abhi824/operating-systems-interview-preparation-notes-408l</guid>
      <description>&lt;p&gt;If you are struggling with the right track and a 10-min read for Operating systems from begin to end, you're at right place. Even I am not sure where to start, but we would figure it and if you are reading this, I have successfully completed these notes or at least am on right track.&lt;/p&gt;

&lt;p&gt;Let's start our struggle for OS:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-track"&gt;
  &lt;/a&gt;
  The Track
&lt;/h3&gt;

&lt;p&gt;I found many resources to learn, let's just list all:&lt;br&gt;
[Galvin Concise PPTs)[&lt;a href="https://www.os-book.com/OS9/slide-dir/index.html%5D:"&gt;https://www.os-book.com/OS9/slide-dir/index.html]:&lt;/a&gt; These were great but I felt that these are a little bit too much, so here are the chapters we would do:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Processes&lt;/li&gt;
&lt;li&gt;Threads&lt;/li&gt;
&lt;li&gt;Process Synchronization&lt;/li&gt;
&lt;li&gt;CPU Scheduling Algorithms&lt;/li&gt;
&lt;li&gt;Deadlocks&lt;/li&gt;
&lt;li&gt;Main memory&lt;/li&gt;
&lt;li&gt;Virtual memory&lt;/li&gt;
&lt;li&gt;Virtual Machines&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;I am skipping introduction of OS for now as it was not that important, this is going to be a fast article which works like a last night dose.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#processes"&gt;
  &lt;/a&gt;
  Processes
&lt;/h4&gt;

&lt;p&gt;Processes are a program in execution. It has its own memory which is divided into four parts: Text, Data, Heap and Stack.&lt;/p&gt;

&lt;p&gt;Brief explanation about these &lt;br&gt;
Text: Stores the compiled program code. &lt;/p&gt;

&lt;p&gt;Data: stores global and static variables&lt;/p&gt;

&lt;p&gt;Heap: Stores dynamically allocated data&lt;/p&gt;

&lt;p&gt;Stack: Stores local variables.&lt;/p&gt;

&lt;p&gt;Process, as the name suggests, have different states (just like making a joint). Here is a diagram which says it all:&lt;/p&gt;

&lt;p&gt;Diagram&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sMLRigVY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/crkkcao6l865874kz3sw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sMLRigVY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/crkkcao6l865874kz3sw.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Process Control Block(PCB)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is a data structure that stores all information about a process. &lt;/p&gt;

&lt;p&gt;It contains these:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Process State: We already saw these&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Process ID: self-explanatory&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CPU registers and Program Counter: It is basically a pointer to next instruction to be executed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CPU scheduling information: priority and pointers to scheduling queues(will see later)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Memory management information: self-explanatory&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Accounting Information: CPU time consumed, limits, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I/o Status information: Devices allocated, open file tables, etc.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Process Scheduling Queues&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This handles the order of execution of the process. We have different queues for different states. When the state of a process is changed, it is simply detached from the current queue and added to it's new state's queue. &lt;/p&gt;

&lt;p&gt;This says it all&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hc8xQqKV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qqewgpq5wacqfg6eaz1v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hc8xQqKV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qqewgpq5wacqfg6eaz1v.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please note that we are not actually studying scheduling algorithms, we are just assuming that we have some given order and how the processes are executed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Schedulers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are three types of schedulers, long term, short term and mid term schedulers. &lt;/p&gt;

&lt;p&gt;Brief explanation&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Long term Schedulers: These are responsible for sending a process from new to ready queue. It has to maintain degree of multi programming which is simply this: Average rate of incoming = average rate of outgoing. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Short term schedulers/ CPU schedulers: From ready queue to running queue. (I think it's clear)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mid term schedulers: These are special type of schedulers with a unique functionality: when a process is paused(maybe it needs some input) it, &lt;strong&gt;swaps in&lt;/strong&gt; the process and allocates this position to some other process and when it arrives again, &lt;strong&gt;swaps out&lt;/strong&gt; the other process and resume the previous process.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Scheduling Algorithms&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Terminology&lt;br&gt;
&lt;strong&gt;Arrival Time&lt;/strong&gt;: Time at which process arrives in ready queue&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Completion Time&lt;/strong&gt;: Time at which process completes its execution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Burst Time&lt;/strong&gt;: Time required by process for CPU execution&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Turn Around Time&lt;/strong&gt;: Time difference between completion and arrival time.(How it's different from burst time?)(Add waiting time here as well)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Waiting Time&lt;/strong&gt;: Turnaround time-burst time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Throughput&lt;/strong&gt;: Total number of processes completed per unit time. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Non-preemptive Algorithms&lt;/strong&gt;: Once a processes is in ready queue we cannot pause it's execution until it's completely executed. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Preemptive Algorithms&lt;/strong&gt;: Opposite of non-preemptive. Period.&lt;/p&gt;

&lt;p&gt;Let's start with algorithms.&lt;/p&gt;

&lt;p&gt;First Come First Serve(FCFS)&lt;br&gt;
Widely used in college admissions, this algorithm is just what it says. Whichever process arrives first, it will execute the process first and then jump to second process. (Non-preemptive Algorithm)&lt;/p&gt;

&lt;p&gt;Here is a simple C++ code&lt;br&gt;
You seriously opened this? Please try this yourself. It is very simple just a sort will do the work.&lt;/p&gt;

&lt;p&gt;This gag diagram will help you understand FCFS:&lt;/p&gt;

&lt;p&gt;Gag diagram&lt;br&gt;
Processes:&lt;br&gt;
Processes  | Burst Time&lt;/p&gt;

&lt;p&gt;P1         | 7&lt;/p&gt;

&lt;p&gt;P2         | 3&lt;/p&gt;

&lt;p&gt;P3         | 10&lt;/p&gt;

&lt;p&gt;P4         | 5&lt;/p&gt;

&lt;p&gt;Gag Diagram:&lt;/p&gt;

&lt;p&gt;Average waiting time:&lt;/p&gt;

&lt;p&gt;Average turnaround time:&lt;/p&gt;

&lt;p&gt;Why FCFS is not that good?&lt;br&gt;
It's kind of obvious. If the arrival time of a process which takes a lot of time than others is less, it will slow down the operating system. &lt;/p&gt;

&lt;p&gt;Shortest Job First(SJS)&lt;br&gt;
Just sort the jobs according to their burst times. And we schedule the jobs according to that order only. It is a non-preemptive algorithm but there does exists a preemptive algorithm for SJS as well.&lt;/p&gt;

&lt;p&gt;C++ Code for non-preemptive SJS&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#include&amp;lt;bits/stdc++.h&amp;gt;
using namespace std;
#define int long long int
int32_t main()
{
    int n;cin&amp;gt;&amp;gt;n;
    vector&amp;lt;pair&amp;lt;int,int&amp;gt;&amp;gt; times(n);
    vector&amp;lt;pair&amp;lt;int,int&amp;gt;&amp;gt; duration(n);
    // vector&amp;lt;Time&amp;gt;a;
    for(int i=0;i&amp;lt;n;i++)
    {
        cin&amp;gt;&amp;gt;times[i].first&amp;gt;&amp;gt;times[i].second;
        duration[i].second=i;
        duration[i].first=times[i].second-times[i].first;
    }

    sort(duration.begin(),duration.end());

    // Order of jobs is the duration.second order
    // Now we need to find turnaround time, waiting time and
    // Completion time for every process
    int total_waiting_time=0;
    int total_turnaround_time=0;
    int t=0;
    for(int i=0;i&amp;lt;n;i++)
    {
        cout&amp;lt;&amp;lt;"Process "&amp;lt;&amp;lt;duration[i].second+1&amp;lt;&amp;lt;" in ready queue now!\n";
        t=max(times[duration[i].second].first,t);
        t+=duration[i].first;
        int turnaround_time=t-times[duration[i].second].first;
        total_turnaround_time+=turnaround_time;
        cout&amp;lt;&amp;lt;"Turn Around Time: "&amp;lt;&amp;lt;turnaround_time&amp;lt;&amp;lt;"\n";
        int waiting_time=turnaround_time-duration[i].first;
        total_waiting_time+=waiting_time;
        cout&amp;lt;&amp;lt;"Waiting Time: "&amp;lt;&amp;lt;waiting_time&amp;lt;&amp;lt;"\n";
    }
    double avg_turnaround_time=(double)total_turnaround_time/n;
    double avg_waiting_time=(double)total_waiting_time/n;
    cout&amp;lt;&amp;lt;"Average Waiting Time: "&amp;lt;&amp;lt;avg_waiting_time&amp;lt;&amp;lt;"\n";
    cout&amp;lt;&amp;lt;"Average Turn Around Time: "&amp;lt;&amp;lt;avg_turnaround_time&amp;lt;&amp;lt;"\n";


    return 0;
}
~~~~~


This gag diagram will help you understand SJS:

Gag diagram
Processes:
Processes  | Burst Time

P1         | 7

P2         | 3

P3         | 10

P4         | 5

Gag Diagram:

Average waiting time:

Average turnaround time:





Disadvantages of SJS
Here we have certain time when our CPU is idle. Being idle is the worst thing we can have!(In general as well, that's why I am writing this).


It has a preemptive way also. In this, the trick is to fill those gaps which we were making. Whenever we are idle, we assign computer another process which can be filled.

C++ code for preemptive code
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;To be updated&lt;br&gt;
~&lt;del&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;This gag diagram will help you understand preemptive version of SJS:&lt;/p&gt;

&lt;p&gt;Gag diagram&lt;br&gt;
Processes:&lt;br&gt;
Processes  | Burst Time&lt;/p&gt;

&lt;p&gt;P1         | 7&lt;/p&gt;

&lt;p&gt;P2         | 3&lt;/p&gt;

&lt;p&gt;P3         | 10&lt;/p&gt;

&lt;p&gt;P4         | 5&lt;/p&gt;

&lt;p&gt;Gag Diagram:&lt;/p&gt;

&lt;p&gt;Average waiting time:&lt;/p&gt;

&lt;p&gt;Average turnaround time:&lt;/p&gt;

&lt;p&gt;Round Robin Algorithm&lt;/p&gt;

&lt;p&gt;In this algorithm, we have fixed time slots and we execute the processes sequentially in the order given and switch between processes after every fixed time. This gag diagram will help you understand:&lt;/p&gt;

&lt;p&gt;Gag diagram&lt;br&gt;
Processes:&lt;br&gt;
Processes  | Burst Time&lt;/p&gt;

&lt;p&gt;P1         | 7&lt;/p&gt;

&lt;p&gt;P2         | 3&lt;/p&gt;

&lt;p&gt;P3         | 10&lt;/p&gt;

&lt;p&gt;P4         | 5&lt;/p&gt;

&lt;p&gt;Gag Diagram:&lt;/p&gt;

&lt;p&gt;Average waiting time:&lt;/p&gt;

&lt;p&gt;Average turnaround time:&lt;/p&gt;

&lt;p&gt;C++ Code&lt;br&gt;
TBU&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Process synchronization&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Processes categorized on basis of synchronization &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Independent Process : Execution of one process does not affects the execution of other processes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cooperative Process : Execution of one process affects the execution of other processes.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Process synchronization problem arises in the case of Cooperative process also because resources are shared in Cooperative processes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Race Condition&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When more than one processes are executing the same code or accessing the same memory or any shared variable in that condition there is a possibility that the output or the value of the shared variable is wrong so for that all the processes doing the race to say that my output is correct this condition known as a race condition. Several processes access and process the manipulations over the same data concurrently, then the outcome depends on the particular order in which the access takes place.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
Suppose we have two operations, cnt++ and cnt--, from two different processes acting on a global variable cnt.&lt;/p&gt;

&lt;p&gt;++ Operation :&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int reg=cnt;
reg=reg-1;
cnt=reg;
~~~~~

-- Operation:

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;int reg2=cnt;&lt;br&gt;
reg2=reg2-1;&lt;br&gt;
cnt=reg2;&lt;br&gt;
~&lt;del&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;Now, we need to do these operation in this order:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int reg=cnt;
reg=reg-1;
cnt=reg;
int reg2=cnt;
reg2=reg2-1;
cnt=reg2;
~~~~~

But as the resource is shared, it can happen in any order, maybe this one as well:

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;int reg=cnt;&lt;br&gt;
reg=reg-1;&lt;br&gt;
int reg2=cnt;&lt;br&gt;
cnt=reg;&lt;br&gt;
reg2=reg2-1;&lt;br&gt;
cnt=reg2;&lt;br&gt;
~&lt;del&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;This will lead to cnt's final value as 4 if initial value is 5.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Critical Section&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Critical section is a code segment which can be accessed by only one process at a time. This code segment is common in many processes and if many processes run simultaneously, we would have a hard time finding the process containing the error, if it happens.&lt;/p&gt;

&lt;p&gt;Any solution to critical section should must satisfy these rules.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Mutual Exclusion : If a process is executing in its critical section, then no other process is allowed to execute in the critical section.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Progress : If no process is executing in the critical section and other processes are waiting outside the critical section, then only those processes that are not executing in their remainder section can participate in deciding which will enter in the critical section next, and the selection can not be postponed indefinitely.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bounded Waiting : A bound must exist on the number of times that other processes are allowed to enter their critical sections after a process has made a request to enter its critical section and before that request is granted.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is what critical section looks like&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9lejTWbH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20dzuo5i1gsw809rffs3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9lejTWbH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20dzuo5i1gsw809rffs3.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Peterson's Solution&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As we saw earlier, we need a solution for critical section of code, as it can lead to anomalies. This solution should satisfy the rules we mentioned before.&lt;/p&gt;

&lt;p&gt;Simple Psuedo code&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int turn;
bool flag[2];
do{
    flag[i]=1;
    turn=j;
    while(flag[j]&amp;amp;&amp;amp;turn==j);
    /////////////////////
    // Critical section//
    /////////////////////
    flag[i]=0;
    ///////////////////////
    // Remainder section///
    ///////////////////////

}
while(1)
~~~~~ 



How it works
Before actually seeing how it works, please have another look of the things we want it to satisfy.
These 3 rules:

1. Mutual exclusion
2. Progress
3. Bounded Waiting

Peterson solution simply assigns a turn and a flag to each process. Initially flag is 0 in all processes and turn is either 0 or 1. Flag array's on index means that this process is waiting for its turn now. And would work only if the initial process has completed it's execution. We have the while loop for this in the code. Please have a look at the code now and if you still find any difficulty, please post in comments.



**Semaphores**

Semaphore is nothing but an integer variable, and this can be changed by using only these two operations:

1. Wait: It is like a decrement operation. 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;wait(S){&lt;br&gt;
   while(S&amp;lt;=0);&lt;br&gt;
   S--;&lt;br&gt;
} &lt;br&gt;
~&lt;del&gt;&lt;/del&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Signal:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Signal(S){
   S++
} 
~~~~~

Semaphores can be counting or binary(0 or 1). 

Binary Semaphores are generally called **mutex locks** as they provide mutual exclusion.  

Counting Semaphores are used to control access to given resource for multiple processes.

Use of semaphores in handling critical section of N processes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Shared data: semaphore mutex// Initially mutex=1&lt;br&gt;
Process p[i]:&lt;br&gt;
do{&lt;br&gt;
   wait(mutex);&lt;br&gt;
   ////////////////////////&lt;br&gt;
   ////critical section////&lt;br&gt;
   ////////////////////////&lt;br&gt;
   signal(mutex);&lt;br&gt;
   ////////////////////////&lt;br&gt;
   ////remainder section///&lt;br&gt;
   ////////////////////////&lt;br&gt;
}while(1);&lt;br&gt;
~&lt;del&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;How does this work?&lt;br&gt;
Whenever a process arrives we wait for the semaphore to turn to 1. Initially semaphore is 1 already so Process P1 has no wait and executes the critical section. But if second process comes now, wait function runs a while loop which kind of halt the process. Now when the first process finishes, second process continues and so on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Busy Waiting problem's solution&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;problem with semaphores&lt;br&gt;
Unbounded Wait time is the main problem here.&lt;/p&gt;

&lt;p&gt;How we achieve busy waiting problem&lt;br&gt;
What we do is simple to achieve bounded wait time. We are currently holding suppose n processes due to 1 process which is running. We simply can just block the processes which are in waiting. Like, we can contain them in a list. Okay, to be very honest, I truly don't understand how blocking the processes make them bounded. Would update this when I find this. Please write on comments if you know this.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#deadlocks"&gt;
  &lt;/a&gt;
  Deadlocks
&lt;/h4&gt;

&lt;p&gt;To be updated&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#threads"&gt;
  &lt;/a&gt;
  Threads
&lt;/h4&gt;

&lt;p&gt;To be updated&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#memory-management"&gt;
  &lt;/a&gt;
  Memory Management
&lt;/h4&gt;

&lt;p&gt;To be updated&lt;/p&gt;

</description>
      <category>operatingsystem</category>
    </item>
    <item>
      <title>Using Arch Linux</title>
      <author>Shubham Patil</author>
      <pubDate>Sun, 15 Aug 2021 18:34:23 +0000</pubDate>
      <link>https://dev.to/shubhampatilsd/using-arch-linux-3k12</link>
      <guid>https://dev.to/shubhampatilsd/using-arch-linux-3k12</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This is an article originally from Medium. I have decided to switch from Medium to dev.to and import all my posts from there.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kMxbTQ9h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2A29xBcvaVTSai6MfH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kMxbTQ9h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2A29xBcvaVTSai6MfH.png" alt="arch linux logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So I’ve been wishing to switch to Linux for about a year and a half now. There was just something intriguing about Linux that made me want to use it.&lt;/p&gt;

&lt;p&gt;I used to use a 2019 Macbook Air (I still do but not very often), but the speed of the thing kills me. Sometimes I have a couple VS Code and browser windows open and it just starts lagging a lot. Not to mention the keyboard, which (due to my fault) ended up requiring a certified Apple Repair Store to fix an arrow key. The reason is not &lt;em&gt;entirely&lt;/em&gt; me being dumb because I noticed that the key was sticky. This article is not going to be about the performance of the Mac but it was one of the reasons I wanted to switch to Linux.&lt;/p&gt;

&lt;p&gt;My first experience with Linux was installing Ubuntu on a Lenovo Ideapad 310 about a year ago. That laptop got very slow due to it’s drive being a hard drive, not an SSD.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ymAZdwkS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/600/0%2A7byOduTCH4j8rd5F" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ymAZdwkS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/600/0%2A7byOduTCH4j8rd5F" alt="Lenovo Ideapad 310"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OY24fYTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2ABlx6ItiidZ8jyQoo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OY24fYTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2ABlx6ItiidZ8jyQoo.png" alt="Ubuntu logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When I first installed it, I encountered an error that basically left me unable to install the operating system. I decided to re-download and re-flash the &lt;code&gt;.iso&lt;/code&gt; onto the USB drive and try installing it again. This time, it actually worked!&lt;/p&gt;

&lt;p&gt;Ubuntu was very fascinating for me and it sparked an intrigue in me for Linux. I then tried multiple distros (all of them being Debian based), and finally just settled on Ubuntu.&lt;/p&gt;

&lt;p&gt;However, I didn’t really use this laptop much and didn’t use Linux commonly. I kept using my Macbook for a year or so until the golden opportunity to use Linux arose: building a PC.&lt;/p&gt;

&lt;p&gt;If you are interested, here is the part list (&lt;a href="https://pcpartpicker.com/list/rqZgW3"&gt;here is the link&lt;/a&gt; if you want to modify it):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_3qpoASR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ATqCSY7VPd4mRTLCcEnueeg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_3qpoASR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ATqCSY7VPd4mRTLCcEnueeg.png" alt="pcpartpicker part list for pc"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All in all, the entire PC came for about $808 including tax!&lt;/p&gt;

&lt;p&gt;So when the PC came, I assembled it (which took more than seven hours because this was the first time I did it) and went to sleep at 12 AM with the PC 98% complete (I had to change the PCIE slot of the WIFI card).&lt;/p&gt;

&lt;p&gt;In the next day or two, I opened up my Macbook and started searching on how to install Arch Linux. I was really hesitant about which distro of Linux to install.&lt;/p&gt;

&lt;p&gt;If you didn’t know already, a distro is kind of like a flavor of Linux. Think of it like ice cream. There are different flavors like chocolate, strawberry and vanilla, each having their own pros and cons.&lt;/p&gt;

&lt;p&gt;I had a choice of Debian based distros or Arch based distros. The former being stuff like &lt;a href="https://ubuntu.com/"&gt;Ubuntu&lt;/a&gt;, &lt;a href="https://www.debian.org/"&gt;Debian&lt;/a&gt;, &lt;a href="https://pop.system76.com/"&gt;PopOS&lt;/a&gt;, &lt;a href="https://linuxmint.com/"&gt;Linux Mint&lt;/a&gt; etc. etc. For the latter, I had options like &lt;a href="https://archlinux.org/"&gt;Arch&lt;/a&gt;, &lt;a href="https://manjaro.org/"&gt;Manjaro&lt;/a&gt;, &lt;a href="https://arcolinux.com/"&gt;Arco&lt;/a&gt; and &lt;a href="https://garudalinux.org/"&gt;Garuda&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The main reason I went with plain Arch is because the experience of setting everything up myself was really intriguing. I also thought about package availability. When it comes to installing applications, Linux is different than macOS or Windows. Power users of either two operating systems equally hate their “App stores” and normally install programs through the application developer’s website. On Linux however, these “app stores” are actually quite good and are basically the de-facto way for users to install programs. Linux distros have something called a package manager which is an interface into these “app stores.”&lt;/p&gt;

&lt;p&gt;On top of having packages, Arch Linux has something called the AUR, which is a set of programs that were adapted to run on Arch Linux by the Arch Linux community. This was cool because instead of going to the application developer’s website for programs not in the official Arch package list (which in most cases you would have to install the application manually), I could just install it like a normal package!&lt;/p&gt;

&lt;p&gt;In the Linux community there is a bit of negative stigma surrounding the Arch Linux installation process in the form of the installation difficulty. I admit that if you are not comfortable using the command line/the Bash shell, you should definitely not install Arch Linux and instead go with a GUI option other than Arch like Ubuntu or Manjaro and learn the terminal from there. The Arch Installation process relies heavily on terminal usage and if you don’t know how to use it, you could seriously mess up your computer’s existing installation or have to restart the entire installation from Step One.&lt;/p&gt;

&lt;p&gt;Now that I chose Arch to be my distro, I actually had to install it. For this, I used the &lt;a href="https://wiki.archlinux.org/title/Installation_guide"&gt;official Arch wiki page’s installation guide&lt;/a&gt; and this &lt;a href="https://itsfoss.com/install-arch-linux/"&gt;guide from It’s FOSS&lt;/a&gt;. I also got guidance from a couple Discord servers I was a part of to see if I was really doing things the right way.&lt;/p&gt;

&lt;p&gt;I didn’t make a &lt;code&gt;swap&lt;/code&gt; partition as my computer had enough resources for that and I didn’t make a &lt;code&gt;home&lt;/code&gt; partition as well because creating a user later would account for that.&lt;/p&gt;

&lt;p&gt;Note: for the step that used &lt;code&gt;pacstrap&lt;/code&gt;, I installed &lt;code&gt;network-manager&lt;/code&gt; as well because that would help me do WIFI related stuff post-installation.&lt;/p&gt;

&lt;p&gt;After installing Arch Linux, I simply rebooted the computer, took out the USB drive I had the .iso on, and arrived at a &lt;code&gt;tty&lt;/code&gt; screen with a user and password prompt. For this, I entered the username &lt;code&gt;root&lt;/code&gt; and the password, which I setup when installing Arch Linux.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1JnqhctZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2ABztBnNaCH-zYHFDE" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1JnqhctZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2ABztBnNaCH-zYHFDE" alt="arch linux login screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From here, I made my own user with the &lt;a href="https://linuxize.com/post/how-to-create-users-in-linux-using-the-useradd-command/#how-to-add-a-new-user-and-create-home-directory"&gt;useradd&lt;/a&gt; command, which created it’s own &lt;code&gt;/home/USERNAME&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZvJ_hK7j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AnEvY1TeFfWhUHjwG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZvJ_hK7j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AnEvY1TeFfWhUHjwG.png" alt="dwm demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now I had to get a “GUI” up and running. I had used KDE and GNOME on my old laptop before but I wanted to try something called a tiling window manager. If you didn’t know, tiling window managers basically automatically resize windows based on available space, so instead of having a bunch of windows overlapping each other like macOS or Windows, all of them are on the screen and visible to the user. For this, I was going to use &lt;a href="https://dwm.suckless.org/"&gt;a tiling window manager called &lt;code&gt;dwm&lt;/code&gt;&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--chB7-PWN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AXuk6sC4OP6zD9sWkl0_bxA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--chB7-PWN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AXuk6sC4OP6zD9sWkl0_bxA.png" alt="dwm logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;dwm&lt;/code&gt; is a bit different than &lt;a href="https://i3wm.org/"&gt;another tiling window manager called i3&lt;/a&gt; because you edit the source code (which is a header file utilized by the C language) directly to tweak and customize it.&lt;/p&gt;

&lt;p&gt;Along with &lt;code&gt;dwm&lt;/code&gt;, I installed &lt;code&gt;dmenu&lt;/code&gt; which basically is like Spotlight except that it only opens applications that are in the &lt;code&gt;PATH&lt;/code&gt; environment variable. The applications themselves are just scripts running, so when I launch an application through &lt;code&gt;dmenu&lt;/code&gt;, it’s really just executing a script to launch that program. I didn’t really customize &lt;code&gt;dmenu&lt;/code&gt; except loading in a custom font.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7rzLt4qf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AuSEjF8-DTK_qrKPU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7rzLt4qf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AuSEjF8-DTK_qrKPU.png" alt="suckless terminal demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For my terminal, I decided to use the Suckless Terminal, also known as &lt;code&gt;st&lt;/code&gt;. I mainly chose this because I heard it was nice and I wasn’t ready to try out stuff like &lt;code&gt;alacritty&lt;/code&gt; or &lt;code&gt;terminator&lt;/code&gt; just yet (those are other terminal emulators by the way).&lt;/p&gt;

&lt;p&gt;Oh yeah I forgot to mention something similar about two of the Suckless projects mentioned (&lt;code&gt;dwm&lt;/code&gt; and &lt;code&gt;st&lt;/code&gt;): they can’t be installed with a package manager. In essence, because of the concept of editing the source code directly, we have to manually install these tools. You can do that by running &lt;code&gt;sudo make clean install&lt;/code&gt; after tweaking the source code (a file called &lt;code&gt;config.h&lt;/code&gt; mostly). Notice how we couldn’t use a package manager (by default the package manager on Arch is &lt;code&gt;pacman&lt;/code&gt;) to install this.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: For&lt;/em&gt; &lt;code&gt;dmenu&lt;/code&gt;&lt;em&gt;, you can install it with a package manager&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To modify &lt;code&gt;st&lt;/code&gt; terminal, you need to install things called patches, which essentially are &lt;code&gt;.diff&lt;/code&gt; files that you need to patch to the source code to add new features. For example, a patch you chose could add scrolling to the &lt;code&gt;st&lt;/code&gt; terminal, and you would have to run a command to merge those changes to the actual source code. &lt;a href="https://www.youtube.com/watch?v=fBrc_xgwQE8"&gt;This video&lt;/a&gt; is an excellent tutorial on patching the terminal.&lt;/p&gt;

&lt;p&gt;For the prompt on my terminal, I decided to use something called Starship Prompt. It is an excellent cross-platform prompt which is really colorful and gives you a lot of data about the current directory you are in, which I find very helpful, especially for &lt;code&gt;git&lt;/code&gt;. It is really fast (it’s written in Rust, which is a speedy programming language). You can find more about the prompt on &lt;a href="https://starship.rs/"&gt;their website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OOUnUhLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AedLlBPb5kgVGTKiMOQOdZg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OOUnUhLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AedLlBPb5kgVGTKiMOQOdZg.png" alt="starship prompt demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To get those special symbols in the prompt, I used the FiraCode Nerd Font, which gives the ability to use these special symbols. You can download it &lt;a href="https://www.nerdfonts.com/font-downloads"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So remember those community package repositories I mentioned earlier? That is called the Arch User Repository, more commonly known as the AUR. To install a package from the AUR manually would consist of cloning repos from the AUR and running &lt;code&gt;makepkg&lt;/code&gt; or whatever, which is highly inconvenient compared to a package manager.&lt;/p&gt;

&lt;p&gt;This is why I installed an AUR helper called &lt;code&gt;paru&lt;/code&gt;. If you don’t know what an AUR helper is, it basically eases the process of installing packages from the Arch User Repository. First, to get all the tools needed to actually install the tool, I ran &lt;code&gt;sudo pacman -S --needed base-devel&lt;/code&gt; in my terminal so we can use the required command line utilities to install it. To actually install it though, I basically did a &lt;code&gt;git clone [https://aur.archlinux.org/paru.git](https://aur.archlinux.org/paru.git)&lt;/code&gt;. This makes a directory on our machine that contains the &lt;code&gt;git&lt;/code&gt; repository for &lt;code&gt;paru&lt;/code&gt;. I went into the directory of &lt;code&gt;paru&lt;/code&gt; by running &lt;code&gt;cd paru&lt;/code&gt;. Then I ran &lt;code&gt;makepkg -si&lt;/code&gt;, to install &lt;code&gt;paru&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In summary, I ran these commands to install &lt;code&gt;paru&lt;/code&gt; (&lt;a href="https://itsfoss.com/paru-aur-helper/"&gt;this guide&lt;/a&gt; helped me):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo pacman -S --needed base-devel
git clone https://aur.archlinux.org/paru.git
cd parumakepkg -si
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, I could install AUR packages similar to installing them with &lt;code&gt;pacman&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;If you want to find how to use &lt;code&gt;paru&lt;/code&gt; you can check the guide I linked above as it gives you the basic commands you need to use it.&lt;/p&gt;

&lt;p&gt;One of the main packages I installed was VSCode. The package in the AUR was named &lt;code&gt;visual-studio-code-bin&lt;/code&gt; and I installed it by running &lt;code&gt;paru -S visual-studio-code-bin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Installing AUR packages takes a bit more time than installing packages with &lt;code&gt;pacman&lt;/code&gt; so don’t fret if it’s running scripts for a minute or so.&lt;/p&gt;

&lt;p&gt;To set my desktop wallpaper with a tool called &lt;code&gt;nitrogen&lt;/code&gt;. This package is in the base Arch repos so you don’t have to worry about using &lt;code&gt;paru&lt;/code&gt;. I ran &lt;code&gt;sudo pacman -S nitrogen&lt;/code&gt; in my terminal to install the package.&lt;/p&gt;

&lt;p&gt;To set the wallpaper, I ran the command: &lt;code&gt;nitrogen&lt;/code&gt;. However, there is one more step to get your wallpapers running. &lt;code&gt;nitrogen&lt;/code&gt; only checks for images in the certain directories that you tell it to. By default it’s set to the &lt;code&gt;Desktop&lt;/code&gt; directory. You can edit these directories manually.&lt;/p&gt;

&lt;p&gt;To do this, press the “Preferences” button in the bottom right.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1j-Vw9LG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ABkNG1ZLVBzkhND7V5rStnA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1j-Vw9LG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ABkNG1ZLVBzkhND7V5rStnA.png" alt="nitrogen preferences button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, set the directories with the “Add” and “Delete” button in the directories section in the GUI that pops up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vyWsQYvk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AhPkzeMOhoaKfgu2r4kY2sw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vyWsQYvk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AhPkzeMOhoaKfgu2r4kY2sw.png" alt="directory list/add screen in nitrogen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you press the “Add” button, a file manager will popup so you can navigate to the directory containing your wallpapers!&lt;/p&gt;

&lt;p&gt;That’s all well and all, but the wallpaper won’t stay after you restart the computer or simply end your &lt;code&gt;dwm&lt;/code&gt; session by pressing &lt;code&gt;Alt + Shift + Q&lt;/code&gt;. For this, I needed to run &lt;code&gt;nitrogen --restore&lt;/code&gt;. It’s not great to run that every time you start your &lt;code&gt;dwm&lt;/code&gt; session, so I had to figure out a way to do it on auto start.&lt;/p&gt;

&lt;p&gt;To run commands on auto start, I installed a patch for &lt;code&gt;dwm&lt;/code&gt; (like the &lt;code&gt;st&lt;/code&gt; terminal) which ran a script called &lt;code&gt;autostart.sh&lt;/code&gt; in the &lt;code&gt;~/.dwm/&lt;/code&gt; directory which ran every time I started &lt;code&gt;dwm&lt;/code&gt;. This enabled me to put &lt;code&gt;nitrogen --restore &amp;amp;&lt;/code&gt; in that &lt;code&gt;autostart.sh&lt;/code&gt; file (If you were wondering what the ampersand [the &lt;code&gt;&amp;amp;&lt;/code&gt;] is doing there, it basically tells your shell to do the task in the background).&lt;/p&gt;

&lt;p&gt;If you have been using &lt;code&gt;dwm&lt;/code&gt; for sometime, you might be wondering why I don’t use the &lt;code&gt;.xinitrc&lt;/code&gt; file. For those of you who have no clue what I’m talking about, let me explain. Since I’m using Arch Linux and I started from scratch, when I boot up my computer, it just plops me in the command line. This is extremely fast and when I want to start up &lt;code&gt;dwm&lt;/code&gt;, I just run &lt;code&gt;startx&lt;/code&gt; in the command line.&lt;/p&gt;

&lt;p&gt;This &lt;code&gt;startx&lt;/code&gt; command already has a file to execute commands when &lt;code&gt;dwm&lt;/code&gt; starts called &lt;code&gt;.xinitrc&lt;/code&gt;. I didn’t opt to use that just so that if I ever stop using &lt;code&gt;startx&lt;/code&gt; and start using a login screen (more formally known as a display manager), I can still do all the things on autostart without having to patch &lt;code&gt;dwm&lt;/code&gt; with the &lt;code&gt;autostart.sh&lt;/code&gt; thing.&lt;/p&gt;

&lt;p&gt;This whole &lt;code&gt;autostart.sh&lt;/code&gt; thing allowed me to setup update my status bar in &lt;code&gt;dwm&lt;/code&gt; really efficiently. In that &lt;code&gt;dwm&lt;/code&gt; folder, I had another file called &lt;code&gt;changebar.sh&lt;/code&gt; which basically was the script to change the status bar in &lt;code&gt;dwm&lt;/code&gt;. If you didn’t know what the status bar in &lt;code&gt;dwm&lt;/code&gt; is, it is in the top right.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6j4quDFz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ADdCd9jVC-gFgSl3T9rAz1A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6j4quDFz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ADdCd9jVC-gFgSl3T9rAz1A.png" alt="my customized status bar in dwm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By default, this is set to something like &lt;code&gt;dwm VERSION_NUMBER&lt;/code&gt; , but I customized it with the &lt;code&gt;changebar.sh&lt;/code&gt; file and a command that was &lt;code&gt;xsetroot -name "whatever you want in the status bar"&lt;/code&gt;. Also, if you were wondering how I customized the color of the top bar and everything else, check out &lt;a href="https://www.youtube.com/watch?v=lC-WzV7rJpQ"&gt;this video&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is where I use &lt;code&gt;changebar.sh&lt;/code&gt;. In my &lt;code&gt;autostart.sh&lt;/code&gt; file, I have this code written out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;while &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;  
        /home/shubhampatil/.dwm/changebar.sh  
        &lt;span class="nb"&gt;sleep &lt;/span&gt;5s  
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This basically enters a while loop that goes on forever, activating that &lt;code&gt;changebar.sh&lt;/code&gt; script and sleeps 5 seconds later.&lt;/p&gt;

&lt;p&gt;You might be wondering what is in that &lt;code&gt;changebar.sh&lt;/code&gt; file. Well, here it is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;VOLUME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;amixer sget Master | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s1"&gt;'Front Left:'&lt;/span&gt; | &lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="nb"&gt;sed&lt;/span&gt; &lt;span class="s1"&gt;'s/\[^\\\[\]\*\\\[\\(\[0-9\]\\{1,3\\}%\\).\*\\(on\\|off\\).\*/\\2 \\1/'&lt;/span&gt; | &lt;span class="nb"&gt;sed&lt;/span&gt; &lt;span class="s1"&gt;'s/off/M/'&lt;/span&gt; | &lt;span class="nb"&gt;sed&lt;/span&gt; &lt;span class="s1"&gt;'s/on //'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;  
&lt;span class="nv"&gt;TIME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;date&lt;/span&gt; &lt;span class="s1"&gt;'+%a %D |   %I:%M %p'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;  
xsetroot &lt;span class="nt"&gt;-name&lt;/span&gt; &lt;span class="s2"&gt;"| 🔊 &lt;/span&gt;&lt;span class="nv"&gt;$VOLUME&lt;/span&gt;&lt;span class="s2"&gt; |  &lt;/span&gt;&lt;span class="nv"&gt;$TIME&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
bash&lt;/p&gt;

&lt;p&gt;This basically gets the current volume and gets the current time and displays it in the status bar.&lt;/p&gt;

&lt;p&gt;Now, let me talk about volume control with &lt;code&gt;dwm&lt;/code&gt;. For this, I had to edit the source code for &lt;code&gt;dwm&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;config.h&lt;/code&gt; file in the source code, I added this at the top of the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;X11/XF86keysym.h&amp;gt;
&lt;/span&gt;
&lt;span class="cm"&gt;/* volume keys*/&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;upvol&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;"sh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"-c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"amixer sset Master unmute; amixer set Master 5%+; /home/shubhampatil/.dwm/changebar.sh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="nb"&gt;NULL&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;downvol&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;"sh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"-c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"amixer sset Master unmute; amixer set Master 5%-; /home/shubhampatil/.dwm/changebar.sh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="nb"&gt;NULL&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;  

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;mutevol&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;"sh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"-c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"amixer set Master toggle; /home/shubhampatil/.dwm/changebar.sh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="nb"&gt;NULL&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, I added the lines&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;XF86XK_AudioLowerVolume&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;downvol&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;XF86XK_AudioMute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mutevol&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;XF86XK_AudioRaiseVolume&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;upvol&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To the &lt;code&gt;keys[]&lt;/code&gt; array in the &lt;code&gt;config.h&lt;/code&gt; file. After that, I just ran &lt;code&gt;sudo make clean install&lt;/code&gt; again in the &lt;code&gt;dwm&lt;/code&gt; source code directory, restarted &lt;code&gt;dwm&lt;/code&gt;, and it worked! Now, whenever I pressed the volume up/down/mute keys on my keyboard, it would change the volume output of the sound.&lt;/p&gt;

&lt;p&gt;One more thing about my computer: time. I found out that the clock on my computer got a minute out of sync with the rest of my devices.&lt;/p&gt;

&lt;p&gt;To combat this, I installed a package called &lt;code&gt;ntp&lt;/code&gt;(Network Time Protocol), which allowed me to sync my clock to servers on the internet that had the correct time.&lt;/p&gt;

&lt;p&gt;This package I installed generated a &lt;code&gt;.conf&lt;/code&gt; file, which allowed me to change the default servers to &lt;code&gt;pool.ntp.org&lt;/code&gt;‘s servers.&lt;/p&gt;

&lt;p&gt;My config file looks like this (located at &lt;code&gt;/etc/ntpd.config&lt;/code&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight conf"&gt;&lt;code&gt;&lt;span class="c"&gt;# Please consider joining the pool:  
#  
# http://www.pool.ntp.org/join.html 
#  
# For additional information see:  
# - https://wiki.archlinux.org/index.php/Network_Time_Protocol_daemon  
# - [http://support.ntp.org/bin/view/Support/GettingStarted](http://support.ntp.org/bin/view/Support/GettingStarted)  
# - the ntp.conf man page
&lt;/span&gt;
&lt;span class="c"&gt;#  NTP pool server setup  
&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.&lt;span class="n"&gt;pool&lt;/span&gt;.&lt;span class="n"&gt;ntp&lt;/span&gt;.&lt;span class="n"&gt;org&lt;/span&gt;  
&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;.&lt;span class="n"&gt;pool&lt;/span&gt;.&lt;span class="n"&gt;ntp&lt;/span&gt;.&lt;span class="n"&gt;org&lt;/span&gt;  
&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;.&lt;span class="n"&gt;pool&lt;/span&gt;.&lt;span class="n"&gt;ntp&lt;/span&gt;.&lt;span class="n"&gt;org&lt;/span&gt;  
&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;.&lt;span class="n"&gt;pool&lt;/span&gt;.&lt;span class="n"&gt;ntp&lt;/span&gt;.&lt;span class="n"&gt;org&lt;/span&gt;

&lt;span class="c"&gt;# By default, the server allows:  
# - all queries from the local host  
# - only time queries from remote hosts, protected by rate limiting and kod  
&lt;/span&gt;&lt;span class="n"&gt;restrict&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt; &lt;span class="n"&gt;kod&lt;/span&gt; &lt;span class="n"&gt;limited&lt;/span&gt; &lt;span class="n"&gt;nomodify&lt;/span&gt; &lt;span class="n"&gt;nopeer&lt;/span&gt; &lt;span class="n"&gt;noquery&lt;/span&gt; &lt;span class="n"&gt;notrap&lt;/span&gt;  
&lt;span class="n"&gt;restrict&lt;/span&gt; &lt;span class="m"&gt;127&lt;/span&gt;.&lt;span class="m"&gt;0&lt;/span&gt;.&lt;span class="m"&gt;0&lt;/span&gt;.&lt;span class="m"&gt;1&lt;/span&gt;  
&lt;span class="n"&gt;restrict&lt;/span&gt; ::&lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="c"&gt;# Location of drift file  
&lt;/span&gt;&lt;span class="n"&gt;driftfile&lt;/span&gt; /&lt;span class="n"&gt;var&lt;/span&gt;/&lt;span class="n"&gt;lib&lt;/span&gt;/&lt;span class="n"&gt;ntp&lt;/span&gt;/&lt;span class="n"&gt;ntp&lt;/span&gt;.&lt;span class="n"&gt;drift&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find more info about this &lt;code&gt;pool.ntp.org&lt;/code&gt; stuff at &lt;a href="https://www.ntppool.org/en/use.html"&gt;https://www.ntppool.org/en/use.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I then had to setup my printer. Printer support with Linux is sort of complicated. I had to install the &lt;code&gt;cups&lt;/code&gt; package. Then, I ran &lt;code&gt;sudo systemctl enable cups&lt;/code&gt; and &lt;code&gt;sudo systemctl start cups&lt;/code&gt;. The former made it so that the &lt;code&gt;cups&lt;/code&gt; service would be enabled on startup. The latter basically started it right now.&lt;/p&gt;

&lt;p&gt;Then, I went to &lt;code&gt;localhost:631&lt;/code&gt; in my browser to configure my printer. I went to add my pritner but discovered that the driver for my printer wasn’t present. To get these drivers, I had to install the &lt;code&gt;hplip&lt;/code&gt; package, since I was using an HP printer. After that, the printing functionality worked properly. To find more about printer setup on Linux, I would recommend you to &lt;a href="https://www.youtube.com/watch?v=En2DJAMpwmY"&gt;watch this video&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using raw Arch Linux or Gentoo (another Linux distribution) is very different from something like Ubuntu or Manjaro. Not everything is pre-setup like you expect. Even if you install a GUI (called desktop environments) like Gnome or KDE Plasma, you will have to install some packages to get the printer setup correctly, for example. Overall, I’m glad that I tried Arch Linux, and if you’re comfortable with the Linux command line, I would suggest it too. Although, if you’re not comfortable using the command line just yet, I would suggest something like Ubuntu or PopOS!. If you’re an “intermediate” Linux user, and really want to try out Arch, I would suggest using Garuda Linux or Manjaro Linux. I am by no means an expert at Linux and I do have a lot to learn but I decided to jump in the deep end to challenge myself. In the end, Linux is still Linux so don’t feel bad about using something like Ubuntu versus raw Arch.&lt;/p&gt;

&lt;p&gt;Another difference I am yet to call out is the nature of Arch Linux’s updates. Arch is something that has a rolling release cycle. This means all the packages that make up your install are updated on an on-going basis, instead of the operating system itself with all the packages being updated every 6 months (like Ubuntu). The latter method is called a stable release cycle. To find out if you are better suited for rolling release distro or a stable release distro, check out &lt;a href="https://www.youtube.com/watch?v=212yJEH8-iA"&gt;this video&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By &lt;a href="https://medium.com/@shubhampatilsd"&gt;Shubham Patil&lt;/a&gt; on &lt;a href="https://medium.com/p/f4b0d8237947"&gt;August 15, 2021&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@shubhampatilsd/using-arch-linux-f4b0d8237947"&gt;Canonical link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Exported from &lt;a href="https://medium.com"&gt;Medium&lt;/a&gt; on August 15, 2021.&lt;/p&gt;

</description>
      <category>linux</category>
      <category>archlinux</category>
      <category>linuxsetup</category>
      <category>ricing</category>
    </item>
    <item>
      <title>Tips for CKAD Exam</title>
      <author>Aditya Kanekar</author>
      <pubDate>Sun, 15 Aug 2021 18:22:27 +0000</pubDate>
      <link>https://dev.to/adityakanekar/tips-for-ckad-exam-58gn</link>
      <guid>https://dev.to/adityakanekar/tips-for-ckad-exam-58gn</guid>
      <description>&lt;p&gt;In the last post I talked about &lt;a href="https://dev.to/adityakanekar/how-to-prepare-for-ckad-exam-3a85"&gt;How to prepare for CKAD exam&lt;/a&gt;. In this post we will talk about tips and tricks for passing the CKAD exam.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-your-kubernetes-environment"&gt;
  &lt;/a&gt;
  Setup your Kubernetes environment
&lt;/h2&gt;

&lt;p&gt;Before starting the exam, spend few mins to setup the environment which will help you save time later. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setup-autocompletion"&gt;
  &lt;/a&gt;
  Setup autocompletion
&lt;/h3&gt;

&lt;p&gt;Ref - &lt;a href="https://kubernetes.io/docs/reference/kubectl/cheatsheet/"&gt;https://kubernetes.io/docs/reference/kubectl/cheatsheet/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Run following statements on the shell to setup autocompletion for kubectl commands,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;source &amp;lt;(kubectl completion bash) 

# Only if you want to add this to your bashrc profile
echo "source &amp;lt;(kubectl completion bash)" &amp;gt;&amp;gt; ~/.bashrc

alias k=kubectl
complete -F __start_kubectl k
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can execute commands on shell using alias &lt;strong&gt;k&lt;/strong&gt; instead of &lt;strong&gt;kubectl&lt;/strong&gt; e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;k get pods
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also you can now press tab after writing first 2-3 letters of your sub commands to complete the command. This will save you sometime in the exam, remember the time is limited and saving time typing each command will add up to a significant saving in time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setup-alias-for-frequently-used-commands"&gt;
  &lt;/a&gt;
  Setup alias for frequently used commands
&lt;/h3&gt;

&lt;p&gt;Setup alias or environment variables for frequently used commands, I personally used following alias's and environment variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;alias kg='k get po -o wide --show-labels'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Environment variables&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dr='--dry-run=client -o yaml'
fd='--force --grace-period=0'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first command can be used with &lt;strong&gt;k run&lt;/strong&gt; command to generate yaml definition like,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;k run nginx --image=nginx $dr &amp;gt; nginx.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The second command can be used with &lt;strong&gt;k delete po&lt;/strong&gt; to delete pod's quickly. As part of the exams, there will be lot of questions which will require to create/delete pods. To delete pod quickly you can use the second environment variable like,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;k delete po nginx $fd 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-imperative-commands"&gt;
  &lt;/a&gt;
  Use imperative commands
&lt;/h2&gt;

&lt;p&gt;It's difficult to create the YAML definition files required for deploying resources like PODs, Deployments, ReplicaSets etc. by creating YAML definition files manually. Copying the files manually from the Kubernetes documentation is one way, but its time consuming and exam time is limited. &lt;/p&gt;

&lt;p&gt;There is a better way for creating these complex YAML definition files using kubectl imperative commands. I am listing down few commands for creating resources like POD, Deployments, Service etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-pod"&gt;
  &lt;/a&gt;
  Create POD
&lt;/h3&gt;

&lt;p&gt;Ref - &lt;a href="https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#run"&gt;https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#run&lt;/a&gt;&lt;br&gt;
Use the below command to generate the Pod definition file,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;k run &amp;lt;pod-name&amp;gt; --image=&amp;lt;image-name&amp;gt; --dry-run=client -o yaml &amp;gt; &amp;lt;file-name&amp;gt;.yaml

#or if you setup the environment variable simply run

k run &amp;lt;pod-name&amp;gt; --image=&amp;lt;image-name&amp;gt; $dr &amp;gt; &amp;lt;file-name&amp;gt;.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Following command demonstrates how you can use different option to quickly create a Pod or YAML definition file without creating the YAML file at all,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;k run nginx --image=nginx --labels tier=webserver --env="key=value" --port=8080 --requests="cpu=200m,memory=256Mi" --limits="cpu=250m,memory=512Mi" --command -- echo "test" 

# If you want to save the definition to a file then use
k run nginx --image=nginx --dry-run=client -o yaml --labels tier=webserver --env="key=value" --port=8080 --requests="cpu=200m,memory=256Mi" --limits="cpu=250m,memory=512Mi" --command -- echo "test" &amp;gt; nginx.yaml

k apply -f nginx.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure to use '--dry-run=client -o yaml' before command, also you can use the environment variable $dr with this command. Also if you want to expose the pod as a service you can suffix &lt;strong&gt;--expose&lt;/strong&gt; to expose the Pod as a service.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-deployment"&gt;
  &lt;/a&gt;
  Create Deployment
&lt;/h3&gt;

&lt;p&gt;To create deployment definition or deployment run command below,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;k create deploy &amp;lt;deployment-name&amp;gt; --image=&amp;lt;image&amp;gt; --replicas=4  $dr &amp;gt; &amp;lt;filename&amp;gt;.yaml

# Nginx deployment sample
k create deploy nginx --image=nginx --replicas=4 $dr &amp;gt; nginx.yaml

k apply -f nginx.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#exposing-service"&gt;
  &lt;/a&gt;
  Exposing Service
&lt;/h3&gt;

&lt;p&gt;To expose the deployment as a service run below command,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;k expose deployment nginx --image=nginx --replicas=4 --port=8080 --target-port=8080 --name=nginx-service --type=ClusterIP $dr &amp;gt; service.yaml

# for pod
k expose pod nginx --image=nginx --replicas=4 --port=8080 --target-port=8080 --name=nginx-service --type=ClusterIP $dr &amp;gt; service.yaml

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To create a NodePort service however you will have to run the above command and add nodePort in the YAML file. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#small-but-significant-things"&gt;
  &lt;/a&gt;
  Small but significant things
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#testing-your-deployments"&gt;
  &lt;/a&gt;
  Testing your deployments
&lt;/h3&gt;

&lt;p&gt;Always make sure to test the deployments, to be sure to not miss on any requirements. To test the deployments you can run temporary pods by running below command,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;k run temp --image=nginx:alpine --restart=Never --rm -i -- curl -m 5 nginx-service:8080

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the service is in a different namespace you can specify namespace like,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;k run temp --image=nginx:alpine --restart=Never --rm -i -- curl -m 5 nginx-service:8080 -n 
&amp;lt;namespace&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or specify the name as . like,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;k run temp --image=nginx:alpine --restart=Never --rm -i -- curl -m 5 nginx-service.&amp;lt;namespace&amp;gt;:8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#get-cpumemory-usage-for-nodepod"&gt;
  &lt;/a&gt;
  Get CPU/Memory usage for node/pod
&lt;/h3&gt;

&lt;p&gt;To get the CPU/Memory usage by node/pod run,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;k top node

#for pods run
k top pod
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-init-containers"&gt;
  &lt;/a&gt;
  Using Init Containers
&lt;/h3&gt;

&lt;p&gt;Init containers run un before the app containers are started. You can learn more about Init Containers &lt;a href="https://kubernetes.io/docs/concepts/workloads/pods/init-containers/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multicontainer-pod-or-sidecar"&gt;
  &lt;/a&gt;
  Multi-Container Pod or Sidecar
&lt;/h3&gt;

&lt;p&gt;Multi-container POD is simply a mode with more than one containers. Following YAML shows example of a multi-container POD also called as Sidecar,&lt;br&gt;
Ref - &lt;a href="https://kubernetes.io/docs/tasks/access-application-cluster/communicate-containers-same-pod-shared-volume/"&gt;https://kubernetes.io/docs/tasks/access-application-cluster/communicate-containers-same-pod-shared-volume/&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: v1
kind: Pod
metadata:
  name: two-containers
spec:

  restartPolicy: Never

  volumes:
  - name: shared-data
    emptyDir: {}

  containers:

  - name: nginx-container
    image: nginx
    volumeMounts:
    - name: shared-data
      mountPath: /usr/share/nginx/html

  - name: debian-container
    image: debian
    volumeMounts:
    - name: shared-data
      mountPath: /pod-data
    command: ["/bin/sh"]
    args: ["-c", "echo Hello from the debian container &amp;gt; /pod-data/index.html"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#reading-logs-from-pod"&gt;
  &lt;/a&gt;
  Reading logs from Pod
&lt;/h2&gt;

&lt;p&gt;To read logs from POD run,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;k logs &amp;lt;pod_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To see running logs run,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;k logs -f &amp;lt;pod_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To read logs from multi-container Pod,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;k logs -f &amp;lt;pod_name&amp;gt; -c &amp;lt;container_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#making-changes-to-the-existing-deployments"&gt;
  &lt;/a&gt;
  Making changes to the existing deployments
&lt;/h2&gt;

&lt;p&gt;You can make changes to the existing deployments by simply editing them like,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;k edit pod &amp;lt;pod_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will open the Pod definition (YAML) in Vim editor. Some changes can be done without recreating the pod but changes like changing the image name for example, requires you to delete and recreate the Pod. The trick to make such changes are to edit the Pod and try to save the changes, this will prompt you to create a new temporary file, just hit ':wq' to save the changes to the file. You can then delete the old pod and use this temporary file to apply the changes. The trick here is to save as much time as possible to cover all the questions.&lt;/p&gt;

&lt;p&gt;So thats it for this post, I will keep updating this post with more information. Till then, happy practicing!&lt;/p&gt;

</description>
      <category>ckad</category>
      <category>kubernetes</category>
    </item>
    <item>
      <title>Unit &amp; Integration Testing In .Net With Moq and xUnit</title>
      <author>Rick Hopkins</author>
      <pubDate>Sun, 15 Aug 2021 18:10:54 +0000</pubDate>
      <link>https://dev.to/nha/unit-integration-testing-in-net-with-moq-and-xunit-4k8</link>
      <guid>https://dev.to/nha/unit-integration-testing-in-net-with-moq-and-xunit-4k8</guid>
      <description>&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt;: This post was originally posted on &lt;a href="https://dev.to/melodicdevelopment/unit-integration-testing-in-net-with-moq-and-xunit-238a"&gt;Melodic Development&lt;/a&gt;. The Melodic Development dev.to site is operated by Rick Hopkins. Rick is a Principal Software Engineer at NHA.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-in-net-with-xunit-amp-moq"&gt;
  &lt;/a&gt;
  Testing In .Net with xUnit &amp;amp; Moq
&lt;/h2&gt;

&lt;p&gt;Today I want to cover some simple testing setup and configuration. I'll be using my example project from the &lt;a href="https://dev.to/melodicdevelopment/dapper-cqrs-2ff2"&gt;Dapper &amp;amp; CQRS&lt;/a&gt; post I made last week so consider this post a part 2. For tooling I'll be using &lt;a href="https://github.com/xunit/xunit"&gt;xUnit&lt;/a&gt; and &lt;a href="https://github.com/moq/moq"&gt;Moq&lt;/a&gt; as well as a few other nuget packages to easily configure and run tests in Visual Studio. I am working on a Mac, but operating system shouldn't matter.&lt;/p&gt;

&lt;p&gt;We all know we should be testing our code. The company I work for has been woefully bad at it for years, but we have been working lately at developing a testing strategy and we're making great strides in this area. Moq and xUnit make testing pretty easy and allow us to catch some bugs early. Dare I even say, testing could possibly even become enjoyable...?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/MGdfeiKtEiEPS/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/MGdfeiKtEiEPS/giphy.gif" alt="Testing is fun!"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ok so maybe fun is a stretch, but it's still important. So let's get started shall we!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h2&gt;

&lt;p&gt;You can get all the source code for this example at &lt;a href="https://github.com/MelodicDevelopment/example-dotnet-api-cqrs"&gt;https://github.com/MelodicDevelopment/example-dotnet-api-cqrs&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tests"&gt;
  &lt;/a&gt;
  Tests
&lt;/h2&gt;

&lt;p&gt;The dotnet-api-cqrs.tests project contains (simplistic) examples for doing integration as well as unit testing. This is pretty geared towards our particular Dapper / CQRS pattern, however it could be useful for other patterns as well.&lt;/p&gt;

&lt;p&gt;One thing to take note is that we configured our tests to run against an actual database. You can mock data if you'd like, but we chose to run our queries and commands against our CI database. This gives us the added bonus of testing to ensure database changes have not occurred that would break our code. The queries will run as expected against the database, however commands are all rolled back so that nothing is actually committed to the database. To achieve this, we've created a TestDbContext which is based on our DbContext from the dotnet-api-cqrs.data project. The TestDbContext extends and overwrites most the virtual methods on the DbContext class. This way we can differentiate between queries and commands and for commands we have an addition setting to rollback comamnds. This will attempt to execute the command, but not actually commit any changes to the database. This way we get to see if any errors happen in the command without actually affecting the database. We can catch whatever exceptions the database throws, such as duplicate key errors, or unique key exceptions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dotnetapicqrsteststestdbcontextcs"&gt;
  &lt;/a&gt;
  dotnet-api-cqrs.tests/TestDbContext.cs
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.Generic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;dotnet_api_cqrs.data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;dotnet_api_cqrs.tests&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestDbContext&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DbContext&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;_noCommit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;_isQuery&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;TestDbContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;connectionString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;noCommit&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connectionString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;_noCommit&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;noCommit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;param&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CommandType&lt;/span&gt; &lt;span class="n"&gt;commandType&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CommandType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IDbTransaction&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;_isQuery&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;commandType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;QueryFirst&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;param&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CommandType&lt;/span&gt; &lt;span class="n"&gt;commandType&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CommandType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IDbTransaction&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;_isQuery&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QueryFirst&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;commandType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;InsertSingle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;param&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CommandType&lt;/span&gt; &lt;span class="n"&gt;commandType&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CommandType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IDbTransaction&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;_isQuery&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;InsertSingle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;commandType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;param&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CommandType&lt;/span&gt; &lt;span class="n"&gt;commandType&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CommandType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IDbTransaction&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;_isQuery&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;commandType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;Transaction&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;Func&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IDbTransaction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;_noCommit&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="n"&gt;_isQuery&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;_isQuery&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;_isQuery&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;var&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;var&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;BeginTransaction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

                &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Rollback&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Action&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IDbTransaction&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;_noCommit&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="n"&gt;_isQuery&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;_isQuery&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;_isQuery&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;var&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;var&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;BeginTransaction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

                &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nf"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Rollback&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;~&lt;/span&gt;&lt;span class="nf"&gt;TestDbContext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;Dispose&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So our tests are against a real live database... but not our production database. We're testing it live, but not really live... and we don't commit. So... it all works out right? Seems to be working for us.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/q7UpJegIZjsk0/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/q7UpJegIZjsk0/giphy.gif" alt="Do it live!"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#required-nuget-packages"&gt;
  &lt;/a&gt;
  Required Nuget Packages
&lt;/h2&gt;

&lt;p&gt;If you view the nuget package manager in Visual Studio you can see which packages are required for this, but in short they are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Moq&lt;/li&gt;
&lt;li&gt;  xUnit&lt;/li&gt;
&lt;li&gt;  xUnit.Runner.VisualStudio&lt;/li&gt;
&lt;li&gt;  Microsoft.AspNetCore.Mvc.Testing&lt;/li&gt;
&lt;li&gt;  Microsoft.AspNetCore.TestHost&lt;/li&gt;
&lt;li&gt;  Microsoft.NET.Test.Sdk&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#unit-tests"&gt;
  &lt;/a&gt;
  Unit Tests
&lt;/h2&gt;

&lt;p&gt;For unit tests we'll look at how we tested on of our queries and one of our commands. To make sure we were using the correct TestDbContext I created a base class that all our unit tests extend. It's called TestBase. It news up a TestDbContext and allows for passing in a noCommit flag. This flag prevents commands from being committed to the database.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dotnetapicqrsteststestbasecs"&gt;
  &lt;/a&gt;
  dotnet-api-cqrs.tests/TestBase.cs
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;dotnet_api_cqrs.contracts.data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;dotnet_api_cqrs.tests&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestBase&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;_noCommit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IDbContext&lt;/span&gt; &lt;span class="n"&gt;TestDbContext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;TestBase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;noCommit&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;_noCommit&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;noCommit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="n"&gt;TestDbContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;TestDbContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"use-configuration-to-get-connection-string"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_noCommit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#dotnetapicqrstestsdatabookbookquerytestscs"&gt;
  &lt;/a&gt;
  dotnet-api-cqrs.tests/Data/Book/BookQueryTests.cs
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;dotnet_api_cqrs.data.Queries.Book&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Xunit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;dotnet_api_cqrs.tests.Data.Book&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BookQueryTests&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TestBase&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Fact&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;GetAllBooksTest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;GetAllBooksQuery&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestDbContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;NotEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Theory&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;InlineData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;GetBookByIDTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;bookID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;GetBookQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bookID&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestDbContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;NotNull&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;


        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Theory&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;InlineData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;GetBookForAuthorTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;authorID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;GetBooksForAuthorQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;authorID&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestDbContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;NotNull&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the BookQueryTests.cs file you will see multiple tests that can be run. These are 2 simplistic tests that will test all three of our queries you can find in the dotnet-api-cqrs.data project. xUnit allows for a couple method attributes. The first one is &lt;code&gt;Fact&lt;/code&gt; and this one simply runs the test with no parameters. The &lt;code&gt;Theory&lt;/code&gt; attribute allows for one more attribute called &lt;code&gt;InlineData&lt;/code&gt;. In the &lt;code&gt;InlineData&lt;/code&gt; attribute you can pass arguments which will then be passed to the test method. You can see this working in the &lt;code&gt;GetBookByIDTest&lt;/code&gt; test method. Again, this is a very simplistic test and we just pass a 1 which indicates the book ID to search for. These tests can be written to be much more complex and test various scenarios with much more complicated test data. We won't get into that here for sake of time, but go check out their documentation and do some google searching. There's lots of good stuff out there to help write more complex and stringent unit tests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-moq-to-test-a-service"&gt;
  &lt;/a&gt;
  Using Moq To Test A Service
&lt;/h2&gt;

&lt;p&gt;Moq allows you to very easily setup a mock object that can be used inside your unit tests. For another simple and basic example we have our BookServiceTests.cs file. This again extends the TestBase class and uses Moq to create a mock object of the IBookFacade which the BookService is expecting as a constructor argument. In this example, we create a mock of IBookFacade, and configure it so that when the GetBooks method is called we pass back some test data. This way when the BookService calls the GetBooks method on the facade it will get some test data and perform whatever business logic we have. Then we can test the result.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dotnetapicqrstestsservicesbookservicestestscs"&gt;
  &lt;/a&gt;
  dotnet-api-cqrs.tests/Services/BookServicesTests.cs
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;dotnet_api_cqrs.contracts.data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;dotnet_api_cqrs.data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;dotnet_api_cqrs.services&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Moq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Xunit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;dotnet_api_cqrs.tests.Services&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BookServicesTests&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TestBase&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Fact&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;GetAllBooksTest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;mockFacade&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IBookFacade&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
            &lt;span class="n"&gt;mockFacade&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetBooks&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Returns&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;TestData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Books&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;});&lt;/span&gt;

            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;bookService&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;BookService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestDbContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mockFacade&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;NotEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bookService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetAllBooks&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#integration-tests"&gt;
  &lt;/a&gt;
  Integration Tests
&lt;/h2&gt;

&lt;p&gt;We can also use xUnit and the Microsoft.AspNetCore.Mvc.Testing nuget package to run integration tests. These integration tests will setup a virtual web server in memory, run the api project on that virtual server, and then hit the endpoints to test them from the api endpoint down to the database query or command and return any issues along the way.&lt;/p&gt;

&lt;p&gt;The first piece we need is called the WebApplicationFactory. The Mvc.Testing package supplies this base class and we just extend it a little bit so that we can overwrite our default IDbContext dependency injection with the TestDbContext.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dotnetapicqrstestsapiapiquerytestapplicationfactorycs"&gt;
  &lt;/a&gt;
  dotnet-api-cqrs.tests/api/ApiQueryTestApplicationFactory.cs
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;dotnet_api_cqrs.contracts.data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Hosting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Mvc.Testing&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.TestHost&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.Extensions.DependencyInjection.Extensions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;dotnet_api_cqrs.tests.Api&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ApiQueryTestApplicationFactory&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TStartup&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;WebApplicationFactory&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TStartup&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;TStartup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ConfigureWebHost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IWebHostBuilder&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ConfigureWebHost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ConfigureTestServices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;services&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RemoveAll&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IDbContext&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
                &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TryAddScoped&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IDbContext&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;sp&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;TestDbContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"use-configuration-to-get-connection-string"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This particular factory class is for testing queries. We have a separate one that will test when commands are being run. These are rather simplistic tests I realize and we're still working on a solid strategry for testing more complex business logic that will run both commands and queries in one pass, but this should get you started anyway.&lt;/p&gt;

&lt;p&gt;Now if you look at the BookControllerQueryTests file you can see one more test where we hit the end point on the BookController that returns all books. In this particular test we are simply testing that the call was made succesfully.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dotnetapicqrstestsapicontrollersbookcontrollerquerytestscs"&gt;
  &lt;/a&gt;
  dotnet-api-cqrs.tests/Api/Controllers/BookControllerQueryTests.cs
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Net.Http&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Threading.Tasks&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;dotnet_api_cqrs.api&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Xunit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;dotnet_api_cqrs.tests.Api.Controllers&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BookControllerTests&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IClassFixture&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ApiQueryTestApplicationFactory&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Startup&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;ApiQueryTestApplicationFactory&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Startup&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_factory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;HttpClient&lt;/span&gt; &lt;span class="n"&gt;_httpClient&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;BookControllerTests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ApiQueryTestApplicationFactory&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Startup&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;_factory&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;_httpClient&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_factory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Fact&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;GetBooks_IsSuccessful&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_httpClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"/api/book"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EnsureSuccessStatusCode&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;True&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsSuccessStatusCode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So again, this was a rather simplistic look at unit and integration testing using xUnit and Moq, but I hope it gets you started on the road to more thorough and complex testing in your own code to ensure you are creating the best products you can.&lt;/p&gt;

&lt;p&gt;Please let me know if the comments your thoughts.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>dotnet</category>
      <category>dapper</category>
    </item>
    <item>
      <title>Recursion - Data Structures and Algorithms</title>
      <author>Akshay R</author>
      <pubDate>Sun, 15 Aug 2021 17:43:04 +0000</pubDate>
      <link>https://dev.to/akshayrak/recursion-data-structures-and-algorithms-jpj</link>
      <guid>https://dev.to/akshayrak/recursion-data-structures-and-algorithms-jpj</guid>
      <description>&lt;p&gt;I am planning to write a series of posts covering complete Data Structures and algorithms in beginner friendly way. I will be using java to explain the examples.&lt;/p&gt;

&lt;p&gt;In Data Structures and Algorithms Recursion is one of the first concept which is very important to understand, since it makes you think in cycles.Its like a fractal but it should have an end.&lt;/p&gt;

&lt;p&gt;Example Problems on Recursion:&lt;br&gt;
&lt;a href="https://github.com/akshayrak/Data-Structures-and-Algorithms/tree/main/src/recursion"&gt;https://github.com/akshayrak/Data-Structures-and-Algorithms/tree/main/src/recursion&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Important points to remember in Recursion:&lt;/p&gt;

&lt;p&gt;1.Recursive function is a function that calls itself.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public static int factorial(int n) {
        return n*factorial(n-1);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2.Recursive function should cover all the conditions that could arise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public static int factorial(int n) {
        if(n==1||n==0) {
            return 1;
        }
        return n*factorial(n-1);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3.We should also take care of exceptional situations also.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public static int factorial(int n) {
        if(n==1||n==0) {
            return 1;
        }
        if(n&amp;lt;0) {
            return -1;
        }
        return n*factorial(n-1);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;4.It uses Stack Memory to remember the functions it has called, so once the last function is executed, it keeps popping out the functions in Last in First out order.&lt;br&gt;
Note: Stack is one of the data structure that follows first in last out or last in first out, just think about stack of books &lt;/p&gt;

&lt;p&gt;5.All the problems that can be solved using Recursion can also be solved using iteration, iteration is efficient when you compared to space and time complexity of recursion but recursion is easy to code than iteration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public static int factorial(int n) {
                int count = 1;
        for(int i = 2;i&amp;lt;=n;i++){
                   count = count*i;
           }
           return count;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;6.So we can use recursion only when code clarity is more important than the time and space complexity, so we wont be using recursion in time critical cases (devices where life depends on time) and low storage cases (low stack memory devices).&lt;/p&gt;

&lt;p&gt;7.We commonly use recursion in trees.&lt;/p&gt;

&lt;p&gt;8.Recursion can be very slow if not implemented properly.&lt;/p&gt;

&lt;p&gt;Let me know if I need to add anything else or in case of any doubts comment down below &lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@mikakor?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Mika Korhonen&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/recursive?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>algorithms</category>
      <category>datastructures</category>
      <category>career</category>
    </item>
    <item>
      <title>Updating data files, commits vs. pull requests</title>
      <author>Nicolas Frankel</author>
      <pubDate>Sun, 15 Aug 2021 17:21:41 +0000</pubDate>
      <link>https://dev.to/nfrankel/updating-data-files-commits-vs-pull-requests-593o</link>
      <guid>https://dev.to/nfrankel/updating-data-files-commits-vs-pull-requests-593o</guid>
      <description>&lt;p&gt;For once, I'm wondering a bit if this post can be helpful to somebody else. I believe my context is pretty specific. Anyway, just in case it might be the case, here it is.&lt;/p&gt;

&lt;p&gt;My &lt;a href="https://github.com/hazelcast/jet-train"&gt;Jet Train&lt;/a&gt; project makes use of &lt;a href="https://developers.google.com/transit/gtfs"&gt;GTFS&lt;/a&gt;. GTFS stands for General Transit Feed Specification. It models public transportation schedules and their associated geographic information.&lt;/p&gt;

&lt;p&gt;GTFS is based on two kinds of data, static data, and dynamic data. Static data may change but do so rarely, &lt;em&gt;e.g.&lt;/em&gt;, transit agencies and bus stations. They are available as static files that you need to download now and then. Before, I had to download and overwrite them every time I run the demo.&lt;/p&gt;

&lt;p&gt;As a developer, I'm lazy and wanted to automate this task. I used GitHub Actions for that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Refresh Dataset&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;schedule&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;cron&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;12&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;2&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;1'&lt;/span&gt;                                                     &lt;span class="c1"&gt;# 1&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Refresh Dataset&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Checkout&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;                                            &lt;span class="c1"&gt;# 2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Fetch dataset archive&lt;/span&gt;
        &lt;span class="na"&gt;un&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;curl -o archive.zip https://api.511.org/transit/datafeeds\?api_key\=${ {secrets.FIVEONEONE_API_KEY} }\&amp;amp;operator_id\=RG&lt;/span&gt;  &lt;span class="c1"&gt;# 3&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Extract archive&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;unzip -o -d ./infrastructure/data/current/ archive.zip&lt;/span&gt;          &lt;span class="c1"&gt;# 4&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Add &amp;amp; commit&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;stefanzweifel/git-auto-commit-action@v4&lt;/span&gt;                        &lt;span class="c1"&gt;# 5&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;commit_message&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Update to latest data files&lt;/span&gt;
          &lt;span class="na"&gt;add_options&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;-u'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Run the action weekly&lt;/li&gt;
&lt;li&gt;Checkout the repository&lt;/li&gt;
&lt;li&gt;Get the static data files archive&lt;/li&gt;
&lt;li&gt;Extract files from the archive&lt;/li&gt;
&lt;li&gt;Use the &lt;a href="https://github.com/marketplace/actions/git-auto-commit"&gt;git-auto-commit&lt;/a&gt; action&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It's not an issue to commit directly. Indeed, it's not code but data. The code should already have all built-in safeguards to prevent unexpected data from causing exceptions at runtime. I already had a couple of surprises previously and applied a lot of defensive programming techniques.&lt;/p&gt;

&lt;p&gt;Yet, I was not happy with the above automation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Commits happen every week, regardless of whether I need to run the demo or not. It creates a lot of unnecessary commits. That's the reason I scheduled the action weekly and not more often.&lt;/li&gt;
&lt;li&gt;The action is scheduled on Mondays. If I run the demo on a Friday, I'll need to update the data files anyway.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hence, I decided to switch to an alternative approach. Instead of committing, I updated the script to open a Pull Request. If I need to run the demo, I'll merge it (and pull locally); if not, it will stay open. If an opened PR already exists, the action will overwrite it. Now, I can schedule the action more frequently.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Refresh Dataset&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;schedule&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;cron&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;12&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;2&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*'&lt;/span&gt;                                                     &lt;span class="c1"&gt;# 1&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Refresh Dataset&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Checkout&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;                                            &lt;span class="c1"&gt;# 2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Fetch dataset archive&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;curl -o archive.zip https://api.511.org/transit/datafeeds\?api_key\=${ {secrets.FIVEONEONE_API_KEY} }\&amp;amp;operator_id\=RG&lt;/span&gt;  &lt;span class="c1"&gt;# 3&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Extract files of interest from the archive&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;unzip -o -j archive.zip agency.txt routes.txt stop_times.txt stops.txt trips.txt -d ./infrastructure/data/current&lt;/span&gt;  &lt;span class="c1"&gt;# 4&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Remove archive&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rm archive.zip&lt;/span&gt;                                                  &lt;span class="c1"&gt;# 5&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Create PR&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;peter-evans/create-pull-request@v3&lt;/span&gt;                             &lt;span class="c1"&gt;# 6&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;commit-message&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Update to latest data files&lt;/span&gt;
          &lt;span class="na"&gt;branch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;data/refresh&lt;/span&gt;
          &lt;span class="na"&gt;delete-branch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
          &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Refresh data files to latest version&lt;/span&gt;
          &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Run the action &lt;em&gt;daily&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Checkout the repository&lt;/li&gt;
&lt;li&gt;Get the static data files archive&lt;/li&gt;
&lt;li&gt;Extract only required files from the archive&lt;/li&gt;
&lt;li&gt;Remove the archive file for cleanup&lt;/li&gt;
&lt;li&gt;Use the &lt;a href="https://github.com/marketplace/actions/create-pull-request"&gt;create-pull-request&lt;/a&gt; action. The action creates a PR that automatically contains all new and updated files; that's the reason why I only extract some files and remove the archive.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As I mentioned in the introduction, I'm not sure this post can help many people. If it does, please don't hesitate to comment to let me know about your use case.&lt;/p&gt;

&lt;p&gt;The complete source code for this post can be found on Github:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/hazelcast"&gt;
        hazelcast
      &lt;/a&gt; / &lt;a href="https://github.com/hazelcast/jet-train"&gt;
        jet-train
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="adoc"&gt;
&lt;h1&gt;
Jet Trains&lt;/h1&gt;
&lt;div id="user-content-preamble"&gt;
&lt;div&gt;
&lt;div&gt;
&lt;p&gt;This project is a demo of &lt;a href="https://jet.hazelcast.org/" rel="nofollow"&gt;Hazelcast Jet&lt;/a&gt;, a data streaming engine based on &lt;a href="https://hazelcast.org/" rel="nofollow"&gt;Hazelcast IMDG&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;It displays the position of public transports in the Bay Area in near real-time.&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;div&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td&gt;
It used to showcase Switzerland’s public transports
Unfortunately, the Swiss data provider doesn’t provide the GTFS-RT feed anymore
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;div&gt;
&lt;a href="https://www.youtube.com/watch?v=tP1czEIK6OY" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/dcb93f947ae561b7f3e4ff5b34ccd3814ab69e731c43d498f993e3555da9e157/68747470733a2f2f696d672e796f75747562652e636f6d2f76692f745031637a45494b364f592f736464656661756c742e6a7067" alt="Screenshot of the demo" width="640" height="480"&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;Figure 1. Demo screenshot (click to watch a recording sample)&lt;/div&gt;


&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;The technology stack consists of:&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://jet-start.sh/" rel="nofollow"&gt;Hazelcast Jet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://hazelcast.org/imdg/" rel="nofollow"&gt;Hazelcast IMDG&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://kotlinlang.org/" rel="nofollow"&gt;Kotlin&lt;/a&gt; for the code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://spring.io/projects/spring-boot" rel="nofollow"&gt;Spring Boot&lt;/a&gt; for the webapp&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://maven.apache.org/" rel="nofollow"&gt;Maven&lt;/a&gt; for the build system&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;


&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;h2 id="user-content-overall-structure"&gt;
Overall structure&lt;/h2&gt;
&lt;div&gt;
&lt;div&gt;
&lt;p&gt;The project contains several modules with dedicated responsibilities:&lt;/p&gt;
&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;p&gt;&lt;code&gt;common&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Code shared across modules&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;p&gt;&lt;code&gt;infrastructure&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Contain the static data files, as well as configuration files for Docker Compose and Kubernetes&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;p&gt;&lt;code&gt;local-jet&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;As an alternative to the previous module, start a local Jet instance to be able to debug inside the IDE&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;p&gt;&lt;code&gt;load-static&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Load GTFS-RT static data from files in memory
Those…&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
  &lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/hazelcast/jet-train"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://blog.frankel.ch/data-files-commits-vs-pull-requests/"&gt;A Java Geek&lt;/a&gt; on August 15&lt;sup&gt;th&lt;/sup&gt;, 2021&lt;/em&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>bigdata</category>
      <category>automation</category>
      <category>git</category>
    </item>
    <item>
      <title>Basic Networking Commands in Linux</title>
      <author>Seb </author>
      <pubDate>Sun, 15 Aug 2021 17:10:48 +0000</pubDate>
      <link>https://dev.to/linuxseb/basic-networking-commands-in-linux-203d</link>
      <guid>https://dev.to/linuxseb/basic-networking-commands-in-linux-203d</guid>
      <description>&lt;p&gt;Hi everyone! Welcome to my first article on DEV :) &lt;/p&gt;

&lt;p&gt;Today I will be doing a better overview of some basic networking commands in Linux. &lt;/p&gt;

&lt;p&gt;I recently created a short and sweet thread on twitter with these commands, so right now, I will be going over them a bit more with more detail and information.&lt;/p&gt;

&lt;p&gt;If you want to check out the twitter thread, go here - &lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--nSLtrKbk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1426589959629148163/aL1OINXn_normal.jpg" alt="Seb 👩🏻‍💻🇧🇦 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Seb 👩🏻‍💻🇧🇦
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/linuxseb"&gt;@linuxseb&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      💻 Basic Networking Commands in Linux:&lt;br&gt;&lt;br&gt;Hey everyone! Today I will be going over a few different useful commands!👩‍💻&lt;br&gt;&lt;br&gt;This will be a quick overview, and later I will release an article with more details.👨‍💻
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      01:45 AM - 15 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1426721727485153285" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1426721727485153285" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1426721727485153285" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#ping"&gt;
  &lt;/a&gt;
  ping
&lt;/h2&gt;

&lt;p&gt;The 'ping' command stands for Packet Internet Groper. It is used to test the network connections between two computers and to see if a host is reachable. &lt;/p&gt;

&lt;p&gt;So how does it work? Well, the 'ping' command uses something called ICMP, which stands for Internet Control Message Protocol. It sends an ICMP echo request message to the IP address you request. If the connection is successful, it responds with an ICMP echo reply message. You will know the host is reachable if you get the ICMP echo reply message&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5gJczHcI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fpi9hrht397ulnpk05ec.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5gJczHcI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fpi9hrht397ulnpk05ec.png" alt="ping"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dig"&gt;
  &lt;/a&gt;
  dig
&lt;/h2&gt;

&lt;p&gt;The 'dig' command can be used to view information about the Domain Name Servers of a website. It stands for "Domain Information Groper". Besides name servers, you can also view information about host addresses and mail exchanges. While anyone can use this command, it's mostly used by System Administrators.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nSzsvTtp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mnel5pt3un8yy6d4skbz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nSzsvTtp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mnel5pt3un8yy6d4skbz.png" alt="dig"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whois"&gt;
  &lt;/a&gt;
  whois
&lt;/h2&gt;

&lt;p&gt;The 'whois' command is another basic command that is used to look up information. In this case, using whois will give you details about a domain, such as owner information. &lt;/p&gt;

&lt;p&gt;Check out the screenshot to see what it shows you:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HKLbhRjq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sjnq3aicfs7qcla0913a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HKLbhRjq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sjnq3aicfs7qcla0913a.png" alt="whois"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hostname"&gt;
  &lt;/a&gt;
  hostname
&lt;/h2&gt;

&lt;p&gt;This command is as it says. If for any reason you need to use it, it just tells you what the hostname is.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ORIairyM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cduu9lj8nztg01ij689o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ORIairyM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cduu9lj8nztg01ij689o.png" alt="hostname"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ip-a"&gt;
  &lt;/a&gt;
  ip a
&lt;/h2&gt;

&lt;p&gt;The 'ip a' command is among a couple you can use to find your IP address. Of course, knowing what your IP address is, is important. &lt;/p&gt;

&lt;p&gt;You can also use the IP command to view certain things. Such as 'ip link', this command will display link layer information. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N8KY0kI8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b7w3ssp7qf9rtvz3i074.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N8KY0kI8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b7w3ssp7qf9rtvz3i074.png" alt="ip a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finger"&gt;
  &lt;/a&gt;
  finger
&lt;/h2&gt;

&lt;p&gt;The 'finger' command shows you the details of all users who are logged in. This is a great command for sysadmins as well as they can see things such as exact login times and even emails of users. In order to use this command, you may need to install it. To do so, run 'sudo apt-get install finger'&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h3oPbNEZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4vphgxhn0h53aagfwva.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h3oPbNEZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4vphgxhn0h53aagfwva.png" alt="finger"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#netstat-a"&gt;
  &lt;/a&gt;
  netstat -a
&lt;/h2&gt;

&lt;p&gt;Another useful command is 'netstat'. In this case, I am using 'netstat -a' to list all the ports that are listening. &lt;/p&gt;

&lt;p&gt;A listening port is when your machine is ready to accept a connection on that port. You can close and open ports at anytime. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ciKsp2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vc94xb6ei91z7uxi3xv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ciKsp2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vc94xb6ei91z7uxi3xv.png" alt="netstat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#traceroute"&gt;
  &lt;/a&gt;
  traceroute
&lt;/h2&gt;

&lt;p&gt;The 'traceroute' command displays the route a packet took to reach the host. If you look at my screenshot below, you can see how many 'hops' it took for me to reach the requested host. A hop happens when a packet is passed from one network segment to the next network segment&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lT5RIrEn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdwr42d61w3b7gajaaaq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lT5RIrEn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdwr42d61w3b7gajaaaq.png" alt="8"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wow-thank-you-for-reading-all-the-way-to-the-end"&gt;
  &lt;/a&gt;
  WOW, thank you for reading all the way to the end.
&lt;/h2&gt;

&lt;p&gt;I do plan on posting more about Linux in the future. Stay tuned!&lt;/p&gt;

</description>
      <category>linux</category>
    </item>
    <item>
      <title>Starting an internship with the Zuri Team</title>
      <author>ahmad-cod</author>
      <pubDate>Sun, 15 Aug 2021 16:17:49 +0000</pubDate>
      <link>https://dev.to/ahmadcod/starting-an-internship-with-the-zuri-team-55le</link>
      <guid>https://dev.to/ahmadcod/starting-an-internship-with-the-zuri-team-55le</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hello-world"&gt;
  &lt;/a&gt;
  Hello World,
&lt;/h2&gt;

&lt;p&gt;I'm &lt;strong&gt;Ahmad Aroyehun&lt;/strong&gt;, I'm about to embark on an interesting journey with the &lt;a href="https://zuri.team"&gt;Zuri Team&lt;/a&gt;, and I hope to share my adventure with you all.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#goals-for-the-8-weeks-internship"&gt;
  &lt;/a&gt;
  Goals for the 8 weeks Internship
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Understand my frontend skills (HTML, CSS, Javascript and React) better.&lt;/li&gt;
&lt;li&gt;Learn Typescript and Graph ql.&lt;/li&gt;
&lt;li&gt;Build Real life Projects.&lt;/li&gt;
&lt;li&gt;Share the difficulties and the interesting part of the internship every Sunday of each week.&lt;/li&gt;
&lt;li&gt;Work and collaborate with other developers.&lt;/li&gt;
&lt;li&gt;By the end of the internship I hope to secure a remote frontend developer, javascript or fullstack developer job.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks at &lt;a href="https://zuri.team"&gt;zuri team&lt;/a&gt;, &lt;a href="https://internship.zuri.team"&gt;Zuri Internship&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#here-are-some-awesome-beginners-tutorials"&gt;
  &lt;/a&gt;
  Here are some awesome beginner's tutorials
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/FTFaQWZBqQ8"&gt;
&lt;/iframe&gt;
&lt;br&gt;
  &lt;a href="https://www.youtube.com/watch?v=FTFaQWZBqQ8"&gt;Figma tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/RGOj5yH7evk"&gt;
&lt;/iframe&gt;
&lt;br&gt;
   &lt;a href="https://www.youtube.com/watch?v=RGOj5yH7evk"&gt;Version Control with Git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/D-h8L5hgW-w"&gt;
&lt;/iframe&gt;
&lt;br&gt;
   &lt;a href="https://www.youtube.com/watch?v=D-h8L5hgW-w"&gt;Learning HTML and CSS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/W6NZfCO5SIk"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=W6NZfCO5SIk"&gt;Using Javascript&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Nothing Good comes easy.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
      <category>frontend</category>
      <category>internship</category>
      <category>react</category>
    </item>
    <item>
      <title>#100daysOfCode [Day - 05]</title>
      <author>Al Siam</author>
      <pubDate>Sun, 15 Aug 2021 16:16:30 +0000</pubDate>
      <link>https://dev.to/alsiamworld/100daysofcode-day-05-36ea</link>
      <guid>https://dev.to/alsiamworld/100daysofcode-day-05-36ea</guid>
      <description>&lt;h1&gt;
  &lt;a href="#100daysofcode-day-05"&gt;
  &lt;/a&gt;
  100daysofcode [Day - 05]
&lt;/h1&gt;

&lt;p&gt;Topic: Setting up GitHub Environment &lt;/p&gt;

&lt;p&gt;Today I've set up my GitHub profile and added some awesome features on my GitHub overview page. Make a visit for a better experience and suggest how can I improve more.&lt;/p&gt;

&lt;p&gt;link: &lt;a href="https://github.com/alsiamworld"&gt;https://github.com/alsiamworld&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fo3DuEWQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zo94gw3zenb4aw079ev7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fo3DuEWQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zo94gw3zenb4aw079ev7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>My Dev Journey: Week 15</title>
      <author>Harry York</author>
      <pubDate>Sun, 15 Aug 2021 16:07:23 +0000</pubDate>
      <link>https://dev.to/harryyork97/my-dev-journey-week-15-96n</link>
      <guid>https://dev.to/harryyork97/my-dev-journey-week-15-96n</guid>
      <description>&lt;p&gt;It's crazy to think that my Northcoders course ended a week ago, this blog was a cathartic way for me to think retrospectively each week, about the tasks and experiences that each week of the course holds. If you want to find out about the final project me and my team worked on, you can check out the &lt;a href="https://www.youtube.com/watch?v=IAswCM89BtA"&gt;recording of our graduation&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;If you've enjoyed this blog post or the whole series, maybe consider checking out my &lt;a href="https://twitter.com/grand_oldduke"&gt;Twitter&lt;/a&gt; and &lt;a href="https://github.com/harryyork97"&gt;GitHub&lt;/a&gt; 😁&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-happened-this-week"&gt;
  &lt;/a&gt;
  What's happened this week
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#time-off"&gt;
  &lt;/a&gt;
  Time off
&lt;/h3&gt;

&lt;p&gt;As a well deserved break (in my opinion 😅) I haven't wrote a line of code in a week, and I feel so much more recharged and refreshed. 14 weeks is a long time to work without a break, even in a 'real' work environment, and anyone will feel burnt out and tired after a marathon like that! So I spent the weekend after I finished with my partner and went to visit family for a birthday. It was really nice to visit family especially after not seeing anyone for a long time COVID-wise. I also got a car this week, I passed my driving test a few weeks ago whilst on the course and haven't had the chance to arrange anything to do with it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-ready-to-start-my-first-dev-job"&gt;
  &lt;/a&gt;
  Getting ready to start my first dev job!
&lt;/h3&gt;

&lt;p&gt;This week I signed all of the paperwork for my first developer job! I'm very excited to start and from the team that I've had the pleasure of speaking to so far, they all like their roles and all seem lovely. I'll talk a bit more on the interview process in the next section.&lt;/p&gt;

&lt;p&gt;I'll be starting as a Junior Developer, and I can't wait to learn more about how to be a developer in the workplace and get stuck in with my new team! The bootcamp was remote, aside from a few days here and there, so it's kind of exciting to be going into my new office and seeing what everything is like.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advice"&gt;
  &lt;/a&gt;
  Advice
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#bootcamps"&gt;
  &lt;/a&gt;
  Bootcamps
&lt;/h3&gt;

&lt;p&gt;If you've been reading any of my blog and have been considering a coding bootcamp then I can wholeheartedly say absolutely go for it! I can obviously only attest to the quality of the Northcoders bootcamp, with that being the only one I've been on.&lt;/p&gt;

&lt;p&gt;However, the quality of the tutoring from the classroom team is unparalleled in my opinion and the passion that they put in everyday is very apparent, and very very appreciated by the students.&lt;/p&gt;

&lt;p&gt;If you have any doubts about bootcamps or Northcoders in general when you're thinking of applying, then just reaching out and asking all of your questions is a great idea. &lt;/p&gt;

&lt;p&gt;The main thing I'll say is that it is far more affordable than it may seem at first. I chose the deferred payment option to spread the cost of the course out over two years with no interest applied to that loan. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interviews-and-tech-tests"&gt;
  &lt;/a&gt;
  Interviews and tech tests
&lt;/h3&gt;

&lt;p&gt;I think there's a lot of worry around interviews and especially tech tests so I'd thought I'd share my experience, the good and the bad!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The bad&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I'd applied for a grad role at a different place in Leeds a few weeks ago, the process was very impersonal, all email communication and online forms, and their tech test was the embodiment of everything I'd worried about. It was a list of super difficult abstract questions under a strict time limit that didn't really allow me to showcase any of my skills. The whole process left me feeling really dejected because it was very unfriendly and me not passing made me question whether I'd be able to get a job. &lt;/p&gt;

&lt;p&gt;Luckily they're not all like this in my experience and from doing it I've learnt that my performance on these kind of arbitrary test doesn't define what I know. If anything, having experienced this I know that this kind of interview process would be a red flag for me when job hunting in the future!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The good&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For the job I have been offered the application process was super friendly and personal, there was an initial phone call with the internal talent team who tell you a little more about the role, followed by a first stage interview where I got to meet two of the managers and talk a little more in depth about the role. This was great because it meant I could get a bit of a feel for the people that I could be working with and see if I thought I was a good fit.&lt;/p&gt;

&lt;p&gt;Then came the tech test, for my tech test I was asked to create a digital calculator, I had just over a couple of days to complete it and I was given a lot of freedom in the tech choices I could make for the test so I could really showcase what I could do.&lt;/p&gt;

&lt;p&gt;I decided to go with React and TypeScript as React is something that we cover on the course, but TypeScript is something that I was using in my final project for the course, so I thought why not?&lt;/p&gt;

&lt;p&gt;My second interview was great, we got to go over my tech test and my decisions and getting to meet existing members of the team was ace, and I get to talk to the people that could tell me even more about the day-to-day of the potential job!&lt;/p&gt;

&lt;p&gt;This was such a positive interview and tech test experience and I was overjoyed when they offered me the role! I wanted to share how good it was so other new devs know that tech tests aren't all awful and there's some really good places out there that have interview processes really well thought through and suited to juniors, keep looking and you'll find the right place for you!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h2&gt;

&lt;p&gt;I start my new job on the 17th August, and I'm going to devote a lot of time to getting settled into the team and up to date with the code base I'll be working on. &lt;/p&gt;

&lt;p&gt;Other than that, I'm certain this will be my last blog post in this series as it has fulfilled its purpose in many ways. I wanted to mainly do it to keep myself motivated throughout the course, as well as for potential employment purposes.&lt;/p&gt;

&lt;p&gt;I've enjoyed the blogging experience a lot more than I thought I would, and might return to it after a little while, with some newly found wisdom from my first dev job.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank You
&lt;/h2&gt;

&lt;p&gt;A huge thank you to anyone reading to the very end, and an even bigger one if you've read each instalment of the series. Keep your eyes peeled for any more in future and of course, follow me on &lt;a href="https://twitter.com/grand_oldduke"&gt;Twitter&lt;/a&gt;, &lt;a href="https://github.com/harryyork97"&gt;GitHub&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/harry-york/"&gt;LinkedIn&lt;/a&gt;, and here on &lt;a href="https://dev.to/harryyork97"&gt;Dev.to&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>bootcamp</category>
    </item>
  </channel>
</rss>
