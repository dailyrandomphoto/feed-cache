<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Top 5 Tech Gadgets under ₹1000</title>
      <author>Konchada Sai Ansul</author>
      <pubDate>Sat, 24 Apr 2021 15:56:29 +0000</pubDate>
      <link>https://dev.to/saiansulsblog/top-5-tech-gadgets-under-1000-4f97</link>
      <guid>https://dev.to/saiansulsblog/top-5-tech-gadgets-under-1000-4f97</guid>
      <description>&lt;p&gt;Hello Guys, Welcome back to a new post of &lt;strong&gt;Sai Ansul's Blog&lt;/strong&gt;. In this blog, I have got for you some very innovative tech gadgets which will help in our daily lives.&lt;/p&gt;

&lt;p&gt;The criteria under which the gadgets are selected is listed below:&lt;/p&gt;

&lt;p&gt;-Pocket Safe&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Self-tested&lt;/li&gt;
&lt;li&gt;Good Review&lt;/li&gt;
&lt;li&gt;Easily available&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let's start,&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-ssbright-portable-wooden-speaker"&gt;
  &lt;/a&gt;
  1. SSBright Portable Wooden Speaker
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z7kgOGYD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619274318304/gQBUDGZKJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z7kgOGYD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619274318304/gQBUDGZKJ.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
This is Bluetooth speaker which has a funky wooden radio reason. This has a good bass, with decent audio quality. This a good one for price around ₹759. This has an input of DC-5V,with 10m coverage. &lt;br&gt;
Can Directly play music from USB/TF-card/Line-in cable/all kind of audio devices through Line in cable Designed to charge most handheld devices and smartphones. It supports all types of devices.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-electronics-case-zipper"&gt;
  &lt;/a&gt;
  2. Electronics Case Zipper
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GmBsnMwt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619275200255/eH3rQL_Kk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GmBsnMwt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619275200255/eH3rQL_Kk.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
This is a very helpful gadget, it has many pockets to keep all your electronics organized at one place, the gadgets that you can keep are  USB Flash Drives Data Earphone Cable Case Organizer Bag Digital Storage Pouch. For various cable, power bank, flash drive, memory card, SD cards,7.9”pad, USB drive, cellphone, charger, mouse, kindle, tablet and other accessories. This comes with 3 color designs, this is of a good quality, double layered nylon. And its waterproof too. At a price of ₹499 its worth every penny you pay.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-vlogging-mike"&gt;
  &lt;/a&gt;
  3. Vlogging Mike
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3VD3c3V6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619276513389/g1YW-sZbJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3VD3c3V6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619276513389/g1YW-sZbJ.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
This one of the best mike if you want to vlog, and if you are a beginner this one can be for you, this mike has a 20ft cable with aux outlet, you can connect with laptop, mobile, tablet and more. This also has noise cancellation and record crystal clear voice. It just costs ₹759. &lt;/p&gt;

&lt;p&gt;## 4. Anti-theft bag&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RK1Psfq1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619276888898/8F4e6nVmm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RK1Psfq1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619276888898/8F4e6nVmm.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
This is an anti-theft bag, its water proof and has many spaces to keep your electronics organized. It just costs ₹849.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bzTEn9Gk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619277211215/fV6eMJ_C-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bzTEn9Gk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619277211215/fV6eMJ_C-.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Using this bag you can also charge your phone, it also has many other features. You can check it out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-gaming-mouse"&gt;
  &lt;/a&gt;
  5. Gaming Mouse
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WhgenarH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619277673015/89JbqXpH5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WhgenarH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619277673015/89JbqXpH5.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
This is USB mouse which is mostly liked by gamers, it has a funky design. It has 7 gaming operational keys. It has a rubber grip at the sides, its sturdy if you are a gamer you can have a look at this one. &lt;br&gt;
It just costs  ₹499, it gives you a very comfortable fell while having gameplay, it also has lights in it.&lt;/p&gt;

&lt;p&gt;This for it today guys, These gadgets are useful if you like you can also buy these.&lt;/p&gt;

&lt;p&gt;If you like my content and want to support my efforts please like👍🏻, share📲 &amp;amp; subscribe to the newsletter to be get notified w&lt;/p&gt;

</description>
    </item>
    <item>
      <title>JAVA Semester Project | Review Plsss! |  GN Tours and Services</title>
      <author>Gaurav Singh</author>
      <pubDate>Sat, 24 Apr 2021 15:51:56 +0000</pubDate>
      <link>https://dev.to/gauravsingh9356/java-semester-project-review-plsss-gn-tours-and-services-4fm7</link>
      <guid>https://dev.to/gauravsingh9356/java-semester-project-review-plsss-gn-tours-and-services-4fm7</guid>
      <description>&lt;p&gt;Finally, I have completed our project. This was my first Java project on this scale. Seriously, I had no idea about how far I will make it after I decided on this idea to implement. But at last, I am happy to share that I implemented more utilities than I initially thought!&lt;/p&gt;

&lt;p&gt;𝓖𝓝 𝓣𝓸𝓾𝓻𝓼 𝓪𝓷𝓭 𝓢𝓮𝓻𝓿𝓲𝓬𝓮𝓼&lt;/p&gt;

&lt;p&gt;𝐅𝐮𝐥𝐥𝐲 𝐋𝐨𝐚𝐝𝐞𝐝 𝐑𝐞𝐚𝐥 𝐖𝐨𝐫𝐥𝐝 𝐀𝐩𝐩𝐥𝐢𝐜𝐚𝐭𝐢𝐨𝐧 𝐭𝐨 𝐝𝐞𝐯𝐞𝐥𝐨𝐩 𝐚 𝐬𝐲𝐬𝐭𝐞𝐦 𝐭𝐡𝐚𝐭 𝐚𝐮𝐭𝐨𝐦𝐚𝐭𝐞𝐬 𝐭𝐡𝐞 𝐩𝐫𝐨𝐜𝐞𝐬𝐬𝐞𝐬 𝐚𝐧𝐝 𝐚𝐜𝐭𝐢𝐯𝐢𝐭𝐢𝐞𝐬 𝐨𝐟 𝐚 𝐭𝐫𝐚𝐯𝐞𝐥.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#functionalities"&gt;
  &lt;/a&gt;
  Functionalities:
&lt;/h2&gt;


&lt;li&gt;Fully Secured Authentication i.e. SignUp, Login, logout,Forget Password utilities. Encryption and Decryption of user passwords&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Loading Welcome Screen to user&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Registration&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;OTP Email Sending utility.&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Confimation Email Sending utility after successfull registration&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Update Details if user wants to update&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;View User Details&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Different Packages with different prices and offerings&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;View Hotels&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Book Package Utility&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Dynamic Hotels Integration with Database&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Book Hotel Utility&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;View booked Package and Hotel&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;No of person, AC/Non AC room, food/No food etc all utilities offerings and then dynamically calculation of prices&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;View Destination&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Payment with Stripe&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Chat Bot for answering FAQs&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Review Us utility includes user rating out of 5 and their comments about our services&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;About Us&lt;/li&gt;
&lt;h2&gt;
  &lt;a href="#used-tech"&gt;
  &lt;/a&gt;
  Used Tech:
&lt;/h2&gt;


&lt;li&gt;Java Swing for UI&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;MySQL for Database&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;AES Algorithm for encryption/decryption of passwords&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;JavaMail for sending email OTP&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Stripe API Payment Gateway &lt;/li&gt;
&lt;h2&gt;
  &lt;a href="#database-records"&gt;
  &lt;/a&gt;
  Database Records
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#database-travel"&gt;
  &lt;/a&gt;
  Database == Travel
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#tables"&gt;
  &lt;/a&gt;
  Tables:
&lt;/h4&gt;


&lt;li&gt;account for auth&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;customer for registration&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;bookpackage for booking of package&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;hotel for adding hotels in table and dynamically fetching them in UI&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;bookhotel for booking hotels&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;review for reviewing our services&lt;/li&gt;
&lt;h4&gt;
  &lt;a href="#if-liked-feel-free-to-star-itstarstruck"&gt;
  &lt;/a&gt;
  If liked feel free to star it!🤩
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://github.com/GauravSingh9356/GN_Tours_Services/tree/master"&gt;Github Code Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/feed/update/urn:li:activity:6785495647555469314/"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>devops</category>
      <category>showdev</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>10 Awesome 404 Page Not Found Page Designs</title>
      <author>Pawan Bhayde</author>
      <pubDate>Sat, 24 Apr 2021 15:43:27 +0000</pubDate>
      <link>https://dev.to/pawanbhayde/10-awesome-404-page-not-found-page-designs-5ig</link>
      <guid>https://dev.to/pawanbhayde/10-awesome-404-page-not-found-page-designs-5ig</guid>
      <description>&lt;h1&gt;
  &lt;a href="#fargo-404"&gt;
  &lt;/a&gt;
  Fargo 404
&lt;/h1&gt;

&lt;p&gt;Fargo-inspired 404 page for DailyUI #008&lt;/p&gt;

&lt;p&gt;Snow loosely based on &lt;a href="http://codepen.io/loktar00/pen/CHpGo"&gt;http://codepen.io/loktar00/pen/CHpGo&lt;/a&gt; and &lt;a href="http://php.quicoto.com/snow-html-canvas/"&gt;http://php.quicoto.com/snow-html-canvas/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/nw/embed/WQmxYY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#404-page-lost-in-space"&gt;
  &lt;/a&gt;
  404 Page - Lost In Space
&lt;/h1&gt;

&lt;p&gt;Coded my dribbble shot: &lt;a href="https://dribbble.com/shots/4330167-404-Page-Lost-In-Space"&gt;https://dribbble.com/shots/4330167-404-Page-Lost-In-Space&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Animated 404 Lost in Space Page.
CSS3 Keyframe animations used.
All the illustrations are hand-crafted in Adobe Illustrator.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/salehriaz/embed/erJrZM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#404-error-page"&gt;
  &lt;/a&gt;
  404 error page
&lt;/h1&gt;

&lt;p&gt;404 error SVG animation page&lt;br&gt;
anime.js&lt;/p&gt;

&lt;p&gt;error 404&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/uiswarup/embed/dyoyLOp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#yeti-404-page"&gt;
  &lt;/a&gt;
  Yeti 404 Page
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/dsenneff/embed/mjZgmN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#daily-ui-008-404-page"&gt;
  &lt;/a&gt;
  Daily UI #008 - 404 Page
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rafaelavlucas/embed/NWWQNjZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#404-page"&gt;
  &lt;/a&gt;
  404 Page
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/andrew-lawendy/embed/deOpMZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#404-page"&gt;
  &lt;/a&gt;
  404 page
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Navedkhan012/embed/vrWQMY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#cyberpunk-error-page"&gt;
  &lt;/a&gt;
  Cyberpunk Error page
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ltrademark/embed/xpgprZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#404"&gt;
  &lt;/a&gt;
  404
&lt;/h1&gt;

&lt;p&gt;Page not found &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/vineethtrv/embed/ZbKLmq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#404-error-example"&gt;
  &lt;/a&gt;
  404 Error Example
&lt;/h1&gt;

&lt;p&gt;From graphic design to web design. This 404 error example was designed by Yoga Perdana and we have converted into web with pure CSS and minimal HTML using CSS3 gradients and shadows. See more creative examples in the related pens.&lt;/p&gt;

&lt;p&gt;Hope you like it :)&lt;/p&gt;

&lt;p&gt;Read the full article &lt;a href="https://www.silocreativo.com/en/creative-examples-404-error-css/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ricardpriet/embed/qVZxNo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:-&lt;/strong&gt; visit my youtube channel for frontend tutorials&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;subscribe to my youtube channel :-&lt;/strong&gt; &lt;a href="https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg"&gt;https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resent post :-&lt;/strong&gt; &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/pawanbhayde" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bpN1Nik7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--9JCEgIY5--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/619463/7a66f3fc-82cb-499b-a22b-9b346123f937.png" alt="pawanbhayde image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pawanbhayde/7-way-to-find-in-array-using-javascript-4lhf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;7 Way To Find In Array Using Javascript&lt;/h2&gt;
      &lt;h3&gt;Pawan Bhayde ・ Apr 24 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>codepen</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>Notus React - Free Tailwind UI Kit</title>
      <author>Sm0ke</author>
      <pubDate>Sat, 24 Apr 2021 15:43:04 +0000</pubDate>
      <link>https://dev.to/sm0ke/notus-react-free-tailwind-ui-kit-2fn9</link>
      <guid>https://dev.to/sm0ke/notus-react-free-tailwind-ui-kit-2fn9</guid>
      <description>&lt;p&gt;This article presents an open-source UI Kit crafted with &lt;strong&gt;React and Tailwind&lt;/strong&gt;: &lt;em&gt;Notus React&lt;/em&gt;. The project is released under the MIT License on Github and curious minds can download and see this project in action with a few commands typed in the terminal. For newcomers, &lt;strong&gt;React&lt;/strong&gt; is an open-source library, probably the most popular one at the moment we speak, actively supported by the Facebook tech giant. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; TL;DR;&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.creative-tim.com/product/notus-react"&gt;Notus React&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://demos.creative-tim.com/notus-react/"&gt;Notus React&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;Free React Dashboards&lt;/a&gt; - a curated list | Dev.to&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g5b2ffUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/admin-dashboards/react-dashboards/master/media/notus-react-tailwind-intro.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g5b2ffUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/admin-dashboards/react-dashboards/master/media/notus-react-tailwind-intro.gif" alt="Notus React - Free Tailwind UI Kit, animated presentation."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Notus React is Free and Open Source. It features multiple HTML and React elements and it comes with dynamic components for React. By using the components and pages provided by this open-source React UI Kit, any developer with basic knowledge can code a new website quite fast.&lt;/p&gt;

&lt;p&gt;To compile and execute the project in a local environment, all we need is a decent NodeJS version plus Git, the popular versioning command tool to pull the sources directly from Github.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/creativetimofficial/notus-react/blob/main/README.md"&gt;README&lt;/a&gt; file provided in the source directory comes with a comprehensive setup regarding the build and kit execution.    &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fully Coded Components&lt;/strong&gt; - Notus React is built with over frontend 100 individual components, giving you the freedom to choose and combine. All components can take variations in colors that you can easily modify using Tailwind CSS classes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example Pages&lt;/strong&gt; - If you want to get inspiration or just show something directly to your clients, you can jump-start your development with our pre-built example pages. You will be able to quickly set up the basic structure for your web project.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Notus React&lt;/strong&gt; - Components&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8wg3gFeA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zkf9plgsj92qjbef3o7t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8wg3gFeA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zkf9plgsj92qjbef3o7t.png" alt="Notus React - Components."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Notus React&lt;/strong&gt; - Dashboard Page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yzCaNq81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zyn0a26jfl8sxse2gait.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yzCaNq81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zyn0a26jfl8sxse2gait.png" alt="Notus React - Dashboard Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Notus React&lt;/strong&gt; - Profile Page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jhHBPXl_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vqxxqetxgsmniphikuqa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jhHBPXl_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vqxxqetxgsmniphikuqa.png" alt="Notus React - Profile Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! For more resources, please access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/creativetimofficial/notus-react"&gt;Notus React&lt;/a&gt; - Source Code (MIT License) published on Github&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/admin-dashboards/open-source"&gt;Open-source Admin Dashboards&lt;/a&gt; - index provided by AppSeed &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>tailwindcss</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Learn Ruby 101: Variables, puts and gets</title>
      <author>Eric Chapman</author>
      <pubDate>Sat, 24 Apr 2021 15:15:37 +0000</pubDate>
      <link>https://dev.to/ericchapman/learn-ruby-101-variables-puts-and-gets-3k63</link>
      <guid>https://dev.to/ericchapman/learn-ruby-101-variables-puts-and-gets-3k63</guid>
      <description>&lt;p&gt;I develop in Javascript, Python, PHP and Ruby. By far Ruby is my favorite programming language. Together let start a journey and revisit our Ruby foundations. &lt;/p&gt;

&lt;h2&gt;You want to learn Ruby or your Ruby is a bit rusty?&lt;/h2&gt; 

&lt;p&gt;In this series we will start from the beginning and will learn every aspect of Ruby one step at a time. &lt;/p&gt;

&lt;p&gt;Each post will include some theory but also exercise and solution.&lt;/p&gt;

&lt;p&gt;If you have any questions/comments or your are new and need help, you can comment below or send me a message.&lt;/p&gt;

&lt;h2&gt;Run your Ruby code&lt;/h2&gt;

&lt;p&gt;No need to go through a complete install. Just go to this web site &lt;a href="https://replit.com/languages/ruby"&gt;https://replit.com/languages/ruby&lt;/a&gt; and start learning right now. You will have plenty of time to figure out the Ruby installation on your local machine later on...&lt;/p&gt;

&lt;h1&gt;Ruby Variables&lt;/h1&gt;

&lt;p&gt;If you’re new to programming, variables are the fundamental building blocks of a programming language as they are used to store different values that you want to process in your code.&lt;/p&gt;

&lt;p&gt;Once the variable is store in program memory, it can be use later on.&lt;/p&gt;

&lt;p&gt;For example let say you want to store the user name you can use a variable call name and set is value to Mike Taylor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike Taylor'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Ruby string is enclosed with quotation marks.&lt;/p&gt;

&lt;p&gt;The variable name we just created is a string variable. In Ruby we don't have to specified the variable type. &lt;/p&gt;

&lt;p&gt;Ruby is a Just-in-time (JIT) interpreted language. Which automatically recognizes the data type based on what variables are stored.&lt;/p&gt;

&lt;p&gt;Here are some Ruby basic variables type and how to create them&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# string&lt;/span&gt;
&lt;span class="n"&gt;full_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike Taylor'&lt;/span&gt;

&lt;span class="c1"&gt;# integer number&lt;/span&gt;
&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;

&lt;span class="c1"&gt;# float number&lt;/span&gt;
&lt;span class="n"&gt;book_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;15.80&lt;/span&gt;

&lt;span class="c1"&gt;# booleans&lt;/span&gt;
&lt;span class="n"&gt;active?&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;admin_user?&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ruby also have more advance variables type like array, hash, structure and class. We will cover all of those in details later.&lt;/p&gt;

&lt;h1&gt;Output&lt;/h1&gt;

&lt;p&gt;In Ruby it is possible to output information to the console/terminal.&lt;/p&gt;

&lt;p&gt;For example let's send our name variable to the console&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike Taylor'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The puts method will take any value we give him and print it to the console...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mike Taylor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Others example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike Taylor'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Hello World'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Hello'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hello World
Hello
Mike Taylor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see we can send multiple value to puts method      and he will display all of them.&lt;/p&gt;

&lt;p&gt;Another Ruby method very similar to puts is the method print. Print can display something to the console but will not send the line break after each print. Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike Taylor'&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Hello '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hello Mike Taylor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;Input&lt;/h1&gt;

&lt;p&gt;How about getting info from user. In Ruby we use the method gets to do just that&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Enter user name: '&lt;/span&gt;
&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;gets&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The console will then wait for user input:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Enter user name: _
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The gets method will return everything you type plus a line break characters. If you don't want to read the line break characters use the chomp method to remove that last character&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print 'Enter user name: '
name = gets.chomp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;Exercice&lt;/h1&gt;

&lt;p&gt;Create a little program that ask for user name and user age and save the result in name and age variable. &lt;/p&gt;

&lt;p&gt;Then display name and age variable in the console&lt;/p&gt;

&lt;p&gt;Solution&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Enter user name: '&lt;/span&gt;
&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;gets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chomp&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Enter user age: '&lt;/span&gt;
&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;gets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chomp&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'The user name is: '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'The user age is: '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;That's it for today. The journey just started, stay tune for the next post very soon. (later today or tomorrow)&lt;/p&gt;

&lt;p&gt;If you have any comments or questions please do so here or send me a message on twitter. &lt;/p&gt;

&lt;p&gt;I am new on twitter so if you want to make me happy&lt;br&gt;
Follow me: &lt;a href="https://twitter.com/justericchapman?ref_src=twsrc%5Etfw"&gt;Follow @justericchapman&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to Communicate between Components in Vue.js</title>
      <author>Sanchithasr</author>
      <pubDate>Sat, 24 Apr 2021 15:06:27 +0000</pubDate>
      <link>https://dev.to/sanchithasr/how-to-communicate-between-components-in-vue-js-kjc</link>
      <guid>https://dev.to/sanchithasr/how-to-communicate-between-components-in-vue-js-kjc</guid>
      <description>&lt;p&gt;Every framework has its own unique architecture but they have one thing in common. The entire page is divided into small components where the component has its own functionalities and UI. And sometimes, we need a way to communicate between these components.&lt;/p&gt;

&lt;p&gt;Generally, we use Vuex &lt;em&gt;(State management tool)&lt;/em&gt; to store the data and use it across components. But sometimes, we need a way to send the data from one component to another without using the Vuex store. In this article, we will learn the possible ways of achieving that.&lt;/p&gt;

&lt;p&gt;There are &lt;em&gt;five&lt;/em&gt; ways to send the data from one component to another:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-using-props-parent-to-child-communication"&gt;
  &lt;/a&gt;
  1. Using Props (Parent to Child Communication)
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#2-using-events-child-to-parent-communication"&gt;
  &lt;/a&gt;
  2. Using Events (Child to Parent Communication)
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#3-using-event-bus-communication-between-any-components"&gt;
  &lt;/a&gt;
  3. Using Event Bus (Communication between any components)
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#4-using-provideinject-parent-to-child-communication"&gt;
  &lt;/a&gt;
  4. Using provide/inject (Parent to Child Communication)
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#5-using-thisrefs-parent-to-child-communication"&gt;
  &lt;/a&gt;
  5. Using this.$refs (Parent to Child Communication)
&lt;/h4&gt;

&lt;p&gt;Let’s study them one by one and see how they work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-using-props-communication-from-parent-to-child-"&gt;
  &lt;/a&gt;
  1) Using Props (Communication from parent to child )
&lt;/h2&gt;

&lt;p&gt;One can send data from parent-to-child components using props. In the below example, we are sending the data from &lt;code&gt;parent. vue&lt;/code&gt; to &lt;code&gt;child. vue&lt;/code&gt; via the prop &lt;code&gt;message&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xlebk3Pw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AvkMroMXITfeTT4-Sj4xhIw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xlebk3Pw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AvkMroMXITfeTT4-Sj4xhIw.png" alt=""&gt;&lt;/a&gt;Child Component&lt;/p&gt;

&lt;p&gt;We have created a component that prints the &lt;code&gt;message&lt;/code&gt;. We have defined a variable in props called &lt;code&gt;message&lt;/code&gt; which we are rendering in the template.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ttzRkPbA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2A2Yruesi8xx3n3ia-rASyng.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ttzRkPbA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2A2Yruesi8xx3n3ia-rASyng.png" alt=""&gt;&lt;/a&gt;Parent Component&lt;/p&gt;

&lt;p&gt;While we nest the child component inside our parent component, we are binding the data we want to send by using the directive &lt;code&gt;v-bind&lt;/code&gt; and sending the data using props.&lt;/p&gt;

&lt;p&gt;Any time the parent changes the prop, the new value is sent to the child and rerendered.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-using-events-communication-from-child-to-parent-"&gt;
  &lt;/a&gt;
  2) Using Events (Communication from child to parent )
&lt;/h2&gt;

&lt;p&gt;This is similar to props but we are sending the data from child to parent and instead of using v-bind, we are using directive v-on for capturing.&lt;/p&gt;

&lt;p&gt;We have defined a variable in the child component which contains our message. We are sending the same to the parent component by firing an event from the child component.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;this.$emit(’name-of-the-event’, args1, args2, args3,...)&lt;/code&gt; is a way to fire the event. This is captured on the parent component using directive &lt;code&gt;v-on&lt;/code&gt;. Note that one should use the same event name they sent while capturing and can retrieve the arguments.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kcCVo4jo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AHLNvfMV9rDlRfKvCZbfOUw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kcCVo4jo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AHLNvfMV9rDlRfKvCZbfOUw.png" alt=""&gt;&lt;/a&gt;Child Component&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BMRIHyiP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2A3UbkRaQ48uF5F27euSZawQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BMRIHyiP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2A3UbkRaQ48uF5F27euSZawQ.png" alt=""&gt;&lt;/a&gt;Parent Component&lt;/p&gt;

&lt;p&gt;Any time the message in the child component changes, the new value is sent to the parent and rerendered.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-using-event-bus-communication-between-any-two-components"&gt;
  &lt;/a&gt;
  3) Using Event Bus (Communication between any two components)
&lt;/h2&gt;

&lt;p&gt;An event bus is used to communicate between any two components &lt;em&gt;(Components need not have a parent-child relationship)&lt;/em&gt;. This can be used when one needs to manually listen for events on a component instance.&lt;/p&gt;

&lt;p&gt;You can just send the data from one component using &lt;code&gt;this.$root.$emit(’name-of-emitter’, args1, args2, ...)&lt;/code&gt; and is captured using the same name like this &lt;code&gt;this.$root.$on(’name-of-emitter’, args1, args2, ...)&lt;/code&gt; in the other component.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--khRUeBdO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AGrGTB5Iqoc4kvXuqrd6ShQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--khRUeBdO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AGrGTB5Iqoc4kvXuqrd6ShQ.png" alt=""&gt;&lt;/a&gt;Child Component&lt;/p&gt;

&lt;p&gt;Note that we are using &lt;code&gt;mounted() {}&lt;/code&gt; to capture the event in &lt;em&gt;component-two. vue&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mc8FQVAx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2ADi37udfhpWNgT5F8L_o4UA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mc8FQVAx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2ADi37udfhpWNgT5F8L_o4UA.png" alt=""&gt;&lt;/a&gt;Parent Component&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-using-provideinject-parent-to-child-communication"&gt;
  &lt;/a&gt;
  4) Using Provide/Inject (Parent to child communication)
&lt;/h2&gt;

&lt;p&gt;This is used in the structure where you have deeply nested components and you only need something from the parent component in the deeply nested child.&lt;/p&gt;

&lt;p&gt;In that case, you still need to pass the prop down the whole component chain which might be annoying. For such cases, we can use the provide and inject pair.&lt;/p&gt;

&lt;p&gt;Although the example we have here is very simple, we are still sending a message from parent to child and hence it works.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AQMtj7-T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2A5GcGIjGnAigB29rEB4GQ9g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AQMtj7-T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2A5GcGIjGnAigB29rEB4GQ9g.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are using our parent component as a provider, sending the data, and injecting it into the child component using the same name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zGh5l3Ga--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2ARmHAwR9g-Tx2Y7xB0dv3Rg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zGh5l3Ga--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2ARmHAwR9g-Tx2Y7xB0dv3Rg.png" alt=""&gt;&lt;/a&gt;Child Component&lt;/p&gt;

&lt;p&gt;Parent components can serve as dependency providers for all its children, regardless of how deep the component hierarchy is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-using-thisrefs-parent-to-child-communication"&gt;
  &lt;/a&gt;
  5) Using this.$refs (Parent to Child Communication)
&lt;/h2&gt;

&lt;p&gt;This method is the least preferred way of making the communication but it is one of the options available.&lt;br&gt;
Despite the other methods, sometimes you might still need to directly access a child component. To achieve this you can assign a reference ID to the child component using the &lt;code&gt;ref&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3VWnFuFe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AV1KCRVj4sfbjmf3Cd8aJfA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3VWnFuFe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AV1KCRVj4sfbjmf3Cd8aJfA.png" alt=""&gt;&lt;/a&gt;Parent Component&lt;/p&gt;

&lt;p&gt;Here we are referencing the child component as &lt;em&gt;‘child’&lt;/em&gt; (&lt;code&gt;ref= child&lt;/code&gt;) (reference ID) and then capturing it using &lt;code&gt;this.$refs.child&lt;/code&gt;. We can access anything related to the child component in this way.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AKSRRex9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2All5GqlQ51uZ2xonYqffTgQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AKSRRex9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2All5GqlQ51uZ2xonYqffTgQ.png" alt=""&gt;&lt;/a&gt;ChildComponent&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zT-N5zYE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1500/1%2ApnRPnsSSv895CmErpaTBCw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zT-N5zYE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1500/1%2ApnRPnsSSv895CmErpaTBCw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;And that sums it up. Comment below if you know other ways of communication between components in Vue.js. Thank you.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>intermediate</category>
    </item>
    <item>
      <title>Why You Should Use TypeScript Over JavaScript in 2021 | A Simple Example</title>
      <author>Danny Adams</author>
      <pubDate>Sat, 24 Apr 2021 14:57:10 +0000</pubDate>
      <link>https://dev.to/doabledanny/why-you-should-use-typescript-over-javascript-in-2021-a-simple-example-3pfo</link>
      <guid>https://dev.to/doabledanny/why-you-should-use-typescript-over-javascript-in-2021-a-simple-example-3pfo</guid>
      <description>&lt;p&gt;This article was originally posted on &lt;a href="https://www.doabledanny.com/why-typescript-over-javascript"&gt;DoableDanny.com&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;I was recently making a meditation app called “&lt;a href="https://play.google.com/store/apps/details?id=com.doabledanny.atomicmeditation"&gt;Atomic Meditation&lt;/a&gt;” with React Native, and finally saw a strong reason to begin learning and using TypeScript over JavaScript for medium to larger size projects.&lt;/p&gt;

&lt;p&gt;Before we start, I should explain that if you’ve never used React Native before, you can still follow this article. I’ll explain what’s going on as we go. Also, if you’ve used ReactJS, React Native, for the purpose of this article, is identical!&lt;/p&gt;

&lt;p&gt;Let me show you how regular old JavaScript got me into a pickle...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-1-all-going-well"&gt;
  &lt;/a&gt;
  Day 1 – All Going Well
&lt;/h2&gt;

&lt;p&gt;In React Native there is something called Async Storage, which very simply allows you to store data permanently in your user’s mobile phone.&lt;/p&gt;

&lt;p&gt;e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;AsyncStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@key&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Async Storage only allows you to store strings, so to save a number, you would have to first convert it to a string.&lt;/p&gt;

&lt;p&gt;Below, we are using the ReactJS useState hook to declare a variable called sessionCount and set its initial state to 0, and a setSessionCount function that allows us to alter the state of sessionCount.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sessionCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSessionCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s say that the user completes a meditation session (recall that I was making a meditation app), and &lt;code&gt;sessionCount&lt;/code&gt; is keeping track of the total number of sessions that our user (who I will now refer to as Anxious Andy) has completed. We now need to add 1 to &lt;code&gt;sessionCount&lt;/code&gt;. So, &lt;code&gt;setSessionCount&lt;/code&gt; is called and 1 is added to the previous value. We then have to save this data as a string.&lt;/p&gt;

&lt;p&gt;We shall do all of this in a function, let’s call it &lt;code&gt;saveData&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// User completes a meditation…&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;saveData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setSessionCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newSessionCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="nx"&gt;AsyncStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@my_number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newSessionCount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;newSessionCount&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Everything goes well and A-little-less-anxious Andy calmly closes the app with a heightened sense of well-being.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-2-the-calm-before-the-storm"&gt;
  &lt;/a&gt;
  Day 2 – The Calm Before the Storm
&lt;/h2&gt;

&lt;p&gt;Anxious Andy retrieves a notification, reminding him it’s meditation time in 5 minutes. But he’s eager, so he goes straight to his room, pulls out his desk chair, sits comfortably (but alert), and opens up his &lt;a href="https://play.google.com/store/apps/details?id=com.doabledanny.atomicmeditation"&gt;Atomic Meditation app&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, when the app loads, Andy’s session data needs to be fetched from storage. In React, the useEffect hook allows us to execute a callback function when the component has mounted.&lt;/p&gt;

&lt;p&gt;In the callback function, we asynchronously get the data from storage and then setSessionCount to the data we get back (“1”).&lt;/p&gt;

&lt;p&gt;e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;AsyncStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@my_number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setSessionCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now Anxious Andy completes another meditation successfully, so 1 needs to be added to sessionCount to keep track of the total number of sessions that he’s completed.&lt;/p&gt;

&lt;p&gt;This new value is also saved permanently to storage – just as before.&lt;/p&gt;

&lt;p&gt;e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// User completes a meditation...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;saveData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setSessionCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newSessionCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="nx"&gt;AsyncStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@my_number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newSessionCount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;newSessionCount&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The user has now completed 2 meditation sessions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-3-the-storm"&gt;
  &lt;/a&gt;
  Day 3 – The Storm
&lt;/h2&gt;

&lt;p&gt;Anxious-no-more Andy pulls out his phone and opens the app for his 3rd straight session (he’s doing well).&lt;/p&gt;

&lt;p&gt;He wants to find out how well he’s doing, so he goes to the Stats Screen. “Ohh, lots of juicy statistics”, he murmurs to himself. “This app is awesome!”&lt;/p&gt;

&lt;p&gt;But his love for the app diminishes quickly…&lt;/p&gt;

&lt;p&gt;The app tells him he’s completed 11 sessions. He’s only completed 2!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8h6tju1W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4xzkquadfa24acjgd3qi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8h6tju1W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4xzkquadfa24acjgd3qi.png" alt="Stats screen with wrong value"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-went-wrong"&gt;
  &lt;/a&gt;
  What went wrong
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;In day 1&lt;/strong&gt;, we initially set &lt;code&gt;sessionCount&lt;/code&gt; to 0 (a number).&lt;/p&gt;

&lt;p&gt;The user completed a meditation, so we added 1. We then converted it to a string, “1”, and saved it to async storage (recall async storage only accepts strings).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In day 2&lt;/strong&gt;, we retrieved the session count from async storage and &lt;code&gt;setSessionCount&lt;/code&gt; to the value we received, “1” (a string).&lt;/p&gt;

&lt;p&gt;The user completed a meditation, so we added 1 to &lt;code&gt;sessionCount&lt;/code&gt;. But “1” + 1 in JavaScript is “11”, not 2.&lt;/p&gt;

&lt;p&gt;We forgot to convert the data we got back from storage back into an integer.&lt;/p&gt;

&lt;p&gt;The worst thing is that our program flagged no errors, this bug went freely unnoticed and caused us problems down the road. It can be difficult to find the source of problems like this!&lt;/p&gt;

&lt;p&gt;JavaScript allowed us to freely and unknowingly change the data type of a variable throughout our program.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution-typescript"&gt;
  &lt;/a&gt;
  The Solution – TypeScript
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-is-typescript"&gt;
  &lt;/a&gt;
  What is TypeScript?
&lt;/h3&gt;

&lt;p&gt;If you’re not familiar with TypeScript, basically it’s JavaScript with a few extra superpowers. Variables cannot change types – if they do, TypeScript will throw an error.&lt;/p&gt;

&lt;p&gt;Browsers can’t understand TypeScript, so all of your TypeScript files are compiled down in JavaScript files (or a single “bundle” JS file).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-use-typescript-with-react-native"&gt;
  &lt;/a&gt;
  How to use TypeScript with React Native
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://reactnative.dev/docs/typescript"&gt;Adding TypeScript to an existing React Native project&lt;/a&gt; is easy – an npm install and a couple of config files and it’s done!&lt;/p&gt;

&lt;p&gt;Now all I have to do is change my file from App.js to App.tsx to get automatic type checking.&lt;/p&gt;

&lt;p&gt;As soon as the file extension is changed, TypeScript throws a wobbler (English slang for tantrum) telling me that the &lt;code&gt;sessionCount&lt;/code&gt; variable which I initialised to a type of number is being assigned to a string:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jvMt4JPF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8goerv51uqnvzpx2s0zs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jvMt4JPF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8goerv51uqnvzpx2s0zs.png" alt="TypeScript error"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I now have to perform a check to make sure the data is not null, and then convert that data from a string to a number (using parseInt) to get rid of the error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;AsyncStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@my_number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setSessionCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;TypeScript forces us to write better, more robust code. Awesome!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#best-resource-to-learn-typescript"&gt;
  &lt;/a&gt;
  Best resource to learn TypeScript
&lt;/h3&gt;

&lt;p&gt;I learned TypeScript by following &lt;a href="https://www.youtube.com/watch?v=2pZmKW9-I_k&amp;amp;list=PL4cUxeGkcC9gUgr39Q_yD6v-bSyMwKPUI&amp;amp;ab_channel=TheNetNinja"&gt;The Net Ninja’s TypeScript series&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If I need to learn a new language or framework, my first call-to-action is to check if the Net Ninja has done a series on it. He's superb!&lt;/p&gt;

&lt;p&gt;Also, &lt;a href="https://www.typescriptlang.org/"&gt;the official TypeScript docs&lt;/a&gt; are pretty good.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We can now sleep a little easier knowing that our variables can’t freely change type throughout our program. Thanks TypeScript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; JavaScript is still great for smaller projects. But for medium to large projects, or small projects that have the potential to scale, TypeScript is probably a worthy investment. And if you know JavaScript, learning TypeScript isn’t difficult.&lt;/p&gt;

&lt;p&gt;If you enjoyed this article, then you can say thanks by checking out &lt;a href="https://play.google.com/store/apps/details?id=com.doabledanny.atomicmeditation"&gt;my Atomic Meditation app&lt;/a&gt;. Meditation is a great way to quieten the mind and cut away anxiety. The app is inspired by the bestselling book Atomic Habits, and is based on doing at least 2 minutes of meditation every day to develop a daily meditation habit. Please leave me a review if you enjoy it, it helps!&lt;/p&gt;

&lt;p&gt;Have a great day :)&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>react</category>
      <category>reactnative</category>
    </item>
    <item>
      <title>Creating a SaaS in 2021 🚀💰</title>
      <author>Tony Lea</author>
      <pubDate>Sat, 24 Apr 2021 14:43:30 +0000</pubDate>
      <link>https://dev.to/tnylea/creating-a-saas-in-2021-3am1</link>
      <guid>https://dev.to/tnylea/creating-a-saas-in-2021-3am1</guid>
      <description>&lt;p&gt;Many developers have dreams of creating their own profitable Software as a Service. Mainly because it provides you with the freedom to work on the things you are super passionate about. It's also a good feeling to make money working on your own stuff.&lt;/p&gt;

&lt;p&gt;Each step you take toward building your SaaS will eventually lead to a successful product as long as you keep pushing forward. Eventually, you'll be making money to continue improving your product and dominating your niche 😉.&lt;/p&gt;

&lt;p&gt;In this post, I want to highlight &lt;strong&gt;five&lt;/strong&gt; actionable steps you can take towards building a SaaS application today!&lt;/p&gt;

&lt;p&gt;Let's dive into it. 😉 &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-craft-your-idea"&gt;
  &lt;/a&gt;
  1. Craft Your Idea 💡
&lt;/h1&gt;

&lt;p&gt;Coming up with an Idea for your SaaS is pretty fun 😃. Here are a few ways you can find an idea if you do not have one.&lt;/p&gt;

&lt;p&gt;One of the best ways to find an idea is by solving your own problem. Is there a repetitive task that you constantly find yourself doing? Many other people may be doing the same repetitive task, so if you can find a way to automate this and save people time, you may be very close to striking gold.&lt;/p&gt;

&lt;p&gt;Next, if there is a service with many customers yet you feel like many of their services are too complex, try creating a simplified version of that service, and you will start creating some buzz 🐝.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Need help with inspiration?&lt;/em&gt; Visit a few of these resources below for inspiration on finding an idea for your SAAS.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dribbble.com"&gt;Dribbble&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://producthunt.com"&gt;ProductHunt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://indiehackers.com"&gt;IndieHackers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://land-book.com"&gt;LandBook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.designspiration.com"&gt;DesignInspiration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#2-design-a-simple-logo"&gt;
  &lt;/a&gt;
  2. Design a simple logo 🧑‍🎨
&lt;/h1&gt;

&lt;p&gt;Logo design is pretty simple, and the logo you come up with in the early stages may change down the road. Don't spend too much time on this step ⏳.&lt;/p&gt;

&lt;p&gt;Here's a good thing to keep in mind when designing your logo. &lt;strong&gt;SIMPLICITY&lt;/strong&gt;. That's right! Keeping it simple and clean will help your brand looking memorable and professional. &lt;/p&gt;

&lt;p&gt;Sometimes all you need is a simple &lt;strong&gt;bold letter&lt;/strong&gt;. Facebook has the bold letter &lt;code&gt;f&lt;/code&gt;. ProductHunt has a simple letter &lt;code&gt;p&lt;/code&gt; inside a circle. Simplicity is key 🔑.&lt;/p&gt;

&lt;p&gt;You may also find it helpful to check out &lt;a href="https://thenounproject.com"&gt;TheNounProject&lt;/a&gt;. Slap a simple icon next to your SaaS name, and BOOM 💥 , you have yourself a simple and professional logo.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-find-your-domain"&gt;
  &lt;/a&gt;
  3. Find your domain 🔡
&lt;/h1&gt;

&lt;p&gt;Finding the right domain may seem difficult, but it's not. If you are having trouble finding a domain, here are some tricks that you may want to follow.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Try using some new TLD's such as &lt;code&gt;.co&lt;/code&gt;, &lt;code&gt;.so&lt;/code&gt;, &lt;code&gt;.io&lt;/code&gt;, &lt;code&gt;.dev&lt;/code&gt;, &lt;code&gt;.app&lt;/code&gt;, and many others.&lt;/li&gt;
&lt;li&gt;Add a filler word to the beginning or end. Try adding words like &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;use&lt;/code&gt;, &lt;code&gt;hello&lt;/code&gt; to the beginning of your domain. Try adding words like &lt;code&gt;now&lt;/code&gt;, &lt;code&gt;hq&lt;/code&gt;, &lt;code&gt;app&lt;/code&gt; to the end of your domain.&lt;/li&gt;
&lt;li&gt;Try to make it simple and memorable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Find something you are happy with and commit to it. If your app starts making millions, you can buy a better domain later. This happened with Basecamp; their name used to be basecamphq.com, and after they purchased basecamp.com. Clicky.com used to be GetClicky.com, and there are so many others that have done the same.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-build-your-saas-with-wave"&gt;
  &lt;/a&gt;
  4. Build your SaaS with Wave ⚒️
&lt;/h1&gt;

&lt;p&gt;When you are ready to start building your SaaS application and are familiar with Laravel, you may want to reach for a SaaS starter kit such as &lt;a href="https://devdojo.com/wave"&gt;Wave&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/PS-31xkcv8M"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Wave has all the main building blocks you will need for your SaaS, including Authentication, Billing, Plans, User Profiles, and so much more. Be sure to check out the &lt;a href="https://devdojo.com/wave/videos"&gt;official videos page&lt;/a&gt; to learn more about how to use Wave.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/thedevdojo/wave"&gt;Wave is 100% open source&lt;/a&gt; and free to use. If you would like to support the project and gain access to a few premium tools, you may want to consider upgrading to a &lt;a href="https://devdojo.com/pro"&gt;Pro Account&lt;/a&gt; 😉.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-design-your-saas-with-tails"&gt;
  &lt;/a&gt;
  5. Design your SaaS with Tails 🎨
&lt;/h1&gt;

&lt;p&gt;Designing your SaaS is easier than ever before with all the cool design tools available.&lt;/p&gt;

&lt;p&gt;If you are using &lt;a href="https://devdojo.com/wave"&gt;Wave&lt;/a&gt; to build your SaaS application, then you'll be able to design with ease using &lt;a href="https://tailwindcss.com"&gt;TailwindCSS&lt;/a&gt;. There is also a premium tool you can gain access to with a Pro account, called &lt;a href="https://devdojo.com/tails"&gt;Tails&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devdojo.com/tails"&gt;Tails is a Drag and Drop page builder&lt;/a&gt; that can help you craft the landing page of your dreams. I've created a quick video about how you can make/design your own SaaS using Tails in under 10 minutes. Check out the video below 🍿:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/w_rSMEeqhK0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Building your own SaaS is a Journey on its own. There can be times when it seems challenging, and you feel like you're not making much traction, but I guarantee that if you stay persistent, you will always end up on top.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You will never go down if you never give up.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Learning is all part of the process of growing a successful SaaS. Here at the DevDojo, we are building tools to help you as you embark on your Journey of SaaS creation. You can get started by using our awesome SaaS starter kit &lt;a href="https://devdojo.com/wave"&gt;Wave&lt;/a&gt;, and you can design your SaaS by using &lt;a href="https://devdojo.com/tails"&gt;Tails&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You have the potential to create amazing things. So, be sure to keep building, keep creating, and enjoy the Journey. ⛰️&lt;/p&gt;

</description>
      <category>saas</category>
      <category>indiehacker</category>
    </item>
    <item>
      <title>How To Pass AI-900 Azure AI Fundamentals</title>
      <author>omniasalah276</author>
      <pubDate>Sat, 24 Apr 2021 14:38:51 +0000</pubDate>
      <link>https://dev.to/omniasalah276/how-to-pass-ai-900-azure-ai-fundamentals-55n7</link>
      <guid>https://dev.to/omniasalah276/how-to-pass-ai-900-azure-ai-fundamentals-55n7</guid>
      <description>&lt;p&gt;Here is my experience in passing AI-900 Azure, I hope it will be useful.&lt;/p&gt;

&lt;p&gt;I am gonna to talk about the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is AI-900 Test ? &lt;/li&gt;
&lt;li&gt;How to book for the Test ?&lt;/li&gt;
&lt;li&gt;Content of the Test &lt;/li&gt;
&lt;li&gt;Resources I used&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-ai900-azure-microsoft-certification-"&gt;
  &lt;/a&gt;
  What Is AI-900 Azure Microsoft Certification ?
&lt;/h2&gt;

&lt;p&gt;Basically, this certification is designed to go over the fundamentals of machine learning and artificial intelligence in Azure, its good opportunity for both technical and non-technical backgrounds, As you don't need to have data science or software engineering experience but it will be much more helpful if you have some programming knowledge or experience. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-book-for-the-test-"&gt;
  &lt;/a&gt;
  How To Book For The Test ?
&lt;/h2&gt;

&lt;p&gt;you can book for the test &lt;a href="https://docs.microsoft.com/en-us/learn/certifications/exams/ai-900"&gt;here&lt;/a&gt;, till now the exam price is about 99 USD, the exam price varies from country to country, you can check your own.&lt;br&gt;
For me I got a scholarship to take the exam from the Ministry of Communications and Technology here in Egypt. We took the exam in &lt;a href="https://certiport.pearsonvue.com/"&gt;Certiport platform&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#content-of-the-test"&gt;
  &lt;/a&gt;
  Content Of The Test
&lt;/h2&gt;

&lt;p&gt;The AI-900 exam tests knowledge in five focus areas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Describe AI workloads and considerations (15-20%).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Identify features of common AI workloads.&lt;/li&gt;
&lt;li&gt;Identify guiding principles for responsible AI.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Describe fundamental principles of machine learning on Azure (30-35%).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Identify common machine learning types.&lt;/li&gt;
&lt;li&gt;Describe core machine learning concepts.&lt;/li&gt;
&lt;li&gt;Identify core tasks in creating a machine learning solution.&lt;/li&gt;
&lt;li&gt;Describe capabilities of no-code machine learning with Azure Machine Learning studio.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Describe features of computer vision workloads on Azure (15-20%).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Identify common types of computer vision solution.&lt;/li&gt;
&lt;li&gt;Identify Azure tools and services for computer vision tasks.&lt;/li&gt;
&lt;li&gt;Describe features of Natural Language Processing (NLP) 
workloads on Azure (15-20%).&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Describe features of Natural Language Processing (NLP) workloads on&lt;br&gt;
Azure (15-20%)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Identify features of common NLP Workload Scenarios.&lt;/li&gt;
&lt;li&gt;Identify Azure tools and services for NLP workloads.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Describe features of conversational AI workloads on Azure (15-20%).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Identify common use cases for conversational AI.&lt;/li&gt;
&lt;li&gt;Identify Azure services for conversational AI.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more illustration about how they are assessing those topics go &lt;a href="https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE4wGpB"&gt;here&lt;/a&gt;.&lt;br&gt;
Note: Sometimes they update the content of the exam. &lt;/p&gt;

&lt;p&gt;The test contains between 50 to 60 MCQ, T/F, and drag &amp;amp; drop questions and has a 60-minute time limit. The total score is 1000 you should at least score 700 to pass the exam.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources-i-used"&gt;
  &lt;/a&gt;
  Resources I used
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/learn/certifications/exams/ai-900"&gt;Microsoft Learning path&lt;/a&gt;&lt;br&gt;
I used the for steps about how to interact with azure.&lt;br&gt;
I recommend to sign up in &lt;a href="https://azure.microsoft.com/en-us/free/students/"&gt;Azure for Student&lt;/a&gt; to apply those steps.&lt;br&gt;
In general their Learning path is very good and almost covers everything.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://medium.com/bb-tutorials-and-thoughts/200-practice-questions-for-azure-ai-900-fundamentals-exam-e981d28ce91d"&gt;200 Practice Questions For Azure AI-900 Fundamentals Exam&lt;/a&gt;&lt;br&gt;
You can use it to summarize and make sure that you cover all about the theoretical part. For me I loved the way of putting those info in the form of questions and answers, it was very helpful for me and make the process of recall very easy.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Training Exams and examples&lt;br&gt;
I used this &lt;a href="https://www.itexams.com/info/AI-900"&gt;test&lt;/a&gt; and that &lt;a href="https://www.youtube.com/watch?v=fQhgRR_Vtus"&gt;video&lt;/a&gt; for testing myself. &lt;br&gt;
Also you can see a real exam from &lt;a href="https://pilegypt-my.sharepoint.com/personal/nh1_pilegypt_net/_layouts/15/onedrive.aspx?id=%2Fpersonal%2Fnh1%5Fpilegypt%5Fnet%2FDocuments%2FNew%20folder%2FAI%2D900%202%2FAI%2D900%2Emp4&amp;amp;parent=%2Fpersonal%2Fnh1%5Fpilegypt%5Fnet%2FDocuments%2FNew%20folder%2FAI%2D900%202&amp;amp;originalPath=aHR0cHM6Ly9waWxlZ3lwdC1teS5zaGFyZXBvaW50LmNvbS86djovZy9wZXJzb25hbC9uaDFfcGlsZWd5cHRfbmV0L0VZTTNCaTMwdjRCTnUzRjZkNkRBNkE0QnpfY1dRUlA2TkZvc1VoWVhBYUM2WGc%5FcnRpbWU9X0NIcUVpMEgyVWc"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It took me three days for preparing for the Exam. If you study well, you won't have any problem in passing the exam.&lt;br&gt;
Good luck!&lt;/p&gt;

</description>
      <category>azure</category>
      <category>ai</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>CSS Battle #7 level 33</title>
      <author>Yash Harkhani</author>
      <pubDate>Sat, 24 Apr 2021 14:21:08 +0000</pubDate>
      <link>https://dev.to/yashharkhani/css-battle-7-level-33-3nfk</link>
      <guid>https://dev.to/yashharkhani/css-battle-7-level-33-3nfk</guid>
      <description>&lt;p&gt;Link: &lt;a href="https://cssbattle.dev/play/33"&gt;https://cssbattle.dev/play/33&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p a&amp;gt;&amp;lt;p b&amp;gt;
&amp;lt;style&amp;gt;
  *{
    background: #1A4341;
    position: fixed
  }
  p[a]{
    width: 75;
    height: 150;
    background: #998235;
    margin: 67 117;
    border-radius: 100px 0 0 100px
  }p[a]:before{
    content: "";
    background: #0B2429;
    width: 30;
    height: 30;
    border-radius: 100%;
    position: absolute;
    margin: 30
  }
  p[b]{
    width: 100;
    height: 100;
    background: #F3AC3C;
    border-radius: 0 100px 0 0;
    margin: 42 192
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>css</category>
      <category>html</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Custom React Hook - useFetch</title>
      <author>Andrew</author>
      <pubDate>Sat, 24 Apr 2021 14:21:04 +0000</pubDate>
      <link>https://dev.to/techcheck/custom-react-hook-usefetch-eid</link>
      <guid>https://dev.to/techcheck/custom-react-hook-usefetch-eid</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why-usefetch"&gt;
  &lt;/a&gt;
  Why useFetch?
&lt;/h2&gt;

&lt;p&gt;It's very common to fetch data when the user goes to a certain page. We also use common logic when fetching that data. &lt;/p&gt;

&lt;p&gt;There's also a fair amount of boilerplate/logic that crowds our components and it's not very DRY (Don't Repeat Yourself).&lt;/p&gt;

&lt;p&gt;These are all good reasons to make a custom hook. We can outsource that boilerplate/logic into one separate file. That file will hold the function (hook) which will return for us what we need to use in our components. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-old-way"&gt;
  &lt;/a&gt;
  The Old Way
&lt;/h2&gt;

&lt;p&gt;In this example, I'll use the &lt;code&gt;useState&lt;/code&gt; hook to keep track of the loading state, any error, and the data. I'll use the &lt;code&gt;useEffect&lt;/code&gt; hook to run all of that code. Lastly, I'm using axios to fetch the data, and a cancel token to cancel any unfinished requests that we don't need anymore.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;//App.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setQuote&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;loading...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;setQuote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CancelToken&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://api.quotable.io/random&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;cancelToken&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;setQuote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;An error occurred. Awkward..&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;fetchQuote&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Fetch Quote&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;quote&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;"&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;quote&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;"&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's a lot of code. Let's move most of it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-new-way"&gt;
  &lt;/a&gt;
  The New Way
&lt;/h2&gt;

&lt;p&gt;We'll create another file called &lt;code&gt;useFetch.js&lt;/code&gt;. You want to start the name of a custom hook with "use" so that React knows to treat it like a hook.&lt;/p&gt;

&lt;p&gt;Let's copy over the import statements, all 3 useStates, and the useEffect function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;//useFetch.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;loading...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CancelToken&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;cancelToken&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="c1"&gt;//checking for multiple responses for more flexibility &lt;/span&gt;
          &lt;span class="c1"&gt;//with the url we send in.&lt;/span&gt;
          &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;An error occurred. Awkward..&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may have noticed some changes. First of all, the function (which is our hook), is named useFetch. It receives a parameter which is the url we want to get data from.&lt;/p&gt;

&lt;p&gt;We also changed &lt;code&gt;setQuote&lt;/code&gt; to &lt;code&gt;setData&lt;/code&gt;, making it more versatile. Notice that we also check for multiple responses to make it more flexible as well.&lt;/p&gt;

&lt;p&gt;Lastly, our useFetch function (hook) returns our data, loading, and any error.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I put those in an object so we can use &lt;em&gt;object&lt;/em&gt; destructuring when accessing those in our component. That way, the order doesn't matter when we destructure them, and we can rename them if we want. I'll show you that next.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#using-usefetch-in-our-component"&gt;
  &lt;/a&gt;
  Using useFetch in Our Component
&lt;/h2&gt;

&lt;p&gt;So, back in our App component, we'll import our useFetch hook from &lt;code&gt;useFetch.js&lt;/code&gt;, and pass in the url we want to fetch data from. We'll use object destructuring to access what we need. Lastly, we'll rename data to quote.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./useFetch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://api.quotable.io/random&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;quote&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;"&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;quote&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;"&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Muuuuuch cleaner 😎.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Custom hooks are very useful for cleaning up your code. You can use React hooks inside of your custom hooks (they're all functions after all! 👍). You can encapsulate a lot of repetitive logic, then return what you need from the custom hook.&lt;/p&gt;

&lt;p&gt;I have a YouTube video if you want to see it in action.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/T_yIz6wUY8c"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you like learning about similar topics, feel free to check out my &lt;a href="https://www.youtube.com/channel/UCD0JOhEl8HvPowpg8Ri3CvA"&gt;YouTube&lt;/a&gt; or &lt;a href="https://www.instagram.com/techcheck__/"&gt;Instagram&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hope this helped somebody and thanks for reading!&lt;/p&gt;

&lt;p&gt;-Andrew&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Solution: Critical Connections in a Network</title>
      <author>seanpgallivan</author>
      <pubDate>Sat, 24 Apr 2021 14:17:36 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-critical-connections-in-a-network-51g0</link>
      <guid>https://dev.to/seanpgallivan/solution-critical-connections-in-a-network-51g0</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/critical-connections-in-a-network/discuss/1174196"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-1192-hard-critical-connections-in-a-network"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/critical-connections-in-a-network/"&gt;Leetcode Problem #1192 (&lt;em&gt;Hard&lt;/em&gt;): Critical Connections in a Network&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are n servers numbered from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;n-1&lt;/code&gt; connected by undirected server-to-server connections forming a network where &lt;code&gt;connections[i] = [a, b]&lt;/code&gt; represents a connection between servers &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;. Any server can reach any other server directly or indirectly through the network.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;critical connection&lt;/em&gt; is a connection that, if removed, will make some server unable to reach some other server.&lt;/p&gt;

&lt;p&gt;Return all critical connections in the network in any order.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;[[1,3]]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;[[3,1]] is also accepted.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Visual:&lt;/td&gt;
&lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rKZ_W9rM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4kxe9alzsz7b95v3o7v3.png" alt="Example 1 Visual"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= n &amp;lt;= 10^5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n-1 &amp;lt;= connections.length &amp;lt;= 10^5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connections[i][0] != connections[i][1]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;There are no repeated connections.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;If we think of the network and its connections like an undirected graph and its edges, then a critical connection, as defined by this problem, is the same as a bridge in the graph. To find out which edges are bridges, we can employ &lt;strong&gt;Tarjan's Bridge-Finding Algorithm&lt;/strong&gt; (&lt;strong&gt;TBFA&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;TBFA is a bit like a combination of a &lt;strong&gt;depth-first search&lt;/strong&gt; (&lt;strong&gt;DFS&lt;/strong&gt;) approach with &lt;strong&gt;recursion&lt;/strong&gt; and a &lt;strong&gt;union-find&lt;/strong&gt;. IN TBFA, we do a recursive DFS on our graph and for each node we keep track of the earliest node that we can circle back around to reach. By doing this, we can identify whether a given edge is a bridge because the far node doesn't lead back to any other earlier node.&lt;/p&gt;

&lt;p&gt;To implement our TBFA, the first thing we have to do is to construct an &lt;strong&gt;edge map&lt;/strong&gt; (&lt;strong&gt;edgeMap&lt;/strong&gt;) from the &lt;strong&gt;connections&lt;/strong&gt; list. Each key in our edge map should correspond to a specific node, and its value should be an array of each adjacent node to the key node.&lt;/p&gt;

&lt;p&gt;We'll also need separate arrays to store the discovery time (&lt;strong&gt;disc&lt;/strong&gt;) and the lowest future node (&lt;strong&gt;low&lt;/strong&gt;) for each node, as well as a &lt;strong&gt;time&lt;/strong&gt; counter to use with &lt;strong&gt;disc&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For our recursive DFS helper (&lt;strong&gt;dfs&lt;/strong&gt;), each newly-visited node should set its initial value for both &lt;strong&gt;disc&lt;/strong&gt; and &lt;strong&gt;low&lt;/strong&gt; to the current value of &lt;strong&gt;time&lt;/strong&gt; before &lt;strong&gt;time&lt;/strong&gt; is incremented. (&lt;em&gt;Note: If we start &lt;strong&gt;time&lt;/strong&gt; at &lt;strong&gt;1&lt;/strong&gt; instead of &lt;strong&gt;0&lt;/strong&gt;, we can use either &lt;strong&gt;disc&lt;/strong&gt; or &lt;strong&gt;low&lt;/strong&gt; as a visited array, rather than having to keep a separate array for the purpose. Any non-zero value in the chosen array will then represent a visited state for the given node.&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Then we recursively call &lt;strong&gt;dfs&lt;/strong&gt; on each of the unvisited adjacent nodes (&lt;strong&gt;next&lt;/strong&gt;) of the current node (&lt;strong&gt;curr&lt;/strong&gt;). If one of the possible &lt;strong&gt;next&lt;/strong&gt; nodes is an earlier node (&lt;strong&gt;disc[next] &amp;lt; curr[low]&lt;/strong&gt;), then we've found a loop and we should update the &lt;strong&gt;low&lt;/strong&gt; value for the current node. As each layer of the recursive function backtracks, it will propagate this value of &lt;strong&gt;low&lt;/strong&gt; back down the chain.&lt;/p&gt;

&lt;p&gt;If, after backtracking, the value of &lt;strong&gt;low[next]&lt;/strong&gt; is still higher than &lt;strong&gt;low[curr]&lt;/strong&gt;, then there is no looped connection, meaning that the edge between &lt;strong&gt;curr&lt;/strong&gt; and &lt;strong&gt;next&lt;/strong&gt; is a bridge, so we should add it to our answer array (&lt;strong&gt;ans&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;Once the &lt;strong&gt;dfs&lt;/strong&gt; helper function has completed its traversal, we can &lt;strong&gt;return ans&lt;/strong&gt;.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Implementation:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Javascript strangely runs significantly faster with a regular object rather than a Map().&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;criticalConnections&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;edgeMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;edgeMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;edgeMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;edgeMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;disc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Uint32Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;low&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Uint32Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dfs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;disc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;low&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;edgeMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;disc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nx"&gt;low&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;low&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;low&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nx"&gt;low&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;low&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;disc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;low&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;disc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="nx"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;criticalConnections&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;
        &lt;span class="n"&gt;edgeMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;edgeMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;edgeMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;disc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;disc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;edgeMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;disc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                    &lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;disc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;disc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                    &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;disc&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;edgeMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;criticalConnections&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;connections&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;disc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt;
            &lt;span class="n"&gt;edgeMap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;());&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;connections&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;edgeMap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)).&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
            &lt;span class="n"&gt;edgeMap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)).&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;dfs&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;disc&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;edgeMap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;disc&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="n"&gt;disc&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;disc&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; 
                &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;asList&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;criticalConnections&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;disc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;edgeMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]].&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="n"&gt;edgeMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]].&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;disc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;edgeMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;disc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;disc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;disc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; 
                &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nl"&gt;private:&lt;/span&gt;
    &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;disc&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;unordered_map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;edgeMap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
  </channel>
</rss>
