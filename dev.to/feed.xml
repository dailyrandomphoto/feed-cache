<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Setup Vue3 with Element UI</title>
      <author>Becca Bycott</author>
      <pubDate>Sun, 17 Jan 2021 08:11:56 +0000</pubDate>
      <link>https://dev.to/beccabycott/setup-vue3-with-element-ui-54fe</link>
      <guid>https://dev.to/beccabycott/setup-vue3-with-element-ui-54fe</guid>
      <description>&lt;p&gt;Element UI is my favorite Vue UI library. A popular top-class component library with more than 50K Github stars. And they already have &lt;a href="https://dev.to/iamkun/element-ui-for-vue-3-0-is-coming-4o6o"&gt;a version that works with Vue3&lt;/a&gt; - Element Plus.&lt;/p&gt;

&lt;p&gt;I'd like to share how to set up a Vue3 project with &lt;a href="https://github.com/element-plus/element-plus"&gt;Element Plus&lt;/a&gt; using Vue CLI.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-the-latest-version-of-vue-cli" class="anchor"&gt;
  &lt;/a&gt;
  Install the latest version of Vue CLI
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g @vue/cli
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-a-project-with-vue-cli" class="anchor"&gt;
  &lt;/a&gt;
  Create a project with Vue CLI
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vue create my-app
// And then select Vue 3 option.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8GEaZ0H1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vhyq695ezpvqpg4u0gk0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8GEaZ0H1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vhyq695ezpvqpg4u0gk0.png" alt="Vue CLI VUE3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-element-plus" class="anchor"&gt;
  &lt;/a&gt;
  Install Element Plus
&lt;/h3&gt;

&lt;p&gt;You can add Element Plus to your project simply via its Vue CLI plugin.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd my-app
vue add element-plus
npm run serve
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aY0k8qNV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ujezudjh90xxlopmvbe1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aY0k8qNV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ujezudjh90xxlopmvbe1.png" alt="Element Plus Vue CLI plugin"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you can use Element Plus components in your project like the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;el-button type="primary"&amp;gt; Element UI &amp;lt;/el-button&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jx5CA-8c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vq2uo99zp2djyl1auqht.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jx5CA-8c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vq2uo99zp2djyl1auqht.png" alt="Element Plus with Vue 3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out this repository with this configuration done: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/element-plus/element-plus-starter"&gt;https://github.com/element-plus/element-plus-starter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it!&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to securely store passwords?</title>
      <author>TECH SCHOOL</author>
      <pubDate>Sat, 16 Jan 2021 22:11:59 +0000</pubDate>
      <link>https://dev.to/techschoolguru/how-to-securely-store-passwords-3cg7</link>
      <guid>https://dev.to/techschoolguru/how-to-securely-store-passwords-3cg7</guid>
      <description>&lt;p&gt;Hello everyone, welcome back to the backend master class!&lt;/p&gt;

&lt;p&gt;In this lecture, we’re gonna learn how to securely store users’ password in the database.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/B3xnJI2lHmc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Here's:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Link to the &lt;a href="https://bit.ly/backendmaster"&gt;full series playlist on Youtube&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;And its &lt;a href="https://github.com/techschool/simplebank"&gt;Github repository&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-store-password" class="anchor"&gt;
  &lt;/a&gt;
  How to store password
&lt;/h2&gt;

&lt;p&gt;As you already know, we should never ever store naked passwords! So the idea is to hash it first, and only store that hash value.&lt;/p&gt;

&lt;p&gt;Basically, the password will be hashed using &lt;code&gt;brypt&lt;/code&gt; hashing function to produce a hash value.&lt;/p&gt;

&lt;p&gt;Besides the input password, &lt;code&gt;bcrypt&lt;/code&gt; requires a &lt;code&gt;cost&lt;/code&gt; parameter, which will decide the number of key expansion rounds or iterations of the algorithm.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Bcrypt&lt;/code&gt; also generates a random &lt;code&gt;salt&lt;/code&gt; to be used in those iterations, which will help protect against the &lt;a href="https://en.wikipedia.org/wiki/Rainbow_table"&gt;rainbow table attack&lt;/a&gt;. Because of this random &lt;code&gt;salt&lt;/code&gt;, the algorithm will give you a completely different output hash value even if the same input password is provided.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;cost&lt;/code&gt; and &lt;code&gt;salt&lt;/code&gt; will also be added to the hash to produce the final hash string, which looks something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t6BmEVLk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bv47cvavn5egi1fmjp72.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t6BmEVLk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bv47cvavn5egi1fmjp72.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this hash string, there are 4 components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first part is the &lt;code&gt;hash algorithm identifier&lt;/code&gt;. &lt;code&gt;2A&lt;/code&gt; is the identifier of the &lt;code&gt;bcrypt&lt;/code&gt; algorithm.&lt;/li&gt;
&lt;li&gt;The second part is the &lt;code&gt;cost&lt;/code&gt;. In this case, the cost is &lt;code&gt;10&lt;/code&gt;, which means there will be &lt;code&gt;2^10 = 1024&lt;/code&gt; rounds of key expansion.&lt;/li&gt;
&lt;li&gt;The third part is the &lt;code&gt;salt&lt;/code&gt; of length &lt;code&gt;16 bytes&lt;/code&gt;, or &lt;code&gt;128 bits&lt;/code&gt;. It is encoded using &lt;code&gt;base64&lt;/code&gt; format, which will generate a string of &lt;code&gt;22&lt;/code&gt; characters.&lt;/li&gt;
&lt;li&gt;Finally, the last part is the &lt;code&gt;24 bytes&lt;/code&gt; hash value, encoded as &lt;code&gt;31&lt;/code&gt; characters.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these 4 parts are concatenated together into a single hash string, and it is the string that we will store in the database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K4hW1Hh1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0q79j58zhd2totxlgabn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K4hW1Hh1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0q79j58zhd2totxlgabn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So that’s the process of hashing users’ password!&lt;/p&gt;

&lt;p&gt;But when users login, how can we verify that the password that they entered is correct or not?&lt;/p&gt;

&lt;p&gt;Well, first we have to find the &lt;code&gt;hashed_password&lt;/code&gt; stored in the DB by &lt;code&gt;username&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then we use the &lt;code&gt;cost&lt;/code&gt; and &lt;code&gt;salt&lt;/code&gt; of that &lt;code&gt;hashed_password&lt;/code&gt; as the arguments to hash the &lt;code&gt;naked_password&lt;/code&gt; users just entered with &lt;code&gt;bcrypt&lt;/code&gt;. The output of this will be another hash value.&lt;/p&gt;

&lt;p&gt;Then all we have to do is to compare the 2 hash values. If they’re the same, then the password is correct.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UoHLvJ30--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x9wk0fa5xai45ucuputp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UoHLvJ30--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x9wk0fa5xai45ucuputp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alright, now let’s see how to implement these logics in &lt;code&gt;Golang&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implement-functions-to-hash-and-compare-passwords" class="anchor"&gt;
  &lt;/a&gt;
  Implement functions to hash and compare passwords
&lt;/h2&gt;

&lt;p&gt;In the &lt;a href="https://dev.to/techschoolguru/how-to-handle-db-errors-in-golang-correctly-11ek"&gt;previous lecture&lt;/a&gt;, we have generated the code to create a new user in the database. And &lt;code&gt;hashed_password&lt;/code&gt; is one of the input parameters of the &lt;code&gt;CreateUser()&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;CreateUserParams&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Username&lt;/span&gt;       &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"username"`&lt;/span&gt;
    &lt;span class="n"&gt;HashedPassword&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"hashed_password"`&lt;/span&gt;
    &lt;span class="n"&gt;FullName&lt;/span&gt;       &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"full_name"`&lt;/span&gt;
    &lt;span class="n"&gt;Email&lt;/span&gt;          &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"email"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Queries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;CreateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="n"&gt;CreateUserParams&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QueryRowContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HashedPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;
    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HashedPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PasswordChangedAt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreatedAt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Also, in this &lt;code&gt;createRandomUser()&lt;/code&gt; function of the unit test in &lt;code&gt;db/sqlc/user_test.go&lt;/code&gt;, we’re using a simple &lt;code&gt;"secret"&lt;/code&gt; string for the &lt;code&gt;hash_password&lt;/code&gt; field, which doesn’t reflect the real correct values this field should hold.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;createRandomUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;CreateUserParams&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomOwner&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;HashedPassword&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"secret"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomOwner&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomEmail&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So today we’re gonna update it to use a real hash string.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hash-password-function" class="anchor"&gt;
  &lt;/a&gt;
  Hash password function
&lt;/h3&gt;

&lt;p&gt;First, let’s create a new file &lt;code&gt;password.go&lt;/code&gt; inside the &lt;code&gt;util&lt;/code&gt; package. In this file, I’m gonna define a new function: &lt;code&gt;HashPassword()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It will take a &lt;code&gt;password&lt;/code&gt; string as input, and will return a &lt;code&gt;string&lt;/code&gt; or an &lt;code&gt;error&lt;/code&gt;. This function will compute the &lt;code&gt;bcrypt&lt;/code&gt; hash string of the input &lt;code&gt;password&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// HashPassword returns the bcrypt hash of the password&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;HashPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;bcrypt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GenerateFromPassword&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;bcrypt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultCost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"failed to hash password: %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this function, we call &lt;code&gt;bcrypt.GenerateFromPassword()&lt;/code&gt;. It requires 2 input parameters: the &lt;code&gt;password&lt;/code&gt; of type &lt;code&gt;[]byte&lt;/code&gt; slice, and a &lt;code&gt;cost&lt;/code&gt; of type &lt;code&gt;int&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So we have to convert the input &lt;code&gt;password&lt;/code&gt; from &lt;code&gt;string&lt;/code&gt; to &lt;code&gt;[]byte&lt;/code&gt; slice. &lt;/p&gt;

&lt;p&gt;For &lt;code&gt;cost&lt;/code&gt;, I use the &lt;code&gt;bcrypt.DefaultCost&lt;/code&gt; value, which is &lt;code&gt;10&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The output of this function will be the &lt;code&gt;hashedPassword&lt;/code&gt; and an &lt;code&gt;error&lt;/code&gt;. If the &lt;code&gt;error&lt;/code&gt; is &lt;code&gt;not nil&lt;/code&gt;,  then we just return an empty hashed string, and wrap the &lt;code&gt;error&lt;/code&gt; with a message saying: &lt;code&gt;"failed to hash password"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Otherwise, we convert the &lt;code&gt;hashedPassword&lt;/code&gt; from &lt;code&gt;[]byte&lt;/code&gt; slice to &lt;code&gt;string&lt;/code&gt;, and return it with a &lt;code&gt;nil&lt;/code&gt; error.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#compare-passwords-function" class="anchor"&gt;
  &lt;/a&gt;
  Compare passwords function
&lt;/h3&gt;

&lt;p&gt;Next, we will write another function to check if a password is correct or not: &lt;code&gt;CheckPassword()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This function will take 2 input arguments: a &lt;code&gt;password&lt;/code&gt; to check, and the &lt;code&gt;hashedPassword&lt;/code&gt; to compare. It will return an &lt;code&gt;error&lt;/code&gt; as output.&lt;/p&gt;

&lt;p&gt;Basically, this function will check if the input &lt;code&gt;password&lt;/code&gt; is correct when comparing to the provided &lt;code&gt;hashedPassword&lt;/code&gt; or not.&lt;/p&gt;

&lt;p&gt;As the standard &lt;code&gt;bcrypt&lt;/code&gt; package has already implemented this feature, all we have to do is to call &lt;code&gt;bcrypt.CompareHashAndPassword()&lt;/code&gt; function, and pass in the &lt;code&gt;hashedPassword&lt;/code&gt; and naked &lt;code&gt;password&lt;/code&gt;, after converting them from &lt;code&gt;string&lt;/code&gt; to &lt;code&gt;[]byte&lt;/code&gt; slices.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// CheckPassword checks if the provided password is correct or not&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;CheckPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashedPassword&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;bcrypt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CompareHashAndPassword&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And that’s it. We’re done!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#write-unit-test-for-hashpassword-and-checkpassword-functions" class="anchor"&gt;
  &lt;/a&gt;
  Write unit test for HashPassword and CheckPassword functions
&lt;/h2&gt;

&lt;p&gt;Now let’s write some unit tests to make sure these 2 functions work as expected.&lt;/p&gt;

&lt;p&gt;I’m gonna create a new file &lt;code&gt;password_test.go&lt;/code&gt; inside the &lt;code&gt;util&lt;/code&gt; package. Then let’s define function &lt;code&gt;TestPassword()&lt;/code&gt; with a &lt;code&gt;testing.T&lt;/code&gt; object as input.&lt;/p&gt;

&lt;p&gt;First I will generate a new &lt;code&gt;password&lt;/code&gt; as a random string of &lt;code&gt;6&lt;/code&gt; characters. Then we get the &lt;code&gt;hashedPassword&lt;/code&gt; by calling &lt;code&gt;HashPassword()&lt;/code&gt; function with the generated password.&lt;/p&gt;

&lt;p&gt;We require no errors to be returned, and the &lt;code&gt;hashedPassword&lt;/code&gt; string should be not empty.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;TestPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;RandomString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;HashPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NotEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CheckPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashedPassword1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next we call &lt;code&gt;CheckPassword()&lt;/code&gt; function with the &lt;code&gt;password&lt;/code&gt; and &lt;code&gt;hashedPassword&lt;/code&gt; parameters.&lt;/p&gt;

&lt;p&gt;As this is the same &lt;code&gt;password&lt;/code&gt; we used to create the &lt;code&gt;hashedPassword&lt;/code&gt;, this function should return no errors, which means correct password.&lt;/p&gt;

&lt;p&gt;Let’s also test the case where an &lt;code&gt;incorrect password&lt;/code&gt; is provided!&lt;/p&gt;

&lt;p&gt;I will generate a new random &lt;code&gt;wrongPassword&lt;/code&gt; string, and call &lt;code&gt;CheckPassword()&lt;/code&gt; again with this &lt;code&gt;wrongPassword&lt;/code&gt; argument. This time, we expect an &lt;code&gt;error&lt;/code&gt; to be returned, since the provided password is incorrect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;TestPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;RandomString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;HashPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NotEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;wrongPassword&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;RandomString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CheckPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrongPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EqualError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bcrypt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ErrMismatchedHashAndPassword&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To be exact, we use &lt;code&gt;require.EqualError()&lt;/code&gt; to compare the output error. It must be equal to the &lt;code&gt;bcrypt.ErrMismatchedHashAndPassword&lt;/code&gt; error.&lt;/p&gt;

&lt;p&gt;OK, the test is now completed. Let’s run it!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s4786bXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/90uzylad79bl73vlglxb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s4786bXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/90uzylad79bl73vlglxb.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It passed! Awesome!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#update-the-existing-code-to-use-hashpassword-function" class="anchor"&gt;
  &lt;/a&gt;
  Update the existing code to use HashPassword function
&lt;/h2&gt;

&lt;p&gt;So the &lt;code&gt;HashPassword()&lt;/code&gt; function is working properly. Let’s go back to the &lt;code&gt;user_test.go&lt;/code&gt; file and use it in the &lt;code&gt;createRandomUser()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Here I’m gonna create a new &lt;code&gt;hashedPassword&lt;/code&gt; value by calling &lt;code&gt;util.HashPassword()&lt;/code&gt; function with a random string of &lt;code&gt;6&lt;/code&gt; characters.&lt;/p&gt;

&lt;p&gt;We require no errors, then change the &lt;code&gt;"secret"&lt;/code&gt; constant to &lt;code&gt;hashedPassword&lt;/code&gt; instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;createRandomUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HashPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;CreateUserParams&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomOwner&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;HashedPassword&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomOwner&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomEmail&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Alright, let’s run the whole &lt;code&gt;db&lt;/code&gt; package test!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1yc_BzGo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n7dqkprr39m8iz68yr14.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1yc_BzGo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n7dqkprr39m8iz68yr14.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All passed!&lt;/p&gt;

&lt;p&gt;Now if we open the database in Table Plus and check the users table, we can see that the &lt;code&gt;hashed_password&lt;/code&gt; column is now containing the correct &lt;code&gt;bcrypt&lt;/code&gt; hashed string.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RfbsTCgX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ogkirl4c5og31kp2j3rg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RfbsTCgX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ogkirl4c5og31kp2j3rg.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It looks just like the example that I shown you in the beginning of this video.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-sure-all-hashed-passwords-are-different" class="anchor"&gt;
  &lt;/a&gt;
  Make sure all hashed passwords are different
&lt;/h2&gt;

&lt;p&gt;One thing we want to make sure of is: if the &lt;code&gt;same password&lt;/code&gt; is hashed twice, &lt;code&gt;2 different hash values&lt;/code&gt; should be produced.&lt;/p&gt;

&lt;p&gt;So let’s go back to the &lt;code&gt;TestPassword()&lt;/code&gt; function. I’m gonna change the &lt;code&gt;hashPassword&lt;/code&gt; variable’s name to &lt;code&gt;hashedPassword1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then let’s duplicate the hash password code block, and change the variable’s name to &lt;code&gt;hashedPassword2&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;TestPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;RandomString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;hashedPassword1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;HashPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NotEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashedPassword1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CheckPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashedPassword1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;wrongPassword&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;RandomString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CheckPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrongPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashedPassword1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EqualError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bcrypt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ErrMismatchedHashAndPassword&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="n"&gt;hashedPassword2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;HashPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NotEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashedPassword2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NotEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashedPassword1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hashedPassword2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What we expect to see is: the value of &lt;code&gt;hashedPassword2&lt;/code&gt; should be different from the value of &lt;code&gt;hashedPassword1&lt;/code&gt;. So here I use &lt;code&gt;require.NotEqual()&lt;/code&gt; to check this condition.&lt;/p&gt;

&lt;p&gt;OK, let’s rerun the test.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--InO7JEc1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/evnlhng02niihnityz7y.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--InO7JEc1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/evnlhng02niihnityz7y.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It passed! Excellent!&lt;/p&gt;

&lt;p&gt;To really understand why it passed, we have to open the implementation of the &lt;code&gt;bcrypt.GenerateFromPassword()&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;GenerateFromPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;newFromPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;newFromPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;hashed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;MinCost&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;cost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DefaultCost&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hashed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;major&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;majorVersion&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;minor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;minorVersion&lt;/span&gt;

    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;checkCost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;

    &lt;span class="n"&gt;unencodedSalt&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maxSaltSize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadFull&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unencodedSalt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64Encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unencodedSalt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;bcrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hash&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see here, in the &lt;code&gt;newFromPassword()&lt;/code&gt; function, a &lt;code&gt;random salt&lt;/code&gt; value is generated, and it is used in the &lt;code&gt;bcrypt()&lt;/code&gt; function to generate the hash.&lt;/p&gt;

&lt;p&gt;So now you know, because of this &lt;code&gt;random salt&lt;/code&gt;, the generated hash value will be different everytime.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implement-the-create-user-api" class="anchor"&gt;
  &lt;/a&gt;
  Implement the create user API
&lt;/h2&gt;

&lt;p&gt;Next step, I’m gonna use the &lt;code&gt;HashPassword()&lt;/code&gt; function that we’ve written to implement the &lt;code&gt;create user API&lt;/code&gt; for our simple bank.&lt;/p&gt;

&lt;p&gt;Let’s create a new file &lt;code&gt;user.go&lt;/code&gt; inside the &lt;code&gt;api&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;This API will be very much alike the &lt;code&gt;create account API&lt;/code&gt; that we’ve &lt;a href="https://dev.to/techschoolguru/implement-restful-http-api-in-go-using-gin-4ap1"&gt;implemented before&lt;/a&gt;, so I’m just gonna copy it from the &lt;code&gt;api/account.go&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Then let’s change this &lt;code&gt;struct&lt;/code&gt; to &lt;code&gt;createUserRequest&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first parameter is &lt;code&gt;username&lt;/code&gt;. It is a &lt;code&gt;required&lt;/code&gt; field.&lt;/p&gt;

&lt;p&gt;And let’s say we don’t allow it to contain any kind of special characters, so here I’m gonna use the &lt;code&gt;alphanum&lt;/code&gt; tag, which is already provided by the &lt;a href="https://github.com/go-playground/validator"&gt;validator package&lt;/a&gt;. It basically means that this field should contain ASCII alphanumeric characters only.&lt;/p&gt;

&lt;p&gt;The second field is &lt;code&gt;password&lt;/code&gt;. It is also &lt;code&gt;required&lt;/code&gt;. And normally we don’t want the password to be too short because it would be very easy to hack. So here let’s use the &lt;code&gt;min&lt;/code&gt; tag to say that the length of the password should be at least &lt;code&gt;6&lt;/code&gt; characters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;createUserRequest&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Username&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"username" binding:"required,alphanum"`&lt;/span&gt;
    &lt;span class="n"&gt;Password&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"password" binding:"required,min=6"`&lt;/span&gt;
    &lt;span class="n"&gt;FullName&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"full_name" binding:"required"`&lt;/span&gt;
    &lt;span class="n"&gt;Email&lt;/span&gt;    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"email" binding:"required,email"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The third field is &lt;code&gt;full_name&lt;/code&gt; of the user. There’s no specific requirements for this field, except that it is &lt;code&gt;required&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, the last field is &lt;code&gt;email&lt;/code&gt;, which is very important because it would be the main communication channel between the users and our system. We can use the &lt;code&gt;email&lt;/code&gt; tag provided by validator package to make sure that the value of this field is a correct email address.&lt;/p&gt;

&lt;p&gt;There are many other useful built-in tags that were already implemented by the validator package, you can check them out in its &lt;a href="https://pkg.go.dev/github.com/go-playground/validator/v10"&gt;documentation&lt;/a&gt; or &lt;a href="https://github.com/go-playground/validator"&gt;github page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now let’s go back to the code to complete this &lt;code&gt;createUser()&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="n"&gt;createUserRequest&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ShouldBindJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusBadRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HashPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusInternalServerError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateUserParams&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;HashedPassword&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hashedPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;   
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we use the &lt;code&gt;ctx.ShouldBindJSON()&lt;/code&gt; function to bind the input parameters from the &lt;code&gt;context&lt;/code&gt; into the &lt;code&gt;createUserRequest&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;If any of the parameters are invalid, we just return &lt;code&gt;400 Bad Request&lt;/code&gt; status to the client. Otherwise, we will use them build the &lt;code&gt;db.CreateUserParams&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;There are 4 fields that need to be set: &lt;code&gt;Username&lt;/code&gt;, &lt;code&gt;HashedPassword&lt;/code&gt;, &lt;code&gt;Fullname&lt;/code&gt;, and &lt;code&gt;Email&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So first, we compute the &lt;code&gt;hashedPassword&lt;/code&gt; by calling &lt;code&gt;util.HashPassword()&lt;/code&gt; function and pass in the input &lt;code&gt;request.Password&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;If this function returns a &lt;code&gt;not nil&lt;/code&gt; error, then we just return a status &lt;code&gt;500 Internal Server Error&lt;/code&gt; to the client.&lt;/p&gt;

&lt;p&gt;Else, we will build the &lt;code&gt;CreateUserParams&lt;/code&gt; object, where &lt;code&gt;Username&lt;/code&gt; is &lt;code&gt;request.Username&lt;/code&gt;, &lt;code&gt;HashedPassword&lt;/code&gt; is the computed &lt;code&gt;hashedPassword&lt;/code&gt;, &lt;code&gt;FullName&lt;/code&gt; is &lt;code&gt;request.FullName&lt;/code&gt;, and &lt;code&gt;Email&lt;/code&gt; is &lt;code&gt;request.Email&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pqErr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;pqErr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"unique_violation"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusForbidden&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusInternalServerError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then we call &lt;code&gt;server.store.CreateUser()&lt;/code&gt; with this input argument. It will return the created &lt;code&gt;user&lt;/code&gt; object or an &lt;code&gt;error&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Just like in the &lt;code&gt;create account API&lt;/code&gt;, if error is not nil, then there are some possible scenarios. Keep in mind that, in the users table, we have 2 &lt;code&gt;unique constraints&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One is for the primary key &lt;code&gt;username&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;And the other is for the &lt;code&gt;email&lt;/code&gt; column.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We don’t have a &lt;code&gt;foreign key&lt;/code&gt; in this table, so here we only need to keep the &lt;code&gt;unique_violation&lt;/code&gt; code name to return status &lt;code&gt;403 Forbidden&lt;/code&gt; in case an user with the same &lt;code&gt;username&lt;/code&gt; or &lt;code&gt;email&lt;/code&gt; already exists.&lt;/p&gt;

&lt;p&gt;Finally, if no errors occur, we just return status &lt;code&gt;200 OK&lt;/code&gt; with the created &lt;code&gt;user&lt;/code&gt; to the client.&lt;/p&gt;

&lt;p&gt;OK, so now the &lt;code&gt;createUser&lt;/code&gt; API handler is completed. The last step we must do is to register a route for it in the &lt;code&gt;api/server.go&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Here, in this &lt;code&gt;NewServer()&lt;/code&gt; function, I’m gonna add a new route with method &lt;code&gt;POST&lt;/code&gt;. Its path should be &lt;code&gt;/users&lt;/code&gt;, and its handler function is &lt;code&gt;server.createUser&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// NewServer creates a new HTTP server and set up routing.&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;NewServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;router&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Validator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Engine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;validator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Validate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterValidation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"currency"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;validCurrency&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/users"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/accounts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createAccount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/accounts/:id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getAccount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/accounts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listAccounts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/transfers"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createTransfer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;router&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And that’s it! We’re done!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test-the-create-user-api" class="anchor"&gt;
  &lt;/a&gt;
  Test the create user API
&lt;/h2&gt;

&lt;p&gt;Let’s open the terminal and run &lt;code&gt;make server&lt;/code&gt; to start the server.&lt;/p&gt;

&lt;p&gt;I’m gonna use &lt;a href="https://www.postman.com/"&gt;Postman&lt;/a&gt; to test the new API.&lt;/p&gt;

&lt;p&gt;Let’s select method &lt;code&gt;POST&lt;/code&gt; and fill in the URL: &lt;a href="http://localhost:8080/users"&gt;http://localhost:8080/users&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the request body, let’s choose &lt;code&gt;raw&lt;/code&gt;, and select &lt;code&gt;JSON&lt;/code&gt; format. I'm gonna use this JSON data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"username"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"quang1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"full_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Quang Pham"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"quang@email.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"secret"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;OK, let’s send this request!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_3aLSspZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rccwgqu8l97no4h434ce.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_3aLSspZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rccwgqu8l97no4h434ce.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s successful! We’ve got the created &lt;code&gt;user&lt;/code&gt; object here with all correct field values.&lt;/p&gt;

&lt;p&gt;Let’s open the database to find this user.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K-lzqnPG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/la3mih4va95g4yhuh22d.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K-lzqnPG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/la3mih4va95g4yhuh22d.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here it is! So our API is working well in the happy case.&lt;/p&gt;

&lt;p&gt;Now let’s see what happens if I send this same request the second time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a7SQ4aU2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r6fj79ni1m81b7byp57r.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a7SQ4aU2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r6fj79ni1m81b7byp57r.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We’ve got a &lt;code&gt;403 Forbidden&lt;/code&gt; status code. And the reason is that the &lt;code&gt;unique constraint&lt;/code&gt; for &lt;code&gt;username&lt;/code&gt; is violated.&lt;/p&gt;

&lt;p&gt;We’re trying to create another user with the same &lt;code&gt;username&lt;/code&gt;, So clearly it should not be allowed!&lt;/p&gt;

&lt;p&gt;Now let’s try changing the &lt;code&gt;username&lt;/code&gt; to &lt;code&gt;quang2&lt;/code&gt;, but keep the &lt;code&gt;email&lt;/code&gt; value the same, and send the request again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--12Fsn0dA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/py1g4yoemdjjp5yhv8hd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--12Fsn0dA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/py1g4yoemdjjp5yhv8hd.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We still got &lt;code&gt;403 Forbidden&lt;/code&gt;. But this time, the error is because the &lt;code&gt;email&lt;/code&gt; unique constraint is violated. Exactly what we expected!&lt;/p&gt;

&lt;p&gt;If I change the &lt;code&gt;email&lt;/code&gt; to &lt;code&gt;quang2@email.com&lt;/code&gt;, then the request will be successful, since this email doesn’t belong to any other users.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yhHkhtAW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gfa81bkj7n61nvg0apkt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yhHkhtAW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gfa81bkj7n61nvg0apkt.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OK, now let’s try an invalid &lt;code&gt;username&lt;/code&gt;, such as &lt;code&gt;quang#2&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JUg0ZKqo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4vbdkpyqzgv5gehy7opb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JUg0ZKqo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4vbdkpyqzgv5gehy7opb.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This time, the status code is &lt;code&gt;400 Bad Request&lt;/code&gt;. And the reason is: the field validation for &lt;code&gt;username&lt;/code&gt; failed on the &lt;code&gt;alphanum&lt;/code&gt; tag. There’s a special character &lt;code&gt;#&lt;/code&gt; in the &lt;code&gt;username&lt;/code&gt;, which is not alphanumeric.&lt;/p&gt;

&lt;p&gt;Next, let’s try an invalid email. I’m gonna change the &lt;code&gt;username&lt;/code&gt; to &lt;code&gt;quang3&lt;/code&gt;, and &lt;code&gt;email&lt;/code&gt; to &lt;code&gt;quang3email.com&lt;/code&gt;, without the &lt;code&gt;@&lt;/code&gt; character.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--odcdFgoy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/143icuv62eb39ofmpj8n.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--odcdFgoy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/143icuv62eb39ofmpj8n.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We’ve got &lt;code&gt;400 Bad Request&lt;/code&gt; status again. And the error is: field validation for &lt;code&gt;email&lt;/code&gt; failed on the &lt;code&gt;email&lt;/code&gt; tag, which is exactly what we want.&lt;/p&gt;

&lt;p&gt;OK now let’s fix the &lt;code&gt;email&lt;/code&gt; address, and change the &lt;code&gt;password&lt;/code&gt; to a very short value, such as &lt;code&gt;"123"&lt;/code&gt;. Then send the request one more time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IyWCrhne--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ktclklly7jy3tnml757c.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IyWCrhne--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ktclklly7jy3tnml757c.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This time, we’ve got an error because the &lt;code&gt;password&lt;/code&gt; field validation failed on the &lt;code&gt;min&lt;/code&gt; tag. It doesn’t satisfy the minimum length constraint of &lt;code&gt;6&lt;/code&gt; characters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#api-should-not-expose-hashed-password" class="anchor"&gt;
  &lt;/a&gt;
  API should not expose hashed password
&lt;/h2&gt;

&lt;p&gt;Before we finish, there’s one more thing I want to tell you. Let’s fix the &lt;code&gt;password&lt;/code&gt; value and send the request again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--urK3aiXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bebtbkl23o4fk7c88lel.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--urK3aiXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bebtbkl23o4fk7c88lel.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now it’s successful. But you can notice that the &lt;code&gt;hashed_password&lt;/code&gt; value is also returned, which doesn’t seem right, because the client will never need to use this value for anything.&lt;/p&gt;

&lt;p&gt;And it might raise some security concerns, as this piece of sensitive information is being transmitted in the public.&lt;/p&gt;

&lt;p&gt;It would be better to remove this field from the response body.&lt;/p&gt;

&lt;p&gt;To do that, I’m gonna declare a new &lt;code&gt;createUserResponse struct&lt;/code&gt; in the &lt;code&gt;api/user.go&lt;/code&gt; file. It will contain almost all fields of the &lt;code&gt;db.User&lt;/code&gt; struct, except for the &lt;code&gt;HashedPassword&lt;/code&gt; field that should be removed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;createUserResponse&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Username&lt;/span&gt;          &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:"username"`&lt;/span&gt;
    &lt;span class="n"&gt;FullName&lt;/span&gt;          &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:"full_name"`&lt;/span&gt;
    &lt;span class="n"&gt;Email&lt;/span&gt;             &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:"email"`&lt;/span&gt;
    &lt;span class="n"&gt;PasswordChangedAt&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="s"&gt;`json:"password_changed_at"`&lt;/span&gt;
    &lt;span class="n"&gt;CreatedAt&lt;/span&gt;         &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="s"&gt;`json:"created_at"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then here, at the end of the &lt;code&gt;createUser()&lt;/code&gt; handler function, we build a new &lt;code&gt;createUserResponse&lt;/code&gt; object, where &lt;code&gt;Username&lt;/code&gt; is &lt;code&gt;user.Username&lt;/code&gt;, &lt;code&gt;FullName&lt;/code&gt; is &lt;code&gt;user.FullName&lt;/code&gt;, &lt;code&gt;Email&lt;/code&gt; is &lt;code&gt;user.Email&lt;/code&gt;, &lt;code&gt;PasswordChangedAt&lt;/code&gt; is &lt;code&gt;user.PasswordChangedAt&lt;/code&gt;, and &lt;code&gt;CreatedAt&lt;/code&gt; is &lt;code&gt;user.CreatedAt&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pqErr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;pqErr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"unique_violation"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusForbidden&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusInternalServerError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;rsp&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;createUserResponse&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;             &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;PasswordChangedAt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PasswordChangedAt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;CreatedAt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;         &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreatedAt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rsp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally, we return the &lt;code&gt;response&lt;/code&gt; object instead of &lt;code&gt;user&lt;/code&gt;. And we’re done!&lt;/p&gt;

&lt;p&gt;Let’s restart the server. Then go back to Postman, update the &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;email&lt;/code&gt; to new values, and send the request.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W75U_na2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xdmenmht3ipl9x0f19g2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W75U_na2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xdmenmht3ipl9x0f19g2.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s successful. And now there’s no &lt;code&gt;hashed_password&lt;/code&gt; field in the response body anymore. Perfect!&lt;/p&gt;

&lt;p&gt;So that brings us to the end of this lecture. I hope you have learned something useful.&lt;/p&gt;

&lt;p&gt;Thank you for reading, and see you in the next one!&lt;/p&gt;




&lt;p&gt;If you like the article, please subscribe to our &lt;a href="http://bit.ly/techschoolguru"&gt;Youtube channel&lt;/a&gt; and follow us on &lt;a href="https://twitter.com/techschoolguru"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.facebook.com/techschool.guru"&gt;Facebook&lt;/a&gt; for more tutorials in the future.&lt;/p&gt;

</description>
      <category>go</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>security</category>
    </item>
    <item>
      <title>Future You Will Never Think Current You Was Too Old to Learn Software Engineering</title>
      <author>Nick Scialli (he/him)</author>
      <pubDate>Sat, 16 Jan 2021 21:22:29 +0000</pubDate>
      <link>https://dev.to/nas5w/is-it-too-late-to-be-a-software-engineer-future-you-says-no-2gef</link>
      <guid>https://dev.to/nas5w/is-it-too-late-to-be-a-software-engineer-future-you-says-no-2gef</guid>
      <description>&lt;p&gt;I wrote this post with my good friend, Ross Jacobson, who runs &lt;a href="https://disciplinedrebel.com/"&gt;The Disciplined Rebel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A lot of people ask me "is it too late to be a software engineer." In this post, we are going to examine this question, and determine at what age it is too late to get into software development.&lt;/p&gt;




&lt;p&gt;Please help spread the word by giving this post a 💓, 🦄, and 🔖!&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#the-question" class="anchor"&gt;
  &lt;/a&gt;
  The Question
&lt;/h1&gt;

&lt;p&gt;This question, "is it too late to be a software engineer" comes from a surprisingly wide variety of age groups.&lt;/p&gt;

&lt;p&gt;Some are in there 30s, 40s, or older. Whereas others are in their 20s. But still feel they've gotten off to a late start.&lt;/p&gt;

&lt;p&gt;At one point I was hearing this question from people of different ages, and I came to a realization:&lt;/p&gt;

&lt;p&gt;It’s not about your age.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#imagine-someone-in-their-30s-who-wants-to-learn-to-code" class="anchor"&gt;
  &lt;/a&gt;
  Imagine Someone in Their 30s Who Wants to Learn to Code
&lt;/h1&gt;

&lt;p&gt;(If you personally are in your 30s, then this should be even easier).&lt;/p&gt;

&lt;p&gt;The 30-something really wants to become a software engineer but wonders whether it is too late to learn how.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The person in their 30s has two options:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Give learning software development a shot. And potentially become really good by the time they are in their 40s (if not much earlier)&lt;/li&gt;
&lt;li&gt;Don’t give it a shot, and then 10 years later think "I wish I started in my 30s."&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here's the thing though: Someone in their 40s has these same options available to them.&lt;/p&gt;

&lt;p&gt;The person in their 40s could focus on the future and get started now. Which might lead them to gain additional fulfillment, success, and/or income.&lt;/p&gt;

&lt;p&gt;Or they can never give it a shot because they feel like "it’s too late." Then, when they are in their 50s, regret not having started in their 40s.&lt;br&gt;
And so on and so forth.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can repeat this thought experiment with your age subbed in.&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#from-another-perspective" class="anchor"&gt;
  &lt;/a&gt;
  From Another Perspective
&lt;/h1&gt;

&lt;p&gt;My friend, &lt;a href="https://disciplinedrebel.com"&gt;Ross Jacobson&lt;/a&gt;, started playing guitar around 9th or 10th grade. Now that he is in his 30s, that seems really early.&lt;/p&gt;

&lt;p&gt;But at the time, he knew other people who started in 5th or 6th grade. Because he compared himself to others, he felt regret. And that caused him to question whether it was too late for him to get any good.&lt;/p&gt;

&lt;p&gt;Fortunately though, he kept persisting, and he eventually got better. He ended up playing in a band for several years and got a lot of joy out of it.&lt;/p&gt;

&lt;p&gt;Now at his current age, looking back, he thinks that 9th or 10th grade seems plenty early. And the idea that he didn't start early enough seems completely ridiculous.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The thing is – that same level of ridiculousness can be applied to ANY age!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's say you are 34 and want to become a software engineer. But don't because you think it is too late.&lt;/p&gt;

&lt;p&gt;10 years later you will look back and wonder why you didn't.&lt;/p&gt;

&lt;p&gt;Future You, at 44, will think "ugh, if I had only gotten into software development when I was 34, I’d be so far along by now."&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#heres-the-rule-to-keep-in-mind" class="anchor"&gt;
  &lt;/a&gt;
  Here’s the Rule to Keep in Mind
&lt;/h1&gt;

&lt;p&gt;If you start something today, Future You will never think that was too old to start something.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#are-there-any-limits" class="anchor"&gt;
  &lt;/a&gt;
  Are there any limits?
&lt;/h1&gt;

&lt;p&gt;Sure, there are some practical situations to factor in. Such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cost of education/training&lt;/li&gt;
&lt;li&gt;How much free time you have&lt;/li&gt;
&lt;li&gt;And other competing priorities/responsibilities&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some of these practical problems seem to have clearer solutions. For example, there are lots of free courses and other resources that can help mitigate cost (such as this blog).&lt;/p&gt;

&lt;p&gt;Other are tougher. For instance, having less time to learn to code, because you have to devote a lot of your time to taking care of a family member.&lt;/p&gt;

&lt;p&gt;But all of these concerns can be present for people regardless of their age.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#age-itself-is-just-a-number" class="anchor"&gt;
  &lt;/a&gt;
  Age itself is just a number.
&lt;/h1&gt;

&lt;p&gt;If you are still on the fence, there are plenty of &lt;a href="https://www.freecodecamp.org/news/stories-from-300-developers-who-got-their-first-tech-job-in-their-30s-40s-and-50s-64306eb6bb27/"&gt;real-world examples&lt;/a&gt; of people in their 30s, 40s, and beyond who learned to code late in life.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#concluding-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  Concluding Thoughts
&lt;/h1&gt;

&lt;p&gt;Yes, there are some practical factors you have to consider.&lt;/p&gt;

&lt;p&gt;But most of those considerations have less to do with age, and more to do with where becoming a software engineer fits on your list of priorities.&lt;/p&gt;

&lt;p&gt;So, if you are wondering whether it is too late to become a software engineer, here is my answer:&lt;/p&gt;

&lt;p&gt;Don’t worry about past missed time. And start looking to the future.&lt;/p&gt;

&lt;p&gt;Years from now, Future You will look back and thank you for it.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>career</category>
    </item>
    <item>
      <title>5 phases to create a 5-year growth plan as a developer</title>
      <author>Joachim Zeelmaekers</author>
      <pubDate>Sat, 16 Jan 2021 21:01:00 +0000</pubDate>
      <link>https://dev.to/joachimzeelmaekers/5-phases-to-create-a-5-year-growth-plan-as-a-developer-51ed</link>
      <guid>https://dev.to/joachimzeelmaekers/5-phases-to-create-a-5-year-growth-plan-as-a-developer-51ed</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cAtOVOvY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.joachimzeelmaekers.be/content/images/2021/01/airfocus-um1zVjVCtEY-unsplash.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cAtOVOvY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.joachimzeelmaekers.be/content/images/2021/01/airfocus-um1zVjVCtEY-unsplash.jpg" alt="5 phases to create a 5-year growth plan as a developer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I started writing this blog because of one very complicated but important question.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Where do you see yourself in 5 years?&lt;br&gt;&lt;br&gt;
~ every interviewer or manager ever&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My answer to this question was something like this: I want to be a full-stack developer that can create a deployment pipeline for the backend and frontend of a production application.&lt;/p&gt;

&lt;p&gt;Well, let's say that that is not the kind of answer people are looking for. It says nothing about your &lt;strong&gt;goals&lt;/strong&gt; or &lt;strong&gt;ambition&lt;/strong&gt;. It only shows that you want to progress, but then again, who doesn't?&lt;/p&gt;

&lt;p&gt;To construct a clear answer to this, you first have to know your dream job. This is something that one of my colleagues told me, and I keep on telling everyone because it's just an amazing way to find out what you should focus on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#phase-1-find-your-dream-job" class="anchor"&gt;
  &lt;/a&gt;
  Phase 1: Find your dream job
&lt;/h3&gt;

&lt;p&gt;The first step in this process is selecting your dream job. Let's say that I want to become a Software Developer at Google. The first thing I should do is find a job description or an open application at Google so that I can find out what skills I need to complete my goal.&lt;/p&gt;

&lt;p&gt;Most of the large companies have a careers page where you can find job descriptions. The page for google is &lt;a href="https://careers.google.com/d/"&gt;https://careers.google.com&lt;/a&gt;. Let's say that I want to become a software engineer for &lt;a href="https://www.waze.com/"&gt;Waze&lt;/a&gt;. A job description would look something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RewgFzzS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.joachimzeelmaekers.be/content/images/2021/01/Screenshot-2021-01-16-at-18.18.05.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RewgFzzS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.joachimzeelmaekers.be/content/images/2021/01/Screenshot-2021-01-16-at-18.18.05.png" alt="5 phases to create a 5-year growth plan as a developer"&gt;&lt;/a&gt;Screenshot by author from &lt;a href="https://careers.google.com/d/"&gt;Google&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I know this description can look intimidating at the start of your career, but just ignore the work that has to be done, and just try to understand it. Once you understand it, you can see which things are completed and which require some more work.&lt;/p&gt;

&lt;p&gt;A checklist should look like this:&lt;br&gt;&lt;br&gt;
✅ Bachelor's degree&lt;br&gt;&lt;br&gt;
✅ Experience with mobile application development for Android&lt;br&gt;&lt;br&gt;
✅ Programming experience in Java&lt;br&gt;&lt;br&gt;
✅ ...  &lt;/p&gt;

&lt;p&gt;⛔️ Experience with Kotlin&lt;br&gt;&lt;br&gt;
⛔️ Programming experience in C++&lt;br&gt;&lt;br&gt;
⛔️ Knowledge of UI frameworks (either Android, iOS, XML), MVP,...&lt;br&gt;&lt;br&gt;
⛔️ ...&lt;/p&gt;

&lt;p&gt;With this checklist, you know everything you need to know to get into phase 2.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#phase-2-the-proof" class="anchor"&gt;
  &lt;/a&gt;
  Phase 2: The proof
&lt;/h3&gt;

&lt;p&gt;Your checklist shows clear that you have some kind of skills, but things like "experience in" are really vaguely described. That's why you need projects to proof your experience because talk is cheap. And certainly when you're talking to technical interviewers.&lt;/p&gt;

&lt;p&gt;This proof could be a side-project you created or a project that you worked on at your full-time job. As a student, you could even use a school project that you worked on for a couple of weeks. Something is better than nothing.&lt;/p&gt;

&lt;p&gt;Remember that those projects have to be up-to-date. A project that is stale for 7 years on Github, will not be enough to show your experience in a subject, since the whole subject could have changed. Certainly when you're in web or mobile development.&lt;/p&gt;

&lt;p&gt;If you don't have any proof of experience, you will have some work to do. But that's the whole point of creating your plan for the next 5 years.&lt;/p&gt;

&lt;p&gt;You should now have an updated checklist:&lt;br&gt;&lt;br&gt;
✅ Bachelor's degree&lt;br&gt;&lt;br&gt;
 🧾 Find your degree and make sure you digitalise it once and for all&lt;br&gt;&lt;br&gt;
✅ Experience with mobile application development for Android&lt;br&gt;&lt;br&gt;
 🧾 Project on Github with a link&lt;br&gt;&lt;br&gt;
 🧾 App in the Play Store with a link&lt;br&gt;&lt;br&gt;
 🧾 ...&lt;br&gt;&lt;br&gt;
✅ Programming experience in Java&lt;br&gt;&lt;br&gt;
 🧾 ...&lt;/p&gt;

&lt;p&gt;You might notice that we forgot all other points, but let's dive into them in phase 3.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#phase-3-growth" class="anchor"&gt;
  &lt;/a&gt;
  Phase 3: Growth
&lt;/h3&gt;

&lt;p&gt;This might be the most difficult but also the most important phase of them all. In this phase, we will focus on the work that has to be done. In this phase, we will tackle the unchecked parts of our checklist and determine what we can do to acquire the skills that are needed for our dream job.&lt;/p&gt;

&lt;p&gt;I will only discuss 1 of the checkpoints as an example. Let's discuss &lt;strong&gt;experience with Kotlin.&lt;/strong&gt; As previously said, &lt;em&gt;experience&lt;/em&gt; is very vague, but it's clear for everyone that it's more than creating a hello-world application in a certain language. That's why I would suggest starting with the basics, as you would in any language and work your way up. Once that's done, I would build multiple projects and even write about the things you learned on the way.&lt;/p&gt;

&lt;p&gt;Writing about certain topics is very beneficial as a developer for job applications because it shows your passion, interest and knowledge about the topics. In addition to writing, you could get certified for certain programming languages. This is not a necessity, but it's more like a confirmation on your experience.  &lt;/p&gt;

&lt;p&gt;Remember that a job description describes the perfect fit. You don't have to be perfect, but you have to be close to that. That's why you can certainly apply for a job that requires 5 years of experience with only 4 years of experience.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#phase-4-plan" class="anchor"&gt;
  &lt;/a&gt;
  Phase 4: Plan
&lt;/h3&gt;

&lt;p&gt;Well, as I said before, talk is cheap. Now it's time to create a plan of execution. For me personally, I like to learn before I get to work. This means waking up early, first learn for 1 or 2 hours and then start working my full-time job. This is something that works for me, but you should find a schedule that works for you.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A goal without a plan is just a wish.&lt;br&gt;&lt;br&gt;
~ Antoine de Saint-Exupéry&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#phase-5-execute" class="anchor"&gt;
  &lt;/a&gt;
  Phase 5: Execute
&lt;/h3&gt;

&lt;p&gt;This phase is all about execution.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/UqZ4imFIoljlr5O2sM/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/UqZ4imFIoljlr5O2sM/giphy.gif" alt="Just do it"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;By applying these 5 phases, you should get a better understanding of where you will be going over the next 5 years. Or at least where you are working towards.&lt;/p&gt;

&lt;p&gt;Of course, it's all about executing your plan. Don't expect to be able to complete your plan, if you're not putting in the work.&lt;/p&gt;

&lt;p&gt;Also, remember that your dream job can change over time. You might like Javascript today, but next year you might be love Python. That's why it's important to refactor your plan like you would refactor your code.&lt;/p&gt;

&lt;p&gt;If you have any questions regarding this topic, feel free to contact me via &lt;a href="https://twitter.com/joachimzee"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>career</category>
      <category>learning</category>
      <category>motivation</category>
    </item>
    <item>
      <title>React 101: A Quick Intro</title>
      <author>Rita Correia</author>
      <pubDate>Sat, 16 Jan 2021 20:18:21 +0000</pubDate>
      <link>https://dev.to/ritaxcorreia/react-101-a-quick-intro-5e7b</link>
      <guid>https://dev.to/ritaxcorreia/react-101-a-quick-intro-5e7b</guid>
      <description>&lt;p&gt;If you're curious about what makes React the most popular JavaScript framework, or feel hesitant about learning React, this article is for you. We'll go through &lt;em&gt;React fundamentals&lt;/em&gt; in simple terms covering the following topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React in a Nutshell &lt;/li&gt;
&lt;li&gt;Key Concepts of React&lt;/li&gt;
&lt;li&gt;Create-react-app&lt;/li&gt;
&lt;li&gt;React Components&lt;/li&gt;
&lt;li&gt;React Props&lt;/li&gt;
&lt;li&gt;React State&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;In this article, it's assumed you know the basics and concepts of JavaScript.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-in-a-nutshell%E2%80%A8" class="anchor"&gt;
  &lt;/a&gt;
  React in a nutshell 
&lt;/h2&gt;

&lt;p&gt;React (also known as React.js or ReactJS) is a JavaScript framework created by Jordan Walke and maintained by a small team part of Facebook, led by Dan Abramov in London.  React is open source and you can contribute to their &lt;a href="https://github.com/facebook/react"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It's used for building user interfaces specifically for single-page applications, that are fast to load and faster to build. React is a component-based framework with the core principle of reusing UI components.&lt;/p&gt;

&lt;p&gt;Instead of creating DOM elements, we create React elements. react-dom will handle the events and turn them into DOM elements. This is done through React components.&lt;br&gt;
React isolates the components, and re-renders that specific component which makes an app/website incredibly faster to render.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-3-key-concepts-of-react-are" class="anchor"&gt;
  &lt;/a&gt;
  The 3 key concepts of React are:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Passing data (unidirectional data flow)&lt;/li&gt;
&lt;li&gt;Returning data&lt;/li&gt;
&lt;li&gt;Return JSX&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#unidirectional-data-flow" class="anchor"&gt;
  &lt;/a&gt;
  Unidirectional Data Flow
&lt;/h3&gt;

&lt;p&gt;In React, data can only flow in one direction. As the underlying data changes, the view will update, but in order for the view layer to affect the data, an action must be triggered. There is no automatic updating. This helps to reduce overhead and makes managing data simpler.&lt;/p&gt;

&lt;p&gt;A component can manage its own data (known as state), or can have data passed to it from another component (known as props). When either state or props changes, React will re-render the component which in turn updates the view.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#virtual-dom" class="anchor"&gt;
  &lt;/a&gt;
  Virtual DOM
&lt;/h3&gt;

&lt;p&gt;React employs a virtual DOM, meaning it has a copy of the DOM in memory at all times. When the view needs to be updated, React will update this virtual DOM first. This is easy to do, because it is already in memory.&lt;/p&gt;

&lt;p&gt;Once the Virtual DOM has been updated, React checks to see what the differences are between the Virtual DOM and the actual DOM. React can then just update the DOM nodes that have changed.&lt;br&gt;
This approach is unique to React and is what made it so much quicker at rendering than its rivals.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#jsx" class="anchor"&gt;
  &lt;/a&gt;
  JSX
&lt;/h3&gt;

&lt;p&gt;JSX is a syntax extension for JavaScript. It was written to be used with React. JSX code looks a lot like HTML. &lt;/p&gt;

&lt;p&gt;What does “syntax extension” mean?&lt;br&gt;
In this case, it means that JSX is not valid JavaScript. Web browsers can’t read it!&lt;br&gt;
If a JavaScript file contains JSX code, then that file will have to be compiled. That means that before the file reaches a web browser, a JSX compiler will translate any JSX into regular JavaScript.&lt;br&gt;
 &lt;br&gt;
Any code in between the tags of a JSX element will be read as JSX, not as regular JavaScript! JSX doesn’t add numbers - it reads them as text, just like HTML.&lt;br&gt;
You need a way to write code that says, “Even though I am located in between JSX tags, treat me like ordinary JavaScript and not like JSX.”&lt;br&gt;
You can do this by wrapping your code in curly braces: &lt;code&gt;{ your code goes here }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In JSX, you need to add slashes to all of the self-closing tags, ie: &lt;code&gt;&amp;lt;Header /&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;Home /&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#event-listeners-in-jsx" class="anchor"&gt;
  &lt;/a&gt;
  Event Listeners in JSX
&lt;/h3&gt;

&lt;p&gt;JSX elements can have event listeners, just like HTML elements. Programming in React means constantly working with event listeners.&lt;br&gt;
You create an event listener by giving a JSX element a special attribute. Here’s an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img onClick={myFunc} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;An event listener attribute’s name should be something like &lt;code&gt;onClick&lt;/code&gt; or &lt;code&gt;onMouseOver&lt;/code&gt;: the word 'on', plus the type of event that you’re listening for. You can see a list of valid event names &lt;a href="https://reactjs.org/docs/events.html"&gt;here&lt;/a&gt;.&lt;br&gt;
An event listener attribute’s value should be a function. The above example would only work if &lt;code&gt;myFunc&lt;/code&gt; were a valid function that had been defined elsewhere, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function myFunc() {
  alert('Good morning!');
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img onClick={myFunc} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note that in HTML, event listener names are written in all lowercase, such as &lt;code&gt;click&lt;/code&gt; or &lt;code&gt;mousemove&lt;/code&gt;. In JSX, event listener names are written in camelCase, such as &lt;code&gt;onClick&lt;/code&gt; or &lt;code&gt;onMouseOver&lt;/code&gt;.&lt;br&gt;
  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#createreactapp" class="anchor"&gt;
  &lt;/a&gt;
  Create-react-app
&lt;/h2&gt;

&lt;p&gt;Create-react-app is a NPM package that installs all necessary packages to create a React application.&lt;br&gt;
Using create-react-app sets up your environment with all we need.&lt;/p&gt;

&lt;p&gt;It comes bundled with a few features including:&lt;br&gt;
ESlint: to polish your code as you write it&lt;br&gt;
Jest: a testing library, for testing your code&lt;/p&gt;

&lt;p&gt;Because its’ an npm package, it’s executed only in the terminal, as such:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app your-react-app
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It also accepts flags to tailor the template to your needs, ie &lt;code&gt;npx create-react-app --typescript&lt;/code&gt;. This will create you a TypeScript project.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;npx is the same as npm, but it installs the latest version of npm.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You must import React from ‘react’ in each component file.&lt;br&gt;
At the end, you export each new component you created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Hello () {
 return &amp;lt;h1&amp;gt;Hello {username}!&amp;lt;/h1&amp;gt;;
}

export default Hello;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Or you can instantly export it when creating the function such as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export default function Hello () {
 return &amp;lt;h1&amp;gt;Hello {username}!&amp;lt;/h1&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then you import the created component to the file you want to use it in.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Package.json&lt;/code&gt; comes with create-react-app and it defines dependencies. Dependencies are all the packages that need to be installed for it to run. For debugging, we have “scripts”, and you can add &lt;code&gt;lint:fix&lt;/code&gt; for example.  &lt;code&gt;Package-lock.json&lt;/code&gt; defines more packages. &lt;br&gt;
They both get installed when you run &lt;code&gt;npm install&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The Public folder  holds your HTML file. It takes the usual HTML boilerplate and &lt;code&gt;&amp;lt;div id=“root”&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;.&lt;br&gt;
We build our app, eg: &lt;code&gt;app.js&lt;/code&gt; file, in the Src folder.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#react-components%E2%80%A8" class="anchor"&gt;
  &lt;/a&gt;
  React components 
&lt;/h2&gt;

&lt;p&gt;As mentioned earlier, React is a component-based framework, which means components are created with the purpose of being reused throughout the UI.&lt;br&gt;
You can use several functions to create different reusable components. You basically pass in functions between files, so we can pass values onto different files.&lt;/p&gt;

&lt;p&gt;Components are like JavaScript functions, with a different way of executing them. Components can be created with function declarations or arrow functions.&lt;/p&gt;

&lt;p&gt;Components must be exported: &lt;code&gt;export default ‘ComponentName’  &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then, we import the component to the file where we want to use it: &lt;code&gt;import ComponentName from “./components/ComponentName”&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A component lives on a separate file. The module is the file that holds one of more components.&lt;/p&gt;

&lt;p&gt;A component returns a piece of JSX.   JSX, as explained earlier, is the syntax taken by React.&lt;/p&gt;

&lt;p&gt;We can have the bigger components in the main &lt;code&gt;App.js&lt;/code&gt; file and the smaller components in a components folder. But the structure is ultimately entirely up to the developer.&lt;/p&gt;

&lt;p&gt;This is a React component:&lt;br&gt;
&lt;br&gt;
 &lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function MyComponent (props) {
  return ( 
    &amp;lt;&amp;gt; 
     &amp;lt;h1&amp;gt;{props.greeting}&amp;lt;/h1&amp;gt; 
    &amp;lt;/&amp;gt; 
) };
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;And this is how we call a React component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;MyComponent greeting=“Hello World” /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For example, passing a variable {myVariable}:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const myVariable = ‘This is a variable’
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then you call it by using &lt;code&gt;{myVariable}&lt;/code&gt; in JSX.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fragment&lt;/strong&gt;&lt;br&gt;
When you have more than one line of code to return, you wrap the content of a function inside a fragment: &lt;code&gt;&amp;lt;&amp;gt; &amp;lt;/&amp;gt;&lt;/code&gt;&lt;br&gt;
It replicates a div-like wrapper where you store the code block within your components.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-props" class="anchor"&gt;
  &lt;/a&gt;
  React props
&lt;/h2&gt;

&lt;p&gt; This is the React equivalent to function parameters that are passed into functions. Best practice is to call them &lt;em&gt;props&lt;/em&gt; when writing a component.   &lt;em&gt;“You pass a prop”&lt;/em&gt;. This means you pass in the equivalent to a JavaScript argument into a component.   They are grouped together into an object by default.&lt;br&gt;
React naturally takes all the arguments and wraps them in an object. The object is called &lt;em&gt;props&lt;/em&gt; and you can access it by using dot notation, ie: props.name, props.age.&lt;/p&gt;

&lt;p&gt;Props can handle functions and values, and they can have default values (ie, you can set the default to be whatever you want it to be!).&lt;br&gt;
Props can be  destructured in components for better readability.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0react-state" class="anchor"&gt;
  &lt;/a&gt;
   React state
&lt;/h2&gt;

&lt;p&gt;React State is a description of the status of the component and its features.  It's a built-in React object that is used to contain data or information about the component. A component's state can change over time; whenever it changes, the component re-renders.&lt;br&gt;
React developers usually refer to “setting state”, where you can write methods inside your component.   It basically means controlling the state of a component and resets it for each time you call it/use it.&lt;/p&gt;

&lt;p&gt;‘Value’ is a variable so it always returns a state.&lt;/p&gt;

&lt;p&gt;Since the introduction of React Hooks (in 2018) we can use &lt;code&gt;React.useState( )&lt;/code&gt;. It takes an initial value when it renders, which can also take the value of when the value is set/changed.&lt;/p&gt;




&lt;p&gt;I hope this clarifies a little more about the intricacies of React! I've collated some great free resources in the list below:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://blog.glitch.com/post/react-starter-kit"&gt;Glitch: React Starter Kit&lt;/a&gt;&lt;/strong&gt; - A free, 5-part video course with interactive code examples that will help you learn React.&lt;br&gt;
&lt;strong&gt;&lt;a href="https://www.codecademy.com/learn/react-101"&gt;Codecademy: React 101&lt;/a&gt;&lt;/strong&gt; - Codecademy’s introductory course for React.&lt;br&gt;
&lt;strong&gt;&lt;a href="https://egghead.io/courses/start-learning-react"&gt;Egghead.io: Start Learning React&lt;/a&gt;&lt;/strong&gt; - This series will explore the basic fundamentals of React to get you started.&lt;br&gt;
&lt;strong&gt;&lt;a href="https://www.youtube.com/watch?v=Ke90Tje7VS0"&gt;React Crash Course 2018&lt;/a&gt;&lt;/strong&gt; - A beginner-friendly crash course through the most important React topics.&lt;br&gt;
&lt;strong&gt;&lt;a href="https://egghead.io/courses/the-beginner-s-guide-to-react"&gt;Egghead.io: The Beginner’s Guide to ReactJS&lt;/a&gt;&lt;/strong&gt; - Free course for React newbies and those looking to get a better understanding of React fundamentals.&lt;br&gt;
&lt;strong&gt;&lt;a href="https://ui.dev/free-react-bootcamp/"&gt;Free React Bootcamp&lt;/a&gt;&lt;/strong&gt; - Recordings from three days of a free online React bootcamp.&lt;br&gt;
&lt;strong&gt;&lt;a href="https://scrimba.com/learn/learnreact"&gt;Scrimba: Learn React for free&lt;/a&gt;&lt;/strong&gt; - 48 hands-on video tutorials building react apps.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Position: Relatively Confused</title>
      <author>Ash</author>
      <pubDate>Sat, 16 Jan 2021 20:16:18 +0000</pubDate>
      <link>https://dev.to/ash_bergs/position-relatively-confused-69p</link>
      <guid>https://dev.to/ash_bergs/position-relatively-confused-69p</guid>
      <description>&lt;p&gt;The layout of a web page, and how responsive and scalable it is, separates an amateur site from a pro site. One of the first questions on my All Points Bulletin board was related to controlling layout with position:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What does the &lt;code&gt;position&lt;/code&gt; property &lt;em&gt;do&lt;/em&gt;? What do the values &lt;code&gt;absolute&lt;/code&gt; and &lt;code&gt;relative&lt;/code&gt; mean? &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When first learning the ins and outs of CSS I was easily confused by the number of options to control the layout of a page. There's CSS Grid, Flexbox, floats and pure positioning. I often lost track of what properties belonged to which, trying to use the &lt;code&gt;top&lt;/code&gt; property in a flexbox column, or using trial and error to plug in &lt;code&gt;justify-content&lt;/code&gt;, &lt;code&gt;align-items&lt;/code&gt;, and &lt;code&gt;margin&lt;/code&gt; values to center content.&lt;/p&gt;

&lt;p&gt;I've learned that a finished website usually has a little bit of everything, and being familiar with the basics is a powerful tool when trying to figure out why an element, or a group of elements, isn’t behaving how you expected.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-position-property" class="anchor"&gt;
  &lt;/a&gt;
  The Position Property
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;position&lt;/code&gt; prop specifies the &lt;em&gt;positioning method&lt;/em&gt; applied to an element. &lt;/p&gt;

&lt;p&gt;There are 5 possible methods: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Static&lt;/li&gt;
&lt;li&gt;Relative&lt;/li&gt;
&lt;li&gt;Absolute&lt;/li&gt;
&lt;li&gt;Fixed&lt;/li&gt;
&lt;li&gt;Sticky&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once an element's &lt;code&gt;position&lt;/code&gt; property is set to anything &lt;em&gt;but&lt;/em&gt; &lt;code&gt;static&lt;/code&gt; (the default setting) it will have access to the &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt; and &lt;code&gt;bottom&lt;/code&gt; properties - what I'll refer to as the positional properties. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#position-static" class="anchor"&gt;
  &lt;/a&gt;
  1️⃣ &lt;strong&gt;Position: Static&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;By default the elements on a web page are displayed in static position. They appear in the viewport according to the document flow and writing method of the browser. Some browsers display left-to-right, right-to-left, or vertically down the page depending on the selected country and language. &lt;/p&gt;

&lt;p&gt;🙋‍♂️ In this example we have a client who has asked us to create a simple dating profile page. The finished page uses basic structure - the elements are laid out in a logical order, from top to bottom as we want them to appear. They follow a flow. &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/AElizaBergs/embed/eYdjrNE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;A page without CSS to explicitly change the ordering or positioning of elements (a page in default &lt;code&gt;static&lt;/code&gt;) is said to be in &lt;strong&gt;Normal Flow&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;When a page is in Normal Flow, elements are displayed one after another, in block dimension, as they appear in the code. When the page is scrolled the elements scroll with it. &lt;/p&gt;

&lt;p&gt;The positional properties (&lt;code&gt;top&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, and &lt;code&gt;left&lt;/code&gt;) &lt;strong&gt;do not&lt;/strong&gt; effect an element that is positioned statically.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#position-relative" class="anchor"&gt;
  &lt;/a&gt;
  2️⃣ &lt;strong&gt;Position: Relative&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;When an element is moved by changing its positioning method (using the &lt;code&gt;position&lt;/code&gt; prop rather than &lt;code&gt;display&lt;/code&gt;), it's always being moved in reference to something - like another element, or itself. &lt;/p&gt;

&lt;p&gt;Applying &lt;code&gt;position: relative&lt;/code&gt; sets that reference to &lt;em&gt;where the element would be in Normal Flow&lt;/em&gt;. At first it won't look like it did much of anything, that's because the element won't move until a positional property tells it to.&lt;/p&gt;

&lt;p&gt;🙋‍♂️ Using the same example from above, the client wants us to center his profile image on the page. We could do this by using relative positioning, and a little bit of hackiness. &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/AElizaBergs/embed/abmPmyp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The image element, with class name &lt;code&gt;profile_pic&lt;/code&gt;, was given a relative position and moved 35% to the left of that reference. This isn't the best approach to centering an element, but it works for now.&lt;/p&gt;

&lt;p&gt;☝ Keep in mind! The space the element takes in Normal Flow is reserved - surrounding elements will not shift to fit or fill the gap, or make room for the element elsewhere. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#position-absolute" class="anchor"&gt;
  &lt;/a&gt;
  3️⃣ &lt;strong&gt;Position: Absolute&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Applying &lt;code&gt;position: absolute&lt;/code&gt; on an element removes it, and the space it would normally take, from the document flow entirely. The point of reference is set to the elements &lt;em&gt;nearest positioned ancestor&lt;/em&gt;, and a &lt;em&gt;new stacking context&lt;/em&gt; is created. This context gives us access to the &lt;strong&gt;&lt;code&gt;z-index&lt;/code&gt;&lt;/strong&gt; property. &lt;/p&gt;

&lt;p&gt;If the element has no positioned ancestor (a parent element whose &lt;code&gt;position&lt;/code&gt; is anything &lt;em&gt;but&lt;/em&gt; static/default), the reference points to the document body (the viewport). This is the first behavior that can confuse a developer and cause bugs in a layout. &lt;/p&gt;

&lt;p&gt;🙋‍♂️ The client got back to us - he likes where the page is going, but wants to restructure the top of the page. He's requested that the &lt;code&gt;profile&lt;/code&gt; element be smaller, and centered at the top of the page. &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/AElizaBergs/embed/BaLvQYj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;image&lt;/code&gt; div was set to &lt;code&gt;position: relative&lt;/code&gt;, allowing us to center its direct child, the image element, using an absolute positioning trick. &lt;/p&gt;

&lt;p&gt;The basic syntax for this trick looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;☝ It's important to note that a stacking context is created when using a range of other CSS positioning and layout methods - usually with a default value of 0. This can result in elements falling behind others unexpectedly. We set the z-index of the &lt;code&gt;image&lt;/code&gt; div to -1, putting it further from the user, or behind other elements (like the navigation bar) in the stacking order. &lt;/p&gt;

&lt;p&gt;☝ If an absolutely positioned element isn't appearing where expected, first make sure the element has a positioned ancestor. Most of the the time we don’t want to use the viewport as the reference, and when we do it’s easier and better practice to use &lt;code&gt;position: fixed&lt;/code&gt; as we’ll see in a moment. Then make sure the positioned ancestor is the element you expect - going up or down a layer if needed. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#position-fixed" class="anchor"&gt;
  &lt;/a&gt;
  4️⃣ &lt;strong&gt;Position: Fixed&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Fixed positioning allows an element to be positioned according to the viewport. Like &lt;code&gt;absolute&lt;/code&gt;, the element will be completely removed from the document flow. A positional property, usually &lt;code&gt;top&lt;/code&gt;, needs to be used to view the element. &lt;/p&gt;

&lt;p&gt;🙋‍♂️ The client's back! They brought us some more content, and they also want a navigation bar that remains visible at all times. We'll use fixed positioning to achieve this.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/AElizaBergs/embed/yLaGzag?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;First, we gave the &lt;code&gt;nav&lt;/code&gt; element additional styling rules, and applied &lt;code&gt;position: fixed&lt;/code&gt;, setting the &lt;code&gt;top&lt;/code&gt; and &lt;code&gt;left&lt;/code&gt; properties. These instruct the browser to display the element as if it were pinned to the top left corner.  &lt;/p&gt;

&lt;p&gt;☝ Are other elements appearing over a fixed element? Remember, when an element's &lt;code&gt;position&lt;/code&gt; property is set to either &lt;code&gt;absolute&lt;/code&gt; or &lt;code&gt;relative&lt;/code&gt;, a new stacking context is created. Try setting the the &lt;code&gt;z-index&lt;/code&gt; of the fixed element to 1 or higher. &lt;/p&gt;

&lt;p&gt;☝ It is possible to set the reference of a fixed element to something &lt;em&gt;other&lt;/em&gt; than the viewport, though it’s not considered best practice. To achieve this, a containing parent must have the &lt;code&gt;perspective&lt;/code&gt;, &lt;code&gt;transform&lt;/code&gt;, or &lt;code&gt;filter&lt;/code&gt; property set to anything but the default of &lt;code&gt;none&lt;/code&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#position-sticky" class="anchor"&gt;
  &lt;/a&gt;
  5️⃣ &lt;strong&gt;Position: Sticky&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The last positioning method remaining is a bit of a hybrid - acting as both a relatively and a fixed positioned element at different times. An element with &lt;code&gt;position: sticky&lt;/code&gt; applied toggles, appearing in Normal Flow until a user scrolls to a certain point, when it then becomes fixed. &lt;/p&gt;

&lt;p&gt;🙋‍♂️ The client is thrilled with our work so far, as a final touch he wants to add a contact number to the page. He's asked that it's noticeable and easily located by the user. We'll use sticky positioning to make sure the user can always get ahold of Jack. &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/AElizaBergs/embed/wvzRrea?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;phone_number&lt;/code&gt; element was added at the top of the document, styled with some Windows 95-flavored subtlety, and given sticky positioning. When the user first comes to the page it will be nestled right below the nav bar, but as they scroll to read more it will sticky itself safely within view. &lt;/p&gt;

&lt;p&gt;☝ The sticky value is newer, and because of that it has less cross-browser support. Don’t worry too much about that though, the element will revert to fixed position and scroll with the user in the case that the sticky method isn’t supported. Additionally the &lt;a href="https://developers.google.com/web/updates/2012/08/Stick-your-landings-position-sticky-lands-in-WebKit"&gt;WebKit Sticky extension&lt;/a&gt; may help. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#a-word-on-normal-flow" class="anchor"&gt;
  &lt;/a&gt;
  A Word on Normal Flow
&lt;/h3&gt;

&lt;p&gt;Good document structure is an integral part of accessibility-minded design. A well structured document is crucial for users that will never see our carefully laid out CSS, but it's just as important to those who do. &lt;/p&gt;

&lt;p&gt;Normal flow is based on how a reader naturally traverses and consumes content. If an element needs to be moved relatively far from where it appears in normal flow, we should first consider adjusting its position in the document itself instead. &lt;/p&gt;




&lt;p&gt;The CSS &lt;code&gt;position&lt;/code&gt; prop is a powerful tool to control the layout of elements on a page, but it's not without its hidden nuances than can result in hard to solve bugs and weird behavior. I encourage you to play with the code in the examples, remove &lt;code&gt;position&lt;/code&gt; from parent elements, or try new ones to see how they stack. &lt;/p&gt;

&lt;p&gt;🔍 If you're still curious - check out the resources section below! I always come across great articles in the search to answer my own questions. &lt;/p&gt;




&lt;p&gt;&lt;strong&gt;&lt;em&gt;Resources:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.smashingmagazine.com/2018/05/guide-css-layout/"&gt;Getting Started with CSS Layout&lt;/a&gt;, Smashing Magazine&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.w3schools.com/css/css_positioning.asp"&gt;CSS Layout: The Position Property&lt;/a&gt;, w3schools&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position"&gt;Position&lt;/a&gt;, MDN&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.techonthenet.com/css/properties/position.php"&gt;CSS: Position Property&lt;/a&gt;, Tech on the Net&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context"&gt;The Stacking Context&lt;/a&gt;, MDN&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://philipwalton.com/articles/what-no-one-told-you-about-z-index/"&gt;What No One Told You About Z-Index&lt;/a&gt;, Philip Walton&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://learn.shayhowe.com/advanced-html-css/detailed-css-positioning/"&gt;Detailed Positioning&lt;/a&gt;, Shay Howe&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As always - Thank you for reading 🦄&lt;/p&gt;

</description>
      <category>css</category>
      <category>design</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Authentication and Authorisation 101</title>
      <author>Charlotte Fereday</author>
      <pubDate>Sat, 16 Jan 2021 18:18:39 +0000</pubDate>
      <link>https://dev.to/charlottebrf_99/authentication-and-authorisation-101-143e</link>
      <guid>https://dev.to/charlottebrf_99/authentication-and-authorisation-101-143e</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AsQfslLf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k3er9yend19vj5sxhttu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AsQfslLf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k3er9yend19vj5sxhttu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This blog post was originally published in Tes Engineering blog &lt;a href="https://engineering.tes.com/post/authentication-and-authorisation"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Last year I gave a talk at a &lt;a href="https://nodegirls.com/"&gt;Node Girls&lt;/a&gt; and &lt;a href="https://wearetechwomen.com/wosec-women-of-security/"&gt;Women of Security&lt;/a&gt;&lt;br&gt;
meetup to share a few things I have learned about authentication and authorisation since joining our &lt;a href="https://engineering.tes.com/post/tes-eng-sec-team/"&gt;Security Engineering team at Tes&lt;/a&gt;.&lt;br&gt;
You can see the video of this talk &lt;a href="https://youtu.be/dF19VrneJGo"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This post summarises some of the key points made during the talk, alongside some sketch notes and code snippets from &lt;a href="https://github.com/cfereday/pet-shop/tree/master/shop"&gt;an example app&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Authentication and authorisation both relate to the concept of identity. Though the words are similar their meanings are different. Let’s explore how...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#authentication" class="anchor"&gt;
  &lt;/a&gt;
  Authentication
&lt;/h3&gt;

&lt;p&gt;At the most basic level, we can say that authentication is the process of checking the identity of a user: &lt;em&gt;are you who you say you are?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CCcKRzRP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fhj9yddsyl8unrfkzpej.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CCcKRzRP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fhj9yddsyl8unrfkzpej.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The most common place that authentication is used is the Login Page of an application. During login user entered credentials are checked against what we have stored in the database. This allows us to verify that we know and trust a user is who they say they are, via, for example, a username and a password.&lt;/p&gt;

&lt;p&gt;Although the concept of authentication is straightforward, the technical process of its implementation is typically complex, because it’s absolutely vital to keep users’ data secure. For this reason, many companies opt to use a third party company, for example Google or Auth0, to handle the authentication process for them.&lt;/p&gt;

&lt;p&gt;Some companies choose to implement authentication themselves. Here are a couple of golden rules if you go down this route.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#rule-1-only-a-customer-should-know-their-password" class="anchor"&gt;
  &lt;/a&gt;
  Rule 1: Only a customer should know their password
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cY1geEFO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lfxxydyv4bm8uw7z0h3y.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cY1geEFO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lfxxydyv4bm8uw7z0h3y.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Keeping secret data secure is vitally important for any company to protect their users and their reputation. We want to mitigate against the risk that even if a bad actor got access to a database, they would never get a plain text password. The safest strategy to prevent this is to not store the plain text password at all.&lt;/p&gt;

&lt;p&gt;One solution is to hash passwords to carry out a ‘one way’ transformation which turns turns a plain text password into an unrecognisable string. We can use one way encryption to verify the password whilst making it very difficult for a bad actor to transform it to its original plain text value.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uIo-AtpK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hj5r38k6gbecpxf2l3st.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uIo-AtpK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hj5r38k6gbecpxf2l3st.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can safely hash passwords by using well maintained and recognised open source libraries, such as &lt;a href="https://www.npmjs.com/package/bcrypt"&gt;bcrypt library&lt;/a&gt;. Here’s an example code snippet using the &lt;a href="https://www.npmjs.com/package/bcrypt"&gt;bcrypt library&lt;/a&gt; to hash a password before storing it, to keep user credentials safe.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#rule-2-always-validate-user-input-before-using-it" class="anchor"&gt;
  &lt;/a&gt;
  Rule 2: Always validate user input before using it
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YmtBYrQ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/db1hktzyvnulrzushn1y.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YmtBYrQ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/db1hktzyvnulrzushn1y.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the most common places for an attack on an application is the Login page. Injection or hijacking attacks can aim to make our code do something we did not tell it to do, by sending an instruction where we would expect some user-entered data or credentials.&lt;/p&gt;

&lt;p&gt;Never trust the user input to safeguard applications, but rather always validate and transform data before using it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3jN1BFSG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3aqb1h0mnllgzynb8fon.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3jN1BFSG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3aqb1h0mnllgzynb8fon.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Again a widely used open source validation library like &lt;a href="https://github.com/hapijs/joi"&gt;Joi&lt;/a&gt; can help you easily create schemas and transform the data into safe objects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#authorisation" class="anchor"&gt;
  &lt;/a&gt;
  Authorisation
&lt;/h3&gt;

&lt;p&gt;After a user has been authenticated, we can move onto checking what resource they are authorised to access. It's important to control who-can-access-what to protect data, reputation and revenue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HMO_bNEI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l2jvf3sopq5p5ujydqts.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HMO_bNEI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l2jvf3sopq5p5ujydqts.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can use roles to indicate whether or not a user should have access to a resource. For instance, only an administrator should be able to access the admin page, or only a particular client has access to a specific endpoint.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#json-web-tokensjwt" class="anchor"&gt;
  &lt;/a&gt;
  JSON Web Tokens(JWT)
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://jwt.io/"&gt;Json Web Tokens (JWT)&lt;/a&gt; help to implement authorisation.&lt;br&gt;
JWT is an open standard that defines a way to securely transmit information between parties as a JSON object. &lt;/p&gt;

&lt;p&gt;We can trust this information because it is digitally signed and verified by server-side code.&lt;br&gt;
It helps authorisation systems scale, to ensure only those authorised have access to particular resources, and protect private personal data.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#sign" class="anchor"&gt;
  &lt;/a&gt;
  Sign
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bxpVQohx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kdkvc1pdx6y1abto8uur.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bxpVQohx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kdkvc1pdx6y1abto8uur.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A JWT is digitally signed with a secret or a public/private key pair that is only known to an application. This means an application can ensure that the JWT was signed from a trusted source (via said secret or corresponding public key) and prevents it from being secretly tampered with.&lt;/p&gt;

&lt;p&gt;Here’s an example of using the &lt;a href="https://www.npmjs.com/package/jsonwebtoken"&gt;jsonwebtoken library&lt;/a&gt; to sign a JWT where it is then added to a cookie.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VY2q_w5S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qk8p5lmavxhn1s3os8vp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VY2q_w5S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qk8p5lmavxhn1s3os8vp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Role data is included as part of the JWT, for instance in this example if the username is ‘admin’ then this user gets an ‘admin’ role. Clearly this management of roles is a hack for a toy project, in a real secure system there will be more sophisticated ways of managing admins.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#verify" class="anchor"&gt;
  &lt;/a&gt;
  Verify
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BFVCzlr9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/73wnxk3vqpwa3shz06gn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BFVCzlr9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/73wnxk3vqpwa3shz06gn.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once we have a JWT, we can verify that the token is valid on our servers, and only trust it if the JWT hasn’t been tampered with or expired.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yVwgGkq5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lggtypka2yhta4kvg5ba.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yVwgGkq5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lggtypka2yhta4kvg5ba.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.npmjs.com/package/jsonwebtoken"&gt;jsonwebtoken library&lt;/a&gt; allows us to digitally verify a user or client and effectively manage whether they should have access to a particular resource.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;Aside from learning more about authentication and authorisation, the aim of this blog is to show that as engineers we can learn a few good security practices and have access to many open source libraries to help us build more secure applications.&lt;/p&gt;

&lt;p&gt;Writing secure code is absolutely critical for our users - you don’t need to be a security expert to get started.&lt;/p&gt;

&lt;p&gt;If you’d like to learn more about some of the topics touched on here, I've listed below some articles that I found useful.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#further-reading" class="anchor"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#passwords" class="anchor"&gt;
  &lt;/a&gt;
  Passwords
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.theguardian.com/technology/2016/dec/15/passwords-hacking-hashing-salting-sha-2"&gt;Passwords and Jargon: The Guardian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html"&gt;OWASP Password storage cheat sheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/bcrypt"&gt;Bcrypt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#validation" class="anchor"&gt;
  &lt;/a&gt;
  Validation
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.google.com/about/appsecurity/learning/xss/index.html"&gt;Cross-Site Scripting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/node-security/the-most-common-xss-vulnerability-in-react-js-applications-2bdffbcc1fa0"&gt;The most common XSS in React JS applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/@hapi/joi"&gt;Hapi/joi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#json-web-token" class="anchor"&gt;
  &lt;/a&gt;
  JSON web token
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tools.ietf.org/html/rfc7519"&gt;Open Standards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://jwt.io/introduction/"&gt;JWT&lt;/a&gt; and &lt;a href="https://thehftguy.com/2020/02/18/jwt-is-awesome-heres-why/amp/"&gt;JWT is awesome&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/jsonwebtoken"&gt;jsonwebtoken&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#cookies" class="anchor"&gt;
  &lt;/a&gt;
  Cookies
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies"&gt;Mozilla&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/cookies/Cookie"&gt;Cookie Flags&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://owasp.org/www-community/controls/SecureFlag"&gt;OWASP Secure Cookie Flag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://owasp.org/www-community/HttpOnly"&gt;Http Only Flag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.allaboutcookies.org/cookies/cookies-the-same.html"&gt;Session vs Persistent Cookies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>security</category>
    </item>
    <item>
      <title>The 7 JavaScript Skills You Need For React (+ Practical Examples)</title>
      <author>Reed Barger</author>
      <pubDate>Sat, 16 Jan 2021 15:41:53 +0000</pubDate>
      <link>https://dev.to/reedbarger/the-7-javascript-skills-you-need-for-react-practical-examples-1ida</link>
      <guid>https://dev.to/reedbarger/the-7-javascript-skills-you-need-for-react-practical-examples-1ida</guid>
      <description>&lt;p&gt;One of the most important things to understand about React is that &lt;em&gt;it is fundamentally JavaScript&lt;/em&gt;. This means that the better you are at JavaScript, the more successful you will be with React.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's break down the 7 essential concepts that you should know about JavaScript to master React.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And when I say these concepts are essential--they are used in every single application that a React developer makes, with little to no exceptions.&lt;/p&gt;

&lt;p&gt;Learning these concepts is one of the most valuable things you can do to accelerate your ability to make React projects and become a skilled React developer, so let's get started.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#want-your-own-copy-of-this-guide%E2%80%AC" class="anchor"&gt;
  &lt;/a&gt;
  Want Your Own Copy of this Guide?‬
&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://bit.ly/7-js-skills-for-react"&gt;&lt;strong&gt;Download the cheatsheet in PDF format here&lt;/strong&gt;&lt;/a&gt; (it takes 5 seconds).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-function-declarations-and-arrow-functions" class="anchor"&gt;
  &lt;/a&gt;
  1. Function Declarations and Arrow Functions
&lt;/h2&gt;

&lt;p&gt;The basis of any React application is the &lt;strong&gt;component&lt;/strong&gt;. In React, components are defined with both JavaScript functions and classes. But unlike JavaScript functions, React components return JSX elements that are used to structure our application interface.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// JavaScript function: returns any valid JavaScript type&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;javascriptFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// React function component: returns JSX&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ReactComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note the different casing between the names of JavaScript functions and React function components. JavaScript functions are named in camel casing, while React function components are written with pascal casing (in which all words are capitalized).&lt;/p&gt;

&lt;p&gt;There are two different ways to write a function in JavaScript. The traditional way, using the &lt;code&gt;function&lt;/code&gt; keyword, called a &lt;strong&gt;function declaration&lt;/strong&gt;. And as an &lt;strong&gt;arrow function&lt;/strong&gt;, which was introduced in ES6.&lt;/p&gt;

&lt;p&gt;Either function declarations or arrow functions can be used to write function components in React. The primary benefit of arrow functions is their succinctness. We can use several shorthands in order to write our functions to remove unnecessary boilerplate, such that we can even write it all on a single line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Function declaration syntax&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Arrow function syntax&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Arrow function syntax (shorthand)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;
&lt;span class="cm"&gt;/*
In the last example we are using several shorthands that arrow functions allow:

1. No parentheses around a single parameter
2. Implicit return (as compared to using the "return" keyword)
3. No curly braces for function body
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;One small benefit of using function declarations over arrow functions is that you don't have to worry about problems with &lt;strong&gt;hoisting&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Due to the JavaScript behavior of hoisting, you can use multiple function components made with function declarations in a single file in whichever order you like. Function components made with arrow functions, however, cannot be ordered whichever way you like. Because JavaScript variables are hoisted, arrow function components must be declared before they are used:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Valid! FunctionDeclaration is hoisted */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FunctionDeclaration&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Invalid! ArrowFunction is NOT hoisted. Therefore, it must be declared before it is used */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ArrowFunction&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;FunctionDeclaration&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ArrowFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;again&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Another small difference between using the function declaration syntax is that you can immediately export a component from a file using &lt;code&gt;export default&lt;/code&gt; or &lt;code&gt;export&lt;/code&gt; before the function is declared. You can only use the &lt;code&gt;export&lt;/code&gt; keyword before arrow functions (default exports must be placed on a line below the component).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Function declaration syntax can be immediately exported with export default or export&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Arrow function syntax must use export only&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-template-literals" class="anchor"&gt;
  &lt;/a&gt;
  2. Template Literals
&lt;/h2&gt;

&lt;p&gt;JavaScript has a clumsy history of working with strings, particularly if you want to &lt;strong&gt;concatenate&lt;/strong&gt; or connect multiple strings together. Before the arrival of ES6, to add strings together, you needed to use the &lt;code&gt;+&lt;/code&gt; operator to add each string segment to one another.&lt;/p&gt;

&lt;p&gt;With the addition of ES6, we were given a newer form of string called a &lt;strong&gt;template literal&lt;/strong&gt;, which consists of two back ticks instead of single or double quotes. Instead of having to use the &lt;code&gt;+&lt;/code&gt;operator, we can connect strings by putting a JavaScript expressions (such as a variable), within a special &lt;code&gt;${}&lt;/code&gt; syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/*
Concatenating strings prior to ES6.
Notice the awkward space after the word Hello?
*/&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;React&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Hello React!&lt;/span&gt;

&lt;span class="cm"&gt;/*
Concatenating strings using template literals.
See how much more readable and predictable this code is?
*/&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sayHelloAgain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello again, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;sayHelloAgain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;React&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Hello again, React!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What's powerful about template literals is its ability to use any JavaScript expression (that is, anything in JavaScript that resolves to a value) within the &lt;code&gt;${}&lt;/code&gt; syntax.&lt;/p&gt;

&lt;p&gt;We can even include conditional logic using the ternary operator, which is perfect for conditionally adding or removing a class or style rule to a given JSX element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Go to react.new and paste this code in to see it work! */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isRedColor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setRedColor&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggleColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setRedColor&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
      &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleColor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
        &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isRedColor&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isRedColor&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;not red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In short, template literals are great for React whenever we need to dynamically create strings. For example, when we use string values that can change in our head or body elements in our site:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Head&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Shows site name (i.e. Reed Barger) at end of page title&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; | Reed Barger`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/title&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Head&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/main&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-short-conditionals-ampamp-ternary-operator" class="anchor"&gt;
  &lt;/a&gt;
  3. Short Conditionals: &amp;amp;&amp;amp;, ||, Ternary Operator
&lt;/h2&gt;

&lt;p&gt;Considering React is just JavaScript, it is very easy to conditionally show (or hide) JSX elements using simple if statements and sometimes switch statements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isLoggedIn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Shows: Welcome back!&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Welcome&lt;/span&gt; &lt;span class="nx"&gt;back&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Who&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With the help of some essential JavaScript operators, we cut down on repetition and make our code more concise. We can transform the if statement above in to the following, using the &lt;strong&gt;ternary operator.&lt;/strong&gt; The ternary operator functions exactly the same as an if-statement, but it is shorter, is an expression (not a statement), and can be inserted within JSX:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Shows: Welcome back!&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Welcome&lt;/span&gt; &lt;span class="nx"&gt;back&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt; : &amp;lt;div&amp;gt;Who are you&lt;/span&gt;&lt;span class="se"&gt;?&lt;/span&gt;&lt;span class="sr"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Ternary operators can also be used inside curly braces (again, since it is an expression):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Shows: Welcome back!&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Welcome back!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Who are you?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If we were to change the example above and only wanted to show text if the user was logged in (if &lt;code&gt;isLoggedIn&lt;/code&gt; is true), this would be a great use case for the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; (and) operator.&lt;/p&gt;

&lt;p&gt;If the first value (&lt;strong&gt;operand&lt;/strong&gt;) in the conditional is true, &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator displays the second operand. Otherwise it returns the first operand. And since it is &lt;strong&gt;falsy&lt;/strong&gt; (is a value automatically converted to the boolean &lt;code&gt;false&lt;/code&gt; by JavaScript), it is not rendered by JSX:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// If true: Welcome back!, if false: nothing&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Welcome back!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's say that we want the reverse of what we're doing now: to only say "Who are you?" if &lt;code&gt;isLoggedIn&lt;/code&gt; is false. If it's true, we won't show anything.&lt;/p&gt;

&lt;p&gt;For this logic, we can use the &lt;code&gt;||&lt;/code&gt; (or) operator. It essentially works opposite to the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator. If the first operand is true, the first (falsy) operand is returned. If the first operand is false, the second operand is returned.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// If true: nothing, if false: Who are you?&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Who are you?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-three-array-methods-map-filter-reduce" class="anchor"&gt;
  &lt;/a&gt;
  4. Three Array Methods: .map(), .filter(), .reduce()
&lt;/h2&gt;

&lt;p&gt;Inserting primitive values into JSX elements is easy, just use curly braces.&lt;/p&gt;

&lt;p&gt;We can insert any valid expressions, including variables that contain primitive values (strings, numbers, booleans, etc) as well as object properties that contain primitive values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;isEnglishSpeaker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;bio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;years&lt;/span&gt; &lt;span class="nx"&gt;old&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Speaks&lt;/span&gt; &lt;span class="nx"&gt;English&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;bio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isEnglishSpeaker&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What if we have an array and we want to iterate over that array to show each array element within an individual JSX element?&lt;/p&gt;

&lt;p&gt;For this, we can use the &lt;strong&gt;&lt;code&gt;.map()&lt;/code&gt;&lt;/strong&gt; method. It allows us to transform each element in our array in the way we specify with the inner function.&lt;/p&gt;

&lt;p&gt;Note that it is especially concise when used in combination with an arrow function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Note that this isn't exactly the same as the normal JavaScript .map() method, but is very similar. */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;programmers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jane&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;programmers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;programmer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;programmer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;))}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There are other flavors of the .map() method that perform related tasks and are important to know because they can be chained in combination with one another.&lt;/p&gt;

&lt;p&gt;Why? Because &lt;code&gt;.map()&lt;/code&gt;, like many array methods returns a shallow copy of the array that it has iterated over, which enables it's returned array to be passed onto the next method in the chain.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;.filter()&lt;/code&gt;&lt;/strong&gt;, as its name indicates, allows us to filter certain elements out of our array. For example, if we wanted to remove all names of programmers that started with "J", we could do so with &lt;code&gt;.filter()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;programmers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jane&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Returns 'Reed' */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;programmers&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;programmer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;programmer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;J&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;programmer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;programmer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;))}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It's important to understand that both &lt;code&gt;.map()&lt;/code&gt; and &lt;code&gt;.filter()&lt;/code&gt; are just different variations of the &lt;strong&gt;&lt;code&gt;.reduce()&lt;/code&gt;&lt;/strong&gt; array method, which is capable of transforming array values into virtually any data type, even non-array values.&lt;/p&gt;

&lt;p&gt;Here's &lt;code&gt;.reduce()&lt;/code&gt; performing the same operation as our &lt;code&gt;.filter()&lt;/code&gt; method above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;programmers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jane&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Returns 'Reed' */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;programmers&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;programmer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;programmer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;J&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;programmer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;programmer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;programmer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;))}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-object-tricks-property-shorthand-destructuring-spread-operator" class="anchor"&gt;
  &lt;/a&gt;
  5. Object Tricks: Property Shorthand, Destructuring, Spread Operator
&lt;/h2&gt;

&lt;p&gt;Like arrays, objects are a data structure that you need to be comfortable with when using React.&lt;/p&gt;

&lt;p&gt;Since objects exist for the sake of organized key-value storage, unlike arrays, you're going to need to be very comfortable accessing and manipulating object properties.&lt;/p&gt;

&lt;p&gt;To add properties to an object as you create it, you name the property and it's corresponding value. One very simple shorthand to remember is that if the property name is the same as the value, you only have to list the property name.&lt;/p&gt;

&lt;p&gt;This is the &lt;strong&gt;object property shorthand&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// instead of name: name, we can use...&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Reed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The standard way to access properties from an object is using the dot notation. An even more convenient approach, however, is &lt;strong&gt;object destructuring&lt;/strong&gt;. It allows us to extract properties as individual variables of the same name from a given object.&lt;/p&gt;

&lt;p&gt;It looks somewhat like you're writing an object in reverse, which is what makes the process intuitive. It's much nicer to use than having to use the object name multiple times to access each time you want to grab a value from it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;isEnglishSpeaker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Dot property access&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Object destructuring&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isEnglishSpeaker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;knowsEnglish&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Use ':' to rename a value as you destructure it&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;knowsEnglish&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now if you want to create objects from existing ones, you could list properties one-by-one, but that can get very repetitive.&lt;/p&gt;

&lt;p&gt;Instead of copying properties manually, you can spread all of an object's properties into another object (as you create it) using the &lt;strong&gt;object spread operator&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;isEnglishSpeaker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;isEnglishSpeaker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isEnglishSpeaker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Copy all of user's properties into secondUser&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secondUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What is great about the object spread is that you can spread in as many objects into a new one as you like, and you can order them like properties. But be aware that properties that come later with the same name will overwrite previous properties:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;moreUserInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;country&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;USA&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Copy all of user's properties into secondUser&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secondUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;moreUserInfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;computer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MacBook Pro&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;secondUser&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// { name: "Reed", age: 70, country: "USA", computer: "Macbook Pro" }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#6-promises-asyncawait-syntax" class="anchor"&gt;
  &lt;/a&gt;
  6: Promises + Async/Await Syntax
&lt;/h2&gt;

&lt;p&gt;Virtually every React application consists of &lt;strong&gt;asynchronous code&lt;/strong&gt;--code that takes a indefinite amount of time to be executed. Particularly if you need to get or change data from an external API using browser features like the &lt;strong&gt;Fetch API&lt;/strong&gt; or the third-party library &lt;strong&gt;axios&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Promises are used to resolve asynchronous code to make it resolve like normal, synchronous code, which we can read from top to bottom. Promises traditionally use callbacks to resolve our asynchronous code. We use the &lt;code&gt;.then()&lt;/code&gt; callback to resolve successfully resolved promises, while we use the &lt;code&gt;.catch()&lt;/code&gt; callback to resolve promises that respond with an error.&lt;/p&gt;

&lt;p&gt;Here is a real example of using React to fetch data from my Github API using the Fetch API to show my profile image. The data is resolved using promises:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Go to react.new and paste this code in to see it work! */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;avatar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setAvatar&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/*
      The first .then() let's us get JSON data from the response.
      The second .then() gets the url to my avatar and puts it in state.
    */&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://api.github.com/users/reedbarger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setAvatar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;avatar_url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error fetching data: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;avatar&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed Barger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Instead of always needing to use callbacks to resolve our data from a promise, we can use a cleaned syntax that looks identical to synchronous code, called the &lt;strong&gt;async/await syntax&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The async and await keywords are only used with functions (normal JavaScript functions, not React function components. To use them, we need to make sure our asynchronous code is in a function prepended with the keyword &lt;code&gt;async&lt;/code&gt;. Any promise's value can then be resolved by placing the keyword &lt;code&gt;await&lt;/code&gt; before it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Go to react.new and paste this code in to see it work! */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;avatar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setAvatar&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/*
    Note that because the function passed to useEffect cannot be async, we must create a separate function for our promise to be resolved in (fetchAvatar)
    */&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchAvatar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://api.github.com/users/reedbarger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;setAvatar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;avatar_url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;fetchAvatar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;avatar&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed Barger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We use &lt;code&gt;.catch()&lt;/code&gt; callback to handle errors within traditional promises, but how do you catch errors with async/await?&lt;/p&gt;

&lt;p&gt;We still use &lt;code&gt;.catch()&lt;/code&gt; and when we hit an error, such as when we have a response from our API that is in the 200 or 300 status range:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Go to react.new and paste this code in to see it work! */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;avatar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setAvatar&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchAvatar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="cm"&gt;/* Using an invalid user to create a 404 (not found) error */&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://api.github.com/users/reedbarge&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`An error has occured: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="cm"&gt;/* In development, you'll see this error message displayed on your screen */&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

      &lt;span class="nx"&gt;setAvatar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;avatar_url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;fetchAvatar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;avatar&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed Barger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#7-es-modules-import-export-syntax" class="anchor"&gt;
  &lt;/a&gt;
  7. ES Modules + Import / Export syntax
&lt;/h2&gt;

&lt;p&gt;ES6 gave us the ability to easily share code between our own JavaScript files as well as third-party libraries using &lt;strong&gt;ES modules&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Also, when we leverage tools like Webpack, we can import assets like images and svgs, as well as CSS files and use them as dynamic values in our code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* We're bringing into our file a library (React), a png image, and CSS styles */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;logo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../img/site-logo.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../styles/app.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;Welcome&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;logo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Site logo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The idea behind ES modules is to be able to split up our JavaScript code into different files, to make it modular or reusable across our app.&lt;/p&gt;

&lt;p&gt;As far as JavaScript code goes, we can import and export variables and functions. There are two ways of importing and exporting, as &lt;strong&gt;named imports/exports&lt;/strong&gt; and as &lt;strong&gt;default imports/exports&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There can only be one thing we make a default import or export per file and we can make as many things named imports/export as we like. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// constants.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// app.js&lt;/span&gt;
&lt;span class="c1"&gt;// Notice that named exports are imported between curly braces&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../constants.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can also write all of the exports at the end of the file instead of next to each variable or function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// constants.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// app.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../constants.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can also alias or rename what you are importing using the &lt;code&gt;as&lt;/code&gt; keyword for named imports. The benefit of default exports is that they can be named to whatever you like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// constants.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Reed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// app.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;getMyName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;myAge&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../constants.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;myAge&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getMyName&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#in-the-time-it-takes-to-watch-your-favorite-tv-show-you-can-start-a-100000-year-career-with-react" class="anchor"&gt;
  &lt;/a&gt;
  In the time it takes to watch your favorite TV show, you can start a $100,000 / year career with React.
&lt;/h3&gt;

&lt;p&gt;In this premium React training course, you can unlock the knowledge, skills, and confidence that deliver life-changing results in real dollars.&lt;/p&gt;

&lt;p&gt;Gain the insider information hundreds of developers have already used to master React, find their dream jobs, and take control of their future:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bit.ly/join-react-bootcamp"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w2usNUi9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reedbarger.nyc3.digitaloceanspaces.com/react-bootcamp-banner.png" alt="The React Bootcamp"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Click here to be notified when the course opens&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Protecting Your Privacy Online</title>
      <author>Mat Jones</author>
      <pubDate>Sat, 16 Jan 2021 14:29:23 +0000</pubDate>
      <link>https://dev.to/matjones/protecting-your-privacy-online-3bmc</link>
      <guid>https://dev.to/matjones/protecting-your-privacy-online-3bmc</guid>
      <description>&lt;p&gt;Do you know who’s tracking you?&lt;/p&gt;

&lt;p&gt;If you’re like most people, you use Google Chrome as your default browser, you use Google as your default search engine, and you don’t often think about online privacy much further than that. Why should huge tech companies make fortunes at the direct expense of their users’ privacy?&lt;/p&gt;

&lt;p&gt;There are a lot of ways you can protect yourself and your privacy online, if you care enough to make the effort.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#browser" class="anchor"&gt;
  &lt;/a&gt;
  Browser
&lt;/h1&gt;

&lt;p&gt;If you use Google Chrome as your default browser, &lt;em&gt;the browser itself&lt;/em&gt; is spying on you. Google wants to collect your user data so badly, &lt;a href="https://spreadprivacy.com/search-preference-menu-duckduckgo-elimination/"&gt;they won’t even let you use DuckDuckGo as your default search engine in most countries anymore&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Last week, it was uncovered that the browser setting in Chrome to clear site data and cookies on exit &lt;a href="https://www.theverge.com/2020/10/21/21526341/google-chrome-local-storage-cookies-youtube-search-bug-fix"&gt;was exempting Google and YouTube from these requests&lt;/a&gt;. Reportedly, it was a bug, but as a software engineer who works daily with web technologies, I find it &lt;strong&gt;extremely&lt;/strong&gt; hard to believe that it really was a bug, and not just a sneaky, unethical feature that Google got caught on.&lt;/p&gt;

&lt;p&gt;If you value your privacy &lt;strong&gt;at all&lt;/strong&gt;, I highly recommend you switch to &lt;a href="https://www.mozilla.org/en-US/privacy/firefox/"&gt;Mozilla Firefox&lt;/a&gt;. Firefox is built with privacy in mind, and the browser code is &lt;a href="https://firefox-source-docs.mozilla.org/contributing/index.html"&gt;open source&lt;/a&gt;. On top of that, Firefox has better performance than Google Chrome.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#search-engine" class="anchor"&gt;
  &lt;/a&gt;
  Search Engine
&lt;/h1&gt;

&lt;p&gt;Please, stop using Google. Not only does Google track everything you search for and everything you click on in search results, but they also manipulate search results &lt;a href="https://www.businessinsider.com/google-manipulates-search-results-report-2019-11"&gt;for their own gain&lt;/a&gt; and to &lt;a href="https://www.breitbart.com/tech/2019/04/10/report-google-manually-manipulates-search-results-to-exclude-conservative-sites/"&gt;suppress political opposition&lt;/a&gt;. Further, Google tracks what you do &lt;em&gt;after you leave Google&lt;/em&gt;, too. &lt;a href="https://spreadprivacy.com/followed-by-ads/"&gt;Google trackers exist on 75% of the top million websites&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://duckduckgo.com/spread"&gt;DuckDuckGo&lt;/a&gt; is a privacy-focused search engine that never tracks you, never collects or sells user data, and strives to provide unbiased results. DuckDuckGo also offers a &lt;a href="https://duckduckgo.com/app"&gt;browser extension and a mobile browser&lt;/a&gt; to help protect yourself everywhere on the web.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#facebook" class="anchor"&gt;
  &lt;/a&gt;
  Facebook
&lt;/h1&gt;

&lt;p&gt;My advice: just &lt;a href="https://www.facebook.com/help/224562897555674/"&gt;delete your Facebook account&lt;/a&gt;. Facebook is one of the worst offenders, if not &lt;em&gt;the&lt;/em&gt; worst offender. Same goes for any Facebook-owned companies, such as Instagram and WhatsApp.&lt;/p&gt;

&lt;p&gt;In 2016, Facebook &lt;a href="https://en.wikipedia.org/wiki/Facebook%E2%80%93Cambridge_Analytica_data_scandal"&gt;leaked millions of users’ private data to British consulting firm Cambridge Analytica without the users’ consent&lt;/a&gt;. This data &lt;strong&gt;was personally identifiable&lt;/strong&gt;, and primarily used for targeted political advertising.&lt;/p&gt;

&lt;p&gt;In 2019, Facebook ran a program to trick people into giving up all their data willingly by &lt;a href="https://www.techfoe.com/2019/01/facebook-is-paying-people-to-install.html"&gt;paying users to install a custom Facebook VPN app called Onavo&lt;/a&gt;, which allowed Facebook to just collect all meaningful data passing through the device, whether Facebook-related or not. This was a violation of Apple’s developer rules, so Onavo was quickly removed from the app store.&lt;/p&gt;

&lt;p&gt;If you still aren’t ready to give up on Facebook, at least install the &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/facebook-container/"&gt;Facebook Container&lt;/a&gt; extension for Firefox, built by Mozilla. Facebook Container makes Facebook run inside a special sandboxed container, making it hard for Facebook to track you to external websites or use 3rd party cookies.&lt;/p&gt;

&lt;p&gt;If you’re looking for a secure and private messaging alternative to WhatsApp, I recommend &lt;a href="https://telegram.org/"&gt;Telegram&lt;/a&gt; or &lt;a href="https://www.signal.org/"&gt;Signal&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#browser-extensions" class="anchor"&gt;
  &lt;/a&gt;
  Browser Extensions
&lt;/h1&gt;

&lt;p&gt;If you’re looking to take privacy more seriously, there are several browser extensions I use and recommend for blocking trackers, ads, and other malware. All of these extensions are available for both Chrome and Firefox. They’re also all open source, meaning anyone can view or submit patches for the code. Open source is &lt;a href="https://dwheeler.com/secure-programs/Secure-Programs-HOWTO/open-source-security.html"&gt;generally considered good for security&lt;/a&gt;. In software development, &lt;a href="https://en.wikipedia.org/wiki/Linus%27s_law"&gt;Linus’s Law&lt;/a&gt; states:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given a large enough beta-tester and co-developer base, almost every problem will be characterized quickly and the fix obvious to someone.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Open source projects of sufficient size and traction have potentially thousands of contributors and testers actively working to find and resolve bugs and vulnerabilities.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#duckduckgo-privacy-essentials" class="anchor"&gt;
  &lt;/a&gt;
  DuckDuckGo Privacy Essentials
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/duckduckgo-for-firefox/"&gt;Download&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tired of being tracked online? We can help. At DuckDuckGo, we believe online privacy should be simple.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;  Blocks hidden trackers&lt;/li&gt;
&lt;li&gt;  Enforce HTTPS encrypted connections where possible&lt;/li&gt;
&lt;li&gt;  Gives each website a “Privacy Grade” (A-F) so you can see how protected you are at a glance&lt;/li&gt;
&lt;li&gt;  Option to send standardized &lt;a href="https://globalprivacycontrol.org/"&gt;Global Privacy Control&lt;/a&gt; signal to websites you visit&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/duckduckgo/duckduckgo-privacy-extension"&gt;Open source&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#ublock-origin" class="anchor"&gt;
  &lt;/a&gt;
  uBlock Origin
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/ublock-origin/"&gt;Download&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;uBlock Origin is &lt;strong&gt;not&lt;/strong&gt; an “ad blocker”, it’s a wide-spectrum content blocker with CPU and memory efficiency as a primary feature.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;  Filters and blocks content based on block lists&lt;/li&gt;
&lt;li&gt;  Add additional popular community block lists&lt;/li&gt;
&lt;li&gt;  Block specific elements on a page manually or automatically&lt;/li&gt;
&lt;li&gt;  Add custom global or local filtering and blocking rules for content and/or Javascript&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/gorhill/uBlock"&gt;Open source&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#privacy-badger" class="anchor"&gt;
  &lt;/a&gt;
  Privacy Badger
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/privacy-badger17/"&gt;Download&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Privacy Badger automatically learns to block invisible trackers. Instead of keeping lists of what to block, Privacy Badger automatically discovers trackers based on their behavior.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;  Sends standardized &lt;a href="https://globalprivacycontrol.org/"&gt;Global Privacy Control&lt;/a&gt; and &lt;a href="https://www.eff.org/issues/do-not-track"&gt;Do Not Track&lt;/a&gt; signals to websites you visit&lt;/li&gt;
&lt;li&gt;  Blocks scripts that do not respect the Global Privacy Control or Do Not Track signals&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/EFForg/privacybadger"&gt;Open source&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#https-everywhere" class="anchor"&gt;
  &lt;/a&gt;
  HTTPS Everywhere
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/https-everywhere/"&gt;Download&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Many sites on the web offer some limited support for encryption over HTTPS, but make it difficult to use. For instance, they may default to unencrypted HTTP, or fill encrypted pages with links that go back to the unencrypted site. The HTTPS Everywhere extension fixes these problems by rewriting all requests to these sites to HTTPS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;  Attempts to upgrade insecure HTTP connections to secure HTTPS connections&lt;/li&gt;
&lt;li&gt;  If HTTP→HTTPS upgrade is not possible, blocks the insecure HTTP connection by default&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/EFForg/https-everywhere"&gt;Open source&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#clearurls" class="anchor"&gt;
  &lt;/a&gt;
  ClearURLs
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/clearurls/"&gt;Download&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This extension will automatically remove tracking elements from URLs to help protect your privacy when browsing through the Internet.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;  Automatically removes URL tracking parameters like Google Analytics parameters and Amazon tracking parameters&lt;/li&gt;
&lt;li&gt;  Uses over 250 URL matching rules, matches a huge set of trackers&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://gitlab.com/KevinRoebert/ClearUrls"&gt;Open source&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#dns" class="anchor"&gt;
  &lt;/a&gt;
  DNS
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e2OzE7WE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fjyyuvz1hykxervd1c48.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e2OzE7WE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fjyyuvz1hykxervd1c48.png" alt="Statistics from my Technitium DNS server"&gt;&lt;/a&gt;&lt;/p&gt;
Real stats from my Technitium DNS server.



&lt;p&gt;If you want to take your privacy one step further, you can prevent your Internet Service Provider (ISP) from detecting every single site you request by running your own custom, encrypted &lt;a href="https://www.lifewire.com/what-is-a-dns-server-2625854"&gt;DNS server&lt;/a&gt;. I personally use and recommend &lt;a href="https://technitium.com/dns/"&gt;Technitium DNS&lt;/a&gt;, a free and open source DNS server.&lt;/p&gt;

&lt;p&gt;Technitium allows you to enforce that all DNS queries are encrypted, either via &lt;a href="https://en.wikipedia.org/wiki/DNS_over_TLS"&gt;DNS-over-TLS&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/DNS_over_HTTPS"&gt;DNS-over-HTTPS,&lt;/a&gt; which prevents your ISP from being able to see all of your DNS requests unencrypted. Additionally, you can block ads and malware that may have slipped through your other defenses by using a &lt;a href="https://blog.technitium.com/2018/10/blocking-internet-ads-using-dns-sinkhole.html"&gt;DNS Sinkhole&lt;/a&gt;. Basically, if a domain is requested which is in any of your configured block lists, Technitium just resolves the IP of the domain to an invalid IP address, 0.0.0.0.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7LaQCM7c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/od866qvj9cjggbkpsit4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7LaQCM7c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/od866qvj9cjggbkpsit4.png" alt="DNS blocked domains"&gt;&lt;/a&gt;&lt;/p&gt;
Top domaind blocked over the last one week by my Technitium DNS server



&lt;h1&gt;
  &lt;a href="#vpn" class="anchor"&gt;
  &lt;/a&gt;
  VPN
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PCoOs3cQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8lbyl028lyjx961qbgr1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PCoOs3cQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8lbyl028lyjx961qbgr1.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
Always use protection.



&lt;p&gt;If you want to truly be fully anonymous online, you’ll need to use a 3rd party &lt;a href="https://en.wikipedia.org/wiki/Virtual_private_network"&gt;VPN&lt;/a&gt; service. However, not all VPNs are created equal; you need to make sure you choose a VPN provider with a strict no-logging policy. I use and can recommend &lt;a href="https://nordvpn.com/features/strict-no-logs-policy/"&gt;NordVPN&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;NordVPN has a strict no-logging policy, and this policy has been verified by independent auditor PricewaterhouseCoopers AG, one of the &lt;a href="https://en.wikipedia.org/wiki/Big_Four_accounting_firms"&gt;Big Four auditing firms&lt;/a&gt;. NordVPN &lt;a href="https://support.nordvpn.com/General-info/Features/1061811142/Jurisdiction-we-operate-in.htm"&gt;operates within the jurisdiction of Panama&lt;/a&gt;, which has no legislation regarding mandatory data retention, unlike the US and EU; this is a good thing for a VPN provider. Such a strict no-logging policy could not exist legally under US or EU jurisdiction. You can even pay for your NordVPN subscription with cryptocurrency, without ever leaving a trace of your real identity.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-onion-router-tor" class="anchor"&gt;
  &lt;/a&gt;
  The Onion Router (Tor)
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FppOtxeq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fkarzixxtgxoyrwkmhgo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FppOtxeq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fkarzixxtgxoyrwkmhgo.png" alt="Tor logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to go &lt;a href="https://en.wikipedia.org/wiki/Edward_Snowden"&gt;Edward Snowden&lt;/a&gt; level private, NordVPN also has a feature called &lt;a href="https://nordvpn.com/features/onion-over-vpn/"&gt;Onion Over VPN&lt;/a&gt;. When connected to an Onion Over VPN server, all your internet traffic gets routed through a VPN server, then through a &lt;a href="https://www.torproject.org/"&gt;Tor&lt;/a&gt; proxy, and only then reaches the Internet. You can, of course, just use Tor directly via the &lt;a href="https://www.torproject.org/download/"&gt;Tor Browser&lt;/a&gt; without a VPN at all, but this still opens you up to some vulnerabilities.&lt;/p&gt;

&lt;p&gt;If you use Tor without a VPN, your ISP will know you are using Tor to access the internet, though this alone doesn’t compromise the actual data being sent and received over Tor. However, your IP address can still be compromised if there is a snooper, or multiple snoopers, in the network.&lt;/p&gt;

&lt;p&gt;Tor node servers are volunteer-operated; anyone, including authorities or other bad actors, can set up and operate a Tor node. While no single node is able to see the full network request or response, someone operating multiple servers which your request/response is routed through — especially entry or exist nodes — can discover your real IP address with a little work. For this reason, I still recommend using a VPN provider with Tor. That way, if your IP address is compromised, it’s just a VPN IP address and no real identifying information is compromised.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#i-have-nothing-to-hide-why-should-i-care" class="anchor"&gt;
  &lt;/a&gt;
  “I have nothing to hide. Why should I care?”
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--biJmcpXq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/806wxb0vir7sgo9tw5nf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--biJmcpXq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/806wxb0vir7sgo9tw5nf.jpg" alt="Edward Snowden"&gt;&lt;/a&gt;&lt;/p&gt;
If you’re asking this, Edward Snowden is disappointed.



&lt;h2&gt;
  &lt;a href="#privacy-is-your-right" class="anchor"&gt;
  &lt;/a&gt;
  Privacy Is Your Right
&lt;/h2&gt;

&lt;p&gt;Privacy is a right, but it’s not one we’ve always had; in fact, people in several authoritarian nations around the world, people still don’t have the right to privacy. And it’s one of the most important rights, right behind the right to free speech. Those who came before us fought so that we could enjoy the right to privacy, and dismissing that is grossly ignorant of history and its importance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#your-data-has-value" class="anchor"&gt;
  &lt;/a&gt;
  Your Data Has Value
&lt;/h2&gt;

&lt;p&gt;Google is &lt;a href="https://moneyinc.com/richest-companies-in-the-world-in-2019/"&gt;among the top 5 richest companies in the world&lt;/a&gt; when ranked by market cap. But the lion’s share of Google products are free; Gmail, Google Calendar, Google Drive, Google Photos, Google Meet, YouTube, etc. So how does Google make &lt;em&gt;so much money&lt;/em&gt;? Simple. They sell your personal user data to third parties. Why should a global mega-corporation be allowed to profit freely and massively from your personal user data?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-have-no-idea-how-much-is-out-there" class="anchor"&gt;
  &lt;/a&gt;
  You Have No Idea How Much Is Out There
&lt;/h2&gt;

&lt;p&gt;Most of the time, apathy about online privacy is actually a symptom of ignorance. Studies show that even those who are initially unbothered by online privacy issues &lt;a href="https://www.eff.org/files/willis_and_zeljkovic.pdf"&gt;become concerned when confronted with the amount and nature of data collection&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If a stranger asked you to to fill out a 150 question form regarding personal information, with the express intention to sell that data to 3rd parties, would you consent?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#honorable-mentions" class="anchor"&gt;
  &lt;/a&gt;
  Honorable Mentions
&lt;/h1&gt;

&lt;p&gt;There are several other privacy tools that I haven’t covered here, but are definitely worth an honorable mention.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#password-managers" class="anchor"&gt;
  &lt;/a&gt;
  Password Managers
&lt;/h2&gt;

&lt;p&gt;Everyone should be using a password manager. Reusing a password for multiple accounts is a security risk. A decent password manager can automatically detect signup forms in your browser and offer to generate a secure, strong password for you, sync your passwords between devices, and warn you if you have any weak, compromised, or reused passwords. I personally use a &lt;a href="https://1password.com/"&gt;1Password&lt;/a&gt; family account at home and a team account at work, and I can confidently recommend 1Password, but &lt;a href="https://www.dashlane.com/"&gt;Dashlane&lt;/a&gt; is another great option. If you’re looking for a free and completely offline solution, you can check out &lt;a href="https://keepassxc.org/"&gt;KeePassXC&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#privacytoolio" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://privacytools.io/"&gt;PrivacyTool.io&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  Privacy-respecting search engine to find more privacy tools&lt;/li&gt;
&lt;li&gt;  Privacy-focused services and software&lt;/li&gt;
&lt;li&gt;  Non-profit and open source&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#deleteme" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://joindeleteme.com/"&gt;DeleteMe&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  Automatically opt-out of the sale of your personal information by over 40 of the biggest data brokers&lt;/li&gt;
&lt;li&gt;  Provides DIY guides to manually opt-out for free&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#haveibeenpwnedcom" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://haveibeenpwned.com/"&gt;haveibeenpwned.com&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  Historical records of data breaches&lt;/li&gt;
&lt;li&gt;  Check if any accounts associated with your email address have been compromised&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>privacy</category>
      <category>security</category>
      <category>offthegrid</category>
    </item>
    <item>
      <title>3 affirmations for the next 365 days: on improving myself as a developer</title>
      <author>Pauline</author>
      <pubDate>Sat, 16 Jan 2021 14:16:19 +0000</pubDate>
      <link>https://dev.to/httpspauline/3-affirmations-for-the-next-365-days-on-improving-myself-as-a-developer-4po7</link>
      <guid>https://dev.to/httpspauline/3-affirmations-for-the-next-365-days-on-improving-myself-as-a-developer-4po7</guid>
      <description>&lt;p&gt;On this day exactly one year ago, I published a piece in which I talked about 6 habits that I wanted to create in order to level up as a developer (you can read it &lt;a href="https://dev.to/httpspauline/6-new-habits-i-m-building-to-level-up-as-a-junior-developer-1n24"&gt;here&lt;/a&gt;). &lt;/p&gt;

&lt;p&gt;I re-visited it a few days ago and found this little retrospective very valuable and enjoyable, which gives me more than enough reason to write an updated piece for the coming year. This time I am changing it up a little bit by turning it into a shorter list of ✨&lt;em&gt;&lt;strong&gt;affirmations&lt;/strong&gt;&lt;/em&gt;✨ that I hope to manifest (because truthfully, calling it "2021 goals" makes it sound like a checklist and gives me too much pressure).&lt;/p&gt;

&lt;p&gt;I'm again sharing this publicly mostly for accountability reasons, but hopefully this will also inspire you to think about some things you want to work on during the next few months!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-i-am-getting-better-at-creative-problemsolving" class="anchor"&gt;
  &lt;/a&gt;
  1. I am getting better at creative problem-solving
&lt;/h3&gt;

&lt;p&gt;Whenever I build features, I have the tendency to solely focus on making things work and getting features shipped at a steady pace. While this is not necessarily a bad thing in itself, I often find myself criticising my own code for not being "elegant" or "sophisticated" enough—the implementations I come up with are oftentimes rather basic and in my opinion are nowhere as clever as some of the implementations built by my peers. Although my code also gets the job done, moving forward, I'd like to pay more attention to how others structure their logic and to the feedback I get in PRs in order to improve my problem-solving skills. &lt;/p&gt;

&lt;p&gt;On top of this, I would also like to improve the quality of the code reviews I conduct. While I tend to test and review PRs of others quite thoroughly, the feedback I give has often been limited to nitpicks. I believe that deepening the understanding of the stack I use daily will also play a valuable role in levelling up my creative problem-solving skills (which I hope to achieve by doing more of the next item on this list)!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-i-build-side-projects-to-boost-my-learning-and-development" class="anchor"&gt;
  &lt;/a&gt;
  2. I build side projects to boost my learning and development
&lt;/h3&gt;

&lt;p&gt;You don't need to code 14 hours a day and have 50 side projects that are all hosted on dedicated domains to call yourself a developer. I do think, however, that working on small projects every once in a while is a great way to learn new skills. Last year, my side project completion rate was a whopping &lt;strong&gt;66.7%&lt;/strong&gt;! My secret to success, you ask? Well... &lt;em&gt;(whispers)&lt;/em&gt; I only finished 2 out of 3 tiny projects I started. Yes, you read that right. I can count the number of projects I started on one hand. I also started 2 different courses and out of those, finished a grand total of 0.&lt;/p&gt;

&lt;p&gt;Because of these not-so-impressive key results, I will be recycling this item from &lt;a href="https://dev.to/httpspauline/6-new-habits-i-m-building-to-level-up-as-a-junior-developer-1n24"&gt;last year's list&lt;/a&gt; and hopefully start more projects (and finish those courses 😅) while still saving time for other hobbies, too.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-i-am-an-active-voice-of-newjunior-developers" class="anchor"&gt;
  &lt;/a&gt;
  3. I am an active voice of new/junior developers
&lt;/h3&gt;

&lt;p&gt;Even though my employer dropped the &lt;code&gt;junior&lt;/code&gt; term from my job title (hooray!) at the beginning of the year, I still find it extremely important that every single engineering culture is one that's comfortable for all engineers regardless of their experience level, and one in which everyone gets heard (especially in spaces where senior engineers vastly outnumber junior engineers). &lt;/p&gt;

&lt;p&gt;This requires (but is not limited to) documenting clearly where needed, communicating with each other in an inclusive way, leading by example, and creating a psychologically safe space for everyone. Having this type of environment will not only empower junior engineers, but can also be very helpful for engineers who are new to your codebase. &lt;/p&gt;

&lt;p&gt;This means we're going to have to fight a few misconceptions here. I want to continue spreading the message that accommodating to new developers does &lt;strong&gt;not&lt;/strong&gt; mean you are going to slow down the pace at which you ship, or that you're going to lower your code quality standards. It means being empathetic, inclusive, and contributing to the growth of others (because every senior engineer was once a junior engineer, too). &lt;/p&gt;




&lt;p&gt;If you have made it this far, thank you for reading. 💚 I'd love to hear from you: &lt;strong&gt;what are some affirmations you're setting for yourself?&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>career</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What is Carl Bot For Discord?</title>
      <author>Simon Holdorf</author>
      <pubDate>Sat, 16 Jan 2021 13:39:41 +0000</pubDate>
      <link>https://dev.to/thesmartcoder/what-is-carl-bot-for-discord-2n6h</link>
      <guid>https://dev.to/thesmartcoder/what-is-carl-bot-for-discord-2n6h</guid>
      <description>&lt;p&gt;Running a Discord server is nothing short of an adventure, and while the platform offers you much freedom on how your community should look and function, there can be times when things can get too much.&lt;br&gt;
What with rowdy members, unexpected conflicts, civilized discussions taking a turn for the worst, and taking care of trolls, it can seem like an uphill battle trying to control and manage your Discord server. But the good news is you don't have to do it all.&lt;/p&gt;

&lt;p&gt;Discord is one of the best places to hang out, text, and chat about your favorite TV shows, video games, books, or other activities. While there is a Discord community for literally any category available under the sun, it can be a pain managing a large audience. But by installing and using bots, things become more manageable. &lt;/p&gt;

&lt;p&gt;In fact, you can use bots to manage your Discord server better and create streamlined processes for both existing and new members. Plus, they are free, and most of them come with a premium offer that gives you a whole set of other features to use along with the existing free features. And so today we'll be talking about Carl-Bot, how to use Carl bot, how to set it up and much more.&lt;/p&gt;

&lt;p&gt;So if you want to know how to make things easier for yourself as a Discord server manager and your members, keep on reading.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#chapter-1"&gt;What is Carl Bot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-2"&gt;Carl Bot Commands and Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-3"&gt;How to Set Up Carl Bot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#what-is-carl-bot" class="anchor"&gt;
  &lt;/a&gt;
  What is Carl Bot&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The Carl Bot is an advanced bot that allows you to manage logs, store chats, and create reaction roles, like many Discord server bots available online.  It also takes AutoMod to the next level by not letting spam material, attachments, or links through and penalizes the people who post such stuff. &lt;/p&gt;

&lt;p&gt;Plus, it lets you be on top of your user engagement through starboards and creating a friendly community for new members by posting welcomes messages. If you're still getting the hang of using the Discord server, diving into Carl bot may seem hard. It is better to use different bots available, like Dyno Bot. We have made an extensive guide on using the &lt;a href="https://thesmartcoder.dev/discord-dyno-bot/"&gt;Dyno Bot&lt;/a&gt; for your Discord server. &lt;/p&gt;

&lt;p&gt;Coming back to Carl bot, if you are up to the challenge of doing advanced custom changes to your Discord server, then Carl bot is the way to go. &lt;/p&gt;

&lt;p&gt;For starters, it has a whole list of features that give you much authorization and freedom to proceed with moderating members and the content that goes up on your Discord server and channels. We're going to talk about them in detail in the next section.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#carl-bot-commands-and-features" class="anchor"&gt;
  &lt;/a&gt;
  Carl Bot Commands and Features&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Carl bot has some fantastic features for managing and moderating your Discord server. Being used by more than 1,700,000 servers, here are some essential points to keep an eye out for:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reaction roles:&lt;/strong&gt; One of Carl bot's best features is the ability to set and define roles for members and moderators, which can be extremely beneficial for large communities. Once you set up a message for members to react to, a role will automatically be assigned to them depending upon the reaction you choose.&lt;/p&gt;

&lt;p&gt;There are more than 250 roles to choose from, and it is an effective way of limiting and banning spammers that can sneak into your Discord server. You can also write neat embeds without having to type out each emoji or role and can blacklist or whitelist available to your members.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Log chats and everything else:&lt;/strong&gt; you can also log every message that occurs in your server, member updates, number of members joined and left any updates you applied, and much more. It is a helpful tool to keep a backlog of all the events on your server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AutoMod to moderate effectively even when you're offline:&lt;/strong&gt; configuring AutoMod with Carl bot is highly beneficial as you can set the limit of the punishment members can receive for breaking any rules, setting those rules, handling spam, offensive language, and much more. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Welcome new members:&lt;/strong&gt; create automatic welcome messages for your new members or members who are leaving, and easily embed them with different variables.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Permission system:&lt;/strong&gt; the permission system in the Carl bot allows you to manage command rules in bulk from the main dashboard. It creates a system, where you're not annoying anyone else. And once set up, you won't have to interfere unless any new update or upgrade is required. It also allows you to customize commands and use the bot's potential to mutate commands' behavior or override default settings with ease. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-set-up-carl-bot" class="anchor"&gt;
  &lt;/a&gt;
  How to Set Up Carl Bot&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Now that you've become acquainted with Carl bot, we're sure you must be wondering how you can set it up. Well, that is a piece of cake and won't require much tweaking. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Follow these steps to set up Carl bot for your Discord Server:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to: &lt;a href="https://carl.gg"&gt;carl.gg&lt;/a&gt; in your web browser.&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;Login&lt;/strong&gt; in the upper right corner. Register your Discord server through your email address or enter your email details if you're already registered.
&lt;img src="//images.ctfassets.net/28643bqnqgzl/7mtLBSyMnO64h8Cqa1Qvnb/e2aff6a4c3908d7fdcf4af269ca1655e/what_is_carl_bot_1.png" alt="Register Carl Bot"&gt;
&lt;/li&gt;
&lt;li&gt;Once logged in, simply select your Discord server from the list available.
&lt;img src="//images.ctfassets.net/28643bqnqgzl/1CGk0FnNjd9O3YJcijCaQx/a2d8ecdfc9b939bd972e695f5647bfdc/what_is_carl_bot_2.png" alt="Select Discord Server for Carl Bot"&gt;
&lt;/li&gt;
&lt;li&gt;On the next page, select the features you want to include and press on &lt;strong&gt;Accept&lt;/strong&gt;.
&lt;img src="//images.ctfassets.net/28643bqnqgzl/2S0w5RuhKrHkba5AOCLNU2/fb067a184d1083c3523f6c44302e0cb1/what_is_carl_bot_3.png" alt="Select Features for Carl Bot"&gt;
&lt;/li&gt;
&lt;li&gt;Login back to your Discord Server, and you must be able to see the Carl bot present in your main dashboard.
&lt;img src="//images.ctfassets.net/28643bqnqgzl/1PRrN0pBz3bOfaQ42cgla5/e00db06e8cf37014aead0d592c007cdd/what_is_carl_bot_4.png" alt="Applay commands for Carl Bot"&gt;
&lt;/li&gt;
&lt;li&gt;Now go to the Commands tab on your Carl Bot dashboard, and you will be able to apply all the commands we've discussed above and much more.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you can see, setting up Carl bot for your Discord server is pretty easy and can be accomplished fast. We hope you found this article helpful.&lt;/p&gt;

&lt;p&gt;This post was originally published on &lt;a href="https://thesmartcoder.dev/carl-bot-discord/"&gt;The Smart Coder&lt;/a&gt; by Naomi Mazoto.&lt;/p&gt;

</description>
      <category>todayilearned</category>
    </item>
    <item>
      <title>How to Secure JWT in a Single-Page Application</title>
      <author>Nilanth</author>
      <pubDate>Sat, 16 Jan 2021 13:31:35 +0000</pubDate>
      <link>https://dev.to/nilanth/how-to-secure-jwt-in-a-single-page-application-cko</link>
      <guid>https://dev.to/nilanth/how-to-secure-jwt-in-a-single-page-application-cko</guid>
      <description>&lt;p&gt;Securely make JWT based authentication in React Application.&lt;/p&gt;

&lt;p&gt;In this article, we will see how to securely store the JWT token in a single page app for authentication.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-all-the-options-we-have-to-store-the-token-in-the-browser" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What are all the options we have to store the token in the browser?&lt;/strong&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Local storage&lt;/li&gt;
&lt;li&gt;Memory&lt;/li&gt;
&lt;li&gt;Cookie&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#jwt-in-local-storage" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;JWT in Local Storage&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Is local storage is secure to store a token? Let see now, Local storage is accessible from client-side only, so your API provider will set the JWT in the API response Authorization header as a bearer token in login or Register API if the status success. In React, we will get the JWT and store it in the local storage as below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--odFXOQo9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201583916/BySZXl1Q-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--odFXOQo9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201583916/BySZXl1Q-.png" alt="image_1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zPYqqfuv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201607785/o-kO4i1HJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zPYqqfuv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201607785/o-kO4i1HJ.png" alt="image_2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And for the subsequent request made from the react app, the JWT is taken from local storage and set in the API request Authorization header to maintain the user session&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mf-omBW_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201616626/-6pHlUeoE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mf-omBW_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201616626/-6pHlUeoE.png" alt="image_3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Values in local storage are accessible by javascript, so any cross-site script can get the JWT from local storage and gain your account access.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--doTCApD9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201625400/nMy_EhpMS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--doTCApD9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201625400/nMy_EhpMS.png" alt="image_4.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So we should &lt;strong&gt;not use local storage for storing&lt;/strong&gt; JWT if you are using, Please update your authentication architecture as local storage is not secure to store a token. Next, let's move to memory&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jwt-in-memory-react-state" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;JWT in Memory (React State)&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;React state variables will be assigned to default values when the app is refreshed or opened in a new tab, so if the default values are null, when the app is refreshed or opened in a new tab it will be set to null, so when we set the JWT in state variable it will disappear, so the user need to log in each time the app is refreshed or opened in a new tab or the app is closed, it will be poor User Experience. So we cannot store the JWT in the state variable.&lt;/p&gt;

&lt;p&gt;Before moving to &lt;strong&gt;JWT in cookie&lt;/strong&gt;, Let’s see about what is a cookie and its major attributes&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cookie" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Cookie&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;A cookie is another storage option available in a browser which has a expire time also, cookie also have some useful attributes to secure it from cross-site scripting (XSS) attacks. Let see what are they in detail&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#httponly" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;HttpOnly&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;A cookie with HttpOnly attribute is not accessible by Javascript, so we cannot get the cookie as below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let cookie= document.cookie; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;HttpOnly&lt;/strong&gt; cookie can be set and accessed only by the server-side script. This attribute helps to prevent cross-site scripting(XSS) attacks if it’s set with &lt;strong&gt;SameSite=strict&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#secure" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Secure&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;A cookie with &lt;strong&gt;Secure&lt;/strong&gt; attribute will be sent to the server only over the HTTPS request, not in an HTTP request. The &lt;strong&gt;Secure&lt;/strong&gt; cookie is encrypted in request and response, so &lt;strong&gt;Man-in-the-middle&lt;/strong&gt; attack is prevented by using Secure attribute with &lt;strong&gt;HttpOnly&lt;/strong&gt; and &lt;strong&gt;SameSite=strict&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#samesite" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;SameSite&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;A cookie with &lt;strong&gt;SameSite=strict&lt;/strong&gt; mentions that the cookie is available only for same site origin request not for cross-site request. Now let see how to use the cookie to store JWT.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jwt-in-cookie" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;JWT in Cookie&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;A cookie can be set from the server-side and also in client-side, First we can see how to set and get the JWT from the cookie in the React and using the browser console.&lt;/p&gt;

&lt;p&gt;The server set the JWT as a Bearer token in the Authorization response header, In client-side, the script has access to the token present in the header, we get the token from response header and set in the cookie as below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eJDxpZLs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201653012/obo0gzlkY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eJDxpZLs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201653012/obo0gzlkY.png" alt="image_5.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bUbMh4OP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201662218/I9lcm_i7i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bUbMh4OP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201662218/I9lcm_i7i.png" alt="image_6.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The cookie is set to the current domain by default and expiry date is set to 1st Jan 2021. The expiry date is based on the token validity so the token will be removed from browser cookie once the expiry date reaches.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oT1e_6xI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201672163/EBazPMiSL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oT1e_6xI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201672163/EBazPMiSL.png" alt="image_7.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The cookie needs to send as a bearer token in API request header on every request made from the client. So, for that, we can get it from the cookie using &lt;strong&gt;document.cookie&lt;/strong&gt; property as below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mY_qc52H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201679706/RD0LxcIUd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mY_qc52H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201679706/RD0LxcIUd.png" alt="image_8.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;document.cookie will return all cookies present against the domain, so we can use  &lt;a href="https://github.com/reactivestack/cookies/tree/master/packages/react-cookie"&gt;react-cookie&lt;/a&gt;  package to get a specific cookie as below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wEwlmtGx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201736323/WwLy9vpn3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wEwlmtGx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201736323/WwLy9vpn3.png" alt="image_9.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we can see that the token is set and get using the script, so we could conclude that handling JWT in the react will lead to XSS (Cross-Site Scripting) attacks same as we saw before while using local storage, but we saw two attributes earlier &lt;strong&gt;HttpOnly&lt;/strong&gt; and &lt;strong&gt;Secure&lt;/strong&gt;, by setting these attributes will avoid these attacks. But javascript has no access to &lt;strong&gt;HttpOnly&lt;/strong&gt; attribute, Only server-side script can access &lt;strong&gt;HttpOnly&lt;/strong&gt; attributes. Let see how we can set the JWT from Server Side.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As previous examples, we saw that JWT is set as Bearer token in authorization header, But handling cookie in server-side we need set the cookie in &lt;strong&gt;Set-Cookie&lt;/strong&gt; header and not required to mention the token type as &lt;strong&gt;Bearer&lt;/strong&gt;, we can set the JWT directly in &lt;strong&gt;Set-Cookie&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here I am using Express.js to set JWT in the cookie from the server and we have set &lt;strong&gt;secure&lt;/strong&gt; and &lt;strong&gt;HttpOnly&lt;/strong&gt; as &lt;strong&gt;true&lt;/strong&gt; to restrict the javascript access of JWT in the cookie as below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4jNQjHZt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201767558/mmy3KhwL5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4jNQjHZt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201767558/mmy3KhwL5.png" alt="image_10.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The token in API response &lt;strong&gt;Set-Cookie&lt;/strong&gt; header will be saved to browser cookies like in below image&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LEsMFAIS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201775244/hjnVvFaA6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LEsMFAIS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201775244/hjnVvFaA6.png" alt="image_11.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c1X1gjoY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201802381/mi0YCETcW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c1X1gjoY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201802381/mi0YCETcW.png" alt="image_12.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JWT stored in the cookie will be appended in every API request headers automatically as below images&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J42vjG_P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201843110/EhyEAmcZe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J42vjG_P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201843110/EhyEAmcZe.png" alt="image_13.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oBfiUh8Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201851434/fqtg_d22v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oBfiUh8Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610201851434/fqtg_d22v.png" alt="image_14.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But remember that this approach only works if the React app and the BackEnd server hosted in &lt;strong&gt;same domain.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now your app is secured from Cross-Site Scripting (XSS) attacks.&lt;/p&gt;

</description>
      <category>react</category>
      <category>security</category>
      <category>cookies</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
