<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How we resolved a memory leak on our website</title>
      <author>Craig Taub</author>
      <pubDate>Thu, 20 May 2021 09:40:58 +0000</pubDate>
      <link>https://dev.to/fiit/how-we-resolved-a-memory-leak-on-our-website-1kf0</link>
      <guid>https://dev.to/fiit/how-we-resolved-a-memory-leak-on-our-website-1kf0</guid>
      <description>&lt;p&gt;The &lt;a href="https://fiit.tv"&gt;fiit website&lt;/a&gt; is used for creating subscriptions as well as helping users log into the app on TV platforms such as Sky and Amazon. As such it is an important asset to the business, but ultimately does not change very often.&lt;/p&gt;

&lt;p&gt;For some time there has been a memory leak on the website. How can we be sure? I think the memory graphs below are pretty self explanatory. This is the memory usage over a normal week (shows min/max and average in green). &lt;br&gt;
You can see every 1-2 days it would increase up to 100% before it eventually crashes and then starts the process all over again. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C-wHAxRx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6br6mly3khgemusns6eu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C-wHAxRx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6br6mly3khgemusns6eu.png" alt="Memory leak"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The stack is out of date, with some node modules being 3 years behind, and NodeJS being version 10 (which was released in October 2018). At time of writing LTS is 14.17.&lt;/p&gt;

&lt;p&gt;So we know there is a leak, it could be our code or it could be an out of date version. Where to start?&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#plan-a-local-profiling"&gt;
  &lt;/a&gt;
  Plan A - Local profiling
&lt;/h2&gt;

&lt;p&gt;We thought we would start by analysing our code. We would run the application in production mode, and take memory snapshots with Chrome dev-tools at various times. Comparing the difference between the snapshots should hopefully highlight the cause.&lt;/p&gt;

&lt;p&gt;However there were a couple of other problems to solve first...&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#problem-1-how-to-thrash-the-server-locally"&gt;
  &lt;/a&gt;
  Problem #1 - How to thrash the server locally?
&lt;/h3&gt;

&lt;p&gt;We used Apache Benchmark to do this. It is pretty great, you can set the total number of requests and number in parallel. E.g&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ab -c 50 -n 5000 -k &lt;a href="http://localhost:8080/"&gt;http://localhost:8080/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#problem-2-which-pages-to-thrash"&gt;
  &lt;/a&gt;
  Problem #2 - Which pages to thrash?
&lt;/h3&gt;

&lt;p&gt;Now we have a tool which we can use to replicate high user volume, where should we target?&lt;/p&gt;

&lt;p&gt;The website uses GA, so I grabbed the 2 most popular pages, one of which is the homepage, and planned to use both of those.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#problem-3-how-to-capture-the-memory-of-a-server-run-via-docker-containers"&gt;
  &lt;/a&gt;
  Problem #3 - How to capture the memory of a server run via docker containers?
&lt;/h3&gt;

&lt;p&gt;This has 3 steps&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;On the docker image expose the NodeJS debugger port (this is 9229). e.g &lt;code&gt;9229:7001&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;On the docker image start the application with the debugger on. E.g. &lt;code&gt;--inspect=0.0.0.0&lt;/code&gt; and garbage collection exposed  &lt;code&gt;--expose-gc&lt;/code&gt; (the reason is so we can trigger GC before we collect a snapshot, therefore isolating the parts of memory which are not being collected properly)&lt;/li&gt;
&lt;li&gt;Open Chrome inspector (&lt;code&gt;chrome://inspect/#devices&lt;/code&gt;) and add a target to &lt;code&gt;localhost:7001&lt;/code&gt; (our remote debugging port) &lt;/li&gt;
&lt;li&gt;Find the application you want to profile running in the list, click it and you will get an open Chrome dev-tools. From here we can use the "memory" tab to take heap snapshots.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now we are running our server application on a docker container, and can connect to the box's memory.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#local-profiling"&gt;
  &lt;/a&gt;
  Local profiling
&lt;/h3&gt;

&lt;p&gt;We decided to start with 1000 requests, 30 at a time.&lt;br&gt;
We would take a memory heap snapshot every 2 minutes for about 8 minutes, forcing a GC (&lt;code&gt;global.gc()&lt;/code&gt;) each time.&lt;br&gt;
Then at the end compare the different snapshot, looking for items with a large footprint i.e. 1% or greater.&lt;/p&gt;

&lt;p&gt;What we immediately found was an issue with how we used Lodash, and more specifically the &lt;code&gt;memoize()&lt;/code&gt; function. &lt;br&gt;
We were handing unique keys each time and thus creating a new instance of the function every single time. So the internal Map would just keep growing. This counts as a leak. &lt;br&gt;
The 2 culprits were found in the below snapshots, note the first internal array is the “node_modules”, and removed from code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Vv7HnaW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ixz18cwiyyy6fgictdn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Vv7HnaW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ixz18cwiyyy6fgictdn.png" alt="Memoize 3"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q5yzwYrF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8k7claq6sogo0867rdu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q5yzwYrF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8k7claq6sogo0867rdu.png" alt="Memoize 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There was also a 3rd instance of this which was actually worse than the others, so this was also removed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SbzFevuD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3i06x0a8p8hg5oscnsm0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SbzFevuD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3i06x0a8p8hg5oscnsm0.png" alt="Memoize 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Removing the memoize function fixed these particular problems. &lt;/p&gt;

&lt;p&gt;However the overall problem on production remained and the boxes continued to leak memory in the same way. &lt;/p&gt;

&lt;p&gt;At this point we felt it might be useful to get more insights to the leak on production.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#plan-b-more-production-visibility"&gt;
  &lt;/a&gt;
  Plan B - More production visibility
&lt;/h2&gt;

&lt;p&gt;We decided there were 2 ways to gather production box information.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-prometheus"&gt;
  &lt;/a&gt;
  1. Prometheus
&lt;/h3&gt;

&lt;p&gt;Add Prometheus to the box - it is fantastic at capturing all kinds of low level metrics and might prove insightful at helping us locate the source of the leak.&lt;br&gt;
The idea is we add a /metrics endpoint for the app which exposes certain stats, and we can gather and display them on our Grafana.&lt;/p&gt;

&lt;p&gt;This is an example of the /metrics output.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QhXN1icm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1r55pkqqv5vdfd60ios.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QhXN1icm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1r55pkqqv5vdfd60ios.png" alt="Prometheus"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the Koa library, the change looks something like this, using the popular library &lt;a href="https://www.npmjs.com/package/prom-client"&gt;prom-client&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Once this change was live we were able to analyse the results. &lt;br&gt;
One of the most interesting metrics is called "NodeJS heap space size used". It lets you examine the performance of different memory spaces.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;metricsRouter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;metricsRouter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/metrics&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contentType&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;metricsRouter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we found was that the "old space" is where the leak resides.&lt;/p&gt;

&lt;p&gt;To demonstrate the difference in memory space here is the "new space" in a period of time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xxmNmgit--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g6la4o23gnuyaxbgedz9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xxmNmgit--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g6la4o23gnuyaxbgedz9.png" alt="Heap space"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here is the same period of time with the "old space". A clear leak.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u2N1OLNq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ed80n64bi97dh1nqgdwj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u2N1OLNq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ed80n64bi97dh1nqgdwj.png" alt="Old space"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What this suggests is that we have objects surviving being garbage collected, the top 2 reasons for this is that we have pointers to other objects still in memory or we have raw data being continually written to. Both those reasons are typically caused by bad code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-heapdump"&gt;
  &lt;/a&gt;
  2. Heapdump
&lt;/h3&gt;

&lt;p&gt;Using the &lt;a href="https://www.npmjs.com/package/heapdump"&gt;heapdump&lt;/a&gt; package we can capture and download snapshots from production, put them into the Chrome memory profiler locally and try to locate the source of the leak. &lt;br&gt;
The idea is that the real box memory would contain the real leak, whereas local attempts to replicate had mostly failed to be consistent.&lt;/p&gt;

&lt;p&gt;There were 3 problems with this, most come from the fact we use AWS ECS Fargate on production distributing requests across multiple containers.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#problem-1"&gt;
  &lt;/a&gt;
  Problem #1
&lt;/h4&gt;

&lt;p&gt;We could not connect directly to a running box via terminal (ala a "docker exec" like command) as they are not exposed this way. Any "ECS" command is run in a new container and therefore would be useless at providing a memory snapshot we can use.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#problem-2"&gt;
  &lt;/a&gt;
  Problem #2
&lt;/h4&gt;

&lt;p&gt;Given "Problem #1" we knew we had to go with exposing a URL to download the snapshot. However we could not reliably hit the URL of the same box. The load balancer would keep moving us around boxes (we have not enabled sticky sessions) so we would take memory dumps of the different boxes which would prove useless once compared.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#problem-3"&gt;
  &lt;/a&gt;
  Problem #3
&lt;/h4&gt;

&lt;p&gt;Building a memory snapshot uses a heck of a lot of CPU and memory in itself. It is a very intensive task. So we had to make sure any URL that exposed this ability was behind some sort of authentication.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h3&gt;

&lt;p&gt;We added a url to the website and added authentication via time sensitive 1-way hash to ensure nobody could hit the page without our permission.&lt;/p&gt;

&lt;p&gt;The process to download the memory heap snapshot file was below.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Generate a valid hash locally, its tied to the start of the hour (I have omitted the real value)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;node -e "const moment = require('moment'); console.log(crypto.createHmac('sha256', 'secret-key').update(JSON.stringify({ date: moment.utc().startOf('hour').toISOString(), value: '[obfuscated]' })).digest('hex'));"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hit website url with &lt;code&gt;/heapdump?hash=&amp;lt;hash&amp;gt;&lt;/code&gt; to download the file&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The same hash code is run on the server and as long as they match the current memory snapshot is taken, this took care of Problem #1 and Problem #3.&lt;br&gt;
The snapshot filename is the ECS task-id (more details on how to capture that in &lt;a href="https://docs.aws.amazon.com/AmazonECS/latest/userguide/task-metadata-endpoint-v4-fargate.html"&gt;AWS docs here&lt;/a&gt;), so hitting it a couple of times should get around Problem #2 and generate profiles from the same box.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#analyse-production-snapshots"&gt;
  &lt;/a&gt;
  Analyse production snapshots
&lt;/h2&gt;

&lt;p&gt;We followed the same process as with our local profiling i.e. hitting a box then waiting a couple of minutes to hit it again. Then comparing the memory allocated between them.&lt;br&gt;
The 2 tasks profiled are shown in google dev-tools below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6o9j_e9s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v23q7k1p9zw7vqxth3bt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6o9j_e9s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v23q7k1p9zw7vqxth3bt.png" alt="Snap 1"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---2KcY-ey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oslhzhkwou6avty2yo0u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---2KcY-ey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oslhzhkwou6avty2yo0u.png" alt="Snap 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The good news is that the snapshots highlight the clear signs of a leak. The memory always starts around 50mb, after 10-15 minutes has moved to 85mb then another 10-15 minutes later is 122mb. Generating the snapshot will incur a memory cost, but it should not be that much.&lt;br&gt;
This is not something we were able to see locally.&lt;/p&gt;

&lt;p&gt;By looking at the “objects allocated” between the snaps with the large gaps (see below)  we found that an internal array was increasing by 4-5% (note: the top item is the snapshot itself, it requires memory to generate the snapshot). &lt;br&gt;
This applies to the &lt;strong&gt;retained memory&lt;/strong&gt;, which is important as it lets us know how much memory would be freed if this object was garbage collected. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RytNlO1j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8gu9k7bditeefthn112.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RytNlO1j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8gu9k7bditeefthn112.png" alt="Internal array issue"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As each entry was from a different library we decided it was possibly a NodeJS issue, perhaps maps/arrays were not as optimised in v10 as in v14?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#upgrading-nodejs"&gt;
  &lt;/a&gt;
  Upgrading NodeJS
&lt;/h2&gt;

&lt;p&gt;Upgrading the version of NodeJS that the website uses was fairly straightforward as we were not using any deprecated features from v10. We had to update the Docker image, CircleCI config and our local NVM config. All of which to the latest at the time, which was v14.16.&lt;/p&gt;

&lt;p&gt;The results were immediate..instead of a continual steep incline up, the memory remained stable, see below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vjP26CKO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gffeqs9llctd4jrwhy7y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vjP26CKO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gffeqs9llctd4jrwhy7y.png" alt="Mem fixed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The old space in the heap, which was previously the root cause, was looking much better after the upgrade too.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sgsx547H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/my734o2af9o0l9j4ht8b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sgsx547H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/my734o2af9o0l9j4ht8b.png" alt="Old space fixed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So that was it 🙌🏻 ! We profiled production, found the root cause, applied a fix and since that day the website's memory usage has been stable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lessons-learned"&gt;
  &lt;/a&gt;
  Lessons learned
&lt;/h2&gt;

&lt;p&gt;We learnt a lot through this journey, here we detail a couple of points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When dealing with a leak local profiling is a good place to start, but don’t pin all your hopes on finding the cause there&lt;/li&gt;
&lt;li&gt;Use prometheus to locate the memory space of a memory leak&lt;/li&gt;
&lt;li&gt;Compare memory heap dumps in google dev-tools to locate the source of the memory leak&lt;/li&gt;
&lt;li&gt;If you are considering collecting production memory snapshot, be aware of what your infrastructure can or cannot do&lt;/li&gt;
&lt;li&gt;Keep your dependencies up to date, if you don't eventually there will be a price to pay&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We hope you enjoyed this post. &lt;br&gt;
If you think you would be interested to work with the engineering department at Fiit check out our &lt;a href="https://fiit.tv/careers/"&gt;careers page here&lt;/a&gt; to see what's available.&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>memoryleak</category>
      <category>performance</category>
      <category>webdev</category>
    </item>
    <item>
      <title>One Simple Trick to Reduce Your Memory Usage in Python</title>
      <author>Connor</author>
      <pubDate>Thu, 20 May 2021 08:18:07 +0000</pubDate>
      <link>https://dev.to/connormcshane/one-simple-way-to-reduce-your-memory-usage-in-python-cdp</link>
      <guid>https://dev.to/connormcshane/one-simple-way-to-reduce-your-memory-usage-in-python-cdp</guid>
      <description>&lt;h1&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#Intro"&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#List%20Comprehension"&gt;List Comprehension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Generator%20Comprehension"&gt;Generator Comprehension&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;p&gt;Python is ultimate "getting things done" language, where you can soo easily write code and not worry too much about performance and memory. However once your program becomes large, large memory usage can significantly slow down your program. One easy way to reduce memory usage and speed up your programs is to &lt;strong&gt;switch your list comprehensions into generator comprehensions&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Lets explore this with a simple example program to sum up a range of numbers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#list-comprehension"&gt;
  &lt;/a&gt;
  List Comprehension
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;my_large_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_large_list&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"My list is &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_large_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; bytes"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;4999950000
My list is 824456 bytes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#generator-comprehension"&gt;
  &lt;/a&gt;
  Generator Comprehension
&lt;/h3&gt;

&lt;p&gt;My code is often filled with a lot of list comprehensions, where instead we could use generators instead. Generators operate like lists, except they are evaluated "lazily", so the values are grabbed when needed.&lt;/p&gt;

&lt;p&gt;All we need to do is use curly braces on all of our list comprehensions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;my_large_generator_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_large_list&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"My generator is &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_large_generator_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; bytes"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;4999950000
My list is 112 bytes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see both give the same result, however the generator only uses a fraction of the memory (112 bytes instead of 824456). When you have hundreds of lists floating in your code, switching them to generators is an easy way to save on memory and increase your program's speed :).&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Solution: Binary Tree Level Order Traversal</title>
      <author>seanpgallivan</author>
      <pubDate>Thu, 20 May 2021 07:58:22 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-binary-tree-level-order-traversal-36cg</link>
      <guid>https://dev.to/seanpgallivan/solution-binary-tree-level-order-traversal-36cg</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/binary-tree-level-order-traversal/discuss/1219328"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-102-medium-binary-tree-level-order-traversal"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/binary-tree-level-order-traversal/"&gt;Leetcode Problem #102 (&lt;em&gt;Medium&lt;/em&gt;): Binary Tree Level Order Traversal&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given the &lt;code&gt;root&lt;/code&gt; of a binary tree, return &lt;em&gt;the level order traversal of its nodes' values&lt;/em&gt;. (i.e., from left to right, level by level).&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;root = [3,9,20,null,null,15,7]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;[[3],[9,20],[15,7]]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Visual:&lt;/td&gt;
&lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s7SHVWgJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg" alt="Example 1 Visual"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;root = [1]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;[[1]]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 3:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;root = []&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;[]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The number of nodes in the tree is in the range &lt;code&gt;[0, 2000]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-1000 &amp;lt;= Node.val &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;A binary tree level order traversal generally recommends a &lt;strong&gt;breadth first search&lt;/strong&gt; (&lt;strong&gt;BFS&lt;/strong&gt;) approach with the use of a &lt;strong&gt;queue&lt;/strong&gt; data structure. When we process a node (&lt;strong&gt;curr&lt;/strong&gt;), we'll push the node's children onto the end of the &lt;strong&gt;queue&lt;/strong&gt; in the order in which we want to traverse (in this case, left to right). In this way, we'll have finished putting the next row in the &lt;strong&gt;queue&lt;/strong&gt; at the same time we finish iterating through this row.&lt;/p&gt;

&lt;p&gt;To help us keep track of the rows, we just nest the main loop inside another loop. At the beginning of the outer loop, we capture the &lt;strong&gt;queue&lt;/strong&gt; length, which will tell us how long the row is. Then we can iterate through that many nodes, popping them off the &lt;strong&gt;queue&lt;/strong&gt;'s front one at a time, then process any end-of-row instructions. In the case of this problem, that will mean pushing the current row array (&lt;strong&gt;row&lt;/strong&gt;) onto our answer array (&lt;strong&gt;ans&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;We'll continue this process until the &lt;strong&gt;queue&lt;/strong&gt; is empty, at which point we will have reached the end of the binary tree, and can &lt;strong&gt;return ans&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Time Complexity: O(N)&lt;/strong&gt; where &lt;strong&gt;N&lt;/strong&gt; is the number of nodes in the binary tree&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Space Complexity: O(N)&lt;/strong&gt; for our answer array&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;levelOrder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;qlen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;qlen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;            
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;levelOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;
        &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;[]),&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;qlen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qlen&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popleft&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;levelOrder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;TreeNode&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="nc"&gt;Deque&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ArrayDeque&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isEmpty&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;qlen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;qlen&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="nc"&gt;TreeNode&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;poll&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;val&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;levelOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;*&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;qlen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;qlen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;front&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop_front&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>AWS Services must for Front-end developers - Part 1</title>
      <author>Neha Sharma </author>
      <pubDate>Thu, 20 May 2021 07:52:07 +0000</pubDate>
      <link>https://dev.to/hellonehha/aws-services-must-for-front-end-developers-part-1-5g0d</link>
      <guid>https://dev.to/hellonehha/aws-services-must-for-front-end-developers-part-1-5g0d</guid>
      <description>&lt;p&gt;If you are a front-end developer and confuse about which service from AWS to learn and how it will help in your front-end career then this blog is for you.&lt;/p&gt;

&lt;p&gt;Before you jump into the services a few important things you need to do or should aware of how to login to AWS, Billing, console, and SDKs. If you are aware of these then please jump directly to the content.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#1-aws-account"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://signin.aws.amazon.com/signin"&gt;AWS Account&lt;/a&gt;
&lt;/h5&gt;

&lt;p&gt;Creating an AWS account is free of cost but you need a credit card to link to your account. There are many free-service AWS provides as well as Free-tier is also provided.&lt;/p&gt;

&lt;p&gt;1st step to start with AWS is to create your account. All it requires your email ID. &lt;/p&gt;

&lt;p&gt;When you have an account you can access the AWS services by using the console (browser-based interactive dashboard), APIs, and SDKs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5xXhZUuv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33oc3whf1bzx2barw3ly.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5xXhZUuv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33oc3whf1bzx2barw3ly.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#2-billing"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://console.aws.amazon.com/billing/home"&gt;Billing&lt;/a&gt;
&lt;/h5&gt;

&lt;p&gt;Once you have created your AWS account and started using the AWS service the next important step is to check the billing service. &lt;/p&gt;

&lt;p&gt;It is very common as a beginner you will end up billed for service you forgot to disable. Hence, the first task is to set the billing alert, and then the next step is to check billing to get insights into what is happening and where. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NfjSQZQQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnwnqvv1xdu0di7a0i8c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NfjSQZQQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnwnqvv1xdu0di7a0i8c.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#3-aws-console"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://console.aws.amazon.com/"&gt;AWS Console&lt;/a&gt;
&lt;/h5&gt;

&lt;p&gt;Once you logged into your account you will access the services from the AWS console. This is the browser-based console to easily access the AWS service.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EK86T1EU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p8cc9aw7yi3hffoq6hef.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EK86T1EU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p8cc9aw7yi3hffoq6hef.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#4-aws-sdk"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://aws.amazon.com/tools/"&gt;AWS SDK&lt;/a&gt;
&lt;/h5&gt;

&lt;p&gt;As a developer, it would be common to use the AWS SDKs in your UI code to connect UI to the AWS. &lt;/p&gt;

&lt;p&gt;Eg: to store user uploaded image to the S3. In such cases, we will use AWS SDKs.&lt;/p&gt;




&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;For this blog I will access the services from the AWS console.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#1-s3"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://s3.console.aws.amazon.com/s3"&gt;S3&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;S3 stands for &lt;em&gt;Simple Storage service&lt;/em&gt;. This is an ideal service to host static content (eg, images), website, snapshot (backup). It is serverless storage.&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Static vs Dynamic website?&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;

&lt;p&gt;The difference between the static and dynamic website is in dynamic websites the code executes at the server not just at the client side. &lt;/p&gt;

&lt;p&gt;Eg: Websites made on ReactJS mostly are static websites. Whereas if we create applications by using NextJS it would be dynamic. Reason: SPA all the execution happened at the client (browser) whereas NextJS will require the server to execute the code and send the response to the client (browser).&lt;/p&gt;

&lt;p&gt;For the front-end developer, this is the first AWS service you can start easily. All you need to do is create an AWS Account to access the S3 service. &lt;/p&gt;

&lt;p&gt;You can use the S3 from AWS Console, APIs, SDKs.To host any application you need to:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/KjKoHDppKU8"&gt;S3 Demo - Create your first Bucket&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cost"&gt;
  &lt;/a&gt;
  Cost
&lt;/h4&gt;

&lt;p&gt;Buckets are paid service. It charges you for both storage and retrieval. However, you can get some storage FREE under the free tier. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#best-practices"&gt;
  &lt;/a&gt;
  Best Practices
&lt;/h4&gt;

&lt;p&gt;1) The Bucket name should be unique&lt;/p&gt;

&lt;p&gt;2) Control the access of the bucket by the Policy&lt;/p&gt;

&lt;p&gt;3) Keep the versioning disable unless it is required.&lt;/p&gt;

&lt;p&gt;4) Versioning is paid service&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-route53"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://console.aws.amazon.com/route53/"&gt;Route53&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The next service is Route53. Once you have uploaded your website/app on AWS (S3 or EC2) we need to map our domain to our bucket or EC2.&lt;/p&gt;

&lt;p&gt;AWS provides Route53 service which is a Domain name Service to map our domain to the AWS EC2 or S3 Bucket. This will helps in accessing our web content through the domain. &lt;/p&gt;

&lt;p&gt;I have my domain &lt;a href="https://a11ytips.dev"&gt;a11ytips.dev&lt;/a&gt; from Google and mapped it to AWS through Route53.&lt;/p&gt;

&lt;p&gt;All we need to map our Namespace from the domain vendor to Route53.&lt;/p&gt;

&lt;p&gt;PS: After uploading your website on S3 you need to set the CloudFront, ACM, and Route53. We will learn about CloudFront and ACM in the next blog&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cost"&gt;
  &lt;/a&gt;
  Cost:
&lt;/h4&gt;

&lt;p&gt;This is a paid service but at a very nominal price. For now, I am paying USD 2.5/month (INR 183/month) for using Route 53&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-ec2"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://console.aws.amazon.com/ec2"&gt;EC2&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;For hosting static web apps or storing static content S3 is the service to use. What about dynamic websites? Eg: Where your NextJS apps will go? or NodeJS based applications? For such use cases, we have EC2. &lt;/p&gt;

&lt;p&gt;EC2 is very useful when you need servers of different OS, applications that require high availability, or running all the time.&lt;/p&gt;

&lt;p&gt;PS: EC2 is an easy way to get your billing clock running. So, if you are creating EC2 do delete it. Otherwise, you will end up paying for it.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cost"&gt;
  &lt;/a&gt;
  Cost:
&lt;/h4&gt;

&lt;p&gt;EC2 you need to pay for the idle time too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-lambda"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://console.aws.amazon.com/lambda/"&gt;Lambda&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Lambda is I would say is the best friend of every front developer. Lambda is a service where you can put your code (which needs to do some task on an event eg: sending notifications on the availability of a product to the consumers, upload pictures in S3 on submit of a form, or many such use-cases).&lt;/p&gt;

&lt;p&gt;Lambda is cost-effective, easy-to-use service for front-end developers. It is a computed service that is serverless and you will pay only when the lambda function (code) will execute. It could be in milliseconds too. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/PxlDH1zc3n4"&gt;Lambda Function Demo - Video Demo&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cost"&gt;
  &lt;/a&gt;
  Cost
&lt;/h4&gt;

&lt;p&gt;The cost of Lambda is lower as compare to EC2. We pay only for the time the lambda function is executing.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#bonus-lambda-vs-ec2"&gt;
  &lt;/a&gt;
  Bonus: Lambda VS EC2
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Area&lt;/th&gt;
&lt;th&gt;Lambda&lt;/th&gt;
&lt;th&gt;EC2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Server&lt;/td&gt;
&lt;td&gt;Serverless&lt;/td&gt;
&lt;td&gt;Serverful&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Time&lt;/td&gt;
&lt;td&gt;Ideal for tasks requires less time&lt;/td&gt;
&lt;td&gt;Tasks requires a lot of time &amp;gt; 15mins&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Idle time&lt;/td&gt;
&lt;td&gt;Not charged for idle time&lt;/td&gt;
&lt;td&gt;Charged for the idle time too&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Infra&lt;/td&gt;
&lt;td&gt;No need to think about infra&lt;/td&gt;
&lt;td&gt;Infra setup is required&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cost&lt;/td&gt;
&lt;td&gt;Less expensive compare to EC2&lt;/td&gt;
&lt;td&gt;We get charge for idle time too&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Trigger&lt;/td&gt;
&lt;td&gt;Event-driven&lt;/td&gt;
&lt;td&gt;It will keep running&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HTTP response&lt;/td&gt;
&lt;td&gt;In Some cases, additional cold start time to response back to HTTP request&lt;/td&gt;
&lt;td&gt;No cold start is required&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Languages Support&lt;/td&gt;
&lt;td&gt;Only 8 languages support&lt;/td&gt;
&lt;td&gt;open for any languages&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;p&gt;In the next blog, we will learn more services for the front developers. &lt;/p&gt;

&lt;p&gt;Happy Learning!! &lt;/p&gt;

&lt;p&gt;Follow me at &lt;a href="https://twitter.com/hellonehha"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/nehha/"&gt;Linkedin&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloudskills</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Scared about moving from Redux to Recoil? Use ReduxBridge!</title>
      <author>Salvatore Ravidà</author>
      <pubDate>Thu, 20 May 2021 07:46:22 +0000</pubDate>
      <link>https://dev.to/salvoravida/scared-about-moving-from-redux-to-recoil-use-reduxbridge-1ofj</link>
      <guid>https://dev.to/salvoravida/scared-about-moving-from-redux-to-recoil-use-reduxbridge-1ofj</guid>
      <description>&lt;p&gt;Scared about moving from Redux to Recoil? With ReduxBridge, you can easily test Recoil in a small feature while continue to use Redux. It allows you to access Redux states from Recoil, thinks for example, if the user state is on redux, and you need to read it from a new Widget that uses only Recoil! &lt;a href="https://github.com/salvoravida/recoil-toolkit"&gt;https://github.com/salvoravida/recoil-toolkit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gzFkEpP0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gkycp97qti65v6x2af5f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gzFkEpP0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gkycp97qti65v6x2af5f.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>recoil</category>
      <category>redux</category>
      <category>react</category>
      <category>statemanager</category>
    </item>
    <item>
      <title>Create a user in AWS IAM</title>
      <author>Ajit Singh</author>
      <pubDate>Thu, 20 May 2021 06:29:24 +0000</pubDate>
      <link>https://dev.to/ajitsinghkaler/create-a-user-in-aws-iam-al3</link>
      <guid>https://dev.to/ajitsinghkaler/create-a-user-in-aws-iam-al3</guid>
      <description>&lt;p&gt;First we studied the &lt;a href="https://dev.to/ajitsinghkaler/aws-identity-and-access-management-4jc2"&gt;basics of IAM&lt;/a&gt; now we do some hands on exercises. If you follow along most of the things we do while learning AWS will be completed in the AWS free tier. So you don't need to worry but remember always follow the clean up paragraph at the end of each hands on article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#iam-users"&gt;
  &lt;/a&gt;
  IAM Users
&lt;/h2&gt;

&lt;p&gt;Lets first create an admin user so that we don;t have to use our root user which can lead to a devastation.&lt;/p&gt;

&lt;p&gt;To create an admin user follow the steps below I've also provided images to follow along.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Login as you root user in your aws account. On this window select root user and login using your root id and password
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hPCGZ--b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nd4i2sc1copaa3zk3bie.png" alt="Amazon Root Login Window"&gt;
If you land on an IAM user window somehow select the option below&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aS7tPdLq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/935syfvnnfr2m312axjy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aS7tPdLq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/935syfvnnfr2m312axjy.png" alt="IAM user window"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Search for IAM in the top search bar and select the option highlighted below&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mvv9SOHe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vig6r5dotmlg85i8qcq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mvv9SOHe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vig6r5dotmlg85i8qcq.png" alt="AWS home Page"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select users from the sidebar and select add user from the top of the opened window&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g9RGDO0r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mt33vf1rzqwhxtgqcuoa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g9RGDO0r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mt33vf1rzqwhxtgqcuoa.png" alt="AWS create user step 1"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set user details as required. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Username: This is a unique username all across aws&lt;/li&gt;
&lt;li&gt;Access type: Programmatic access using this you get access using Keys which you use while connecting with API, CLI, SDK used mostly be software developers(We will learn about this later in more detail)&lt;/li&gt;
&lt;li&gt;Console Access: This provides access to the AWS management console using a password like the way we login into it &lt;/li&gt;
&lt;li&gt;Console Password: Form there you can use an auto generated AWS password or a custom password based on needs&lt;/li&gt;
&lt;li&gt;Require password reset: This is set if you want your user to reset his password on first login. Click on next after this&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O1vdzq0f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hp3xrsmsl1ic7j893fzt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O1vdzq0f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hp3xrsmsl1ic7j893fzt.png" alt="Add user details"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now we set the permissions for this user. This has 3 options

&lt;ul&gt;
&lt;li&gt;Add user to group: Here we can add a user to a group. Which we have not learnt so don't worry about this&lt;/li&gt;
&lt;li&gt;Copy permissions from existing user: We don't have any existing user so we can't do anything&lt;/li&gt;
&lt;li&gt;Attach existing policies directly: AWS has a lot of existing policies form which we can select check these policies and use it according to your needs. For this exercise we are creating a shadow root user as learnt in previous &lt;a href="https://dev.to/ajitsinghkaler/aws-identity-and-access-management-4jc2"&gt;article&lt;/a&gt;. You can use filter and filter the admin policy named AdministratorAccess. Select this and move onto the next step.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iU-TeXHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1zm4k1onv6xmvlz75ltf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iU-TeXHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1zm4k1onv6xmvlz75ltf.png" alt="User permissions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Now, we set the tags, imagine you are a big corporation and you want to manage your users. To data AWS provides us with tags which we can join to a user to identify it. Like Job Postion: Developer. Here you can add as many tags as you need to identify it.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0e63rAwJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81btlo7bs68aloka5s4j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0e63rAwJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81btlo7bs68aloka5s4j.png" alt="Add taga to IAM"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We review and check if everything is set properly. If not you can go back and change that. Now click on create user.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O0ZG5sTK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2nwujx98waft4ajcgvzt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O0ZG5sTK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2nwujx98waft4ajcgvzt.png" alt="Review Changes"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;New User is created with admin access. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UfvZb_gh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4borblifjp2qabfoxaq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UfvZb_gh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4borblifjp2qabfoxaq.png" alt="New user created"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-You can see it from the users tab in IAM.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mzy0RdKZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jesl0af9zt4qna769z15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mzy0RdKZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jesl0af9zt4qna769z15.png" alt="Dash Board User"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is it for today next we will create user groups.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>cloudskills</category>
      <category>cloudnewbie</category>
    </item>
    <item>
      <title>10+ Useful Tools🛠 For Web Developers👨‍💻In 2021</title>
      <author>themeselection</author>
      <pubDate>Thu, 20 May 2021 06:27:30 +0000</pubDate>
      <link>https://dev.to/theme_selection/10-useful-tools-for-web-developers-in-2021-42d1</link>
      <guid>https://dev.to/theme_selection/10-useful-tools-for-web-developers-in-2021-42d1</guid>
      <description>&lt;p&gt;Are you looking for the best tools for web development? Well, In this article, we are going to share with you some of the useful tools for web developers in 2021. These tools will make your work easier. &lt;/p&gt;

&lt;p&gt;Using web development tools always makes your work easier and more smooth. Web development is a field where you often need them and that's why we made this list so that you can bookmark this list and check any tool you are looking for.&lt;/p&gt;

&lt;p&gt;Well, there are lots of tools available, so we do not claim this list a complete one. You can share your favorite tools out from the list in the comments section below. &lt;/p&gt;

&lt;p&gt;You can also check the &lt;a href="https://dev.to/theme_selection/best-design-resources-websites-every-developer-should-bookmark-1p5d"&gt;Best design 🎨 resources websites every developer 💻 should bookmark🔖&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, without extending, let’s move on to the tools.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Szf3xbLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/13r0i2h8yx4gpt89lxor.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Szf3xbLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/13r0i2h8yx4gpt89lxor.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-devhintsio"&gt;
  &lt;/a&gt;
  1. &lt;a href="//Devhints.io"&gt;Devhints.io&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mA1QmNd9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pram3cauq6szyb51av76.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mA1QmNd9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pram3cauq6szyb51av76.png" alt="Devhints"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you will find sets of ready-made snippets with popular code snippets, configurations, and commands. Deviants can come in handy if you need to refresh your knowledge quickly or if you want to avoid googling and searching threads on Stack Overflow. &lt;/p&gt;

&lt;p&gt;If you don’t find the snippet you need, you can request the author to add it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-bootstrap-cheatsheet"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://bootstrap-cheatsheet.themeselection.com/"&gt;Bootstrap cheatsheet&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MCQccbjP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prro79jbeaq8ie9jp8f6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MCQccbjP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prro79jbeaq8ie9jp8f6.jpg" alt="Bootstrap cheatsheet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The bootstrap cheat sheet is an interactive list of Bootstrap 5 classes, variables, and mixins. It helps you easily find the differences between Bootstrap 4 and Bootstrap 5.&lt;/p&gt;

&lt;p&gt;Besides, it is aimed towards a large community of bootstrap users who find it difficult to search for bootstrap classes, variables, and mixins.&lt;/p&gt;

&lt;p&gt;Key Features are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Search for your  &lt;a href="https://bootstrap-cheatsheet.themeselection.com/"&gt;class&lt;/a&gt;,  &lt;a href="https://bootstrap-cheatsheet.themeselection.com/variables.html"&gt;variable&lt;/a&gt;, or  &lt;a href="https://bootstrap-cheatsheet.themeselection.com/mixins.html"&gt;mixin&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  Highlight Difference Between Bootstrap 4 &amp;amp; 5 Classes&lt;/li&gt;
&lt;li&gt;  Live preview of HTML &amp;amp; code snippet&lt;/li&gt;
&lt;li&gt;  Update code snippet on the go&lt;/li&gt;
&lt;li&gt;  Easily copy the code snippet and use it&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-carbon"&gt;
  &lt;/a&gt;
  3.  &lt;a href="http://carbon.now.sh/"&gt;Carbon&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FxPsjBav--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u537aekya3azo458pfjm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FxPsjBav--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u537aekya3azo458pfjm.png" alt="Carbon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you need to create a piece of code in the form of an image, Carbon is the perfect tool for this purpose. The application has support for many languages ​​and a ready set of different themes, thanks to which we can modify our snippet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-google-lighthouse"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://developers.google.com/web/tools/lighthouse"&gt;Google Lighthouse&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pa6qo1Db--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3d64yzo3p7bwtqmdyjnr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pa6qo1Db--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3d64yzo3p7bwtqmdyjnr.png" alt="Google Lighthouse"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is an open-source, automated tool for measuring the quality of web pages. It audits the performance, accessibility, and search engine optimization of web pages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-meta-tags"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://metatags.io/"&gt;Meta Tags&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UtskDfna--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4iajew4sylpcebtsow83.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UtskDfna--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4iajew4sylpcebtsow83.png" alt="Meta tags"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metatags.io/"&gt;Meta Tags&lt;/a&gt;  is a simple online tool that you can use to quickly check the meta tags for your website.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-frontendchecklistio"&gt;
  &lt;/a&gt;
  6. &lt;a href="http://frontendchecklist.io/"&gt;frontendchecklist.io&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pEPoyfas--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u1b9yw7a423qq01jihag.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pEPoyfas--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u1b9yw7a423qq01jihag.png" alt="frontendchecklist"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The process of creating a website can often be long, tedious, and very complicated. The consequence of this is that we can forget some things. The Front-End Checklist is here to help.&lt;/p&gt;

&lt;p&gt;This list includes 88 points to keep in mind when creating a website — quite a lot, right? In addition, each point has a priority marked. An additional advantage is the ability to create your own checklists and generate reports.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-gitignoreio"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://www.gitignore.io/"&gt;Gitignore.io&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W35Wum4m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ryw9t5z16uumydkqgpr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W35Wum4m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ryw9t5z16uumydkqgpr.png" alt="Gitignore"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I know that you don’t need higher math to create a .gitignore file, but a ready-made tool was created for that. The only thing you provide is information such as the operating system or development environment, and after a while, we can enjoy the finished .gitignore file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-regex101"&gt;
  &lt;/a&gt;
  8. &lt;a href="https://regex101.com/"&gt;Regex101&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8waNTOnr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k4u9gvk5855ipq1qebdl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8waNTOnr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k4u9gvk5855ipq1qebdl.png" alt="Regex101"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The application offers both instruction for creating regular expressions and a ready environment for writing and testing expressions. Additionally, after creating an expression, we get a detailed explanation of it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9ngrok"&gt;
  &lt;/a&gt;
  9.&lt;a href="https://ngrok.com/"&gt;Ngrok&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8aa2IhON--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9df46ux1ysb4c8lw0s03.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8aa2IhON--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9df46ux1ysb4c8lw0s03.png" alt="Ngrok"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you create a website on a local server and show off your work results to someone, you can use Ngrok. This tool allows you to “bring to the world” your local application.&lt;/p&gt;

&lt;p&gt;Installation and configuration take a while literally and is relatively simple. However, the paid variants offer much more possibilities, such as creating a whitelist with IP addresses or creating subdomains.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-nibbler"&gt;
  &lt;/a&gt;
  10. &lt;a href="https://nibbler.silktide.com/"&gt;Nibbler&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qrol-5Lx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gytyw19wup4rdgcyjkfm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qrol-5Lx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gytyw19wup4rdgcyjkfm.png" alt="Nibbler"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nibbler.silktide.com/"&gt;Nibbler&lt;/a&gt;  is a free online tool that you can use to scan your website. It will give you a report scoring the website for key areas, including accessibility, SEO, social media, and technology.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-what-the-web-can-do-today"&gt;
  &lt;/a&gt;
  11.  &lt;a href="https://whatwebcando.today/"&gt;What the web can do today&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bxXWIOQE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xaokzl6az2g1p1mx3p1l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bxXWIOQE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xaokzl6az2g1p1mx3p1l.png" alt="What the web can do today"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This tool allows you to check what APIs are available in the browser you are currently using. In addition, after selecting a given API, you will receive a set of instructions on how to use them. In addition, you also have access to data and charts showing how the browser's support for API data looks like.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12-website-vulnerability-scanner"&gt;
  &lt;/a&gt;
  12. &lt;a href="https://pentest-tools.com/website-vulnerability-scanning/website-scanner"&gt;Website Vulnerability Scanner&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J-amQsR1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tfb61lomos63nkmqttwo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J-amQsR1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tfb61lomos63nkmqttwo.png" alt="Website Vulnerability Scanner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Website Vulnerability Scanner is a free online tool developed by Pentest-Tools. You just have to plug in your URL and it will generate a detailed Security report.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13-cssreferenceio"&gt;
  &lt;/a&gt;
  13. &lt;a href="http://cssreference.io/"&gt;CSSreference.io&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8-Pho2Sj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymfgbsf89bwwp8morwva.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8-Pho2Sj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymfgbsf89bwwp8morwva.png" alt="CSSreference"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Accessible, short, and neat documentation for CSS. Personally, I prefer to use MDN, but someone will surely like it! For each CSS property, you get an image or an animation with an example.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#14-tinypng"&gt;
  &lt;/a&gt;
  14.  &lt;a href="https://tinypng.com/"&gt;Tinypng&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ArO4JuyC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rlfli28ahgbn4674tou8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ArO4JuyC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rlfli28ahgbn4674tou8.png" alt="Tiny PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TinyPNG uses smart lossy compression techniques to &lt;strong&gt;reduce the file size&lt;/strong&gt; of your PNG files. By selectively decreasing the number of colors in the image, fewer bytes are required to store the data. The effect is nearly invisible but it makes a very large difference in file size!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#15-clip-path-maker"&gt;
  &lt;/a&gt;
  15. &lt;a href="http://bennettfeely.com/clippy"&gt;Clip path maker&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e-Mxy72N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxqhktgpwyyaflkyxgkn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e-Mxy72N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxqhktgpwyyaflkyxgkn.png" alt="Clip path maker"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This simple tool allows us to automatically generate CSS code using clip-path, i.e., a tool for creating custom shapes using CSS. Of course, we already get ready-made shapes, but we also get the opportunity to modify them and create our own. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h3&gt;

&lt;p&gt;So, this was the collection of Useful tools for web developers in 2021. Here we have collected 10+ Useful Tools that will make your work smooth and easy.&lt;/p&gt;

&lt;p&gt;List down the tools you need and pick according to requirements from the list. We hope this collection helps you find the suitable one for your next project.&lt;/p&gt;

&lt;p&gt;Do tell us which one you are using from the list or out of the list in the comment section below. Also, don't forget to share this list with your colleagues as well, because sharing is caring.🤩&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#about-us"&gt;
  &lt;/a&gt;
  About Us:
&lt;/h3&gt;

&lt;p&gt;We, at  &lt;a href="https://themeselection.com/"&gt;ThemeSelection&lt;/a&gt;, provide selected high quality, modern design, professional and easy-to-use premium and  &lt;a href="https://themeselection.com/"&gt;free bootstrap admin template&lt;/a&gt;, and UI Kits. &lt;/p&gt;

&lt;p&gt;You can check some of the admin templates which have used the mentioned sources.  &lt;strong&gt;&lt;a href="https://themeselection.com/products/chameleon-admin-free-bootstrap-dashboard-template/"&gt;Chameleon Free Bootstrap Admin Template&lt;/a&gt;&lt;/strong&gt;  and  &lt;strong&gt;&lt;a href="https://themeselection.com/go/download-vuexy-vuejs/"&gt;Vuexy Vuejs, React, HTML &amp;amp; Laravel Admin Dashboard Template&lt;/a&gt;&lt;/strong&gt;  are the best example of how you can use these resources for making your project awesome.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>New Tailwind CSS blocks on Wickedblocks ( is 100% free ) a total of 72
</title>
      <author>michael-andreuzza</author>
      <pubDate>Thu, 20 May 2021 06:25:05 +0000</pubDate>
      <link>https://dev.to/michaelandreuzza/new-tailwind-css-blocks-on-wickedblocks-is-100-free-a-total-of-72-348b</link>
      <guid>https://dev.to/michaelandreuzza/new-tailwind-css-blocks-on-wickedblocks-is-100-free-a-total-of-72-348b</guid>
      <description>&lt;p&gt;Hello everyone!&lt;/p&gt;

&lt;p&gt;I have been updating &lt;a href="http://www.wickedblocks.dev"&gt;www.wickedblocks.dev&lt;/a&gt; because, well it was time&lt;/p&gt;

&lt;p&gt;So, what's new?&lt;/p&gt;

&lt;p&gt;I removed classes that I was using for myself ( how dumb of to use them for the blocks, right? )&lt;/p&gt;

&lt;p&gt;I redesigned these ones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;navigation&lt;/li&gt;
&lt;li&gt;bars -&lt;/li&gt;
&lt;li&gt;footers&lt;/li&gt;
&lt;li&gt;auth&lt;/li&gt;
&lt;li&gt;forms&lt;/li&gt;
&lt;li&gt;pricing&lt;/li&gt;
&lt;li&gt;footers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;then I have added new components, sections and blocks.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sidebars&lt;/li&gt;
&lt;li&gt;cards&lt;/li&gt;
&lt;li&gt;alerts&lt;/li&gt;
&lt;li&gt;stats&lt;/li&gt;
&lt;li&gt;content&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will be adding more as mentioned.&lt;/p&gt;

&lt;p&gt;Have a great day everyone and if you guys have any question just ask me here or twitter @ Mike_Andreuzza&lt;/p&gt;

&lt;p&gt;/mike&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>uiweekly</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Testeando una Spring Boot App dockerizada</title>
      <author>Roger Viñas Alcon</author>
      <pubDate>Thu, 20 May 2021 06:13:00 +0000</pubDate>
      <link>https://dev.to/adevintaspain/testeando-una-spring-boot-app-dockerizada-3k5</link>
      <guid>https://dev.to/adevintaspain/testeando-una-spring-boot-app-dockerizada-3k5</guid>
      <description>&lt;p&gt;Nuestro compañero &lt;strong&gt;Alex Castells&lt;/strong&gt; (&lt;a class="mentioned-user" href="https://dev.to/alextremp"&gt;@alextremp&lt;/a&gt;
) en su post &lt;a href="https://dev.to/adevintaspain/integrando-testcontainers-en-el-contexto-de-spring-en-nuestros-tests-5b7d"&gt;Integrando Testcontainers en el contexto de Spring en nuestros tests&lt;/a&gt; nos explicaba diferentes maneras para usar &lt;a href="https://www.testcontainers.org/"&gt;Testcontainers&lt;/a&gt; en un test de Spring Boot.&lt;/p&gt;

&lt;p&gt;Con &lt;strong&gt;Daniel Dios&lt;/strong&gt; (&lt;a class="mentioned-user" href="https://dev.to/danieldios"&gt;@danieldios&lt;/a&gt;
) queríamos llevarlo un paso más allá y usar Testcontainers para testear una Spring Boot Application una vez dockerizada.&lt;/p&gt;

&lt;p&gt;Por eso hicimos un live coding que puedes ver en 💜&lt;a href="https://www.twitch.tv/videos/1028060859"&gt;Twitch&lt;/a&gt; o ❤️&lt;a href="https://www.youtube.com/watch?v=gx99aHEszp0"&gt;Youtube&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Salvo algunos sustos 😰 ¡¡conseguimos nuestro objetivo 🤩!!&lt;/p&gt;

&lt;p&gt;Puedes consultar el código en &lt;a href="https://github.com/AdevintaSpain/spring-boot-docker"&gt;AdevintaSpain/spring-boot-docker&lt;/a&gt; y te resumimos los pasos a continuación:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=gx99aHEszp0&amp;amp;t=538s"&gt;1. Crear una Spring Boot Application con un simple RestController&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Usamos &lt;a href="https://start.spring.io/"&gt;Spring Initialzr&lt;/a&gt; para crear una Spring Boot Application y empezamos con un test del controlador que queremos implementar:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@SpringBootTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;webEnvironment&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;RANDOM_PORT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ApplicationTests&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nd"&gt;@LocalServerPort&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

  &lt;span class="nd"&gt;@Test&lt;/span&gt;
  &lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;`should&lt;/span&gt; &lt;span class="n"&gt;say&lt;/span&gt; &lt;span class="nf"&gt;hello`&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;webClient&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;WebClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;baseUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"http://localhost:$port"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;actual&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webClient&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/hello"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;exchangeToMono&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;bodyToMono&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;block&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nf"&gt;assertThat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;isEqualTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello Dani&amp;amp;Roger!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=gx99aHEszp0&amp;amp;t=1305s"&gt;2. Dockerizar la Spring Boot App&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Existen varias alternativas que puedes consultar en &lt;a href="https://spring.io/guides/gs/spring-boot-docker"&gt;Spring Boot with Docker&lt;/a&gt; y en más detalle en &lt;a href="https://spring.io/guides/topicals/spring-boot-docker"&gt;Topical Guide on Docker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Podríamos simplemente crear un &lt;code&gt;Dockerfile&lt;/code&gt; y hacer &lt;code&gt;docker build&lt;/code&gt; pero optamos por usar la tarea &lt;code&gt;bootBuildImage&lt;/code&gt; integrada en la Spring Boot gradle plugin. &lt;/p&gt;

&lt;p&gt;Por lo que entendemos esta tarea ya construye la docker image con el orden correcto de capas para asegurar que los elementos que cambian menos frecuentemente se incluyan en las primeras capas, minimizando así el tamaño y el tiempo de build.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./gradlew bootBuildImage
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=gx99aHEszp0&amp;amp;t=1634s"&gt;3. Testear la Spring Boot App dockerizada&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Usamos &lt;a href="https://www.testcontainers.org/features/creating_container/#creating-a-generic-container-based-on-an-image"&gt;Testcontainers&lt;/a&gt; con un generic container y las anotaciones de &lt;a href="https://www.testcontainers.org/test_framework_integration/junit_5"&gt;JUnit5&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;KGenericContainer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imageName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;GenericContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;KGenericContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;imageName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@Testcontainers&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ContainerTest&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;companion&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;appPort&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;

    &lt;span class="nd"&gt;@Container&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;KGenericContainer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;KGenericContainer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"spring-boot-docker:0.0.1-SNAPSHOT"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;withExposedPorts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;appPort&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nd"&gt;@Test&lt;/span&gt;
  &lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;`should&lt;/span&gt; &lt;span class="n"&gt;say&lt;/span&gt; &lt;span class="nf"&gt;hello`&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=gx99aHEszp0&amp;amp;t=2400s"&gt;4. Ejecutar bootBuildImage antes del test&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para que siempre testeemos la última versión, necesitamos generar la docker image antes de ejecutar el test, lo conseguimos con el &lt;code&gt;dependsOn&lt;/code&gt; de gradle:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;withType&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nf"&gt;useJUnitPlatform&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nf"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"bootBuildImage"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=gx99aHEszp0&amp;amp;t=2715s"&gt;5. Test source root adicional&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bajo &lt;code&gt;test&lt;/code&gt; deberíamos tener únicamente tests unitarios o máximo slice tests de Spring. Para nada tener tests que dependan de docker. Una manera de crear un test source root adicional para nuestros tests con docker es usar la gradle plugin &lt;a href="https://plugins.gradle.org/plugin/org.unbroken-dome.test-sets"&gt;org.unbroken-dome.test-sets&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nf"&gt;plugins&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"org.unbroken-dome.test-sets"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="s"&gt;"4.0.0"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;testSets&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"container-test"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"container-test"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"bootBuildImage"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=gx99aHEszp0&amp;amp;t=3427s"&gt;6. Añadimos una base de datos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para complicar un poco nuestra Spring Boot App añadimos una base de datos postgres y hacemos que nuestro &lt;code&gt;HelloController&lt;/code&gt; ejecute una sencilla query. Como siempre empezamos por el test:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Testcontainers&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ContainerTest&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;companion&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;postgresAlias&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"mypostgres"&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;appPort&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;network&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Network&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Network&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;newNetwork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nd"&gt;@Container&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;postgres&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;KGenericContainer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;KGenericContainer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"postgres:13"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;withNetwork&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;withNetworkAliases&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;postgresAlias&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;withEnv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"POSTGRES_USER"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"myuser"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;withEnv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"POSTGRES_PASSWORD"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"mypassword"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;withEnv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"POSTGRES_DB"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"mydb"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@Container&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;KGenericContainer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;KGenericContainer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"docker.image"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;withNetwork&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;postgres&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;withEnv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"DB_HOST"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;postgresAlias&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;withExposedPorts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;appPort&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nd"&gt;@Test&lt;/span&gt;
  &lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;`should&lt;/span&gt; &lt;span class="n"&gt;say&lt;/span&gt; &lt;span class="nf"&gt;hello`&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Puntos importantes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ambos containers deben compartir la misma network porque queremos que nuestra app tenga conectividad interna con la base de datos.&lt;/li&gt;
&lt;li&gt;Añadimos un network alias &lt;code&gt;mypostgres&lt;/code&gt; al container de la base de datos y el &lt;code&gt;dependsOn&lt;/code&gt; en el container de la app para que desde éste último el hostname &lt;code&gt;mypostgres&lt;/code&gt; se resuelva correctamente.&lt;/li&gt;
&lt;li&gt;Necesitamos exponer el puerto &lt;code&gt;8080&lt;/code&gt; del container de la app porque queremos ejecutar una request desde el test, que estará corriendo fuera de docker.&lt;/li&gt;
&lt;li&gt;No necesitamos exponer ningún puerto del container de la base de datos.&lt;/li&gt;
&lt;li&gt;Sobreescribimos la propiedad &lt;code&gt;db.hostname&lt;/code&gt; que usamos en nuestra Spring Boot App con la variable de entorno &lt;code&gt;DB_HOSTNAME&lt;/code&gt; y el valor &lt;code&gt;mypostgres&lt;/code&gt;. En el entorno real &lt;code&gt;db.hostname&lt;/code&gt; tomará el valor correspondiente a la base de datos real.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=gx99aHEszp0&amp;amp;t=6567s"&gt;6. Convertimos el SpringBootTest original en un WebMvcTest&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Queremos testear únicamente el &lt;code&gt;HelloController&lt;/code&gt;, sin que requiera conexión con la base de datos.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=gx99aHEszp0&amp;amp;t=7472s"&gt;7. WebMvcTest no sirve ¡necesitamos WebFluxTest!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unos momentos de pánico 😨 hasta que nos damos cuenta que estamos usando &lt;a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html"&gt;WebFlux&lt;/a&gt; con lo que el slice test que debemos usar es &lt;code&gt;@WebFluxTest&lt;/code&gt; y no &lt;code&gt;@WebMvcTest&lt;/code&gt; 🤦‍♂️ ...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=gx99aHEszp0&amp;amp;t=8523s"&gt;8. WebTestClient y Kotlin ¡madre mía!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pánico total 😱 no sabemos como implementar el &lt;code&gt;expectBody&lt;/code&gt; con &lt;code&gt;WebTestClient&lt;/code&gt; y Kotlin, al final lo salvamos con este workaround sacado de internet ... 😳:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Test&lt;/span&gt;
&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;`should&lt;/span&gt; &lt;span class="n"&gt;say&lt;/span&gt; &lt;span class="nf"&gt;hello`&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Dummy 1.0"&lt;/span&gt;
  &lt;span class="nf"&gt;doReturn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;`when`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;helloRepository&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;getVersion&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="n"&gt;webClient&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/hello"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;exchange&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;expectStatus&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;is2xxSuccessful&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;expectBodyList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;consumeWith&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;WebTestClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ListBodySpec&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nf"&gt;assertThat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;responseBody&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?:&lt;/span&gt; &lt;span class="s"&gt;"xx"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;isEqualTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello $version"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=gx99aHEszp0&amp;amp;t=8570s"&gt;9. ¡Tests en verde!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bueno al menos todos los tests están en verde 💚&lt;/p&gt;

&lt;p&gt;Y ya fuera de cámaras, con más tranquilidad ...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10. Así se usa el WebTestClient&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Tan fácil como esto, ¿en qué lío nos metimos? 😅&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Test&lt;/span&gt;
&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;`should&lt;/span&gt; &lt;span class="n"&gt;say&lt;/span&gt; &lt;span class="nf"&gt;hello`&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Dummy 1.0"&lt;/span&gt;
  &lt;span class="nf"&gt;doReturn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;`when`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;helloRepository&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;getVersion&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="n"&gt;webClient&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/hello"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;exchange&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;expectStatus&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;isOk&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expectBody&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;isEqualTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello $version"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;11. Versión de la docker image&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Para no tener fija la versión de la docker image de la app en el test de container, la pasamos como system property desde gradle:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nf"&gt;testSets&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;containerTest&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"container-test"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;containerTest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;systemProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"docker.image"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"${project.name}:${project.version}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Y la usamos en el test:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Container&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;KGenericContainer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;KGenericContainer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"docker.image"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Y eso es todo! Un saludiño de parte de &lt;a class="mentioned-user" href="https://dev.to/danieldios"&gt;@danieldios&lt;/a&gt;
 &amp;amp; &lt;a class="mentioned-user" href="https://dev.to/rogervinas"&gt;@rogervinas&lt;/a&gt;
  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://careers.adevinta.es/ofertas/?search=backend&amp;amp;stc=cs-ros%20adevinta-blog_dev.to_twitch_rogerdani_testing_docker_ofertas_backend"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4wy_Vnp1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jtqwu2hebatsux2pa8l8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>springboot</category>
      <category>docker</category>
      <category>testing</category>
    </item>
    <item>
      <title>Software Engineering</title>
      <author>Ankush Singh Gandhi</author>
      <pubDate>Thu, 20 May 2021 06:10:21 +0000</pubDate>
      <link>https://dev.to/ankushsinghgandhi/software-engineering-3gbm</link>
      <guid>https://dev.to/ankushsinghgandhi/software-engineering-3gbm</guid>
      <description>&lt;h1&gt;
  &lt;a href="#software-engineering"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Software Engineering🔽&lt;/strong&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;It is a systematic, disciplined, cost-effective technique for software development.&lt;/li&gt;
&lt;li&gt;It is an Engineering approach to develop software.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#software-engineering-process"&gt;
  &lt;/a&gt;
  🟢Software Engineering Process
&lt;/h3&gt;

&lt;p&gt;1) Software Development Lifecycle&lt;br&gt;
2) Requirements &amp;amp; Specification (SRS)&lt;br&gt;
3) Architecture&lt;br&gt;
4) Software Design Process&lt;br&gt;
5) Implementation&lt;br&gt;
6) Development&lt;br&gt;
7) Testing&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#software-development-lifecycle"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Software Development Lifecycle🔽&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;It is a process used by the software engineering industry to design develop and test high-quality software SDLC tends to produce high-quality software that meets customer expectations.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#sdlc-models"&gt;
  &lt;/a&gt;
  🟢SDLC Models
&lt;/h3&gt;

&lt;p&gt;There are processes, methodologies and frameworks range from specific prescriptive steps that can be used by the organization there are many SDLC models that have been developed to achieve the different required objective the model specifies various stages of the process and the order in which they are carried out.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Waterfall Model&lt;/li&gt;
&lt;li&gt;V Model&lt;/li&gt;
&lt;li&gt;Incremental Model&lt;/li&gt;
&lt;li&gt;Iterative Model&lt;/li&gt;
&lt;li&gt;Spiral Model&lt;/li&gt;
&lt;li&gt;RAD Model&lt;/li&gt;
&lt;li&gt;Prototype Model&lt;/li&gt;
&lt;li&gt;Agile Model&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#waterfall-model"&gt;
  &lt;/a&gt;
  🟢Waterfall Model
&lt;/h3&gt;

&lt;p&gt;It is a breakdown of project activities into linear sequential phases where each face depends on the deliverables of the previous one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZfwNmMyT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5yat5l6scectuaiijpos.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZfwNmMyT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5yat5l6scectuaiijpos.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#incremental-model"&gt;
  &lt;/a&gt;
  🟢Incremental Model
&lt;/h3&gt;

&lt;p&gt;The incremental build model is a method of software development where the model is designed, implemented, and tested incrementally (a little more is added each time) until the product is finished the product defined finished when it satisfies all requirements&lt;/p&gt;

&lt;p&gt;Each iteration passes through the requirement, design, coding, and testing phase and each subsequent release of the system adds function to the previous release until all designed functionality has been implemented.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_74UxLnw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ebu7xt0vb2isu5fixbyh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_74UxLnw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ebu7xt0vb2isu5fixbyh.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#iterative-model"&gt;
  &lt;/a&gt;
  🟢Iterative Model
&lt;/h3&gt;

&lt;p&gt;The iterative model is a particular implementation of a software development life cycle (SDLC) that focuses on an initial, simplified implementation, which then progressively gains more complexity and a broader feature set until the final system is complete. When discussing the iterative method, the concept of incremental development will also often be used liberally and interchangeably, which describes the incremental alterations made during the design and implementation of each new iteration.&lt;/p&gt;

&lt;p&gt;Unlike the more traditional waterfall model, which focuses on a stringent step-by-step process of development stages, the iterative model is best thought of as a cyclical process. After an initial planning phase, a small handful of stages are repeated over and over, with each completion of the cycle incrementally improving and iterating on the software. Enhancements can quickly be recognized and implemented throughout each iteration, allowing the next iteration to be at least marginally better than the last.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--717YDRj9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7xglfglflwwstaxnfrv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--717YDRj9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7xglfglflwwstaxnfrv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#spiral-model"&gt;
  &lt;/a&gt;
  🟢Spiral Model
&lt;/h3&gt;

&lt;p&gt;The spiral model combines the idea of iterative development with the systematic, controlled aspects of the waterfall model. This Spiral model is a combination of the iterative development process model and sequential linear development model i.e. the waterfall model with a very high emphasis on risk analysis. It allows incremental releases of the product or incremental refinement through each iteration around the spiral.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--29C46As1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtf8ji9nvv7ibhmzghin.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--29C46As1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtf8ji9nvv7ibhmzghin.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#agile-model"&gt;
  &lt;/a&gt;
  🟢Agile Model
&lt;/h3&gt;

&lt;p&gt;The meaning of Agile is swift or versatile." Agile process model" refers to a software development approach based on iterative development. Agile methods break tasks into smaller iterations or parts that do not directly involve long-term planning. The project scope and requirements are laid down at the beginning of the development process. Plans regarding the number of iterations, the duration, and the scope of each iteration are clearly defined in advance.&lt;/p&gt;

&lt;p&gt;Each iteration is considered as a short time "frame" in the Agile process model, which typically lasts from one to four weeks. The division of the entire project into smaller parts helps to minimize the project risk and to reduce the overall project delivery time requirements. Each iteration involves a team working through a full software development life cycle including planning, requirements analysis, design, coding, and testing before a working product is demonstrated to the client.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tl2SR4AM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gnmgxl3y9krunmwv4g94.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tl2SR4AM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gnmgxl3y9krunmwv4g94.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agile is a methodology. It's a way of thinking. It is NOT a model in and of itself.&lt;/p&gt;

&lt;p&gt;Agile was invented because the scope of software development was changing. Waterfall methods aren't bad, they're just slow, and not built for a lot of modern problems.&lt;/p&gt;

&lt;p&gt;This is largely due to the complexity of modern systems which make them hard to plan 100%. This means at some point, a change will be required, and production will stop until all the documents are updated.&lt;/p&gt;

&lt;p&gt;With agile however, we can move a little bit quicker. We are constantly looking for and adjusting to change.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#agile-manifesto"&gt;
  &lt;/a&gt;
  📌Agile Manifesto
&lt;/h3&gt;

&lt;p&gt;The agile manifesto is a set of guiding principles for agile development. They are: &lt;/p&gt;

&lt;p&gt;🔺Individuals and interactions over process and tools.&lt;/p&gt;

&lt;p&gt;🔺Working software over comprehensive documentation.&lt;/p&gt;

&lt;p&gt;🔺Customer collaboration over contract negotiation.&lt;/p&gt;

&lt;p&gt;🔺Responding to change over following a plan.&lt;/p&gt;

&lt;p&gt;With this set of rules, all agile models are created. Note, in here we aren't throwing out processes and tools, and we aren't going without a plan. We are simply just creating priorities within the development process. We want to make the piece of software that is needed. To do this, we need to keep communication channels open and collaborate with all involved.&lt;/p&gt;

&lt;p&gt;Through this manifesto, models were created that fit these rules.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#agile-models"&gt;
  &lt;/a&gt;
  📌Agile Models
&lt;/h3&gt;

&lt;p&gt;🔺Scrum - Scrum is focused on sprints. Sprints are these 1-4 week production cycles. We take the software, come up with a goal of where we want it to be, and then build it to there.&lt;/p&gt;

&lt;p&gt;Once we finish a sprint, we then go back to the stakeholders, show them the software, take suggestions, and move on to the next sprint.&lt;/p&gt;

&lt;p&gt;All of this allows us to stay flexible. We are communicating with the stakeholders almost every 2 weeks with this model. This means we are constantly able to take those suggestions and change the direction of development.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#for-more-deeper-understanding"&gt;
  &lt;/a&gt;
  For more deeper understanding
&lt;/h4&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ankushsinghgandhi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8acRaTd1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--hNCrq8eb--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/471579/90f99e7e-3d48-4883-aa30-a7c876528c99.png" alt="ankushsinghgandhi image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ankushsinghgandhi/scrum-cheat-sheet-16ab" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Scrum Cheat Sheet&lt;/h2&gt;
      &lt;h3&gt;Ankush Singh Gandhi ・ Feb 4 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;🔺Kanban - The kanban system is one of optimization. With kanban, we are trying to analyze the flow of production and figure out the slowdowns.&lt;/p&gt;

&lt;p&gt;To do this, we usually use some sort of visual flowchart. We break the project up into tasks and fill up the chart. We are then able to see if any part of production has a slowdown. Maybe for example, our review process is slowing us down, or maybe it's planning.&lt;/p&gt;

&lt;p&gt;With kanban, we are trying to make small adjustments into the right direction. We want to work with the existing process, not replace it.&lt;/p&gt;

&lt;p&gt;🔺Lean Startup - Lean startup is a way of testing out the market before spending on development. Here we create a MVP (Minimum Viable Product) to see if there is interest in the product we are developing.&lt;/p&gt;

&lt;p&gt;Production costs a lot of money. It would be really bad if we spent $500,000 on a project, just to figure out that nobody is actually interested in that product.&lt;/p&gt;

&lt;p&gt;An example of this would be to build a website that sells a certain product. Get it working to the point where people can place that item into a cart. Then when they go to purchase, have it give them a friendly message stating that this feature will be coming soon. We then track how many people are actually interested in buying products off our website.&lt;/p&gt;

&lt;p&gt;If we have a lot of interest, then we are good to go ahead with production. If we don't have as much interest, then maybe we need to rethink our design.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#waterfall-model-example"&gt;
  &lt;/a&gt;
  🟢Waterfall Model Example
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#1-requirements"&gt;
  &lt;/a&gt;
  1) Requirements
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;collecting email &amp;amp; message&lt;/li&gt;
&lt;li&gt;store in db&lt;/li&gt;
&lt;li&gt;prevent bad input&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#2-design"&gt;
  &lt;/a&gt;
  2) Design
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;using HTML &amp;amp; CSS for building&lt;/li&gt;
&lt;li&gt;JS for input verification&lt;/li&gt;
&lt;li&gt;MySQL for backend&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#3development"&gt;
  &lt;/a&gt;
  3)Development
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;actual coding&lt;/li&gt;
&lt;li&gt;documenting&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#4-testing"&gt;
  &lt;/a&gt;
  4) Testing
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;does form collect input&lt;/li&gt;
&lt;li&gt;does it send info. to db&lt;/li&gt;
&lt;li&gt;does it prevent bad input&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#5-deployment"&gt;
  &lt;/a&gt;
  5) Deployment
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;deploying on AWS&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#6-maintainence"&gt;
  &lt;/a&gt;
  6) Maintainence
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;fixing bugs&lt;/li&gt;
&lt;li&gt;adding features&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#requirements-amp-specification"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Requirements &amp;amp; Specification🔽&lt;/strong&gt;
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  🟢Requirements
&lt;/h3&gt;

&lt;p&gt;A way of figuring out the exact specification of what the software should do all things that define the goal of the system.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A non-tech definition of something the user requires from the system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Anyone can understand.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ex - ability to submit a request for medical treatment form.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#specification"&gt;
  &lt;/a&gt;
  🟢Specification
&lt;/h3&gt;

&lt;p&gt;A more technical way of figuring out exactly what the software should do we can say it is the technical aspect of requirements.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A technical definition of what users require from the system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Keep it simple we are not trying to design.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ex - send AES 256 form data from the frontend to the server.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  🟢Example
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#requirement"&gt;
  &lt;/a&gt;
  Requirement
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The tire must work on SUV automobiles.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#specification"&gt;
  &lt;/a&gt;
  Specification
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Must support 75,00lbs pressure.&lt;/li&gt;
&lt;li&gt;Tire must fill US DOT standards.&lt;/li&gt;
&lt;li&gt;T or greater speed quality.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#types-of-requirements"&gt;
  &lt;/a&gt;
  🟢Types of Requirements
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#on-the-basis-of-functionality-there-are-two-types-of-requirements"&gt;
  &lt;/a&gt;
  On the basis of functionality there are two types of requirements
&lt;/h4&gt;

&lt;p&gt;1.Functional&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What are the functions of the program &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;what should the system do &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2.Non-Functional&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;what goals should be met &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How should the system work&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#other-than-these-two-there-are-three-more-types-of-requirements"&gt;
  &lt;/a&gt;
  Other than these two there are three more types of requirements
&lt;/h4&gt;

&lt;p&gt;1.Product&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;must have of the product itself&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ex - the app must be coded in kotlin&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2.Organizational&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;company policies, standards, style, etc&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ex - data should be encrypted by AES 256&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ex - project should be developed by SCRUM &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3.External&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;external law, regulations, trends, etc&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ex - it must use SSL due to law Xyz in the US&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#design-architecture"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Design: Architecture🔽&lt;/strong&gt;
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#architecture-introduction"&gt;
  &lt;/a&gt;
  🟢Architecture Introduction
&lt;/h3&gt;

&lt;p&gt;Architecture is the highest level of design within a system. It is the link between idea and reality. It takes our idea for the system, and creates a plan for it. We focus on only the largest areas of the system here.  We want to break it down from idea, into concrete areas to build.&lt;/p&gt;

&lt;p&gt;In software, bad architecture is something that CAN'T be fixed with good programming. It is a critical step within the development process. Once we decide on an architecture, we have to understand that it can't be changed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#architecture-overview"&gt;
  &lt;/a&gt;
  🟢Architecture Overview
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#bad-architecture"&gt;
  &lt;/a&gt;
  📌Bad Architecture
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sV6sQuVm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jua15xanshz5j447voj9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sV6sQuVm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jua15xanshz5j447voj9.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#good-architecture"&gt;
  &lt;/a&gt;
  📌Good Architecture
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Puaj2Fzg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uu5goiiz02ceps97m80q.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Puaj2Fzg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uu5goiiz02ceps97m80q.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Software architecture is all about breaking up larger systems and ideas, into smaller focused systems. Our first step is to take the requirements, and build an initial architecture. We take this broad set of ideas and guidelines, and have to organize it into functioning areas.&lt;/p&gt;

&lt;p&gt;Each of these areas are then put through the same process to break them up into smaller and smaller pieces. Eventually we will have a blueprint for the entire system designed.&lt;/p&gt;

&lt;p&gt;Good architecture is hard. It takes a lot of resources to develop correctly. However, this upfront cost is almost always recovered from how maintainable the software is. This will reduce the amount of bugs, and the time to fix those bugs.&lt;/p&gt;

&lt;p&gt;Good architecture also helps for faster development and better resource utilization. If we break up the project into small pieces, we will understand how to have multiple developers work at the same time on it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#software-architecture-example"&gt;
  &lt;/a&gt;
  🟢Software Architecture example
&lt;/h3&gt;

&lt;p&gt;1.We are going to design an architecture of a game.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7wCXPIL7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1eu6vj33apalrlfx4mwl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7wCXPIL7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1eu6vj33apalrlfx4mwl.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.now we should divide these layers based on functionality.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A2O97Zby--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gikcci43x6687unmjn8z.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A2O97Zby--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gikcci43x6687unmjn8z.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.now we will add another layer that controls the interaction between frontend and game logic.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FUbbpAf3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01tf696m4wdnf0h7i8o4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FUbbpAf3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01tf696m4wdnf0h7i8o4.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#architecture-patterns"&gt;
  &lt;/a&gt;
  🟢Architecture Patterns
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#pipeandfilter"&gt;
  &lt;/a&gt;
  📌Pipe-and-Filter
&lt;/h3&gt;

&lt;p&gt;The pipe and filter pattern is a good pattern to use to process data through multiple different layers. The key to this pattern is the ability of each step to input, and output the same type of data. So if you send a set of numbers in one side, you will get a set of numbers out the other side.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h-8-UH_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yu0ae7cds804rm228kn7.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h-8-UH_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yu0ae7cds804rm228kn7.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ysk7Dys9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dabfnnh0g44ft8cqs3y.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ysk7Dys9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dabfnnh0g44ft8cqs3y.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This key constraint makes it so you can mix and match the logic in any order and still have the program work. These different filters can also be set up across multiple servers.&lt;/p&gt;

&lt;p&gt;There is definitely an added complexity with this pattern. Setting it up can be tricky to get correct. Also, if the data is lost at any step, the entire process is broken.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clientserver"&gt;
  &lt;/a&gt;
  📌Client-Server
&lt;/h3&gt;

&lt;p&gt;The client-server pattern is one that is quite common today. Every single website and most phone apps use this architecture. With this pattern there are two parts to the software, the client, and the server.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r1fBMPAi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/soxbq4xw9h668rx3iqr4.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r1fBMPAi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/soxbq4xw9h668rx3iqr4.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's take an iPhone app for example. What you download in the app store is what is known as the "client software". This is the version of the app built to talk to the server. It doesn't store any of the server's data locally. It is just setup to make the appropriate server calls when necessary.&lt;/p&gt;

&lt;p&gt;The other part of this is of course the "server software". This is the software that is installed onto a server to receive the requests from the client. The server holds and updates the data. It also processes requests, and sends the data to the clients. Servers have to be tuned correctly, as there can be a near unlimited number of clients requesting information.&lt;/p&gt;

&lt;p&gt;This is a great pattern for accessing and updating a single repository of information. It's great of keeping track of accounts, and regulating which data is given automatically.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#masterslave"&gt;
  &lt;/a&gt;
  📌Master-Slave
&lt;/h3&gt;

&lt;p&gt;The master slave pattern consists of two elements, the master, and the slave. The master is in full control of all slaves associated with it. This is good for a multitude of different applications.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--thpSg_Ey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nmu7tm6uhqgmtlxv0gxk.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--thpSg_Ey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nmu7tm6uhqgmtlxv0gxk.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One such application is with duplicate backup servers. You don't want these backup servers all acting independently of one another. This will create a bunch of different states of memory. Each server will have a different set of data. Instead, you have a master server, which is the main server of operation.&lt;/p&gt;

&lt;p&gt;The master server is the one dealing with all of the normal day to day operations. Then at some point during the day, it sends a signal out to all of the slave servers to tell them to begin their backup operation. The slave servers all start up, copy the data from the master server, and then go back to sleep.&lt;/p&gt;

&lt;p&gt;This pattern is also used with "multi-threading". Here we break up an operation into a bunch of small parts. Each of those parts are given a thread and fed through the CPU. If a CPU has multiple cores, it can process multiple threads at the same time.&lt;/p&gt;

&lt;p&gt;We typically have a master thread which controls the creation and tracking of all slave threads. The slaves do exactly what the master thread has told them. The master thread keeps reassessing the situation both creating and deleting slave threads. Once the operation is finished, the master thread ceases as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#layered-pattern"&gt;
  &lt;/a&gt;
  📌Layered Pattern
&lt;/h3&gt;

&lt;p&gt;The layered pattern consists of divvying up program into layers of technology. These layers only communicate with adjacent layers. Let's say we have an architecture with 9 layers. In this model, 8 would only be able to communicate with 9 and 7, 4 with 3 and 5, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r9E2JJrw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sbwrqzhjonzh16kdroov.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r9E2JJrw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sbwrqzhjonzh16kdroov.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This simplifies the communication channels, and helps to better distinguish the areas of the program. Overall, this helps to make the program more maintainable. The downside to this, is that there can be of added complexity in some areas. For example, if you need to send a message from layer 1 to layer 9. There will have to be a function in each layer to pass that message along.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#architecture-conclusion"&gt;
  &lt;/a&gt;
  🟢Architecture Conclusion
&lt;/h3&gt;

&lt;p&gt;There is no one size fits all plan when it comes to software development. The process must be taken on a case to case basis. Us, as engineers, seek to find the best pattern or set of patterns which solve the problem.&lt;/p&gt;

&lt;p&gt;This process is an iterative one. We come up with an idea, get feedback, rework it, and repeat the process many times. After a series of iterations, we have the architecture that will work best for the problem.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#design-modularity"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Design: Modularity🔽&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;The design is where we really plan out our system. We can go as detailed as possible in this step.&lt;/p&gt;

&lt;p&gt;The main focus here is to break up the project into subsystems, and modules.&lt;/p&gt;

&lt;p&gt;Subsystem - Independent system which holds independent value.&lt;/p&gt;

&lt;p&gt;Module - Component of a subsystem which cannot function as a standalone.&lt;/p&gt;

&lt;p&gt;We should slowly refine and reorganize the systems and sub-modules until they make the most sense.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mtv01r41--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e96ch438u0v852meyxfm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mtv01r41--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e96ch438u0v852meyxfm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Design is two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Activity - working to design the software.&lt;/li&gt;
&lt;li&gt;Product - a document or set of documents detailing the design of software.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Information Hiding - Hiding the complexity of the program inside of a "black box".&lt;/p&gt;

&lt;p&gt;Data Encapsulation - Hiding the implementation details from the user, providing only an interface.&lt;/p&gt;

&lt;p&gt;Both of these work to hide the implementation details, and protect the integrity of the data. We want to control the flow of data, and provide the user with an easy to use experience.&lt;/p&gt;

&lt;p&gt;With these ideas, we can take the most complex of code, and make it accessible to anyone. Doing this at each step in the design process also helps make the code easier to maintain.&lt;/p&gt;

&lt;p&gt;With it implemented properly, we don't need to know the entire codebase to make a change. We only need to know the part of the program we are working on. The encapsulation of all the other levels of the program, make things easy to test and change.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#goals-of-modularity"&gt;
  &lt;/a&gt;
  🟢Goals of Modularity
&lt;/h3&gt;

&lt;p&gt;1) Abstraction&lt;br&gt;
2) Composibility&lt;br&gt;
3) Decomposibility&lt;br&gt;
4) Protectibility&lt;br&gt;
5) Continuity&lt;br&gt;
6) Module understandibility&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#coupling-introduction"&gt;
  &lt;/a&gt;
  🟢Coupling Introduction
&lt;/h3&gt;

&lt;p&gt;Coupling is one of the major things to look at when designing the modularity of the system. It details how dependent each module is on every other module. A set of modules with tight coupling is bad design. It creates hard to maintain code.&lt;/p&gt;

&lt;p&gt;We don't want our modules to be dependent on one another. We want to be able to swap one module out with another, and only have to update code in the swapped module. The more dependent our program is, the more and more modules we will have to rewrite for every change.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#tight-coupling"&gt;
  &lt;/a&gt;
  📌Tight Coupling
&lt;/h3&gt;

&lt;p&gt;This is the worst form of coupling. Tight coupling means there is a strong dependence between modules. Changes will be very hard to make and bugs will be difficult to track down.&lt;/p&gt;

&lt;p&gt;Content Coupling - When one module modifies or reliese on internal working of another module.&lt;/p&gt;

&lt;p&gt;Common Coupling - when several modules have access to same global data.&lt;/p&gt;

&lt;p&gt;External Coupling - when several modules have direct access to the same external Input/Output.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#medium-coupling"&gt;
  &lt;/a&gt;
  📌Medium Coupling
&lt;/h3&gt;

&lt;p&gt;Here the coupling is getting better, but we still have room for improvement.&lt;/p&gt;

&lt;p&gt;Control Coupling - This is when data is passed that influences the internal logic of another module. &lt;/p&gt;

&lt;p&gt;Data Structure Coupling - This is when multiple modules share the same data-structure.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#loose-coupling"&gt;
  &lt;/a&gt;
  📌Loose Coupling
&lt;/h3&gt;

&lt;p&gt;Data Coupling - This is when two modules share the same data. This is a good form of coupling. &lt;/p&gt;

&lt;p&gt;Message Coupling - This coupling is when messages or commands are passed between modules.&lt;/p&gt;

&lt;p&gt;No Coupling - No communication between modules whatsoever. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#cohesion-introduction"&gt;
  &lt;/a&gt;
  🟢Cohesion Introduction
&lt;/h3&gt;

&lt;p&gt;Cohesion is the other area to focus on when we are talking about modularity. Cohesion is the measurement of how focused our module is on a single task. The more focused the module, the higher the cohesion.&lt;/p&gt;

&lt;p&gt;With cohesion, higher is better. We want modules which only do one thing and one thing only. The reason for this is with maintainability. &lt;/p&gt;

&lt;p&gt;What we want to find is the point where we can maximize the effects of both. We want to create loose coupling, and high cohesion.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#weak-cohesion"&gt;
  &lt;/a&gt;
  📌Weak Cohesion
&lt;/h3&gt;

&lt;p&gt;Coincidental Cohesion - The tasks within the module are only linked because they are in the same module. This is the weakest form of cohesion. Here, the modules are completely random. There is nothing linking the tasks within a module, except the fact that they were simply put into the same file.&lt;/p&gt;

&lt;p&gt;Temporal Cohesion - The tasks within the module are only linked because events happen around the same time. &lt;/p&gt;

&lt;p&gt;Logical Cohesion - The tasks within the module are linked due to being in the same general category. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#medium-cohesion"&gt;
  &lt;/a&gt;
  📌Medium Cohesion
&lt;/h3&gt;

&lt;p&gt;Procedural Cohesion - The order of execution passes from one command to the next. Here we have a relationship of time. This is different from temporal because the tasks are both linked, and essential for one another. There is an order by which these must be executed to work properly.&lt;/p&gt;

&lt;p&gt;Communicational Cohesion - When all tasks support the same input and output data.&lt;/p&gt;

&lt;p&gt;Sequential Cohesion - A combination of the previous two. When all tasks work in which the output data for one, is the input data for the next. With this, we have a procedure of tasks, and these tasks all share the same data.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#strong-cohesion"&gt;
  &lt;/a&gt;
  📌Strong Cohesion
&lt;/h3&gt;

&lt;p&gt;Functional Cohesion - This is when all tasks within a module support activities needed for one, and only one problem-related task. In essence the module only does a single action.&lt;/p&gt;

&lt;p&gt;Object Cohesion - This can either be lumped in with functional cohesion, or by itself. Object cohesion is when all activities modify a single object.&lt;/p&gt;

&lt;p&gt;This only works in object-oriented languages. An example might be a module which only modifies a user object. All tasks within this module update the user module in some way.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#cohesion-conclusion"&gt;
  &lt;/a&gt;
  🟢Cohesion Conclusion
&lt;/h3&gt;

&lt;p&gt;Cohesion is really important to make code which is easy to understand and maintain. The more focused the modules, the easier the code will be to debug.&lt;/p&gt;

&lt;p&gt;Remember however, that this must be a balance with coupling. A group of extremely cohesive modules might also be tightly coupled together. We are looking for the balance between the two. If you remember one thing from these sections, it's that we want "loose coupling, and strong cohesion".&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#implimentation-amp-deployment"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Implimentation &amp;amp; Deployment🔽&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;Good design allows us to see our entire project before it is built. With this, we can decide which areas we want to build, and which areas we want to purchase. The great thing about purchasing code is that it is almost always cheaper.&lt;/p&gt;

&lt;p&gt;It's almost always a win-win situation to purchase instead of build. Coding however is usually very specific. This makes it rare to find software that perfectly fits the problem. However, do some research before you begin building, you can save a lot of money.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#take-care-of-programmers"&gt;
  &lt;/a&gt;
  🟢Take Care of Programmers
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Implementation is where most time spent and where a lot of time can be lost&lt;/li&gt;
&lt;li&gt;Always program while alert and focus&lt;/li&gt;
&lt;li&gt;35 hours of programming can be just as productive as 70&lt;/li&gt;
&lt;li&gt;Programming takes focus constant interruptions will reduce the overall focus&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#coding-principles"&gt;
  &lt;/a&gt;
  🟢Coding Principles
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use style guide so all the code look relatively the same.&lt;/li&gt;
&lt;li&gt;Code is written for peoples not for computers.&lt;/li&gt;
&lt;li&gt;Make modules easy to understand.&lt;/li&gt;
&lt;li&gt;Go into everything with a plan&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#deployment-introduction"&gt;
  &lt;/a&gt;
  🟢Deployment Introduction
&lt;/h3&gt;

&lt;p&gt;Deployment is a mix between testing and implementation it mostly happens after testing but it requires implementations too.&lt;/p&gt;

&lt;p&gt;The level of planning in this space is directly related to how the deployment effects the overall project.&lt;/p&gt;

&lt;p&gt;Deployment should be built with the idea of retreal. if something goes wrong how can we revert ?&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#deployment-planning"&gt;
  &lt;/a&gt;
  🟢Deployment Planning
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Amount of planning is dependent on the size of change.&lt;/li&gt;
&lt;li&gt;We look at which areas wich most likely have the biggest problems&lt;/li&gt;
&lt;li&gt;Areas to look at

&lt;ul&gt;
&lt;li&gt;Database&lt;/li&gt;
&lt;li&gt;Software Integration&lt;/li&gt;
&lt;li&gt;Run time changes&lt;/li&gt;
&lt;li&gt;Training&lt;/li&gt;
&lt;li&gt;Downtimes&lt;/li&gt;
&lt;li&gt;Backups&lt;/li&gt;
&lt;li&gt;Network&lt;/li&gt;
&lt;li&gt;Memmory&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Finally we need to look at planing steps to turn back.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#deployment-rollback"&gt;
  &lt;/a&gt;
  🟢Deployment Rollback
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Rollback is the act of reverting a system back to previous working state&lt;/li&gt;
&lt;li&gt;Look for point of no return

&lt;ul&gt;
&lt;li&gt;This is a point where it takes longer to go back then it does to just continue through&lt;/li&gt;
&lt;li&gt;Knowing this will help make a decision during deployment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Every step of deployment process make a decision whether roll back is a better option&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#testing-overview"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Testing Overview🔽&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;Testing is the process of finding errors. These errors can either be failures within the code, or they can be failures to meet requirements. If the app doesn't do what it was set out to do, then that is a problem. In testing, we work to make sure the program works for all requirements.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#test-data-inputs-that-are-designed-to-test-the-system"&gt;
  &lt;/a&gt;
  📌🔺Test Data - Inputs that are designed to test the system.
&lt;/h3&gt;

&lt;p&gt;🔺Test Cases - Ways in which we operate the system with the given data.&lt;/p&gt;

&lt;p&gt;🔺Oracle - The set of "good" outcomes.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#bugs"&gt;
  &lt;/a&gt;
  🟢Bugs
&lt;/h3&gt;

&lt;p&gt;Bugs are in essence a deviation from expected behavior. For example, if you have a website, a potential bug might be that the website doesn't load. The code fatally breaks during loading, and results in a lack of the service. This is of course a deviation from the expected behavior of being able to access the website.&lt;/p&gt;

&lt;p&gt;Another bug could be if the website logged you into someone else's account by mistake. The website in this scenario is still up and functioning. However, a deviation from expected behavior, only being able to access your own account, has happened.&lt;/p&gt;

&lt;p&gt;🔺Failure - The event by which the code deviates from expected behavior.&lt;/p&gt;

&lt;p&gt;🔺Error - The part of the code that leads to the failure.&lt;/p&gt;

&lt;p&gt;🔺Fault - What the outcome actually was.&lt;/p&gt;

&lt;p&gt;Testing can be used to show the presence of bugs, but never to ensure the absence of them. This is because the only way to ensure this, would be to test EVERY single possible test case. This could easily be in the billions to trillions for a typical system. This would be nearly impossible to do. The cost of testing alone could far exceed that of the entire rest of development times 10.&lt;/p&gt;

&lt;p&gt;So what we do instead, is try to do the smallest set of test cases, to cover the greatest amount of ground. We use a mixture of different testing practices to accomplish this task. There will always be bugs, but we can actively remove most of them if we are smart.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#verification-and-validation"&gt;
  &lt;/a&gt;
  🟢Verification and Validation
&lt;/h3&gt;

&lt;p&gt;🔺Verification - Are we building the thing right? Does the software work compared to the given specifications.&lt;/p&gt;

&lt;p&gt;🔺Validation - Are we building the right thing? Does the software work compared to what the user/client needs? &lt;/p&gt;

&lt;p&gt;A way of violating verification, would be if the program accesses the wrong database. In this situation, we are not building the system correctly. It is deviating from expected behavior.&lt;/p&gt;

&lt;p&gt;A way of violating validation, would be if the program calculates car payments, instead of house payments. Our car payment calculator could be the most stable calculator in the world. However, we were supposed to build a house payment calculator. We are not building the right system. We are building a system which solves problems that it was not designed to solve. (And conversely doesn't solve problems that it was designed to solve.)&lt;/p&gt;

&lt;p&gt;A more real world example of this would be if a company has a really specific way of collecting information and we designed a system which collects that information differently. All of the same information has been collected, but not in the right way. We aren't building the correct system.&lt;/p&gt;

&lt;p&gt;Knowing, and testing both of these is important to delivering high quality software!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  🟢Testing
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#unit-testing"&gt;
  &lt;/a&gt;
  📌Unit Testing
&lt;/h3&gt;

&lt;p&gt;Unit testing to focus on the smallest unit of a software. We are trying to isolate different areas, repeating until we test every module of the program. In this, we take a module, and we give it test cases. We then check these test cases against the oracle.&lt;/p&gt;

&lt;p&gt;Overall, we are trying to make sure that the modules are doing what they were designed to do. We don't to have bugs from other modules ruin the module we are testing. So for unit tests, we typically supply dummy values to isolate the module. This way we know if a bug is happening, it's happening from the area we are testing.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#integration-testing"&gt;
  &lt;/a&gt;
  📌Integration Testing
&lt;/h3&gt;

&lt;p&gt;Integration testing is the next step. Once we are satisfied that the modules are all working how we want them, we need to begin testing them together. With integration testing, we begin testing the architecture and the communication as a whole.&lt;/p&gt;

&lt;p&gt;Where in unit testing we came up with test cases for individual modules, with integration testing, we will come up with test cases for groups of modules. For example, we might want to test an entire form, instead of just testing each box within the form.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#incremental-testing"&gt;
  &lt;/a&gt;
  📌Incremental Testing
&lt;/h3&gt;

&lt;p&gt;One of the issues with integration testing is that if a bug arises, it can be difficult to tell exactly what module introduced that bug. Incremental testing is one way of making this process easier.&lt;/p&gt;

&lt;p&gt;With incremental testing, we slowly add one module after the next into the testing environment. This way, if a bug arises, we know which module caused the bugs to be introduced.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#topdown-testing"&gt;
  &lt;/a&gt;
  📌Top-Down Testing
&lt;/h3&gt;

&lt;p&gt;With Top-Down Testing, we begin testing at the highest possible level, and then work our way down. To have this work, we need to have a set dummy modules that we slowly replace with regular modules.&lt;/p&gt;

&lt;p&gt;Stub - A template of the model that will be implemented. Typically returns hard-coded values.&lt;/p&gt;

&lt;p&gt;A stub is typically used for this. It's a module which doesn't have any logic in it. All it has, are functions which return hard coded values. Hard-coded here means nothing that was calculated, just values that we put in there. So for example, a stub might have a function "getUser(int 45)". Instead of going through and finding information about a user, it just returns a user object that we have hard-coded into it.&lt;/p&gt;

&lt;p&gt;This way we can test our modules ability to use the user information, without having to introduce another module. Once we test everything and make sure it works, we can then add in the actual module and do our next round of testing.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#bottomup-testing"&gt;
  &lt;/a&gt;
  📌Bottom-Up Testing
&lt;/h3&gt;

&lt;p&gt;Bottom-Up Testing is the opposite of Top-Down. Here we work from the bottom, and use things called drivers to make our way upwards.&lt;/p&gt;

&lt;p&gt;Driver - Templates which execute commands and initialize the needed variables.&lt;/p&gt;

&lt;p&gt;When we work from bottom up, we need the logic which call our bottom modules. For example, if our module is the module with getUser() in it, then we need to figure out a way to properly test this. What we right is a driver, which initializes the variables, and then makes multiple calls to the functions we need it to.&lt;/p&gt;

&lt;p&gt;So in this situation, the driver might call getUser() 1,000,000 times with random values. We would then look at the results to see if the function is working the way we want it. Once we are satisfied, we add another layer and keep going.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#back-to-back-testing"&gt;
  &lt;/a&gt;
  📌Back to Back Testing
&lt;/h3&gt;

&lt;p&gt;Back to Back testing is good to do when you already have a working program. With this, we run a set of tests on the system before we make a change. We then make a change, by either updating, adding, or deleting a module. We then run the same set of tests.&lt;/p&gt;

&lt;p&gt;We now have two sets of data. The before, and the after. We compare these two sets to make sure that there are no differences. If there is a difference, we know the change did more than we like. We can then revert, or go fix the bug.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#manual-vs-automatic-testing"&gt;
  &lt;/a&gt;
  📌Manual vs Automatic Testing
&lt;/h3&gt;

&lt;p&gt;There are two different ways we can set up tests. We can do it manually, where we enter in values ourselves, or automatically, where we set up another system to do the test.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#automatic"&gt;
  &lt;/a&gt;
  🔺Automatic
&lt;/h3&gt;

&lt;p&gt;Both of these have their own merits. Automatic testing is nice because we can cover a much larger area than manual testing. We can set up a system, and have it test millions of test cases. Once we set it up, we can run it every-time we change our code, guaranteeing we didn't break anything with a new update.&lt;/p&gt;

&lt;p&gt;This all however comes with a lot more overhead. The testing system is a system itself. This means more planning and development time.On top of this, we will have to design tests which can be done from the computer, and provide oracles to check their data. If we are testing out millions of test cases, the oracle will most likely have to be a complex algorithm.&lt;/p&gt;

&lt;p&gt;There also comes the issue of testing the tester. What if our tester is designed incorrectly and it gives us false positives or negatives? We then spend unnecessary time chasing down phantom bugs, or deploy bad software.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#manual"&gt;
  &lt;/a&gt;
  🔺Manual
&lt;/h3&gt;

&lt;p&gt;Manual testing involves a human being testing the code. They user goes in expecting to do an action. They then test to see if there is expected behavior. Bugs are noted down, and then given to developers.&lt;/p&gt;

&lt;p&gt;These testers can be developers, stakeholders, or specially trained testers. They can more easily come up with oracles, and perform a wide range of tests.&lt;/p&gt;

&lt;p&gt;However, humans are very slow when compared to a computer. They can only test so much of a system. Often times, this means many parts of the system don't get properly tested.&lt;/p&gt;

&lt;p&gt;Overall&lt;/p&gt;

&lt;p&gt;The best way to test is to combine these two. Have a good set of automatic tests, and a good set of testers. This will allow the speed of automatic, and the ease and flexibility of manual.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#black-box-vs-white-box-testing"&gt;
  &lt;/a&gt;
  📌Black Box vs White Box Testing
&lt;/h3&gt;

&lt;p&gt;Depending on who tests can also have a large difference on testing. In the testing world there is this idea of "white box" and black box" testing.&lt;/p&gt;

&lt;p&gt;With black box testing, we are testing the device based on inputs and outputs. We have no idea how the program works. All we know is that we should give it a certain input, and a certain output should occur. With this type of testing, we are looking for general functionality. We want to see how the program reacts to different inputs and outputs.&lt;/p&gt;

&lt;p&gt;White box testing however, is when we know the inner workings of a system. With this type of testing, we are trying to test the code itself. We typically develop more technical tests that try to make sure the system is coded correctly.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#my-other-blogs"&gt;
  &lt;/a&gt;
  My Other Blogs
&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ankushsinghgandhi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8acRaTd1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--hNCrq8eb--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/471579/90f99e7e-3d48-4883-aa30-a7c876528c99.png" alt="ankushsinghgandhi image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ankushsinghgandhi/steps-to-master-python-1p06" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Python 2021 Roadmap&lt;/h2&gt;
      &lt;h3&gt;Ankush Singh Gandhi ・ Sep 27 '20 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#python&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/ankushsinghgandhi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8acRaTd1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--hNCrq8eb--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/471579/90f99e7e-3d48-4883-aa30-a7c876528c99.png" alt="ankushsinghgandhi image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ankushsinghgandhi/markdown-cheat-sheet-1il5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Markdown Cheat Sheet&lt;/h2&gt;
      &lt;h3&gt;Ankush Singh Gandhi ・ Oct 3 '20 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#git&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/ankushsinghgandhi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8acRaTd1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--hNCrq8eb--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/471579/90f99e7e-3d48-4883-aa30-a7c876528c99.png" alt="ankushsinghgandhi image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ankushsinghgandhi/git-github-cheat-sheet-71b" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Git &amp;amp; Github 2021 Cheat Sheet&lt;/h2&gt;
      &lt;h3&gt;Ankush Singh Gandhi ・ Oct 8 '20 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#git&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>computerscience</category>
      <category>siliconvalley</category>
      <category>beginners</category>
      <category>showdev</category>
    </item>
    <item>
      <title>บ่นโค้ดใน Smart Contract ของ Pancake Bunny</title>
      <author>Chakrit Likitkhajorn</author>
      <pubDate>Thu, 20 May 2021 05:59:39 +0000</pubDate>
      <link>https://dev.to/chrisza4/smart-contract-pancake-bunny-1g7n</link>
      <guid>https://dev.to/chrisza4/smart-contract-pancake-bunny-1g7n</guid>
      <description>&lt;p&gt;อันนี้จะบ่นสั้นๆ คือวันนี้อยากรู้ว่า Pancake Bunny มันพลาดตรงไหน แล้วเห็นโค้ดชุดนึงที่น่าพูดถึง&lt;/p&gt;

&lt;p&gt;คือออกตัวก่อน เวลาเขียน Smart contract มันจะมีเรื่องค่า Gas ซึ่งมันมีผลให้การเขียนโค้ดแบบปกติอาจจะสิ้นเปลือง จุดนี้ผมยังไม่เข้าใจมาก และที่เขาเขียนมันอาจจะดีที่สุดในโดเมน Smart Contract แล้วก็ได้นะครับ&lt;/p&gt;

&lt;p&gt;แต่ถ้าเราเอามาเขียนในภาษาอื่นๆ ที่ไม่มีค่า Gas อย่าลอกเขามาทื่อๆ นะ&lt;/p&gt;

&lt;p&gt;จากภาพนี้&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xjWKruKH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2ALz5NRsBjyS4uy0pD.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xjWKruKH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2ALz5NRsBjyS4uy0pD.jpeg" alt="Src"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(ต้นทาง &lt;a href="https://peckshield.medium.com/pancakebunny-incident-root-cause-analysis-7099f413cc9b"&gt;https://peckshield.medium.com/pancakebunny-incident-root-cause-analysis-7099f413cc9b&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;ขอลอกส่วนนี้มา&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IPancakePair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;token0&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;WBNB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;valueInBNB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reserve0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IPancakePair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;totalSupply&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="n"&gt;valueInUSD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;valueInBNB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;priceOfBNB&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1e18&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IPancakePair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;token1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;WBNB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;valueInBNB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reserve1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IPancakePair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;totalSupply&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="n"&gt;valueInUSD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;valueInBNB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;priceOfBNB&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1e18&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// ต่อ ไม่ได้เอามาด้วย
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;จาก&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="n"&gt;valueInBNB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reserve0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IPancakePair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;totalSupply&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="c1"&gt;// และ 
&lt;/span&gt;
&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;valueInBNB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reserve1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IPancakePair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;totalSupply&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;สองบรรทัดนี้เหมือนกันเด๊ะๆ เลยแค่ใช้ reserve คนละตัว แล้วพอรวมกับ &lt;code&gt;if token1() == WBNB&lt;/code&gt; ทำให้รู้ว่าจุดประสงค์ของโค้ดนี้คือมันต้องการจะเอา Reserve ของ WBNB มาใช้ในสูตร &lt;code&gt;amount * reserve * 2 / totalSupply()&lt;/code&gt; นั่นแหละครับ&lt;/p&gt;

&lt;p&gt;ดังนั้นการเขียนให้เจตนาตรงนี้เคลียร์กว่า ทำได้แบบนี้&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;reserveBNB&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IPancakePair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;token0&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;WBNB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;reserveBNB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reserve0&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IPancakePair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;token1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;WBNB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;reserveBNB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reserve1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;valueInBNB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reserveBNB&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IPancakePair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;totalSupply&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;โค้ดชุดหลังมันทำให้อ่านปราดเดียวรู้เลยว่า มันมีสูตรคำนวนแค่สูตรเดียวนะ และสูตรต้องการค่า BNB ที่อยู่ใน Pool มาใช้งานนะ ต่างกับชุดแรกที่ต้องเพ่งนานมากกว่าจะรู้ว่า "อ้อ สูตรเหมือนกันนั่นแหละไม่มีอะไรหรอก แค่ต้องเลือก Reserve มาให้ถูกที่" ผมเพ่งหลายนาทีกว่าจะถึงบางอ้อ&lt;/p&gt;

&lt;p&gt;ผมเดาว่าที่เขาไม่เขียนแบบนี้เพราะจริงๆ มันมี Condition ที่ 3 แล้วใน Solidity การเช็ค if ทุกครั้งมันมีค่า Gas ซึ่งผมไม่เชี่ยวชาญพอที่จะบอกได้ว่าโค้ดแบบนี้ในบริบทของ Solidity ดีหรือไม่ดี อาจจะดีสุดแล้วก็ได้พอเอาเรื่องความประหยัดเข้ามาร่วม&lt;/p&gt;

&lt;p&gt;แต่อยากจะบอกโปรแกรมเมอร์ที่เขียนโปรแกรมทั่วๆ ไปว่า โค้ดแบบนี้จริงๆ อย่าลอกไปใช้ในภาษาที่ไม่ติดเรื่องค่า Gas นะครับ มันอ่านยากครับ&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Customise Your Terminal Using Zsh &amp; powerlevel10k</title>
      <author>Pratik Kale</author>
      <pubDate>Thu, 20 May 2021 05:55:11 +0000</pubDate>
      <link>https://dev.to/pratik_kale/customise-your-terminal-using-zsh-powerlevel10k-1og5</link>
      <guid>https://dev.to/pratik_kale/customise-your-terminal-using-zsh-powerlevel10k-1og5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#transform-your-terminal-from-this-to-this-"&gt;
  &lt;/a&gt;
  Transform your terminal from this to this !!
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#before"&gt;
  &lt;/a&gt;
  Before
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yuJe7d28--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dnii5tg1q09p1es13sxo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yuJe7d28--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dnii5tg1q09p1es13sxo.png" alt="Before Terminal Image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#after"&gt;
  &lt;/a&gt;
  After
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MK_KeTSk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2k6iczro9j8uzd6zozdn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MK_KeTSk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2k6iczro9j8uzd6zozdn.png" alt="After Terminal Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-we-will-setup"&gt;
  &lt;/a&gt;
  What we will setup
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#1zsh"&gt;
  &lt;/a&gt;
  1.Zsh
&lt;/h4&gt;

&lt;p&gt;ZSH, also called the Z shell, is an extended version of the Bourne Shell (sh), with plenty of new features, and support for plugins and themes. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2powerlevel-10k"&gt;
  &lt;/a&gt;
  2.Powerlevel 10k
&lt;/h4&gt;

&lt;p&gt;Powerlevel10k is a theme for Zsh. It emphasizes speed, flexibility and out-of-the-box experience.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3zshsyntaxhighlighting"&gt;
  &lt;/a&gt;
  3.Zsh-syntax-highlighting
&lt;/h4&gt;

&lt;p&gt;This package provides syntax highlighting for the shell zsh. It enables highlighting of commands whilst they are typed at a zsh prompt into an interactive terminal. This helps in reviewing commands before running them, particularly in catching syntax errors.&lt;br&gt;
Some examples:&lt;br&gt;
Before: &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9bvtjSAb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/zsh-users/zsh-syntax-highlighting/raw/master/images/before1-smaller.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9bvtjSAb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/zsh-users/zsh-syntax-highlighting/raw/master/images/before1-smaller.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
After:  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ZG3M-h1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/zsh-users/zsh-syntax-highlighting/raw/master/images/after1-smaller.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ZG3M-h1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/zsh-users/zsh-syntax-highlighting/raw/master/images/after1-smaller.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#4zshautosuggestions"&gt;
  &lt;/a&gt;
  4.Zsh-autosuggestions
&lt;/h4&gt;

&lt;p&gt;As you type commands, you will see a completion offered after the cursor in a muted gray color.&lt;br&gt;
If you press the → key (forward-char widget) or End (end-of-line widget) with the cursor at the end of the buffer, it will accept the suggestion, replacing the contents of the command line buffer with the suggestion.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1install-zsh"&gt;
  &lt;/a&gt;
  1.Install Zsh
&lt;/h3&gt;

&lt;p&gt;1)Installation&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#ubuntu-debian-amp-derivatives"&gt;
  &lt;/a&gt;
  Ubuntu, Debian &amp;amp; derivatives
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt install zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h5&gt;
  &lt;a href="#arch-linux-or-manjaro"&gt;
  &lt;/a&gt;
  Arch Linux or Manjaro
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pacman -S zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h5&gt;
  &lt;a href="#macos"&gt;
  &lt;/a&gt;
  macOS
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew install zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;2)Verify your installation by running &lt;code&gt;zsh --version&lt;/code&gt;. Expected result: &lt;code&gt;zsh 5.0.8&lt;/code&gt; or more recent.&lt;/p&gt;

&lt;p&gt;3)Make it your default shell&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;chsh -s $(which zsh)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Note that this will not work if Zsh is not in your authorized shells list &lt;code&gt;(/etc/shells)&lt;/code&gt; or if you don't have permission to use &lt;code&gt;chsh&lt;/code&gt;. If that's the case &lt;a href="https://www.google.com/search?q=zsh+default+without+chsh"&gt;you'll need to use a different procedure&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;4)Log out and log back in again to use your new default shell.&lt;/p&gt;

&lt;p&gt;5)Test that it worked with &lt;code&gt;echo $SHELL&lt;/code&gt;. Expected result: &lt;code&gt;/bin/zsh&lt;/code&gt; or similar.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#2install-and-cofigure-powerlevel10k"&gt;
  &lt;/a&gt;
  2.Install and Cofigure powerlevel10k
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1)Font&lt;/strong&gt; &lt;br&gt;
Powerlevel10k doesn't require custom fonts but can take advantage of them if they are available. It works well with &lt;a href="https://github.com/ryanoasis/nerd-fonts"&gt;Nerd Fonts&lt;/a&gt;, &lt;a href="https://github.com/adobe-fonts/source-code-pro"&gt;Source Code Pro&lt;/a&gt;, &lt;a href="https://fontawesome.com/"&gt;Font Awesome&lt;/a&gt;, &lt;a href="https://github.com/powerline/fonts"&gt;Powerline&lt;/a&gt;, and even the default system fonts. The full choice of style options is available only when using &lt;a href="https://github.com/ryanoasis/nerd-fonts"&gt;Nerd Fonts&lt;/a&gt;.&lt;br&gt;
&lt;strong&gt;Recommended font: Meslo Nerd Font patched for Powerlevel10k.&lt;/strong&gt;&lt;br&gt;
Download these four ttf files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Regular.ttf"&gt;MesloLGS NF Regular.ttf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold.ttf"&gt;MesloLGS NF Bold.ttf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Italic.ttf"&gt;MesloLGS NF Italic.ttf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold%20Italic.ttf"&gt;MesloLGS NF Bold Italic.ttf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Double-click on each file and click "Install". This will make &lt;code&gt;MesloLGS NF&lt;/code&gt; font available to all&lt;br&gt;
applications on your system. Configure your terminal to use this font:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;GNOME Terminal&lt;/strong&gt; (the default Ubuntu terminal): Open &lt;em&gt;Terminal → Preferences&lt;/em&gt; and click on the
selected profile under &lt;em&gt;Profiles&lt;/em&gt;. Check &lt;em&gt;Custom font&lt;/em&gt; under &lt;em&gt;Text Appearance&lt;/em&gt; and select
&lt;code&gt;MesloLGS NF Regular&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Apple Terminal&lt;/strong&gt;: Open &lt;em&gt;Terminal → Preferences → Profiles → Text&lt;/em&gt;, click &lt;em&gt;Change&lt;/em&gt; under &lt;em&gt;Font&lt;/em&gt;
and select &lt;code&gt;MesloLGS NF&lt;/code&gt; family.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Microsoft Terminal&lt;/strong&gt;: Open &lt;em&gt;Settings&lt;/em&gt; (&lt;code&gt;Ctrl+,&lt;/code&gt;), search for &lt;code&gt;fontFace&lt;/code&gt; and set
value to &lt;code&gt;MesloLGS NF&lt;/code&gt; for every profile.
&lt;em&gt;If you are using any other terminal &lt;a href="https://github.com/romkatv/powerlevel10k/blob/master/font.md#:~:text=.%20Configure%20your%20terminal%20to%20use%20this%20font%3A"&gt;click here&lt;/a&gt; for the configuration.&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2)Installation&lt;/strong&gt;&lt;br&gt;
Clone the powerlevel10k repo&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Source the powerlevel10k theme script in your .zshrc&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;echo 'source ~/powerlevel10k/powerlevel10k.zsh-theme' &amp;gt;&amp;gt;~/.zshrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After this &lt;code&gt;exit&lt;/code&gt; and reopen your terminal.&lt;br&gt;
Now you will see this message.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X4Eoa-pd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y9gnbfvwdh40owbtwqmx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X4Eoa-pd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y9gnbfvwdh40owbtwqmx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the Powerlevel10k cofiguration wizard select the options that you like and make your custom prompt !!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PqaPqw1L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ehmn1uwfutzhbm0bta9a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PqaPqw1L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ehmn1uwfutzhbm0bta9a.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Choose the propmt style that you like.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j_6xo52V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gepzmavk8cwwkzrjarx3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j_6xo52V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gepzmavk8cwwkzrjarx3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Press Y and save your changes.&lt;/p&gt;

&lt;p&gt;If you want to change your prompt again just run the follwing command.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p10k configure
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will take you the Powerlevel10k cofiguration wizard.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#3zshautosuggestions-and-zshsyntaxhighlighting"&gt;
  &lt;/a&gt;
  3.Zsh-autosuggestions and Zsh-syntax-highlighting
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1)Zsh-autosuggestions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Clone the Zsh-autosuggestions repo&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Source the script in your .zshrc&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;echo 'source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh'&amp;gt;&amp;gt;~/.zshrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then &lt;code&gt;exit&lt;/code&gt; and start a new terminal session.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2)Zsh-syntax-highlighting&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Clone the Zsh-syntax-highlighting repo&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/zsh-users/zsh-syntax-highlighting.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Source the script in your .zshrc&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;echo 'source ./zsh-syntax-highlighting/zsh-syntax-highlighting.zsh'&amp;gt;&amp;gt;~/.zshrc 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Note the source command must be at the end of ~/.zshrc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now &lt;code&gt;exit&lt;/code&gt; and start a new terminal session.&lt;/p&gt;

&lt;p&gt;And et voilà !&lt;br&gt;
Your terminal is ready!&lt;br&gt;
Thank you so much for reading this article and do let me know your thoughts in comments!&lt;/p&gt;



&lt;p&gt;Reach me:&lt;br&gt;
&lt;a href="https://twitter.com/Pratik_kale135"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.instagram.com/prato.grapher/"&gt;Instagram&lt;/a&gt; | &lt;a href="//mailto:pratikkale135@gmail.com"&gt;Mail&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Repositeries Mentioned:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/romkatv"&gt;
        romkatv
      &lt;/a&gt; / &lt;a href="https://github.com/romkatv/powerlevel10k"&gt;
        powerlevel10k
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A Zsh theme
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/zsh-users"&gt;
        zsh-users
      &lt;/a&gt; / &lt;a href="https://github.com/zsh-users/zsh-autosuggestions"&gt;
        zsh-autosuggestions
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Fish-like autosuggestions for zsh
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/zsh-users"&gt;
        zsh-users
      &lt;/a&gt; / &lt;a href="https://github.com/zsh-users/zsh-syntax-highlighting"&gt;
        zsh-syntax-highlighting
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Fish shell like syntax highlighting for Zsh.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>tutorial</category>
      <category>linux</category>
      <category>productivity</category>
      <category>bash</category>
    </item>
  </channel>
</rss>
