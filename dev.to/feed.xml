<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Let’s Talk About Juniors</title>
      <author>Dekel</author>
      <pubDate>Sun, 08 Aug 2021 19:56:39 +0000</pubDate>
      <link>https://dev.to/dekel/let-s-talk-about-juniors-5ahm</link>
      <guid>https://dev.to/dekel/let-s-talk-about-juniors-5ahm</guid>
      <description>&lt;p&gt;Over the last couple of years, I was privileged to work with many juniors. I have mentored, helped, hired, fired, consulted, read CVs, advised friends and colleagues on hiring juniors, and decided it’s time to write down my two cents on the topic.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This post is focused mostly on junior developers, but I’m sure its content can be relevant to other positions as well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are so many juniors out there. Every year we have thousands of new developers finishing their degrees, whether from universities or colleges and let’s not forget all of the bootcamps, online courses, and self-educated people who just go and learn online. We live in an era where most (if not all) of the learning material is just out there - waiting for people to consume it.&lt;/p&gt;

&lt;p&gt;Juniors are eager to start their careers, but unfortunately, there aren’t many positions for people without any background, and most companies prefer to go with experienced employees (whether seniors or "junior with 2 years experience").&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WjXgfA_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ro8ou7o603w39ebwzql.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WjXgfA_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ro8ou7o603w39ebwzql.png" alt="image"&gt;&lt;/a&gt;Photo by &lt;a href="https://unsplash.com/@debbieducic"&gt;@debbieducic&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#open-positions"&gt;
  &lt;/a&gt;
  Open Positions
&lt;/h3&gt;

&lt;p&gt;Whenever a new junior position is being published - there are so many candidates that send over their CVs. LinkedIn is one of the main resources for those publications - whether directly on the LinkedIn Jobs section, or posts that people share on their feed. But there are other places as well. Many juniors are members of groups that share those open positions - Telegram groups, WhatsApp groups, Facebook groups, and more. Many people volunteer to find and share new open positions in those groups - just to help other juniors start their journey.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Check out these job ads on LinkedIn:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q9kuzNjQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pvy8i353i3alfcpnixo2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q9kuzNjQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pvy8i353i3alfcpnixo2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Only 2-3 days, and already more than 200 candidates submitted their CVs to these positions.&lt;/p&gt;

&lt;p&gt;With so many candidates it’s super hard for the managers who are in charge of the hiring process to actually go over each and every CV and give it enough attention. As a candidate - if you really want to be one of the few selected to continue the process - you must find a way to stand-out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PBfAmysI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ehjh72ecikjnwfn9c8xg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PBfAmysI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ehjh72ecikjnwfn9c8xg.png" alt="image"&gt;&lt;/a&gt;Photo by &lt;a href="https://pixabay.com/users/geralt-9301/"&gt;@geralt&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#standing-out-as-a-junior-developer"&gt;
  &lt;/a&gt;
  Standing Out as a Junior Developer
&lt;/h3&gt;

&lt;p&gt;There are so many ways to make sure that your CV gets the right attention, but regardless of the design/colors/fonts/professional photo/cleanliness - here are a few things that can help you stand-out and make sure that your CV does not get skipped accidentally:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;LinkedIn profile is a must.&lt;/li&gt;
&lt;li&gt;Add some intro paragraph about yourself - what is the type of position you are after, what are your strengths, how would the company benefit from your experience if they take you.&lt;/li&gt;
&lt;li&gt;Make sure to include a link to your GitHub account.&lt;/li&gt;
&lt;li&gt;Have some interesting repositories in your GitHub account.
Projects that you worked on (and not the standard "to-do list"; that is probably one of the most-common projects for juniors).&lt;/li&gt;
&lt;li&gt;A portfolio is great, if you can have one. Definitely not a must, but at the end of the day - you want to show that you are better than the other CVs in the pack, and a decent portfolio is indeed a way of showing that you are better.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#why-put-so-much-attention-to-the-cv"&gt;
  &lt;/a&gt;
  Why put so much attention to the CV?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7wQl8Cn1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9s6dj5lh1jb0chek7zhz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7wQl8Cn1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9s6dj5lh1jb0chek7zhz.png" alt="image"&gt;&lt;/a&gt;Photo by &lt;a href="https://unsplash.com/@brandsandpeople"&gt;@brandsandpeople&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Think of it this way - I’m hiring a junior, and I’m getting 200 CVs. Let's assume that half of them contain GitHub accounts, and the other half doesn’t. Unfortunately - I have only one position, and I must skim very quickly over all of those CVs. Whether it’s intentional or not - CV that does not contain a link to a GitHub account, where I can actually go and read some code - gets lower priority. Out of the half that does have GitHub accounts - I will be able to read some code and understand which is better and worth my time to actually call the candidate and check if we can move on to the next steps.&lt;br&gt;
Eventually - you as a candidate should help the hiring person focus on your CV and move it up the stack. It’s your job to stand-out.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-the-benefits-in-hiring-juniors"&gt;
  &lt;/a&gt;
  What Are The Benefits in Hiring Juniors?
&lt;/h3&gt;

&lt;p&gt;This question is something that you hear from so many managers. Assuming your company has enough money to hire only seniors - why would you hire juniors at all? It’s no secret that sometimes you hire juniors because their salary is lower. No one would say otherwise. But salary is not everything. There are many other reasons to hire juniors as well:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Juniors have less experience, but they can come with fresh perspectives.&lt;/li&gt;
&lt;li&gt;Hiring juniors requires you to spend time on mentoring - which is good for everyone. You might have a small team and consider promoting someone to a team-lead - putting them developer in charge/mentor for 1-2 juniors (without officially giving a title) is a great way to check if it can work in the future.&lt;/li&gt;
&lt;li&gt;With great power comes great responsibility; you can (and should) make your team of juniors better with time - making you a better team lead/manager, in the process.&lt;/li&gt;
&lt;li&gt;Seniors are hard to find. It’s a fact. Hiring seniors is a long process and during that time - juniors can help you grow your business.&lt;/li&gt;
&lt;li&gt;Juniors are eager to show they are worth it. They are eager to learn and motivated to be part of the team and start working on "real world" problems.&lt;/li&gt;
&lt;li&gt;There are always tedious tasks. Even if way say that everything in our company is super interesting and nothing is boring - eventually - there will be something that our seniors will prefer not to do (and will be super interesting for a junior that never did it before).&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#finding-the-right-one"&gt;
  &lt;/a&gt;
  Finding The Right One
&lt;/h3&gt;

&lt;p&gt;Like every process - finding the right junior can take time. It's not only about finding the most brilliant one, or the one that has the best grades, but it's also about finding the one that you can motivate, mentor, direct and grow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gEX6y7N3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8e4pln4xjawyxdk5j16y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gEX6y7N3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8e4pln4xjawyxdk5j16y.png" alt="image"&gt;&lt;/a&gt;Photo by &lt;a href="https://unsplash.com/@benjaminsweet"&gt;@benjaminsweet&lt;/a&gt;&lt;/p&gt;




Cover photo by &lt;a href="https://unsplash.com/@goian"&gt;Ian Schneider @ unsplash&lt;/a&gt;

</description>
      <category>discuss</category>
      <category>100daysofcode</category>
      <category>career</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Using React or Gatsby? Let me show you the error of your ways 😱🍿🍿! Introducing the ultimate motherf*cking website ! </title>
      <author>InHuOfficial</author>
      <pubDate>Sun, 08 Aug 2021 19:51:39 +0000</pubDate>
      <link>https://dev.to/inhuofficial/the-ultimate-motherf-cking-website-yes-i-won-another-battle-ecg</link>
      <guid>https://dev.to/inhuofficial/the-ultimate-motherf-cking-website-yes-i-won-another-battle-ecg</guid>
      <description>&lt;p&gt;Have you ever wondered what the ultimate website looked like? Well I am afraid you are going to have to put up with a few swears if you want to find out! If foul language offends you, now would be a good time to press the back button!&lt;/p&gt;

&lt;p&gt;Oh and as always, the anger and the swearing etc. is all in good fun and I do not mean any of it, you will soon see why it is appropriate!&lt;/p&gt;

&lt;p&gt;OK have all the easily offended peeps gone? Good, let's do this fuckers!&lt;/p&gt;

&lt;p&gt;People have been trying to create the perfect website for several years. &lt;/p&gt;

&lt;p&gt;First there was &lt;a href="https://motherfuckingwebsite.com/"&gt;motherfuckingwebsite.com&lt;/a&gt;, which taught people how the web was meant to work!&lt;/p&gt;

&lt;p&gt;Then some people tried to improve it with &lt;a href="http://bettermotherfuckingwebsite.com/"&gt;bettermotherfuckingwebsite.com&lt;/a&gt; and &lt;a href="https://perfectmotherfuckingwebsite.com/"&gt;perfectmotherfuckingwebsite.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The problem is, they all failed.&lt;/p&gt;

&lt;p&gt;Once again, it is time to be a hero and fix everyone's crappy HTML.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ultimatemotherfuckingwebsitecom"&gt;
  &lt;/a&gt;
  ultimatemotherfuckingwebsite.com
&lt;/h2&gt;

&lt;p&gt;Yup, I bought &lt;strong&gt;ultimatemotherfuckingwebsite.com&lt;/strong&gt; and set to work fixing all of their shoddy work.&lt;/p&gt;

&lt;p&gt;I won't repeat myself as I explain everything there, instead I will just let you check it out yourself:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="//ultimatemotherfuckingwebsite.com"&gt;https://ultimatemotherfuckingwebsite.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Go on, go learn what a real website looks like, especially if you are using Gatsby or React to try and build a static site! (eeek, angry comments are coming!)&lt;/p&gt;

&lt;p&gt;And yes I added the JavaScript tag just for you people who think Gatsby is fast or React is a good idea for a static site...yes I know I am baiting you, go on, leave a comment and let's have a discussion!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-there-a-point"&gt;
  &lt;/a&gt;
  Is there a point?
&lt;/h2&gt;

&lt;p&gt;Yes, the site is performant, accessible, uses security headers and follows best practices.&lt;/p&gt;

&lt;p&gt;I mean, the whole page is 5.3kb when compressed and gzipped so it is bound to be fast! Some people can't even change the colour of a button in that amount of code!&lt;/p&gt;

&lt;p&gt;The fact that the joke is that it is minimal is irrelevant, we could easily add a few images (and remember our &lt;code&gt;alt&lt;/code&gt; attributes), add a menu, some more colour and make it into a proper website.&lt;/p&gt;

&lt;p&gt;What it illustrates is proper use of HTML (so go check out the source), accessibility best practices and more.&lt;/p&gt;

&lt;p&gt;Use at as a tool to learn, ask me questions. It may look simple but if you start poking around you will start seeing things like &lt;code&gt;nonce-&lt;/code&gt; and &lt;code&gt;aria-labelledby&lt;/code&gt;. Surely somebody will not know what they are all about?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tools-to-test-against"&gt;
  &lt;/a&gt;
  Tools to test against.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://validator.w3.org/nu/?doc=https%3A%2F%2Fultimatemotherfuckingwebsite.com%2F"&gt;W3C Markup validation service (valid HTML)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jigsaw.w3.org/css-validator/validator?uri=ultimatemotherfuckingwebsite.com&amp;amp;profile=css3svg&amp;amp;usermedium=all&amp;amp;warning=1&amp;amp;vextwarning=&amp;amp;lang=en"&gt;w3C CSS Validation service (valid CSS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://observatory.mozilla.org/analyze/ultimatemotherfuckingwebsite.com"&gt;Mozilla Observatory (security headers)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ultimatemotherfuckingwebsite.com"&gt;web.dev/measure (performance, best practices, accessibility)&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The site gets flying colours (although an annoying "issue with CSP" without any guidance is coming up so I don't get 100 on best practices on web.dev/measure - if someone can spot that could you let me know as it stops me scoring 100 (or above) on &lt;strong&gt;everything&lt;/strong&gt;!).&lt;/p&gt;

&lt;p&gt;Use these tools to learn how the web is meant to work, test your own site and fix errors that come up, then build awesome stuff on top of a firm grounding once you have learned how to build things the right way! And yes, I know I was taking a swipe at React and Gatsby but with a bit of work you can still have a high performance and highly accessible website, I am only poking fun!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-it-in-times-of-need"&gt;
  &lt;/a&gt;
  Use it in times of need
&lt;/h2&gt;

&lt;p&gt;Next time you see a bloated 12 MB, JavaScript rendered disaster of a site, just send them to &lt;a href="//ultimatemotherfuckingwebsite.com"&gt;https://ultimatemotherfuckingwebsite.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Or if someone has made a completely inaccessible website...send them there also!&lt;/p&gt;

&lt;p&gt;Or if they have no idea what security headers are...you could probably send them somewhere else that explains it better, but they can still inspect the site to learn something!&lt;/p&gt;

&lt;p&gt;Use it to slowly teach people that there are some basic things they need to learn, especially if they want the site to rank well in Google!&lt;/p&gt;

&lt;p&gt;Above all, have fun with it, it is a fun learning tool!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-you-think"&gt;
  &lt;/a&gt;
  What do you think?
&lt;/h2&gt;

&lt;p&gt;So, did I win?&lt;/p&gt;

&lt;p&gt;Did I build the ultimate motherfucking website (within the rules of the silly game!). &lt;/p&gt;

&lt;p&gt;Can anyone actually beat me?&lt;/p&gt;

&lt;p&gt;I will leave it to you to decide!&lt;/p&gt;

&lt;p&gt;Oh, and if you like the silliness &lt;a href="https://twitter.com/InHuOfficial"&gt;follow me on twitter&lt;/a&gt;, I need some followers 😥&lt;/p&gt;

&lt;p&gt;Have a great week!&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>a11y</category>
    </item>
    <item>
      <title>How to ask for a raise as a Software Developer</title>
      <author>Jonathan</author>
      <pubDate>Sun, 08 Aug 2021 19:06:32 +0000</pubDate>
      <link>https://dev.to/jonathangaldino/how-to-ask-for-a-raise-as-a-software-developer-3dl0</link>
      <guid>https://dev.to/jonathangaldino/how-to-ask-for-a-raise-as-a-software-developer-3dl0</guid>
      <description>&lt;p&gt;Hi everyone. In this post I'm going to help you ask for a raise. It's important to mention that, I'm writing this post based on my life experience but also taking in consideration &lt;a href="https://twitter.com/johnhashed/status/1423704312518217728"&gt;what my tech bubble on twitter answered me&lt;/a&gt; (pt-br).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#best-case-scenario-you-dont"&gt;
  &lt;/a&gt;
  Best case scenario: you don't
&lt;/h3&gt;

&lt;p&gt;If you're working for a nice company that runs performance reviews every three or six month, they probably have a level system, this would be a way of getting a raise and or a promotion.&lt;/p&gt;

&lt;p&gt;We know this is the best case scenario but we don't live in a pretty word, so we're going to see how we can approach the company and have a nice talk (asking for a raise shouldn't be messy as appears to be).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-approach-your-manager"&gt;
  &lt;/a&gt;
  How to approach your manager
&lt;/h3&gt;

&lt;p&gt;This section contains some tips on how you can make a decent approach and ask for a raise.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#gather-arguments"&gt;
  &lt;/a&gt;
  Gather arguments
&lt;/h4&gt;

&lt;p&gt;You need to see the big picture. Why are you asking for a raise? You should never go for a negotiation meeting unprepared.&lt;/p&gt;

&lt;p&gt;Start by analysing yourself. Make a list of important things that you are doing in your job, e.g:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are you participating in important deliveries in the company? &lt;/li&gt;
&lt;li&gt;What goals did you help to achieve?&lt;/li&gt;
&lt;li&gt;What kind of values you bring to the team?&lt;/li&gt;
&lt;li&gt;How are you performing? (e.g: don't need much assistance from senior devs while working on a task)&lt;/li&gt;
&lt;li&gt;Are you delivering more than you were when you joined the company/position?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is important because it is a way of showing your manager that you are deeply involved. Some managers might forgot how involved you are, this is a way of remembering them.&lt;/p&gt;

&lt;p&gt;Gather feedback from your leaders (tech lead, team lead etc), f you're doing something wrong, they should help you with whatever you're going through. Having their support can help your side when asking for a raise and you should definitely use these feedbacks in the negotiation.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#are-any-other-companies-trying-to-recruit-you"&gt;
  &lt;/a&gt;
  Are any other companies trying to recruit you?
&lt;/h4&gt;

&lt;p&gt;These offers may be a great way to go to another position, e.g moving from a mid-level to a senior position, and by doing that you will get a different salary. However, if you don't want to leave your current company, you can see these offers from another point of view.&lt;/p&gt;

&lt;p&gt;You should take the best of these offers. Mentioning them to your manager can help but can also sound a bit rude. If you really want to stay in the company, this is a way of saying "Hey, I am ignoring these offers because I want to be right here.". &lt;/p&gt;

&lt;p&gt;In the end is all about how you bring arguments to the negotiation. I don't think you should say "Hey, company X is offering me 2 times more than you guys pay me". You don't need to mention anything less than "I'm receiving offers".&lt;/p&gt;

&lt;p&gt;However, if you mention this in the negotiation and the company, somehow, does not want to give you a compensation, you have a decision to make: stay and try again some other time (timing is important) or quit and look for another job.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-negotiation"&gt;
  &lt;/a&gt;
  The negotiation
&lt;/h4&gt;

&lt;p&gt;Again, it's very important to be prepared for this part. Going blind for a negotiation will make you look bad.&lt;/p&gt;

&lt;p&gt;A great way to start the conversation is mentioning the arguments you gathered earlier. Try mentioning big projects that you helped delivery. &lt;/p&gt;

&lt;p&gt;Take the feedback from your direct leaders into consideration. Is important to say that you have their support.&lt;/p&gt;

</description>
      <category>raise</category>
      <category>money</category>
      <category>developer</category>
      <category>career</category>
    </item>
    <item>
      <title>Think Recursive</title>
      <author>mayankav</author>
      <pubDate>Sun, 08 Aug 2021 18:29:38 +0000</pubDate>
      <link>https://dev.to/mayankav/think-recursive-272h</link>
      <guid>https://dev.to/mayankav/think-recursive-272h</guid>
      <description>&lt;p&gt;I am not so good at cooking stuff but I am an all time admirer of the traditional Polish dish '&lt;a href="https://www.youtube.com/watch?v=GQ0GiTKzu38"&gt;Pierogi&lt;/a&gt;'. I took a few days off from work last week, all determined not to let the days fly by without getting my hands on the polish delicacy. Now I do realize that I don't even know where to start from. Well, what are friends for? &lt;strong&gt;&lt;em&gt;Now read this with patience!&lt;/em&gt;&lt;/strong&gt; I made a call to "Darek" back in Warsaw and asked him if he could give me some direction. Darek, being just another geek, told me that he knows how to do the veggies (&lt;a href="https://www.polonist.com/pierogi-filling-ideas/"&gt;the filling&lt;/a&gt;) but then he shall ask another friend, how to prepare the wrap. &lt;strong&gt;&lt;em&gt;He put me on hold&lt;/em&gt;&lt;/strong&gt; and went ahead to call his friend, Marek. Marek tells Darek that he does indeed know how to do the wrap but then he shall call Alek, who lives nearby to find out how to do the dressing. 'Sauce', my friends, is important. &lt;strong&gt;&lt;em&gt;He puts Darek on hold as well&lt;/em&gt;&lt;/strong&gt;. Silly! Alright so Alek, the neighbor finally &lt;strong&gt;&lt;em&gt;does't call another friend&lt;/em&gt;&lt;/strong&gt; but gives away the recipe of the sauce. Marek combines his recipe of the wrap with what Alek told him about the sauce and conveys it back to Darek, who was simply waiting to combine this information with the recipe of the filling only to deliver the complete information back to me. Long day but I finally have what I needed.&lt;br&gt;
&lt;/p&gt;

&lt;br&gt;
Lets switch the context now. Did you already visualise the call stack? Only if you don't know, JavaScript runtime uses a call stack to track the execution of functions. Its nothing but a stack that orderly arranges the execution contexts of functions in memory making sure that the currently executing function stays on the top. Going by my example, look how it can actually be portrayed. Think of it as a recurring call to the function &lt;strong&gt;&lt;em&gt;getRecipeHelp()&lt;/em&gt;&lt;/strong&gt;.

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pWfCH71D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lixt78a3qrt90nozmnlv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pWfCH71D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lixt78a3qrt90nozmnlv.png" alt="recursion example"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;alek&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Alek&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;friend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;ingr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sauce&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;marek&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Marek&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;friend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;alek&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;ingr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wrap&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;darek&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Darek&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;friend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;marek&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;ingr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;filling&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getRecipeHelp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;friend&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;friend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// bail out condition&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;friend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ingr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;friend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ingr&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; + &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;getRecipeHelp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;friend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;friend&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Here we call Darek to get help with the recipe who then calls his friend Marek and Marek finally calls his friend Alek&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getRecipeHelp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;darek&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// "filling + wrap + sauce"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;center&gt;&lt;h6&gt;&lt;a href="https://codepen.io/mayankav/pen/poPZyEb"&gt;Try on Codepen&lt;/a&gt;&lt;/h6&gt;&lt;/center&gt;
&lt;br&gt;

&lt;p&gt;Assuming you digested the example really well, let me now ask you, how do you think you'd define '&lt;strong&gt;&lt;em&gt;recursion&lt;/em&gt;&lt;/strong&gt;'? The academic definition says '&lt;strong&gt;&lt;em&gt;A non leaf function calling itself&lt;/em&gt;&lt;/strong&gt;'. On a personal note, I understand recursion as &lt;strong&gt;&lt;em&gt;a quest to meet the bail out condition so that the return values can sequentially be resolved into the final output&lt;/em&gt;&lt;/strong&gt;. This may confuse you a little unless you understand that every recursive function you define has to have a bail out condition. Broadly, I'd recommend you to remember three things about any recursive function. What are those three things?&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;You should start with thinking of the bail out condition&lt;/li&gt;
&lt;li&gt;Understand that the values start resolving in LIFO fashion to finally render the output&lt;/li&gt;
&lt;li&gt;Recursively call the function itself but with a different argument ofcourse ( Make sure you'e moving towards the bail out condition)&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Though the bail out condition is quite visible in the example, to make it even more clear, if you do not have this check to stop your recursive calls, you may end up with a stack overflow where functions keep piling up on the stack without returning. By value resolution in LIFO fashion, all I mean is that the functions lower in the stack keep waiting until the final function (that satisfies the bail out condition) returns some decreed value, post which the return values start getting resolved top to bottom in the stack. With so much of this information at hand, go ahead and try implementing the classic factorial function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// bail out condition&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; 
  &lt;span class="c1"&gt;// make sure you're moving towards the bail out condition and not away from it&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;center&gt;&lt;h6&gt;&lt;a href="https://codepen.io/mayankav/pen/NWjByjP"&gt;Try on Codepen&lt;/a&gt;&lt;/h6&gt;&lt;/center&gt;
&lt;br&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EPdti35W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/52k2y7frc1obwkvjmieo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EPdti35W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/52k2y7frc1obwkvjmieo.gif" alt="Call Stack javaScript"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;h6&gt;An illustration borrowed from Codeacademy&lt;/h6&gt;&lt;/center&gt;
&lt;br&gt;

&lt;p&gt;I think the illustration is self explanatory. If not, lets cover another example. Lets get the fibonacci series in. Hardly anyone in the wild, would be unaware of the fibinacci series but still it goes like this 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89.. Every other number starting from the third in series is the sum of the previous two. Fibonacci is magical, go ahead and read &lt;a href="https://insteading.com/blog/fibonacci-sequence-in-nature/#:~:text=18%20Amazing%20Examples%20of%20the%20Fibonacci%20Sequence%20in%20Nature"&gt;this&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ... starts with 0 and 1 and then each number is the sum of previous two numbers in the series&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; 
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="c1"&gt;// bail out condition&lt;/span&gt;
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// make sure you're moving towards the bail out condition and not away from it&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 55&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;center&gt;&lt;h6&gt;&lt;a href="https://codepen.io/mayankav/pen/NWjBYxp"&gt;Try on Codepen&lt;/a&gt;&lt;/h6&gt;&lt;/center&gt;
&lt;br&gt;

&lt;p&gt;Conceptually, not much different from what we did for factorials. Think of every recursive function as a mathematical function. Perhaps then it shall become more obvious. We've got our bail out condition at (&lt;strong&gt;&lt;em&gt;n &amp;lt;= 1&lt;/em&gt;&lt;/strong&gt;) , where we simply return any argument that's less than 1. Otherwise we go ahead and make recursive calls to the &lt;strong&gt;&lt;em&gt;fib&lt;/em&gt;&lt;/strong&gt; function for &lt;strong&gt;&lt;em&gt;n-1&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;n-2&lt;/em&gt;&lt;/strong&gt;. Well, that only gives me the &lt;strong&gt;&lt;em&gt;nth&lt;/em&gt;&lt;/strong&gt; fibonacci member. How'd you print the entire series? Try not to use loops and create a recursive function &lt;strong&gt;&lt;em&gt;showFib(n) {..}&lt;/em&gt;&lt;/strong&gt; that prints the series all at once. &lt;a href="https://codepen.io/mayankav/pen/NWjBYxp"&gt;Here's the code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Alright! now try calling the &lt;strong&gt;&lt;em&gt;fib(n)&lt;/em&gt;&lt;/strong&gt; function like &lt;strong&gt;&lt;em&gt;fib(999999)&lt;/em&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;em&gt;fib(9999999)&lt;/em&gt;&lt;/strong&gt;. Do you see the result already? As you could say just by looking at it, its going to be a huge huge number, your browser may give up on this and start crawling or you may even get a stack overflow exception depending on the content in the call stack. Switch back to the illustration that shows the stack for the factorial program. Can you imagine 999999 functions being piled up all waiting for their successor to return some value? How do you get around this? There's actually a way out but that's kind of a trade off. We call it &lt;a href="https://webkit.org/blog/6240/ecmascript-6-proper-tail-calls-in-webkit/"&gt;Proper Tail Calls (PTC)&lt;/a&gt;. Checkout the last line in the function. For the factorial function its a return statement. The return statement has two parts if you see&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;a multiplier i.e. n&lt;/li&gt;
&lt;li&gt;a recursive call i.e. factorial(n-1)&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since we have the multiplier waiting for the recursive call to return some value, the function cannot be offboarded from the stack. It has this pending work (&lt;strong&gt;&lt;em&gt;multiply by n&lt;/em&gt;&lt;/strong&gt;) to finish after the recursive call returns. What if we pass the &lt;strong&gt;&lt;em&gt;product&lt;/em&gt;&lt;/strong&gt; to the recursive call instead of waiting with the multiplier? Well, since the pending work will get delegated to the recursive call everytime , the engine won't need to keep the execution stack crowded with functions in stand by.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;product&lt;/span&gt;
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 9.332621544394415e+155&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;999&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Infinity&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;999999&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Error- Maximum call stack size exceeded &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;center&gt;&lt;h6&gt;&lt;a href="https://codepen.io/mayankav/pen/vYmazxZ"&gt;Try on Codepen&lt;/a&gt;&lt;/h6&gt;&lt;/center&gt;
&lt;br&gt;

&lt;p&gt;You see it works better now. Unlimited frames and you can call a function recursively as many times as you want? Before mentioning PTC, I said it was a tradeoff. A tradeoff with the stack trace. You no longer have easy debugging for your function. Since the function frame is lost to create space in the execution stack, they won't show up even while tracing your error. &lt;a href="https://webkit.org/blog/6240/ecmascript-6-proper-tail-calls-in-webkit/#:~:text=The%20calling%20function%E2%80%99s%20frame%20is%20called%20a%20tail%20deleted%20frame%20as%20it%20is%20no%20longer%20on%20the%20stack%20once%20it%20makes%20a%20tail%20call.%20This%20means%20that%20the%20tail%20deleted%20function%20will%20not%20show%20up%20in%20a%20stack%20trace."&gt;Read more here&lt;/a&gt;. So hold your horses and think before you opt for an optimized recursive solution. Now you're thinking, won't it misfire everytime you place a function call in the tail of a function? You don't want to lose the stack trace. Good news and Bad news, all that I told you about Proper Tail Calls simply won't work with JS engines other than JavaScriptCore (by Apple). Apple likes to call it Tail Call Optimization (TCO). TCO goes one step ahead of PTC to actually optimize your function execution.V8 did infact support this for a while but then for the same reason and possibly some bugs, took it down. If you are on chrome, you can test this out in your debugger. Alternatively you can go through &lt;a href="https://stackoverflow.com/questions/42788139/es6-tail-recursion-optimisation-stack-overflow"&gt;this&lt;/a&gt;. V8 creates frames for all function calls and keeps them in the stack regardless of the way you write your code. So you still get the stack overflow exception if you take your recursions off limit. An explicit version of PTC is under discusstion (seems abandoned though). They call it &lt;a href="https://github.com/tc39/proposal-ptc-syntax#:~:text=Syntactic%20Tail%20Calls%20(STC)"&gt;Syntactic Tail Calls (STC)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aOnnNygl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aw9k2wc9wu7m0o9o1vkf.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aOnnNygl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aw9k2wc9wu7m0o9o1vkf.PNG" alt="V8 recursion fibonacci example"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;h6&gt;V8 stacking up function calls&lt;/h6&gt;&lt;/center&gt;
&lt;br&gt;
&lt;h2&gt;
  &lt;a href="#originally-posted-here-"&gt;
  &lt;/a&gt;
  Originally Posted Here -
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://mayankav.webflow.io/blog/think-recursive"&gt;https://mayankav.webflow.io/blog/think-recursive&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
      <category>functional</category>
    </item>
    <item>
      <title>How we got our VueJS app to load in 1 second</title>
      <author>Tarun Pai</author>
      <pubDate>Sun, 08 Aug 2021 17:43:40 +0000</pubDate>
      <link>https://dev.to/painotpi/how-we-got-our-vuejs-app-to-load-in-1-second-3gc7</link>
      <guid>https://dev.to/painotpi/how-we-got-our-vuejs-app-to-load-in-1-second-3gc7</guid>
      <description>&lt;h3&gt;
  &lt;a href="#context"&gt;
  &lt;/a&gt;
  📝 Context
&lt;/h3&gt;

&lt;p&gt;Livspace is a &lt;a href="https://www.livspace.io/who-we-are/livspace-platform/"&gt;three-way platform&lt;/a&gt; for homeowners, designers, and contractors. Our homeowner facing web application is the Livspace Hub. We’ll discuss the performance improvements we made on Hub in this article.&lt;/p&gt;

&lt;p&gt;Livspace Hub is a web-app we’ve developed for homeowners to track all of their project-related updates and documents in one place. It is a single stop shop for tracking the progress of their project. Homeowners who design their homes through Livspace are internally called “customers”, and their projects are internally called “projects” (seems obvious, but terminologies matter, and we like to keep nomenclature simple but clear). In the rest of the article, I will refer to Livspace Hub as “Hub”.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#%F0%9F%97%93-history"&gt;
  &lt;/a&gt;
  🗓 History
&lt;/h3&gt;

&lt;p&gt;Hub was initially architected as a Laravel app, serving the UI and the backend server. The UI was then later split to be a Vue SPA, while the Laravel server remained and served as our proxy layer.&lt;/p&gt;

&lt;p&gt;Our main goal for the initial re-architecture (splitting our UI to an SPA) was speed — we wanted to get the SPA version of our app to our customers as soon as possible. Then we could focus on improving the overall architecture.&lt;br&gt;
This obviously (and unfortunately) came with some trade-offs in the HOW’s of our implementation.&lt;/p&gt;

&lt;p&gt;This is what our initial high-level architecture diagram for Hub looked like after splitting the UI into a Vue SPA:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TVlh5P----/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rnaqwmcw1umwy1pqwimn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TVlh5P----/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rnaqwmcw1umwy1pqwimn.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This speed to market approach resulted in a SPA that was (in essence) hacked up together. The average load times our customers faced was about 15 seconds (un-throttled)! 🤯&lt;/p&gt;

&lt;p&gt;Here’s what our lighthouse score looked like under simulated throttling,&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qXYGNBIu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7rfx5pgvekgf2jyl09ym.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qXYGNBIu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7rfx5pgvekgf2jyl09ym.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this post, we will talk about the steps we took to improve that, and how we went from a load time of 15 seconds to under 1 second.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#%F0%9F%8F%9B-incremental-improvements"&gt;
  &lt;/a&gt;
  🏛 Incremental Improvements
&lt;/h3&gt;

&lt;p&gt;Given now that our frontend and backend codebases were separate, it gave us the flexibility to incrementally and iteratively improve parts of our stack.&lt;/p&gt;

&lt;p&gt;We set a roadmap to better the experience for our customers and classified this into 3 main goals,&lt;/p&gt;

&lt;p&gt;1) Remove the dependency on Laravel&lt;br&gt;
&lt;strong&gt;Tl;dr&lt;/strong&gt;&lt;br&gt;
The main reason for wanting to do this was maintenance difficulties — a mix of legacy code and lack of expertise around the tech with newer team-members joining us.&lt;br&gt;
We’ve replaced this layer with a thin NodeJS express server.&lt;/p&gt;

&lt;p&gt;2) Add a GraphQL layer&lt;br&gt;
&lt;strong&gt;Tl;dr&lt;/strong&gt;&lt;br&gt;
Livspace has a (surprise surprise) micro-services architecture on the backend, and client-side apps have to make API calls to multiple services to fetch the data to render any given page.&lt;/p&gt;

&lt;p&gt;With that in mind, it made (common) sense for us to add a GraphQL layer that can aggregate this data for us (from the different services) while also stripping out the unnecessary bits from the response.&lt;/p&gt;

&lt;p&gt;This also helped us serve smaller payloads to our 3 apps — Web, Android, and iOS.&lt;br&gt;
This is what our high-level architecture for Hub looks like now after implementing points 1 and 2,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XE-DJL0f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2osekdjbf3r3xgmyyuw9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XE-DJL0f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2osekdjbf3r3xgmyyuw9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our customers can access Hub via the web-app(VueJS), or via the iOS and Android native apps(ReactNative).&lt;/p&gt;

&lt;p&gt;For the rest of this article we’re going to focus on the improvements we’ve made to our web app. Our VueJS app is built with an Nginx docker image and deployed to a Kubernetes cluster hosted on AWS.&lt;/p&gt;

&lt;p&gt;The web-app primarily talks to Hub gateway — our NodeJS proxy layer — the gateway in-turn talks to multiple services, primarily Darzi — our data-stitching graphql layer — which is responsible for aggregating data from a whole host of micro-services.&lt;/p&gt;

&lt;p&gt;3) Reduce Front-End Load Times&lt;br&gt;
&lt;strong&gt;Tl;dr&lt;/strong&gt;&lt;br&gt;
On the front-end side, a SPA for Hub seemed adequate as it served the purpose well for our users. We consciously decided to not use something like Nuxt (with SSR/SSG) as the effort to “rewrite” with Nuxt wouldn’t really give us a significantly better app over a well-optimized SPA, and also since SEO isn’t a necessity for Hub.&lt;br&gt;
We’re going to focus on point 3 for the rest of this post and discuss in detail how we went about identifying and fixing performance bottlenecks on the front-end.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#identifying-performance-bottlenecks"&gt;
  &lt;/a&gt;
  👀 Identifying Performance Bottlenecks
&lt;/h3&gt;

&lt;p&gt;Identifying performance bottlenecks is far easier than it may seem, thanks to some amazingly wonderful tools that have been developed in the past few years.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#analyzing-issues"&gt;
  &lt;/a&gt;
  Analyzing issues
&lt;/h5&gt;

&lt;p&gt;We used VueCLI, Chrome Devtools, and Lighthouse for this, which is a fairly standard toolset.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Some of the steps mentioned might be specific to Vue, but these could easily be applied to your app in any other UI framework with alternative tools.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://cli.vuejs.org/"&gt;VueCLI3&lt;/a&gt; comes with some amazing features, one such is &lt;code&gt;vue ui&lt;/code&gt; which gives a GUI for developers to visualise and manage projects configurations, dependencies, and tasks.&lt;/p&gt;

&lt;p&gt;The simplest way to analyse your production build is to go to,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Task &amp;gt; build &amp;gt; Run Task | Run Analyzer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here's a point-in-time snapshot of what the analyzer looks like,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oaMqSuBb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/067v97ognr3887he0a0x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oaMqSuBb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/067v97ognr3887he0a0x.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3uXLExFL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vo3r9jn38st4xjvglwml.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3uXLExFL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vo3r9jn38st4xjvglwml.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you've used &lt;a href="https://www.npmjs.com/package/webpack-bundle-analyzer"&gt;Webpack Bundle Analyzer&lt;/a&gt;, this may seem familiar, just has a (much) nicer UI.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;vue ui&lt;/code&gt;, we were able to get an easy-to-read view of what parts of our app and dependencies were bloated as it gave a handy table view to analyze stats, parsed, and gzipped aspects of our build.&lt;/p&gt;

&lt;p&gt;We identified the problematic parts of our app to be,&lt;/p&gt;

&lt;p&gt;Vendor files&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bootstrap-vue.org/"&gt;Bootstrap Vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://momentjs.com/"&gt;MomentJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Unused packages and assets&lt;/li&gt;
&lt;li&gt;Our build chunk files were massive — in the order of MBs.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#%F0%9F%9B%A0-putting-fixes-in-place"&gt;
  &lt;/a&gt;
  🛠 Putting Fixes In Place
&lt;/h3&gt;

&lt;p&gt;1) Bootstrap Vue&lt;br&gt;
Our initial codebase had bootstrap-vue imported as a whole,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Don't do this!&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BootstrapVue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;IconsPlugin&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bootstrap-vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This obviously becomes problematic in the sense that we end up using a lot more than we need, which results in a really large chunk-vendor file.&lt;/p&gt;

&lt;p&gt;Thankfully, Bootstrap Vue has an ESM build variant which is tree-shakable, which allows us to import only what we need, and reduce our bundle size, you can read more about it &lt;a href="https://bootstrap-vue.org/docs#tree-shaking-with-module-bundlers"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our imports then changed to,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// --&lt;/span&gt;
&lt;span class="c1"&gt;// This sort of a "single export" syntax allows us to import&lt;/span&gt;
&lt;span class="c1"&gt;// only the specifics while bundlers can tree-shake &lt;/span&gt;
&lt;span class="c1"&gt;// and remove the unnecessary parts from the library.&lt;/span&gt;
&lt;span class="c1"&gt;// --&lt;/span&gt;
&lt;span class="c1"&gt;// Snippet is trimmed down for brevity.&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;
  &lt;span class="nx"&gt;LayoutPlugin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;CardPlugin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;ModalPlugin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;FormPlugin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;NavPlugin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;NavbarPlugin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bootstrap-vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Takeaway point: Whenever you're looking to add a new plugin to your app, always look for plugins that allow for tree-shaking.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2) MomentJS&lt;br&gt;
Moment is/was a fantastic library but unfortunately it has reached &lt;a href="https://momentjs.com/docs/#/-project-status/"&gt;end of life&lt;/a&gt; at least in terms of active development.&lt;br&gt;
It also does not work well with tree-shaking algos, which becomes problematic since you end up with the whole lib.&lt;/p&gt;

&lt;p&gt;As a replacement option, we went ahead with &lt;a href="https://date-fns.org/"&gt;date-fns&lt;/a&gt;, which gave us everything we wanted and also had a small footprint.&lt;/p&gt;

&lt;p&gt;3) Removing Unused Packages and Assets&lt;br&gt;
This was mostly a manual effort, we couldn't find any tools that could reliably tell us which of our packages and assets were going unused.&lt;/p&gt;

&lt;p&gt;After spending sometime in vscode and excessive use of some find-replace, we were able to eliminate unnecessary font-files, images, and some script files and the rest are deleted.&lt;/p&gt;

&lt;p&gt;For packages, a thorough review of our &lt;code&gt;package.json&lt;/code&gt; file and our file structure gave us enough insight to identify packages and application code that weren't used and these were mostly  features that were in active development at one point but are now pushed to the backlog.&lt;/p&gt;

&lt;p&gt;4) Reducing application bundle file size.&lt;/p&gt;

&lt;p&gt;4.1) Optimizing Vue Router Performance&lt;br&gt;
Vue gives some out-of-the-box ways to optimize and lazy-load routes and route-related assets. Lazy-loading routes helps optimize the way webpack generates the dependency graph for your application and hence reduce the size of your chunk files.&lt;/p&gt;

&lt;p&gt;Our initial codebase did not have any lazy-loading on our routes, so a simple change fixed our &lt;code&gt;main&lt;/code&gt; bundle size by a significant amount. Here's a snippet of what lazy-loading your vue-router config looks like,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// router/index.js&lt;/span&gt;
&lt;span class="c1"&gt;// --&lt;/span&gt;
&lt;span class="c1"&gt;// Adding webpackChunkName just gives a nicer more-readable&lt;/span&gt;
&lt;span class="c1"&gt;// name to your chunk file.&lt;/span&gt;
&lt;span class="c1"&gt;// --&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/callback&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;OidcCallback&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="cm"&gt;/* webpackChunkName: "auth-callback" */&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../views/AuthCallback.vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Home&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* webpackChunkName: "home" */&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../views/Home.vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:[{...}]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;4.2) Pre-compress static assets&lt;/p&gt;

&lt;p&gt;As seen in our high-level architecture diagram, we serve our application from an nginx server built via docker.&lt;/p&gt;

&lt;p&gt;Although Nginx provides dynamic compression of static assets,  through our testing we found that pre-compressing assets at build time resulted in better compression ratios for our files and helped save a few more KBs!&lt;/p&gt;

&lt;p&gt;4.3) Pre-loading important assets&lt;/p&gt;

&lt;p&gt;This is a tip from lighthouse that we decided to incorporate into our build step. The basic idea is to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/preload"&gt;preload&lt;/a&gt; all important assets that your (landing) page will need.&lt;/p&gt;

&lt;p&gt;4.4) Split chunks&lt;/p&gt;

&lt;p&gt;The easiest way to do a split chunks is just by adding the following config,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;optimization: {
  splitChunks: {
    chunks: "all"
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But we gained the best result by splitting chunks for certain important libraries and the rest of our 3rd party packages went into a common chunk.&lt;/p&gt;

&lt;p&gt;Here's what our config files look like,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// vue-config.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CompressionPlugin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;compression-webpack-plugin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PreloadPlugin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@vue/preload-webpack-plugin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myCompressionPlug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CompressionPlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;algorithm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gzip&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;js$|&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;css$|&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;png$|&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;svg$|&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;jpg$|&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;woff2$/i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;deleteOriginalAssets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myPreloadPlug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PreloadPlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preload&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;css$/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;style&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;woff2$/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;font&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;script&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;include&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;allAssets&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;fileWhitelist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;woff2&lt;/span&gt;&lt;span class="se"&gt;(\?&lt;/span&gt;&lt;span class="sr"&gt;.*&lt;/span&gt;&lt;span class="se"&gt;)?&lt;/span&gt;&lt;span class="sr"&gt;$/i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\/(&lt;/span&gt;&lt;span class="sr"&gt;vue|vendor~app|chunk-common|bootstrap~app|apollo|app|home|project&lt;/span&gt;&lt;span class="se"&gt;)\.&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;productionSourceMap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;production&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;chainWebpack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prefetch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;CompressionPlugin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myCompressionPlug&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;types&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue-modules&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;normal-modules&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;normal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;types&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;addStyleResource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stylus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;oneOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;configureWebpack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;myPreloadPlug&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;optimization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;splitChunks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;cacheGroups&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;vendors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;vue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;chunks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;all&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[\\/]&lt;/span&gt;&lt;span class="sr"&gt;node_modules&lt;/span&gt;&lt;span class="se"&gt;[\\/]((&lt;/span&gt;&lt;span class="sr"&gt;vue&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;.*&lt;/span&gt;&lt;span class="se"&gt;)[\\/]&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="na"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;chunks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;all&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[\\/]&lt;/span&gt;&lt;span class="sr"&gt;node_modules&lt;/span&gt;&lt;span class="se"&gt;[\\/]((&lt;/span&gt;&lt;span class="sr"&gt;bootstrap&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;.*&lt;/span&gt;&lt;span class="se"&gt;)[\\/]&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="na"&gt;apollo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;chunks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;all&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[\\/]&lt;/span&gt;&lt;span class="sr"&gt;node_modules&lt;/span&gt;&lt;span class="se"&gt;[\\/]((&lt;/span&gt;&lt;span class="sr"&gt;apollo&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;.*&lt;/span&gt;&lt;span class="se"&gt;)[\\/]&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="na"&gt;vendor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;chunks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;all&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[\\/]&lt;/span&gt;&lt;span class="sr"&gt;node_modules&lt;/span&gt;&lt;span class="se"&gt;[\\/]((?!(&lt;/span&gt;&lt;span class="sr"&gt;vue|bootstrap|apollo&lt;/span&gt;&lt;span class="se"&gt;))&lt;/span&gt;&lt;span class="sr"&gt;.*&lt;/span&gt;&lt;span class="se"&gt;)[\\/]&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="c1"&gt;// common chunk&lt;/span&gt;
          &lt;span class="na"&gt;common&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[\\/]&lt;/span&gt;&lt;span class="sr"&gt;src&lt;/span&gt;&lt;span class="se"&gt;[\\/]&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;minChunks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;chunks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;all&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;reuseExistingChunk&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;enforce&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addStyleResource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;rule&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;style-resource&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;style-resources-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/styles/sass/*.scss&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And our nginx config only required the following lines,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Enable gzip for pre-compressed static files
gzip_static on;
gzip_vary on;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#end-result"&gt;
  &lt;/a&gt;
  🎉 End Result
&lt;/h3&gt;

&lt;p&gt;Desktop - [No] Clear Storage - [No] Simulated Throttling&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CDSPN4K1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xykjv02aayueaqkig599.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CDSPN4K1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xykjv02aayueaqkig599.png" alt="DCSST"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mobile - [No] Clear Storage - [No] Simulated Throttling&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kt_J8ew5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5qoy7irs2dqcghog1x51.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kt_J8ew5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5qoy7irs2dqcghog1x51.png" alt="MCSST"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Desktop - [Yes] Clear Storage - [Yes] Simulated Throttling&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D0EtvS-N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/93mfj3asjn08dsfbt86t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D0EtvS-N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/93mfj3asjn08dsfbt86t.png" alt="DCSST2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mobile - [Yes] Clear Storage - [Yes] Simulated Throttling&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xyckk0DK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5b3jur9bziju2eqy40sv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xyckk0DK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5b3jur9bziju2eqy40sv.png" alt="MCSST2"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#future-plans"&gt;
  &lt;/a&gt;
  🔮 Future Plans
&lt;/h3&gt;

&lt;p&gt;We plan to reduce our mobile load times under simulated throttling, the goal is to get as low as possible! This will require us to revisit our gateway and GraphQL layers, and we’ll definitely share a part 2 blog discussing details of our upgrades.&lt;/p&gt;

&lt;p&gt;We are also exploring Brotli compression, caching, http2/3 as these will definitely help add some level of network level optimizations. Of course, this is not merely for Hub, but for the designer-facing and vendor-facing web-apps as well.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#were-hiring"&gt;
  &lt;/a&gt;
  💻 We're hiring!
&lt;/h3&gt;

&lt;p&gt;We’re always on the lookout for amazing talent, do check out the work we do at Livspace Engineering &lt;a href="https://www.livspace.io/"&gt;here&lt;/a&gt;. We are hiring across roles, details of which you will find &lt;a href="https://www.livspace.io/work-with-us/careers/"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>vue</category>
      <category>performance</category>
    </item>
    <item>
      <title>The two and a half + one flavors of next.js's pre-rendering</title>
      <author>martin krause</author>
      <pubDate>Sun, 08 Aug 2021 17:31:48 +0000</pubDate>
      <link>https://dev.to/martinkr/the-two-and-a-half-one-flavors-of-next-js-s-pre-rendering-44o</link>
      <guid>https://dev.to/martinkr/the-two-and-a-half-one-flavors-of-next-js-s-pre-rendering-44o</guid>
      <description>&lt;p&gt;Confused by the title? Don't be, we will take a look at the different pre-rendering options provided by &lt;code&gt;next.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;According to the documentation, &lt;code&gt;next.js&lt;/code&gt; has &lt;strong&gt;two&lt;/strong&gt; flavors of pre-rendering Static Generation (SSG) and Server-side Rendering (SSR):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Two forms of Pre-rendering&lt;br&gt;
&lt;code&gt;next.js&lt;/code&gt; has two forms of pre-rendering: Static Generation and Server-side Rendering. The difference is in when it generates the HTML for a page.&lt;br&gt;
&lt;a href="https://nextjs.org/docs/basic-features/pages#two-forms-of-pre-rendering"&gt;https://nextjs.org/docs/basic-features/pages#two-forms-of-pre-rendering&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What are the other &lt;strong&gt;one and a half&lt;/strong&gt; options? Let's take a deep breath and go for a deep dive!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1st-flavor-static-generation-ssg"&gt;
  &lt;/a&gt;
  1st flavor: &lt;a href="https://nextjs.org/docs/basic-features/pages#two-forms-of-pre-rendering"&gt;Static Generation (SSG)&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The HTML is generated at build time and will be reused on each request. It's the recommended one, because SSG pre-rendered pages are easy to cache and fast to deliver. Usually they have a lower &lt;code&gt;time for first paint&lt;/code&gt; and less &lt;code&gt;blocking time&lt;/code&gt;.&lt;br&gt;
In case you need dynamic data you can use combine it with Client-side Rendering.&lt;/p&gt;

&lt;p&gt;To prepare a page for Static Generation (SSG) use &lt;code&gt;getStaticProps&lt;/code&gt; and it is run on build time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#minimal-example"&gt;
  &lt;/a&gt;
  Minimal example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Page from '../Page';
export default Page;

export async function getStaticProps() {
    return { props };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2nd-flavor-serverside-rendering-ssr"&gt;
  &lt;/a&gt;
  2nd flavor: &lt;a href="https://nextjs.org/docs/basic-features/pages#two-forms-of-pre-rendering"&gt;Server-side Rendering (SSR)&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The HTML is generated on each request. You can easily add dynamic data or consume external API's and render their data to the HTML file before serving it to the client.&lt;/p&gt;

&lt;p&gt;To prepare a page for Server-side Rendering (SSR) use &lt;code&gt;getServerSideProps&lt;/code&gt; and is run on every request instead of on build time.&lt;/p&gt;

&lt;p&gt;Of course you can create a "hybrid" &lt;code&gt;next.js&lt;/code&gt; app by using Static Generation and Server-side Rendering depending on the page.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#minimal-example"&gt;
  &lt;/a&gt;
  Minimal example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Page from '../Page';
export default Page;

export async function getServerSideProps() {
    const props = await getData();
    return { props };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2nd-and-a-half-flavor-incremental-static-regeneration-isg"&gt;
  &lt;/a&gt;
  2nd and a half flavor: &lt;a href="https://nextjs.org/docs/basic-features/data-fetching#incremental-static-regeneration"&gt;Incremental Static Regeneration (ISG)&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The HTML is generated at build time and this cached version is shown initially.&lt;br&gt;
Then, the current, updated version is generated, shown and replaces the cached version of the page and consequent visitors will receive the new version immediately.&lt;br&gt;
It’s like a hybrid solution of SSG and SSR with a &lt;a href="https://datatracker.ietf.org/doc/html/rfc5861#section-3"&gt;stale-while-revalidate&lt;/a&gt; caching strategy. Using ISR instead of SSR will massively increase your application’s performance and improve your Lighthouse score as well as your user's experience.&lt;/p&gt;

&lt;p&gt;To prepare a page for Static Generation (SSG) use &lt;code&gt;getStaticProps&lt;/code&gt; with the &lt;code&gt;revalidate&lt;/code&gt; property.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#minimal-example"&gt;
  &lt;/a&gt;
  Minimal example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Page from '../Page';

export default Page;

export async function getStaticProps() {
    return { props, revalidate: 30 };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#plus-one-flavor-raw-next-export-endraw-"&gt;
  &lt;/a&gt;
  Plus one flavor: &lt;code&gt;$ next export&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;All the above examples are build for production with &lt;code&gt;$ next build&lt;/code&gt; and they are relying on the build-in &lt;code&gt;node.js&lt;/code&gt; server.  Even with the static sites from SSG you need a host with &lt;code&gt;node.js&lt;/code&gt; support (for example &lt;a href="https://dev.tovercel"&gt;https://www.vercel.com&lt;/a&gt; or &lt;a href="https://dev.tonetlify"&gt;https://www.netlify.com&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;If you're running &lt;code&gt;$ next export&lt;/code&gt; instead, &lt;code&gt;next.js&lt;/code&gt; will create a &lt;a href="https://nextjs.org/docs/advanced-features/static-html-export"&gt;truly static version&lt;/a&gt; of your page which you can drop into any webserver and thus can be served from any host.&lt;/p&gt;

&lt;p&gt;But be careful, of course this works only with SSG-ready pages and even then &lt;a href="https://nextjs.org/docs/advanced-features/static-html-export"&gt;some &lt;code&gt;next.js&lt;/code&gt; features are not available&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Incremental Static Generation (ISG) is not supported&lt;/li&gt;
&lt;li&gt;API Routes are not supported&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;getServerSideProps&lt;/code&gt; are not supported&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Internationalized Routing&lt;/code&gt; is not supported&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;next/image&lt;/code&gt; component's default loader is not supported&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary:
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;next.js&lt;/code&gt;'s flavors or pre-rendering:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/docs/basic-features/pages#two-forms-of-pre-rendering"&gt;Static Generation (SSG)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/docs/basic-features/pages#two-forms-of-pre-rendering"&gt;Server-side Rendering (SSR)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/docs/basic-features/data-fetching#incremental-static-regeneration"&gt;Incremental Static Regeneration (ISG)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/docs/advanced-features/static-html-export"&gt;True static HTML with &lt;code&gt;$ next export&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;I hope you enjoyed the post. If you &lt;a href="https://www.buymeacoffee.com/martinkr"&gt;buy me a coffee&lt;/a&gt; I can stay awake and write another one ;)&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>webdev</category>
      <category>node</category>
    </item>
    <item>
      <title>Amazon Connect Data Lake Best Practices | AWS White Paper Summary</title>
      <author>Salah Elhossiny</author>
      <pubDate>Sun, 08 Aug 2021 17:18:20 +0000</pubDate>
      <link>https://dev.to/awsmenacommunity/amazon-connect-data-lake-best-practices-aws-white-paper-summary-49eh</link>
      <guid>https://dev.to/awsmenacommunity/amazon-connect-data-lake-best-practices-aws-white-paper-summary-49eh</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Customer service is a crucial element of brand reputation and business success. &lt;/li&gt;
&lt;li&gt;Contact centers are vital to enabling a two-way agent-customer interaction and essential to delivering a superior customer service experience. Conversely, a poor experience can lead to customer churn. &lt;/li&gt;
&lt;li&gt;Organizations invest in omnichannel contact centers for a competitive edge in enhancing customer experience.&lt;/li&gt;
&lt;li&gt;To get the most advanced analytics beneﬁts, organizations need a robust platform and cost-eﬀective solution to run a thriving contact center. &lt;/li&gt;
&lt;li&gt;Amazon Web Services (AWS) provides customers with a comprehensive set of services and a scalable platform to ensure high availability, security, and resiliency of a data lake in the cloud.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This whitepaper outlines the best practices for architecting a contact center data lake with Amazon Connect.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The following ﬁgure shows the architecture of a traditional on-premises contact center.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jFEj3oOW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/127283202-dc879ae4-33b2-4bdb-97a6-6a3435f90c7d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jFEj3oOW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/127283202-dc879ae4-33b2-4bdb-97a6-6a3435f90c7d.png" alt="1"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The following ﬁgure shows a strategic approach to simplifying complex traditional contact center data spans across infrastructure, licensing, and maintenance environments into Amazon Connect.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SdBiGS45--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/127283239-4a78f25a-774a-4c98-8949-254a5e27a5af.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SdBiGS45--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/127283239-4a78f25a-774a-4c98-8949-254a5e27a5af.png" alt="2"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A data lake is a centralized, curated, and secured repository that stores and governs all your structured and unstructured data in its native or transformed formats for analysis.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS delivers the breadth and depth of services to build a secure, scalable, comprehensive, and cost-eﬀective data lake solution.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can use the AWS services to ingest, store, ﬁnd, process, and analyze data from a wide variety of sources.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#amazon-connect"&gt;
  &lt;/a&gt;
  Amazon Connect
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Amazon Connect is an easy-to-use and cost-eﬀective omnichannel cloud contact center.&lt;/li&gt;
&lt;li&gt;You can get started with a fully managed cloud-based and artiﬁcial intelligence (AI) enabled contact center within minutes.&lt;/li&gt;
&lt;li&gt;With the pay-as-you-go model, you pay only when the service is in use.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is no infrastructure to manage or upfront costs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Forrester Research Consulting conducted a Total Economic Impact (TEI) study on Amazon Connect and concluded a three-year ﬁnancial impact on how Amazon Connect helps customers with signiﬁcant cost savings, increased revenue, and improved agent productivity. Key ﬁndings include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reduction in cloud technology costs of $4.3 million&lt;/li&gt;
&lt;li&gt;Subscription cost savings of 31%&lt;/li&gt;
&lt;li&gt;Agent labor savings from reduced call volume of $4.6 million&lt;/li&gt;
&lt;li&gt;Increased operating income by $2.6 million with enhanced customer experience&lt;/li&gt;
&lt;li&gt;Return on investment (ROI) of 241%&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using Amazon Connect’s extensive set of published APIs, you can programmatically integrate with other AWS services and third-party systems, including customer relationship management (CRM) solutions and anti-fraud solutions. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The following ﬁgure shows a high-level Amazon Connect contact center architecture.&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IqqyHoqH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/127284304-c4ecad5a-83f0-47a3-8000-dd8fe37ec640.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IqqyHoqH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/127284304-c4ecad5a-83f0-47a3-8000-dd8fe37ec640.png" alt="3"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Connect provides a uniﬁed and seamless customer experience across multiple channels.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Along with voice and webchat, Amazon Connect integrates with Amazon Pinpoint and Amazon Simple Email Service (Amazon SES) to expand the contact center’s capability on text messages and email delivery.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Connect integrates with Apple Business Chat for Apple device users.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#data-lake-design-principles"&gt;
  &lt;/a&gt;
  Data lake design principles
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;How do you collect, store, and analyze high-velocity data across various data types, including structured, unstructured, and semi-structured?&lt;/li&gt;
&lt;li&gt;How do you store and share petabytes of data on-demand globally and cost-eﬀectively?&lt;/li&gt;
&lt;li&gt;How do you scale IT resources to support a high number of concurrent queries against your data and scale down automatically for cost savings?&lt;/li&gt;
&lt;li&gt;How do your users view, search, and run queries on multiple data repositories today?&lt;/li&gt;
&lt;li&gt;How do you derive future insights using historical data patterns and past scenarios?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#customer-pro%EF%AC%81les"&gt;
  &lt;/a&gt;
  Customer proﬁles
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Amazon Connect Customer Proﬁles enables agents to deliver eﬃcient and personalized customer service by importing customer information from various applications into a uniﬁed customer proﬁle.&lt;/li&gt;
&lt;li&gt;You can ingest customer data from homegrown or third-party applications such as Salesforce, ServiceNow, Zendesk, and Marketo into your Amazon Simple Storage Service (Amazon S3) data lake using pre-built connectors. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#contact-trace-record"&gt;
  &lt;/a&gt;
  Contact trace record
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;It captures transactional metrics such as hold time, wait time, and agent interaction time in JavaScript Object Notation (JSON) format.&lt;/li&gt;
&lt;li&gt;Amazon Connect aggregates CTR data to create metrics reporting. Data retention for CTR is 24 months upon contact initiation.&lt;/li&gt;
&lt;li&gt;You can stream CTRs to Amazon Kinesis for extended retention and advanced analysis.&lt;/li&gt;
&lt;li&gt;The CTR data model describes various event types available in CTRs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#contact-%EF%AC%82ow-logs"&gt;
  &lt;/a&gt;
  Contact ﬂow logs
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;It captures real-time events and metrics about how your customers interact with contact ﬂows.&lt;/li&gt;
&lt;li&gt;AWS CloudWatch creates a log group for each AWS Connect instance when you enable contact ﬂow logging and include a set logging behavior block for contact ﬂows.&lt;/li&gt;
&lt;li&gt;Contact ﬂow logs contain the contact ﬂow ID, the customer’s contact ID, and the block’s actions.&lt;/li&gt;
&lt;li&gt;Using contact ﬂow logs, you can compare customer’s interactions with diﬀerent contact ﬂow versions or trace their interactions through each contact ﬂow. &lt;/li&gt;
&lt;li&gt;Contact ﬂow logs help you debug and roll back contact ﬂows to previous versions should any issues arise.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#contact-lens-output-%EF%AC%81les"&gt;
  &lt;/a&gt;
  Contact Lens output ﬁles
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Using natural language processing (NLP) and speech-to-text analytics, Contact Lens for Amazon Connect provides insights to analyze customer sentiment, identify conversations trends for product feedback, and compliance audits for standard greetings and sign-oﬀs.&lt;/li&gt;
&lt;li&gt;With advanced conversational search, you can perform a fast full-text search for relevant calls by sentiment scores and non-talk time to identify common utterances that result in positive or negative customer sentiment. Contact Lens automatically redacts sensitive personally identiﬁable information (PII) for data privacy.&lt;/li&gt;
&lt;li&gt;Contact Lens stores metadata for call transcript, sentiment analysis, non-talk time, talk speed, interruptions, and categorization labels in Amazon S3. You can create custom visualization or machine learning (ML) models using data from Contact Lens and CTR stored in S3.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#agent-events-streams"&gt;
  &lt;/a&gt;
  Agent events streams
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;It captures and store agent activity in S3 via Amazon Kinesis Data Streams. &lt;/li&gt;
&lt;li&gt;You can create dashboards for near real-time agent reporting such as agent login, agent logout, agent connects with a contact and agent status change.&lt;/li&gt;
&lt;li&gt;You can integrate agent event streams into workforce management (WFM) solutions for agent staﬃng management or conﬁgure alerts on speciﬁc agent activity.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#voice-and-chat-recordings"&gt;
  &lt;/a&gt;
  Voice and chat recordings
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Amazon Connect records a conversation only when a customer connects to an agent. When the contact disconnects, the call recordings are available in your S3 bucket, or accessible in the customer's contact trace record (CTR).&lt;/li&gt;
&lt;li&gt;Amazon Connect redacts, encrypts, and stores voice and chat conversations between the agent and the contact in your S3 bucket for advanced analytics.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#thirdparty-integration"&gt;
  &lt;/a&gt;
  Third-party integration
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;When using AWS Partners or other third-party solutions with Amazon Connect, you can consolidate logs and external data sources in Amazon S3.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#data-lake-lifecycle"&gt;
  &lt;/a&gt;
  Data lake lifecycle
&lt;/h2&gt;

&lt;p&gt;Building a data lake typically involves ﬁve stages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Setting up storage&lt;/li&gt;
&lt;li&gt;Moving data&lt;/li&gt;
&lt;li&gt;Preparing and cataloging data&lt;/li&gt;
&lt;li&gt;Conﬁguring security policies&lt;/li&gt;
&lt;li&gt;Making data available for consumption&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3laDkYhr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/127730043-119f55b3-aadf-40ff-bc75-10beebd7507d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3laDkYhr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/127730043-119f55b3-aadf-40ff-bc75-10beebd7507d.png" alt="1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWS provides a comprehensive data transfer services portfolio to move your existing data into a centralized data lake. &lt;/li&gt;
&lt;li&gt;Amazon Storage Gateway and AWS Direct Connect can address hybrid cloud storage needs. &lt;/li&gt;
&lt;li&gt;For online data transfer, consider using AWS DataSync and Amazon Kinesis.&lt;/li&gt;
&lt;li&gt;Use the AWS Snow Family for oﬄine data transfer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cataloging"&gt;
  &lt;/a&gt;
  Cataloging
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;AWS Lake Formation can manage data ingestion via AWS Glue by automatically classifying data and storing deﬁnitions, schema, and metadata in a central data catalog. &lt;/li&gt;
&lt;li&gt;For faster analytics, Lake Formation converts data into Apache Parquet and ORC before storing it in your S3 data lake. &lt;/li&gt;
&lt;li&gt;AWS Glue DataBrew, a visual data preparation tool, allows data owners, subject matter experts, or users of all skill sets to participate in the data preparation process.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Amazon Connect encrypts personally identiﬁable information (PII) contact data and customer proﬁles at rest using a time-limited key speciﬁc to your Amazon Connect instance. &lt;/li&gt;
&lt;li&gt;All data exchanged between Amazon Connect and other AWS services, or external applications is always encrypted in transit using industry-standard transport layer security (TLS) encryption.&lt;/li&gt;
&lt;li&gt;We recommend identity-based policies for most data lake environments to simplify resource access management and service permission for your data lake users.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#monitoring"&gt;
  &lt;/a&gt;
  Monitoring
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Amazon Connect sends the instance’s usage data as Amazon CloudWatch metrics at a one-minute interval.&lt;/li&gt;
&lt;li&gt;Data retention is about 2 weeks. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#analytics"&gt;
  &lt;/a&gt;
  Analytics
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A contact center data lake built on a descriptive, predictive, and real-time analytics portfolio helps you extract meaningful insights and respond to critical business questions.&lt;/li&gt;
&lt;li&gt;For a highly scalable data warehousing solution, you can enable data streaming in Amazon Connect to stream CTRs into Amazon Redshift via Amazon Kinesis.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#machine-learning"&gt;
  &lt;/a&gt;
  Machine learning
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Building a data lake brings a new paradigm to contact center architecture, empowering your business to deliver enhanced and personalized customer service using machine learning (ML) capabilities.&lt;/li&gt;
&lt;li&gt;Amazon Connect provides call attributes from telephony carriers, such as voice equipment’s geographic location to show where the call originated, phone device types such as landline or mobile, number of network segments the call traversed, and other call origination information.&lt;/li&gt;
&lt;li&gt;Amazon Fraud Detector, you can create a ML model to identify potentially fraudulent activity by combining your datasets with Amazon Connect call attributes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/whitepapers/latest/amazon-connect-data-lake-best-practices/amazon-connect-data-lake-best-practices.pdf#amazon-connect-data-lake-best-practices"&gt; Original White Paper &lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloudskills</category>
    </item>
    <item>
      <title>20+ React Tools to Help You Become a More Productive Programmer</title>
      <author>Hari Haren</author>
      <pubDate>Sun, 08 Aug 2021 17:13:06 +0000</pubDate>
      <link>https://dev.to/thisishariharen/20-react-tools-to-help-you-become-a-more-productive-programmer-5do5</link>
      <guid>https://dev.to/thisishariharen/20-react-tools-to-help-you-become-a-more-productive-programmer-5do5</guid>
      <description>&lt;p&gt;As you can understand from the title of this article, the goal is to be more productive developing React applications. That is why a long intro is unnecessary. &lt;/p&gt;

&lt;p&gt;There are only two points that I want to highlight at the very beginning of the article:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This list is opinionated. That means first of all that you can make your additions. I am sure that it can be extended to 30 or even 40 React developer tools. That is why your comments on Facebook or Twitter are highly appreciated.&lt;/li&gt;
&lt;li&gt;This article can be useful first of all to beginners. That is why I provide some additional historical or background information about React.js in some paragraphs. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#reactide"&gt;
  &lt;/a&gt;
  Reactide
&lt;/h2&gt;

&lt;p&gt;Github stars: 9662&lt;br&gt;
Web-site: &lt;a href="http://reactide.io/"&gt;http://reactide.io/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XBos3OOw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-2lp3ga8.jpeg%26w%3D1920%26q%3D75" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XBos3OOw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-2lp3ga8.jpeg%26w%3D1920%26q%3D75" alt="reactide"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reactide is an integrated development environment (IDE) for web developers using React.js. If you use this tool, you don’t need server configuration as well as build-tool. Reactide is simply a desktop application that offers great opportunities for visualization thought live code editing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#belle"&gt;
  &lt;/a&gt;
  &lt;a href="https://nikgraf.github.io/belle/?ref=hackernoon.com#/?_k=744r8m"&gt;&lt;strong&gt;Belle&lt;/strong&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Github stars:&lt;/strong&gt; 2406&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Web-site:&lt;/strong&gt; &lt;a href="https://nikgraf.github.io/belle?ref=hackernoon.com"&gt;https://nikgraf.github.io/belle&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ws2G67lf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-7dw3g24.jpeg%26w%3D3840%26q%3D75" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ws2G67lf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-7dw3g24.jpeg%26w%3D3840%26q%3D75" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This open-source library was built by the members of React community. Belle is a UI framework that was built because of the difficulties with creating a decent UI with React in a short period. Too much freedom with React can lead to a giant waste of time. And that is where the opinionated component library Belle comes in handy. You can easily customize these components, and think only about the features you need to have. Mobile support and consistent API complying with React are also two big pluses of this tool.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-material-admin"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/flatlogic/20-react-developer-tools-to-increase-your-programming-productivity-1nfn?ref=hackernoon.com#react-material-admin"&gt;&lt;/a&gt;&lt;a href="https://flatlogic.com/templates/react-material-admin?ref=hackernoon.com"&gt;&lt;strong&gt;React Material Admin&lt;/strong&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Github stars:&lt;/strong&gt; 338&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Web-site:&lt;/strong&gt; &lt;a href="https://flatlogic.com/templates/react-material-admin?ref=hackernoon.com"&gt;https://flatlogic.com/templates/react-material-admin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9HyOrw0L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-04133gnj.jpeg%26w%3D3840%26q%3D75" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9HyOrw0L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-04133gnj.jpeg%26w%3D3840%26q%3D75" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The benefits of using admin templates are well known. This particular admin dashboard follows Google Material Design guidelines. It is completely jQuery and Bootstrap free and can be used for fast development of almost any kind of web application.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Basic Tables;&lt;/li&gt;
&lt;li&gt;  React Router;&lt;/li&gt;
&lt;li&gt;  Charts;&lt;/li&gt;
&lt;li&gt;  Authentication;&lt;/li&gt;
&lt;li&gt;  Basic Dashboard;&lt;/li&gt;
&lt;li&gt;  Notifications bar.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#react-semantic-ui"&gt;
  &lt;/a&gt;
  &lt;a href="https://react.semantic-ui.com/?ref=hackernoon.com"&gt;&lt;strong&gt;React Semantic UI&lt;/strong&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Github stars:&lt;/strong&gt; 10 228&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Web-site:&lt;/strong&gt; &lt;a href="https://react.semantic-ui.com/?ref=hackernoon.com"&gt;https://react.semantic-ui.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RVvIkUSA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-ef1p3g7l.jpeg%26w%3D3840%26q%3D75" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RVvIkUSA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-ef1p3g7l.jpeg%26w%3D3840%26q%3D75" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is an original Semantic UI library. And to use it in React you need to use a React integration of this library and Semantic UI CSS package. It will help to speed up the development process because of the prebuilt UI components. React Semantic UI is jQuery-free. As you probably know jQuery is a library for DOM manipulation. That is why it is unnecessary to keep real DOM in sync with virtual DOM (React uses JS representation of the real DOM).&lt;/p&gt;

&lt;p&gt;Among other features semantic UI React has:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Declarative API&lt;/li&gt;
&lt;li&gt;  Shorthand Props&lt;/li&gt;
&lt;li&gt;  Sub Components&lt;/li&gt;
&lt;li&gt;  Augmentation&lt;/li&gt;
&lt;li&gt;  Auto Controlled State&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#profiler"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/reactjs/rfcs/pull/51?ref=hackernoon.com"&gt;&lt;strong&gt;Profiler&lt;/strong&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Github stars:&lt;/strong&gt; 2 482&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Web-site:&lt;/strong&gt; &lt;a href="https://github.com/reactjs/rfcs/pull/51?ref=hackernoon.com"&gt;https://github.com/reactjs/rfcs/pull/51&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EBHBIZ6j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-j42g3g1x.jpeg%26w%3D3840%26q%3D75" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EBHBIZ6j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-j42g3g1x.jpeg%26w%3D3840%26q%3D75" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Two years ago the React team introduced Profiler. It gives you a summary of re-rendering of your app. You can increase your debugging performance using this “recording” your set of interactions with the help of this profiling feature. You will be able to see a visualization of re-render as well as screenshots of DOM update.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-component-benchmark"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/flatlogic/20-react-developer-tools-to-increase-your-programming-productivity-1nfn?ref=hackernoon.com#react-component-benchmark"&gt;&lt;/a&gt;&lt;a href="https://github.com/paularmstrong/react-component-benchmark?ref=hackernoon.com"&gt;&lt;strong&gt;React Component Benchmark&lt;/strong&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Github stars:&lt;/strong&gt; 276&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Web-site:&lt;/strong&gt; &lt;a href="https://github.com/paularmstrong/react-component-benchmark?ref=hackernoon.com"&gt;https://github.com/paularmstrong/react-component-benchmark&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9F-Otmas--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-us2n3g67.jpeg%26w%3D3840%26q%3D75" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9F-Otmas--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-us2n3g67.jpeg%26w%3D3840%26q%3D75" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you remember react-addons-perf? This tool provided developers with insights about app performance. As react 16 released you can no longer use react-addons-perf. React Component Benchmark is an open-source project that aims to solve the problem of getting an accurate benchmark metric. But it is important to understand that only large enough sample will give you a confident metric. The reason it’s happening like this is that this project does not hook into React directly. And because of this values are not accurate enough. That is why it is reasonable to run large samples.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-toolbox"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/flatlogic/20-react-developer-tools-to-increase-your-programming-productivity-1nfn?ref=hackernoon.com#react-toolbox"&gt;&lt;/a&gt;&lt;a href="http://react-toolbox.io/?ref=hackernoon.com#/"&gt;&lt;strong&gt;React Toolbox&lt;/strong&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Github stars:&lt;/strong&gt; 8 486&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Web-site:&lt;/strong&gt; &lt;a href="http://react-toolbox.io/?ref=hackernoon.com#/"&gt;http://react-toolbox.io/#/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JID_Y1tJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-ua323gec.jpeg%26w%3D3840%26q%3D75" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JID_Y1tJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-ua323gec.jpeg%26w%3D3840%26q%3D75" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the best tool for developing Material Design UI. It has tons of responsive components that comply with Google Material Design guidelines. The exhaustive list you can find right &lt;a href="http://react-toolbox.io/?ref=hackernoon.com#/"&gt;here&lt;/a&gt;. React Toolbox is created on top CSS Modules, ES6, and Webpack. Documentation page contains all the live examples of each component so it’s very illustrative.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-bootstrap"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/flatlogic/20-react-developer-tools-to-increase-your-programming-productivity-1nfn?ref=hackernoon.com#react-bootstrap"&gt;&lt;/a&gt;&lt;a href="https://react-bootstrap.github.io/?ref=hackernoon.com"&gt;&lt;strong&gt;React Bootstrap&lt;/strong&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Github stars:&lt;/strong&gt; 16 243&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Web-site:&lt;/strong&gt; &lt;a href="https://react-bootstrap.github.io/?ref=hackernoon.com"&gt;https://react-bootstrap.github.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9kFOXhZX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-ws3c3g8p.jpeg%26w%3D3840%26q%3D75" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9kFOXhZX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-ws3c3g8p.jpeg%26w%3D3840%26q%3D75" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can make a case that bootstrap is the largest UI ecosystem in the world. So React-Bootstrap was built for compatibility with Bootstrap. This is one of the oldest libraries for React. It has Bootstrap core, rely on Bootstrap stylesheet and fully evolved side by side with React.js itself. If you want a set of accessible-by-default components React-Bootstrap is giving you much more possibilities than plain Bootstrap.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sing-app-react"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/flatlogic/20-react-developer-tools-to-increase-your-programming-productivity-1nfn?ref=hackernoon.com#sing-app-react"&gt;&lt;/a&gt;&lt;a href="https://flatlogic.com/templates/sing-app-react?ref=hackernoon.com"&gt;&lt;strong&gt;Sing App React&lt;/strong&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Web-site:&lt;/strong&gt; &lt;a href="https://flatlogic.com/templates/sing-app-react?ref=hackernoon.com"&gt;https://flatlogic.com/templates/sing-app-react&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5pO8WvZ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-k43n3g3p.jpeg%26w%3D3840%26q%3D75" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5pO8WvZ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-k43n3g3p.jpeg%26w%3D3840%26q%3D75" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This fully responsive admin template was downloaded more than 1000 times. This template is versatile and was built by professional UI/UX experts. It has more than 60 ready-to-use components and provides you with intuitive framework. It can be useful for building such CRM, CMS, SAAS, etc.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Tens of Pages&lt;/li&gt;
&lt;li&gt;  Fully Responsive&lt;/li&gt;
&lt;li&gt;  8 Charts Library&lt;/li&gt;
&lt;li&gt;  2 Dashboards&lt;/li&gt;
&lt;li&gt;  Theme Support&lt;/li&gt;
&lt;li&gt;  E-Commerce Section&lt;/li&gt;
&lt;li&gt;  Static &amp;amp; Hover Sidebar&lt;/li&gt;
&lt;li&gt;  Fully Documented Codebase&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#periscope"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/shea-hawkins/periscope?ref=hackernoon.com"&gt;&lt;strong&gt;Periscope&lt;/strong&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Github stars:&lt;/strong&gt; 22&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Web-site:&lt;/strong&gt; &lt;a href="https://github.com/shea-hawkins/periscope?ref=hackernoon.com"&gt;https://github.com/shea-hawkins/periscope&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jl-4-xuy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-ex4j3g1m.jpeg%26w%3D3840%26q%3D75" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jl-4-xuy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-ex4j3g1m.jpeg%26w%3D3840%26q%3D75" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There isn’t much to say about this open-source project. This is monitoring for Redux applications. You can view your app at all times and adjust the timeline range.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-wastage-monitor"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/MalucoMarinero/react-wastage-monitor?ref=hackernoon.com"&gt;&lt;strong&gt;React Wastage Monitor&lt;/strong&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Github stars:&lt;/strong&gt; 93&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Web-site:&lt;/strong&gt; &lt;a href="https://github.com/MalucoMarinero/react-wastage-monitor?ref=hackernoon.com"&gt;https://github.com/MalucoMarinero/react-wastage-monitor&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KltUSuBJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-8z4v3gql.jpeg%26w%3D3840%26q%3D75" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KltUSuBJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-8z4v3gql.jpeg%26w%3D3840%26q%3D75" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This project helps you to manage performance issues by detecting wasted rendering time. To understand the importance of this tool you need to dive deep into the concept of . Implementing PureComponent stops the process called React reconciliation (you can read more &lt;a href="https://reactjs.org/docs/reconciliation.html?ref=hackernoon.com"&gt;here&lt;/a&gt;). And PureComponent only re-render when it’s necessary. If you rely on Redux managing to access possible performance mistakes you risk making a critical mistake. React Wastage Monitor ensures you never waste computation on unnecessary renders.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-studio"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/flatlogic/20-react-developer-tools-to-increase-your-programming-productivity-1nfn?ref=hackernoon.com#react-studio"&gt;&lt;/a&gt;&lt;a href="https://reactstudio.com/?ref=hackernoon.com"&gt;&lt;strong&gt;React Studio&lt;/strong&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Web-site:&lt;/strong&gt; &lt;a href="https://reactstudio.com/?ref=hackernoon.com"&gt;https://reactstudio.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sRhdcUrP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-m0523ghf.jpeg%26w%3D3840%26q%3D75" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sRhdcUrP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-m0523ghf.jpeg%26w%3D3840%26q%3D75" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;React Studio is a useful tool for web developers and web designers. Web developers can enjoy clean JS code, good visual design representation that respects React.js concepts. You can design separate UI components using the code generator. A designer can enjoy responsive layouts that can be easily turned into React code, mobile preview and use it as a prototyping tool. You can have your clean code promptly with nothing extra.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#atom-react-plugin"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/flatlogic/20-react-developer-tools-to-increase-your-programming-productivity-1nfn?ref=hackernoon.com#atom-react-plugin"&gt;&lt;/a&gt;&lt;a href="https://orktes.github.io/atom-react/?ref=hackernoon.com"&gt;&lt;strong&gt;Atom React Plugin&lt;/strong&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Github starts:&lt;/strong&gt; 493&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Web-site:&lt;/strong&gt; &lt;a href="https://orktes.github.io/atom-react/?ref=hackernoon.com"&gt;https://orktes.github.io/atom-react/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WRGV1mgW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-c5593g9i.jpeg%26w%3D3840%26q%3D75" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WRGV1mgW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-c5593g9i.jpeg%26w%3D3840%26q%3D75" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is support for the Atom Editor that helps highlight JSX code. JavaScript Syntax eXtensin without the plugin is very difficult to work with. With the addition of highlighter and code folding, you can make fewer mistakes. It will help you be more productive and makes your job easier.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-extension-pack"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/flatlogic/20-react-developer-tools-to-increase-your-programming-productivity-1nfn?ref=hackernoon.com#react-extension-pack"&gt;&lt;/a&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=jawandarajbir.react-vscode-extension-pack&amp;amp;ref=hackernoon.com"&gt;&lt;strong&gt;React Extension Pack&lt;/strong&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Web-site:&lt;/strong&gt; &lt;a href="https://marketplace.visualstudio.com/items?itemName=jawandarajbir.react-vscode-extension-pack&amp;amp;ref=hackernoon.com"&gt;https://marketplace.visualstudio.com/items?itemName=jawandarajbir.react-vscode-extension-pack&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fj5GSQhI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-e05k3goy.jpeg%26w%3D3840%26q%3D75" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fj5GSQhI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-e05k3goy.jpeg%26w%3D3840%26q%3D75" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As well as the previous tool this one is used to adjust your code editor. You can speed up the development process in Visual Studio using these seven extensions:&lt;/p&gt;

&lt;p&gt;ng)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Code snippets;&lt;/li&gt;
&lt;li&gt;  An integrated npm;&lt;/li&gt;
&lt;li&gt;  ES6 snippets;&lt;/li&gt;
&lt;li&gt;  ESLint;&lt;/li&gt;
&lt;li&gt;  File paths;&lt;/li&gt;
&lt;li&gt;  IntelliSense for npm modules;&lt;/li&gt;
&lt;li&gt;  A search feature for node_modules.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#react-style-guide-generator"&gt;
  &lt;/a&gt;
  &lt;a href="https://pocotan001.github.io/react-styleguide-generator/?ref=hackernoon.com#!."&gt;&lt;strong&gt;React Style Guide Generator&lt;/strong&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Github starts:&lt;/strong&gt; 699&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Web-site:&lt;/strong&gt; &lt;a href="http://pocotan001.github.io/react-styleguide-generator/?ref=hackernoon.com#"&gt;http://pocotan001.github.io/react-styleguide-generator/#&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5p0D7rRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-br6a3g2o.jpeg%26w%3D3840%26q%3D75" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5p0D7rRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-br6a3g2o.jpeg%26w%3D3840%26q%3D75" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You need to maintain a consistent style across all the pages. When a big team is working on the same project all colors, typography, paddings should be consistent. To make a convenient style guide you can use React Style Guide Generator. And even if in a couple of years you will need to make adjustments or addons to your project you can simply give a developer or agency your style guide.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flatlogic-one-react"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/flatlogic/20-react-developer-tools-to-increase-your-programming-productivity-1nfn?ref=hackernoon.com#flatlogic-one-react"&gt;&lt;/a&gt;&lt;a href="https://flatlogic.com/templates/one-react-template?ref=hackernoon.com"&gt;&lt;strong&gt;Flatlogic One React&lt;/strong&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Github stars:&lt;/strong&gt; 46&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Web-site:&lt;/strong&gt; &lt;a href="https://flatlogic.com/templates/one-react-template?ref=hackernoon.com"&gt;https://flatlogic.com/templates/one-react-template&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eEg8pjs1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-2w6j3g4r.jpeg%26w%3D3840%26q%3D75" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eEg8pjs1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-2w6j3g4r.jpeg%26w%3D3840%26q%3D75" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is an admin template made with React 16 and Redux. The template has a responsive layout with tens of pages and hundreds of customizable components. The designers did a good job on this product. Flatlogic One React is a good basis for creating CMS systems, SAAS, Blog/Data management solutions, E-Commerce.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Tens of Pages;&lt;/li&gt;
&lt;li&gt;  Beautiful charts made with Amcharts, Echarts, and Apexcharts;&lt;/li&gt;
&lt;li&gt;  Fully responsive;&lt;/li&gt;
&lt;li&gt;  React 16;&lt;/li&gt;
&lt;li&gt;  Redux;&lt;/li&gt;
&lt;li&gt;  Login and Logout screens;&lt;/li&gt;
&lt;li&gt;  Notifications &amp;amp; Icons;&lt;/li&gt;
&lt;li&gt;  Flatlogic Typography &amp;amp; Icons;&lt;/li&gt;
&lt;li&gt;  2 Dashboards;&lt;/li&gt;
&lt;li&gt;  Google Maps Integrated, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/team-gryff/react-monocle?ref=hackernoon.com"&gt;&lt;strong&gt;React Monocle&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github starts:&lt;/strong&gt; 2 402&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Web-site:&lt;/strong&gt; &lt;a href="https://github.com/team-gryff/react-monocle?ref=hackernoon.com"&gt;https://github.com/team-gryff/react-monocle&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6H689RLz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-ep7b3go8.jpeg%26w%3D3840%26q%3D75" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6H689RLz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-ep7b3go8.jpeg%26w%3D3840%26q%3D75" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you work on some complex projects with tons of classes of components it is always hard to manage such a project and debug it. In this case, only a transparent structure of a project is a condition for the successful delivery of a project. React-monocle can visualize all the relationships of all the components and show you the hierarchies very fast.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-style-guide-generator"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/flatlogic/20-react-developer-tools-to-increase-your-programming-productivity-1nfn?ref=hackernoon.com#react-style-guide-generator"&gt;&lt;/a&gt;&lt;a href="https://pocotan001.github.io/react-styleguide-generator/?ref=hackernoon.com#!."&gt;&lt;strong&gt;React Style Guide Generator&lt;/strong&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Github starts:&lt;/strong&gt; 699&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Web-site:&lt;/strong&gt; &lt;a href="http://pocotan001.github.io/react-styleguide-generator/?ref=hackernoon.com#"&gt;http://pocotan001.github.io/react-styleguide-generator/#&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_O0OeySH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-ze7r3gq6.jpeg%26w%3D3840%26q%3D75" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_O0OeySH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-ze7r3gq6.jpeg%26w%3D3840%26q%3D75" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You need to maintain a consistent style across all the pages. When a big team is working on the same project all colors, typography, paddings should be consistent. To make a convenient style guide you can use React Style Guide Generator. And even if in a couple of years you will need to make adjustments or addons to your project you can simply give a developer or agency your style guide.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-redux-starter-kit"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/flatlogic/20-react-developer-tools-to-increase-your-programming-productivity-1nfn?ref=hackernoon.com#react-redux-starter-kit"&gt;&lt;/a&gt;&lt;a href="https://github.com/coryhouse/react-slingshot?ref=hackernoon.com"&gt;&lt;strong&gt;React + Redux starter kit&lt;/strong&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Github starts:&lt;/strong&gt; 9 436&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Web-site:&lt;/strong&gt; &lt;a href="https://github.com/coryhouse/react-slingshot?ref=hackernoon.com"&gt;https://github.com/coryhouse/react-slingshot&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2uNgnQOY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-5m7y3ggy.jpeg%26w%3D3840%26q%3D75" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2uNgnQOY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-5m7y3ggy.jpeg%26w%3D3840%26q%3D75" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This starter kit implements React best practices. This includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Bundling;&lt;/li&gt;
&lt;li&gt;  Minification;&lt;/li&gt;
&lt;li&gt;  Testing;&lt;/li&gt;
&lt;li&gt;  Lintinting;&lt;/li&gt;
&lt;li&gt;  Hot reloading, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The most valuable part of this project is the amount of developers expertise that was put is this boilerplate. You no longer need to make tons of difficult decisions starting from the structure of the project until the testing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-boilerplate"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.reactboilerplate.com/?ref=hackernoon.com"&gt;&lt;strong&gt;React Boilerplate&lt;/strong&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Github starts:&lt;/strong&gt; 23 457&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Web-site:&lt;/strong&gt; &lt;a href="https://www.reactboilerplate.com/?ref=hackernoon.com"&gt;https://www.reactboilerplate.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L5t5oG25--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-k88t3g4v.jpeg%26w%3D3840%26q%3D75" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L5t5oG25--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-k88t3g4v.jpeg%26w%3D3840%26q%3D75" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you start a new app very often create-react-app crosses your mind. But you can also use a boilerplate with all dependencies prebuilt. This ready-to-use was created by the community to maximize the development speed and therefore your effectiveness. React Boilerplate can easily work with well known Chrome Redux DevTools.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#storybook"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/flatlogic/20-react-developer-tools-to-increase-your-programming-productivity-1nfn?ref=hackernoon.com#storybook"&gt;&lt;/a&gt;&lt;a href="https://storybook.js.org/?ref=hackernoon.com"&gt;&lt;strong&gt;Storybook&lt;/strong&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Github starts:&lt;/strong&gt; 41 230&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Web-site:&lt;/strong&gt; &lt;a href="https://storybook.js.org/?ref=hackernoon.com"&gt;https://storybook.js.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VDMciLGo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-7k913gch.jpeg%26w%3D3840%26q%3D75" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VDMciLGo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-7k913gch.jpeg%26w%3D3840%26q%3D75" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Storybook helps you develop nice separate UI components. In case when you need to make some isolated from business logic this tool provides so-called sandbox. And that in this sandbox or playground (you can call it as you want) you can create components. So why it is called a storybook? Because it documents components as stories. Each story contains states. Each state can be may be compared with the visual test case. In the end, a story is simply a function. This function returns a value that is rendered to the screen.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reactsight"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/flatlogic/20-react-developer-tools-to-increase-your-programming-productivity-1nfn?ref=hackernoon.com#reactsight"&gt;&lt;/a&gt;&lt;a href="https://github.com/React-Sight/React-Sight?ref=hackernoon.com"&gt;&lt;strong&gt;React-Sight&lt;/strong&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Github starts:&lt;/strong&gt; 2 121&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Web-site:&lt;/strong&gt; &lt;a href="https://github.com/React-Sight/React-Sight?ref=hackernoon.com"&gt;https://github.com/React-Sight/React-Sight&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KQlNLn2n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-8e983gte.jpeg%26w%3D3840%26q%3D75" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KQlNLn2n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hackernoon.com/_next/image%3Furl%3Dhttps%253A%252F%252Fcdn.hackernoon.com%252Fimages%252FTkXSVW7EqNS2zdgIZOW2FYBu2Nj1-8e983gte.jpeg%26w%3D3840%26q%3D75" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This tool fully supports Router, Redux, and Fiber, and shows your app’s hierarchy. As well as previous visualization tool it requires to React Dev Tools that can be installed as an extension in Chrome.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This Article is actually from Hackernoon. I pain-stakingly did the markdown conversion and posted it here for you guys ❤😉. So it would be great if you guys can support me. It will encourage me to publish more like this. Thanks&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;If you like it then don’t be  a stranger, give me few likes &amp;amp; you can also buy me a coffee before leaving. Cheers! 😉✌&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/hariharen"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zQj764Ae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/default-orange.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>tools</category>
      <category>discuss</category>
      <category>startup</category>
    </item>
    <item>
      <title>4 unique and useful ways of visualizing data in python</title>
      <author>Code_Jedi</author>
      <pubDate>Sun, 08 Aug 2021 17:12:57 +0000</pubDate>
      <link>https://dev.to/code_jedi/4-unique-and-useful-ways-of-visualizing-data-in-python-4gae</link>
      <guid>https://dev.to/code_jedi/4-unique-and-useful-ways-of-visualizing-data-in-python-4gae</guid>
      <description>&lt;p&gt;&lt;strong&gt;Today, i'll be showing you 4 interesting and unique ways of visualizing data in python, as well as when you should use each one...&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;Let's start with the &lt;strong&gt;&lt;a href="https://www.python-graph-gallery.com/3d/"&gt;3D plot&lt;/a&gt;&lt;/strong&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZumHM9f_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0y9rc3ejyvudekbzhcwp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZumHM9f_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0y9rc3ejyvudekbzhcwp.png" alt="3D plot"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use cases&lt;/strong&gt;:&lt;br&gt;
&lt;em&gt;Visualizing data in 3 dimensions&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Comparing data points in 3 dimensions&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The 3D plot does a great job at visualizing data points in 3 dimensions, you can also rotate and tilt such a 3D graph to look at it from different points of view.&lt;/p&gt;




&lt;p&gt;Next up, the &lt;strong&gt;&lt;a href="https://www.python-graph-gallery.com/wordcloud/"&gt;Word cloud&lt;/a&gt;&lt;/strong&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0o2sq8v9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20azzmuj7ikoky2mq7s2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0o2sq8v9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20azzmuj7ikoky2mq7s2.png" alt="word cloud"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Use cases&lt;/strong&gt;:&lt;br&gt;
&lt;em&gt;Visualizing data in the form of words and sentences&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Sentiment analysis&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This will be useful for visualizing things like today's news headlines, tweets or twitter bios. A good example is &lt;a href="https://dev.to/code_jedi/create-a-wordcloud-of-news-headlines-in-python-5549"&gt;this tutorial&lt;/a&gt; explaining how to create a word cloud of news headlines in python.&lt;/p&gt;




&lt;p&gt;Now for The &lt;strong&gt;&lt;a href="https://www.python-graph-gallery.com/sankey-diagram/"&gt;Sankey diagram&lt;/a&gt;&lt;/strong&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yq6msQMv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9unb3ucp5aqp4oqendji.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yq6msQMv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9unb3ucp5aqp4oqendji.png" alt="Sankey diagram"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Use cases&lt;/strong&gt;:&lt;br&gt;
&lt;em&gt;Visualizing data flows and how different pieces of data distribute, and contribute to each other&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This one is my personal favorite since this provides a simple and effective way of visualizing everyday things like: monthly expenses, finance management, resource management and more...&lt;/p&gt;




&lt;p&gt;Last but not least, the &lt;strong&gt;&lt;a href="https://www.python-graph-gallery.com/radar-chart/"&gt;Radar chart&lt;/a&gt;&lt;/strong&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KWh7aiaD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ma13h84qc6b1n9rgn3nt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KWh7aiaD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ma13h84qc6b1n9rgn3nt.png" alt="Radar chart"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Use cases&lt;/strong&gt;:&lt;br&gt;
&lt;em&gt;Visualizing characteristics and data based on data points in multiple dimensions&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This one is a little hard to understand from the beginning, but once you get the hang of it, you'll see that it's very useful for visualizing and comparing data in multiple dimensions.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;That's it for this compilation...&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;If you're a beginner who likes discovering new things about python, try &lt;a href="https://rebrand.ly/Python_Explore"&gt;my weekly python newsletter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AzRM3KCq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shsp6agymqlpycn12z3c.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AzRM3KCq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shsp6agymqlpycn12z3c.jpeg" alt="aug4py"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Byeeeee👋&lt;/p&gt;

</description>
      <category>python</category>
      <category>datascience</category>
      <category>machinelearning</category>
      <category>programming</category>
    </item>
    <item>
      <title>My favourite Kotlin features
</title>
      <author>Luke Garrigan</author>
      <pubDate>Sun, 08 Aug 2021 16:52:49 +0000</pubDate>
      <link>https://dev.to/lukegarrigan/my-favourite-kotlin-features-2ma3</link>
      <guid>https://dev.to/lukegarrigan/my-favourite-kotlin-features-2ma3</guid>
      <description>&lt;p&gt;Last Saturday I sat down with a strong cup of coffee and  &lt;a href="https://codeheir.com/2021/07/31/katas-in-kotlin/"&gt;got stuck into some Kotlin&lt;/a&gt;. I thoroughly enjoyed the process and likewise, thoroughly enjoyed the language. Its simplicity, elegance and to-the-pointedness make me envy those lucky devs that use it day-to-day.&lt;/p&gt;

&lt;p&gt;Engineers whose job is to create tools for popular programming languages — and the best ones at that — would certainly know a thing or two about each language’s strengths and weaknesses. It was the perfect recipe, and the oven was set at the perfect temperature.&lt;/p&gt;

&lt;p&gt;Coincedentally — and to my astonishment — Kotlin is celebrating its  &lt;a href="https://www.youtube.com/watch?v=uE-1oF9PyiY"&gt;10th anniversary.&lt;/a&gt;  I still consider it the new kid on the block, even if 142,000 apps are using it with upwards of  &lt;a href="https://www.appbrain.com/stats/libraries/details/kotlin/kotlin"&gt;380,000,000,000 downloads&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My knowledge of the language is embryonic, to say the least. I’ve roughly spent a total of 7 hours coding in Kotlin, that’s around 3 hours solving  &lt;a href="https://codeheir.com/2021/07/31/katas-in-kotlin/"&gt;Katas on Codewars&lt;/a&gt;  and around 4 hours creating very simple Android applications — details of which I’ll go into in my next blog. So, I am by no means an expert. Yet, I’ve still managed to compile 5 things that I  &lt;strong&gt;love&lt;/strong&gt;  about the language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#clean-syntax"&gt;
  &lt;/a&gt;
  Clean syntax
&lt;/h2&gt;

&lt;p&gt;The language is clean. And by clean I mean not verbose. As a Java turned C# developer I can acknowledge that sometimes the code I write is verbose. Verbosity however, is sometimes needed for code clarity. Kotlin has managed to reduce verbosity whilst keeping clarity and — somehow — managed to improve code readability (In my opinion). Here’s a few examples of how they’ve achieved it:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Final made simple&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Java to create a final variable — that is, a variable that can only be initialised once — you’d have the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="no"&gt;AGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whereas in Kotlin you have two different keywords to declare variables:  &lt;code&gt;val&lt;/code&gt;  and  &lt;code&gt;var&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;age&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;val&lt;/code&gt;  being the final equivalent. Much like TypeScript’s  &lt;code&gt;const&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also, you may have noticed that semi-colons are not required. Oh, and there are inferred types, which there are too in Java and C# now, but it’s worth pointing out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No new keyword&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This one caught me off guard. There I was, trying to create my first object in Kotlin:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;person&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// unresolved reference new&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The  &lt;code&gt;new&lt;/code&gt;  keyword is so embedded in my hippocampus for object-oriented programming that I thought I’d made some syntactical error, which, of course, I had.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let’s have some fun&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Kotlin is fun, but to define a function all you need is  &lt;code&gt;fun&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// doing something&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Such a trivial thing, but having a vital keyword only being 3 characters allows you to focus on what’s important.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#not-so-nullable-types"&gt;
  &lt;/a&gt;
  Not so nullable types
&lt;/h2&gt;

&lt;p&gt;Null references — known as the  &lt;a href="https://www.wikiwand.com/en/Tony_Hoare#/Apologies_and_retractions"&gt;billion-dollar mistake&lt;/a&gt;  — have plagued developers for half a century. I can’t imagine a single developer who has not been stung by this hornet. We’ve all attempted to access a member of a null object at some point.  &lt;code&gt;NullPointerException&lt;/code&gt;  or  &lt;code&gt;NullReferenceException&lt;/code&gt;  or  &lt;code&gt;Cannot read property of null&lt;/code&gt;, I’m sure one of these inflicts PTSD in some of you.&lt;/p&gt;

&lt;p&gt;In Kotlin, references are not nullable by default. You have to explicitly make them nullable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Luke"&lt;/span&gt; 
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="c1"&gt;// compilation error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want string to be nullable you’d have to use the nullable syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Luke"&lt;/span&gt; 
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="c1"&gt;// all good&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So what happens if you want to access a property of  &lt;code&gt;name&lt;/code&gt;  in this scenario? It’d just throw a null reference exception wouldn’t it? Nope:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Luke"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;nameLength&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Only safe (?.) or non-null asserted (!!.) calls are allowed on a nullable receiver of type String?&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead, you get a compile-time error explaining what you need to do to access the member, brilliant.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#extension-functions"&gt;
  &lt;/a&gt;
  Extension functions
&lt;/h2&gt;

&lt;p&gt;Okay, this one may be a bit of a cop-out as I am predominantly a C# developer and have on numerous occasions, expressed my love for extension methods. Having the ability to write new functions for third-party code whose source is not easily editable is a game-changer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;10.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;half&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nc"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;half&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;Double&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I also prefer the implementation of extension functions in Kotlin to other languages, there’s less syntactic sugar, which is always a plus from me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#convert-to-kotlin"&gt;
  &lt;/a&gt;
  Convert to Kotlin
&lt;/h2&gt;

&lt;p&gt;One of the best parts of Kotlin is its interoperability with Java, making it easy for Java devs to make the transition. JetBrains IDEs allow you to directly convert Java code to Kotlin, by the click of a button, amazing. This is not so much a feature of the language but rather a feature of the tooling.&lt;/p&gt;

&lt;p&gt;I don’t believe there’s any tooling to convert Kotlin code to Java, but, why would you? Well, I’m sure somebody, somewhere has this requirement, but for me I’d stick to Kotlin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Kotlin has met me well. Many decisions have been made with careful consideration from a team of talented individuals oozing knowledge in programming languages.&lt;/p&gt;

&lt;p&gt;As mentioned earlier, I’m new to the language, but I like what I’m seeing. And I intend to see more of it.&lt;/p&gt;

&lt;p&gt;I’m currently coding an android app to  &lt;a href="https://github.com/LukeGarrigan/pace-calculator"&gt;calculate running paces&lt;/a&gt;, which will be written about in my next blog if you’re interested.&lt;/p&gt;

&lt;p&gt;Thank you for reading this blog, I hope you’ve enjoyed it! Please signup  &lt;a href="https://codeheir.com/newsletter/"&gt;to my newsletter&lt;/a&gt;  if you did.&lt;/p&gt;

</description>
      <category>kotlin</category>
    </item>
    <item>
      <title>I do dotfiles!</title>
      <author>Siddharth</author>
      <pubDate>Sun, 08 Aug 2021 15:54:45 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/i-do-dotfiles-5ap6</link>
      <guid>https://dev.to/siddharthshyniben/i-do-dotfiles-5ap6</guid>
      <description>&lt;p&gt;Just a quick post to let you know about my &lt;a href="https://github.com/siddshy/dotfiles"&gt;dotfiles&lt;/a&gt; repository. It contains my Vim, Zsh, tmux, and git config, and it's mostly geared at Typescript/Angular/Node.js development. Feel free to check it out!&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>zsh</category>
      <category>git</category>
      <category>vim</category>
    </item>
    <item>
      <title>Rust's Vector</title>
      <author>Nicolas Frankel</author>
      <pubDate>Sun, 08 Aug 2021 15:40:35 +0000</pubDate>
      <link>https://dev.to/nfrankel/rust-s-vector-2fnj</link>
      <guid>https://dev.to/nfrankel/rust-s-vector-2fnj</guid>
      <description>&lt;p&gt;I'll be honest: I initially wanted to describe all collections available in Rust as well as their related concepts. Then, I started to dig a bit into it, and I decided it would have been (much) too long. For that reason, I'll restrict the scope to the &lt;code&gt;Vec&lt;/code&gt; type.&lt;/p&gt;

&lt;p&gt;Here's the diagram we will dive into:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pp2zDgTl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eguknq7s243ysx0sgawx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pp2zDgTl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eguknq7s243ysx0sgawx.png" alt="Rust's Vector &amp;quot;class&amp;quot; diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basics-of-vector"&gt;
  &lt;/a&gt;
  Basics of Vector
&lt;/h2&gt;

&lt;p&gt;From the &lt;a href="https://doc.rust-lang.org/std/vec/struct.Vec.html"&gt;documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A contiguous growable array type, written as &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; and pronounced 'vector'.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Just as with Java's &lt;code&gt;ArrayList&lt;/code&gt;, &lt;code&gt;Vec&lt;/code&gt; is backed by an array. When the array reaches full capacity, &lt;code&gt;Vec&lt;/code&gt; reserves a new array with more capacity and copies elements from the original array to the newly-created one. Then, it frees the former. Note that the collection may allocate a larger array than necessary to avoid frequent reallocations.&lt;/p&gt;

&lt;p&gt;To add values to a &lt;code&gt;Vec&lt;/code&gt;, we need to use an additional step, &lt;em&gt;e.g.&lt;/em&gt;, the &lt;code&gt;push()&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Vec&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="nf"&gt;.push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="nf"&gt;.push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Functions that create new &lt;code&gt;Vec&lt;/code&gt; initialize them with no items. If we want to create a &lt;code&gt;Vec&lt;/code&gt; and values simultaneously, Rust offers the &lt;code&gt;vec!&lt;/code&gt; macro. We can replace the above code with the following one-liner:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;vec!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At that point, if you've already dabbled a bit in Rust, you probably learned nothing new. Instead of describing every function on &lt;code&gt;Vec&lt;/code&gt; - they are pretty similar to those found in other languages - let's explore around a bit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vector-and-iterator"&gt;
  &lt;/a&gt;
  Vector and Iterator
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Iterator&lt;/em&gt; is a design pattern described in the classic &lt;em&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/em&gt; book:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Intent:&lt;/strong&gt; Provide an object which traverses some aggregate structure, abstracting away assumptions about the implementation of that structure.&lt;/p&gt;

&lt;p&gt;-- &lt;a href="https://wiki.c2.com/?IteratorPattern"&gt;Iterator pattern&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Though the book describes &lt;em&gt;Iterator&lt;/em&gt;, nothing limits the pattern to OOP languages. It's a pretty widespread abstraction.&lt;/p&gt;

&lt;p&gt;Rust provides the &lt;code&gt;Iterator&lt;/code&gt; trait, and &lt;code&gt;Vec&lt;/code&gt; implements it. Hence, we can traverse its values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;vec!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;iter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="nf"&gt;.iter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;                       &lt;span class="c"&gt;// 1&lt;/span&gt;
&lt;span class="k"&gt;loop&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="nf"&gt;.next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;                   &lt;span class="c"&gt;// 2&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="nf"&gt;.is_some&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"value: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Create the iterator. Because calling &lt;code&gt;next()&lt;/code&gt; changes the state of &lt;code&gt;iter&lt;/code&gt;, it must be &lt;em&gt;mutable&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Get the next value&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If I had received a dollar for each bug originating from a misplaced &lt;code&gt;break&lt;/code&gt; statement, I'd surely be rich now. If you break too early, you lose values; too late, and all hell breaks loose (pun intended). For that reason, &lt;code&gt;for&lt;/code&gt; along with iterator is a better fit. We can rewrite the above code as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;vec!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="nf"&gt;.iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                        &lt;span class="c"&gt;// 1&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"value: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Shorter, safer, hence better&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#too-many-iterators-to-iterate-from"&gt;
  &lt;/a&gt;
  Too many iterators to iterate from
&lt;/h2&gt;

&lt;p&gt;Interestingly enough, we can slightly change the above code to remove the call to &lt;code&gt;iter()&lt;/code&gt;. It still works!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;vec!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                               &lt;span class="c"&gt;// 1&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"value: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Magic!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's actually not magic but Rust' syntactic sugar in action. &lt;code&gt;for&lt;/code&gt; loops accept iterators. Yet, some instances can be transformed into iterators "on the fly". The type must implement the &lt;code&gt;IntoIterator&lt;/code&gt; trait and its &lt;code&gt;into_iter()&lt;/code&gt; function to be eligible. As seen from the diagram above, that's the case of &lt;code&gt;Vec&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you ask yourself the difference between &lt;code&gt;iter()&lt;/code&gt; and &lt;code&gt;into_inter()&lt;/code&gt;, take comfort in the fact that I wondered as well.&lt;br&gt;
After some research, I found this brilliant answer:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The iterator returned by &lt;code&gt;into_iter&lt;/code&gt; may yield any of &lt;code&gt;T&lt;/code&gt;, &lt;code&gt;&amp;amp;T&lt;/code&gt; or &lt;code&gt;&amp;amp;mut T&lt;/code&gt;, depending on the context.&lt;/li&gt;
&lt;li&gt;The iterator returned by &lt;code&gt;iter&lt;/code&gt; will yield &lt;code&gt;&amp;amp;T&lt;/code&gt;, by convention.&lt;/li&gt;
&lt;li&gt;The iterator returned by &lt;code&gt;iter_mut&lt;/code&gt; will yield &lt;code&gt;&amp;amp;mut T&lt;/code&gt;, by convention.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-- &lt;a href="https://stackoverflow.com/questions/34733811/what-is-the-difference-between-iter-and-into-iter"&gt;What is the difference between iter and into_iter?&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, you can create a &lt;code&gt;Vec&lt;/code&gt; &lt;em&gt;from&lt;/em&gt; an &lt;code&gt;Iterator&lt;/code&gt; thanks to &lt;code&gt;FromIterator&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u8&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                           &lt;span class="c"&gt;// 1&lt;/span&gt;
    &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;u8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nn"&gt;Self&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.count&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nn"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                   &lt;span class="c"&gt;// 2&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nn"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                   &lt;span class="c"&gt;// 2&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="mi"&gt;_&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;None&lt;/span&gt;                             &lt;span class="c"&gt;// 2&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Vec&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from_iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;                        &lt;span class="c"&gt;// 3&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"value: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Implement our own &lt;code&gt;Iterator&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;First, return &lt;code&gt;1&lt;/code&gt;, then &lt;code&gt;5&lt;/code&gt;, then nothing&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;Vec&lt;/code&gt; from our iterator&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#memory-allocation"&gt;
  &lt;/a&gt;
  Memory allocation
&lt;/h2&gt;

&lt;p&gt;We have overlooked one aspect of &lt;code&gt;Vec&lt;/code&gt; so far: the definition is actually &lt;code&gt;Vec&amp;lt;T, A: Allocator = Global&amp;gt;&lt;/code&gt;. While &lt;code&gt;T&lt;/code&gt; is the type of items that the &lt;code&gt;Vec&lt;/code&gt; contains, we didn't look at &lt;code&gt;A&lt;/code&gt;, which is &lt;strong&gt;what allocates memory&lt;/strong&gt;. I won't describe the subject in much detail because I currently lack the relevant knowledge. Yet, I believe it's interesting to mention it, as no other language I know about provides this kind of hook.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An implementation of &lt;code&gt;Allocator&lt;/code&gt; can allocate, grow, shrink, and deallocate arbitrary blocks of data described via &lt;code&gt;Layout&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;-- &lt;a href="https://doc.rust-lang.org/stable/std/alloc/trait.Allocator.html"&gt;std::alloc::Allocator&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sgmfHTPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/btrzjltw8jf86j11tk6f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sgmfHTPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/btrzjltw8jf86j11tk6f.png" alt="Rust's Allocator &amp;quot;class&amp;quot; diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rust uses the &lt;code&gt;Global&lt;/code&gt; memory allocator by default. It delegates to another allocator: it's &lt;code&gt;System&lt;/code&gt; unless you register one with the &lt;code&gt;#[global_allocator]&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;Vec&amp;lt;T, A&amp;gt;&lt;/code&gt;, it's thus possible to use a different allocator than the one defined centrally. One possible use-case would be to create an allocator that keeps track of allocated bytes only for a &lt;code&gt;Vec&lt;/code&gt; instance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This concludes my dabbling in &lt;code&gt;Vec&lt;/code&gt;. In this post, I tried to avoid the usual handling of this kind of post and explore a bit around. While a dedicated memory allocator won't be necessary in most cases, I think it's one good trick to keep in mind just in case.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To go further:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://doc.rust-lang.org/std/collections/index.html"&gt;Module std::collections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://doc.rust-lang.org/book/ch08-01-vectors.html"&gt;Storing Lists of Values with Vectors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://doc.rust-lang.org/std/vec/struct.Vec.html"&gt;Struct std::vec::Vec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/34733811/what-is-the-difference-between-iter-and-into-iter"&gt;What is the difference between iter and into_iter?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://blog.frankel.ch/start-rust/9/"&gt;A Java Geek&lt;/a&gt; on August 8&lt;sup&gt;th&lt;/sup&gt;, 2021&lt;/em&gt;&lt;/p&gt;

</description>
      <category>rust</category>
      <category>beginners</category>
      <category>basics</category>
      <category>collection</category>
    </item>
  </channel>
</rss>
