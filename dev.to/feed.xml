<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>HTTP Status Codes that You must know</title>
      <author>Ayushi Rawat </author>
      <pubDate>Wed, 14 Jul 2021 04:18:58 +0000</pubDate>
      <link>https://dev.to/ayushi7rawat/http-status-codes-that-you-must-know-5edn</link>
      <guid>https://dev.to/ayushi7rawat/http-status-codes-that-you-must-know-5edn</guid>
      <description>&lt;p&gt;Hello reader! &lt;/p&gt;

&lt;p&gt;Whenever a client sends a request to server, the response always contains a status code. You might not see it always but its returned at every client-server interaction. Well, even if you are not a programmer, you would still know about the 404 Not Found error.&lt;/p&gt;

&lt;p&gt;In this blog post we will discuss all about http and its response status codes. Consider this as a small cheat sheet, for your references, every time you encounter one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-will-be-covered-in-this-blog"&gt;
  &lt;/a&gt;
  What will be covered in this Blog
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="n"&gt;What&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;HTTP&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;
&lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="n"&gt;What&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Status&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;
&lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;XX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Informational&lt;/span&gt; &lt;span class="n"&gt;codes&lt;/span&gt;
&lt;span class="mf"&gt;4.&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;XX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Success&lt;/span&gt; &lt;span class="n"&gt;codes&lt;/span&gt;
&lt;span class="mf"&gt;5.&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;XX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Redirection&lt;/span&gt; &lt;span class="n"&gt;codes&lt;/span&gt;
&lt;span class="mf"&gt;6.&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;XX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="n"&gt;codes&lt;/span&gt; 
&lt;span class="mf"&gt;7.&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;XX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="n"&gt;codes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Let's get started!&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-http"&gt;
  &lt;/a&gt;
  What is HTTP?
&lt;/h2&gt;

&lt;p&gt;HTTP which stands for &lt;strong&gt;Hypertext Transfer Protocol&lt;/strong&gt;. According to the Wikipedia definition:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Hypertext Transfer Protocol is an application layer protocol for distributed, collaborative, hypermedia information systems.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;HTTP is a client-server protocol, acts as the foundation of any data exchange on the Web. Each interaction between the client and server is called a message. HTTP messages are requests or responses. Client devices submit HTTP requests to servers, which reply by sending HTTP responses back to the clients.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-status-code"&gt;
  &lt;/a&gt;
  What is Status code?
&lt;/h2&gt;

&lt;p&gt;At every client request, server responds with a code which helps to communicate the status of the request. It is a quick way to inspect if request was successful or not without investing the response body. &lt;/p&gt;

&lt;p&gt;These codes are formed by three numbers indicating the status of a web element. There are basically five standard groups in which status codes are divided and they can be identified by the first digit of the code. They are as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;1XX - Informational codes&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;2XX - Success codes&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;3XX - Redirection codes&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;4XX - Client error codes&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;5XX - Server error codes&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's have a look at each group briefly and discuss the most common status codes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1xx-informational-response"&gt;
  &lt;/a&gt;
  1XX - Informational Response
&lt;/h2&gt;

&lt;p&gt;An informational response indicates that the request was received and understood. It is issued on a provisional basis while request processing continues. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;100 - Continue:&lt;/strong&gt; The server has received the request headers and the client should proceed to send the request body. It states that the client request is good and processing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;101 - Switching Protocols&lt;/strong&gt;: The requester has asked the server to switch protocols and the server has agreed to switch. Basically, the request may involve file operations, requiring a long time to complete the request.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;102 - Processing&lt;/strong&gt;: This code indicates that the server has received and is processing the request, but no response is available yet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;103 - Early Hints&lt;/strong&gt;: Used to return some response headers before final HTTP message.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2xx-success"&gt;
  &lt;/a&gt;
  2XX - Success
&lt;/h2&gt;

&lt;p&gt;This class of status codes indicates the action requested by the client was received, understood, and accepted.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;200 - OK:&lt;/strong&gt; Standard response for successful HTTP requests. Everything's normal and the requested resource has been returned through the message body.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;201 - Created:&lt;/strong&gt; The request has been fulfilled, resulting in the creation of a new resource and the server has acknowledged it. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;202 - Accepted:&lt;/strong&gt; This code indicates that the server has received and is processing the request, but no response is available yet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;204 - No Content:&lt;/strong&gt; The server successfully processed the request, and is not returning any content. Generally, the PUT method is used for a 204 response.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3xx-redirection"&gt;
  &lt;/a&gt;
  3XX - Redirection
&lt;/h2&gt;

&lt;p&gt;This group of status code indicates that the client must take additional action to complete the request.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;301 - Moved Permanently&lt;/strong&gt;: This indicates that the URL has been moved once and for all. This is used to inform the browser that the requested file has been moved and can be used to redirect from a page that is no longer in existence.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;305 - Use Proxy&lt;/strong&gt;: The requested resource is available only through a proxy, the address for which is provided in the response.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;307 - Temporary Redirect&lt;/strong&gt;: In this scenario, the response code indicates that the requested resource has been temporarily moved to another URI. however, future requests should still use the original URI.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4xx-client-errors"&gt;
  &lt;/a&gt;
  4XX - Client errors
&lt;/h2&gt;

&lt;p&gt;This class of status code is intended for situations in which the error seems to have been caused by the client.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;400 - Bad Request&lt;/strong&gt;: The server cannot or will not process the request due to wrong syntax causing an error.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;401 - Unauthorized&lt;/strong&gt;: Response is similar to &lt;em&gt;403 Forbidden&lt;/em&gt;, but specifically for use when authentication is required and has failed or has not yet been provided. The requested file can be protected one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;403 - Forbidden&lt;/strong&gt;: The request contained valid data and was understood by the server, but the server is refusing action. It's possible that the server might not have permission to share the file with client.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;404 - Not Found&lt;/strong&gt;: The requested resource could not be found or does not exist but may be available in the future.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;405 - Method Not Allowed:&lt;/strong&gt; A request method is not supported for the requested resource; eg, a PUT request on a read-only resource.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;414 URI Too Long&lt;/strong&gt;: The URI provided was too long for the server to process as a result of too much data being encoded as a query-string of a GET request.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;429 Too Many Requests&lt;/strong&gt;: The user has sent too many requests in a given amount of time, helps increase the security.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5xx-server-errors"&gt;
  &lt;/a&gt;
  5XX - Server errors
&lt;/h2&gt;

&lt;p&gt;You can encounter server error when the client has raised a valid request, The server failed to fulfil the request.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;500 - Internal Server Error&lt;/strong&gt;: An error message, displayed when an unexpected situation was encountered that does not match any other class errors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;501 - Not Implemented&lt;/strong&gt;: The server either does not recognize the request method, or it lacks the ability to fulfil the request.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;502 - Bad Gateway&lt;/strong&gt;: The server act as a gateway and received an invalid response from the server while making the request.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;503 - Service Unavailable&lt;/strong&gt;: The server cannot handle the request because it is overloaded or down for maintenance.&lt;/p&gt;

&lt;p&gt;That's all for this article and with that, it's a wrap! I hope you found the article useful. Thank you for reading, If you have reached so far, please like the article, It will encourage me to write more such articles. Do share your valuable suggestions, I appreciate your honest feedback!&lt;/p&gt;

&lt;p&gt;I create content about &lt;strong&gt;Career, Blogging, Programming, and Productivity&lt;/strong&gt;, If this is something that interests you, please share the article with your friends and connections.&lt;/p&gt;

&lt;p&gt;I would strongly recommend you to Check out the &lt;a href="https://www.youtube.com/watch?v=jAOkWehMF6E"&gt;YouTube video&lt;/a&gt; of the same and &lt;strong&gt;don't forget to subscribe to my Channel&lt;/strong&gt;. I would love to connect with you at &lt;a href="https://twitter.com/ayushi7rawat"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/ayushi7rawat/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You should definitely check out my other Blogs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/python-39-all-you-need-to-know"&gt;Python 3.9: All You need to know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/github-cli-10-all-you-need-to-know"&gt;GitHub CLI 1.0: All you need to know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/how-to-make-your-own-google-chrome-extension-1"&gt;How to make your own Google Chrome Extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/run-javascript-from-python"&gt;Run Javascript from Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/automate-whatsapp-using-python"&gt;Automate WhatsApp using Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/automate-cowin-vaccine-slots-availablity-using-python"&gt;Automate Cowin Vaccine slots Availability using Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/what-is-competitive-programming-or-beginners-guide"&gt;What is Competitive Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol"&gt;https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes"&gt;https://en.wikipedia.org/wiki/List_of_HTTP_status_codes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See you in my next Blog article, Take care!!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>computerscience</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to Add Legends to the React Charts of Syncfusion</title>
      <author>Techguy</author>
      <pubDate>Wed, 14 Jul 2021 03:34:30 +0000</pubDate>
      <link>https://dev.to/syncfusion/how-to-add-legends-to-the-react-charts-of-syncfusion-4hmo</link>
      <guid>https://dev.to/syncfusion/how-to-add-legends-to-the-react-charts-of-syncfusion-4hmo</guid>
      <description>&lt;p&gt;Learn how easily you can add legends to Syncfusion &lt;a href="https://www.syncfusion.com/react-ui-components/react-charts"&gt;React Charts&lt;/a&gt;. This video explains how to align the legends, customize the legends and their icon sizes, select a series on clicking the legends, and enable animations.&lt;/p&gt;

&lt;p&gt;Download the example from GitHub: &lt;br&gt;
&lt;a href="https://bit.ly/3jONwM8"&gt;https://bit.ly/3jONwM8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Refer to the following documentation to add legends in the Syncfusion React Charts:&lt;br&gt;
&lt;a href="https://bit.ly/2UsWGmQ"&gt;https://bit.ly/2UsWGmQ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out this online example of legend in the Syncfusion React Charts: &lt;br&gt;
&lt;a href="https://bit.ly/2UngOa6"&gt;https://bit.ly/2UngOa6&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/7VYeN4W_wMc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>charts</category>
      <category>webdev</category>
      <category>component</category>
    </item>
    <item>
      <title>Setting Permissions in S3</title>
      <author>Ajit Singh</author>
      <pubDate>Wed, 14 Jul 2021 02:50:15 +0000</pubDate>
      <link>https://dev.to/this-is-learning/setting-permissions-in-s3-2ccf</link>
      <guid>https://dev.to/this-is-learning/setting-permissions-in-s3-2ccf</guid>
      <description>&lt;p&gt;We studied about the basics of S3 in the last tutorial. In this article we will see how to set permissions for a bucket in S3. To setup permissions in S3 we can use 2 options &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Bucket Policies&lt;/li&gt;
&lt;li&gt;ACL(Access control Lists)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#bucket-policies"&gt;
  &lt;/a&gt;
  Bucket policies
&lt;/h2&gt;

&lt;p&gt;As we saw in last tutorial anyone cannot access our S3 objects there is permission denied page when we try to access it over the internet. To provide public access to the objects in the bucket we need to set a bucket policy which explicitly allows some objects to be visible over the internet. Let us checkout a demo policy so that we can see how we can setup a bucket policy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"Version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"2012-10-17"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"Statement"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Sid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"PublicRead"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Effect"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Allow"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Principal"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Action"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"s3:GetObject"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"s3:GetObjectVersion"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Resource"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"arn:aws:s3:::DOC-EXAMPLE-BUCKET/*"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bucket policies are JSON based policies. Lets study what each key means.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Version&lt;/strong&gt; - The policy Version defines the version of the policy language&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Statement&lt;/strong&gt; - This defines the all the things that are defined using the policy language defined in version.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sid&lt;/strong&gt; - The Sid or statement-ID is an identifier that you provide for the policy statement.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Effect&lt;/strong&gt; - It has two values Allow/Deny it tells us whether this statement allows certain things or Deny access to anyone.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prinicipal&lt;/strong&gt; - Principal specifies the user, account, service, or other entity that is allowed or denied access to a resource in AWS S3 bucket.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Action&lt;/strong&gt; - This defined what actions we are limiting t=in the policy statement.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resource&lt;/strong&gt; - Defines the bucket and objects on which this policy works.&lt;/p&gt;

&lt;p&gt;You can add multiple statements in a policy and this will define who can access our S3 bucket.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aclaccess-control-lists"&gt;
  &lt;/a&gt;
  ACL(Access control Lists)
&lt;/h2&gt;

&lt;p&gt;ACL defines which AWS accounts or groups are granted access and the type of access granted to these accounts. When a request is received against a resource, Amazon S3 checks the corresponding ACL to verify that the requester has the necessary access permissions. ACL are rarely used and a bit complex so let us leave them for now as everything that an ACL can do can be done via bucket policy or IAM permissions but if you want to know more about them I've attached a link to the &lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the next tutorial we will setup some S3 policies and see how it affects the buckets.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>devops</category>
      <category>beginners</category>
    </item>
    <item>
      <title>I tried to mount a client-side "attack" on a news website poll by using only Javascript. And I failed miserably.  </title>
      <author>Ivan Spoljaric</author>
      <pubDate>Wed, 14 Jul 2021 00:18:10 +0000</pubDate>
      <link>https://dev.to/ispoljari/i-tried-to-mount-a-client-side-attack-on-a-news-website-poll-by-using-only-javascript-and-i-failed-miserably-1ebf</link>
      <guid>https://dev.to/ispoljari/i-tried-to-mount-a-client-side-attack-on-a-news-website-poll-by-using-only-javascript-and-i-failed-miserably-1ebf</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JOdHFqKw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ofx1p297o3kb1prtxn9k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JOdHFqKw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ofx1p297o3kb1prtxn9k.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-step-running-the-script-locally"&gt;
  &lt;/a&gt;
  First step - Running the script locally
&lt;/h2&gt;

&lt;p&gt;For academic purposes I tried to create a client-side script to manipulate the results of a random poll on a &lt;a href="https://www.index.hr/vijesti/clanak/velika-anketa-treba-li-cijepljenje-u-skolstvu-zdravstvu-i-socijali-biti-obavezno/2290306.aspx"&gt;Croatian news portal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The poll is open at the moment writing, but it probably won't stay that way for long.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackblitz.com/edit/js-ddpj1r?file=backup.js"&gt;Here's the code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code consists of these steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;waiting for "DOMContentLoaded" event&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;closing the cookie banner&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;selecting a poll answer&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;MutationObserver indicates changes in the DOMTree target iframe. This means that the results are "in". Then the  localStorage is cleared.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;a timer, which started running immediately after "DOMContentLoaded", reloads the page after 2 seconds. And the script starts from the beginning&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It works as intended if you run it directly in the dev tools console.&lt;/p&gt;

&lt;p&gt;You'll probably notice how the code is tightly coupled with the html/css implementation of the web page. &lt;/p&gt;

&lt;p&gt;Since I was creating a proof of concept I didn't bother to  write the functions in a generalised way. &lt;/p&gt;

&lt;p&gt;I used the exact CSS class name from the site, and targeted the poll iframe based on its position in the HTML. &lt;/p&gt;

&lt;p&gt;I had a pretty strong hunch that it won't work anyway (not that it stopped me from trying).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#second-step-automating-the-script"&gt;
  &lt;/a&gt;
  Second step - Automating the script
&lt;/h2&gt;

&lt;p&gt;The next step was to think of a way to run the script automatically, without the need to paste the code in the console every time. &lt;/p&gt;

&lt;p&gt;So, I created a custom &lt;a href="https://stackblitz.com/edit/js-uhxg5p?file=content-script.js"&gt;browser extension&lt;/a&gt;, which has only one additional manifest.json file.&lt;/p&gt;

&lt;p&gt;And that didn't work. &lt;/p&gt;

&lt;p&gt;Line 2 is the problem.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;iframe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;contentDocument&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It doesn't work because of the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"&gt;"Same Origin Policy"&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;It's a "critical security mechanism that restricts how a document or script loaded by one origin can interact with a resource from another origin".&lt;/p&gt;

&lt;p&gt;And this also applies to iframes.&lt;/p&gt;

&lt;p&gt;"External" iframe's can't be accessed, nor manipulated from a document which is not served on the same origin (domain). &lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;For completeness sake, I also tried to use the 3 most popular browser extensions that enable running custom scripts on any web page; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GreaseMonkey&lt;/li&gt;
&lt;li&gt;TamperMonkey&lt;/li&gt;
&lt;li&gt;ViolentMonkey.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I tested out a few StackOverflow suggestions, related to the configuration of those extensions, in a foolish attempt to beat the system. &lt;/p&gt;

&lt;p&gt;But with no luck.&lt;/p&gt;

&lt;p&gt;You can't beat the system by breaking its hard rules. Unless you're the One. And it turns out I'm not. At least not yet. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-glimmer-of-hope"&gt;
  &lt;/a&gt;
  A glimmer of hope
&lt;/h2&gt;

&lt;p&gt;Fortunately not all of my work was in vain. &lt;/p&gt;

&lt;p&gt;As I was slowly accepting my fate, and getting ready to completely give up, I stumbled on an alternative approach to this problem. &lt;/p&gt;

&lt;p&gt;There's a method called &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage"&gt;Window.postMessage&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And its API looks kind of promising (with regard to CORS issues caused by external iframe communication).&lt;/p&gt;

&lt;p&gt;So the story continues. Stay tuned. :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Do you know any other way, or a hack, to bypass the Same Origin Policy? &lt;/p&gt;

&lt;p&gt;Is there another approach to the "external iframe" problem, which I didn't think of?&lt;/p&gt;

&lt;p&gt;Or is it just plain impossible to do this on the client (FE) side (which is a good thing I suppose, because it prevents malicious behaviour).&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Your Guide to HTTP Response Status Code</title>
      <author>Aya Bouchiha</author>
      <pubDate>Tue, 13 Jul 2021 23:20:59 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/http-response-status-code-43ai</link>
      <guid>https://dev.to/ayabouchiha/http-response-status-code-43ai</guid>
      <description>&lt;p&gt;Hello, I'm &lt;a href="https://t.me/AyaBouchiha"&gt;Aya Bouchiha&lt;/a&gt; and this is #day-31, in this post, we'll cover the most famous  &lt;strong&gt;HTTP Status Codes&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#definition-of-http-response-status-codes"&gt;
  &lt;/a&gt;
  Definition of HTTP Response Status Codes
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;HTTP response status codes&lt;/strong&gt; are three-digit responses from the server to the browser-side request. such as &lt;em&gt;500&lt;/em&gt; and &lt;em&gt;404&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://umbraco.com/knowledge-base/http-status-codes/"&gt;www.umbraco.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#http-status-codes-groups"&gt;
  &lt;/a&gt;
  HTTP Status Codes Groups
&lt;/h2&gt;

&lt;p&gt;These are the most famous HTTP Status Codes, for more details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status"&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://umbraco.com/knowledge-base/http-status-codes/#400-bad-request"&gt;https://umbraco.com/knowledge-base/http-status-codes/#400-bad-request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://restfulapi.net/http-status-codes/"&gt;https://restfulapi.net/http-status-codes/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#1-informational-responses-100-199"&gt;
  &lt;/a&gt;
  1. Informational Responses (100 - 199)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;100&lt;/strong&gt;: (Continue) means that the initial part of the request has been received and has not yet been rejected by the server.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;102&lt;/strong&gt;: (Processing) this status code means that the server has received and is processing the request. But no response is available yet&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2-successful-responses-200-299"&gt;
  &lt;/a&gt;
  2. Successful Responses    (200 - 299)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;200&lt;/strong&gt; : (OK) the request has succeded.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;201&lt;/strong&gt; : (Created) means that the request (&lt;em&gt;POST or PUT&lt;/em&gt;) has succeeded and a new resource has been created as a result. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;202&lt;/strong&gt;: (Accepted) the request has been accepted for processing, but the processing has not been completed&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-redirection-messages-300-399"&gt;
  &lt;/a&gt;
  3. Redirection Messages    (300 - 399)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;301&lt;/strong&gt;: (Moved Permanently) indicates that the URL has been changed permanently &amp;amp; the new one is given in the response&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;307&lt;/strong&gt;: (Temporary Redirect) the server-side send this kind of response in order to direct the client  to get the requested resource at another URI&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-client-error-responses-400-499"&gt;
  &lt;/a&gt;
  4. Client Error Responses  (400 - 499)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;400&lt;/strong&gt;: (Bad Request) the server can't understand the request due to the invalid syntax.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;401&lt;/strong&gt;: (Unauthorized) means that the client is unauthenticated, and should authenticate for getting the requested response&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;403&lt;/strong&gt;: (Forbidden) the server refused to give the requested resource because the client is unauthorized to get the content.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;404&lt;/strong&gt;: (Not Found) indicates that the URL is not recognized.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;405&lt;/strong&gt;: (Method Not Allowed) The request method is not supported.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#5-server-error-responses-500-599"&gt;
  &lt;/a&gt;
  5. Server Error Responses  (500 - 599)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;500&lt;/strong&gt;: (Internal Server Error)given when an unexpected condition was encountered and no more specific message is suitable&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;501&lt;/strong&gt;: (Not Implemented)  indicates that the request can not be handled because it is not supported by the server&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;503&lt;/strong&gt;: (Service Unavailable) indicates that the server is currently not ready to handle the request. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;511&lt;/strong&gt;: (Network Authentication Required) means that the client needs to authenticate to gain network access.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#references-and-useful-resources"&gt;
  &lt;/a&gt;
  References and useful Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status"&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://umbraco.com/knowledge-base/http-status-codes/#400-bad-request"&gt;https://umbraco.com/knowledge-base/http-status-codes/#400-bad-request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://restfulapi.net/http-status-codes/"&gt;https://restfulapi.net/http-status-codes/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=iYM2zFP3Zn0"&gt;https://www.youtube.com/watch?v=iYM2zFP3Zn0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=wJa5CTIFj7U"&gt;https://www.youtube.com/watch?v=wJa5CTIFj7U&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#quote-of-the-day"&gt;
  &lt;/a&gt;
  Quote of the day
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;"failure is an event, not a person"&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Zig Ziglar&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Happy Coding :)&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>programming</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Using GitHub Actions to build packer AMI on AWS</title>
      <author>Ige Adetokunbo Temitayo</author>
      <pubDate>Tue, 13 Jul 2021 21:56:22 +0000</pubDate>
      <link>https://dev.to/igeadetokunbo/using-github-actions-to-build-packer-ami-on-aws-3p12</link>
      <guid>https://dev.to/igeadetokunbo/using-github-actions-to-build-packer-ami-on-aws-3p12</guid>
      <description>&lt;p&gt;GitHub Actions is a very cool tool for automating CI/CD pipeline workflows or any routine task. Once the code resides in Github, automating tasks from using Github actions is achievable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FZTkpo8L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wg453xocbjc67ocfub4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FZTkpo8L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wg453xocbjc67ocfub4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github Actions allows Engineers to create a very simple workflow to automate code compilation and deployment. Github Actions is very easy to use and it makes deployment to production very easy and interesting.&lt;/p&gt;

&lt;p&gt;Actions are defined in YAML files, which allows pipeline workflow to be triggered using any GitHub events like on creation of Pull Requests, on code commits, and much more&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I recently developed, deployed my first github Action and published the action to &lt;a href="https://github.com/marketplace?type=actions"&gt;GitHub Actions Marketplace&lt;/a&gt;. The Action &lt;a href="https://github.com/marketplace/actions/packer-build-on-aws"&gt;build packer images&lt;/a&gt; on AWS. I wanted an action to build simple packer images and i decided to pick up the challenge.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#lets-get-started-with-the-github%C2%A0action"&gt;
  &lt;/a&gt;
  Let's get started with the GitHub Action
&lt;/h2&gt;

&lt;p&gt;I will be describing how to use GitHub Action to build packer images on AWS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 01:&lt;/strong&gt; Navigate to the repository where you wish to implement the GitHub Action.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 02:&lt;/strong&gt; Create a file &lt;code&gt;packer-build.yml&lt;/code&gt; in the parent directory. The file will be created in .github/workflows/packer-build.yaml. See screenshot below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZQ0w9N5X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iypu4qgyrsdm9zamv1ek.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZQ0w9N5X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iypu4qgyrsdm9zamv1ek.png" alt="How to create GitHub Actions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 03:&lt;/strong&gt; Copy and paste the script below in the&lt;code&gt;packer.yaml&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: Run packer build on a template file

on:
  push:
    branches:
        - 'master'
jobs:
  packer_build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Packer build
        uses: ExitoLab/packer_build_action_aws@v0.2.10
        with:
          templateFile: 'ami.json'
          workingDir: 'ami'
          varFile: 'variables.json'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Code Explanation:&lt;/strong&gt; The actions work with the GitHub Event trigger which is &lt;code&gt;push to master branch&lt;/code&gt;. The input parameters are the; working directory and template file. The &lt;code&gt;workingDir&lt;/code&gt; is defined as the directory where the packer template and var file reside. The &lt;code&gt;templateFile&lt;/code&gt; contains the packer template file for building packer AMI. The access_key and secret_key are used for authenticating to AWS will be stored in GitHub secrets.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 04:&lt;/strong&gt; Add your secrets &lt;code&gt;AWS_ACCESS_KEY&lt;/code&gt; and &lt;code&gt;AWS_SECRET_KEY&lt;/code&gt; in the Github secrets. Under your repository name, click Settings. In the left sidebar, click Secrets. See image below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W25g65nQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hb09r1iay4hny6if9i19.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W25g65nQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hb09r1iay4hny6if9i19.png" alt="Adding secrets in GitHub for GitHub Actions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 05:&lt;/strong&gt; Kindly see below a complete &lt;a href="https://github.com/ExitoLab/example-packer-jenkins"&gt;example of the AMI template&lt;/a&gt;. This template installs Jenkins and other software. Also, check the &lt;a href="https://github.com/ExitoLab/example-packer-jenkins/blob/master/.github/workflows/packer.yaml"&gt;complete workflow&lt;/a&gt; for building the AMI.&lt;/p&gt;

&lt;p&gt;In conclusion, I hope to build more GitHub Actions for executing routine tasks and I totally enjoyed working on my first GitHub Action. It was a very exciting experience.&lt;/p&gt;

</description>
      <category>packer</category>
      <category>aws</category>
      <category>github</category>
      <category>awscommunitybuilders</category>
    </item>
    <item>
      <title>Take the Jamstack Community Survey 2021!</title>
      <author>Cassidy Williams</author>
      <pubDate>Tue, 13 Jul 2021 21:52:28 +0000</pubDate>
      <link>https://dev.to/netlify/take-the-jamstack-community-survey-2021-2lfn</link>
      <guid>https://dev.to/netlify/take-the-jamstack-community-survey-2021-2lfn</guid>
      <description>&lt;p&gt;The 2021 Jamstack Community Survey is out and we want to hear from you!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.surveymonkey.com/r/jamstack-survey-devto"&gt;Take the survey here!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Last year when we ran the survey, we had over 3000 responses, and we'd love to blow that number out of the water. We're excited to see the year-over-year trends for the category. Seeing which frameworks are growing, which ones are losing ground, which ones make you happiest, which CMS people love the most... it'll be so interesting to see how that has changed over the past year! &lt;a href="https://www.netlify.com/blog/2020/05/27/state-of-the-jamstack-survey-2020-first-results/"&gt;You can see last year's results here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Plus, you can get a limited-edition Jamstack sticker with your responses 👀 get 'em in quick!&lt;/p&gt;

&lt;p&gt;Once again, &lt;a href="https://www.surveymonkey.com/r/jamstack-survey-devto"&gt;here's the link to take the survey&lt;/a&gt;. It should take you about 5 minutes, and we'd love to hear your thoughts!&lt;/p&gt;

</description>
      <category>jamstack</category>
      <category>webdev</category>
      <category>netlify</category>
    </item>
    <item>
      <title>Intro Git and github 💻
</title>
      <author>Lara Díaz</author>
      <pubDate>Tue, 13 Jul 2021 21:23:45 +0000</pubDate>
      <link>https://dev.to/selene_nr/intro-git-and-github-3jk4</link>
      <guid>https://dev.to/selene_nr/intro-git-and-github-3jk4</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;¿Qué es git y github?
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Git es un sistema de control de versiones distribuido que utilizan los desarrolladores de software que contribuyen a un mismo proyecto o software. Básicamente ayuda a los usuarios a rastrear los diferentes cambios realizados en el software por diferentes usuarios.&lt;/p&gt;

&lt;p&gt;Github es una plataforma que proporciona alojamiento y control de versiones para su código y cualquiera puede colaborar en cualquier proyecto en todo el mundo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Cómo empezar a usar Github
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lo primero que tenemos que hacer es configurar el entorno, por lo que necesitamos descargar git. Para cualquier sistema operativo podemos descargarlo &lt;a href="https://git-scm.com/downloads"&gt;aqui&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hGE71hF8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qqnvytq6vfbix6deqju0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hGE71hF8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qqnvytq6vfbix6deqju0.jpg" alt="git page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yctXHv8Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/havt639p809xjbjm3stl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yctXHv8Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/havt639p809xjbjm3stl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Una vez que hayamos instalado correctamente git, podemos abrir la terminal y escribir el siguiente comando para comprobarlo. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5YmsoHvh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gvkq012xbwb8sox1eex7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5YmsoHvh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gvkq012xbwb8sox1eex7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Después de esto podemos ir al sitio web de &lt;a href="https://github.com/"&gt;Github&lt;/a&gt; y crear una cuenta si no tenemos. &lt;/p&gt;

&lt;p&gt;La cuenta se verá similar a algo como esto:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sxBJV4wL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bcffjwn9scljpdorh56n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sxBJV4wL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bcffjwn9scljpdorh56n.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;






&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Configurar git con nombre de usuario y correo electrónico.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ahora que tenemos Git en el sistema, queremos  personalizar el entorno de Git. Sólo es necesario hacer estas cosas una vez; se mantendrán entre actualizaciones. También podemos cambiarlas en cualquier momento volviendo a ejecutar los comandos correspondientes.&lt;/p&gt;

&lt;p&gt;Lo primero que debemos hacer cuando instalamos Git es establecer nuestro nombre de usuario y dirección de correo electrónico. Esto es importante porque las confirmaciones de cambios (commits) en Git usan esta información, y es introducida en cada commit que hagamos:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Abrir un terminal/shell:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RxJlY065--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cyjizx8o4krngxbwxtoe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RxJlY065--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cyjizx8o4krngxbwxtoe.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Si queremos comprobar la configuración, podemos usar el comando git config --list para listar todas las propiedades que Git ha configurado:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ti3DRTBB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jfaq7ovl7yrqq1fm5vej.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ti3DRTBB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jfaq7ovl7yrqq1fm5vej.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listo! Ya tenes github configurado!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Iz8ljney--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ftdh9khwp7h2d4e1kgil.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Iz8ljney--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ftdh9khwp7h2d4e1kgil.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Hay ciertos pasos que debemos seguir para empezar a contribuir en tu trabajo, proyectos propios u Open Source:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Creación de un repositorio.&lt;/li&gt;
&lt;li&gt;Fork de un repositorio.&lt;/li&gt;
&lt;li&gt;Clone de un repositorio.&lt;/li&gt;
&lt;li&gt;Creando commits.&lt;/li&gt;
&lt;li&gt;Push código.&lt;/li&gt;
&lt;li&gt;Creando una rama(branch).&lt;/li&gt;
&lt;li&gt;Creando issues.&lt;/li&gt;
&lt;li&gt;Crear un pull request.&lt;/li&gt;
&lt;li&gt;Actualizando el contenido del repo.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Creación de un repositorio.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Un repositorio es una carpeta única que contiene los archivos necesarios para el proyecto, podemos decir que es un nombre alternativo para directorio. Para crear un repositorio podemos ver la esquina superior derecha de tu ventana donde tenemos una opción para crear repositorio como se muestra en la imagen de abajo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XlyOG5ED--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qgzfhruwsbku22ppy3uz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XlyOG5ED--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qgzfhruwsbku22ppy3uz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Una vez que hayamos hecho click, tendremos que ingresar información sobre el repositorio, como su nombre, si queremos incluir el archivo Readme (archivo de nuestro repositorio en donde podríamos contarle a la comunidad de GitHub de que trata nuestro proyecto.), o incluir algún archivo, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LHESLu81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f0g2n74rb1h73ke06rye.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LHESLu81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f0g2n74rb1h73ke06rye.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Otra forma de hacerlo es con Git Init&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Este comando se usa para crear un nuevo repositorio en Git. Nos crea un repositorio de manera local y lo hará en la carpeta donde estamos posicionados o se le puede pasar [nombre_de_la_carpeta] y creará la carpeta con ese nombre.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g-dVQoda--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73mclcl53gj8dbtazyuo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g-dVQoda--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73mclcl53gj8dbtazyuo.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Fork de un repositorio.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Un fork es un clon del repo en github y que funciona como un branch del original y es la forma principal por la cual alguien puede proponer cambios a un repositorio que no creo.&lt;/p&gt;

&lt;p&gt;Si queremos contribuir en algún proyecto de otra persona, el primer paso es hacer un fork del proyecto para crear una copia de los archivos de ese proyecto en nuestra cuenta de github. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lLi2GGEH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5sk7tf6pfs94sjg9sk6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lLi2GGEH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5sk7tf6pfs94sjg9sk6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Clone de un repositorio.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Para poder trabajar y modificar un proyecto, el primer paso es descargar los archivos en su PC para ejecutarlos. Este proceso se conoce como &lt;strong&gt;clonación de un repo&lt;/strong&gt;. Debemos abrir la terminal, posicionarnos en la carpeta donde queremos descargar los archivos (Ej: desktop) y ejecutar el siguiente comando:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cPS0qXFx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ouj54mxj8p9epm2w43lq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cPS0qXFx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ouj54mxj8p9epm2w43lq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hecho esto, tendremos una copia del proyecto en nuestra PC.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Creando commits.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;El comando "commit" guardará todos los cambio hechos en la zona de montaje o área de preparación (staging area), junto con una breve descripción del usuario, en un "commit" al repositorio local.&lt;/p&gt;

&lt;p&gt;Para agregar el o los archivos al Staging Area vamos a usar el comando add:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IH6iIcke--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n77ex0aak5n87hv8mm4z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IH6iIcke--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n77ex0aak5n87hv8mm4z.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ahora en verde nos indica que tenemos un archivo o mas listos para hacer un commit en nuestro repositorio, hasta que no hagamos un commit nuestros archivos permanecerán en “el limbo” en el estado Ready justo antes de enviar nuestro archivo a nuestros repositorio.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r-zYnqtF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7zhm0e5jb7vqst9pzey7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r-zYnqtF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7zhm0e5jb7vqst9pzey7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Push código.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nuestro repositorio local ya tiene nuestros cambios, ahora si queremos enviarlos a nuestro repositorio remoto (ya sea un fork, clone o propio), vamos a usar un comando llamado git push, vamos a empujar nuevos cambios. Podemos hacerlo con el siguiente comando:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B1IKPDsV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y71rj6y5rume3eiuqrxq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B1IKPDsV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y71rj6y5rume3eiuqrxq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Creando una rama(branch).
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Como sabemos, cada vez que desarrollamos cualquier software o proyecto, a menudo creamos nuevas features o corregimos un error(&lt;strong&gt;fix&lt;/strong&gt;), por lo que utilizamos ramas para ello. &lt;br&gt;
Las ramas son caminos que puede tomar cualquier desarrollador dentro del proyecto, que agrupan commits y que pueden volver a unirse al camino principal de la aplicación. &lt;br&gt;
Es básicamente una manera de mantener la diferencia en el código original con respecto a la nueva features o fix. &lt;/p&gt;

&lt;p&gt;Para comprobar la rama existente en el proyecto podemos escribir el siguiente comando:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--knC7mrwC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ldolb0lyep46viotiuq3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--knC7mrwC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ldolb0lyep46viotiuq3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para crear una nueva rama podemos ejecutar el siguiente comando en el terminal: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hL0ycFWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b2yg6ps6710sgrsknzl6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hL0ycFWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b2yg6ps6710sgrsknzl6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para comprobar o cambiar la rama actual puede utilizar el siguiente comando:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ng2wKuwH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o4w3y4voiehohx910dsd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ng2wKuwH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o4w3y4voiehohx910dsd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Es una buena práctica crear una nueva rama para cada issue creado.&lt;/em&gt;&lt;/p&gt;




&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Creando issues.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;En la solapa "Issues” los diferentes colaboradores del proyecto pueden remarcar y alertar acerca de diferentes “bugs” o “problemas” dentro del proyecto.&lt;br&gt;
Si queremos trabajar en alguna issue podemos comentar en ese mismo que estamos interesados en trabajar. El administrador del proyecto o los maintainers nos asignarán el issue, y entonces podremos empezar a trabajar en él.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nV0upcS1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uyme14q83hmuhmrofffu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nV0upcS1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uyme14q83hmuhmrofffu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;En el caso del Open Source, suele haber una guia para contribuidores que explica el formato preferido de Issues, pull request y commits.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Crear un pull request.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Para que los colaboradores revisen los cambios que hemos hecho y los aprueben en el repositorio original, necesitamos crear una solicitud de revisión o &lt;strong&gt;pull request&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O2CCyq0w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9gaicoolwgckatxpg08y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O2CCyq0w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9gaicoolwgckatxpg08y.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Actualizando el contenido del repo.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Al ser git un sistema donde múltiples personas colaboran, puede ser que necesitemos mantener nuestro repositorio local actualizado.&lt;br&gt;
Para ello hay dos maneras en que podemos hacerlo:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Usando git pull.&lt;/li&gt;
&lt;li&gt;Usando rebase.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;En la opción 1, usamos el siguiente comando:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PihvJGOz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p1i9ax91029whdfauuin.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PihvJGOz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p1i9ax91029whdfauuin.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;aquí upstream es la ubicación desde la que necesitamos actualizar el contenido y main es la rama de la que hay que hacer &lt;strong&gt;pull&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Para la opción 2, podemos utilizar el siguiente comando:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--huW-DJJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wl4d3vgbvyteblh7btgu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--huW-DJJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wl4d3vgbvyteblh7btgu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rebase es preferible en comparación con pull, ya que pull es una combinación de git fetch y git merge que fusiona los cambios locales con las actualizaciones.&lt;/p&gt;




&lt;p&gt;Compartí tu opinión o escribime!&lt;br&gt;
&lt;a href="https://github.com/selenel21"&gt;Github&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/selene_nr"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>beginners</category>
      <category>spanish</category>
    </item>
    <item>
      <title>Top Five Ways to Learn Data Structures</title>
      <author>Thuy Vy Tran</author>
      <pubDate>Tue, 13 Jul 2021 21:17:56 +0000</pubDate>
      <link>https://dev.to/thuyvytran/top-five-ways-to-learn-data-structures-49bd</link>
      <guid>https://dev.to/thuyvytran/top-five-ways-to-learn-data-structures-49bd</guid>
      <description>&lt;p&gt;Data Structure is a notable class that many Computer Sciences majors take in university. Learning this topic helps improve the way you store, organize and collect data in a given software or program. Also, many companies use data structures in their interview questions. I will present my top five ways to learn data structure. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-youtube"&gt;
  &lt;/a&gt;
  1. YouTube
&lt;/h1&gt;

&lt;p&gt;There are many different channels dedicated to teaching data structure. When I was taking Data Structure, the top two youtube channels I heavily depended on was &lt;a href="https://www.youtube.com/c/MichaelSambol/videos"&gt;Michael's Sambol channel&lt;/a&gt; and &lt;a href="https://www.youtube.com/user/mycodeschool/videos"&gt;mycodeschool channel&lt;/a&gt;. Sadly, both of the channels haven't been updated in years. But they are still useful to this day. &lt;/p&gt;

&lt;p&gt;Michael does a great job explaining many of the data structures in five or fewer minutes. Also, he goes over the summary of each topic in easy-to-understand details. When I was learning red-black trees, his channel helped me a lot. It's a great channel if you don't have a lot of time in your day to learn due to work or school.&lt;/p&gt;

&lt;p&gt;Mycodeschool has many videos focusing on the various topics in data structure. One of my favorite thing about the channel is when he writes out the algorithm to show you a step-by-step procedure of any particular data structure. Also, he has good drawings and annotates them for you to have a better understanding of what is going on.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-geeksforgeeks"&gt;
  &lt;/a&gt;
  2. GeeksForGeeks
&lt;/h1&gt;

&lt;p&gt;GeeksForGeeks have a &lt;a href="https://www.geeksforgeeks.org/data-structures/?ref=shm"&gt;data structure&lt;/a&gt; and &lt;a href="https://www.geeksforgeeks.org/fundamentals-of-algorithms/?ref=lbp"&gt;algorithms&lt;/a&gt; sections on their website. They go into great detail explaining how each data structure works. There are also pictures and videos attached to each article for better explanation.&lt;/p&gt;

&lt;p&gt;In each article, there is a difficulty level of how hard the concept is. As a beginner, this is beneficial because it gives you a clear idea of what you should be currently learning. You can also lookup questions of examples of how a particular data structure is used. They give an example of the data structure code in C++, Java, Python3, and C#. I like it a lot because of this implementation. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-hackerrank"&gt;
  &lt;/a&gt;
  3. HackerRank
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.hackerrank.com/dashboard"&gt;HackerRank&lt;/a&gt; is one of the best websites for practicing implementing data structure. They give you problems based on the difficulty level you want (easy, medium, and hard). Plus, if you have a problem with a subtopic, like trees, you can select it under the subdomain. Then, you will only get problems with that particular topic. They have 8+ programming languages you can use to practice the problems. This website was recommended to me by a Computer Science master's student. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-coursera"&gt;
  &lt;/a&gt;
  4. Coursera
&lt;/h1&gt;

&lt;p&gt;This &lt;a href="https://www.coursera.org/specializations/data-structures-algorithms#about"&gt;course&lt;/a&gt; from UC San Diego is very similar to what I learned when I took a data structure class. It takes eight months to complete the entire specialization. Also, there are a total of six courses within it. If you need a structured schedule to help learn data structure then this is the course for you.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-books"&gt;
  &lt;/a&gt;
  5. Books
&lt;/h1&gt;

&lt;p&gt;Here are the two books that I find helpful in learning data structure. &lt;/p&gt;

&lt;p&gt;The first book I find helpful is &lt;a href="https://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/0984782850"&gt;Cracking the Coding Interview by Gayle McDowell&lt;/a&gt;. The book takes you through how a technical interview works. Also, the book outlines how each data structure works. After the explanation is done, there are problems in the book for you to practice. &lt;/p&gt;

&lt;p&gt;The second useful book is &lt;a href="//Data%20Structures%20and%20Problem%20Solving%20Using%20Java:%20Mark%20Allen%20Weiss:%209780321541406:%20Amazon.com:%20Books"&gt;Data Structures &amp;amp; Problem Solving Using Java 4th ed. by Mark Allen Weiss&lt;/a&gt;. When I took the class, this was the book used to explain data structure. Even you don't know how to program in Java, the explanation is good. Plus, I find the diagrams and codes given to be helpful with understanding the concept. &lt;/p&gt;

&lt;p&gt;Overall, learning data structure helps improve your skill as a programmer. You will be able to tackle difficult problems by implementing data structure. Enjoy, learning data structure! &lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>algorithms</category>
      <category>datastructure</category>
    </item>
    <item>
      <title>Install Firefox on Linux</title>
      <author>Bhargav Sakaria</author>
      <pubDate>Tue, 13 Jul 2021 21:10:23 +0000</pubDate>
      <link>https://dev.to/bhargavsakaria/install-firefox-on-linux-2hbm</link>
      <guid>https://dev.to/bhargavsakaria/install-firefox-on-linux-2hbm</guid>
      <description>&lt;p&gt;I have faced this issue that no article or no forum shows correct way to install firefox on debian based distros, or maybe I haven't found such article, but anyways I figured out myself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;&lt;br&gt;
Download your desired &lt;a href="https://www.mozilla.org/en-US/firefox/all/#product-desktop-release"&gt;firefox&lt;/a&gt; browser.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;&lt;br&gt;
Extract firefox tar file and it should give you the internal firefox folder in your downloads folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;&lt;br&gt;
Now to move that extracted firefox folder to &lt;code&gt;/opt&lt;/code&gt; directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo mv ~/Downloads/firefox /opt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;&lt;br&gt;
Now to create firefox's &lt;code&gt;.desktop&lt;/code&gt; file in user's applications directory&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd ~/.local/share/applications
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can name your firefox desktop file anything like I have installed firefox developer addition, so my file name is &lt;code&gt;firefox-dev.desktop&lt;/code&gt;. But you can name it anything which is relevant.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch firefox-dev.desktop
nano firefox-dev.desktop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside this file my configuration is something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[Desktop Entry]
Encoding=UTF-8
Version=1.0
Type=Application
Exec=/opt/firefox/firefox
Name=Firefox Developer Edition
Icon=/opt/firefox/browser/chrome/icons/default/default128.png
Comment=Custom definition for Firefox Developer Edition
Terminal=fasle
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You can see that location to execute firefox is in out &lt;code&gt;/opt/firefox&lt;/code&gt; pointing to firefox executable file.&lt;/li&gt;
&lt;li&gt;Icon for out firefox will be found in given location, you can choose any set of icons, whichever suits your need.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>linux</category>
      <category>firefox</category>
    </item>
    <item>
      <title>Why we use "key" in React?</title>
      <author>Guilherme_Konan</author>
      <pubDate>Tue, 13 Jul 2021 21:06:53 +0000</pubDate>
      <link>https://dev.to/gmkonan/why-we-use-key-in-react-4a03</link>
      <guid>https://dev.to/gmkonan/why-we-use-key-in-react-4a03</guid>
      <description>&lt;p&gt;Ever wondered why React keeps bugging you about using the &lt;code&gt;key&lt;/code&gt; attribute? Why we need to use this if everything is working perfectly? The answer is rather simple, Performance!&lt;/p&gt;

&lt;p&gt;Every time you make a change in a React app your application re-renders entirely right? Actually no! And that's what we are going to understand now!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h2&gt;

&lt;p&gt;Every time our application renders React create a new tree of react elements. The problem here is updating the UI to match the most recent tree created in render. This problem can be solved in a non efficient way, ending with a a complexity in the order of O(n^3) where n is the number of nodes (elements) in the tree.&lt;/p&gt;

&lt;p&gt;React came with a really clever way of handling this, by implementing an algorithm based on two simple assumptions they managed to make this problem go from O(n^3) to O(n).&lt;/p&gt;

&lt;p&gt;The two assumptions they made can handle most cases, and they are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If one element changed it's type a new tree will be created.&lt;/li&gt;
&lt;li&gt;If two elements have the same &lt;code&gt;key&lt;/code&gt; id in both trees, they are the same element and will not be re-rendered from 0.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#reconciliation-algorithm"&gt;
  &lt;/a&gt;
  Reconciliation algorithm
&lt;/h2&gt;

&lt;p&gt;The algorithm have some different ways to work depending on the root elements. If the root element changed from one type to another (or one tag to another) the new tree will be created from scratch.&lt;/p&gt;

&lt;p&gt;A good way to visualize is checking out this example I got from &lt;a href="https://reactjs.org/docs/reconciliation.html"&gt;react docs&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Counter&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Counter&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the Counter will not be reused, the Counter will be remounted.&lt;/p&gt;

&lt;p&gt;Another case React handles pretty well is when we have DOM elements of the same type. React can update only attributes and have the structure be reused, Check the examples above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- before --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"images/image.svg"&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;"something"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- after --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"images/image.svg"&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;"another-something"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The tag remains the same and react only updates the &lt;code&gt;className&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another case is with styles:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- before --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;{{color:&lt;/span&gt; &lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="na"&gt;green&lt;/span&gt;&lt;span class="err"&gt;",&lt;/span&gt; &lt;span class="na"&gt;padding:&lt;/span&gt; &lt;span class="err"&gt;"10&lt;/span&gt;&lt;span class="na"&gt;px&lt;/span&gt;&lt;span class="err"&gt;"}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- after --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;{{color:&lt;/span&gt; &lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="na"&gt;orange&lt;/span&gt;&lt;span class="err"&gt;",&lt;/span&gt; &lt;span class="na"&gt;padding:&lt;/span&gt; &lt;span class="err"&gt;"10&lt;/span&gt;&lt;span class="na"&gt;px&lt;/span&gt;&lt;span class="err"&gt;"}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;React only changes the &lt;code&gt;color&lt;/code&gt; style, and not &lt;code&gt;padding.&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#okay-really-interesting-but-why-key"&gt;
  &lt;/a&gt;
  Okay really interesting, but why key?
&lt;/h2&gt;

&lt;p&gt;React differs if a node changed or not using the node type itself or the attributes passed to it. But there's a problematic case that is not resolved by only looking at the node or it's attributes. Lists.&lt;/p&gt;

&lt;p&gt;Lists will have the same node types and attributes, so they won't be recognized by the algorithm. &lt;/p&gt;

&lt;p&gt;But we can have cases where the algorithm will work fine, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- tree1 --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- tree2 --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;3&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we have two lists, React will match the first two elements (1, 2) and will insert the last one (3) at the end.&lt;/p&gt;

&lt;p&gt;But if we have a similar but different implementation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- tree1 --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;3&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- tree2 --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;3&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are inserting something new at the start of the list. React doesn't know how to handle this and will recreate every element, instead of reusing 2 and 3 that remained the same between trees, leading to bad performance.&lt;/p&gt;

&lt;p&gt;That's where &lt;code&gt;keys&lt;/code&gt; are important. Using keys we can have every item in a list have a unique identifier (ID) so React can easily detect who needs to be changed or not, re-rendering only the ones with changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's my takeaway and what I have understood searching about this underlying implementations react has.&lt;br&gt;
I started searching for curiosity + to have a better understanding of react's big picture. I may write more about how react works underneath the hood in the future, if you have any suggestion please comment down here :) Thanks for reading.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>performance</category>
    </item>
    <item>
      <title>¿Qué es lo que mantiene motivados a los equipos de desarrollo de software?</title>
      <author>Billi Ramirez</author>
      <pubDate>Tue, 13 Jul 2021 20:58:21 +0000</pubDate>
      <link>https://dev.to/billiramirez/que-es-lo-que-mantiene-motivado-a-los-equipos-de-desarrollo-de-software-1lml</link>
      <guid>https://dev.to/billiramirez/que-es-lo-que-mantiene-motivado-a-los-equipos-de-desarrollo-de-software-1lml</guid>
      <description>&lt;p&gt;El otro día me encontré con este &lt;a href="https://twitter.com/addyosmani/status/1378781515954352129"&gt;tweet&lt;/a&gt; donde mencionan que es lo que mantiene motivados a los equipos de desarrollo de software.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8Kz5cKhO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ldr4dvffx42kduqj531q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Kz5cKhO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ldr4dvffx42kduqj531q.png" alt="Twitter Ejemplo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Me encontré tan identificado en la publicación que he querido compartir desde mi punto de vista lo que significa cada uno de esos elementos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Autonomía&lt;/li&gt;
&lt;li&gt;Especialización&lt;/li&gt;
&lt;li&gt;Sentido de Pertencia&lt;/li&gt;
&lt;li&gt;Propósito&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#autonom%C3%ADa"&gt;
  &lt;/a&gt;
  Autonomía
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--deWFil76--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cfuwnwkxtzdp8zqbnv74.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--deWFil76--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cfuwnwkxtzdp8zqbnv74.jpeg" alt="Autonomía Dev"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para mí esto es cuando tienes control absoluto de lo que haces, cuando eres completamente responsable de tus asignaciones, donde tus aciertos y fallas las asumes porque has sido tú que lo has hecho. Cuando las tareas que te asignan puedes realizarlas con la debida confianza de que el resultado será bajo tu control. &lt;/p&gt;

&lt;p&gt;Si tienes autonomía, no deberías de tener problemas de visibilidad del proyecto, de la visión a largo plazo, de la comunicación interna con tu equipo, de poder conectar con tus pares, poder expresar dudas y/o compartir experiencia. &lt;/p&gt;

&lt;p&gt;En una empresa/equipo que no hay autonomía, hay problemas de comunicación, problemas en los tiempos de entrega, reuniones innecesarias, problemas en construir el producto equivocado, aún utilizando metodologías ágiles. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#especializaci%C3%B3n"&gt;
  &lt;/a&gt;
  Especialización
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fC11jrK2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pmwhqnfqeajpqcctxuwt.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fC11jrK2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pmwhqnfqeajpqcctxuwt.jpeg" alt="Especializacion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cuando hay especialización, tus habilidades cada vez más van aumentando, cada vez más creces como profesional, en tus habilidades técnicas y no-técnicas. Puedes sentir el reto de cada vez ser mejor que tu versión del día anterior. &lt;/p&gt;

&lt;p&gt;Aquí no tienes que compararte con nadie más que contigo mismo, cada vez más vas logrando cosas que no sabías que podrías hacerlo, todo esto va de la mano del impulso y apoyo de tu equipo de trabajo, asimismo, de tus superiores, que te motivan cada vez más a crecer.&lt;/p&gt;

&lt;p&gt;Podrás notar cómo cada vez más el grado de dificultad de tus tareas aumentan, y logras cumplir con la calidad y tiempo que se espera de ti.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sentido-de-pertenencia"&gt;
  &lt;/a&gt;
  Sentido de Pertenencia
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PwCx_1lQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tqiou5v29s57jtnmwvxe.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PwCx_1lQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tqiou5v29s57jtnmwvxe.jpeg" alt="Sentido de Pertenencia"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cuando sientes que perteneces a una empresa/equipo puedes lograr incluso más cosas que las que el aislamiento e indiferencia logran. Sentirse acogido y acompañado es algo que te motiva de manera exponencial. De manera que, si estás en una empresa donde no sientes parte de ella, deberías considerar cambiarte de trabajo. &lt;/p&gt;

&lt;p&gt;Donde sientas que tus opiniones no son tomadas en cuenta, o tu presencia no marca ninguna diferencia. Ese tipo de empresas son tan dañinas para tu salud mental. Son simples matemáticas:  &lt;code&gt;8hr diario * 5 dias * 4 semanas = 160 horas&lt;/code&gt; al mes de tu vida, en un ambiente hostil. Deberás de estar en un lugar donde no haya discriminación, ni desvalorización de tu trabajo, un lugar donde abracen la diversidad. En el momento que empiezas a sentir eso, tu trabajo deberá de ser &lt;strong&gt;buscar otro trabajo&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prop%C3%B3sito"&gt;
  &lt;/a&gt;
  Propósito
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0HmOT15--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ypc27mflylivzjbeha1.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0HmOT15--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ypc27mflylivzjbeha1.jpeg" alt="Proposito"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Esta industria es tan variada, puedes encontrar trabajo en todos los rubros que deseas, donde aprender el dominio de un área es garantizado, puedes estar en industria de seguros, medicina, finanzas, aerolíneas, educación, etc. Asegúrate de estar en un lugar donde tu trabajo importe, donde generes un impacto, donde puedas ver como tu contribución ha mejorado la vida de otras personas, no codifiques solo por hacerlo, encuentra y crea soluciones que mejoren la vida de alguien, y que la vida sea más fácil gracias a ese producto que estás construyendo.&lt;/p&gt;

&lt;p&gt;Cuando estás en una entrevista de trabajo y toca hablar de tus previas experiencias, será mejor siempre compartir como mejoraste la vida de las personas que ocupan el software que ayudaste a construir, esa debe ser tu finalidad, crear soluciones a problemas. La satisfacción de lograr eso, te aportará aún más que lo bien remunerada que es esta industria.&lt;/p&gt;

&lt;p&gt;Espero que este post te ayude a ver tu carrera de una manera distinta, donde no tengas que conformarte, donde siempre busques lo mejor para ti y tu carrera. Donde siempre te impulse a la mejor versión de ti mismo. &lt;/p&gt;

&lt;p&gt;Si te ha gustado, compártelo y deja tu like al post.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>devs</category>
      <category>coding</category>
      <category>software</category>
    </item>
  </channel>
</rss>
