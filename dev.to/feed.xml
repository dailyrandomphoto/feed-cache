<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>React Conditional Rendering</title>
      <author>collegewap</author>
      <pubDate>Wed, 27 Oct 2021 04:55:35 +0000</pubDate>
      <link>https://dev.to/collegewap/react-conditional-rendering-cdb</link>
      <guid>https://dev.to/collegewap/react-conditional-rendering-cdb</guid>
      <description>&lt;p&gt;There are several ways to do conditional rendering in React based on the situation. In this article, we will see few practical approaches in conditional rendering components in React.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conditional-rendering-using-if-statement"&gt;
  &lt;/a&gt;
  Conditional rendering using If statement
&lt;/h2&gt;

&lt;p&gt;Say you have a list of items and you want to show the list only when it exists, then you can render it as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You could also write this in a different way as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conditional-rendering-using-ifelse-statement"&gt;
  &lt;/a&gt;
  Conditional rendering using if-else statement
&lt;/h2&gt;

&lt;p&gt;In the above example, if we want to display a message to the user when the list is empty, we can achieve it with an if-else statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;List is empty&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You could also write the above example with just if statements, for better readability:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;List is empty&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conditional-rendering-using-ternary-operator"&gt;
  &lt;/a&gt;
  Conditional rendering using ternary operator
&lt;/h2&gt;

&lt;p&gt;We can use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator"&gt;ternary operator&lt;/a&gt; to simplify the conditional rendering as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Logout&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Login&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you have multiple lines of elements to be rendered, you can wrap them inside parenthesis ():&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ShowWelcomeMessage&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Logout&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Login&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conditional-rendering-using-short-circuit-ampamp-operator"&gt;
  &lt;/a&gt;
  Conditional rendering using Short Circuit &amp;amp;&amp;amp; operator
&lt;/h2&gt;

&lt;p&gt;When you want to display something when a certain condition satisfied and don't want to render anything when the condition fails, &amp;amp;&amp;amp; operator is your best friend:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Loading...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can club multiple conditions together with &amp;amp;&amp;amp;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;balance&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Please recharge your account&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conditional-rendering-using-a-switch-statement"&gt;
  &lt;/a&gt;
  Conditional rendering using a switch statement
&lt;/h2&gt;

&lt;p&gt;When you have more than two outputs for an expression, then instead of going for if-else ladder, we can use switch statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Info&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;warning&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Warning&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to embed the switch statement inside the JSX, then you can make use of immediately invoked function expressions (&lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE"&gt;IIFEs&lt;/a&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Info&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;warning&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Warning&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

          &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;})()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-multiple-conditional-rendering"&gt;
  &lt;/a&gt;
  Using multiple conditional rendering
&lt;/h2&gt;

&lt;p&gt;You can write the above switch case example with the help of JavaScript objects as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;info&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Info&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt;
          &lt;span class="na"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Warning&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt;
          &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}[&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here status can have any of the 3 values: info, warning, and error. Based on the status value, the corresponding component will be rendered.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nested-conditional-rendering"&gt;
  &lt;/a&gt;
  Nested conditional rendering
&lt;/h2&gt;

&lt;p&gt;You can use ternary operators to nest multiple conditions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AddPost&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ShowPosts&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Please login&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we check if the user is logged in, if yes then we check if the user has any posts. If they do not have any posts then we ask them to add one and if there are posts then we show the posts. If the user is not logged in, then we ask them to log in.&lt;/p&gt;

&lt;p&gt;This type of nesting is not recommended since it hinders readability. When you have nested conditions, always split them into multiple components:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Posts&lt;/span&gt; &lt;span class="na"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Please login&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AddPost&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ShowPosts&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>react</category>
    </item>
    <item>
      <title>Write docs in 5 steps.</title>
      <author>Kavindu Santhusa</author>
      <pubDate>Wed, 27 Oct 2021 04:26:10 +0000</pubDate>
      <link>https://dev.to/ksengine/write-docs-in-5-steps-39gg</link>
      <guid>https://dev.to/ksengine/write-docs-in-5-steps-39gg</guid>
      <description>&lt;p&gt;When I wanted to write some documentation. Earlier I had used Jekyll with Github pages. Then I had to create all the stuff by hand. Now I am going to introduce Docz in 5 steps...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rT_qWYPL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.docz.site/static/img/logo.4f4f7bc5.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rT_qWYPL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.docz.site/static/img/logo.4f4f7bc5.svg" alt="" width="385" height="112"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-never-been-easier-to-document-your-things"&gt;
  &lt;/a&gt;
  It's never been easier to document your things!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xQEsKBP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.docz.site/static/img/header-img.ac3ca468.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xQEsKBP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.docz.site/static/img/header-img.ac3ca468.png" alt="Built-in components" width="880" height="411"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Powered by Gatsby&lt;/li&gt;
&lt;li&gt;Zero config&lt;/li&gt;
&lt;li&gt;Easy to customize&lt;/li&gt;
&lt;li&gt;Based on MDX&lt;/li&gt;
&lt;li&gt;Fully pluggable&lt;/li&gt;
&lt;li&gt;TypeScript support&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Run following commands to setup it&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-create"&gt;
  &lt;/a&gt;
  1. Create
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="c"&gt;# Use `-y` to quick run&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-installation"&gt;
  &lt;/a&gt;
  2. Installation
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add docz react react-dom
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;docz react react-dom
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-start-dev-build"&gt;
  &lt;/a&gt;
  3. Start dev build
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn docz dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx docz dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-write"&gt;
  &lt;/a&gt;
  4. Write
&lt;/h3&gt;

&lt;p&gt;write this file to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="p"&gt;--------&lt;/span&gt;
name: Hello world
&lt;span class="gh"&gt;route: /
--------
&lt;/span&gt;
&lt;span class="gh"&gt;# Hello world&lt;/span&gt;

Hello, I'm a mdx file!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-enjoy"&gt;
  &lt;/a&gt;
  5. Enjoy
&lt;/h3&gt;

&lt;p&gt;open &lt;code&gt;https://localhost:3001&lt;/code&gt; or what else printed in console. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hf92u_wP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-std.dprcdn.net/files/acc_649651/Fgbg4F" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hf92u_wP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-std.dprcdn.net/files/acc_649651/Fgbg4F" alt="Example" width="880" height="564"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Visit &lt;a href="https://www.docz.site/"&gt;https://www.docz.site/&lt;/a&gt; for more&lt;br&gt;
Follow me for more articles.&lt;br&gt;&lt;br&gt;
Thanks 💖💖💖&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/ksengine"&gt;&lt;img src="https://i.giphy.com/media/513lZvPf6khjIQFibF/giphy.gif" alt="support me" width="480" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Dgraph is the most exciting tech product I've ever used ❤️‍🔥. Here's Why:</title>
      <author>Ben Woodward</author>
      <pubDate>Wed, 27 Oct 2021 04:25:09 +0000</pubDate>
      <link>https://dev.to/koder/dgraph-is-the-most-exciting-tech-product-ive-ever-used-heres-why-37od</link>
      <guid>https://dev.to/koder/dgraph-is-the-most-exciting-tech-product-ive-ever-used-heres-why-37od</guid>
      <description>&lt;p&gt;This might sound like hyperbole but I genuinely believe that &lt;a href="https://dgraph.io/"&gt;Dgraph&lt;/a&gt; is the most exciting dev product I've seen in my career. I'm constantly blown away by the seemingly small but crazy powerful features that I keep discovering, but the most exciting (meta)feature of Dgraph I want to talk about is that it has completely revolutionised the whole software development cycle. &lt;em&gt;Especially&lt;/em&gt; for startups who are trying to ship fast. In this post I want to focus on two things; query optimisation and schema design.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#byebye-query-optimisation-hell"&gt;
  &lt;/a&gt;
  Byebye Query Optimisation Hell
&lt;/h2&gt;

&lt;p&gt;For as long as I've been a web developer, one of the unavoidable bottlenecks of the app development lifecycle is performance optimisation—you build your MVP, you ship it, your users test it, and then..... it errors &lt;em&gt;or worse&lt;/em&gt;, crashes. In my experience, database queries are usually at the heart of these problems.&lt;/p&gt;

&lt;p&gt;I'm currently working on a product that serves &lt;a href="https://spoken.app"&gt;interactive transcripts&lt;/a&gt;, originally we built a graphql API with Elixir with resolvers that queried to a Postgres database. Due to product requirements, Transcripts, Paragraphs, Sentences and Words required their own tables. &lt;/p&gt;

&lt;p&gt;With Words belonging to Sentences, that belong to Paragraphs that belong to a Transcript. This worked fine for short transcripts, but as you've probably guessed led to a very predictable N+1 query problem, (&lt;em&gt;because querying for a Transcript generated a query for each Paragraph which generated a query for each Sentence&lt;/em&gt;). After we uploaded a 1hr transcript, any requests for that transcript's page crashed the server due to memory overload.&lt;/p&gt;

&lt;p&gt;The best technical solution would have been to spend some time optimising the queries, but the &lt;em&gt;fastest&lt;/em&gt; solution (which was the priority) was just to paginate the queries for batches of paragraphs. However, this 'solution' still involved having to write a crapload of boilerplate.&lt;/p&gt;

&lt;p&gt;I have one failed startup under my belt that in retrospect failed because I was trapped in this boilerplate hell and ran out of runway. I didn't want to repeat that mistake so I started looking for solutions and happened upon Dgraph.&lt;/p&gt;

&lt;p&gt;Initially I was sceptical because my assumption was that graph databases come with slew of technical overhead (needing to learn complex query language, needing to get my head around abstract graph database concepts). However, to my surprise and delight, it's actually possible to use Dgraph as a graphql API generator that &lt;em&gt;happens&lt;/em&gt; to be backed by a graph database. By that I mean you can use Dgraph as a graphql API without needing to worry yourself about any of the details of how it stores and persists the data.&lt;/p&gt;

&lt;p&gt;The reason is because graphql is Dgraph's the native query language, which means getting started with Dgraph is as simple as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download and run the standalone Docker image to run Dgraph on your machine&lt;/li&gt;
&lt;li&gt;Create a very familiar looking &lt;code&gt;schema.graphql&lt;/code&gt; file with your graphql types listed&lt;/li&gt;
&lt;li&gt;Add the schema to your Dgraph instance via a simple CLI command&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And voilá you have an API that you can start querying from your JS app. Oh, and by the way you no longer have to worry about N+1 queries and it can handle terabytes of data and billions of data points. &lt;em&gt;What. The. Actual ..&lt;/em&gt; 🤯 &lt;em&gt;TERABYTES?? BILLIONS??&lt;/em&gt;¹&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dgraph.io/"&gt;Dgraph&lt;/a&gt; basically gives you Google level performance with next to zero-configs beyond your graphql types file. Maybe you're sceptical and wondering how a company you haven't heard of is able to achieve Google level performance? Well, here's why—Dgraph was literally built by one of Google's senior Search Infrature engineers to &lt;a href="https://dgraph.io/blog/post/dgraph-forrester/"&gt;"scale to serve Google’s Knowledge Graph via Search"&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is next-level game-changing tech and there's just no way I am going back to relational databases now. The future has arrived!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-end-of-your-schema-design-woes"&gt;
  &lt;/a&gt;
  The End of Your Schema Design Woes
&lt;/h2&gt;

&lt;p&gt;Necessary disclaimer: &lt;em&gt;This isn't really a slant against Rails in particular, because this issue exists in all MVC web frameworks that are backed by relational databases.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Another unavoidable technical challenge with shipping web apps is schema design. The most common approach to building web apps for a long time is to use an MVC framework and an ORM that generates your SQL queries for you. For most of my professional career I've worked as a Ruby on Rails dev, and more often than not, the area of the codebase where the most dev hours have been burnt through is on the &lt;a href="https://guides.rubyonrails.org/active_record_basics.html"&gt;ActiveRecord ORM layer&lt;/a&gt; between the database and the app. It works fantastically well when you have a simple schema like a blog and you need to query a blog post with its comments for example, but as soon as you have a moderately sophisticated hierarchy in your schema, it becomes less obvious whether the &lt;a href="https://www.monterail.com/blog/rails-active-record-arel-sequel"&gt;ActiveRecord is a benefit or a cost&lt;/a&gt;. I've seen so many Rails projects where developers have given up trying to optimise the multi-table ORM queries and have opted to just figure out the right SQL statements to use and paste those in. But either way, by this point a lot of dev hours have been sunken into something that really doesn't have much to do with your business logic, i.e. the thing your users are paying you for. For a startup, wasted time means shortened runway.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K4Dk9MLh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q239f10pxa9ihgubwdzc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K4Dk9MLh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q239f10pxa9ihgubwdzc.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Most experienced web developers have learnt the hard way that it pays to be careful think ahead when you're designing your schema. As a startup, this part of the development cycle feels like wading through waist-high molasses.&lt;br&gt;
With Dgraph, this very real 'cost' in the development cycle has seemingly been &lt;em&gt;magic'd away🪄&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;To give an example, for a while we were experimenting with the idea of providing a flashcards feature in our app. The feature would allow users to save flashcards into decks, and then nest decks into other decks.&lt;/p&gt;

&lt;p&gt;What I wanted users to be able to do is pick any deck at any level in their tree of nested flashcard decks and review cards—and for the user to be shown cards not just from the selected deck but to recurse through and gather cards from all decks nested under the currently selected deck.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4N-wDuyr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vj4cpe1c4yd8lavjvy11.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4N-wDuyr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vj4cpe1c4yd8lavjvy11.png" alt="Image description" width="422" height="219"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We quickly realised that if the decks were nested too deeply, this would result in a dangerously expensive query that would likely crash the server. So this is just part of the solution we came up with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;deck_tree_depth_stats&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deck_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;Deck&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;recursive_ctes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;with_cte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s2"&gt;"roots"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;as:&lt;/span&gt; &lt;span class="n"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"(
        SELECT id, parent_id, 1 AS depth
        FROM decks
        WHERE id = ?
        UNION ALL
        SELECT decks.id, decks.parent_id, roots.depth + 1 as depth
        FROM decks
        JOIN roots
        ON roots.parent_id = decks.id
      )"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;parent_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;with_cte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s2"&gt;"branches"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;as:&lt;/span&gt; &lt;span class="n"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"(
        SELECT id, 1 AS depth
        FROM decks
        WHERE parent_id = ?
        UNION ALL
        SELECT decks.id, branches.depth + 1 as depth
        FROM decks
        JOIN branches
        ON decks.parent_id = branches.id
      )"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;deck_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:inner&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="s2"&gt;"roots"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:inner&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="s2"&gt;"branches"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;
        &lt;span class="ss"&gt;parent_depth:&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="ss"&gt;node_depth:&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;tree_depth:&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In retrospect this was a terrible use of our time. However, it's easy to end up writing complex code you wish you didn't have to write. The reason is because it's actually difficult to avoid painting yourself into a corner with schema design decisions. If you design your schema the wrong way, you can end up in a situation where you are forced into having to come up with complex solutions to the performance issues that arise from the structure of your schema.&lt;/p&gt;

&lt;p&gt;When you are a small startup trying to ship fast, you don't have the luxury to spend 15hrs reading through dry SQL docs trying to figure out how to get a query like this working properly. It's a direct threat to the success of the startup because any time you aren't iterating on features that directly create value for your customers is crucially-precious-time wasted.&lt;/p&gt;

&lt;p&gt;We've since scrapped this feature for a number of reasons, but looking back, it's excellent example of why I think that Dgraph is 🔥NOS🔥 for startups.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/oBVVG5rihyk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In Dgraph, implementing this feature is just this (graphql query):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;queryDeck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"korean-first-500-words"&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;flashcards&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;decks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="n"&gt;flashcards&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="n"&gt;decks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="n"&gt;flashcards&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it. 🤯&lt;/p&gt;

&lt;p&gt;Hopefully the NOS for startups analogy is clear by now. With Dgraph, our iteration speed as a startup is through the roof. Not just that, the whole process has become fun again—we're able to focus on shipping features, and iterate quickly without needing to be in a constant state of stress out about whether we're gonna be painted into a corner by our schema.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x_iPIwNv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/otxu78lpo6o0lut7mpni.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x_iPIwNv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/otxu78lpo6o0lut7mpni.gif" alt="Image description" width="400" height="225"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We're no longer held hostage by our database, we're now free to design a schema that is easy to understand rather than the schema that is least likely to blow up our queries.&lt;/p&gt;

&lt;p&gt;What makes the NOS analogy more apt is that Dgraph feels like such a powerful edge that we have over potential competitors that I almost don't want to tell people about it. It's a secret weapon.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dgraph.io/"&gt;Click here to learn more about Dgraph&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¹. Dgraph achieves this through its distributed nature, so while your laptop &lt;em&gt;may&lt;/em&gt; struggle with a multi-terabyte Dgraph graph this performance is available for a flat fee via &lt;a href="https://dgraph.io/products/"&gt;Dgraph Cloud&lt;/a&gt;&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>performance</category>
      <category>startup</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Divtober Day 27: Film</title>
      <author>Alvaro Montoro</author>
      <pubDate>Wed, 27 Oct 2021 04:24:56 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/divtober-day-27-film-4a8a</link>
      <guid>https://dev.to/alvaromontoro/divtober-day-27-film-4a8a</guid>
      <description>&lt;p&gt;Day of the word is "film", so here is a clapperboard (a.k.a. slate) needed in every film set to help with the audio/video synchronization. It animates a little on hover.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/qBXmKOr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It uses &lt;code&gt;perspective&lt;/code&gt; to simulate the 3D, but there's more to it: as the clapperboard is drawn with a single HTML tag we don't have enough elements to go "full 3D." The solution was using shadows and stacking them in a way that provides a fake sense of perspective (on top of the CSS perspective.)&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>divtober</category>
      <category>css</category>
      <category>art</category>
    </item>
    <item>
      <title>Why Jest is not for me</title>
      <author>Konnor Rogers</author>
      <pubDate>Wed, 27 Oct 2021 03:39:40 +0000</pubDate>
      <link>https://dev.to/paramagicdev/why-jest-is-not-for-me-46c5</link>
      <guid>https://dev.to/paramagicdev/why-jest-is-not-for-me-46c5</guid>
      <description>&lt;h2 id="why-make-this-article"&gt;
  &lt;a href="#why-make-this-article"&gt;
    Why make this at all?
  &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I don't enjoy bashing other people's hard work. This isn't meant to disparage anyone from using Jest or to put down the creators of Jest. This is purely opinion. This post was inspired by these tweets:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/matteocollina/status/1453029660925861901"&gt;https://twitter.com/matteocollina/status/1453029660925861901&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/melissamcewen/status/1453116278445678598"&gt;https://twitter.com/melissamcewen/status/1453116278445678598&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In addition, this post was also inspired by some issues I had integrating WebComponents into an existing Create-React-App that was using an older version of Jest / JSDOM.&lt;/p&gt;

&lt;h2 id="guiding-principles"&gt;
  &lt;a href="#guiding-principles"&gt;
    Guiding Principles
  &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Let's start with one of my big gripes with Jest. Jest is a Node environment attempting to mock out a real DOM via JSDOM. It's essentially a hybrid framework. Now, in the abstract, this is fine.&lt;/p&gt;

&lt;p&gt;The problem I have is that nowhere in the Jest documentation can I find this. At least, not immediately, I don't doubt that it is there somewhere, its just not in my face and up front.&lt;/p&gt;

&lt;p&gt;Where did I find this info? Well, I was debugging an issue with our React app at work not playing nicely with Web Components. We use Create-React-App, so naturally, the first place I turned was CRA's documentation on testing. It is here that I discovered that Jest isnt quite Node and isnt quite a browser, its some weird in between.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Create React App uses Jest as its test runner. To prepare for this integration, we did a major revamp of Jest so if you heard bad things about it years ago, give it another try.&lt;/p&gt;

&lt;p&gt;Jest is a Node-based runner. This means that the tests always run in a Node environment and not in a real browser. This lets us enable fast iteration speed and prevent flakiness.&lt;/p&gt;

&lt;p&gt;While Jest provides browser globals such as window thanks to jsdom, they are only approximations of the real browser behavior. Jest is intended to be used for unit tests of your logic and your components rather than the DOM quirks.&lt;/p&gt;

&lt;p&gt;We recommend that you use a separate tool for browser end-to-end tests if you need them. They are beyond the scope of Create React App.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://create-react-app.dev/docs/running-tests"&gt;https://create-react-app.dev/docs/running-tests&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So basically, Jest is a unit test framework. Thats fine. The problem comes when you begin to realize a lot of people are using Jest like its an E2E solution. Jest / React have a number of functions that make you believe you're rendering in a browser, but you're not. For example, lets look at an example from Create-React-App.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://create-react-app.dev/docs/running-tests/#testing-components"&gt;https://create-react-app.dev/docs/running-tests/#testing-components&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;renders without crashing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That looks pretty close to what we would do in a real DOM to render our app! So why would we think it is not operating in a real browser?!&lt;/p&gt;

&lt;p&gt;You think you're in a DOM, but you're really not. It looks like a duck, it quacks like a duck, but maybe its a swan? or a goose? /honk&lt;/p&gt;

&lt;h2 id="mocked-dom"&gt;
  &lt;a href="#mocked-dom"&gt;
    The Pitfalls of a Mocked DOM
  &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;So you may be thinking, "fine, just use Jest for unit tests." And this is correct, use it for unit tests. The problem is that if you import a web component (or any component for that matter) that relies on some sort of DOM function being available (looking at you &lt;a href="https://jestjs.io/docs/manual-mocks#mocking-methods-which-are-not-implemented-in-jsdom"&gt;&lt;code&gt;window.matchMedia&lt;/code&gt;&lt;/a&gt;) you're on the hook to mock it out yourself.&lt;/p&gt;

&lt;p&gt;Now what if you're relying on a third party component that uses these mocked out functions in some way to produce side-effects and you want to know about them?&lt;/p&gt;

&lt;p&gt;Well, you gotta implement a system test. Now what if despite all the mocking in the world, you just cant get it to work, now you're stuck mocking out an entire component, which isn't great. We'll talk more about mocking out ESM packages in the next section.&lt;/p&gt;

&lt;p&gt;A mocked DOM makes you feel like you're working in a real DOM, but because its not a real DOM, it can give users false confidence in their tests.&lt;/p&gt;

&lt;h2 id="the-module-problem"&gt;
  &lt;a href="#the-module-problem"&gt;
    The Module Problem
  &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;While we're on the subject of mocking out a package, lets talk about Jest and modules. Jest has come a long way in this regards, but still does not fully support ES Modules. It also does not support mocking ES Modules (which I dont think any framework does, and I think its a good thing). This means, in order to mock a package, you must transform it into CJS, and then mock it out. &lt;code&gt;"transformIgnorePatterns"&lt;/code&gt; ring any bells? &lt;a href="https://jestjs.io/docs/tutorial-react-native#transformignorepatterns-customization"&gt;https://jestjs.io/docs/tutorial-react-native#transformignorepatterns-customization&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So now you're transpiling what you're testing by changing it from ESM to CJS which are similar, but not 100% the same. This changes your &lt;code&gt;import&lt;/code&gt; syntax to &lt;code&gt;require&lt;/code&gt; syntax. Part of the issue of Jest is that it's a full fledged batteries included framework (this is a double edged sword) that wraps your code and executes it. By wrapping your code and executing, you're moving further away from how your app is actually used and can lead to subtle bugs and difference in behavior.&lt;/p&gt;

&lt;h2 id="why-is-jest-used"&gt;
  &lt;a href="#why-is-jest-used"&gt;
    Why use Jest at all?
  &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Given the above info that Jest is a large framework with a number of quirks including not fully supporting ES Modules, running in a weird hybrid space that isnt quite Node (&lt;a href="https://github.com/facebook/jest/issues/2549"&gt;Jest actually has different globals from Node&lt;/a&gt;) but isn't quite a browser, why would anyone use it?&lt;/p&gt;

&lt;p&gt;Well, the short answer is integrations. Jest has a first-class integration story with React. Jest is married to React (it makes sense, both are developed by Facebook) and most frontend developers have some familiarity with React. People like to test with what they're familiar with. Jest is familiar for a lot of developers and &lt;em&gt;just works&lt;/em&gt; for most use-cases.&lt;/p&gt;

&lt;p&gt;Jest is very much a batteries included framework. It's designed to work well in certain projects, but in other projects, can produce nightmares that are hard to debug and can cause unexpected behavior.&lt;/p&gt;

&lt;h2 id="what-is-recommended"&gt;
  &lt;a href="#what-is-recommended"&gt;
    Okay, if not Jest, then what?
  &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;My personal preferences for unit-testing is split between Node based tests and browser based tests. &lt;/p&gt;

&lt;p&gt;For Node, I lean towards &lt;a href="https://github.com/lukeed/uvu"&gt;UVU&lt;/a&gt; by &lt;a href="https://twitter.com/lukeed05"&gt;@lukeed&lt;/a&gt; due to its simplicity. Its lightweight, fast, supports ESM out of the box. It feels like an easier to setup modern Mocha (without the wide array of plugins).&lt;/p&gt;

&lt;p&gt;For browsers, I lean heavily towards &lt;a href="https://modern-web.dev/docs/test-runner/overview/"&gt;Web-Test-Runner&lt;/a&gt; by the folks over at &lt;a href="https://twitter.com/modern_web_dev"&gt;@modern_web_dev&lt;/a&gt;. Web-Test-Runner is an opinionated browser based unit test framework that runs in a full DOM environment, is super fast, and has the option to run as system tests via E2E frameworks like Playwright or Puppeteer by turning on a config option and adding a package.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://modern-web.dev/docs/test-runner/browser-launchers/overview/"&gt;https://modern-web.dev/docs/test-runner/browser-launchers/overview/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="closing-thoughts"&gt;
  &lt;a href="#closing-thoughts"&gt;
    Closing Thoughts
  &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;If Jest works for you use it. Much of the problems I have faced with Jest have been addressed in &lt;a href="https://github.com/facebook/jest/blob/main/CHANGELOG.md#2650"&gt;Jest 26.5&lt;/a&gt; which comes with &lt;a href="https://github.com/facebook/jest/pull/10578"&gt;JSDOM 16.4&lt;/a&gt; which added support for WebComponents.&lt;/p&gt;

&lt;p&gt;I don't think Jest is necessarily bad, I just think Jest can be deceiving. If it works for you, continue doing what works. I'm not going dissuade you from being productive or testing your code.&lt;/p&gt;

</description>
      <category>jest</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>How to change git branch name (local and remote)</title>
      <author>Teerasak Vichadee</author>
      <pubDate>Wed, 27 Oct 2021 03:20:20 +0000</pubDate>
      <link>https://dev.to/ilumin/how-to-change-git-branch-name-local-and-remote-228d</link>
      <guid>https://dev.to/ilumin/how-to-change-git-branch-name-local-and-remote-228d</guid>
      <description>&lt;p&gt;It's possible that we will do something wrong, well, we're all just human, we always do something wrong (or may be right).&lt;/p&gt;

&lt;p&gt;Git branch are something that I always define it in wrong pattern 🤣.&lt;/p&gt;

&lt;p&gt;Here how to fix it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;you need to change branch name in local first
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git branch &lt;span class="nt"&gt;-m&lt;/span&gt; old-branch-name new-branch-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What it does? it dose change local branch name from &lt;code&gt;old-branch-name&lt;/code&gt; to &lt;code&gt;new-branch-name&lt;/code&gt;. You can check with &lt;code&gt;git log&lt;/code&gt; you will found that the &lt;code&gt;old-branch-name&lt;/code&gt; are gone!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;change branch name in remote &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This part are required when the &lt;code&gt;old-branch-name&lt;/code&gt; are in remote. What you need to do is just push the &lt;code&gt;new-branch-name&lt;/code&gt; into remote then remove the &lt;code&gt;old-branch-name&lt;/code&gt; in remote that's it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git push origin &lt;span class="nt"&gt;-u&lt;/span&gt; new-branch-name
&lt;span class="nv"&gt;$ &lt;/span&gt;git push origin &lt;span class="nt"&gt;-d&lt;/span&gt; old-branch-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, the &lt;code&gt;old-branch-name&lt;/code&gt; are gone both local and remote.&lt;/p&gt;

</description>
      <category>git</category>
    </item>
    <item>
      <title>Learn Git in an afternoon (Beginners) 😎🐱‍💻</title>
      <author>Jose Antonio Felix </author>
      <pubDate>Wed, 27 Oct 2021 02:33:26 +0000</pubDate>
      <link>https://dev.to/jafb321/learn-git-in-an-afternoon-beginners-200m</link>
      <guid>https://dev.to/jafb321/learn-git-in-an-afternoon-beginners-200m</guid>
      <description>&lt;p&gt;Do you want to be able to have the control of your code and have a trustworthy and easy to make history of it?📚 If yes, this quick tutorial &lt;strong&gt;is for you!&lt;/strong&gt;. First of all, we have to know some concepts:&lt;/p&gt;

&lt;p&gt;
  Git
  &lt;h2&gt;
  &lt;a href="#git"&gt;
  &lt;/a&gt;
  Git
&lt;/h2&gt;

&lt;p&gt;Acording to &lt;a href="https://git-scm.com/"&gt;Git scm&lt;/a&gt;. Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8mSu-mHx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wy9vx19znngvgxhj0kpu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8mSu-mHx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wy9vx19znngvgxhj0kpu.png" alt="Git logo" width="588" height="200"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Git is easy to learn&lt;/strong&gt; and has a tiny footprint with lightning fast performance.&lt;/p&gt;




  Github
  &lt;h2&gt;
  &lt;a href="#github"&gt;
  &lt;/a&gt;
  Github
&lt;/h2&gt;

&lt;p&gt;Is a platform where you can put your code in a cloud &lt;strong&gt;git repository&lt;/strong&gt; completely free and where other developers could see your code and contribute or use it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bTSzRCon--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvoo4wdp66oqddqh7qio.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bTSzRCon--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvoo4wdp66oqddqh7qio.png" alt="Github logo" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github is &lt;strong&gt;very useful&lt;/strong&gt; and &lt;strong&gt;is used by a lot of developers in the world&lt;/strong&gt;. This tool could allow you to improve as developer and be atractive to software companies.&lt;/p&gt;

&lt;p&gt;We won't learn about Github in this tutorial, but it's still important to know the diference between Git/Github.&lt;/p&gt;



&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-install-git"&gt;
  &lt;/a&gt;
  How to install Git
&lt;/h2&gt;

&lt;p&gt;First of all, we need to &lt;a href="https://git-scm.com/"&gt;download Git&lt;/a&gt; and install it in our pc 💻. The install process is easy, you only need to open the installer and leave default options (if you want), then click &lt;em&gt;next, next, install&lt;/em&gt; up to finish the installation&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-git"&gt;
  &lt;/a&gt;
  How to use Git
&lt;/h2&gt;

&lt;p&gt;Git doesn't has a graphic user interface, so we have to use the terminal (cmd, powershell, bash, etc). Don't worry, the use of git is very intuitive and colorfuly ✨.&lt;/p&gt;

&lt;p&gt;Here are the basics about Git, I'll try to explain each one in the easier way possible&lt;/p&gt;

&lt;p&gt;
  Create a repository 🛠
  &lt;br&gt;
First thing that you need to do, is create a repository, for this you have to &lt;strong&gt;open your terminal and find/create the folder where your project is&lt;/strong&gt;.

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G5QIOqOH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ag3uqw4q3urucici0axt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G5QIOqOH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ag3uqw4q3urucici0axt.png" alt="Code folder example" width="835" height="517"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we have to type in the terminal this:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git init&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;You'll get something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fpLGc2Y8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y5xfh0d7ireyg54423t9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fpLGc2Y8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y5xfh0d7ireyg54423t9.png" alt="Git init example" width="709" height="86"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the job is done! we have our git repository initialized 💪🏻, Go to the later steps.&lt;/p&gt;



&lt;/p&gt;


  Add your files to the repository 🛒
  &lt;p&gt;In Git, you have to specify what files will be added on your repository. To know what files can be added you can type:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git status&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;And get something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uA1pu9iu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h0u6cms5xitdj0m8iwwl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uA1pu9iu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h0u6cms5xitdj0m8iwwl.png" alt="Git status example" width="665" height="230"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The command shows the status of all project files, In this case the red ones are untracked files, that means these files will be ignored by git, unless we add them to the repository, for this, we can type:&lt;br&gt;
&lt;code&gt;git add app.js&lt;/code&gt;&lt;br&gt;
and &lt;br&gt;
&lt;code&gt;git add index.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;useful tip&lt;/em&gt;&lt;/strong&gt; 🤓&lt;br&gt;
&lt;em&gt;There is a way to add all untracked/modified files to the repo. in one line, you just have to type a dot instead of the file name:&lt;/em&gt;&lt;br&gt;
&lt;code&gt;git add .&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;Now, we have our files added to the project, so if we run a &lt;strong&gt;&lt;em&gt;git status&lt;/em&gt;&lt;/strong&gt; again we'll have:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4eBCzwqe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wx1z3jt98d6h9j6b5vaw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4eBCzwqe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wx1z3jt98d6h9j6b5vaw.png" alt="git status with added files" width="471" height="234"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But, what does mean this? Well, as we can see, the green color filenames with "new file:" tag indicates that these files have been added succesfully to the repo. &lt;br&gt;
So, we can start to use these files and make our history of changes and other interesting things. &lt;br&gt;
For that, continue with the next step 👇🏻. &lt;/p&gt;






&lt;p&gt;
  Commit our changes 🧪
  &lt;br&gt;
In the last step, we added the files to the repository. When we add some file, the file is handled by git, but it isn't part of the history of changes, for this we need to "commit" our changes.

&lt;p&gt;For commit the pending changes (in this case, the added files), we can type a command like the following:&lt;br&gt;
&lt;code&gt;git commit -m "Initial files"&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;In this command, the structure is the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;git commit&lt;/code&gt; : Indicates that you'll commit the pending changes (all green files getted on "git status" will be committed).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-m "Initial files"&lt;/code&gt; : These are optional, but is strongly recommended put it because the text between quotes is the message, and servers to set the reason/sense/description of the commit. Good commit descriptions allows you (and others) understand better your code 🤔.
This commit message should have the &lt;em&gt;what? and why?&lt;/em&gt; of your code changes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We type "Inital files" because we are adding the &lt;code&gt;app.js&lt;/code&gt; and &lt;code&gt;index.html&lt;/code&gt; for first time, and its are the first files in our project.&lt;/p&gt;

&lt;p&gt;After entering that last command we'll get:&lt;br&gt;
(When you enter this command first time, git will ask you for an username and email, this is for author register only)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mXkoVsqQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8j2ifvo0xhcmiuuyvt8y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mXkoVsqQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8j2ifvo0xhcmiuuyvt8y.png" alt="Commit initial files" width="633" height="108"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, if we type again &lt;code&gt;git status&lt;/code&gt;, we'll get:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vsNioZeM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wtjkryhg6g1lwtrylujd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vsNioZeM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wtjkryhg6g1lwtrylujd.png" alt="Clean git status" width="443" height="57"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That means we have done the &lt;strong&gt;commit&lt;/strong&gt; successfully and the repository doesn't have pending changes.&lt;/p&gt;

&lt;p&gt;Now, since we have made our first commit, it means that we can see it in the repository history, for this we just have to type:&lt;br&gt;
&lt;code&gt;git log&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S29tW2UG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lzyih1xowipw37vobnil.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S29tW2UG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lzyih1xowipw37vobnil.png" alt="repository log/history" width="597" height="116"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There, you could see all commits made in this repository (we'll see &lt;code&gt;git log&lt;/code&gt; command more detailed in the other step).&lt;/p&gt;

&lt;p&gt;Now, we'll modify the file &lt;code&gt;app.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wQ-NgwJA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wm9f6vakx870klamg1qe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wQ-NgwJA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wm9f6vakx870klamg1qe.png" alt="file modify example" width="488" height="168"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we modify some file, git will detect the changes automatically (the file must have been added with &lt;code&gt;git add&lt;/code&gt; before).&lt;/p&gt;

&lt;p&gt;Now, we can type &lt;code&gt;git status&lt;/code&gt; again to see the changes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0b5gv25c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqm96y6k755ezkn95rjd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0b5gv25c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqm96y6k755ezkn95rjd.png" alt="See changed files" width="662" height="153"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The important thing here, is the red label &lt;code&gt;modified: app.js&lt;/code&gt;. The difference between this result and the first git status is the "modified:" instead of "new:" tag.&lt;/p&gt;

&lt;p&gt;This is beacause we have already added and commited the &lt;code&gt;app.js&lt;/code&gt; file for first time, but now we have made modifications, then we need to add and commit again this changed file 👇🏼 &lt;/p&gt;

&lt;p&gt;Now we can commit this new change typing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
git add app.js
git commit -m "change welcome text" 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
git commit app.js -m "change welcome text"

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both work fine, but if you want to add more files in one commit you should use &lt;code&gt;git add&lt;/code&gt; way.&lt;/p&gt;

&lt;p&gt;Now, we can type &lt;code&gt;git log&lt;/code&gt; again to see the new history:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nqUnPnXy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qorp9z6n1hax3s6k9elp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nqUnPnXy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qorp9z6n1hax3s6k9elp.png" alt="commits log" width="616" height="237"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the next step, we'll see more details about git log command, it will be a short section.&lt;/p&gt;



&lt;/p&gt;


  Repository history 📚
  &lt;br&gt;
Here, we'll see some tips for &lt;code&gt;git log&lt;/code&gt; command, and I'll try to explain a couple of important things about it.
&lt;h3&gt;
  &lt;a href="#git-log-structure"&gt;
  &lt;/a&gt;
  git log structure:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UOuUL6R2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zl44s6ju2mfsvfj6fhph.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UOuUL6R2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zl44s6ju2mfsvfj6fhph.png" alt="Git log components" width="633" height="273"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Red mark&lt;/strong&gt;: Commit ID&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is auto-generated for git and identify a specific commit&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Yellow mark&lt;/strong&gt;: Commit message&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Is the text wich we putted in &lt;code&gt;git commit -m "message"&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Blue mark&lt;/strong&gt;: &lt;em&gt;HEAD -&amp;gt; branch&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This can sound confusing, but indicates in wich "branch" of the repo we are, don't worry, you don't need to know this for now,  will be nice in the future, but not for the basics 🤠&lt;/p&gt;

&lt;p&gt;Useful Tip 💡:&lt;br&gt;
You can type &lt;code&gt;git log --oneline&lt;/code&gt; and you'll get a better and more readable output of your commit history:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wHVVz1l5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sn3cmyxiw06r72ceqpwl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wHVVz1l5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sn3cmyxiw06r72ceqpwl.png" alt="git log in one line" width="502" height="100"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we have a more simple log, (note that ID is reduced to it's 7 last characters).&lt;/p&gt;









&lt;p&gt;There are a lot of other interesting things that you can do with git, but this tutorial is more focused on the basics, so feel free to practice and learning more about it!&lt;/p&gt;

&lt;p&gt;I'll write more useful posts about Git, Github and stuff. So follow me if you want to learn 📌&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QD_yqXHM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqi2jvqjmule6q5pnguz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QD_yqXHM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqi2jvqjmule6q5pnguz.gif" alt="Git meme" width="397" height="223"&gt;&lt;/a&gt;&lt;br&gt;
(If you want to understand the meme, don't forget follow me to learn about git branches, gitignore, merge, remote, github, etc 🎈)&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>beginners</category>
      <category>code</category>
    </item>
    <item>
      <title>Google refusing to connect to other sites?!</title>
      <author>Calin Baenen</author>
      <pubDate>Wed, 27 Oct 2021 01:17:13 +0000</pubDate>
      <link>https://dev.to/baenencalin/google-refusing-to-connect-to-other-sites-2pb7</link>
      <guid>https://dev.to/baenencalin/google-refusing-to-connect-to-other-sites-2pb7</guid>
      <description>&lt;p&gt;This may or may not end up being related to &lt;a href="https://dev.to/baenencalin/chromium-console-stopped-working-whats-wrong-hod-do-i-fix-it-1a8e"&gt;my previous post about Chromium devtools not working&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, for a few days now, I've been experiencing some issues with Google's services on third-party websites, such as Hulu, SoloLearn, etc...&lt;br&gt;
When I've tried to log into &lt;a href="https://www.sololearn.com/%5D,%20%5BTwitter%5D(https://www.twitter.com/),%20and%20%5BReddit%5D(https://www.reddit.com/)%20using%20"&gt;SoloLearn&lt;/a&gt;.&lt;sup&gt; NOTE: All of the services listed don't require a CAPTCHA to login manually, or with SIwG.&lt;/sup&gt;&lt;br&gt;
When I try to log into &lt;a href="https://www.hulu.com/"&gt;Hulu&lt;/a&gt;, I go to enter my (mother's) email and password.&lt;br&gt;
And what's this? - It's a... well- um- it's &lt;b&gt;meant&lt;/b&gt; to be a reCAPTCHA, but it refuses to connect, as it shows with the frowning paper icon, and reads "&lt;a href="https://www.google.com/"&gt;www.google.com&lt;/a&gt; refused to connect.". -- Note that it doesn't always have the textbox with the text that says that Google refused the connection. - When I first go to the login page, the box is much smaller, and has no textbox under it (or container).&lt;br&gt;
Here are some images to show what I'm talking about:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wJ24cxDZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gk8inszssmy1hebj5y4e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wJ24cxDZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gk8inszssmy1hebj5y4e.png" alt="Hulu welcome page, where it does not show Google refusing to connect." width="880" height="479"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KrxTk9Mo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1zk0wlz1rej9cfm7y6a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KrxTk9Mo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1zk0wlz1rej9cfm7y6a.png" alt="Hulu welcome page, where it shows Google refused to connect." width="880" height="479"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Going back to one of the services mentioned briefly earlier (Reddit), I tried logging in using SIwG, and nothing happened, even after refreshing and &lt;a href="https://www.documate.org/automation/what-is-a-hard-refresh-how-to-do-a-hard-refresh-in-any-browser/"&gt;hard-refreshing&lt;/a&gt; the page (and trying again).&lt;br&gt;
I had to reset my password, and when I did, logging in manually worked perfectly fine. Same for Twitter (except I knew my password there, so no reset was needed).&lt;/p&gt;

&lt;p&gt;I've tried clearing my browser's cache and profile cache.&lt;br&gt;
I've tried clearing all my cookies.&lt;br&gt;
I've tried reconnecting to the wifi, and restarted the router.&lt;br&gt;
I've logged onto other Google products, showing that I am able to use Google products within Google's own domain.&lt;/p&gt;

&lt;p&gt;So, does anyone have any ideas as to whats going on, and how I can fix it?&lt;/p&gt;

&lt;h1&gt;&lt;b&gt;Thanks!&lt;br&gt; Cheers!&lt;/b&gt;&lt;/h1&gt;

</description>
      <category>chromium</category>
      <category>google</category>
      <category>webdev</category>
      <category>help</category>
    </item>
    <item>
      <title>How to Set Up Free SSL for NodeJS App in AWS EC2</title>
      <author>Miftahul Arifin</author>
      <pubDate>Wed, 27 Oct 2021 01:04:32 +0000</pubDate>
      <link>https://dev.to/arifintahu/how-to-set-up-free-ssl-for-nodejs-app-in-aws-ec2-30fj</link>
      <guid>https://dev.to/arifintahu/how-to-set-up-free-ssl-for-nodejs-app-in-aws-ec2-30fj</guid>
      <description>&lt;p&gt;Recently, I figured out how to set up a Free SSL certificate NodeJS App in AWS EC2. Then, I would like to share what I've done so far.&lt;/p&gt;

&lt;p&gt;Firstly we need some prerequisites below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWS EC2 Instance with NodeJS installed&lt;/li&gt;
&lt;li&gt;Domain purchased from any provider&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#step-1-ec2-setup"&gt;
  &lt;/a&gt;
  Step 1. EC2 Setup
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#create-instance"&gt;
  &lt;/a&gt;
  Create Instance
&lt;/h3&gt;

&lt;p&gt;I've used a &lt;code&gt;t2.micro&lt;/code&gt; Linux instance, choose your desired instance and click on Review and Launch&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#security-group"&gt;
  &lt;/a&gt;
  Security Group
&lt;/h3&gt;

&lt;p&gt;Setup inbound security group settings to allow incoming traffic on http port &lt;code&gt;80&lt;/code&gt;, https port &lt;code&gt;443&lt;/code&gt;, and &lt;code&gt;22&lt;/code&gt; for SSH as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#elastic-ip"&gt;
  &lt;/a&gt;
  Elastic IP
&lt;/h3&gt;

&lt;p&gt;Allocate static IP address for your instance&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to EC2 Dashboard &amp;gt; Network &amp;amp; Security &amp;gt; Elastic IPs&lt;/li&gt;
&lt;li&gt;Click on Allocate Elastic IP Address&lt;/li&gt;
&lt;li&gt;Select the newly generated static IP. Click on the dropdown Actions &amp;gt; Associate Elastic IP Address &amp;gt; Select Instance &amp;gt; Associate&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#ssh-to-your-instance"&gt;
  &lt;/a&gt;
  SSH to your instance
&lt;/h3&gt;

&lt;p&gt;Go to EC2 Dashboard &amp;gt; Instances &amp;gt; Select Instance ID and click on connect in the right section&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-set-up-ip-tables"&gt;
  &lt;/a&gt;
  Step 2. Set Up IP Tables
&lt;/h2&gt;

&lt;p&gt;We need to set up IP Tables because NodeJS Express Server cannot access port 80/443. We'll set up server to listen on port 8443 for HTTPS (8000 for HTTP) and redirect traffic to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Lookup IP routing tables&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;iptables &lt;span class="nt"&gt;-t&lt;/span&gt; nat &lt;span class="nt"&gt;-L&lt;/span&gt;

&lt;span class="c"&gt;# Add HTTP port 80 and 443 traffic redirect rule&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;iptables &lt;span class="nt"&gt;-t&lt;/span&gt; nat &lt;span class="nt"&gt;-A&lt;/span&gt; PREROUTING &lt;span class="nt"&gt;-p&lt;/span&gt; tcp &lt;span class="nt"&gt;--dport&lt;/span&gt; 80 &lt;span class="nt"&gt;-j&lt;/span&gt; REDIRECT &lt;span class="nt"&gt;--to-ports&lt;/span&gt; 8000
&lt;span class="nb"&gt;sudo &lt;/span&gt;iptables &lt;span class="nt"&gt;-t&lt;/span&gt; nat &lt;span class="nt"&gt;-A&lt;/span&gt; PREROUTING &lt;span class="nt"&gt;-p&lt;/span&gt; tcp &lt;span class="nt"&gt;--dport&lt;/span&gt; 443 &lt;span class="nt"&gt;-j&lt;/span&gt; REDIRECT &lt;span class="nt"&gt;--to-ports&lt;/span&gt; 8443
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-3-generate-private-key-ca-bundle-and-ssl-certificate"&gt;
  &lt;/a&gt;
  Step 3. Generate Private Key, CA Bundle and SSL Certificate
&lt;/h2&gt;

&lt;p&gt;We'll use &lt;a href="https://www.sslforfree.com/"&gt;SSL For Free&lt;/a&gt; for generating key and SSL certificate for free.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7FwNtOZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nidob2n2knc8am0gc0od.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7FwNtOZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nidob2n2knc8am0gc0od.jpg" alt="Screenshot SSL for Free" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Firstly we need to create account in &lt;a href="https://www.sslforfree.com/"&gt;SSL For Free&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Click on Certificates &amp;gt; New Certificate&lt;/li&gt;
&lt;li&gt;Enter your domain or subdomain and click Next Step&lt;/li&gt;
&lt;li&gt;Select 90-Day Certificate for free SSL and Next Step&lt;/li&gt;
&lt;li&gt;Finalize order and make sure select free&lt;/li&gt;
&lt;li&gt;Then, you need to verify your domain, I choose verification using DNS (CNAME) because it's easier&lt;/li&gt;
&lt;li&gt;Finally, it'll take some time to verify our domain&lt;/li&gt;
&lt;li&gt;If the order has been issued, then download certificate&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#step-4-domain-routing"&gt;
  &lt;/a&gt;
  Step 4. Domain Routing
&lt;/h2&gt;

&lt;p&gt;Next we'll route our instance to our domain provider.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to your DNS Management dashboard&lt;/li&gt;
&lt;li&gt;Create new &lt;code&gt;A Record&lt;/code&gt; with Elastic IP Address as a value, and fill host with the same address which we have registered in &lt;a href="https://www.sslforfree.com/"&gt;SSL For Free&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Then, wait for some time to activate the configuration&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#step-5-certificate-activation"&gt;
  &lt;/a&gt;
  Step 5. Certificate Activation
&lt;/h2&gt;

&lt;p&gt;Finally, we'll create a simple server to apply our SSL certificate.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Firstly, SSH to your EC2 instance&lt;/li&gt;
&lt;li&gt;Upload and extract certificate zip file from &lt;a href="https://www.sslforfree.com/"&gt;SSL For Free&lt;/a&gt; to our project folder&lt;/li&gt;
&lt;li&gt;Create &lt;code&gt;index.js&lt;/code&gt; file and write the following code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We'll create simple server as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;https&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;https_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="na"&gt;ca&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ca_bundle.crt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;private.key&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="na"&gt;cert&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;certificate.crt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;https_options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeHead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Welcome to Node.js HTTPS Server&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8443&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;node index.js&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Now open your browser and go to your domain&lt;/li&gt;
&lt;li&gt;If everything was set up correctly you'll see green https in your browser address bar.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#folder-structure"&gt;
  &lt;/a&gt;
  Folder Structure
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Node Project
│   index.js
│   private.key        // Zip file from SSL For Free
│   ca_bundle.crt      // Zip file from SSL For Free
│   certificate.crt    // Zip file from SSL For Free
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>aws</category>
      <category>https</category>
      <category>node</category>
      <category>ec2</category>
    </item>
    <item>
      <title>Hello Guys, I'm New in the community!</title>
      <author>Sajidur Rahman</author>
      <pubDate>Wed, 27 Oct 2021 00:50:14 +0000</pubDate>
      <link>https://dev.to/sajidurs/hello-guys-im-new-in-the-community-hope-you-guys-will-help-me-to-solve-my-programming-related-issues-1gab</link>
      <guid>https://dev.to/sajidurs/hello-guys-im-new-in-the-community-hope-you-guys-will-help-me-to-solve-my-programming-related-issues-1gab</guid>
      <description>&lt;p&gt;Hope you guys will help me to solve my programming related issues&lt;/p&gt;

</description>
      <category>wordpress</category>
      <category>beginners</category>
      <category>programming</category>
      <category>html</category>
    </item>
    <item>
      <title>Daily code, like daily bread</title>
      <author>Jason Leow ~ golifelog.com</author>
      <pubDate>Tue, 26 Oct 2021 23:52:03 +0000</pubDate>
      <link>https://dev.to/jasonleowsg/daily-code-like-daily-bread-2cc9</link>
      <guid>https://dev.to/jasonleowsg/daily-code-like-daily-bread-2cc9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why-i-decided-to-code-for-1h-daily-for-100-days-under-100daysofcode"&gt;
  &lt;/a&gt;
  &lt;em&gt;Why I decided to code for 1h daily for 100 days under #100daysofcode&lt;/em&gt;
&lt;/h2&gt;




&lt;blockquote&gt;
&lt;p&gt;A year from now, you’ll wish you had started today ~ Tony Robbins&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That line still resonates deeply today. Or stings badly, depending on what I’m thinking about. &lt;/p&gt;

&lt;p&gt;I’m glad now for some of the things I started a year ago today. Things like being on keto, learning coding, having a child. Without these things, the quality and meaning of my life would have been much worse off.&lt;/p&gt;

&lt;p&gt;But it’s one thing to be glad that you started, but another to have reached your goal. For coding, I’m glad to have started, but my journey is far from over. In fact, it’s just began, and I’m nowhere near the level of proficiency I need to be able to create the products I dream of. Basically, a competency-aspiration mismatch. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Easy or not, time will pass anyway.” &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If time will pass anyway, might as well just do it, so that one year later I won’t just be glad to have started, but elated to have accomplished my goal. &lt;/p&gt;

&lt;p&gt;That's why I decided back in July 2020 that in order for me to get to the mastery I want, I need dedicated practice. To achieve mastery, I can’t drop in and drop out every few weeks or months. My grasp on coding often feels like I got it, then I don’t. Two steps forward, three steps back. I’m tired of this push and pull relationship. Hence, I dedicated an hour of code daily, in the mornings or at night. Rain or shine, busy or not. Sixty minutes of code every single day, or bust (my streak). For 100 days - #100daysofcode&lt;/p&gt;

&lt;p&gt;Daily code, like daily bread.&lt;/p&gt;

&lt;p&gt;And I'm grateful and glad I did, because I finally made coding stick, and I made my very first &lt;a href="https://golifelog.com"&gt;SaaS&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;Follow my daily writings on &lt;a href="https://golifelog.com/goals/30"&gt;Lifelog&lt;/a&gt;, where I write about learning to code, goals, productivity, indie hacking and tech for good.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>100daysofcode</category>
      <category>decodingcoding</category>
    </item>
    <item>
      <title>Q&amp;A: How can AI be used in banking?</title>
      <author>Mage</author>
      <pubDate>Tue, 26 Oct 2021 23:39:51 +0000</pubDate>
      <link>https://dev.to/mage_ai/qa-how-can-ai-be-used-in-banking-16p5</link>
      <guid>https://dev.to/mage_ai/qa-how-can-ai-be-used-in-banking-16p5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;p&gt;The financial services or banking industry is an essential part of our everyday lives but the institutions who adopt and integrate artificial intelligence (AI) will have a clear advantage for their future business success.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Banking as you know it&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AI use cases today&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Case studies&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Conclusion&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#banking-as-you-know-it"&gt;
  &lt;/a&gt;
  Banking as you know it
&lt;/h2&gt;

&lt;p&gt;Traditionally, banks provided consumers a safe and secure method of saving and storing their money, credit to buy large purchases such as homes and automobiles, and other services such as wealth management. Though the general purpose of banks and financial institutions have remained the same, the way we “bank” has changed significantly within the last few decades.&lt;/p&gt;

&lt;p&gt;With the rise of telephone and internet banking in the ’80s and ’90s and now with the disruption of fintechs, we’ve gone from going to a brick and mortar institution or ATM to “pull out cash” to a more cashless society of peer-to-peer (p2p) payments such as &lt;a href="https://venmo.com/"&gt;Venmo&lt;/a&gt;, &lt;a href="https://www.paypal.com/us/home"&gt;PayPal&lt;/a&gt;, &lt;a href="https://www.zellepay.com/"&gt;Zelle&lt;/a&gt;, or &lt;a href="https://cash.app/"&gt;Cash App&lt;/a&gt;. We can’t forget contactless payments such as &lt;a href="https://www.apple.com/apple-pay/"&gt;Apple Pay&lt;/a&gt;, &lt;a href="https://pay.google.com/gp/w/u/0/home/signup?sctid=1087184467151157"&gt;Google Pay&lt;/a&gt;, and &lt;a href="https://www.samsung.com/us/samsung-pay/"&gt;Samsung Pay&lt;/a&gt; that may have you wondering if we even need banks at all.&lt;/p&gt;

&lt;p&gt;These drastic changes came about with the investment in technology and the ever increasing amount of data. From banks to credit unions to fintechs, they were able to leverage data to improve customer experience; making the process of banking easier and more personalized. According to a recent &lt;a href="https://www2.deloitte.com/lu/en/pages/banking-and-securities/articles/future-ai-in-banking.html"&gt;Deloitte survey&lt;/a&gt;, 86% of financial services AI adopters say that AI will be very or critically important to their business’s success in the next couple of years. AI has already transformed the banking industry globally in a short span of time. We’ll take a look at some ways AI has impacted and shifted the financial services industry.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ai-use-cases-today"&gt;
  &lt;/a&gt;
  AI use cases today
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#fraud-detection"&gt;
  &lt;/a&gt;
  Fraud detection
&lt;/h3&gt;

&lt;p&gt;You’re enrolled in it. You could’ve had someone pose as you today and not even know, because AI is protecting you. AI is helping with the fight against money related fraud and scams through fraud detection. It follows the steps of detection, investigation, and then “dealing with it.”&lt;/p&gt;

&lt;p&gt;The process stems from an unusual pattern of the payment transaction. Applying AI on your behavioral patterns determines whether the payment is legitimate or not, taking into account frequency of purchase, and location of prior purchases. It’s not about comparing handwriting or signatures, especially in the world of contact-less pay.&lt;/p&gt;

&lt;p&gt;In the case that it is flagged as potentially fraud, the bank launches an “investigation” by texting the phone number of the owner’s account. Then, the owner gets a notification to verify whether the transaction is real or illegitimate.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2o5bL8WH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6yw2ot110g6mvjyzux3k.png" alt="Image description" width="574" height="604"&gt;&lt;em&gt;Only trust verified application notifications not text messages (Source: BofA)&lt;/em&gt;
&lt;/center&gt;
&lt;h3&gt;
  &lt;a href="#lending"&gt;
  &lt;/a&gt;
  Lending
&lt;/h3&gt;

&lt;p&gt;At some point in our lives, we may decide to make some large purchases such as buying a car or home. It’s not uncommon to borrow from a bank to make such purchases under the right terms and circumstances. If you’ve ever applied for a loan, you know how nerve wracking it could be or maybe even frustrating. In the past, the manual verification process of lenders to check transaction history, credit scores, and other factors could take many hours, if not days, to get your approval. AI-based credit decision systems today can analyze consumer transaction data and determine eligibility for the loan in the matter of minutes.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MZ5I0Lne--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2aw5zk6rdl5103cr5iz.jpg" alt="Image description" width="525" height="525"&gt;&lt;em&gt;Can I get an AI-men! (Source: Meme Generator)&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Furthermore, AI is reducing the potential for human error and bias in underwriting and loan origination. Bad underwriting was a huge factor in the ’08 recession. AI companies like &lt;a href="https://www.underwrite.ai/"&gt;underwrite.ai&lt;/a&gt; apply machine learning to radically outperform traditional scorecards in both consumer and small business lending while mitigating human errors.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#risk-management"&gt;
  &lt;/a&gt;
  Risk management
&lt;/h3&gt;

&lt;p&gt;It is common to have an &lt;a href="https://contingencies.org/the-case-for-the-bank-actuarywhat-is-current-expected-credit-loss-and-how-can-our-profession-help-shine-a-light-on-this-new-and-uncertain-terrain/"&gt;actuary&lt;/a&gt; at a bank to handle risk management. In other words, determine how to calculate insurance prices and premiums. The occupation generalizes a person’s history, behavior, and other personal private information to forecast the likelihood of what will happen to them in the future.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X4VpMo8n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wy31rvekio4p3ucuyh8e.jpg" alt="Image description" width="410" height="398"&gt;&lt;em&gt;In your future, I see… AI&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Similarly, AI can do risk management too. Companies can employ neutral networks to explore an infinite realm of possibilities, given the client’s personal private information.&lt;/p&gt;

&lt;p&gt;Conversely, actuaries can use their knowledge to train regression models that make predictions, focusing on forecasting.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#customer-service"&gt;
  &lt;/a&gt;
  Customer Service
&lt;/h3&gt;

&lt;p&gt;No one enjoys calling the bank to dispute a claim or a credit hold, but everyone has to do it eventually. Have you ever sat down listening to a phone tree? It ruins the customer experience, and is dreadfully slow and emotionally taxing.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BHATgAON--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7m2gz0h50jybqh1ol5a.gif" alt="Image description" width="480" height="480"&gt;&lt;em&gt;We’ve all been there 😔 (Source: Giphy)&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Banks have multiple legal steps to get consent before processing. This is where AI can shine in banking. Using an AI chatbot to replace a phone tree helps connect customers to their goals faster by recommending relevant questions, answers, and documents.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kBhFJw0f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hhf7c9skj1daga9lkzvz.png" alt="Image description" width="420" height="97"&gt;&lt;em&gt;Now that’s a 5/5 experience&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#case-studies"&gt;
  &lt;/a&gt;
  Case studies
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#does-technology-help-or-hurt-morale"&gt;
  &lt;/a&gt;
  Does Technology Help or Hurt Morale?
&lt;/h3&gt;

&lt;p&gt;The Harvard Business Review tried to tackle this &lt;a href="https://hbr.org/2021/07/case-study-will-a-banks-new-technology-help-or-hurt-morale"&gt;question&lt;/a&gt; about banks switching to AI. The results were as they assumed, “no one had time to learn a complicated new system. Some people refused to attend the training. Others brought their laptops to class and worked the entire time.”&lt;/p&gt;

&lt;p&gt;Learning a new technology is challenging and can hurt morale, especially if they’re not used to the training topics and have multiple learning spikes. It’s important to develop AI tools that are designed for end users to enjoy, with an onboarding process that builds on the basic foundations of what they currently do. The ideal onboarding process should have employees excited about learning and improving the existing customer service experience.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cpoxjmsz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uom1oyo2cvgkb7z877kn.gif" alt="Image description" width="410" height="297"&gt;&lt;em&gt;It’s as easy as ABC, 123. (Source: Giphy)&lt;/em&gt;
&lt;/center&gt;
&lt;h3&gt;
  &lt;a href="#shift-to-no-signature-purchasing"&gt;
  &lt;/a&gt;
  Shift to No Signature Purchasing
&lt;/h3&gt;

&lt;p&gt;Recently, banks made the &lt;a href="https://www.mybanktracker.com/credit-cards/faq/no-signature-credit-card-purchases-275769"&gt;decision&lt;/a&gt; to remove responsibility for signatures. No one reads them, or verifies them with the back of the card, and most customers scribble whatever they like. In the case study, the conclusion for this decision was because “security measures and fraud protection continue to improve making your signature unnecessary.” This is a huge benefit for AI by doing what it should be doing, removing mindless tasks that most don’t want to do, with often a low return on investment. Time spent having a human verify signatures is extra time for people to wait to get to their turn in the line.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WyorZU3E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/24gngloi100h7mvnsezw.gif" alt="Image description" width="410" height="220"&gt;&lt;em&gt;Almost there… (Source: Giphy)&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Whether you currently work for a financial institution or simply keep your money in one, you know that technology has made the experience on both sides so much better. AI has already made a big impact (customer service, fraud prevention, risk management, automation, etc.) in banking and will have a greater presence in the industry in the near future.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gfj-W3Wf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5whtiuazw62bnhn94kjb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gfj-W3Wf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5whtiuazw62bnhn94kjb.jpg" alt="Image description" width="574" height="574"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Are you wanting to get started with AI but not sure where to start? &lt;a href="//mailto:hello@mage.ai"&gt;Contact us&lt;/a&gt; to see if Mage is a good fit for you.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Co-written by Nathaniel Tjandra and Thomas Chung&lt;/em&gt;&lt;/p&gt;

</description>
      <category>banking</category>
      <category>financialservices</category>
      <category>ai</category>
      <category>finance</category>
    </item>
  </channel>
</rss>
