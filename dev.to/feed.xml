<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Things to know about Event-Driven Architecture </title>
      <author>hridyesh bisht</author>
      <pubDate>Mon, 13 Sep 2021 04:39:40 +0000</pubDate>
      <link>https://dev.to/aws-builders/things-to-know-about-event-driven-architecture-3kk9</link>
      <guid>https://dev.to/aws-builders/things-to-know-about-event-driven-architecture-3kk9</guid>
      <description>&lt;p&gt;Event-driven architecture provides developers with increased availability, elasticity, scalability, and cost optimization. With the rise of microservices and the cloud, event-driven architecture is becoming increasingly important for developers to understand.&lt;/p&gt;

&lt;p&gt;This blog explains what serverless architecture is, when it should be used, and how to use AWS serverless services like API Gateway, Lambda, SQS, SNS, and SES.&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;&lt;em&gt;Q.What do you mean by Serverless?&lt;/em&gt;&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Deploying an application usually requires a server infrastructure. This means either a virtual or physical server needs to be managed, along with its os and prerequisites. Using a virtual server from a cloud provider such as Amazon does eliminate physical constraints, although it still requires some level of customization for the operating system and its software processes.&lt;/p&gt;

&lt;p&gt;The serverless architecture is a way to build and run applications and services without having to manage the infrastructure behind it.  &lt;strong&gt;With a serverless architecture, your application still runs on servers, of course, but the server management is done by AWS. So you focus purely on the individual functions in your application code. &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AWS defines its serverless services as “the native architecture of the cloud that enables you to shift more of your operational responsibilities to AWS, increasing your agility and innovation.”  The diagram below presents the serverless architecture you can deploy in minutes using the solution's implementation guide.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O-8YJllj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/d1.awsstatic.com/product-marketing/Serverless/diagram_serverless-computing_weather-app.216b17d18ea1b3ed6e6e24b2cd9b58264b52058d.png%3Fresize%3D1100%252C405%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O-8YJllj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/d1.awsstatic.com/product-marketing/Serverless/diagram_serverless-computing_weather-app.216b17d18ea1b3ed6e6e24b2cd9b58264b52058d.png%3Fresize%3D1100%252C405%26ssl%3D1" alt=""&gt;&lt;/a&gt;Credits: &lt;a href="https://i1.wp.com/d1.awsstatic.com/product-marketing/Serverless/diagram_serverless-computing_weather-app.216b17d18ea1b3ed6e6e24b2cd9b58264b52058d.png?resize=1100%2C405&amp;amp;ssl=1"&gt;https://i1.wp.com/d1.awsstatic.com/product-marketing/Serverless/diagram_serverless-computing_weather-app.216b17d18ea1b3ed6e6e24b2cd9b58264b52058d.png?resize=1100%2C405&amp;amp;amp;ssl=1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is also known as Function-as-a-Service (FaaS) is a serverless way to execute modular pieces of code, which can be executed in response to an event, such as a user clicking on an element in an application. This makes it easy to develop and deploy microservices with ease. &lt;/p&gt;

&lt;p&gt;As each function can be scaled automatically which is a very cost-effective way of paying for computing resources. You only pay for the times that your functions get called, rather than paying to have your application always on and waiting for requests on so many different instances.&lt;/p&gt;

&lt;h4&gt;
&lt;strong&gt;&lt;em&gt;Q.When and why should you consider serverless&lt;/em&gt;&lt;/strong&gt; ?&lt;/h4&gt;

&lt;p&gt;You should consider using a serverless provider if you have a small number of functions that you need to be deployed. It may make more sense to migrate small pieces of the application into serverless functions over time, as migrating an entire application might be very complex with system architecture.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Cost-effective, a cost is based on the CPU Usage time.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Simplified scalability&lt;/strong&gt;, as the  vendor handles all of the scaling on demand.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Event driven,&lt;/strong&gt; so no need for a complicated deploy process to roll out bug fixes and new features, developers can add and modify code for particular events.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u6wmcWq_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hexaware.com/wp-content/uploads/2020/04/characteristics-of-Serverless-Computing.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u6wmcWq_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hexaware.com/wp-content/uploads/2020/04/characteristics-of-Serverless-Computing.png" alt=""&gt;&lt;/a&gt;Credits: &lt;a href="https://hexaware.com/wp-content/uploads/2020/04/characteristics-of-Serverless-Computing.png"&gt;https://hexaware.com/wp-content/uploads/2020/04/characteristics-of-Serverless-Computing.png&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
&lt;strong&gt;&lt;em&gt;A Few of AWS Serverless services&lt;/em&gt;&lt;/strong&gt;:&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;A.Amazon API Gateway: &lt;/em&gt;&lt;/strong&gt;The AWS API Gateway is a managed service for building, deploying, and scaling various types of APIs. An API Gateway can remove some overhead in managing multiple APIs by monitoring, logging, throttling, caching, and other infrastructural requirements.&lt;/p&gt;

&lt;p&gt;With a few clicks in the AWS Management Console, you can create REST and Web Socket APIs that act as a front door for your applications to access data, business logic, or other AWS services from your back-end services. Some of its other benefits are,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You can run multiple versions of the same API simultaneously with API Gateway. &lt;/li&gt;
&lt;li&gt;You can monitor performance of metrics and information - on API calls, data latency, error rates - from the API Gateway dashboard.&lt;/li&gt;
&lt;li&gt;You can decrease your costs based on the number of API requests you make, per Region, across your AWS accounts. &lt;/li&gt;
&lt;li&gt;You can authorize access to your APIs with AWS Identity and Access Management, or IAM, as well as Amazon Cognito.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GKX5Dzdz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.aws.amazon.com/whitepapers/latest/microservices-on-aws/images/image3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GKX5Dzdz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.aws.amazon.com/whitepapers/latest/microservices-on-aws/images/image3.png" alt=""&gt;&lt;/a&gt;Credits: &lt;a href="https://docs.aws.amazon.com/whitepapers/latest/microservices-on-aws/images/image3.png"&gt;https://docs.aws.amazon.com/whitepapers/latest/microservices-on-aws/images/image3.png&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For more information regarding the implementation of Amazon API Gateway.&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;&lt;a rel="noreferrer noopener" href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-create-api-from-example.html"&gt;https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-create-api-from-example.html&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;B.AWS Lambda:&lt;/strong&gt; AWS Lambda is a serverless compute service that has been designed to allow you to run your application code without having to manage and provision your own EC2 instances. This saves you from having to maintain and administer an additional layer of technical responsibility within your solution. Instead, that responsibility is passed over to AWS to manage for you.&lt;/p&gt;

&lt;p&gt;Just upload your code, and Lambda takes care of everything required to run and scale your code with high availability and cost-effectiveness as, you pay only for the requests served and the compute time required to run your code for each of those requests.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uvJmgnMM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2019/06/27/Screen-Shot-2019-06-27-at-2.23.51-PM-1024x510.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uvJmgnMM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2019/06/27/Screen-Shot-2019-06-27-at-2.23.51-PM-1024x510.png" alt=""&gt;&lt;/a&gt;Credits: &lt;a href="https://aws.amazon.com/blogs/architecture/understanding-the-different-ways-to-invoke-lambda-functions/"&gt;https://aws.amazon.com/blogs/architecture/understanding-the-different-ways-to-invoke-lambda-functions/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A Lambda function on its own doesn't do much. It needs to be executed. We call that triggers. There are many AWS services that can trigger a Lambda function. When your Lambda function gets executed, Lambda needs to know what piece of your code it needs to execute. That is the entry point for your code(handler). This tells Lambda in which file or class the function to execute is, as well as its name. &lt;/p&gt;

&lt;p&gt;Lambda will use that handler to execute your Lambda from the trigger is received, but your code probably needs to receive some more information about what just triggered it. That information is passed to the handler via what we call an "event payload." &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;C.Simple Queue Service (SQS)&lt;/em&gt;&lt;/strong&gt; is a fully managed service offered by AWS that works with serverless systems, or any distributed architecture.&lt;/p&gt;

&lt;p&gt;It's simply a queueing service for messages between components, It has the capability of sending, storing, and receiving these messages at scale. It is also possible to configure the service using the AWS Management Console, the AWS CLI, or using the AWS SDKs. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The producer component of your architecture is responsible for sending messages to your queue. &lt;/li&gt;
&lt;li&gt;The SQS service stores the message across a number of SQS servers for resiliency within the specified queue. &lt;/li&gt;
&lt;li&gt;Consumers are responsible for processing the messages within your queue.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nicEQOyp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://knowledgehills.com/images/aws/AWS-SQS-Flow.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nicEQOyp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://knowledgehills.com/images/aws/AWS-SQS-Flow.jpg" alt=""&gt;&lt;/a&gt;Credits: &lt;a href="https://knowledgehills.com/images/aws/AWS-SQS-Flow.jpg"&gt;https://knowledgehills.com/images/aws/AWS-SQS-Flow.jpg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When the consumer element of your architecture is ready to process the message from the queue, the message is retrieved and is then marked as being processed by activating the visibility timeout on the message. &lt;strong&gt;This timeout ensures that the same message will not be read and processed by another consumer. When the message has been processed, the consumer then deletes the message from the queue. &lt;/strong&gt;During this period, the consumer processes the message. If it fails to process a message, perhaps due to a communication error, the consumer will not send a delete message request back to SQS. As a result, if the visibility timeout expires and it doesn't receive the request to delete the message, the message will become available again in the queue for other consumers to process.  There are two queues which can be used,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Standard queues, you have unlimited throughput, at-least-once delivery, and best-effort ordering. &lt;/li&gt;
&lt;li&gt;First-in, first-out queues, you have high throughput, first-in, first-out delivery, and exactly-once processing.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A dead-letter queue differs from the standard and FIFA queues as this dead-letter queue is not used as a source queue to hold messages submitted by producers.&lt;strong&gt; Instead, the dead-letter queue is used by the source queue to send messages that fail to process for one reason or another. &lt;/strong&gt;A dead-letter queue must be configured as the same queue type as the source is used against.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;D. Simple Notification Service  (SNS)&lt;/em&gt;&lt;/strong&gt; is used as a publishing and subscribe messaging service. It is centered around topics (group for collecting messages). &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Users over endpoints can then subscribe to this topic and messages or events are then published to that particular topic. &lt;/li&gt;
&lt;li&gt;When a message is published, all subscribers to that topic receive a notification of that message. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;SNS is a managed service and highly scalable, allowing you to distribute messages automatically to all subscribers across your environment, including mobile devices. It can be configured with the AWS management console, the CLI, or the AWS SDK. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gGsXQZMg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2017/11/20/introducing_sns_message_filtering_image_4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gGsXQZMg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2017/11/20/introducing_sns_message_filtering_image_4.png" alt=""&gt;&lt;/a&gt;Credits: &lt;a href="https://aws.amazon.com/blogs/compute/simplify-pubsub-messaging-with-amazon-sns-message-filtering/"&gt;https://aws.amazon.com/blogs/compute/simplify-pubsub-messaging-with-amazon-sns-message-filtering/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SNS uses the concept of publishers and subscribers, similar to SQS. &lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The producers, or publishers, send messages to a topic, which is used as a central communication control point.&lt;/li&gt;
&lt;li&gt;The consumers, or subscribers of the topic, are then notified of this message by HTTP, HTTPS, Email, Email-JSON, etc ... . &lt;/li&gt;
&lt;li&gt;SNS offers methods of controlling specific access to your topics through a topic policy. The policy themselves follow the same format as IAM policies.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;By integrating SNS and SQS with each other, together, a solution can be designed to send messages to subscribers through a push method.  To do this, you'll need to have your SQS queue subscribed to the SNS topic. &lt;/strong&gt; Integration with  AWS Lambda allows SNS notifications to invoke existing Lambda functions. Like SQS, the Lambda function has to be subscribed to the topic. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;For more information on SNS,&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/blogs/mobile/invoking-aws-lambda-functions-via-amazon-sns/" rel="noreferrer noopener"&gt;https://aws.amazon.com/blogs/mobile/invoking-aws-lambda-functions-via-amazon-sns/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/blogs/compute/simplify-pubsub-messaging-with-amazon-sns-message-filtering/" rel="noreferrer noopener"&gt;https://aws.amazon.com/blogs/compute/simplify-pubsub-messaging-with-amazon-sns-message-filtering/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;E. Simple Email Service (SES)&lt;/em&gt;&lt;/strong&gt; makes it possible to handle an automated email system to communicate with your customers. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When receiving emails, you can architect your application to respond automatically to incoming emails, such as a request to unsubscribe from newsletter.&lt;/li&gt;
&lt;li&gt;When sending emails, you can architect your application to emails automatically for an event, such as email confirmation. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;AWS will automatically scan for spam and viruses, and reject any messages from untrusted sources. When receiving an email, there are two ways to configure SES to instruct it as to what to do with the email. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Recipient-based control, you set up configurations to direct the email based on the recipient. These recipient lists are classed as conditions. Receipt rules are used to control what action is taken when a condition is met. &lt;/li&gt;
&lt;li&gt;IP address-based control defines what happens to your email based on its source IP address. This method allows you to select if email should be accepted or rejected based on its originating IP address. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r5ctru9h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/632667547e7cd3e0466547863e1207a8c0c0c549/2020/11/18/blogses_diagram.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r5ctru9h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/632667547e7cd3e0466547863e1207a8c0c0c549/2020/11/18/blogses_diagram.jpg" alt=""&gt;&lt;/a&gt;Credits: &lt;a href="https://aws.amazon.com/blogs/messaging-and-targeting/auto-reply-to-incoming-emails-using-amazon-simple-email-service-ses/"&gt;https://aws.amazon.com/blogs/messaging-and-targeting/auto-reply-to-incoming-emails-using-amazon-simple-email-service-ses/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For more information on event-driven architecture,&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;&lt;strong&gt;&lt;a rel="noreferrer noopener" href="https://aws.amazon.com/event-driven-architecture/"&gt;https://aws.amazon.com/event-driven-architecture/&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Python 🤫 Hidden Syntax 🤫, You'll be using always from now 😝</title>
      <author>Rajesh Joshi</author>
      <pubDate>Mon, 13 Sep 2021 02:35:25 +0000</pubDate>
      <link>https://dev.to/rajeshj3/python-hidden-syntax-you-ll-be-using-always-from-now-3lfe</link>
      <guid>https://dev.to/rajeshj3/python-hidden-syntax-you-ll-be-using-always-from-now-3lfe</guid>
      <description>&lt;h2&gt;
  &lt;a href="#ellipsis"&gt;
  &lt;/a&gt;
  Ellipsis
&lt;/h2&gt;

&lt;p&gt;Use ... (Ellipsis), an alternative to &lt;code&gt;pass&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#single-line-return"&gt;
  &lt;/a&gt;
  single line return
&lt;/h2&gt;

&lt;p&gt;For single line utility functions use, single line return statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Welcome!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#document-your-functions"&gt;
  &lt;/a&gt;
  Document Your Functions
&lt;/h2&gt;

&lt;p&gt;To get proper documented Classes or functions with auto-completion define types of parameters and return types&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;rectangle_area&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;area&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;area&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZjI5xyK_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h7999vuuuvg3a0n2hyf7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZjI5xyK_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h7999vuuuvg3a0n2hyf7.png" alt="Python 🤫 Hidden Syntax 🤫, You'll be using always from now 😝"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#clever-use-of-raw-type-endraw-method"&gt;
  &lt;/a&gt;
  Clever use of &lt;code&gt;type()&lt;/code&gt; method
&lt;/h2&gt;

&lt;p&gt;Call type function to know default value of any datatype.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;)()&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)()&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, Use for type checking&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Apple'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'3'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks and Cheers&lt;br&gt;
RajeshJ3&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>EKS Anywhere: The What, The Why and The How</title>
      <author>Abhay Krishna Arunachalam</author>
      <pubDate>Mon, 13 Sep 2021 02:00:44 +0000</pubDate>
      <link>https://dev.to/abhaykrishna/eks-anywhere-the-what-the-why-and-the-how-1h67</link>
      <guid>https://dev.to/abhaykrishna/eks-anywhere-the-what-the-why-and-the-how-1h67</guid>
      <description>&lt;p&gt;AWS recently made the headlines with the launch of Amazon EKS Anywhere, a new and much-awaited deployment option for Amazon Elastic Kubernetes Service (EKS). But what is it and how can you benefit from it? Read on to find out!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-what"&gt;
  &lt;/a&gt;
  The What
&lt;/h1&gt;

&lt;p&gt;Amazon EKS Anywhere is an open-source offering through which customers can host and operate secure, reliable Kubernetes clusters on-premises. It allows you to stay completely off AWS infrastructure (why, you don't even need an AWS account to get started) while offering a cluster management experience on par with EKS. &lt;/p&gt;

&lt;p&gt;EKS Anywhere builds on the strengths of &lt;a href="https://github.com/aws/eks-distro"&gt;Amazon EKS Distro&lt;/a&gt;, the same open-source distribution of Kubernetes that is used by Amazon EKS on the cloud, thus fostering consistency and compatibility between clusters both on AWS as well as on-premises.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-why"&gt;
  &lt;/a&gt;
  The Why
&lt;/h1&gt;

&lt;p&gt;This section covers the motivation for using EKS Anywhere. &lt;/p&gt;

&lt;p&gt;To understand better how EKS Anywhere may be more suited to customer needs, we will first need to understand the high-level architecture of EKS clusters. An Amazon EKS cluster consists of two primary components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The Amazon EKS control plane, consisting of nodes running components such as the Kubernetes API Server, Controller Manager, Scheduler, &lt;code&gt;etcd&lt;/code&gt;, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Worker nodes that are registered with the control plane and run customer workloads.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The control plane is provisioned on AWS infrastructure in an account managed by EKS, while the worker nodes run in customer accounts, thus providing a managed Kubernetes experience on AWS.&lt;/p&gt;

&lt;p&gt;However, some customers may have applications that need to run on-premises due to regulatory, latency, and data residency requirements as well as requirements to leverage existing infrastructure investments. With EKS Anywhere, both control plane and application workloads run on the customer infrastructure, thus providing complete flexibility to the cluster administrator. Also, customers can make use of the &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/eks-connector.html"&gt;EKS Connector*&lt;/a&gt; to connect EKS Anywhere clusters running on their infrastructure to the EKS console, for a centralized view of their on-premises clusters and workloads along with EKS clusters.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;*In public preview&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-how"&gt;
  &lt;/a&gt;
  The How
&lt;/h1&gt;

&lt;p&gt;EKS Anywhere currently supports customer-managed vSphere infrastructure provider as the production-grade deployment environment for Kubernetes clusters, with bare-metal support coming in 2022. For local development and testing, it also supports the Docker provider, wherein the control plane and worker nodes are provisioned as Docker containers. The Docker provider is not intended to be used in production environments.&lt;/p&gt;

&lt;p&gt;In this section, I shall demonstrate a step-by-step walkthrough of creating an EKS Anywhere cluster with the Docker provider. Fasten your seatbelts for an &lt;em&gt;EKS&lt;/em&gt;-iting adventure!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;At its core, EKS Anywhere provides an installable CLI &lt;code&gt;eksctl-anywhere&lt;/code&gt; that allows users to create a fully-functional Kubernetes cluster in a matter of minutes. The CLI is provided as an extension to &lt;code&gt;eksctl&lt;/code&gt;, a command-line tool for creating clusters on Amazon EKS. These two binaries and a running Docker environment are all you need to create an EKS Anywhere cluster.&lt;/p&gt;

&lt;p&gt;You can install both &lt;code&gt;eksctl&lt;/code&gt; and &lt;code&gt;eksctl-anywhere&lt;/code&gt; directly using Homebrew on MacOS and Linux. In addition, it is a good idea to install &lt;code&gt;kubectl&lt;/code&gt; for interacting with your cluster post-creation&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew &lt;span class="nb"&gt;install &lt;/span&gt;aws/tap/eks-anywhere
brew &lt;span class="nb"&gt;install &lt;/span&gt;kubectl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#cluster-creation"&gt;
  &lt;/a&gt;
  Cluster creation
&lt;/h2&gt;

&lt;p&gt;The first step in creating an EKS Anywhere cluster is to generate a cluster config for the desired infrastructure provider. This is a manifest containing the cluster spec that allows you to declaratively manage your EKS Anywhere cluster. Before we proceed, let us give our cluster a suitable name that will be used as a reference for all future operations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;CLUSTER_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;eks-anywhere-test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The following command generates the cluster config for the Docker provider, with default replica counts, networking and external &lt;code&gt;etcd&lt;/code&gt; configurations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;eksctl anywhere generate clusterconfig &lt;span class="nv"&gt;$CLUSTER_NAME&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; docker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running the above command will generate the following output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: anywhere.eks.amazonaws.com/v1alpha1
kind: Cluster
metadata:
  name: eks-anywhere-test
spec:
  clusterNetwork:
    cni: cilium
    pods:
      cidrBlocks:
      - 192.168.0.0/16
    services:
      cidrBlocks:
      - 10.96.0.0/12
  controlPlaneConfiguration:
    count: 1
  datacenterRef:
    kind: DockerDatacenterConfig
    name: eks-anywhere-test
  externalEtcdConfiguration:
    count: 1
  kubernetesVersion: "1.21"
  workerNodeGroupConfigurations:
  - count: 1

---
apiVersion: anywhere.eks.amazonaws.com/v1alpha1
kind: DockerDatacenterConfig
metadata:
  name: eks-anywhere-test
spec: {}

---
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If desired, you may modify the spec as per your requirements. EKS Anywhere supports both stacked and unstacked &lt;code&gt;etcd&lt;/code&gt; topologies, with the latter being the default. If you prefer to use stacked &lt;code&gt;etcd&lt;/code&gt;, you can remove the &lt;code&gt;externalEtcdConfiguration&lt;/code&gt; section from the spec.&lt;/p&gt;

&lt;p&gt;For the purpose of this tutorial, we shall use the default values generated by the command. In order to use the config for cluster operations, the cluster config must be stored in a file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;eksctl anywhere generate clusterconfig &lt;span class="nv"&gt;$CLUSTER_NAME&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; docker &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$CLUSTER_NAME&lt;/span&gt;.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now for the fun part - actually creating the cluster!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;eksctl anywhere create cluster &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="nv"&gt;$CLUSTER_NAME&lt;/span&gt;.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above command will kick-start the cluster creation and update the progress on each step in the creation workflow. A detailed explanation of the workflow is provided &lt;a href="https://anywhere.eks.amazonaws.com/docs/concepts/clusterworkflow/"&gt;here&lt;/a&gt;. Optionally, you can set an appropriate verbosity level (0 through 9) using the &lt;code&gt;-v&lt;/code&gt; flag for more verbose logging and for a deeper understanding of what is going on behind the scenes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Performing setup and validations
✅ Docker Provider setup is valid
Creating new bootstrap cluster
Installing cluster-api providers on bootstrap cluster
Provider specific setup
Creating new workload cluster
Installing networking on workload cluster
Installing storage class on workload cluster
Installing cluster-api providers on workload cluster
Moving cluster management from bootstrap to workload cluster
Installing EKS-A custom components &lt;span class="o"&gt;(&lt;/span&gt;CRD and controller&lt;span class="o"&gt;)&lt;/span&gt; on workload cluster
Creating EKS-A CRDs instances on workload cluster
Installing AddonManager and GitOps Toolkit on workload cluster
GitOps field not specified, bootstrap flux skipped
Writing cluster config file
Deleting bootstrap cluster
🎉 Cluster created!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Woot, we have created our first EKS Anywhere cluster! The whole process should take around 8-15 minutes or so.&lt;/p&gt;

&lt;p&gt;The CLI creates a folder with the same name as the cluster and places a kubeconfig file with Admin privileges inside this folder. This kubeconfig file can be used to interact with our EKS Anywhere cluster.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;KUBECONFIG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PWD&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CLUSTER_NAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CLUSTER_NAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;-eks-a-cluster&lt;/span&gt;.kubeconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let us look at the pods to verify that they are all running.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get pods &lt;span class="nt"&gt;-A&lt;/span&gt;
NAMESPACE                           NAME                                                             READY   STATUS    RESTARTS   AGE
capd-system                         capd-controller-manager-659dd5f8bc-wj4hl                         2/2     Running   0          1m
capi-kubeadm-bootstrap-system       capi-kubeadm-bootstrap-controller-manager-69889cb844-m87x8       2/2     Running   0          1m
capi-kubeadm-control-plane-system   capi-kubeadm-control-plane-controller-manager-6ddc66fb75-hz4hm   2/2     Running   0          1m
capi-system                         capi-controller-manager-db59f5789-sjnv5                          2/2     Running   0          1m
capi-webhook-system                 capi-controller-manager-64b8c548db-kwntg                         2/2     Running   0          1m
capi-webhook-system                 capi-kubeadm-bootstrap-controller-manager-68b8cc9759-7zczt       2/2     Running   0          1m
capi-webhook-system                 capi-kubeadm-control-plane-controller-manager-7dc88f767d-p7bbk   2/2     Running   0          1m
cert-manager                        cert-manager-5f6b885b4-8l5f9                                     1/1     Running   0          2m
cert-manager                        cert-manager-cainjector-bb6d9bcb5-jr7x2                          1/1     Running   0          2m
cert-manager                        cert-manager-webhook-56cbc8f5b8-47wmg                            1/1     Running   0          2m
eksa-system                         eksa-controller-manager-6769764b45-gw6sp                         2/2     Running   0          1m
etcdadm-bootstrap-provider-system   etcdadm-bootstrap-provider-controller-manager-54476b7bf9-8fr2k   2/2     Running   0          1m
etcdadm-controller-system           etcdadm-controller-controller-manager-d5795556-d9cmz             2/2     Running   0          1m
kube-system                         cilium-operator-6bf46cc6c6-j5c8v                                 1/1     Running   0          2m
kube-system                         cilium-operator-6bf46cc6c6-vsf79                                 1/1     Running   0          2m
kube-system                         cilium-q4gg6                                                     1/1     Running   0          2m
kube-system                         cilium-xgffq                                                     1/1     Running   0          2m
kube-system                         coredns-7c68f85774-4kvcb                                         1/1     Running   0          2m
kube-system                         coredns-7c68f85774-9z9kn                                         1/1     Running   0          2m
kube-system                         kube-apiserver-eks-anywhere-test-29qnl                           1/1     Running   0          2m
kube-system                         kube-controller-manager-eks-anywhere-test-29qnl                  1/1     Running   0          2m
kube-system                         kube-proxy-2fx4g                                                 1/1     Running   0          2m
kube-system                         kube-proxy-r4cc8                                                 1/1     Running   0          2m
kube-system                         kube-scheduler-eks-anywhere-test-29qnl                           1/1     Running   0          2m

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the following command, we can fetch the container images running on our pods, and verify that the control plane images, i.e., API server, Controller Manager, etc are all vended by EKS Distro.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl get pods &lt;span class="nt"&gt;-A&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; yaml | yq e &lt;span class="s1"&gt;'.items[] | .spec.containers[] | .image'&lt;/span&gt; - | &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="nt"&gt;-ur&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;public.ecr.aws/eks-anywhere/brancz/kube-rbac-proxy:v0.8.0-eks-a-1
public.ecr.aws/eks-anywhere/cluster-controller:v0.5.0-eks-a-1
public.ecr.aws/eks-anywhere/jetstack/cert-manager-cainjector:v1.1.0-eks-a-1
public.ecr.aws/eks-anywhere/jetstack/cert-manager-controller:v1.1.0-eks-a-1
public.ecr.aws/eks-anywhere/jetstack/cert-manager-webhook:v1.1.0-eks-a-1
public.ecr.aws/eks-anywhere/kubernetes-sigs/cluster-api/capd-manager:v0.3.23-eks-a-1
public.ecr.aws/eks-anywhere/kubernetes-sigs/cluster-api/cluster-api-controller:v0.3.23-eks-a-1
public.ecr.aws/eks-anywhere/kubernetes-sigs/cluster-api/kubeadm-bootstrap-controller:v0.3.23-eks-a-1
public.ecr.aws/eks-anywhere/kubernetes-sigs/cluster-api/kubeadm-control-plane-controller:v0.3.23-eks-a-1
public.ecr.aws/eks-anywhere/mrajashree/etcdadm-bootstrap-provider:v0.1.0-beta-4.1-eks-a-1
public.ecr.aws/eks-anywhere/mrajashree/etcdadm-controller:v0.1.0-beta-4.1-eks-a-1
public.ecr.aws/eks-distro/coredns/coredns:v1.8.3-eks-1-21-4
public.ecr.aws/eks-distro/kubernetes/kube-apiserver:v1.21.2-eks-1-21-4
public.ecr.aws/eks-distro/kubernetes/kube-controller-manager:v1.21.2-eks-1-21-4
public.ecr.aws/eks-distro/kubernetes/kube-proxy:v1.21.2-eks-1-21-4
public.ecr.aws/eks-distro/kubernetes/kube-scheduler:v1.21.2-eks-1-21-4
public.ecr.aws/isovalent/cilium:v1.9.10-eksa.1
public.ecr.aws/isovalent/operator-generic:v1.9.10-eksa.1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Upon retrieving the nodes, we can see that our cluster has one control plane ("master") node and one worker node as specified in our manifest.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get nodes
NAME                                      STATUS   ROLES                  AGE   VERSION
eks-anywhere-test-29qnl                   Ready    control-plane,master   4m   v1.21.2-eks-1-21-4
eks-anywhere-test-md-0-7796db4bdd-4wmd5   Ready    &amp;lt;none&amp;gt;                 3m   v1.21.2-eks-1-21-4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To log onto a node, we can simply run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="nt"&gt;-it&lt;/span&gt; &amp;lt;node name&amp;gt; bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h2&gt;

&lt;p&gt;Let us test our EKS Anywhere cluster by deploying a simple Nginx service.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;apiVersion: apps/v1
kind: Deployment
metadata:
  name: eks-anywhere-nginx-test
spec:
  selector:
    matchLabels:
      app: nginx
  replicas: 3
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: public.ecr.aws/nginx/nginx:latest
        ports:
        - containerPort: 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can create the Nginx workload using the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; eks-anywhere-nginx-test.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will provision 3 pods for our application in the &lt;code&gt;default&lt;/code&gt; namespace.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;```NAME                                       READY   STATUS    RESTARTS   AGE&lt;br&gt;
eks-anywhere-nginx-test-7676d696c8-c5ths   1/1     Running   0          1m&lt;br&gt;
eks-anywhere-nginx-test-7676d696c8-c76lf   1/1     Running   0          1m&lt;br&gt;
eks-anywhere-nginx-test-7676d696c8-m25r5   1/1     Running   0          1m&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;

To test our application, we can use the following command to forward the deployment port to our host machine port 80.


```shell
$ kubectl port-forward deploy/eks-anywhere-nginx-test 8080:80
Forwarding from 127.0.0.1:8080 -&amp;gt; 80
Forwarding from [::1]:8080 -&amp;gt; 80
Handling connection for 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then, when we navigate to &lt;code&gt;localhost:8080&lt;/code&gt; on the browser, we are greeted by the Nginx welcome page.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rFX7YEOf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3mixbk8eszp0i9smzmyo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rFX7YEOf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3mixbk8eszp0i9smzmyo.png" alt="Nginx welcome page"&gt;&lt;/a&gt;&lt;br&gt;
Alternatively, we can fetch the contents of the site using &lt;code&gt;curl&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl localhost:8080
&amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;&lt;span class="nb"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&amp;lt;title&amp;gt;Welcome to nginx!&amp;lt;/title&amp;gt;
&amp;lt;style&amp;gt;
html &lt;span class="o"&gt;{&lt;/span&gt; color-scheme: light dark&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
body &lt;span class="o"&gt;{&lt;/span&gt; width: 35em&lt;span class="p"&gt;;&lt;/span&gt; margin: 0 auto&lt;span class="p"&gt;;&lt;/span&gt;
font-family: Tahoma, Verdana, Arial, sans-serif&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Welcome to nginx!&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;For online documentation and support please refer to
&amp;lt;a &lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"http://nginx.org/"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;nginx.org&amp;lt;/a&amp;gt;.&amp;lt;br/&amp;gt;
Commercial support is available at
&amp;lt;a &lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"http://nginx.com/"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;nginx.com&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;em&amp;gt;Thank you &lt;span class="k"&gt;for &lt;/span&gt;using nginx.&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thus, we have successfully created and tested our EKS Anywhere cluster. If you wish to go one step further, you can deploy the deploy the Kubernetes Dashboard UI for your cluster using the intstructions &lt;a href="https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cluster-deletion"&gt;
  &lt;/a&gt;
  Cluster deletion
&lt;/h2&gt;

&lt;p&gt;After testing, the cluster can be deleted using the command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;eksctl anywhere delete cluster &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="nv"&gt;$CLUSTER_NAME&lt;/span&gt;.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That brings us to the end of this walkthrough. Thank you very much for reading and I hope you will give EKS Anywhere a spin. The complete documentation is available &lt;a href="https://anywhere.eks.amazonaws.com/"&gt;here&lt;/a&gt;. If you are interested in contributing, please open an issue or pull request on the &lt;a href="https://github.com/aws/eks-anywhere"&gt;EKS Anywhere GitHub repo&lt;/a&gt;. Let me know your thoughts in the comments below. If you have more questions, feel free to reach out to me on &lt;a href="https://www.linkedin.com/in/abhayk96/"&gt;LinkedIn&lt;/a&gt; or &lt;a href="https://twitter.com/abhay_krishna96"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>showdev</category>
      <category>aws</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Using Generators in Python: The Why, The What, and The When</title>
      <author>Jerry Ng</author>
      <pubDate>Mon, 13 Sep 2021 00:43:52 +0000</pubDate>
      <link>https://dev.to/jerrynsh/using-generators-in-python-the-why-the-what-and-the-when-55l</link>
      <guid>https://dev.to/jerrynsh/using-generators-in-python-the-why-the-what-and-the-when-55l</guid>
      <description>&lt;p&gt;Today, “what are Generators in Python” and “what are Generators used for in Python” are some of the most popular Python interview questions.&lt;/p&gt;

&lt;p&gt;Often, &lt;a href="https://wiki.python.org/moin/Generators"&gt;Generator&lt;/a&gt; is considered as one of the more intermediate concepts in Python. If you are new to learning Python, you may not have come across Generator before. Here’s a tip, it has something to do with the use of &lt;code&gt;yield&lt;/code&gt; statements inside a function.&lt;/p&gt;

&lt;p&gt;In this post, I am going to highlight some of the use cases, reasons, and advantages of using Generators in Python. In short, you should consider using Generators when dealing with large datasets with memory constraints.&lt;/p&gt;

&lt;p&gt;Let’s dive a little bit deeper, shall we?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  Consider using Generator when dealing with a huge dataset&lt;/li&gt;
&lt;li&gt;  Consider using Generator in scenarios where we do not need to reiterate it more than once&lt;/li&gt;
&lt;li&gt;  Generators give us lazy evaluation&lt;/li&gt;
&lt;li&gt;  They are a great way to generate sequences in a memory-efficient manner&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#why-should-i-care-about-using-generators"&gt;
  &lt;/a&gt;
  Why Should I Care About Using Generators
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#memory-constraints"&gt;
  &lt;/a&gt;
  Memory constraints
&lt;/h3&gt;

&lt;p&gt;To understand why you should use Generators, we have to first understand that computers have a finite amount of memory (&lt;a href="https://en.wikipedia.org/wiki/Random-access_memory"&gt;RAM&lt;/a&gt;). Whenever we are storing or manipulating variables, lists, etc., all that is being stored inside our memory.&lt;/p&gt;

&lt;p&gt;You might ask, why do computer programs store them in memory? Because it’s the fastest way for us to write and retrieve data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scenarios"&gt;
  &lt;/a&gt;
  Scenarios
&lt;/h3&gt;

&lt;p&gt;Have you ever had to work with a list so large that you run into &lt;code&gt;MemoryError&lt;/code&gt;? Perhaps, you have tried reading rows from a super large Excel (or &lt;code&gt;.csv&lt;/code&gt;) file.&lt;/p&gt;

&lt;p&gt;All I remember was that performing these tasks is painfully slow or impossible.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-a-generator-function"&gt;
  &lt;/a&gt;
  What Is a Generator Function
&lt;/h2&gt;

&lt;p&gt;To put it simply, a Generator function is a special kind of function that returns many items. The point here is that the items are returned one by one rather than all at once.&lt;/p&gt;

&lt;p&gt;The main difference between a regular function and a Generator function lies in the use of &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;yield&lt;/code&gt; statements in Python.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generators-give-you-lazy-evaluation"&gt;
  &lt;/a&gt;
  Generators give you lazy evaluation
&lt;/h3&gt;

&lt;p&gt;You may have come across this statement. But, what does it really mean?&lt;/p&gt;

&lt;p&gt;If you are familiar with &lt;a href="https://www.w3schools.com/python/python_iterators.asp"&gt;Iterator&lt;/a&gt;, a Generator function is essentially a function that behaves just like that.&lt;/p&gt;

&lt;p&gt;Behind the scene, Generators don’t compute the value of each item when being instantiated. Rather, they compute it when we ask for it. This is what people mean by Generators give you lazy evaluation.&lt;/p&gt;

&lt;p&gt;As a result, Generators allow us to process and deal with one value at a time without having to load everything in memory first.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#when-and-where-should-i-use-generators"&gt;
  &lt;/a&gt;
  When and Where Should I Use Generators
&lt;/h2&gt;

&lt;p&gt;Generators are great when you encounter problems that require you to read from a large dataset. Reading from a large dataset means our computer or server would have to allocate memory for it.&lt;/p&gt;

&lt;p&gt;The only condition to remember is that a Generator can only be iterated &lt;strong&gt;once&lt;/strong&gt;. In other words, as long as we do not need the previous value from our dataset, we can always use Generator.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reading-sizable-csv"&gt;
  &lt;/a&gt;
  Reading sizable CSV
&lt;/h3&gt;

&lt;p&gt;Another common use case of using Generators is when we are working with large files such as Excel or CSV documents. Without using a Generator function, here’s how we can write it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Example of using a regular function
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_csv_from_regular_fn&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'large_dataset.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;result_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;read_csv_from_regular_fn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Output:
# [['a','b','c', ... ], ['x','y','z', ... ] ... ]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Upon running the example above, we may experience some slowness or even &lt;code&gt;MemoryError&lt;/code&gt; depending on our computers.&lt;/p&gt;

&lt;p&gt;Looking at the code example above, to generate the result, the &lt;code&gt;read_csv_from_regular_fn&lt;/code&gt; would open our CSV file and loads everything in memory in an instance.&lt;/p&gt;

&lt;p&gt;This is not a good solution when working with larger files than our available memory. Alternatively, we could do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Example of using a Generator function
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_csv_from_generator_fn&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'large_dataset.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;

&lt;span class="c1"&gt;# To get the same output as result_1,
# We generate a list using our newly created Generator function:
&lt;/span&gt;&lt;span class="n"&gt;result_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;read_csv_from_generator_fn&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;

&lt;span class="c1"&gt;# Output same as result_1:
# [['a','b','c', ... ], ['x','y','z', ... ] ... ]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this scenario, we use &lt;code&gt;read_csv_from_generator_fn&lt;/code&gt; as our Generator function. This new Generator opens our large CSV file, loops through every row, and yields each row at a time rather than all at once.&lt;/p&gt;

&lt;p&gt;Here, we would not run into any &lt;code&gt;MemoryError&lt;/code&gt; or even any slowness due to memory constraints when reading data from our &lt;code&gt;large_dataset.csv&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To check the memory usage in bytes, we could do the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read_csv_from_generator_fn&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt; &lt;span class="c1"&gt;# 112 bytes
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read_csv_from_regular_fn&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt; &lt;span class="c1"&gt;# 1624056 bytes
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#iterating-through-a-large-list-array"&gt;
  &lt;/a&gt;
  Iterating through a large list (array)
&lt;/h3&gt;

&lt;p&gt;Another example where Generators are often used is where we intend to process values from a large list:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Example 1
&lt;/span&gt;&lt;span class="n"&gt;nums_list_comprehension&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100_000_000&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums_list_comprehension&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 333333328333333350000000
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Depending on your computer, you may encounter &lt;code&gt;MemoryError&lt;/code&gt; or at least a couple of seconds of slowness when evaluating the expression above.&lt;/p&gt;

&lt;p&gt;Like &lt;a href="https://www.w3schools.com/python/python_lists_comprehension.asp"&gt;list comprehensions&lt;/a&gt;, the Generator expression allows us to quickly create a Generator object without having to use the &lt;code&gt;yield&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;To cope with our memory constraint, we could turn the code example above into a Generator expression. This line of code below evaluates almost immediately:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Example 2
&lt;/span&gt;&lt;span class="n"&gt;nums_generator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; \&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100_000_000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x106ecc580&amp;gt;
&lt;/span&gt;
&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums_generator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 333333328333333350000000
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Example 1, &lt;code&gt;i ** i&lt;/code&gt; for the entire range of &lt;code&gt;100_000_000&lt;/code&gt; is being evaluated and stored in memory beforehand. It returns a full list.&lt;/p&gt;

&lt;p&gt;In Example 2, &lt;code&gt;i ** i&lt;/code&gt; is only evaluated when being iterated, one at a time. It returns a Generator expression.&lt;/p&gt;

&lt;p&gt;Remember, Generators don’t compute the value of each item when being instantiated.&lt;/p&gt;

&lt;p&gt;The differences in memory usage are below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums_generator&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# 112 bytes
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums_list_comprehension&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# 835128600 bytes
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#when-not-to-use-generators"&gt;
  &lt;/a&gt;
  When NOT To Use Generators
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#we-need-the-previous-values"&gt;
  &lt;/a&gt;
  We need the previous values
&lt;/h3&gt;

&lt;p&gt;A Generator can only be iterated once.&lt;br&gt;
The example below shows that the Generator expression from nums_generator can only be iterated once. Using sum on it for the second time resulted in zero as the Generator was exhausted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Continuing from Example 2
&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums_generator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 333333328333333350000000
&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums_generator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 0, because it can only be iterated once.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#dealing-with-relatively-small-files"&gt;
  &lt;/a&gt;
  Dealing with relatively small files
&lt;/h3&gt;

&lt;p&gt;When dealing with relatively small files or lists, we may not want to use Generator as it might actually slow us down.&lt;/p&gt;

&lt;p&gt;We can use our previous examples &lt;a href="https://docs.python.org/3/library/profile.html"&gt;cProfile&lt;/a&gt; to profile the performance differences between list comprehension and Generator expression when summing the values up.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;cProfile of summing using List Comprehension vs. Generator Expression:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# List Comprehension
# ------------------
&lt;/span&gt;&lt;span class="n"&gt;cProfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'sum([i * i for i in range(100_000_000)])'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#    5 function calls in 13.956 seconds
#    Ordered by: standard name
#    ncalls  tottime  percall  cumtime  percall filename:lineno(function)
#         1    8.442    8.442    8.442    8.442 &amp;lt;string&amp;gt;:1(&amp;lt;listcomp&amp;gt;)
#         1    0.841    0.841   13.956   13.956 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)
#         1    0.000    0.000   13.956   13.956 {built-in method builtins.exec}
#         1    4.672    4.672    4.672    4.672 {built-in method builtins.sum}
#         1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Generator Expression
# --------------------
&lt;/span&gt;&lt;span class="n"&gt;cProfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'sum((i * i for i in range(100_000_000)))'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#    100000005 function calls in 22.996 seconds
#    Ordered by: standard name
#    ncalls  tottime  percall  cumtime  percall filename:lineno(function)
# 100000001   11.745    0.000   11.745    0.000 &amp;lt;string&amp;gt;:1(&amp;lt;genexpr&amp;gt;)
#         1    0.000    0.000   22.996   22.996 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)
#         1    0.000    0.000   22.996   22.996 {built-in method builtins.exec}
#         1   11.251   11.251   22.996   22.996 {built-in method builtins.sum}
#         1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From our &lt;code&gt;cProfile&lt;/code&gt; result above, we can tell that using list comprehension is a lot faster provided we don’t run into memory constraints.&lt;/p&gt;

&lt;p&gt;Evidently, if memory is not an issue, we should stick with using regular functions or list comprehensions.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In summary, Generator is an amazing tool in Python given the scenario where we do not need to reiterate it more than once.&lt;/p&gt;

&lt;p&gt;As Generators give us lazy evaluation, they are a great way to generate sequences in a memory-efficient manner. We should definitely consider using Generator when dealing with huge datasets to optimize our program.&lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Developing my first mobile app to ~70k users</title>
      <author>Charli Bregnballe</author>
      <pubDate>Sun, 12 Sep 2021 22:56:26 +0000</pubDate>
      <link>https://dev.to/charlibregnballe/developing-my-first-mobile-app-to-70k-users-3nbl</link>
      <guid>https://dev.to/charlibregnballe/developing-my-first-mobile-app-to-70k-users-3nbl</guid>
      <description>&lt;h4&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h4&gt;

&lt;p&gt;I've had "App development" on my things-I-want-to-learn-list for some time when suddenly I got the chance to do a deep dive and build a project in the process.&lt;/p&gt;

&lt;p&gt;This blog post is the aftermath of a 6-month long process where I taught myself react-native and developed my first app for iOS and Android.&lt;/p&gt;

&lt;p&gt;I will reflect upon the process of developing my first app without any prior experience and rolling it out to more than 70k users. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h3&gt;

&lt;p&gt;Some background information might be useful before I start.&lt;/p&gt;

&lt;p&gt;In my daily job as Head of IT at Kino.dk, a cinema movie website and ticket machine, writing code is not something I do on a normal workday.  Normally I am a one-man-army, where I flex my generalist muscle in different fields like data analysis, dev obs, development, GDPR, business, and strategy.&lt;/p&gt;

&lt;p&gt;So I enjoyed writing some code and doing a deep dive into a specific area for once.&lt;/p&gt;

&lt;p&gt;Another benefit was that it was a perfect scenario for me to practice the deep-work methodology and mindset.  A methodology for strong and narrow focused sessions of uninterrupted work, that I've grown to love and enjoy.  I would like to reflect on the combination of stoicism and deep work, but that is for another blog post. &lt;/p&gt;

&lt;p&gt;This project was born during the covid-19 lockdown of Denmark (and the cinemas), where my workload was limited, but my urge to spend my time productively was strong.&lt;br&gt;
So I decided to see if I was able to create a new app for Kino.dk while the cinemas were closed.&lt;/p&gt;

&lt;p&gt;Maybe I'm a geek, some might even call me a nerd, but I enjoy diving into new tech areas.  Skilling-up as they say.&lt;br&gt;
I keep a (pretty long) list of topics I want to take a look at and try out.&lt;br&gt;
The list grows all the time, because tech moves fast.  I do use it, though.&lt;br&gt;&lt;br&gt;
Every year I pick a topic (or maybe a few) from the list and then make a plan for how I can get my hands dirty with this new technology.&lt;br&gt;
I then create a list of tasks or elements, everything from project ideas, tutorials, blog posts, and so on, actually just picking up resources.&lt;br&gt;
They will be listed in a sensible order and I just plow through them one by one, when I have the time and energy.  Eventually, I end up with some kind of knowledge.&lt;br&gt;&lt;br&gt;
At some point, I will lose my patience and start a project.  This usually happens after I've researched/learned the most essential parts.&lt;/p&gt;

&lt;p&gt;The whole idea behind my "plan" is that I always know what's next. &lt;br&gt;
I don't need to start by figuring out what to do when I sit by the computer, I can always just sit down and start right away.&lt;br&gt;&lt;br&gt;
The progress is very clear and visible. &lt;br&gt;
The goal is to constantly be moving forward.  Consistency is the key to my methodology.  No jumping between topics that are too far apart, no randomness in the steps, just a straightforward and clear path.&lt;/p&gt;

&lt;p&gt;Ouch, this section became longer than expected, but don't worry, we are getting to the good stuff.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#planning-limits-and-requirements"&gt;
  &lt;/a&gt;
  Planning; limits and requirements
&lt;/h3&gt;

&lt;p&gt;I work by a simple principle.  Plan what you do, do what you plan.&lt;br&gt;
So the first thing I do when I try to learn something new is to read the &lt;a href="https://reactnative.dev/"&gt;documentation&lt;/a&gt;.   &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FUODHQSk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://external-preview.redd.it/NWrFUZX9p0ZWkSS8ioH3LYtNIo15rNeO1UIgb9D28bY.jpg%3Fauto%3Dwebp%26s%3D41d516ea004df577ce3d1d3063e2a19968c2cf9f" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FUODHQSk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://external-preview.redd.it/NWrFUZX9p0ZWkSS8ioH3LYtNIo15rNeO1UIgb9D28bY.jpg%3Fauto%3Dwebp%26s%3D41d516ea004df577ce3d1d3063e2a19968c2cf9f" alt="documentation and debugging"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Usually, I read the documentation to get some kind of overview before I start setting up the dev environment and such.  Once that is set I re-read the documentation with a focus on the things I know I need and try out and tinker with the sample code/tutorial/introduction.&lt;/p&gt;

&lt;p&gt;Before I started the actual project, I stitched some rough sketches or wireframes together.&lt;/p&gt;

&lt;p&gt;The goal for the project was clear; &lt;br&gt;
I want to make the fastest way to a cinema ticket, with as few interactions as possible.&lt;br&gt;
When you go to the cinema there are 3 parameters in play.  The movie, the cinema and the date.  If I can get the user to select either one of the 3, I can easily display a good overview of the other 2 options.&lt;br&gt;
Therefore I decided to present the most popular movies and the cinemas closest to the user on the home screen. So the home screen can be quick navigation for the users to either the cinema or movie he is interested in. Pretty simple, huh?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rDD0ASrG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99ttmhswy09tfn1jktaz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rDD0ASrG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99ttmhswy09tfn1jktaz.png" alt="homescreen wireframe kino app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next up is the movie's screen.  Here I want to present a list of movies as a kind of overview.  Nothing new in presenting movies like this.&lt;br&gt;&lt;br&gt;
Since the list tends to get a bit long, I do want to add some kind of search on the top, to help the users who are trying to find a specific movie.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oiGxJbCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/frq32pm8g63skr56j2za.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oiGxJbCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/frq32pm8g63skr56j2za.png" alt="movie screen wireframe kino app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Touching a movie poster will lead to the movie screen, with a more detailed view of the selected movie.  On this screen, the user will be able to view the trailer, read more about the movie, see showtimes, crew, and order tickets.&lt;br&gt;
The vertical bar with the dates is what I think is the easiest way to present selectable dates.  The goal is that the user should be able to touch the date he wants to see the showtimes and they will update.  Default is today's date.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---pTS_OlW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/srs4n7fy2f765yuq9yal.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---pTS_OlW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/srs4n7fy2f765yuq9yal.png" alt="movie show screen wireframe kino app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A similar structure for the cinemas with an overview screen and a detailed view.&lt;br&gt;&lt;br&gt;
The order of the cinemas is important, though.  By default, the cinemas are sorted in alphabetical order, which is not very useful. &lt;br&gt;
So to improve the user experience, I figured I should prompt the user to let me use his geo coordinates.  I can then use them to calculate the distance from the user to each cinema and sort the cinemas with the nearest first.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wdWzrHuh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxr7hgr1769l3vbi7lyf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wdWzrHuh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxr7hgr1769l3vbi7lyf.png" alt="cinema screen wireframe kino app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The user can select a cinema and go to the cinema screen to read more about the cinema, see the program, showtimes, and order tickets.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qtyqGotS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bjw010h1pbltnduwaj0n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qtyqGotS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bjw010h1pbltnduwaj0n.png" alt="cinema show screen wireframe kino app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The last thing is the user login screen.  Users should be able to log in to autofill the form with the info that's needed when ordering tickets.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--afqeABWh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://confident-code.s3.eu-central-1.amazonaws.com/Manual%2Bupload/kinoApp/Login.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--afqeABWh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://confident-code.s3.eu-central-1.amazonaws.com/Manual%2Bupload/kinoApp/Login.png" alt="login screen wireframe kino app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For now, I want to keep it simple and just show the user's purchase history.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0wZG7EVU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8nqt83ejwc4xmtrbtz7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0wZG7EVU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8nqt83ejwc4xmtrbtz7.png" alt="profile screen wireframe kino"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Besides the different screens, the observant reader might notice the bottom navigation in the app.  This is nothing new, actually pretty standard navigation between the different screens.&lt;/p&gt;

&lt;p&gt;Let me know if you think, I should pursue a career as a designer, ok?&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#initial-setup-and-the-first-lines-of-code"&gt;
  &lt;/a&gt;
  Initial setup and the first lines of code
&lt;/h3&gt;

&lt;p&gt;Now that I have some kind of idea of what the app should look like, I can start setting up my dev environment and start the actual coding journey.&lt;/p&gt;

&lt;p&gt;Following the documentation, setting the development environment up on my mac was pretty straightforward.  &lt;a href="https://reactnative.dev/%5D"&gt;https://reactnative.dev/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Starting a new app with npx react-native init KinoApp and I had a very basic structure of the app ready.&lt;/p&gt;

&lt;p&gt;I am a bad designer, I know that. Sometimes I miss details, another weakness. Therefore, I like to help myself with some design decisions. So I started out making a "Theme file". It contains a lot of reusable code for the UI. It would help me keep the app design consistent across all screens and components. This is just a habit I've got from web development.  So I created a range of fonts with different sizes, widths, heights, and paddings. I should note that I made the widths and heights dynamic, so they are calculated on the fly to make the best fit on every screen size, but still consistent!&lt;br&gt;
Then I created all the different screens and started wiring them together through the navigation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p-RyXSrN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/Mk9G40p9Igg/hqdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p-RyXSrN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/Mk9G40p9Igg/hqdefault.jpg" alt="meme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, I knew about stack navigator, bottom tab navigator, and drawer navigator, but making them work together was the hard part. Apparently, I had to nest a stack navigator inside the bottom tab navigator. For experienced developers, this might be obvious, but nevertheless, it took me some time to wrap my head around it.&lt;br&gt;
 It is pretty different from normal web development, because the navigators have their own history, so it's very easy to mess up the "Back" button.&lt;br&gt;
Confused? Me too!&lt;/p&gt;

&lt;p&gt;It is a bit technical, so I will leave that to another post, where I go into detail with the technical decisions.&lt;br&gt;
Somehow, I managed to get the navigation to work as intended, so I could navigate between the different blank screens on my simulator.  Next up: let's fetch some data into the app and start working on the UI and design.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q5m9xIwl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3904vshtzkz0fe78pxdn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q5m9xIwl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3904vshtzkz0fe78pxdn.gif" alt="initial navigation"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-data"&gt;
  &lt;/a&gt;
  The Data
&lt;/h3&gt;

&lt;p&gt;The data used in the app is fetched through JSON feeds and API endpoints from Kino.dk. I wanted to pre-fetch as much data as possible, to make the app fast and with a native feel, once it was loaded.  The data had to be stored somewhere and here react (and react-native) has a wide range of options. Because this is not a normal server-side-rendered website, this is different too! Long story short, I decided to go with the Context API and not the very popular Redux library. I did put a lot of thought into this, keep my limited experience in mind, this did require some research. The reason why I went with the Context API, was that I had no need for very complex data structures, but even more important, I tried to favor the "out-of-the-box" solution. If possible, I tried to avoid using external dependencies. I believe in control over code and with limited dependencies. Hopefully, I did myself a favor when maintaining the app.  For the same reason, I am using the standard javascript fetch() method and not the very popular Axios library. It is another topic I would like to discuss, but that will be for another blog post.&lt;/p&gt;

&lt;p&gt;I set up a data-fetching component, which will run every time the app "wakes up", and on initial load. An array of movies and an array of cinemas are fetched and stored in the context. I remembered to wrap the main component with the contexts, so the data is available everywhere in? the app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CinemaProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MovieProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AuthProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StatusBar&lt;/span&gt; &lt;span class="na"&gt;barStyle&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"light-content"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FetchData&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BottomTabNavigator&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;AuthProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;MovieProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;CinemaProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This might seem strange for those who are new to react (native).  It was strange to me at least. &lt;br&gt;
Let me clarify;  The CinemaProvider is the Cinema Context component.  It fetches, updates, and exposes the cinema data.  Same with MovieProvider, except it's for movies.  The AuthProvider is used to handle the login of the user.&lt;br&gt;
Then you see the FetchData component I mentioned above, this is a component that pre-fetches the data and stores it in Context.&lt;br&gt;&lt;br&gt;
This means that the data can be available inside all components, where the context is imported.&lt;br&gt;
The last thing is the BottomTabNavigator.  Inside this is where we find the main app component, which contains the app.&lt;br&gt;
So to make the data available in the app, we have to wrap it around the app component.  Pretty simple and pretty strange.&lt;/p&gt;

&lt;p&gt;There are so many resources on this topic so a simple google search will enlighten you far more than my silly post.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#ui"&gt;
  &lt;/a&gt;
  UI
&lt;/h3&gt;

&lt;p&gt;Finally, some data to work with. Let's start looking at the Movies screen, the screen that has a list of all the movies.&lt;/p&gt;

&lt;p&gt;React-Native has a few components that you quickly will get familiar with if you start coding. Let's shortly inspect a few of the most common ones.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The

&lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt;

component -&amp;gt; This is very similar to the

&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;

tag we know and love from html&lt;/li&gt;
&lt;li&gt;The

&lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt;

component -&amp;gt; This is a component that contains text.  Surprised?  It is similar to tags you know from html:

&lt;code&gt;&amp;lt;p&amp;gt;, &amp;lt;i&amp;gt;, &amp;lt;h1&amp;gt;, &amp;lt;h2&amp;gt;, &amp;lt;h3&amp;gt;&lt;/code&gt;

and so on. 
- The

&lt;code&gt;&amp;lt;Image&amp;gt;&lt;/code&gt;

component -&amp;gt; This component can display an image.&lt;/li&gt;
&lt;li&gt;The

&lt;code&gt;&amp;lt;TouchableOpacity&amp;gt;&lt;/code&gt;

component -&amp;gt; This is a bit similar to a view but will make the "area" touchable, which means we can have an onPress function on the component that will do something.  Can be used to navigate the user somewhere.
- The

&lt;code&gt;&amp;lt;FlatList&amp;gt;&lt;/code&gt;

component -&amp;gt; This one is interesting.  This is a list of items.  It takes in an array and loops over the items and displays them.  These items can be anything... images, views, text, or a combination.  Pretty handy, huh? In our case, this component is ideal for our list of movies.&lt;/li&gt;
&lt;li&gt;All the components are well described in the documentation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I started out creating a FlatList on the movies overview screen. It will take in the array of movies from context and the loop through it and for each item display a poster image and a movie title. Sounds simple, right?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../context/MoviesContext&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// import the movies context&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// set the movie context to state&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setMovies&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;orderBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;selling_position&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Sets the movies list to the constant movies and order it by selling_position to make the most popular movies appear on top.&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FlatList&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;movies&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;numColumns&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;showsVerticalScrollIndicator&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;renderItem&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;keyExtractor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;numColumns is set to 3, so the data is present in 3 columns. The key extractor is an ID that the FlatList needs to identify for each object in the array.  Notice the renderItem function? Good! It's important! It calls a function called Item and takes an item as a parameter. Clever naming, right? - I didn't come up with it, I was inspired! Nevertheless, the Item function is responsible for presenting each item in the array.&lt;/p&gt;

&lt;p&gt;So the function looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;View&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Image&lt;/span&gt; &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;imageUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;View&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Item function is where I continued to work with styling and adding the option to navigate the user to a screen for a single movie. One strange thing, which is actually not strange at all, is that you need to add some kind of width and height to the image, otherwise it won't be visible. Again, thank you documentation!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N2R8kxQU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zauxeohqrikc0o070mc7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N2R8kxQU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zauxeohqrikc0o070mc7.jpg" alt="movie overview kino app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#screenshot-is-from-the-final-app-and-not-the-first-draft"&gt;
  &lt;/a&gt;
  (screenshot is from the final app and not the first draft)
&lt;/h6&gt;

&lt;p&gt;I will not go through the cinema overview page, since it's very very similar.  Contains a list of cinemas.  You can see the "final" result here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bZj7DuMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bdgvzep50dt602vdwzhm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bZj7DuMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bdgvzep50dt602vdwzhm.jpg" alt="cinema overview kino app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#screenshot-is-from-the-final-app-and-not-the-first-draft"&gt;
  &lt;/a&gt;
  (screenshot is from the final app and not the first draft)
&lt;/h6&gt;

&lt;p&gt;Everything except the navigation has been pretty straightforward until now. Next up was to navigate the user to the movie screen, when pressing a movie poster. I still don't understand why this very basic functionality was so difficult for me, but the combination of the stack and bottomtab navigator created some issues. When I face issues like this, I combine reading on StackOverflow, checking blog posts, and just trying a few things out. A deeper understanding of the problem is required in order to get enough information to make a detailed search for a solution.&lt;/p&gt;

&lt;p&gt;To sum up, I tried to keep the structure simple, with a screen listing all movies and one with all cinemas. From there the user can navigate to the movie or cinema and order tickets.&lt;/p&gt;

&lt;p&gt;In addition to the navigation, I added a search bar on top, where the user can search for a movie or cinema instead of scrolling down. I called it search, but it's actually just a filter functionality!&lt;/p&gt;

&lt;p&gt;When ordering a cinema ticket, there are 3 variables to consider: The movie, the cinema, and the day. We need the user to choose at least 2 of the 3 before we can present a view with showtimes that is not too overwhelming.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#design"&gt;
  &lt;/a&gt;
  Design
&lt;/h3&gt;

&lt;p&gt;The movie and cinema profile is the last step before selecting a showtime and purchasing a ticket. Therefore, I wanted to keep the information to a bare minimum, so it is very obvious how and where to tap to order a ticket. If the user wants further information, like a review or list of actors, a little more work is required. I hope to satisfy the majority of the users with minimal initial information. Of course, information like a movie title, genre, and so on must be present and easy to see.&lt;/p&gt;

&lt;p&gt;The result currently looks like this for a movie:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rmlRHVLl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q2mpj9h559bwvbbzda4e.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rmlRHVLl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q2mpj9h559bwvbbzda4e.jpg" alt="the father movie profile kino app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5x3UKkGD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wo2n8k80jlfqol38f72h.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5x3UKkGD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wo2n8k80jlfqol38f72h.jpg" alt="suicide squad movie profile kino app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some fun featured I decided to implement, was to fetch colors from the movie poster and use them throughout the movie profile.  So all the movie profiles will look different depending on their poster.  Another good thing about this was that I didn't have to figure out some kind of cool color scheme.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3cJJapoM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4fp0wu0og5ubtr7w7kd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3cJJapoM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4fp0wu0og5ubtr7w7kd.jpg" alt="a quiet place screenshot kino app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5Kty8YMu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8s92z7udi5qchj5h56h.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Kty8YMu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8s92z7udi5qchj5h56h.jpg" alt="promising young woman screenshot kino app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3slRbpKb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/31gcccob00t082zmde1g.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3slRbpKb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/31gcccob00t082zmde1g.jpg" alt="pagten screenshot kino app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---qzvnVuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bzs2i4xdssub36ba63o1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---qzvnVuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bzs2i4xdssub36ba63o1.jpg" alt="druk screenshot kino app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am fetching a primary background color, a primary non-background color, and a secondary color. These are used throughout the different elements to hopefully create a more unique experience for each movie. This feature does create some problems, though. One of the issues is that it works well for some posters, but others will not be that great. And I have no control over this. But somehow I'm still responsible!&lt;/p&gt;

&lt;p&gt;From a technical point of view, this feature does collide a bit with my hopes and dreams about load speed. Keep in mind that each movie screen will have different colors, so these colors must be fetched on the fly, without making the user fall asleep in the process.&lt;/p&gt;

&lt;p&gt;For the cinema profile, I'll use a very similar design, but without the unique colors. The information presented is pretty similar and I want to keep some kind of consistency in the design.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--31wznpLz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b4vjr28g3oy2edphqgf2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--31wznpLz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b4vjr28g3oy2edphqgf2.jpg" alt="cinema profile screenshot kino app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the tougher design decisions, I had to make in the process, was how to present the showtimes. I was (of course) inspired by other apps and figured that the user most likely know which day he wants to go to the cinema. So we can keep the view to be showtimes for 1 day at the time. I tried to follow some conventions by choosing a vertical list that works as a date picker. Selecting a date will fetch showtimes data for the movie or cinema and present it.&lt;/p&gt;

&lt;p&gt;When selecting a cinema, you can see this particular cinemas program for the selected day:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6WINdXD6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efo1snwhqu1tgnt3melt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6WINdXD6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efo1snwhqu1tgnt3melt.jpg" alt="cinema show times screen kino app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you select a movie, you can see the showtimes in the different cinemas for the selected day:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V7QsQrU2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p311tfmxhqio31unaqa6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V7QsQrU2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p311tfmxhqio31unaqa6.jpg" alt="movie show times screenshot kino app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This way, you will get an overview of the "entire" program for that day. So either the user selects a cinema or a movie and sees the showtimes for that day.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#animations-and-smoothness"&gt;
  &lt;/a&gt;
  Animations and smoothness
&lt;/h3&gt;

&lt;p&gt;How do we judge quality?  Whenever something is aesthetically pleasant?&lt;br&gt;
A well-timed and carefully selected animation can do wonders for how the app "feels".&lt;br&gt;
It's an art and something that I by no means master.  I do know if it was successful or not.  But hey!  I figured out how to do animations!&lt;/p&gt;

&lt;p&gt;I have added a few animations to ease the transition between screens and on the loading of screens.&lt;/p&gt;

&lt;p&gt;If you have tried the app, you might have noticed how the images slide back and forth when you go from the movie/cinema overview and to a movie/cinema.  I combine animations and navigations to try to make the transition smooth.&lt;/p&gt;

&lt;p&gt;Also, I do a fade-in with a slight delay on some elements on the movie profile, like the play icon for the trailer.  It "drops in" shortly after the screen is loaded.  Why?  - Well there are a few reasons for it.  One is to draw some attention to the button, if you press this, then you can watch the trailer.  Another reason is that 95% of all movies will have trailers, while some won't.  So I have to do a check in the data to see if the movie has a trailer or not and I don't want to bother the user and make him wait for that check.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jezTQnP_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fqa3hw0le3qowss93v85.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jezTQnP_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fqa3hw0le3qowss93v85.gif" alt="kino app movie profiles"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another small and maybe useless animation is when the user presses either a button or poster.  It will mimic a real physical button being pressed down and go back up.&lt;/p&gt;

&lt;p&gt;It's a small thing, but it all adds up and contributes to the overall touch and feel of the app.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#challenges-in-the-process-and-how-to-overcome-them"&gt;
  &lt;/a&gt;
  Challenges in the process and how to overcome them
&lt;/h3&gt;

&lt;p&gt;One of the issues that took me the longest to figure out was the data structure and how to re-arrange it to meet my needs.&lt;/p&gt;

&lt;p&gt;Next up was the geo-location, where I fetch the user's GPS coordinates, pair it with the cinemas coordinations, calculate the distance, and sort the cinema list by distance to the user, with nearest first.&lt;/p&gt;

&lt;p&gt;Simply displaying the showtimes for a movie, for each cinema was a challenge, too.&lt;br&gt;
When users select a showtime, a webview opens because there are no API endpoints for the last few steps of the ticket purchasing flow. So this was my only option and the biggest weakness of the app.&lt;/p&gt;

&lt;p&gt;Figuring out how to auth the user and pass the user to the webview was also something that took me a while to make work.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#data-structure-and-restructure"&gt;
  &lt;/a&gt;
  Data structure and restructure
&lt;/h4&gt;

&lt;p&gt;The data structure was one of the first challenges I faced.  To understand the issues, we need a quick overview of the data.  First off we have a list of cinemas and a list of movies.  Each movie will have a list of showtimes, queried by date.  So we can fetch all showtimes for a movie on a specific date.  The showtimes is an array of arrays, where they are grouped by cinema.  It makes sense, right?  And then there is a similar structure for the cinemas, where you can get all showtimes for that cinema on a particular date, grouped by movies.&lt;/p&gt;

&lt;p&gt;Example for a movie:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"cinema_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1196251"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"city"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"City"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"showtimes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="nl"&gt;"start_time"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2021-08-27 12:15:00"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="nl"&gt;"room_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Sal 4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="nl"&gt;"showtime_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"3852882"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="nl"&gt;"room_seats"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"293"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="nl"&gt;"ticket_available"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"283"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="nl"&gt;"movie_version_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"42824"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="nl"&gt;"start_time"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2021-08-27 14:30:00"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="nl"&gt;"room_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Sal 4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="nl"&gt;"showtime_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"3852884"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="nl"&gt;"room_seats"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"293"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="nl"&gt;"ticket_available"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"288"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="nl"&gt;"movie_version_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"42824"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt; 
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So the structure is an array of cinemas and under each cinema, there's a showtime object that contains an array of showtime objects. Mind the "movie_version_id", this is a reference to if it’s a 2D, 3D, or something else. I wanted to group the showtimes by version. So I wrote a small function to restructure and re-arrange the array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;merged&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showtimes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showtimes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;movie_version_id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even though I try to minimize the 3rd party libraries, I am using lodash.  Why isn't this javascript just like this? phew.&lt;br&gt;
Well, it's easy to understand, showtimes are grouped by movie_version_id, which is the version.  So all 2d movies will be grouped under the same version label.  Perfect.&lt;/p&gt;

&lt;p&gt;And the new structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"cinema_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1196251"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"city"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"City"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"showtimes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"42924"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"start_time"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2021-08-27 12:15:00"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"room_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Sal 4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"showtime_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"3852882"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"room_seats"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"293"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"ticket_available"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"283"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"movie_version_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"42824"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"start_time"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2021-08-27 14:30:00"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"room_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Sal 4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"showtime_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"3852884"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"room_seats"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"293"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"ticket_available"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"288"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"movie_version_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"42824"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; 
      &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; 
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; 
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#geo-location"&gt;
  &lt;/a&gt;
  Geo Location
&lt;/h4&gt;

&lt;p&gt;Geolocation was another issue. Keep in mind, my goal was to make it as easy and fast as possible to get a cinema ticket. Even though Denmark is a small country, it's very unlikely that people will travel through the entire country to go to a specific cinema. They will almost always want to go to a cinema near their current location. So I implemented the option to fetch the user's geolocation and pair it with each cinema location and calculate the distance from the user to each cinema.  Once the user opens the app, he will be asked if the app can get access to the GPS to determine his location. The location data is not saved, but only used in real-time to calculate the distance to the different cinemas. Let's pretend the user said ok and then some coordinates are returned to us to use.  I wrote a function that will calculate the distance between the location of the user and another location. Then looping through all the cinemas, asking this very question and using each answer to add a "Distance" parameter to the array of cinemas. The distance (big surprise) is how far the user is located from each cinema. And then sorting it with nearest first.&lt;/p&gt;

&lt;p&gt;How the heck do you calculate the distance between 2 sets of coordinates?  And get the answer in kilometers?&lt;br&gt;
Well, thank you internet!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;computeDistance&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;prevLat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prevLong&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;long&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prevLatInRad&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;toRad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevLat&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prevLongInRad&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;toRad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevLong&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;latInRad&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;toRad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;longInRad&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;toRad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;long&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// In kilometers&lt;/span&gt;
    &lt;span class="mf"&gt;6377.830272&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
    &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;acos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevLatInRad&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;latInRad&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
        &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevLatInRad&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
          &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;latInRad&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
          &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;longInRad&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;prevLongInRad&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;toRad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;angle&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I feel like I want to write more about this because I spent some time researching to understand what is going on and it's fascinating. If you want to talk about this, let me know. I'll buy you a beer that you can drink while I talk nonsense about this.&lt;/p&gt;

&lt;p&gt;Then I made an updateCinemas function in the Cinemas Context.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateCinemas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cinemas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;referenceLat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;referenceLong&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cinemasWithDistance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cinemas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cinema&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;cinema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;computeDistance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;cinema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;geo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cinema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;geo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;referenceLat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;referenceLong&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c1"&gt;// Calculate the distance&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;orderedCinemas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;orderBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cinemasWithDistance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;distance&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;update_cinemas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;orderedCinemas&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt; 
    &lt;span class="c1"&gt;// Update cinemas is called with cinemas array and user coordinates&lt;/span&gt;
    &lt;span class="c1"&gt;// A distance value is added to each cinema based on user coords and cinema cords&lt;/span&gt;
    &lt;span class="c1"&gt;// cinemas are sorted by distance&lt;/span&gt;
    &lt;span class="c1"&gt;// state is updated with new cinemas array and a value of cinemaSorted to be true&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voila!  The cinema's array now has a distance value and is now sorted by that.  So the cinema that is closest to the user will be the first one on the list.&lt;br&gt;
Notice the comments?  - Yes, I'm a nice guy like that!&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#geo-location-for-movie-showtimes"&gt;
  &lt;/a&gt;
  Geo Location for movie showtimes
&lt;/h4&gt;

&lt;p&gt;Next big issue; How am I going to use this on the cinema overview screen? I need it in the showtimes for each movie, too, so the sorting of cinemas is consistent across the entire app.&lt;/p&gt;

&lt;p&gt;Well, diving into the way I display the showtimes for each movie, I wrote a function that handles the group by showtimes issue but adding the distance value to each cinema. Because this distance value is only in the cinema list, not the list for the movies showtimes. Luckily I could match on the cinema IDs since they were present in both arrays and then merge them.&lt;/p&gt;

&lt;p&gt;Finally, it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;mergeArrays&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;merged&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;merged&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;itmInner&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;itmInner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;cinema_id&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;merged&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showtimes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showtimes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;movie_version_id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each time showtimes are loaded for a movie, data is restructured to have the right sorting and distance value on cinemas.&lt;br&gt;&lt;br&gt;
Now both the list of cinemas on the cinema overview page and the cinemas on the movie screen showtimes are sorted by the distance parameter.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#display-the-showtimes"&gt;
  &lt;/a&gt;
  Display the showtimes
&lt;/h4&gt;

&lt;p&gt;All of this leads me to the issue of displaying these showtimes. So we talked about FlatLists already. They are great and perfect for this use case. Let's pretend we are looking at showtimes for a movie. The data structure is sensible, because for each movie there is an array of cinemas, and nested inside this cinema’s array there is an array of showtimes. But I grouped all the showtimes by their version and so it's a 3-stack deep nested array before we get the actual showtimes.&lt;/p&gt;

&lt;p&gt;This calls for nested FlatLists! The first FlatList will contain all Cinemas. Then for each cinema, a nested FlatList is rendered, this one will contain all the versions. And finally, inside each movie version, yet another FlatList is rendered, to display the showtimes for this movie version at this cinema. Phew.&lt;br&gt;
 BUT PERFORMANCE? Well, actually it's not a problem, since we use the keyExtractor ID to index the items AND they are lazy-loaded. It is interesting, though, because each time a user selects a date on a movie, all this will happen, including grouping the showtimes by version, merging, and sorting of the cinemas.&lt;br&gt;
Remember, the order of the cinemas will vary depending on the user's location.  I wish I could query the API with longitude and latitude coordinates, and it would then return a perfect structured array of the items, but that would make this section both very short and very boring.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#no-api-end-point"&gt;
  &lt;/a&gt;
  NO API end point
&lt;/h4&gt;

&lt;p&gt;The biggest challenge, issue, and flaw in this app is how I handle what happens when a user presses a showtime and wants to select seats and buy a ticket. Kino.dk, the website, has some deeper integrations to the different ticket systems, which makes it feel like a part of kino.dk. There are no API endpoints for this part, so the only option I had was to open a webview on kino.dk targeting the selected showtime.&lt;/p&gt;

&lt;p&gt;This is by no means the best implementation, but the only current option I had. My plan for Kino.dk was to extract the ticket system logic out to an external service and then I could hook both Kino.dk and the app to that service and provide a true native app experience. Without having thought this through, there could still be some issues. I could make the deeper integration with the app and ticket systems/middle layer, so the users can select a number of tickets, select seats, etc, but how did I handle the payment? I had to use the cinema’s/ticket systems payment gateway since we are selling tickets on behalf of the tickets system or cinema. So it is not Kino.dk’s money, but the cinemas’.  It would require Kino to have its own payment gateway that will distribute the money to the cinemas. I am not sure it will happen.&lt;br&gt;
If you got any good ideas on how to solve this, I would love to hear from you!&lt;br&gt;
Another twist with the webview was that I had to fetch cookie and session data and pass it to the webview to make sure the user was logged in.  The webview is just an in-app browser that will show the mobile website. The user will get validated/logged in with the right cookies. These cookies or strings are available to me through the authentication endpoint.  What happens behind the scenes when the user login, is that some strings (cookies) are returned from the API and saved on the phone through AsyncStorage. These strings will be passed as cookies to the webview, to validate the user and log him in, so he doesn't have to add fill out redundant data.&lt;br&gt;
Luckily there's a react-native library (react-native-cookies) to make this easier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;CookieManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://kino.dk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;session_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;session_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.kino.dk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;secure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;httpOnly&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#finalizations"&gt;
  &lt;/a&gt;
  Finalizations
&lt;/h3&gt;

&lt;p&gt;ne thing that surprised me was something the cool people call the 80 / 20 - rule. It means that you can do 80% of the project in 20% of the time. That leaves us with the last 20% that will take 80% of the time. It is not entirely true for my project, but I experienced a lot of missing pieces just before the release.  And that is without talking about the actual release, which is a huge pain.&lt;br&gt;
I eventually ended up reaching out to a freelance React Native developer, who could help me with some code review and speed up the last bit of the process.&lt;/p&gt;

&lt;p&gt;Thank you, Stefan! You are amazing and I admire your patience.&lt;br&gt;
If you need a react native developer, I can recommend this guy.  You can find him here: &lt;a href="https://github.com/Hyllesen"&gt;&lt;/a&gt; and take his course: &lt;a href="https://www.udemy.com/user/stefan-hyltoft/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The whole deployment of the app to AppStore and PlayStore should be a chapter by itself. It was not difficult, it just took a long time to make the images fit, fill out the information, and all that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lessons-learned-and-key-takeaways"&gt;
  &lt;/a&gt;
  Lessons learned and key take-aways
&lt;/h3&gt;

&lt;p&gt;I have learned a lot in the process and there are a lot of key take-aways that could benefit anyone who might consider similar craziness. When I started out, everything was a bit confusing and I had to look up almost everything. But as I progressed, some of the stuff somehow got stuck in my brain, so I was able to operate more freely. The more you know, the more you know that you don't know. And this is true. But while you build knowledge and insight, your solutions will also become better. And maybe the most important thing when expanding your knowledge is all the ideas and solutions that pops up. Alongside the knowledge expansion, a range of possibilities will become clear and it’s in this space my innovation thrives.&lt;/p&gt;

&lt;p&gt;Even though the last bit of this article was full of problems that I faced in the process, I finish the project with a feeling that this is doable for anyone. I am no genius, just methodical and very stubborn. I have a lot of experience in teaching myself new programing languages and tech stuff in general. I have developed a method (that works for me) for learning new things, which means that I can fairly quickly pick new things up. I keep a list of things I want to dive into and every year I pick a topic (like React Native), make a plan and start my deep dive. It’s just a hobby and the pressure is off, so I can do it out of interest and not out of need.&lt;/p&gt;

&lt;p&gt;I made a checklist with a few notes on what to consider;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deploy to AppStore and PlayStore early&lt;/li&gt;
&lt;li&gt;Test on physical devices all the time&lt;/li&gt;
&lt;li&gt;Screen sizes -&amp;gt; they vary. So check on different sizes&lt;/li&gt;
&lt;li&gt;Some users have extra big fonts. That will break the design. For me, it was not an option to just force the size of the font. I wanted the design to adjust to users who needed bigger fonts. It took me a while&lt;/li&gt;
&lt;li&gt;Tracking. Think about it from the start. Implement it, test it and then test it again&lt;/li&gt;
&lt;li&gt;Handle what happens if the user is offline&lt;/li&gt;
&lt;li&gt;Some kind of error message to the user, if the API call fails&lt;/li&gt;
&lt;li&gt;Be aware of what happens if the user puts the app in the background, but without closing it. (I used a method where data is refreshed upon making the app active again)&lt;/li&gt;
&lt;li&gt;How do you want to present the app in AppStore and PlayStore? - Creating those images does require some work and if you want it to look good x2 that work&lt;/li&gt;
&lt;li&gt;How consistent is your data? Can you count on every attribute being there? If not, handle it&lt;/li&gt;
&lt;li&gt;There is no caching on the default Image element in react native&lt;/li&gt;
&lt;li&gt;Animations are fun and nice, but they should be used with care&lt;/li&gt;
&lt;li&gt;Plan the component structure&lt;/li&gt;
&lt;li&gt;Follow conventions&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  Whats next?
&lt;/h3&gt;

&lt;p&gt;I like to work in small, but never-ending iterations, where I develop an MVP and then take small steps based on a combination of data and user feedback. So far I have got extremely good feedback and some great ideas for the next steps. There has been some bad rating and reviews in the store, though. Annoying as it is, they are all related to the webview implementation, the big weakness of the app.&lt;/p&gt;

&lt;p&gt;I have actually already released a new update, where users can add cinemas as favorites. They will then be listed at the top of the showtimes list for a movie and on the cinema overview. The reason why this is the first feature was that I could see that 20% of the users did not allow geolocation. That means that they will get a list of cinemas in alphabetical order, which is not very useful. And I want to keep the focus narrow and centered on how to make it as fast and easy as possible to order a cinema ticket.&lt;/p&gt;

&lt;p&gt;What else is in the backlog? I have a list and it is pretty long and without any filter.&lt;/p&gt;

&lt;p&gt;I do know for sure that I want to add news to the app, too. Kino.dk is a ticket sales machine for cinema tickets, but it is also Denmark's biggest movie media. So supporting that part of the business would be a natural next step.&lt;br&gt;
I also want to give the editors more freedom to make an impact on the app. That could be promoting a certain movie or communicate with the users either through articles or competitions/polls. How? I have no idea.&lt;/p&gt;

&lt;p&gt;Another idea I consider is to add a view/screen where the user selects a date and then a list of cinemas and their movies (and showtimes) will be displayed. It should answer the question: "What's in the cinema on Saturday? Something worth watching?"&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final words
&lt;/h3&gt;

&lt;p&gt;Did you really read all this? Phew, good job!&lt;/p&gt;

&lt;p&gt;Now that the app is up and live, I can show off, brag and all that. There are currently around ~70.000 users on the app and the number keeps increasing without any marketing.&lt;/p&gt;

&lt;p&gt;Honestly, it was pretty hard. At times it felt like a mental marathon. I started with no idea at all how to do this. Doing small baby steps, consistency, no pressure, and lots of time were the key ingredients. I was able to work my way through it and tackle each issue with a calm focus. I did this project alongside my normal job, but on shorter hours. I tried to code at least 1 hour each day, and it took me around 5-6 months to learn and build.&lt;/p&gt;

&lt;p&gt;It was fun to dive into app development and figure out how to build an actual app.  And I will recommend you to give it a shot if you have the time and interest.  I believe that this is doable for anyone who can dedicate the needed time and focus.&lt;/p&gt;

&lt;p&gt;I know for sure that I do not want to be a mobile developer full-time. It's interesting and fun, but I would get tired and I need to dance in the space between tech and business. Not only in one of the 2 camps.&lt;/p&gt;

&lt;p&gt;Thank you for reading the article!  And feel free to leave a comment or reach out to me if you have any feedback, question or want to chat about development and IT.&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>showdev</category>
      <category>learning</category>
      <category>development</category>
    </item>
    <item>
      <title>29 Projects To Help You Practice HTML CSS Javascript 2021</title>
      <author>Niemvuilaptrinh</author>
      <pubDate>Sun, 12 Sep 2021 22:20:21 +0000</pubDate>
      <link>https://dev.to/haycuoilennao19/29-projects-to-help-you-practice-html-css-javascript-2021-1j88</link>
      <guid>https://dev.to/haycuoilennao19/29-projects-to-help-you-practice-html-css-javascript-2021-1j88</guid>
      <description>&lt;p&gt;Today we will go into learning about UI Page projects to increase design ability and how to apply HTML, CSS, Javascript to actual website development!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#responsive-social-platform-ui"&gt;
  &lt;/a&gt;
  Responsive Social Platform UI
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F3LekeGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Responsive%2520Social%2520Platform%2520UI%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F3LekeGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Responsive%2520Social%2520Platform%2520UI%2520%25281%2529.png" alt="Responsive Social Platform UI"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/TurkAysenur/embed/RwWKYMO?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#fox-news-templates"&gt;
  &lt;/a&gt;
  Fox News Templates
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t6-_7d6u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Fox%2520News%2520Templates%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t6-_7d6u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Fox%2520News%2520Templates%2520%25281%2529.png" alt="Fox News Templates"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/havardob/embed/GRjPywY?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#netflix-landing-page-clone"&gt;
  &lt;/a&gt;
  Netflix Landing Page Clone
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ROm3dfZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Netflix%2520Landing%2520Page%2520Clone%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ROm3dfZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Netflix%2520Landing%2520Page%2520Clone%2520%25281%2529.png" alt="Netflix Landing Page Clone"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/bradtraversy/embed/yWPONg?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#book-store-ui"&gt;
  &lt;/a&gt;
  Book Store UI
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3B6FXZtq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Book%2520Store%2520UI%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3B6FXZtq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Book%2520Store%2520UI%2520%25281%2529.png" alt="Book Store UI"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/TurkAysenur/embed/JjGKKrP?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#project-management-dashboard-ui"&gt;
  &lt;/a&gt;
  Project Management Dashboard UI
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OJjoYdaN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Project%2520Management%2520Dashboard%2520UI%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OJjoYdaN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Project%2520Management%2520Dashboard%2520UI%2520%25281%2529.png" alt="Project Management Dashboard UI"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/aybukeceylan/embed/OJRNbZp?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#microsoft-homepage-clone"&gt;
  &lt;/a&gt;
  Microsoft Homepage Clone
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--56nUue3Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Microsoft%2520Homepage%2520Clone%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--56nUue3Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Microsoft%2520Homepage%2520Clone%2520%25281%2529.png" alt="Microsoft Homepage Clone"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/bradtraversy/embed/ZEGGNRb?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#task-manager-ui-with-css-grid"&gt;
  &lt;/a&gt;
  Task Manager UI with CSS Grid
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hiedTYjT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Task%2520Manager%2520UI%2520with%2520CSS%2520Grid%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hiedTYjT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Task%2520Manager%2520UI%2520with%2520CSS%2520Grid%2520%25281%2529.png" alt="Task Manager UI with CSS Grid"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/TurkAysenur/embed/QWyPMgq?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#file-sharing-web-app"&gt;
  &lt;/a&gt;
  File Sharing Web App
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gp636NNs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/File%2520Sharing%2520Web%2520App%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gp636NNs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/File%2520Sharing%2520Web%2520App%2520%25281%2529.png" alt="File Sharing Web App"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/aybukeceylan/embed/yLOxRyG?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#messaging-app-ui-with-dark-mode"&gt;
  &lt;/a&gt;
  Messaging App UI with Dark Mode
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D-EjXrJC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Messaging%2520App%2520UI%2520with%2520Dark%2520Mode%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D-EjXrJC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Messaging%2520App%2520UI%2520with%2520Dark%2520Mode%2520%25281%2529.png" alt="Messaging App UI with Dark Mode"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/TurkAysenur/embed/ZEbXoRZ?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#booking-app-ui"&gt;
  &lt;/a&gt;
  Booking App UI
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pg2Ra2E5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Booking%2520App%2520UI%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pg2Ra2E5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Booking%2520App%2520UI%2520%25281%2529.png" alt="Booking App UI"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/aybukeceylan/embed/pobaKGX?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#job-search-platform-ui"&gt;
  &lt;/a&gt;
  Job Search Platform UI
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_uZps-5S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Job%2520Search%2520Platform%2520UI%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_uZps-5S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Job%2520Search%2520Platform%2520UI%2520%25281%2529.png" alt="Job Search Platform UI"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/TurkAysenur/embed/jOqdNbm?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#skateboard-video-platform"&gt;
  &lt;/a&gt;
  Skateboard Video Platform
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bMHaOxly--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Skateboard%2520Video%2520Platform%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bMHaOxly--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Skateboard%2520Video%2520Platform%2520%25281%2529.png" alt="Skateboard Video Platform"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/TurkAysenur/embed/LYRKpWe?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#instagram-redesign"&gt;
  &lt;/a&gt;
  Instagram re-design
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dSm3NjEv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Instagram%2520re-design%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dSm3NjEv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Instagram%2520re-design%2520%25281%2529.png" alt="Instagram re-design"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/TurkAysenur/embed/qeNvRM?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#videocall-app-ui"&gt;
  &lt;/a&gt;
  VideoCall App UI
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L6rOl1nA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/VideoCall%2520App%2520UI%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L6rOl1nA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/VideoCall%2520App%2520UI%2520%25281%2529.png" alt="VideoCall App UI"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/aybukeceylan/embed/pobbEYB?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#gym-website-tailwind-starter-kit"&gt;
  &lt;/a&gt;
  Gym Website - Tailwind Starter Kit
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V1hm--ab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Gym%2520Website%2520-%2520Tailwind%2520Starter%2520Kit%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V1hm--ab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Gym%2520Website%2520-%2520Tailwind%2520Starter%2520Kit%2520%25281%2529.png" alt="Gym Website - Tailwind Starter Kit"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/bradtraversy/embed/zYqVgXO?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#task-management-dashboard-ui"&gt;
  &lt;/a&gt;
  Task Management Dashboard UI
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jfw3G3xO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Task%2520Management%2520Dashboard%2520UI%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jfw3G3xO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Task%2520Management%2520Dashboard%2520UI%2520%25281%2529.png" alt="Task Management Dashboard UI"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/aybukeceylan/embed/gOpbRPO?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#internal-video-platform-ui"&gt;
  &lt;/a&gt;
  Internal Video Platform UI
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s_ENOSMd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Internal%2520Video%2520Platform%2520UI%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s_ENOSMd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Internal%2520Video%2520Platform%2520UI%2520%25281%2529.png" alt="Internal Video Platform UI"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/aybukeceylan/embed/VweooYQ?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#gmail-redesign"&gt;
  &lt;/a&gt;
  Gmail Redesign
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HjrncAeN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Gmail%2520Redesign%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HjrncAeN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Gmail%2520Redesign%2520%25281%2529.png" alt="Gmail Redesign"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/aybukeceylan/embed/xxKqyVO?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#chat-app-ui"&gt;
  &lt;/a&gt;
  Chat App UI
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kXVuvDYd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Chat%2520App%2520UI%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kXVuvDYd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Chat%2520App%2520UI%2520%25281%2529.png" alt="Chat App UI"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/aybukeceylan/embed/gVmZmJ?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#responsivewebpage"&gt;
  &lt;/a&gt;
  Responsive-Webpage
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tH3DB9K5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Responsive-Webpage%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tH3DB9K5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Responsive-Webpage%2520%25281%2529.png" alt="Responsive-Webpage"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/TurkAysenur/embed/wLOejj?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dashboard-design-with-flexbox"&gt;
  &lt;/a&gt;
  Dashboard Design with Flexbox
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O4wcQvll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Dashboard%2520Design%2520with%2520Flexbox%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O4wcQvll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Dashboard%2520Design%2520with%2520Flexbox%2520%25281%2529.png" alt="Dashboard Design with Flexbox"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/TurkAysenur/embed/YmVYYR?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#services-section"&gt;
  &lt;/a&gt;
  Services Section
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wSvBVINm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Services%2520Section%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wSvBVINm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Services%2520Section%2520%25281%2529.png" alt="Services Section"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ahmadnasr/embed/KKpvNGY?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#spotify-artist-page-ui"&gt;
  &lt;/a&gt;
  Spotify Artist Page UI
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DeY-Rbbp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Spotify%2520Artist%2520Page%2520UI%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DeY-Rbbp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Spotify%2520Artist%2520Page%2520UI%2520%25281%2529.png" alt="Spotify Artist Page UI"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alowenthal/embed/rxboRv?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#twitter-client-ui-in-css-html"&gt;
  &lt;/a&gt;
  Twitter Client UI in CSS + HTML
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2lxGxBk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Twitter%2520Client%2520UI%2520in%2520CSS%2520%2B%2520HTML%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2lxGxBk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Twitter%2520Client%2520UI%2520in%2520CSS%2520%2B%2520HTML%2520%25281%2529.png" alt="Twitter Client UI in CSS + HTML"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/marceloag/embed/fDmtq?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#responsive-movie-app-ui"&gt;
  &lt;/a&gt;
  Responsive Movie App UI
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LFXULPxo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Responsive%2520Movie%2520App%2520UI%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LFXULPxo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Responsive%2520Movie%2520App%2520UI%2520%25281%2529.png" alt="Responsive Movie App UI"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/nicklassandell/embed/soAyr?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#twitch-redesign-mockup"&gt;
  &lt;/a&gt;
  Twitch Redesign Mockup
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ESSBykvR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Twitch%2520Redesign%2520Mockup%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ESSBykvR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Twitch%2520Redesign%2520Mockup%2520%25281%2529.png" alt="Twitch Redesign Mockup"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/colewaldrip/embed/aqpRmQ?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#task-management-ui"&gt;
  &lt;/a&gt;
  Task Management UI
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sw88Q3hP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Task%2520Management%2520UI%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sw88Q3hP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Task%2520Management%2520UI%2520%25281%2529.png" alt="Task Management UI"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/aaronmcg/embed/GRjaRva?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#facebook-profile-page-ui-concept"&gt;
  &lt;/a&gt;
  Facebook Profile Page UI Concept
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uaSEDtbD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Facebook%2520Profile%2520Page%2520UI%2520Concept%2520%25281%2529.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uaSEDtbD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://niemvuilaptrinh.ams3.cdn.digitaloceanspaces.com/UI/Facebook%2520Profile%2520Page%2520UI%2520Concept%2520%25281%2529.png" alt="Facebook Profile Page UI Concept"&gt;&lt;/a&gt;&lt;br&gt;
You can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/himalayasingh/embed/bxoBZZ?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/nhat"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Entendiendo Destructuring (Objetos y parametros)</title>
      <author>Franco Cuarterolo</author>
      <pubDate>Sun, 12 Sep 2021 22:06:53 +0000</pubDate>
      <link>https://dev.to/cuarte4/entendiendo-destructuring-objetos-y-parametros-4977</link>
      <guid>https://dev.to/cuarte4/entendiendo-destructuring-objetos-y-parametros-4977</guid>
      <description>&lt;p&gt;Desestructurar un objeto o un array es una práctica habitual traída por ECMAScript. Es posible que lo hayas visto en tu trabajo, en tutoriales o en código open source, pero, ¿te paraste a entender qué resuelve y cómo aprovechar esta funcionalidad?&lt;/p&gt;

&lt;p&gt;Desestructurar un objeto o un array significa elegir un pedacito del mismo y asignarlo a una variable&lt;/p&gt;

&lt;p&gt;Empecemos con un objeto que describe a una de mis perras:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mascotaDeCuarte&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="na"&gt;nombre&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Gina&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="na"&gt;edad&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="na"&gt;raza&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Schnauzer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="na"&gt;pelaje&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sal y pimienta&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
 &lt;span class="na"&gt;hermanos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Maggie&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ragnar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mara&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Clarita&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Milo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tinta&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;El problema es que en la veterinaria me pidieron nombre y raza, para eso vamos a escribir una función que lo escriba por nosotros&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;nombreYRaza&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mascota&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;mascota&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nombre&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;mascota&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;raza&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;nombreYRaza&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mascotaDeCuarte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; Gina, Schnauzer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;En programación, tenemos un principio llamado "Don't Repeat Yourself (No te repitas)", y en este caso estamos repitiendo la palabra "mascota" tres veces de una forma totalmente innecesaria.&lt;/p&gt;

&lt;p&gt;Ahora es donde podemos empezar a aplicar destructuring. Sabemos que "mascotaDeCuarte" cuenta con dos propiedades: "nombre" y "raza". Desestructurar nos permite tomar estos valores y asignarlos a variables de igual nombre:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;nombreYRaza&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mascota&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;nombre&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;raza&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mascota&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;nombre&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;raza&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;nombreYRaza&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mascotaDeCuarte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; Gina, Schnauzer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ya aprendimos a desestructurar un objeto, pero hay algo más que te quiero contar: podemos desestructurar tambien el parametro de la función.&lt;/p&gt;

&lt;p&gt;Como sabemos, el parametro "mascota" es un objeto. Le podemos indicar a la función que el objeto que llega en el parámetro tendrá dos propiedades de nuestro interés: "nombre" y raza".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;nombreYRaza&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;nombre&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;raza&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;nombre&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;raza&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;nombreYRaza&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mascotaDeCuarte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; Gina, Schnauzer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Desestructurar nuestra función y sus parametros nos permitió tener una función mucho más limpia y más facil de leer.&lt;/p&gt;

&lt;p&gt;Hoy hablamos sobre cómo desestructurar un objeto y el parametro de una función, pero todavía nos quedan temas por ver como Arrays y Desestructuración de valores anidados. Si queres seguir investigando por tu cuenta, podes visitar &lt;a href="https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"&gt;la MDN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Gracias por leer, hasta la próxima!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Personal Branding</title>
      <author>Fahad Ashiq</author>
      <pubDate>Sun, 12 Sep 2021 21:02:49 +0000</pubDate>
      <link>https://dev.to/fahadashiq12/personal-branding-5b5g</link>
      <guid>https://dev.to/fahadashiq12/personal-branding-5b5g</guid>
      <description>&lt;p&gt;🤔 Personal Branding is often misunderstood in today's digital world the question is here - What actually Personal Branding is in real?&lt;/p&gt;

&lt;p&gt;🚀 Your personal branding is how you promote yourself. It is the unique combination of skills, experience, and personality that you want the world to see and get them inspired to put their value in it in form of suggestions, constructive criticism &amp;amp; many people out there start doing similar or relevant same as what you are doing to promote positive &amp;amp; better image of relevant domain. It is about telling your story, and how it reflects your conduct, behavior, spoken and unspoken words, and attitudes.&lt;/p&gt;

&lt;p&gt;🙌 Do you consider "Personal Branding" is must to consider in every respective professional domain for students, job professionals, and industry experts?&lt;/p&gt;

&lt;p&gt;👋 If yes, share your constructive thoughts on it in the comment section below:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#personalbranding-experience-leadership-communication-storytelling-branding-creativity-linkedin-content-digitalcommunication"&gt;
  &lt;/a&gt;
  personalbranding #experience #leadership #communication #storytelling #branding #creativity #linkedin #content #digitalcommunication
&lt;/h1&gt;

</description>
    </item>
    <item>
      <title>gRPC vs REST - Simple Performance Test</title>
      <author>StevenPG</author>
      <pubDate>Sun, 12 Sep 2021 20:20:07 +0000</pubDate>
      <link>https://dev.to/stevenpg/grpc-vs-rest-simple-performance-test-228m</link>
      <guid>https://dev.to/stevenpg/grpc-vs-rest-simple-performance-test-228m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;As a Java Developer, RESTful APIs are my bread and butter. On most days I spend a majority of my time writing code that either make up or interact with RESTful endpoints, or downstream code triggered by an endpoint.&lt;/p&gt;

&lt;p&gt;I'd heard of some rumblings of a new RPC format a few years ago, and I immediately thought back to my days doing some light GWT (Google Web Toolkit) development. With that, I brushed the idea out of researching gRPC and continued with my standard workflows.&lt;/p&gt;

&lt;p&gt;However, a few months ago I was given the opportunity to jump into a greenfield Golang project at work. I'd heard plenty of good things about Golang, so I dove right in.&lt;/p&gt;

&lt;p&gt;I've since fallen in love with the language, though Java is still where I feel most at home.&lt;/p&gt;

&lt;p&gt;However, while using Go I've come across gRPC usage more and more.&lt;/p&gt;

&lt;p&gt;So as a part of my continued learning, I developed this simple little test to see how the gRPC vs REST performance debate actually plays out within Java alone.&lt;/p&gt;

&lt;p&gt;This isn't an incredibly scientific experiment, but I feel like it at least provides somewhat clear results as to what one might expect when someone at your work starts pitching the new hotness (gRPC in this case) and swears that it will solve X or Y problem and have A or B performance benefits.&lt;/p&gt;

&lt;p&gt;I've been that guy before, and it always helps to have relevant and concrete results to show everyone to help sway your point.&lt;/p&gt;

&lt;p&gt;So with that out of the way, here's my silly little Java-based gRPC vs Rest performance experiment. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rest-vs-grpc-tldr"&gt;
  &lt;/a&gt;
  Rest vs gRPC tl;dr
&lt;/h2&gt;

&lt;p&gt;Before we get into the experiment and testing, here's a quick overview.&lt;/p&gt;

&lt;p&gt;RESTful APIs use HTTP 1.0/1.1 and include usage of HTTP Verbs (ex. GET/POST/DELETE) to transmit messages from client to server. Most servers will expose endpoints that expect specific headers and verbs and utilize the incoming data to perform operations. Data is commonly in JSON format, which Java code deserializes into Java objects for usage within the application.&lt;/p&gt;

&lt;p&gt;gRPC on the other hand, utilizes HTTP/2 and protocol buffers, which can be simplified into binary over HTTP. The protocol buffers describe the length of the components in the binary stream. So rather than delineate data with JSON tokens (such as { , and " ), the data streams as binary and is parsed using known sizes of expected data types. This is then deserialized into Java objects.&lt;/p&gt;

&lt;p&gt;Ok, there's an oversimplified overview, onto the test details.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test-data-and-layout"&gt;
  &lt;/a&gt;
  Test Data and layout
&lt;/h2&gt;

&lt;p&gt;The intention of this test was to give some samples of gRPC vs Rest performance, specifically. This is one of the more commonly cited reasons to switch to gRPC, as data is smaller as a binary stream than a json object.&lt;/p&gt;

&lt;p&gt;This test was implemented using exactly 2 JVM applications. One is a Spring Boot application that contains RestController annotated classes to handle inputs and also contains a client that uses Spring Webflux's WebClient to make blocking API calls to the RestController.&lt;/p&gt;

&lt;p&gt;The second application is a native Java application that uses io.grpc libraries to define a gRPC client and server.&lt;/p&gt;

&lt;p&gt;These applications were deployed in two locations and run as runnable jars. Both were deployed on a local desktop as well as an AWS EC2 instance. Details for both are included in the next section.&lt;/p&gt;

&lt;p&gt;The test is as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Use randomly generated data in a specific format that is identical in the gRPC and Rest testing&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Send increasing numbers of requests in order to see how the processing scales&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;represent semi-real world performance by making calls from a local system to a datacenter at least 200 miles away.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is a sample layout of the Rest JSON template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
{
    "car": {
        "make": "toyota",
        "model": "corolla",
        "trim": "4DR Sedan",
        "color": "gray",
        "year": 2012,
        "mileage": 120000
    },
    "driver": {
        "firstname": "John",
        "lastname": "Smith",
        "driverId": "someId"
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the proto definition for the gRPC messages&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
syntax = "proto3";
option java_multiple_files = true;

message Message {

    message Car {
        string make = 1;
        string model = 2;
        string trim = 3;
        string color = 4;
        uint32 year = 5;
        uint32 mileage = 6;
    }

    message Driver {
        string firstname = 1;
        string lastname = 2;
        string driverId = 3;
    }

    Car car = 1;
    Driver driver = 2;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are functionally identical, and would be an example of what a transition from an existing Rest API to a replacement gRPC api might look like.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test-machines"&gt;
  &lt;/a&gt;
  Test machines
&lt;/h2&gt;

&lt;p&gt;The remote machine where the gRPC and Rest servers were running were t2.small EC2 instance machines. These were generic non-spot, non-dedicated t2.small instances that had all TCP and UDP traffic exposed. With a whitelisting for the local test machine that would be hitting it.&lt;/p&gt;

&lt;p&gt;JVM Applications were run locally using the Windows 10 x64 OpenJDK, version 11.0.11. Remote JVMs were run using java-11-amazon-cordetto on a AWS Linux 2 OS.&lt;/p&gt;

&lt;p&gt;The local test machine was my own personal development desktop. This system contains a Ryzen 3700x and 64GB of 3200ghz Memory. More than overkill for running the tests described above.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results
&lt;/h2&gt;

&lt;p&gt;Each test was run (from local to ec2) 10 times and the average taken. This were for sequential requests across Rest and gRPC as seen in the columns below.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;1000 (requests)&lt;/th&gt;
&lt;th&gt;2000 (requests)&lt;/th&gt;
&lt;th&gt;3000 (requests)&lt;/th&gt;
&lt;th&gt;4000 (requests)&lt;/th&gt;
&lt;th&gt;5000 (requests)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;gRPC&lt;/td&gt;
&lt;td&gt;14478ms&lt;/td&gt;
&lt;td&gt;25239ms&lt;/td&gt;
&lt;td&gt;37823ms&lt;/td&gt;
&lt;td&gt;53073ms&lt;/td&gt;
&lt;td&gt;62624ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rest&lt;/td&gt;
&lt;td&gt;16451ms&lt;/td&gt;
&lt;td&gt;30181ms&lt;/td&gt;
&lt;td&gt;43996ms&lt;/td&gt;
&lt;td&gt;58221ms&lt;/td&gt;
&lt;td&gt;71300ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;There's a couple things we want to review as a part of these results. They are subsectioned below!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-much-slower-is-rest-at-each-request-amount"&gt;
  &lt;/a&gt;
  How much slower is Rest at each request amount
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;requests&lt;/th&gt;
&lt;th&gt;percent slower&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;13.6% slower&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2000&lt;/td&gt;
&lt;td&gt;19.5% slower&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3000&lt;/td&gt;
&lt;td&gt;16% slower&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4000&lt;/td&gt;
&lt;td&gt;9% slower&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5000&lt;/td&gt;
&lt;td&gt;13% slower&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;We can confidently say that gRPC will always be faster than Rest calls. This aligns with the implementation details around gRPC, specifically binary streams over JSON, binary parsing vs marshaling, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-was-the-correlation-between-increase-in-requests-and-completion-time-for-rest-and-grpc"&gt;
  &lt;/a&gt;
  What was the correlation between increase in requests and completion time for Rest and gRPC
&lt;/h3&gt;

&lt;p&gt;Good question! So for each increase in requests, we would expect to see a linear increase in processing time to get through those messages. Ie, twice the messages should take twice as long. Let's see if that was actually the case.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;0-1000&lt;/th&gt;
&lt;th&gt;1000-2000&lt;/th&gt;
&lt;th&gt;2000-3000&lt;/th&gt;
&lt;th&gt;3000-4000&lt;/th&gt;
&lt;th&gt;4000-5000&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;gRPC&lt;/td&gt;
&lt;td&gt;baseline&lt;/td&gt;
&lt;td&gt;74% longer&lt;/td&gt;
&lt;td&gt;49% longer&lt;/td&gt;
&lt;td&gt;40% longer&lt;/td&gt;
&lt;td&gt;17% longer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rest&lt;/td&gt;
&lt;td&gt;baseline&lt;/td&gt;
&lt;td&gt;83% longer&lt;/td&gt;
&lt;td&gt;45% longer&lt;/td&gt;
&lt;td&gt;32% longer&lt;/td&gt;
&lt;td&gt;22% longer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Request % Increase&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;100%  more&lt;/td&gt;
&lt;td&gt;50% more&lt;/td&gt;
&lt;td&gt;33% more&lt;/td&gt;
&lt;td&gt;25% more&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Based on the results above, it's a bit hit or miss. Both Rest and gRPC roughly track the increase. Most of the time, the processing time increases at a faster rate than the request increases, which is good! It means we aren't exponentially taking more and more time to process more requests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-any-of-this-tell-us"&gt;
  &lt;/a&gt;
  What does any of this tell us?
&lt;/h2&gt;

&lt;p&gt;Outside of this specific test? Not a ton. It's a good example to use as a baseline, and a good simple experiment to compare the performance of the two paradigms.&lt;/p&gt;

&lt;p&gt;As one would expect, the repository is &lt;a href="https://github.com/StevenPG/RestVsgRpc"&gt;available on Github with all source code&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>java</category>
      <category>grpc</category>
      <category>rest</category>
      <category>spring</category>
    </item>
    <item>
      <title>Hardening E-Commerce APIs to Secure Billion-Dollar Retailers</title>
      <author>Niloufar Heidari</author>
      <pubDate>Sun, 12 Sep 2021 20:02:36 +0000</pubDate>
      <link>https://dev.to/fabric_commerce/hardening-e-commerce-apis-to-secure-billion-dollar-retailers-21l4</link>
      <guid>https://dev.to/fabric_commerce/hardening-e-commerce-apis-to-secure-billion-dollar-retailers-21l4</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jpIGniAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hubfs/retail-ecommerce-api-security.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jpIGniAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hubfs/retail-ecommerce-api-security.png" alt="Alt text of image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At fabric we are building a &lt;a href="https://resources.fabric.inc/blog/glossary/modular-commerce"&gt;modular&lt;/a&gt; and &lt;a href="https://resources.fabric.inc/blog/headless-commerce"&gt;headless&lt;/a&gt; commerce platform with the vision of becoming for commerce services what AWS is for web services, and due to the headless nature of our platform, APIs run the show. So much so that a multi-billion dollar equipment supplier just signed a multi-million dollar contract with us to consume our commerce APIs.&lt;/p&gt;

&lt;p&gt;API security was a concern before I joined fabric in January 2021, but as we attract more billion-dollar retailers such as Restoration Hardware, GNC, and Staples—including more general market interest with our recent $100M Series B—API security is now a high priority.&lt;/p&gt;

&lt;p&gt;In this post, I will show you our general approach for securing APIs to support these major retailers. But first, let’s briefly review why API security matters.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-is-api-security-important-in-retail"&gt;
  &lt;/a&gt;
  Why is API Security Important in Retail?
&lt;/h1&gt;

&lt;p&gt;At fabric we use APIs to connect internal platform services such as cart, checkout, and pricing, and external services such as Stripe (payments), Alavara (tax), and Algolia (search). These connections mean data transfer and compromised APIs are behind &lt;a href="https://www.cloudvector.com/api-data-breaches-in-2020/"&gt;major data breaches&lt;/a&gt;. With mainstream retail, personally identifiable and payment information is widely required to conduct trade and, as e-commerce grows, the attack surface grows with it.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://owasp.org/www-project-api-security/"&gt;API Security project by OWASP&lt;/a&gt; supports this:&lt;/p&gt;

&lt;p&gt;“A foundational element of innovation in today’s app-driven world is the API. From banks, retail and transportation to IoT, autonomous vehicles and smart cities, APIs can be found in customer-facing, partner-facing and internal applications. By nature, APIs expose application logic and sensitive data such as Personally Identifiable Information (PII) and because of this have increasingly become a target for attackers. Without secure APIs, rapid innovation would be impossible.”&lt;/p&gt;

&lt;p&gt;Below I will describe the tactics we use to secure our APIs. With these tactics, the &lt;a href="https://owasp.org/www-project-api-security/"&gt;top ten API security threats&lt;/a&gt; top ten API security threats identified by OWASP are directed. &lt;strong&gt;Note&lt;/strong&gt;: The OWASP API security project is nascent and needs contributors!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-we-secure-apis"&gt;
  &lt;/a&gt;
  How We Secure APIs
&lt;/h1&gt;

&lt;p&gt;These are the different &lt;a href="https://api.fabric.inc/"&gt;RESTful APIs we use&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Customer storefront APIs:&lt;/strong&gt; Our Storefront API protects e-commerce store frontends (including mobile apps). It is a modular, customizable, and secure API gateway that provides a single data source for all your UIs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Third-party APIs:&lt;/strong&gt; These are APIs provided by fabric to third-party vendors like Zendesk or RevCascade to access order and inventory modules. For example, mapping APIs are used to update inventory with new products from merchants.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Merchant application APIs:&lt;/strong&gt; This is a customer API that is unique for each customer.&lt;/p&gt;

&lt;p&gt;All of our API traffic is securely transmitted using HTTPS and modern TLS protocols. In addition to applying security best practices for data in transit via APIs, we take these security measurements:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#internal-vulnerability-testing"&gt;
  &lt;/a&gt;
  Internal Vulnerability Testing
&lt;/h1&gt;

&lt;p&gt;Using vulnerability assessment tools (e.g. &lt;a href="https://www.ibm.com/security/security-intelligence/qradar"&gt;QRadar&lt;/a&gt;, &lt;a href="//qualys.com"&gt;Qualys&lt;/a&gt;, and &lt;a href="https://www.tenable.com/products/nessus"&gt;Nessus&lt;/a&gt;) and considering new security enhancements throughout the software development life cycle (SDLC) is essential for keeping APIs secure. At fabric, our continuous vulnerability management process makes security a key aspect of API development.&lt;/p&gt;

&lt;p&gt;Security tooling is part of our CI/CD pipeline and automated security-focused unit tests run against every deployment. Additionally, we run monthly vulnerability scans to identify and categorize API security issues for all of our customers. If we identify any critical security vulnerabilities, they’re patched within a week.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thirdparty-pen-tests"&gt;
  &lt;/a&gt;
  Third-Party Pen Tests
&lt;/h1&gt;

&lt;p&gt;Third-party penetration tests reputable firms (e.g. &lt;a href="https://www.trustwave.com/en-us/company/about-us/spiderlabs/"&gt;SpiderLabs&lt;/a&gt;, &lt;a href="https://cobalt.io/"&gt;Cobalt&lt;/a&gt;, and &lt;a href="https://www.fireeye.com/"&gt;FireEye&lt;/a&gt;) provide an objective expert analysis of a system’s security. A third-party pen test can expose vulnerabilities an internal audit and automated testing alone can miss.&lt;/p&gt;

&lt;p&gt;In addition to leveraging automated scanning tools, third-party pen testers provide the human expertise necessary to identify misconfigurations and exploits that could otherwise go unnoticed. &lt;/p&gt;

&lt;p&gt;For example, automated tooling is great at identifying common vulnerabilities and exposures (CVEs), but an attack that exploits business logic in an e-commerce site’s frontend APIs may go undetected. Simply put: third-party testing manipulates and attempts to hack an API in the same ways a real attacker would. This human perspective makes it possible to detect and correct misconfigurations and logic flaws before an attacker exploits them.&lt;/p&gt;

&lt;p&gt;At fabric, we conduct third-party pen tests for our entire API annually and before every major release.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#authentication-and-authorization"&gt;
  &lt;/a&gt;
  Authentication and Authorization
&lt;/h1&gt;

&lt;p&gt;Validating users are who they say they are (authentication) and only allowing access to resources they have permissions for (authorization) is fundamental to API security. fabric authenticates users and then provides them with a &lt;a href="https://jwt.io/introduction"&gt;JSON Web Token (JWT)&lt;/a&gt;.  Authorization of those requests is secured using Okta’s implementation of the industry-standard &lt;a href="https://developer.okta.com/docs/reference/api/oidc/"&gt;OAuth 2.0 protocol&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;End-to-end, the process works like this:&lt;/p&gt;

&lt;p&gt;A client sends credentials (username and password) to the fabric login API.&lt;/p&gt;

&lt;p&gt;The credentials are verified by comparing what the client provides to a salted hash. (Credentials are encrypted using a robust hashing algorithm.) &lt;/p&gt;

&lt;p&gt;If the credentials are valid, the API signs and returns a JWT. If the credentials are invalid, the login request is rejected. Rate-limiting on the login API prevents brute force attacks.&lt;/p&gt;

&lt;p&gt;The client verifies the token and sends the signed token with every subsequent request. This eliminates the need for the client to include credentials for any other requests in the session.&lt;/p&gt;

&lt;p&gt;OAuth 2.0 authorization ensures that the client can only access API endpoints they have adequate permissions for. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#api-throttling"&gt;
  &lt;/a&gt;
  API Throttling
&lt;/h1&gt;

&lt;p&gt;DDoS attacks can prevent an e-commerce site from processing legitimate orders and are one of the &lt;a href="https://www.infosecurity-magazine.com/news/ddos-online-four/"&gt;biggest threats facing large retailers&lt;/a&gt;. API throttling allows us to limit the number of API requests per second and prevent DDoS from bringing a site down. &lt;/p&gt;

&lt;p&gt;Of course, with any throttling, there is the risk of false positives. To mitigate this risk, we use automation to optimize the throttling of APIs and reduce false positives while still providing protection from malicious attacks. Additionally, limits are based on both steady-state rates and bursts to account for different behaviour patterns. &lt;/p&gt;

&lt;p&gt;To implement API throttling, we use &lt;a href="https://aws.amazon.com/api-gateway/"&gt;AWS API Gateway&lt;/a&gt;. At a high level, the throttling process works like this:&lt;/p&gt;

&lt;p&gt;Clients call an API.&lt;/p&gt;

&lt;p&gt;If the number of requests is less than the throttling limit, the request is processed normally.&lt;/p&gt;

&lt;p&gt;If the number of requests exceeds the throttling limit, the user receives an error and must wait to send additional requests.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#api-keys"&gt;
  &lt;/a&gt;
  API Keys
&lt;/h1&gt;

&lt;p&gt;Like API throttling, API keys help limit abuse of our API and protect e-commerce sites that depend on it. API keys include a unique identifier (key ID) that allows us to meter access and prevent attacks. &lt;/p&gt;

&lt;p&gt;Keys are created for each fabric customer and tied to specific entities. Clients must include a key ID and secret key in their requests. By tracking key IDs, we can hone in on malicious behaviour and block it at the source. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#cors-support"&gt;
  &lt;/a&gt;
  CORS Support
&lt;/h1&gt;

&lt;p&gt;By default, modern web clients only allow servers to execute scripts from their own &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Origin"&gt;origin&lt;/a&gt; (an origin is a domain, scheme, or port). This is known as the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"&gt;same-origin policy&lt;/a&gt;. From a security perspective, the same-origin policy has obvious benefits. For example, it prevents a malicious site from executing JavaScript that reads data from another webpage a user is logged into. &lt;/p&gt;

&lt;p&gt;Of course, there are plenty of legitimate reasons a site or API may need to call resources with a different origin. &lt;a href="https://blog.stackpath.com/glossary-cross-origin-resource-sharing/"&gt;Cross-Origin Resource Sharing (CORS)&lt;/a&gt; solves this problem and allows servers to securely access resources from specific, pre-defined domains.&lt;/p&gt;

&lt;p&gt;To implement CORS, we use the &lt;a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/example-function-add-cors-header-response.html"&gt;AWS CloudFront CDN&lt;/a&gt; and &lt;a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-cors.html"&gt;AWS CORS&lt;/a&gt; for our REST APIs. Our implementation ensures only authorized cross-origin scripts can be executed.&lt;/p&gt;

&lt;p&gt;Here’s a simple example of how we use CORS in practice:&lt;/p&gt;

&lt;p&gt;A client uses the fabric Commerce API gateway to load their website from an S3 Bucket at example.website.s3.us-east-1.amazonaws.com.&lt;/p&gt;

&lt;p&gt;To load resources and allow users to interact with the online store and shop, the site uses JavaScript to make authenticated HTTP GET and PUT requests against the same example.website.s3.us-east-1.amazonaws.com bucket.&lt;/p&gt;

&lt;p&gt;Typically, a modern web browser would block the requests to example.website.s3.us-east-1.amazonaws.com because they’re from a different origin. However, with CORS, we can explicitly allow specific cross-origin requests (in this case, example.website.s3.us-east-1.amazonaws.com), and the site will work as intended.  &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;What we’ve discussed here covers a majority of the API attack surface. Still, we also perform regular code security audits; maintain compliance with standards including &lt;a href="https://resources.fabric.inc/blog/ecommerce-pci-compliance"&gt;PCI DSS&lt;/a&gt;, SOC2 Type II, NIST 800, and OWASP Top 10; and implement robust identity and access management to secure our APIs.&lt;/p&gt;

&lt;p&gt;In addition to directing common API security issues, &lt;a href="https://fabric.inc/knowledgebase/start/security-compliance"&gt;we document our security approach&lt;/a&gt; to help customers understand how their data and the data of their customers is protected when using our commerce platform.&lt;/p&gt;

&lt;p&gt;If you’re developing an API-based platform for retailers (or for users within another industry), implementing the tactics described in this blog post will harden the platform instances you deploy for your customers. It will also secure shopping-related data at scale and help your customers earn trust among shoppers in this evolving digital landscape.&lt;/p&gt;

</description>
      <category>apisecurity</category>
      <category>ecommerce</category>
      <category>b2b</category>
      <category>onlineshopping</category>
    </item>
    <item>
      <title>Days of Code [3]</title>
      <author>Ronaldo Peres</author>
      <pubDate>Sun, 12 Sep 2021 19:36:41 +0000</pubDate>
      <link>https://dev.to/ronaldoperes/days-of-code-3-2l4l</link>
      <guid>https://dev.to/ronaldoperes/days-of-code-3-2l4l</guid>
      <description>&lt;p&gt;Hi everyone,&lt;/p&gt;

&lt;p&gt;Now i have this one:&lt;/p&gt;

&lt;p&gt;"You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.&lt;br&gt;
"&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-example"&gt;
  &lt;/a&gt;
  1 Example
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Input: digits = [1, 2, 3]&lt;/li&gt;
&lt;li&gt;Output: digits = [1, 2, 4]&lt;/li&gt;
&lt;li&gt;Explanation: The array represents the integer 123.&lt;/li&gt;
&lt;li&gt;Incrementing by one gives 123 + 1 = 124.&lt;/li&gt;
&lt;li&gt;Thus, the result should be [1,2,4].&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#2-example"&gt;
  &lt;/a&gt;
  2 Example
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Input: digits = [4,3,2,1]&lt;/li&gt;
&lt;li&gt;Output: [4,3,2,2]&lt;/li&gt;
&lt;li&gt;Explanation: The array represents the integer 4321.&lt;/li&gt;
&lt;li&gt;Incrementing by one gives 4321 + 1 = 4322.&lt;/li&gt;
&lt;li&gt;Thus, the result should be [4,3,2,2].&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#3-example"&gt;
  &lt;/a&gt;
  3 Example
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Input: digits = [9,9,9]&lt;/li&gt;
&lt;li&gt;Output: [1,0,0,0]&lt;/li&gt;
&lt;li&gt;Explanation: The array represents the integer 99.&lt;/li&gt;
&lt;li&gt;Incrementing by one gives 999 + 1 = 1000.&lt;/li&gt;
&lt;li&gt;Thus, the result should be [1,0,0,0].&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  Constraints:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= digits.length &amp;lt;= 100&lt;/li&gt;
&lt;li&gt;0 &amp;lt;= digits[i] &amp;lt;= 9&lt;/li&gt;
&lt;li&gt;digits does not contain any leading 0's. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#observations"&gt;
  &lt;/a&gt;
  Observations
&lt;/h3&gt;

&lt;p&gt;Need to figure out how to solve this one without converting to int or long, since the array can pass the MaxValue, for example:&lt;/p&gt;

&lt;p&gt;The int.Maxvalue = 2147483647;&lt;/p&gt;

&lt;p&gt;We can have this input:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Input: digits = [9,8,7,6,5,4,3,2,1,0]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So if you think to solve:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Join the array and get a string "9876543210"&lt;/li&gt;
&lt;li&gt;When parse it to int we get this, cause we pass the MaxValue:

&lt;ul&gt;
&lt;li&gt;System.OverflowException: 'Value was either too large or too small for an Int32.'&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is my solution:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PlusOneArray&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="nf"&gt;PlusOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;numOfNine&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;GetNines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numOfNine&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;

                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;numOfNine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;numOfNine&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;numOfNine&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;newDigits&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                    &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CopyTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newDigits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="n"&gt;digits&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newDigits&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;numOfNine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;GetNines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;--)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;++;&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also this is at my github:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ronaldoperes/Challenges/blob/master/LC/PlusOne.cs"&gt;Peres Github - Plus one&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy coding!!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>csharp</category>
      <category>algorithms</category>
      <category>challenge</category>
    </item>
    <item>
      <title>Autodeploy javascript library to npmjs via Github Actions</title>
      <author>Alexey Khrushch</author>
      <pubDate>Sun, 12 Sep 2021 19:22:54 +0000</pubDate>
      <link>https://dev.to/alexeykhr/autodeploy-javascript-library-to-npmjs-via-github-actions-3bfc</link>
      <guid>https://dev.to/alexeykhr/autodeploy-javascript-library-to-npmjs-via-github-actions-3bfc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;It's time to simplify and automate the release of our js library in npmjs using Github Actions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#project-initialization"&gt;Project initialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#automating-via-github-actions"&gt;Automating via Github Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#finalizing-the-result"&gt;Finalizing the result&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bonus-vuepress-documentation"&gt;Bonus: Vuepress documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reference"&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Node.js 14 version with yarn was used&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-initialization"&gt;
  &lt;/a&gt;
  Project initialization
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Let's create a project called &lt;code&gt;javascript-library-autodeploy&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;javascript-library-autodeloy &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;javascript-library-autodeploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Initialize &lt;code&gt;package.json&lt;/code&gt; and add a couple of libraries for our library to work.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn init
yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; webpack@5.51.1 webpack-cli@4.8.0 eslint@7.32.0 jest@27.1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes, this example will use Javascript Linter - &lt;a href="https://eslint.org/"&gt;ESLint&lt;/a&gt; and for running tests - &lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt;. We all write tests, right? :)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Final version of &lt;code&gt;package.json&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"@alexeykhr/javascript-library-autodeploy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"MIT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"webpack --mode=development"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"webpack --mode=production"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"jest"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"lint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eslint src"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eslint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^7.32.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"jest"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^27.1.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"webpack"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^5.51.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"webpack-cli"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.8.0"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Done, now let's add some logic to our library. In this example, it will be a simple function to add two numbers.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/index.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;And we will immediately cover this complex logic with tests.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// tests/sum.test.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../src/index&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1 + 2 = 3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;And add a couple more files: &lt;a href="https://raw.githubusercontent.com/Alexeykhr/javascript-library-autodeploy/main/.eslintrc.js"&gt;.eslintrc.js&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/Alexeykhr/javascript-library-autodeploy/main/.npmignore"&gt;.npmignore&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/Alexeykhr/javascript-library-autodeploy/main/.gitignore"&gt;.gitignore&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Done, there is a small project that can be built, added tests, linter, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#automating-via-github-actions"&gt;
  &lt;/a&gt;
  Automating via Github Actions
&lt;/h2&gt;

&lt;p&gt;In this step, we will create 2 &lt;a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions"&gt;Github Workflows&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first one will be executed after each code change in the Github repository, in any branch, and the second one will push our build into npmjs and Github Packages after the release.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Let's create the first Workflow to constantly check our code for a working build, Code Style and tests.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# .github/workflows/library.yml&lt;/span&gt;

&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Library&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;push&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;14.x'&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Get yarn cache directory path&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn-cache-dir-path&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo "::set-output name=dir::$(yarn cache dir)"&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/cache@v2&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn-cache&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ steps.yarn-cache-dir-path.outputs.dir }}&lt;/span&gt;
          &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}&lt;/span&gt;
          &lt;span class="na"&gt;restore-keys&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
            &lt;span class="s"&gt;${{ runner.os }}-yarn-&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn lint&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn test&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The workflow is as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Calling trigger on &lt;code&gt;push&lt;/code&gt; event&lt;/li&gt;
&lt;li&gt;Installing the latest Ubuntu&lt;/li&gt;
&lt;li&gt;Receive the code from Github&lt;/li&gt;
&lt;li&gt;Installing Node.js version 14&lt;/li&gt;
&lt;li&gt;Install js libraries and cache them until the &lt;code&gt;yarn.lock&lt;/code&gt; file changes&lt;/li&gt;
&lt;li&gt;Run a static code analyzer, tests and build&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this stage, we have already automated most of the work for checking Pull Requests.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now let's create a second &lt;code&gt;Workflow&lt;/code&gt;, which will release the build.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# .github/workflows/release.yml&lt;/span&gt;

&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Release&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;release&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;published&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;library&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;14.x'&lt;/span&gt;
          &lt;span class="na"&gt;registry-url&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;https://registry.npmjs.org'&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Get yarn cache directory path&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn-cache-dir-path&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo "::set-output name=dir::$(yarn cache dir)"&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/cache@v2&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn-cache&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ steps.yarn-cache-dir-path.outputs.dir }}&lt;/span&gt;
          &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}&lt;/span&gt;
          &lt;span class="na"&gt;restore-keys&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
            &lt;span class="s"&gt;${{ runner.os }}-yarn-&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm publish --access public&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;NODE_AUTH_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.NPM_TOKEN }}&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;registry-url&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;https://npm.pkg.github.com'&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm publish&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;NODE_AUTH_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The logic of this workflow is very similar to the previous workflow. The only difference is that it fires on the &lt;code&gt;release&lt;/code&gt; event, and instead of executing linters and tests,&lt;code&gt;npm publish&lt;/code&gt; is called for npmjs and Github Packages.&lt;/p&gt;

&lt;p&gt;But to work correctly, we need to add &lt;a href="https://docs.github.com/en/actions/reference/encrypted-secrets"&gt;Github Secrets&lt;/a&gt; to this repository called &lt;code&gt;NPM_TOKEN&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You don't need to add &lt;code&gt;GITHUB_TOKEN&lt;/code&gt;, it is already enabled by default - &lt;a href="https://docs.github.com/en/actions/reference/authentication-in-a-workflow#about-the-github_token-secret"&gt;&lt;code&gt;About the GITHUB_TOKEN secret&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to the page &lt;a href="https://www.npmjs.com/settings/SET_YOUR_LOGIN/tokens"&gt;https://www.npmjs.com/settings/SET_YOUR_LOGIN/tokens&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Click on &lt;code&gt;Generate New Token&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Choosing a type &lt;code&gt;Automation&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LRfMbqs---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmcqz8l6ksz5saxvi9fg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LRfMbqs---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmcqz8l6ksz5saxvi9fg.png" alt="generate-npm-token"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add it to our repository under the key &lt;code&gt;NPM_TOKEN&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Settings &amp;gt; Secrets &amp;gt; New Secret&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o8_qzr7u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o4bx01zd4xwkeura7p70.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o8_qzr7u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o4bx01zd4xwkeura7p70.png" alt="npm-token"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finalizing-the-result"&gt;
  &lt;/a&gt;
  Finalizing the result
&lt;/h2&gt;

&lt;p&gt;Ready! Now we can upload our code to the Github repository and immediately see that the first &lt;code&gt;Workflow&lt;/code&gt; is launched.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4AAPqUrZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9acphpob90jbdswg2cgh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4AAPqUrZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9acphpob90jbdswg2cgh.png" alt="git-push"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's try to create a new release. To do this, on the right sidebar, click on &lt;strong&gt;Releases&lt;/strong&gt;, and then &lt;strong&gt;Create a new release&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TpEKjCrQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h1rzubszy6dl1wwww5ks.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TpEKjCrQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h1rzubszy6dl1wwww5ks.png" alt="first-release"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;release&lt;/code&gt; event was triggered, and now we can watch how our project is being built and uploaded to the npmjs resource.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D6YynArA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4ow6s9szk9rxfr3sbf5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D6YynArA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4ow6s9szk9rxfr3sbf5.png" alt="github-workflow-release"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Done, here is our library: &lt;a href="https://www.npmjs.com/package/@alexeykhr/javascript-library-autodeploy"&gt;@alexeykhr/javascript-library-autodeploy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also notice that the library has appeared in the &lt;code&gt;Packages&lt;/code&gt; sidebar block.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-vuepress-documentation"&gt;
  &lt;/a&gt;
  Bonus: Vuepress documentation
&lt;/h2&gt;

&lt;p&gt;And of course, how can it be without documentation, I took the first thing that came to hand - this is &lt;a href="https://vuepress.vuejs.org/"&gt;Vuepress&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The documentation will live in the current repository, and of course, the build process will be done for us by Github.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Let's start by adding a &lt;code&gt;docs&lt;/code&gt; folder and initializing&lt;code&gt;package.json&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;docs &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;docs &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; yarn init
yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; vuepress@1.8.2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes, we make a separate &lt;code&gt;package.json&lt;/code&gt; so that the library versions do not conflict with each other (as, for example, webpack with a different major version). This way the library will not affect our core libraries in any way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"MIT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vuepress dev ."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vuepress build ."&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"vuepress"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^1.8.2"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Let's add a simple &lt;code&gt;docs/README.md&lt;/code&gt; file that will display the contents of the file.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gh"&gt;# VuePress&lt;/span&gt;

&amp;lt;&amp;lt;&amp;lt; @/../package.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;And some settings for &lt;code&gt;Vuepress&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// docs/.vuepress/config.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../package&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Version &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;version&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;/`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;My library name is the same as the name of the Github repository, so the base url is taken from package.json&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is enough to be able to build something, and for an explicit display of the build, we are publishing the version of the library in the documentation.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now let's update our Github Workflows.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In &lt;strong&gt;.github/workflows/library.yml&lt;/strong&gt; let's change the trigger so that it doesn't fire when we just edit the documentation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;*/**'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;!docs/**'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in &lt;strong&gt;.github/workflows/release.yml&lt;/strong&gt; add another job.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;docs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
  &lt;span class="na"&gt;defaults&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;working-directory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./docs&lt;/span&gt;
  &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;14.x'&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Get yarn cache directory path&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn-cache-dir-path&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo "::set-output name=dir::$(yarn cache dir)"&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/cache@v2&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn-cache&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ steps.yarn-cache-dir-path.outputs.dir }}&lt;/span&gt;
        &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ runner.os }}-yarn-docs-${{ hashFiles('yarn.lock') }}&lt;/span&gt;
        &lt;span class="na"&gt;restore-keys&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;${{ runner.os }}-yarn-docs-&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn build&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Commit changes&lt;/span&gt;
      &lt;span class="na"&gt;working-directory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./docs/.vuepress/dist&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;git config --global user.name "github-actions"&lt;/span&gt;
        &lt;span class="s"&gt;git config --global user.email "github-actions@github.com"&lt;/span&gt;
        &lt;span class="s"&gt;git init&lt;/span&gt;
        &lt;span class="s"&gt;git add -A&lt;/span&gt;
        &lt;span class="s"&gt;git commit -m "deploy"&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Push changes&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ad-m/github-push-action@master&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;github_token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
        &lt;span class="na"&gt;branch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gh-pages&lt;/span&gt;
        &lt;span class="na"&gt;force&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="na"&gt;directory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./docs/.vuepress/dist&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The logic is as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Runs &lt;code&gt;yarn install&lt;/code&gt; inside the&lt;code&gt;docs&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;Then the documentation is built&lt;/li&gt;
&lt;li&gt;The entire build is uploaded using force push under the &lt;code&gt;gh-pages&lt;/code&gt; branch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And these 2 jobs will run in parallel.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add new code, update the library version and push to Github.&lt;/li&gt;
&lt;li&gt;Add one more release to execute a new job&lt;/li&gt;
&lt;li&gt;It remains to add the &lt;code&gt;gh-pages&lt;/code&gt; branch to &lt;a href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt; to display the documentation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KaBdzd-B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m5q2xl76x5ysp5gv6p1i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KaBdzd-B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m5q2xl76x5ysp5gv6p1i.png" alt="github-pages"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Congratulations, we have automated a lot of our work, now there is no need to write huge scripts, what and why to perform at release. Sometimes forget to deploy code in npmjs :)&lt;/p&gt;

&lt;p&gt;But you can also automate even more, if, for example, you write according to &lt;a href="https://github.com/conventional-commits/conventionalcommits.org"&gt;Conventional Commits&lt;/a&gt;, you can also automate the creation of tags using the &lt;a href="https://github.com/conventional-changelog/standard-version"&gt;standard-version&lt;/a&gt; library.&lt;/p&gt;

&lt;p&gt;And use all sorts of tools, like &lt;a href="https://github.com/actions/labeler"&gt;actions/labeler&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Alexeykhr/javascript-library-autodeploy"&gt;Github repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/@alexeykhr/javascript-library-autodeploy"&gt;npmjs library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>github</category>
      <category>devops</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
