<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What is the difference between Amazon RDS Read Replicas vs Multi AZ</title>
      <author>Vijay Patel</author>
      <pubDate>Wed, 15 Dec 2021 16:16:52 +0000</pubDate>
      <link>https://dev.to/easyawslearn/what-is-the-difference-between-amazon-rds-read-replicas-vs-multi-az-350</link>
      <guid>https://dev.to/easyawslearn/what-is-the-difference-between-amazon-rds-read-replicas-vs-multi-az-350</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-relational-database-service-rds"&gt;
  &lt;/a&gt;
  What is Relational Database Service (RDS)
&lt;/h2&gt;

&lt;p&gt;Amazon Relational Database Service (Amazon RDS) makes it easy to set up, operate, and scale a relational database in the cloud. &lt;br&gt;
It provides cost-efficient and resizable capacity while automating time-consuming administration tasks such as hardware provisioning, database setup, patching and backups. &lt;br&gt;
It frees you to focus on your applications so you can give them the fast performance, high availability, security, and compatibility they need.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Here is the full dedicated video on this topic👇👇&lt;/code&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=70EJ-qSBBXQ"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ftvtuyYG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qljo37ti42q0k7at1ni.png" alt="Image description" width="480" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-amazon-rds-read-replicas"&gt;
  &lt;/a&gt;
  What is Amazon RDS Read Replicas?
&lt;/h2&gt;

&lt;p&gt;The read replica operates as a DB instance that allows only read-only connections. Applications connect to a read replica the same way they do to any DB instance. Amazon RDS replicates all databases in the source DB instance. The Oracle DB engine supports replica databases in mounted mode.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-amazon-rds-multi-az"&gt;
  &lt;/a&gt;
  What is Amazon RDS Multi AZ?
&lt;/h2&gt;

&lt;p&gt;RDS Multi-AZ. Amazon RDS Multi-AZ deployments provide enhanced availability for database instances within a single AWS Region. With Multi-AZ, your data is synchronously replicated to a standby instance in a different AZ.&lt;/p&gt;




&lt;p&gt;▬▬▬▬▬▬ WANT TO LEARN MORE? ▬▬▬▬▬▬&lt;br&gt;
Full Terraform tutorial ► &lt;a href="https://bit.ly/2GwK8V2"&gt;https://bit.ly/2GwK8V2&lt;/a&gt;&lt;br&gt;
DevOps Tools, like Ansible ► &lt;a href="https://bit.ly/3iASHuP"&gt;https://bit.ly/3iASHuP&lt;/a&gt;&lt;br&gt;
Docker Tutorial ► &lt;a href="https://bit.ly/3iAT9Jx"&gt;https://bit.ly/3iAT9Jx&lt;/a&gt;&lt;br&gt;
AWS Tutorial ► &lt;a href="https://bit.ly/3iAT9Jx"&gt;https://bit.ly/3iAT9Jx&lt;/a&gt;&lt;br&gt;
GCP Tutorial ► &lt;a href="https://bit.ly/3mwh412"&gt;https://bit.ly/3mwh412&lt;/a&gt;&lt;br&gt;
Jenkins Tutorials ► [&lt;a href="https://bit.ly/3iHnfv4"&gt;https://bit.ly/3iHnfv4&lt;/a&gt;]&lt;/p&gt;

</description>
      <category>aws</category>
      <category>database</category>
      <category>readreplica</category>
      <category>multiaz</category>
    </item>
    <item>
      <title>JMeter 5.4.1 fix for Security CVE-2021-44228 issue</title>
      <author>Boga Sebastian Nicolae</author>
      <pubDate>Wed, 15 Dec 2021 15:59:31 +0000</pubDate>
      <link>https://dev.to/sebiboga/jmeter-541-fix-for-security-cve-2021-44228-issue-4joc</link>
      <guid>https://dev.to/sebiboga/jmeter-541-fix-for-security-cve-2021-44228-issue-4joc</guid>
      <description>&lt;p&gt;In case you installed on Windows, JMeter 5.4.1 from the Github repo: &lt;a href="https://github.com/sebiboga/install-jmeter-windows"&gt;install-jmeter-windows&lt;/a&gt;, by now you should know that you are impacted by Security issue CVE-2021-44228 because JMeter is a JAVA application&lt;/p&gt;

&lt;p&gt;Here you can find an automatic tool that will fix your vulnerability by downloading the log4j version 2.16&lt;/p&gt;

&lt;p&gt;STEPS:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;STOP JMeter GUI&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;download Release v01 from here: &lt;a href="https://github.com/sebiboga/jmeter-fix-cve-2021-44228-windows/releases/tag/v01"&gt;https://github.com/sebiboga/jmeter-fix-cve-2021-44228-windows/releases/tag/v01&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;unzip the Release&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;double click on cve-2021-44228.bat&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;In case you didn't installed JMeter in C:\JMeter\apache-jmeter-5.4.1, you'll have to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; EDIT the bat file and on row 2, update your location where JMeter is installed;&lt;/li&gt;
&lt;li&gt;then update all copy commands with correct destination folder&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the batch file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@echo off
cd C:\JMeter\apache-jmeter-5.4.1\lib
del log4j*.*
md C:\JMeter\cve-2021-4428

powershell -command "Invoke-WebRequest   -Uri 'https://dlcdn.apache.org/logging/log4j/2.16.0/apache-log4j-2.16.0-bin.zip' -OutFile 'C:\JMeter\cve-2021-4428\apache-log4j-2.16.0-bin.zip'"
powershell -command "Expand-Archive -Force 'C:\JMeter\cve-2021-4428\apache-log4j-2.16.0-bin.zip' 'C:\JMeter\cve-2021-4428'"
copy C:\JMeter\cve-2021-4428\apache-log4j-2.16.0-bin\log4j-1.2-api-2.16.0.jar  C:\JMeter\apache-jmeter-5.4.1\lib\*.*
copy C:\JMeter\cve-2021-4428\apache-log4j-2.16.0-bin\log4j-api-2.16.0.jar  C:\JMeter\apache-jmeter-5.4.1\lib\*.*
copy C:\JMeter\cve-2021-4428\apache-log4j-2.16.0-bin\log4j-core-2.16.0.jar  C:\JMeter\apache-jmeter-5.4.1\lib\*.*
copy C:\JMeter\cve-2021-4428\apache-log4j-2.16.0-bin\log4j-slf4j-impl-2.16.0.jar  C:\JMeter\apache-jmeter-5.4.1\lib\*.*
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Have a nice day!&lt;/p&gt;

</description>
      <category>jmeter</category>
      <category>cve202144228</category>
      <category>security</category>
    </item>
    <item>
      <title>Github Copilot offends developers with this joke</title>
      <author>Virej Dasani</author>
      <pubDate>Wed, 15 Dec 2021 15:41:18 +0000</pubDate>
      <link>https://dev.to/virejdasani/github-copilot-offends-developers-with-this-joke-4p78</link>
      <guid>https://dev.to/virejdasani/github-copilot-offends-developers-with-this-joke-4p78</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/SFBSbAJBTOM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>ai</category>
      <category>github</category>
    </item>
    <item>
      <title>Scrape Your First Website in Minutes with Python</title>
      <author>Saji Wang</author>
      <pubDate>Wed, 15 Dec 2021 15:33:02 +0000</pubDate>
      <link>https://dev.to/sewangco/scrape-your-first-website-in-minutes-with-python-2lo7</link>
      <guid>https://dev.to/sewangco/scrape-your-first-website-in-minutes-with-python-2lo7</guid>
      <description>&lt;p&gt;Ever felt the need to pull out data from a website? What would you do? Visit the sites one after the other and gather information?&lt;/p&gt;

&lt;p&gt;Well that would work if you have a page or two. However, if you have lots of them, manual extraction will become too difficult a task; this is where web scraping comes to the rescue!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#what-is-web-scraping"&gt;
  &lt;/a&gt;
  What is web scraping?
&lt;/h3&gt;

&lt;p&gt;Web scraping, as the name suggests, is a method of extracting data from web pages in an automated fashion. Scraping is super helpful in price comparisons, R&amp;amp;D, gathering data from social media, job listings, and more.&lt;/p&gt;

&lt;p&gt;Many methods can be used to perform web scraping such as online services, APIs, or even writing your own script. And that’s why we are here. This article will teach you the basics of how to scrape data from the web. Before we get into that, let’s take a quick look at why we would even want to scrape data from the web.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#why-do-we-need-web-scraping"&gt;
  &lt;/a&gt;
  Why do we need web scraping?
&lt;/h3&gt;

&lt;p&gt;Websites, in general, have huge quantities of information. This information is mostly unstructured or cluttered. When users visit a website they only need a small percentage of what’s available. &lt;/p&gt;

&lt;p&gt;While they can manually access it, the process is quite cumbersome, especially when repetition is involved (given that the data is dynamic and updated frequently). Hence, the need for web scraping.  &lt;/p&gt;

&lt;p&gt;Once the script is set up for a particular webpage, it can be executed any number of times to extract data and use it as required.&lt;/p&gt;

&lt;p&gt;Let’s get started!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#web-scraping-demo"&gt;
  &lt;/a&gt;
  Web scraping demo
&lt;/h3&gt;

&lt;p&gt;This  script will extract weather data from  a webpage and save it to a &lt;code&gt;.csv&lt;/code&gt; file. We will be using the following libraries to help us with the scraping and managing the extracted data:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Requests - This library is required to send an HTTP request to the web page. This will give us access to the HTML content of the webpage we want to scrape.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Beautiful Soup - This library gives us functions to help extract data from the HTML content we receive when we send an HTTP request.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pandas - This library helps us manage the data that has been extracted. In this case we will use it to save our data to a &lt;code&gt;.csv&lt;/code&gt; file.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In case you don’t have the aforementioned libraries installed, follow the commands given below to install them:&lt;/p&gt;

&lt;p&gt;**Installing BeautifulSoup&lt;br&gt;
&lt;code&gt;pip install beautifulsoup4&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installing requests&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;pip install requests&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installing Pandas&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;pip install pandas&lt;/code&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#writing-the-code"&gt;
  &lt;/a&gt;
  Writing the Code
&lt;/h3&gt;

&lt;p&gt;Once you have the libraries installed, follow the steps given below to scrape data from web in python3&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Start by importing all the libraries.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Send an HTTP request to the webpage using its URL. Make sure the response code is 200 which means the request was successful.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use the BeautifulSoup function to extract the raw HTML from the response received.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;From the raw HTML, extract the data we need using different selectors. The selectors used here are ‘class’ and ‘id’.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Save the extracted data into a pandas dataframe in the form of a python dictionary.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Save the dataframe to a csv file. Note: We are using the utf-16BE encoding to render the degree symbol properly in the csv file.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Once you have your code ready, you can deploy it directly to the cloud using &lt;a href="https://link.codesphere.com/GX"&gt;Codesphere&lt;/a&gt;. Codesphere let’s you avoid the hassle of config so that you can spend more time doing what you do best: Actually coding!&lt;/p&gt;

&lt;p&gt;Let us know what you’re going to scrape down below!&lt;/p&gt;

&lt;p&gt;Till then, happy coding.&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Setting up TailwindCSS 3.0 on a Laravel project</title>
      <author>Erika Heidi</author>
      <pubDate>Wed, 15 Dec 2021 15:31:43 +0000</pubDate>
      <link>https://dev.to/sourcegraph/setting-up-tailwindcss-30-on-a-laravel-project-1cb8</link>
      <guid>https://dev.to/sourcegraph/setting-up-tailwindcss-30-on-a-laravel-project-1cb8</guid>
      <description>&lt;p&gt;In the &lt;a href="https://dev.to/sourcegraph/creating-a-new-laravel-application-with-sail-and-docker-no-php-required-4c2n"&gt;first part of our series&lt;/a&gt;, we saw how to bootstrap a new Laravel application with &lt;a href="https://laravel.com/docs/8.x/sail"&gt;Sail&lt;/a&gt; and Docker. This allows you to develop a Laravel application without having to set up a PHP development environment on your system.&lt;/p&gt;

&lt;p&gt;With the base application up and running, the second part of our livestreaming series was focused on setting up a basic blog layout using TailwindCSS. In this post, you'll see a recap with all steps executed during the live session, so that you can reproduce them at your own pace.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preparation"&gt;
  &lt;/a&gt;
  Preparation
&lt;/h2&gt;

&lt;p&gt;Before moving along, make sure you have followed all steps in the &lt;a href="https://dev.to/sourcegraph/creating-a-new-laravel-application-with-sail-and-docker-no-php-required-4c2n"&gt;first tutorial of the series&lt;/a&gt; in order to bootstrap your Laravel application and development environment. This will require you to have Docker, Curl, and Git installed on your system.&lt;/p&gt;

&lt;p&gt;If you haven't yet, bring your environment up with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./vendor/bin/sail up &lt;span class="nt"&gt;-d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will start up your environment and keep it running in the background. Your Laravel application should now be available at &lt;code&gt;http://localhost&lt;/code&gt;. Open this URL on your browser and you'll see a page like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--umxqQ4rk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uoci8k1kpbpbcr12rur7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--umxqQ4rk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uoci8k1kpbpbcr12rur7.png" alt="Laravel welcome page" width="880" height="409"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For convenience, you may want to create an alias to execute Sail from the application's root directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;ln&lt;/span&gt; &lt;span class="nt"&gt;-s&lt;/span&gt; ./vendor/bin/sail sail
&lt;span class="nb"&gt;chmod&lt;/span&gt; +x sail
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can run Sail like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./sail artisan
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will run Artisan on the application container.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-installing-and-configuring-tailwindcss-3-with-laravel"&gt;
  &lt;/a&gt;
  1. Installing and configuring TailwindCSS 3 with Laravel
&lt;/h2&gt;

&lt;p&gt;Start by installing the frontend dependencies via NPM. The &lt;code&gt;npm&lt;/code&gt; command is available as a shortcut with Laravel Sail:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./sail npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, install TailwindCSS with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./sail npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-D&lt;/span&gt; tailwindcss postcss autoprefixer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, run the following command to generate your Tailwind configuration file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./sail npx tailwindcss init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you'll need to tell Laravel that you want to compile Tailwind resources using Laravel Mix. Open the &lt;code&gt;webpack.mix.js&lt;/code&gt; file (located at the root of your application) and include &lt;code&gt;tailwindcss&lt;/code&gt;  as a postCss plugin. This is how your &lt;code&gt;mix.js&lt;/code&gt; definition should look like when you're finished:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;webpack.mix.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;mix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;resources/js/app.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;public/js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postCss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;resources/css/app.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;public/css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tailwindcss&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, you should update your &lt;code&gt;tailwind.config.js&lt;/code&gt; file to include the paths to all your template resources. The following example will include all blade templates and JS files in your &lt;code&gt;resources&lt;/code&gt; folder:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;tailwind.config.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./resources/**/*.blade.php&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./resources/**/*.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is to import all &lt;code&gt;@tailwindcss&lt;/code&gt; component layers into your application's CSS. Open the &lt;code&gt;resources/css/app.css&lt;/code&gt; file and include the following content:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;resources/css/app.css&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;utilities&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The configuration is done. You can now run the command that will watch for changes in your frontend resources and build assets in real time while you develop your application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./sail npm run watch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will block your terminal. You can stop it at any time with &lt;code&gt;CTRL&lt;/code&gt;+&lt;code&gt;C&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-creating-a-basic-blog-template"&gt;
  &lt;/a&gt;
  2. Creating a basic blog template
&lt;/h2&gt;

&lt;p&gt;Now that your setup is complete, you can start building the frontend of your application. For this demo, we're building a basic blog template with a main column and a sidebar on the right.&lt;/p&gt;

&lt;p&gt;A good idea to get started is to search for a &lt;a href="https://www.sitepoint.com/a-basic-html5-template/"&gt;basic HTML5 boilerplate code / template&lt;/a&gt; and build from there.&lt;/p&gt;

&lt;p&gt;After some experimentation, we built the following template during the &lt;a href="https://twitch.tv/sourcegraph"&gt;livestreaming session&lt;/a&gt;. Save this content to a file named &lt;code&gt;index.blade.php&lt;/code&gt; in your &lt;code&gt;resources/views&lt;/code&gt; folder:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;resources/views/index.blade.php&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;My DEV Blog&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"My DEV Blog"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"author"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Sourcegraph"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:title"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"A headless blog in Laravel"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:type"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"website"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:url"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"https://github.com/sourcegraph-community/laravel-dev-blog"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"A demo Laravel blog"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{{ asset('css/app.css') }}"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bg-gradient-to-r from-blue-600 via-pink-500 to-purple-900"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container text-white mx-auto mt-6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid grid-cols-3 gap-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-3xl"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;My DEV Blog&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-span-2 text-right"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                menu
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container mx-auto px-6 py-10 bg-gray-100 my-10 text-gray-600 rounded-md shadow-md"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid grid-cols-4 gap-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-span-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mb-10"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://picsum.photos/1000/420"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Post header image"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"rounded-lg my-4"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-3xl"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This is the title of my first post&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

                    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is the description bnablab alba lbal ablabla blab al.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"my-10"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://picsum.photos/1000/420?sjdj"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Post header image"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"rounded-lg my-4"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-3xl"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This is the title of my second post&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

                    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is the description bnablab alba lbal ablabla blab al.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-gray-400 text-xl"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Categories&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

                &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Linux&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;PHP&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Development&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Devops&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Career&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see from the code, apart from the &lt;code&gt;asset&lt;/code&gt; call, the rest is purely HTML and CSS styled with TailwindCSS descriptive classes.&lt;/p&gt;

&lt;p&gt;After saving the template, open your &lt;code&gt;routes/web.php&lt;/code&gt; file and update your main route definition so that it renders your new template instead of the default Laravel welcome page. This is how the file should look like once you're done:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;routes/web.php&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'index'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save the file. If you reload your browser now, you should see a page like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pvr_0sbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54zmfaypzgtry344muso.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pvr_0sbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54zmfaypzgtry344muso.png" alt="screenshot application with basic blog template built with tailwind css" width="880" height="677"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In a later part of this series, we'll turn this skeleton into an actual dynamic template, using more advanced Blade features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Installing TailwindCSS 3.0 within a Laravel project requires a few configuration steps, but once you get the build command running, you can greatly speed up your frontend development process by making use of the advanced features of Tailwind 3, including just-in-time processing for super fast build times, as well as many other &lt;a href="https://tailwindcss.com/blog/tailwindcss-v3"&gt;features included in the newest version&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the next part of this series, we'll move to the backend and create an Artisan command to import posts from a DEV user profile.&lt;/p&gt;

&lt;p&gt;You can follow &lt;a href="https://twitch.tv/sourcegraph"&gt;Sourcegraph on Twitch&lt;/a&gt; to be notified when we go live.&lt;/p&gt;

</description>
      <category>css</category>
      <category>php</category>
      <category>laravel</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Windows 11 Taskbar sucks [Solved]</title>
      <author>Costin Manda</author>
      <pubDate>Wed, 15 Dec 2021 15:27:28 +0000</pubDate>
      <link>https://dev.to/costinmanda/windows-11-taskbar-sucks-solved-1jo2</link>
      <guid>https://dev.to/costinmanda/windows-11-taskbar-sucks-solved-1jo2</guid>
      <description>&lt;p&gt;Original post at: &lt;a href="https://siderite.dev/blog/windows-11-taskbar-sucks-solved"&gt;https://siderite.dev/blog/windows-11-taskbar-sucks-solved&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today I saw a Windows Update message that I can install Windows 11 on my computer. Great! I let it install and all went without a hitch. I don't see any problems with it, my software works fine, the only problem is that the taskbar icons are in the middle of the screen rather than to the left and it has that default setting of huge annoying icons instead of text, grouping all windows of the same type and so on. Simple, just go to settings, right?&lt;/p&gt;

&lt;p&gt;Wrong! Windows 11 now comes with a taskbar with LESS options than before. If you continue using it you will have to live with grouped apps under huge icons, with no recourse whatsoever!&lt;/p&gt;

&lt;p&gt;Luckily, &lt;a href="https://www.pcworld.com/article/549576/the-windows-11-taskbar-is-an-annoying-step-backward.html"&gt;Michael Crider from PcWorld&lt;/a&gt; to the rescue. Just download the &lt;a href="https://github.com/valinet/ExplorerPatcher/releases/latest/download/ep_setup.exe"&gt;setup&lt;/a&gt; to &lt;a href="https://github.com/valinet/ExplorerPatcher"&gt;Explorer Patcher&lt;/a&gt; from GitHub and run it. The Windows 10 taskbar will be back. Just right click on it and select &lt;em&gt;Properties&lt;/em&gt; and you can customize it even better than the old one! Cheers, Michael!&lt;/p&gt;

</description>
      <category>software</category>
      <category>misc</category>
    </item>
    <item>
      <title>Types of CSS Selectors</title>
      <author>elinabey</author>
      <pubDate>Wed, 15 Dec 2021 15:18:20 +0000</pubDate>
      <link>https://dev.to/elinabey/types-of-css-selectors-1007</link>
      <guid>https://dev.to/elinabey/types-of-css-selectors-1007</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tUSfVD_Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uk3wmfnurbmboodjq4am.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tUSfVD_Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uk3wmfnurbmboodjq4am.jpg" alt="Types of CSS Selectors" width="700" height="400"&gt;&lt;/a&gt;&lt;br&gt;
Types of CSS Selectors are utilized to pick the substance that we need to style. It helps in separating components dependent on their group, id, type, and so forth. A CSS Selector is a segment of the CSS Ruleset.&lt;br&gt;
In our last tutorial we discussed &lt;a href="https://dev.to/elinabey/introduction-to-css-controls-408m"&gt;Introduction to CSS Controls&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#types-of-css-selectors"&gt;
  &lt;/a&gt;
  Types of CSS Selectors
&lt;/h1&gt;

&lt;p&gt;1.CSS Attribute Selector.&lt;br&gt;
2.CSS Class Selector.&lt;br&gt;
3.CSS Id Selector.&lt;br&gt;
4.CSS Universal Selector.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#css-attribute-selector"&gt;
  &lt;/a&gt;
  CSS Attribute Selector.
&lt;/h2&gt;

&lt;p&gt;The CSS Attribute selector styles content as indicated by the trait and the quality worth referenced in the square sections.&lt;br&gt;
This CSS code would be a counterpart for the accompanying HTML component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"text"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"text"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Moreover, if the estimation of the quality 'type' changes, the Attribute selector would not coordinate it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css-class-selector"&gt;
  &lt;/a&gt;
  CSS Class Selector.
&lt;/h2&gt;

&lt;p&gt;he CSS Class selector is one of the most supportive selectors of the considerable number of selectors. It is proclaimed by utilizing a spot followed by the name of the class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="nt"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"soft"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nc"&gt;.soft&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#css-id-selector"&gt;
  &lt;/a&gt;
  CSS Id Selector.
&lt;/h2&gt;

&lt;p&gt;CSS ID selector encourages the engineer to coordinate the ID made by the designer to its styling content. ID Selector is utilized with the assistance of the hash (#) sign before the ID name proclaimed by the engineer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"soft"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nf"&gt;#soft&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#css-universal-selector"&gt;
  &lt;/a&gt;
  CSS Universal Selector.
&lt;/h2&gt;

&lt;p&gt;In a HTML page, the substance relies upon HTML labels. A couple of labels characterizes a particular website page component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;21px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This post originally published at &lt;a href="https://softcodeon.com/css/types-of-css-selectors.htm"&gt;Types of CSS Selectors&lt;/a&gt;. If you want to read in detail visit their.&lt;/p&gt;

&lt;p&gt;I am going to learn and share good content that can help others. If you have any questions please discuss below.&lt;br&gt;
Thank you.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>css</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Building an AWS Integration for Salesforce Image Handling</title>
      <author>Michael Bogan</author>
      <pubDate>Wed, 15 Dec 2021 15:07:23 +0000</pubDate>
      <link>https://dev.to/salesforcedevs/building-an-aws-integration-for-salesforce-image-handling-f74</link>
      <guid>https://dev.to/salesforcedevs/building-an-aws-integration-for-salesforce-image-handling-f74</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In this article, we’ll look at a solution that not only offloads your Salesforce image storage to Amazon Web Services (AWS), but also resizes and renders those images on demand. By offloading image storage to other solutions, your organization can free up Salesforce storage capacity.&lt;/p&gt;

&lt;p&gt;We’ll build off an example use case from Salesforce Field Service, but there are many other scenarios that can take advantage of these techniques. Having both a Salesforce org with Field Service installed and an AWS account are prerequisites for this article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-case"&gt;
  &lt;/a&gt;
  Use case
&lt;/h2&gt;

&lt;p&gt;For our example, we will look at a fictional property maintenance company, Acme Maintenance. Acme manages property safety inspections on behalf of its clients. On-site inspectors use Salesforce Field Service to record their findings on their visits. &lt;/p&gt;

&lt;p&gt;As part of their site visits, inspectors take a lot of photographs on their mobile devices, and these are saved back to Salesforce. Acme would like to use these images in the Service Reports that they provide to their clients.&lt;/p&gt;

&lt;p&gt;Acme has discovered that with the number of site visits, multiplied by the number of images per visit and the size of those images (and on top of that they want to see reasonably-sized thumbnails of those images in Salesforce and surface them on Service Reports), they’re reaching the initial default file storage limits on Salesforce. While they could easily purchase more file storage within Salesforce, their Salesforce architect has suggested that off-platform storage may be more optimal.&lt;/p&gt;

&lt;p&gt;To solve this, we will look at interfacing with AWS for both image storage and image processing (resizing, cropping, orientation, and so on).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-services"&gt;
  &lt;/a&gt;
  AWS Services
&lt;/h2&gt;

&lt;p&gt;For our use case, we will look at one of the AWS reference architectures, the &lt;a href="https://aws.amazon.com/solutions/implementations/serverless-image-handler/"&gt;Serverless Image Handler&lt;/a&gt;, and take advantage of &lt;a href="https://aws.amazon.com/cloudformation/"&gt;AWS CloudFormation&lt;/a&gt; to deploy it. In some ways, you can liken CloudFormation to Salesforce metadata—a way to deploy your resources in a declarative, script-based manner.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1O7F3E4p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hdrap399fpufkzjyz6mk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1O7F3E4p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hdrap399fpufkzjyz6mk.png" alt="" width="654" height="402"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href="http://docs.aws.amazon.com/solutions/latest/serverless-image-handler/welcome.html"&gt;AWS documentation&lt;/a&gt; goes into greater detail, but in summary, we will leverage the following components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Cloudfront&lt;/strong&gt;: load balancing the requests into the API&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;API Gateway&lt;/strong&gt;: publishing the external API for use&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Lambda&lt;/strong&gt;: the serverless application that handles the image processing&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;S3&lt;/strong&gt;: storage of the original uploaded images and log files&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Secrets Manager&lt;/strong&gt; (optional): If you use the image URL signature feature, then you can retrieve secrets for digital signing from here.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Rekognition&lt;/strong&gt;: if you require content moderation, smart cropping, facial recognition, and so on.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#aws-configuration"&gt;
  &lt;/a&gt;
  AWS configuration
&lt;/h3&gt;

&lt;p&gt;By using a CloudFront template, we don’t need to know a great deal about each of these AWS technologies; we simply have to go through a few configuration steps. Please note that in this example, we will take default settings rather than enable advanced features. It’s recommended that you read through the &lt;a href="https://docs.aws.amazon.com/solutions/latest/serverless-image-handler/welcome.html"&gt;implementation guide&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#create-an-s3-bucket-for-your-images"&gt;
  &lt;/a&gt;
  Create an S3 bucket for your images
&lt;/h4&gt;

&lt;p&gt;The first task is creating an S3 bucket to store our original image files. Choose a bucket name that is unique and lowercase, and then pick the region that is geographically closest to you. Check the box to “Block all public access.”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--941gG9k5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x991abkjm11xva1i895e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--941gG9k5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x991abkjm11xva1i895e.png" alt="" width="880" height="532"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#deploying-the-cloudformation-stack"&gt;
  &lt;/a&gt;
  Deploying the CloudFormation stack
&lt;/h4&gt;

&lt;p&gt;From the &lt;a href="https://aws.amazon.com/solutions/implementations/serverless-image-handler/"&gt;Serverless Image Handler main page&lt;/a&gt;, click on &lt;strong&gt;Launch in the AWS Console&lt;/strong&gt; to start deploying your own instance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4RKrx2ww--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09bm3uq63r5jtx7vgj5p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4RKrx2ww--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09bm3uq63r5jtx7vgj5p.png" alt="" width="585" height="613"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before you start populating fields, be sure to select your AWS region in the top right corner of the screen on the CloudFormation page. Select the same region as your S3 bucket from the previous step.&lt;/p&gt;

&lt;p&gt;The path to the CloudFormation template should be pre-populated. Click &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l_rtS3i4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uk2s6jm5nlisahaagrdk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l_rtS3i4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uk2s6jm5nlisahaagrdk.png" alt="" width="880" height="392"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the next screen, we specify a name for our stack and provide the name of our S3 bucket. Select “No” for the “Demo UI” and then click &lt;strong&gt;Next&lt;/strong&gt; again. On the “Configure stack options” page, accept the default and click &lt;strong&gt;Next&lt;/strong&gt; one more time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R2rlAUyD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/70gfktzp7l1524f7814d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R2rlAUyD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/70gfktzp7l1524f7814d.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, on the review page, click the &lt;strong&gt;Create Stack&lt;/strong&gt; button. As you refresh the page, you’ll see the progress of your stack build, which can take a few minutes. Then, you’ll see this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZeUCTzRq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbuf2egj1zdoaftx93ph.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZeUCTzRq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbuf2egj1zdoaftx93ph.png" alt="" width="606" height="142"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a final step, we need to go to the &lt;strong&gt;Output&lt;/strong&gt; tab of the build and copy the value of the &lt;code&gt;ApiEndpoint&lt;strong&gt; &lt;/strong&gt;&lt;/code&gt;parameter, as we’ll be using this in our Salesforce build.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#salesforce-build"&gt;
  &lt;/a&gt;
  Salesforce build
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#custom-objects-and-fields"&gt;
  &lt;/a&gt;
  Custom Objects and fields
&lt;/h3&gt;

&lt;p&gt;In Salesforce, we’ll start by creating a new custom object called &lt;strong&gt;Work Order Attached Image&lt;/strong&gt;, which will hold the information for any image attachments that relate to a Work Order. The key fields to note are &lt;strong&gt;Image RTF&lt;/strong&gt;, &lt;strong&gt;Original Image URL&lt;/strong&gt;, and &lt;strong&gt;Resized Image URL&lt;/strong&gt;. When asked whether to add a related list to the Work Order page layout, be sure to select it. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rUu4-lut--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o9ma5pudqge1cemjrx8t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rUu4-lut--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o9ma5pudqge1cemjrx8t.png" alt="" width="880" height="676"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#custom-metadata"&gt;
  &lt;/a&gt;
  Custom metadata
&lt;/h3&gt;

&lt;p&gt;Next, we need to create a Custom Metadata type to store our configuration settings. In Setup, search for &lt;strong&gt;Custom Metadata&lt;/strong&gt; and create a new type called &lt;strong&gt;AWS Settings&lt;/strong&gt; with the custom fields shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mmuPbvFu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0g6u0qe8lr23ke34d1eo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mmuPbvFu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0g6u0qe8lr23ke34d1eo.png" alt="" width="880" height="416"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DkJAUBVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2f0d02z5cj47f0ouee5a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DkJAUBVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2f0d02z5cj47f0ouee5a.png" alt="" width="824" height="146"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once created, click the &lt;strong&gt;Manage AWS Settings&lt;/strong&gt; button and add the following three settings and save them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HWX89Oc_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q061xhabpmnbyp85snzs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HWX89Oc_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q061xhabpmnbyp85snzs.png" alt="" width="880" height="251"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the image handler endpoint value, use the &lt;code&gt;ApiEndpoint&lt;/code&gt;value from AWS CloudFormation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zzr7VQJZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3lg7lfamt6a3hlxopr01.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zzr7VQJZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3lg7lfamt6a3hlxopr01.png" alt="" width="880" height="349"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4gk2vjxT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sp21dfx6v2aqnitogeab.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4gk2vjxT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sp21dfx6v2aqnitogeab.png" alt="" width="880" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#named-credentials"&gt;
  &lt;/a&gt;
  Named credentials
&lt;/h3&gt;

&lt;p&gt;Our next configuration item is for securely handling the access to AWS from Salesforce. In Setup, search for &lt;strong&gt;Named Credentials&lt;/strong&gt; and create the following two credentials, substituting in your own AWS URL, region, and access key/secret from your AWS user. Be sure the &lt;strong&gt;Name&lt;/strong&gt; fields are as shown in the screenshots, as this is used later in the code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mZ3FOm7S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a9aaww5x9bt29lkuyqcl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mZ3FOm7S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a9aaww5x9bt29lkuyqcl.png" alt="" width="880" height="879"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jbReyyOd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxs67ku6k0m3p87mvnf7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jbReyyOd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxs67ku6k0m3p87mvnf7.png" alt="" width="880" height="804"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#remote-site-settings"&gt;
  &lt;/a&gt;
  Remote site settings
&lt;/h3&gt;

&lt;p&gt;In order for the images from AWS to appear in our Service Reports, we need to add the API endpoint as a trusted domain via &lt;strong&gt;Remote Site Settings.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KV7l0GkC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9gxg554xthcu8cftxn1b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KV7l0GkC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9gxg554xthcu8cftxn1b.png" alt="Image description" width="880" height="346"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#triggers-and-classes"&gt;
  &lt;/a&gt;
  Triggers and classes
&lt;/h3&gt;

&lt;p&gt;Revisiting our scenario, image attachments from Field Service populate Salesforce as &lt;code&gt;ContentDocument&lt;/code&gt; objects and associated supporting objects. Their object model looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9STY6cg4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6j603nuetzj92zy0w9hq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9STY6cg4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6j603nuetzj92zy0w9hq.png" alt="" width="429" height="992"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to capture newly attached images in the model, we can simply add a new Apex trigger to the &lt;code&gt;ContentDocumentLink&lt;/code&gt; object. This will allow us to reference both the attachment and the object it is attached to.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#contentdocumentlinktrigger-and-contentdocumentlinktriggerhandler"&gt;
  &lt;/a&gt;
  ContentDocumentLinkTrigger and ContentDocumentLinkTriggerHandler
&lt;/h4&gt;

&lt;p&gt;We build a &lt;code&gt;ContentDocumentLinkTrigger&lt;/code&gt; (&lt;a href="https://bit.ly/acmedemo-01"&gt;view code on GitHub&lt;/a&gt;) that hands off processing to an Apex class for handling the trigger.&lt;/p&gt;

&lt;p&gt;Our trigger handler, &lt;code&gt;ContentDocumentLinkTriggerHandler&lt;/code&gt; (&lt;a href="https://bit.ly/acmedemo-02"&gt;view code on GitHub&lt;/a&gt;), takes the list of new &lt;code&gt;ContentDocumentLinks&lt;/code&gt; and collates them into a &lt;code&gt;Map&lt;/code&gt;, keyed by the linked entity ID. It then inspects them to see the type of the linked entity, and—if it is a Work Order—adds them to a &lt;code&gt;Set&lt;/code&gt; for processing.&lt;/p&gt;

&lt;p&gt;This processing consists of building further collections to map an entity to associated &lt;code&gt;ContentDocument&lt;/code&gt; records, before handing this data off to a Batch Apex class for processing asynchronously.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#workorderattachmentbatch"&gt;
  &lt;/a&gt;
  WorkOrderAttachmentBatch
&lt;/h4&gt;

&lt;p&gt;The batch class for Work Order attachments, &lt;code&gt;WorkOrderAttachmentBatch&lt;/code&gt; (&lt;a href="https://bit.ly/acmedemo-03"&gt;view code on GitHub&lt;/a&gt;), iterates through the supplied collections, building up new &lt;code&gt;WorkOrderAttachedImage&lt;/code&gt; records from the image filename and base URL of the AWS S3 bucket.&lt;/p&gt;

&lt;p&gt;A call is made to the &lt;code&gt;ImageRotationHandler&lt;/code&gt; class to get the crafted URL with which to call the Image API. Then, it constructs an RTF field with some simple HTML for rendering the resulting image.&lt;/p&gt;

&lt;p&gt;Once the records have been created and saved, the list of image attachments passes to another batch class for the upload process.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#imagerotationhandler"&gt;
  &lt;/a&gt;
  ImageRotationHandler
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;ImageRotationHandler&lt;/code&gt; (&lt;a href="https://bit.ly/acmedemo-04"&gt;view code on GitHub&lt;/a&gt;) is a small class that handles the construction of a valid request to the Image API handler. It constructs the required JSON structure from the parameters, serializes it to a string, encodes it as Base64, and then appends this to the URL of the image handler endpoint. Formatting requests is included in the AWS template documentation under the &lt;a href="https://docs.aws.amazon.com/solutions/latest/serverless-image-handler/deployment.html"&gt;Deployment section&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#s3uploadhandler"&gt;
  &lt;/a&gt;
  S3UploadHandler
&lt;/h4&gt;

&lt;p&gt;The final batch class, &lt;code&gt;S3UploadHandler&lt;/code&gt; (&lt;a href="https://bit.ly/acmedemo-05"&gt;view code on GitHub&lt;/a&gt;), handles the uploading of the attached images to our S3 bucket via a simple REST API call.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#service-reports"&gt;
  &lt;/a&gt;
  Service Reports
&lt;/h3&gt;

&lt;p&gt;Now that we have our images on S3 and our custom object populated with our links to the images, we can now return to our Field Service use case. In our Salesforce setup, search for and click on &lt;strong&gt;Service Report Templates&lt;/strong&gt;. For demo purposes, we’ll create a new template.&lt;/p&gt;

&lt;p&gt;On the template page, select &lt;strong&gt;Work Order&lt;/strong&gt; from the Related Templates dropdown list. In the Body area of the template, add a new &lt;strong&gt;List&lt;/strong&gt; section element, based on the Work Order Attached Image object, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aYOwJ67A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmgctie1lvwgh4s7hfeh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aYOwJ67A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmgctie1lvwgh4s7hfeh.png" alt="" width="825" height="700"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Save the template and activate it.&lt;/p&gt;

&lt;p&gt;We’re now ready for testing. Create a new Work Order in Salesforce and save it. Then, upload an image file (in JPG or PNG format) to the Files section. Once the image has been uploaded, refresh the page. You should then see a new record in the &lt;strong&gt;Work Order Attached Images&lt;/strong&gt; related list. Clicking on the record should show a record similar to this, with the S3 image displayed:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6PvEUwGj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ni8doyav23r87xk1h3xj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6PvEUwGj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ni8doyav23r87xk1h3xj.png" alt="" width="880" height="841"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From the Work Order, click the &lt;strong&gt;Create Service Report&lt;/strong&gt; button. (It may be in the overflow menu dropdown):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_u2Qpt2S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nc16a394ev73frn5w5zn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_u2Qpt2S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nc16a394ev73frn5w5zn.png" alt="" width="571" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select the Service Report template we created earlier and click the &lt;strong&gt;Create PDF&lt;/strong&gt; button. A preview of the Service Report PDF should render, complete with a thumbnail of your uploaded image in the appropriate section.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XfBawgfx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1irowus3q7fexcubbaqk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XfBawgfx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1irowus3q7fexcubbaqk.png" alt="" width="880" height="453"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, we have successfully deployed a complete image handler solution to AWS, using a reference implementation from the AWS Solutions Library. We have implemented code with supporting objects and configuration in Salesforce to transfer uploaded image attachments to S3 and surface them within the platform and on Service Reports.&lt;/p&gt;

&lt;p&gt;With this architecture, we have the potential to reduce storage needs for image files within Salesforce.&lt;/p&gt;

&lt;p&gt;Outside of Field Service, there are many other use cases for reducing image storage needs. Another popular scenario, for example, is for Salesforce-powered web experiences in which users need to submit image files.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps-and-resources"&gt;
  &lt;/a&gt;
  Next Steps and Resources
&lt;/h2&gt;

&lt;p&gt;Here are some ideas for taking this architecture further:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Implementing removal of the original Salesforce files once S3 has them&lt;/li&gt;
&lt;li&gt;Creating a custom Lightning Web Component to display the uploaded images&lt;/li&gt;
&lt;li&gt;Extending this implementation to support other file types, such as PDF documents&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are some useful links related to this implementation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/solutions/implementations/serverless-image-handler/"&gt;AWS Serverless Image Handler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://sharp.pixelplumbing.com/"&gt;Sharp Library&lt;/a&gt;, which provides the image processing capability we use in AWS&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>aws</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Migrating to Snowflake, Redshift, or BigQuery? Use Datafold to Avoid these Common Pitfalls</title>
      <author>Michael Bogan</author>
      <pubDate>Wed, 15 Dec 2021 15:00:13 +0000</pubDate>
      <link>https://dev.to/mbogan/migrating-to-snowflake-redshift-or-bigquery-use-datafold-to-avoid-these-common-pitfalls-21cp</link>
      <guid>https://dev.to/mbogan/migrating-to-snowflake-redshift-or-bigquery-use-datafold-to-avoid-these-common-pitfalls-21cp</guid>
      <description>&lt;h3&gt;
  &lt;a href="#the-drive-to-migrate-data-to-the-cloud"&gt;
  &lt;/a&gt;
  The Drive to Migrate Data to the Cloud
&lt;/h3&gt;

&lt;p&gt;With data being valued &lt;a href="https://www.economist.com/leaders/2017/05/06/the-worlds-most-valuable-resource-is-no-longer-oil-but-data"&gt;more than oil&lt;/a&gt; in recent years, many organizations feel the pressure to become innovative and cost-effective when it comes to consolidating, storing, and using data. Although most enterprises are aware of big data opportunities, their existing infrastructure isn’t always capable of handling massive amounts of data.&lt;/p&gt;

&lt;p&gt;By migrating to modern cloud data warehouses, organizations can benefit from improved scalability, better price elasticity, and enhanced security. But even with all these benefits, many businesses are still reluctant to make the move.&lt;/p&gt;

&lt;p&gt;This is because these benefits are great &lt;em&gt;once you get there&lt;/em&gt;. However, before companies can get there, they must go through &lt;strong&gt;the dreaded data migration process, and that process can be painful—especially if you don’t have the right tools&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To create an effective cloud data migration strategy, companies often struggle to find answers to key areas like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gaps or anomalies in the source data&lt;/li&gt;
&lt;li&gt;Full or partial data migration&lt;/li&gt;
&lt;li&gt;Data owners and stakeholders&lt;/li&gt;
&lt;li&gt;Data lineage and dependencies&lt;/li&gt;
&lt;li&gt;Data consolidation process&lt;/li&gt;
&lt;li&gt;Automated regression testing for accuracy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With so many daunting concerns, it’s no wonder why many businesses delay their migration. And as a result, they miss out on the benefits of cloud data warehousing. &lt;/p&gt;

&lt;p&gt;In this article, &lt;strong&gt;we will show you how—with a tool like Datafold—you can avoid a lot of the stress and complexities of data migration to Snowflake&lt;/strong&gt;. While our focus in this article will be on Snowflake, a nearly identical approach can be used for migrating to Redshift, BigQuery, Databricks, or any other cloud data warehouse.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#snowflake-and-datafold-together"&gt;
  &lt;/a&gt;
  Snowflake and Datafold Together
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.snowflake.com/"&gt;Snowflake&lt;/a&gt; is a Software-as-a-Service (SaaS) data warehouse hosted entirely on cloud infrastructure. It has one of the &lt;a href="https://edition.cnn.com/2020/09/16/investing/snowflake-ipo/index.html"&gt;biggest software IPOs in history&lt;/a&gt;, and is available on all three major cloud platforms, offering unlimited scalability in both storage and computing. Another reason for its popularity is its simple maintenance. Unlike most legacy data solutions, Snowflake takes care of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;management&lt;/li&gt;
&lt;li&gt;upgrades&lt;/li&gt;
&lt;li&gt;tuning&lt;/li&gt;
&lt;li&gt;backups&lt;/li&gt;
&lt;li&gt;high availability&lt;/li&gt;
&lt;li&gt;indexing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It keeps its storage and computing layers separate, allowing significant cost-saving when not using computing power. Other attractive features include time travel, end-to-end encryption, and integration with popular identity providers.&lt;/p&gt;

&lt;p&gt;Snowflake also natively integrates with &lt;a href="https://docs.snowflake.com/en/user-guide/ecosystem-partner-connect.html"&gt;third-party applications&lt;/a&gt;, creating a rich ecosystem of analytical capabilities. &lt;a href="https://www.datafold.com/"&gt;Datafold&lt;/a&gt;, a modern data reliability platform, can make data migration to Snowflake a breeze. For example, Datafold can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Intelligently profile data sources to show exactly where a piece of data is coming from and what it depends on&lt;/li&gt;
&lt;li&gt;Show before and after migration differences between source and target data sets.&lt;/li&gt;
&lt;li&gt;Use built-in machine learning models to automatically find data anomalies and alert users.&lt;/li&gt;
&lt;li&gt;Integrate with all major data warehouses—including Snowflake&lt;/li&gt;
&lt;li&gt;Be automated with tools like &lt;a href="https://www.getdbt.com/"&gt;dbt&lt;/a&gt; or &lt;a href="https://airflow.apache.org/"&gt;Apache Airflow&lt;/a&gt; or integrated into a continuous integration (CI) process.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The important question is: &lt;strong&gt;Can Datafold help prevent potentially costly mistakes when migrating to a Snowflake data warehouse?&lt;/strong&gt; Let’s see.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typical-data-migration-mistakes-and-how-to-avoid-them"&gt;
  &lt;/a&gt;
  Typical Data Migration Mistakes and How to Avoid Them
&lt;/h3&gt;

&lt;p&gt;There are a few common mistakes DataOps teams make when migrating to a data warehouse.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ignoring-key-stakeholders"&gt;
  &lt;/a&gt;
  Ignoring Key Stakeholders
&lt;/h4&gt;

&lt;p&gt;Data engineering teams often rush through a migration project without consulting business stakeholders or including their feedback about data validation rules. This results in a flood of post-migration support tickets for erroneous or missing data. What’s worse is that some errors can go unnoticed.&lt;/p&gt;

&lt;p&gt;For example, let’s say the team is migrating billing data, but the migration team hasn’t properly consulted the finance team. The currency conversion rates in the legacy system might use a four decimal point rounding while the new system uses only three. The engineers may deem this acceptable, but for the finance team, a change like this can mean skewed numbers across all their reports and subsequent business impact. To address this issue, &lt;a href="https://www.datafold.com/#data-catalog"&gt;Data Catalog&lt;/a&gt; in Datafold can list all your data sources in one place. This allows you to search and filter to find a particular table, database, or column from thousands of databases across your environment. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X3sV58SV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vdqkwrbq33qsfhmmc7n9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X3sV58SV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vdqkwrbq33qsfhmmc7n9.png" alt="Data Catalog allows searching data assets" width="501" height="935"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you find a data asset, you can easily add descriptions and tags, and also set owners for the assets. This makes it easy to know who to contact if you need to make a change or what types of changes are acceptable. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FEZPHg8n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/axt7pqkzwi8tkwl5ht8n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FEZPHg8n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/axt7pqkzwi8tkwl5ht8n.png" alt="Data Catalog allows adding description, owner, and tags to data assets" width="880" height="416"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#taking-a-lift-and-shift-approach"&gt;
  &lt;/a&gt;
  Taking a “Lift and Shift” Approach
&lt;/h4&gt;

&lt;p&gt;Many businesses take a “lift and shift” approach to their data migration. This is where all the data from old systems is migrated to a new one with little to no validation, cleansing, or transformation. One of the reasons businesses take this approach is because they deem it too time-consuming to comb through huge datasets to find out what’s relevant and what’s not.&lt;/p&gt;

&lt;p&gt;Lift and shift can only work when you’re 100% sure that the old system’s data is correct and portable &lt;em&gt;as-is&lt;/em&gt; to the new system—and this is seldom the case. Consequently, you risk migrating incorrect or duplicate data and paying for its storage. When working with TBs—or even PBs—of data, these storage costs quickly add up.&lt;/p&gt;

&lt;p&gt;The Data Catalog summarizes the quality of the source data in terms of volume, completeness, and distribution of values. Using this, you can identify if important table columns like birthdate, email_address, or last_name are complete and if they need special business rules.&lt;/p&gt;

&lt;p&gt;In the image below, we can see a table’s data profile:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w3NeOsKs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k3iyu3alqt3cdb67fi9t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w3NeOsKs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k3iyu3alqt3cdb67fi9t.png" alt="High-level profile of a dataset" width="880" height="499"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The table has more than 19 million rows and 21 columns. There are no upstream dependencies. Part of the column’s data distribution looks like the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P1MWuumI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbtf6awvl63q9zt0rgxp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P1MWuumI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbtf6awvl63q9zt0rgxp.png" alt="Data distribution in Data Catalog" width="880" height="682"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, some fields—like pickup_latitude and pickup_longitude—have lower completeness ratios. The graph also shows data distribution in different fields.&lt;/p&gt;

&lt;p&gt;Data engineers can use such information to decide whether (or how) to cleanse and preprocess the data before migration.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.datafold.com/column-level-lineage"&gt;column-level lineage&lt;/a&gt; feature can also help by finding the most frequently used (and therefore, the most critical) tables and columns in the source. &lt;/p&gt;

&lt;p&gt;One of the major drawbacks of lift-and-shift is that you’re never sure what fields or tables are unnecessary and don’t need to be ported. Column-level lineage makes this task much easier as it can discover all the dependencies of a table or column. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ytFCdM2E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/241b2aghz7iy9773skzy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ytFCdM2E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/241b2aghz7iy9773skzy.png" alt="Lineage graph showing a column’s relationship to upstream tables" width="880" height="477"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using the Data Catalog and its lineage feature, let’s say you find a large source table that hasn’t been updated in the last five years, and this table has no dependencies. You can feel confident that it can be archived and doesn’t need to be migrated.&lt;/p&gt;

&lt;p&gt;As an example, in the image below, we can see that &lt;em&gt;taxi_trips&lt;/em&gt; doesn’t have any dependencies:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5TBxMggk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/or59ee0yokzg4bbepy1e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5TBxMggk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/or59ee0yokzg4bbepy1e.png" alt="Lineage graph showing a table with no dependencies" width="880" height="421"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#migrating-old-and-inefficient-queries"&gt;
  &lt;/a&gt;
  Migrating Old and Inefficient Queries
&lt;/h4&gt;

&lt;p&gt;Engineers should be also looking for inefficient queries powering existing analytic reports. Not surprisingly, this is also often overlooked in fear of breaking applications. &lt;/p&gt;

&lt;p&gt;For example, maybe you have a query with 10 joins, four of which are joining to obsolete data tables. The migration project can be the perfect time to optimize it by cutting out irrelevant joins. Showing side-by-side improvements can further showcase the value of planned migration to stakeholders.&lt;/p&gt;

&lt;p&gt;Once again, the column-level lineage feature can help refactor or remove inefficient queries. Column-level lineage can show how a data field relates to its upstream and downstream objects, and what the effect will be when modifying queries containing this field. &lt;/p&gt;

&lt;p&gt;In the image below, we can see that a data field is related to two tables. This should tell the data engineer which tables may be affected when fine-tuning a query containing this field.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rC6QKyhc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nj2rb69uc1n8znmc3orw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rC6QKyhc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nj2rb69uc1n8znmc3orw.png" alt="Column-level lineage showing a field’s dependencies" width="880" height="486"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Datafold’s &lt;a href="https://www.datafold.com/data-diff"&gt;Data Diff&lt;/a&gt; feature can also show the potential impact of changing your old queries. Data Diff compares two datasets and can show if their schemas, primary keys, row counts, or column values are mismatched. &lt;/p&gt;

&lt;p&gt;You can use such results for quality assurance of your migrated data. If the target Snowflake tables show no discrepancies, stakeholders can have confidence that the new queries are safe and effective. If the comparison shows differences, then the queries can be further fine-tuned.&lt;/p&gt;

&lt;p&gt;In the images below, we see one such Data Diff operation. Here, the target table shows non-matching columns with non-matching values:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jq4tVBVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucdre751mw65sejl6rcb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jq4tVBVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucdre751mw65sejl6rcb.png" alt="Datafold’s Data Diff overview of source and target table" width="880" height="388"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KNzAUr5C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qz9b153cgwobrray98lr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KNzAUr5C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qz9b153cgwobrray98lr.png" alt="Datafold’s Data Diff overview of column value differences" width="880" height="616"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Uj9ztC1X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10xvf9fhfolyuald07w8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Uj9ztC1X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10xvf9fhfolyuald07w8.png" alt="Datafold’s Data Diff schema differences between source and target tables" width="880" height="755"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#manual-or-no-regression-testing"&gt;
  &lt;/a&gt;
  Manual or No Regression Testing
&lt;/h4&gt;

&lt;p&gt;For organizations dealing with terabytes of data, &lt;em&gt;manual&lt;/em&gt; testing and validation is a guaranteed recipe for failure. Manually cross-checking millions of rows of query results or data is simply not an option. The result is that many engineers will simply skip validation altogether. &lt;/p&gt;

&lt;p&gt;According to the data engineers in &lt;a href="https://www.datafold.com/case-studies/thumbtack"&gt;Thumbtack&lt;/a&gt;, their manual validation process used to take up to two hours per pull request. In many cases, this validation just wasn’t realistic to complete and mistakes can be costly. There are two ways to eliminate—or largely automate—manual data validations when migrating data to Snowflake. &lt;/p&gt;

&lt;p&gt;The first method is to use Datafold’s &lt;a href="https://www.datafold.com/data-monitoring"&gt;Alerting&lt;/a&gt; feature. Datafold uses machine learning to find the normal trend or seasonality in your data. You can configure alerts to send proactive messages to DataOps when anomalies are detected in that data. You can also adjust the alert thresholds.&lt;/p&gt;

&lt;p&gt;You can create alerts by writing your own SQL statements for data completeness checks or comparisons, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BM3Zf9Sh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bktnjkpdnj6ahyolzfhs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BM3Zf9Sh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bktnjkpdnj6ahyolzfhs.png" alt="Datafold alert created from SQL statement" width="880" height="366"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In both cases, proactive alerts can help data engineers fix any issues in the source data before migration.&lt;/p&gt;

&lt;p&gt;The other option is to use the Data Diff feature within the CI process. &lt;/p&gt;

&lt;p&gt;With this approach, after creating a data migration script, it’s committed to a Git repository. Once the commit is made to the development branch, a developer creates a pull request to merge the change to the main branch. At this stage, a senior team member can review the code to approve or reject it.&lt;/p&gt;

&lt;p&gt;Now, when integrated with the CI process, Datafold’s Data Diff feature can show the reviewer the effect of the ETL code—how data will change between the source and the target as the code cleanses, aggregates, and performs its operation. This is automatic regression testing for the data pipeline. &lt;/p&gt;

&lt;p&gt;If reviewers see the target table will have unwanted changes when the code runs, they can reject the change, preventing garbage data from entering the Snowflake database.&lt;/p&gt;

&lt;p&gt;When Thumbtack started using Data Diff, they reported a savings of over 200 hours per month, increased productivity by at least 20%, and over 100 pull requests automatically tested every month.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;There are many advantages to moving to a cloud data warehouse like Snowflake. However, migrating even a single database to a new system can have its challenges, especially when the source data hasn’t been profiled or the ETL code hasn’t been tested.&lt;/p&gt;

&lt;p&gt;The key to successful data migration is leveraging tools that can automate most of the hard work. Datafold can help dramatically reduce the number of errors, failures, and silent issues by automating most of the testing.&lt;/p&gt;

&lt;p&gt;Although we’ve focused on Snowflake in this article, the same features of Datafold can be used for other cloud products like &lt;a href="https://aws.amazon.com/redshift/"&gt;Redshift &lt;/a&gt;or &lt;a href="https://cloud.google.com/bigquery"&gt;BigQuery&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>database</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to convert XLSX to JSON</title>
      <author>Ludivine A</author>
      <pubDate>Wed, 15 Dec 2021 14:55:16 +0000</pubDate>
      <link>https://dev.to/lachouri/how-to-convert-xlsx-to-json-3p4d</link>
      <guid>https://dev.to/lachouri/how-to-convert-xlsx-to-json-3p4d</guid>
      <description>&lt;h4&gt;
  &lt;a href="#do-you-need-to-get-data-from-a-spreadsheet-and-turn-it-into-a-json-thats-not-science-and-im-gonna-prove-it-"&gt;
  &lt;/a&gt;
  Do you need to get data from a spreadsheet and turn it into a JSON ? That's not 🚀 science and I'm gonna prove it !
&lt;/h4&gt;

&lt;p&gt;First, install the &lt;strong&gt;xlsx&lt;/strong&gt; package.&lt;/p&gt;



&lt;p&gt;With npm :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;// NPM
npm  &lt;span class="nb"&gt;install  &lt;/span&gt;xlsx

// Yarn
yarn  add  xlsx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;strong&gt;app.js&lt;/strong&gt; file, import xlsx and fs to read the excel file, and declare a variable that we will use later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;XLSX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;xlsx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;finalObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To read and get the content of the file with the Buffer type :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;XLSX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myFile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;buffer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;N.B: The different types are "string", "buffer", "base64", "binary", "file", "array"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you write &lt;strong&gt;console.log(data.Sheet)&lt;/strong&gt; you will see your spreadsheets and the cells content.&lt;/p&gt;

&lt;p&gt;Then you have to write the process for each row of each spreadsheet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SheetNames&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sheetName&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rowObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;XLSX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sheet_to_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sheets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sheetName&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="nx"&gt;finalObject&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sheetName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rowObject&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;strong&gt;sheet_to_json&lt;/strong&gt; function allows to convert a spreadsheet into an array of objects.&lt;br&gt;
It takes differents optionnal parameters that you can find &lt;a href="https://www.npmjs.com/package/xlsx"&gt;here&lt;/a&gt;&lt;br&gt;
Here we won't need anything&lt;/p&gt;

&lt;p&gt;If you do a console.log(&lt;strong&gt;rowObject&lt;/strong&gt;), you will see that it contains an array, and each row of the spreadsheet is turned into an object like so :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"ID"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"Last name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Doe"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"First name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"John"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;

  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"ID"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"Last Name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Doe"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"First name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Jane"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do you remember the variable we declared at the beginning ? It is time to use it. We are going to create a key for each spreadsheet and assign &lt;strong&gt;rowObject&lt;/strong&gt; to it :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SheetNames&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sheetName&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rowObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;XLSX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sheet_to_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sheets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sheetName&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="nx"&gt;finalObject&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sheetName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rowObject&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you &lt;strong&gt;console.log(finalObject)&lt;/strong&gt; :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"Utilisateurs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"ID"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"Last name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Doe"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"First name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"John"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"ID"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"Last name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Doe"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"First name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Jane"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to write the output into a file, simply add this line :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./target.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataObject&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voilà 🎉&lt;br&gt;
Now you know how to convert an Excel spreadsheet into JSON !&lt;/p&gt;

&lt;p&gt;Originally posted on &lt;a href="https://blog.ludivineachouri.com"&gt;my blog&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Top 10 Trending Projects on GitHub for Web Developers</title>
      <author>Chetan Atrawalkar👉CA.</author>
      <pubDate>Wed, 15 Dec 2021 13:41:26 +0000</pubDate>
      <link>https://dev.to/chetan_atrawalkar/top-10-trending-projects-on-github-for-web-developers-3mpp</link>
      <guid>https://dev.to/chetan_atrawalkar/top-10-trending-projects-on-github-for-web-developers-3mpp</guid>
      <description>&lt;p&gt;&lt;strong&gt;GitHub&lt;/strong&gt; is not just a version control service, it is a terrific content resource for all-things-development.&lt;/p&gt;

&lt;p&gt;There are a lot of repositories out there that can help you as a developer by providing great value for you. So no matter what type of developer you are, you should always take the advantage of GitHub.&lt;/p&gt;

&lt;p&gt;In this article, I decided to share &lt;strong&gt;top 10 trending projects on github for web developers&lt;/strong&gt; that you can benefit from as a web developer. Let’s gets to check out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-turborepo"&gt;
  &lt;/a&gt;
  &lt;a href="https://turborepo.org/"&gt;1. Turborepo&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Turborepo&lt;/strong&gt; is a high-performance build system for JavaScript and TypeScript codebases.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Turborepo&lt;/strong&gt; reimagines build system techniques used by Facebook and Google to remove maintenance burden and overhead.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EGmED8vF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/usi734huldlmmgk4tyxg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EGmED8vF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/usi734huldlmmgk4tyxg.jpg" alt="turbo" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Checkout this repo &lt;a href="https://github.com/vercel/turborepo"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-statsigs-status-page"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/statsig-io/statuspage"&gt;2. Statsig's Status Page&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A simple, zero-dependency, pure js/html status page based on GitHub Pages and Actions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0HX4DfPq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjb4qpgs0o7hvyjtkxmd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0HX4DfPq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjb4qpgs0o7hvyjtkxmd.jpg" alt="status" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Checkout this repo &lt;a href="https://github.com/statsig-io/statuspage"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-awesome-software-architecture"&gt;
  &lt;/a&gt;
  &lt;a href="https://mehdihadeli.github.io/awesome-software-architecture"&gt;3. Awesome Software Architecture&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A curated list of awesome articles, videos, and other resources to learn and practice about software architecture, patterns, and principles.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HvEMNm7X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gph5qei3ve9u2uq8u7am.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HvEMNm7X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gph5qei3ve9u2uq8u7am.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Checkout this repo &lt;a href="https://github.com/mehdihadeli/awesome-software-architecture"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-react-cool-img"&gt;
  &lt;/a&gt;
  &lt;a href="https://react-cool-img.netlify.app/"&gt;4. React Cool Img&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; A React Img component let you handle image UX and performance as a Pro!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hMdnZMzI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0jfbmxwj199wijsp4pw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hMdnZMzI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0jfbmxwj199wijsp4pw.jpg" alt="Imgon" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Checkout this repo &lt;a href="https://github.com/wellyshen/react-cool-img"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-klipse"&gt;
  &lt;/a&gt;
  &lt;a href="http://blog.klipse.tech/"&gt;5. Klipse&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Klipse&lt;/strong&gt; is a JavaScript plugin for embedding interactive code snippets in tech blogs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---UQ2oiiB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3zh7k1674pgij0h6yii6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---UQ2oiiB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3zh7k1674pgij0h6yii6.jpg" alt="Image klipse" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Checkout this repo &lt;a href="https://github.com/viebel/klipse"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-simple-git"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/steveukx/git-js"&gt;6. Simple Git&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A light weight interface for running git commands in any node.js application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EYXhlMmV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8tmfk5i0vh6eosraguig.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EYXhlMmV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8tmfk5i0vh6eosraguig.jpg" alt="git" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Checkout this repo &lt;a href="https://github.com/steveukx/git-js"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-flatpickr"&gt;
  &lt;/a&gt;
  &lt;a href="https://flatpickr.js.org/"&gt;7. Flatpickr&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;lightweight, powerful javascript datetimepicker with no dependencies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nSX581k9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8speo1ur4h4wr4ngkba1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nSX581k9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8speo1ur4h4wr4ngkba1.jpg" alt="ficket" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Checkout this repo &lt;a href="https://github.com/flatpickr/flatpickr"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's all folks, Thank you for making it this far down. All the repositories mentioned are not just the only resources available, I'm sure there must be tons of other amazing project out there too. These are the ones that I really found helpful and often get myself indulged into.&lt;/p&gt;

&lt;p&gt;Don't forget to star 🌟 these repositories as a thank you note for all the amazing contributors who put their effort creating these amazing resources for all of us.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keep-claim-and-just-code-it"&gt;
  &lt;/a&gt;
  Keep Claim And Just Code It 😎
&lt;/h3&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>webdev</category>
      <category>career</category>
    </item>
    <item>
      <title>UI vs Frontend!</title>
      <author>Gourav Singh Rawat</author>
      <pubDate>Wed, 15 Dec 2021 13:37:09 +0000</pubDate>
      <link>https://dev.to/seek4samurai/ui-vs-frontend-43mn</link>
      <guid>https://dev.to/seek4samurai/ui-vs-frontend-43mn</guid>
      <description>&lt;h2&gt;
  &lt;a href="#a-thin-line-between-ui-and-frontend"&gt;
  &lt;/a&gt;
  A thin line between UI and Frontend
&lt;/h2&gt;

&lt;p&gt;This is useful for those who people who don't know about what's the difference between frontend development and UI designing.&lt;/p&gt;

&lt;p&gt;Well, UI is generally creating a layout of a website (considering it's about website), whereas frontend development is implementing that design to real-time.&lt;br&gt;
Imagine your angry UI designer knows how bad you're at implementing abstract arts and vectors in a webpage, so he/she designs an UI with full of those. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kwdkKeJE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t5p872vq1k9xnqnyro8u.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kwdkKeJE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t5p872vq1k9xnqnyro8u.jpg" alt="Image description" width="880" height="1319"&gt;&lt;/a&gt;&lt;br&gt;
You'll in somewhat in trouble, that's what is frontend development.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-overcome-problems-like-a-webpage-consist-of-many-abstract-vectors"&gt;
  &lt;/a&gt;
  How to overcome problems like a webpage consist of many abstract vectors?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mAh_VxS_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ckhlj37923myjsgeg1k.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mAh_VxS_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ckhlj37923myjsgeg1k.jpg" alt="Image description" width="880" height="588"&gt;&lt;/a&gt;&lt;br&gt;
Listen, just go and master the technique of CSS positioning, it'll help a lot, now go to your UI designer's Figma, or whatever software he/she uses for designing, ask them to send the SVGs of those vectors and then it's upon you how you wanna add them in your webpage.&lt;br&gt;
&lt;em&gt;You're ready to go!!!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>design</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
