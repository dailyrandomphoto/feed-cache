<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Creating Your Own Chat Room with React, Node, Socket.io and the Cloud: Part 2</title>
      <author>Bradston Henry</author>
      <pubDate>Fri, 07 May 2021 20:13:04 +0000</pubDate>
      <link>https://dev.to/ibmdeveloper/creating-your-own-chat-room-with-react-node-socket-io-and-the-cloud-part-2-4l12</link>
      <guid>https://dev.to/ibmdeveloper/creating-your-own-chat-room-with-react-node-socket-io-and-the-cloud-part-2-4l12</guid>
      <description>&lt;p&gt;In this blog, we will complete everything we need to get our Chat Room up in running.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gFY9zYfJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/235ocmmv7et47fli6i47.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gFY9zYfJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/235ocmmv7et47fli6i47.gif" alt="Sample Chat Gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://ibm.biz/create-chat-room-in-cloud-blog-part1"&gt;In part 1&lt;/a&gt;, we focused on creating the socket.io NodeJs Server that would manage our chat. Its primary purpose was to receive messages from users in our Chat room and to send it to other Chat Room users in  in real time.&lt;/p&gt;

&lt;p&gt;In part 2, we will be focusing primarily on the ReactJS front-end portion of the Chat room where users will view messages and send messages to other users and connecting it to our server.&lt;/p&gt;

&lt;p&gt;NOTE: If you would like to follow along and build the application with me, I recommend you go back to part 1 and complete that portion before moving any further. The ReactJS portion of our application will not be able to work without a server to interact with.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/bradstondev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sthf4n7q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7sHQb0uz--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/571773/c3edb21d-5d8d-4839-801b-80a450be711e.jpg" alt="bradstondev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ibmdeveloper/creating-your-own-chat-room-with-react-node-and-socket-io-in-the-cloud-part-1-13dg" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Creating Your Own Chat Room with React, Node, and Socket.io in the Cloud: Part 1&lt;/h2&gt;
      &lt;h3&gt;Bradston Henry ・ May 7 ・ 15 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#socket&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cloud&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;To make our lives easier, I have created the base ReactJS application that we will be using to house our Chat Room. this includes the UI and visuals as well as some starter code that will allow us to code in what we need to connect to our Node server. To get the starter code, download the source from &lt;a href="http://ibm.biz/simple-react-chat-app-frontend-github-bradstondev"&gt;my github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So here is a brief overview of what we will cover is this particular blog to get the React portion of the application up and running:&lt;/p&gt;

&lt;p&gt;So here is quick overview of what we will be doing with our Node server:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install and configure our React application to use socket.io&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implement Socket methods to allow our React application to communicate with our server( NodeJS application)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Locally Test our React applications connection to our Node Server&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Deploy our ReactJS application to the cloud so it can be accessible to users from anywhere.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you may have noticed, a lot of what we will be doing in this blog will parallel what we did in the last blog. This portion of development should be a bit faster as we should now have a base understanding of how socket.io works from the previous blog.&lt;/p&gt;

&lt;p&gt;So without further adieu, let's get started...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#installing-and-configuring-socketio-with-reactjs"&gt;
  &lt;/a&gt;
  Installing and Configuring Socket.io with ReactJS
&lt;/h1&gt;

&lt;p&gt;So the first thing we are going to do, is navigate to our base ReactJS code using the terminal or command line. Our code should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &amp;lt;you-path-directory&amp;gt;/simple-react-chat-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we have navigated to our source code, we are going to install all of our base dependencies listed in our package.json file using this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we have installed all of the base frameworks and dependencies we need to run our application, it's time for us to install socket.io into our application. We will be installing the socket framework almost exactly how we did it on the NodeJS server except that we will be using a different library to get access to socket.io in our client application. Here is what we will run to install socket.io in React:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;socket.io-client &lt;span class="nt"&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you have probably noticed, this is the "client" version of the socket.io. If you are interested in learning more about the client version of socket.io check out this link: &lt;a href="https://socket.io/docs/v4/client-installation/"&gt;socket.io Client documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our next step will be to create a file that will be used to manage our client socket.io connection with our server. For ease, I have already created the file for you but it is currently blank. We will be adding the necessary code in the next few steps.&lt;/p&gt;

&lt;p&gt;First, open the folder titled "src" in our React app source code directory and the open the folder titled "services". In the "services" folder, you will find a file titled "socket.js". We will be inserting all necessary socket.io connection code in this file. Open this file and add this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;import socketIOClient from &lt;span class="s2"&gt;"socket.io-client"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

const serverEndpoint &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;your-nodejs-server-url&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;export &lt;/span&gt;const socket &lt;span class="o"&gt;=&lt;/span&gt; socketIOClient&lt;span class="o"&gt;(&lt;/span&gt;serverEndpoint, &lt;span class="o"&gt;{&lt;/span&gt;
    transports: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'websocket'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;})&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the first line we are importing are &lt;em&gt;socket.io-client&lt;/em&gt; library into our file for use.&lt;/p&gt;

&lt;p&gt;In the next line of code, we are setting the &lt;em&gt;serverEndpoint&lt;/em&gt; to our NodeJs server. This is the string value of the url that your Node server is currently hosted. For example, my &lt;em&gt;serverEndpoint&lt;/em&gt; line would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;const serverEndpoint &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"simple-node-chat-server-bsh.us-south.cf.appdomain.cloud"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our next line is actually initializing the connection between our client and our server. We are also specifying in this line of code a transport parameter. Essentially, what that is doing is setting the connection protocol we would like to use in our socket connection to our server. If you would like to learn more about how transports work and the the different typed of connection protocols, check out this &lt;a href="https://socket.io/docs/v4/client-initialization/#transports"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We now have all the code we need to connect to our socket.io NodeJs server. The reason we are creating a separate file to manage this connection, is because now if we desire to expand this application in the future, we have one location that handles this connection. We can then easily import this file into any React Component or file that we would like to use our socket.io connection with.&lt;/p&gt;

&lt;p&gt;With that, we have set up our React application to connect to our NodeJS server. Our next step will be to implement the socket.io methods we need to communicate appropriately with our server.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#implementing-socket-methods-in-reactjs-client"&gt;
  &lt;/a&gt;
  Implementing Socket Methods in ReactJS client
&lt;/h1&gt;

&lt;p&gt;Since we already have everything we need setup on our server, our next job is to implement the correct methods to communicate with our server.&lt;/p&gt;

&lt;p&gt;In order to do that, we will need to modify the code in our ChatRoom.js file. In our source code directory, open the 'src' folder and then open the "pages" folder. In the "pages" folder, open up the file titled "chatRoom.js". As the title of the file suggests, this holds all relevant code we need to operate our chat room.&lt;/p&gt;

&lt;p&gt;As you will notice in the file, there is quite a bit of code already implemented, but we need to implement some new code to get our socket methods working.&lt;/p&gt;

&lt;p&gt;At the top of the file directly under our last imported file we are going to import our "socket.js" file from our services folder. Your code should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;...
import ChatNotification from &lt;span class="s1"&gt;'../components/ChatNotification'&lt;/span&gt;

//Add socket import here
import &lt;span class="o"&gt;{&lt;/span&gt;socket&lt;span class="o"&gt;}&lt;/span&gt; from &lt;span class="s1"&gt;'../services/socket'&lt;/span&gt; 

&lt;span class="nb"&gt;let &lt;/span&gt;styles &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
....
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have our socket service imported, our first step is to setup the socket.io method that manages creating and setting our user data/identity. In order to do this we need to implement a &lt;em&gt;socket.on&lt;/em&gt; method and &lt;em&gt;socket.emit&lt;/em&gt; method. &lt;/p&gt;

&lt;p&gt;As mentioned in &lt;a href="https://ibm.biz/create-chat-room-in-cloud-blog-part1"&gt;part 1&lt;/a&gt; of this blog, &lt;em&gt;socket.on&lt;/em&gt; methods act as listeners, always looking out for messages and &lt;em&gt;socket.emit&lt;/em&gt; methods act as messengers, sending messages to listening &lt;em&gt;socket.on&lt;/em&gt; methods. In this case, &lt;em&gt;socket.on&lt;/em&gt; methods are listening for messages &lt;strong&gt;from&lt;/strong&gt; the Node server and &lt;em&gt;socket.emit&lt;/em&gt; methods are sending messages &lt;strong&gt;to&lt;/strong&gt; the Node server.&lt;/p&gt;

&lt;p&gt;In our ChatRoom.js file, in our componentDidMount() method, we will be implementing our code. Within the &lt;em&gt;if(!userIDVal){&lt;/em&gt; we will be adding new code that looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(!&lt;/span&gt;userIDVal&lt;span class="o"&gt;){&lt;/span&gt;

   socket.on&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SetUserData"&lt;/span&gt;, userData &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      //When user creation on server is &lt;span class="nb"&gt;complete&lt;/span&gt;, retrieve and save data to &lt;span class="nb"&gt;local &lt;/span&gt;storage
      localStorage.setItem&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'userID'&lt;/span&gt;, userData.userID&lt;span class="o"&gt;)&lt;/span&gt;
      localStorage.setItem&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'username'&lt;/span&gt;, userData.username&lt;span class="o"&gt;)&lt;/span&gt;
            console.log&lt;span class="o"&gt;(&lt;/span&gt;userData&lt;span class="o"&gt;)&lt;/span&gt;

      this.setState&lt;span class="o"&gt;({&lt;/span&gt;currentUsername: userData.username, currentUserID: userData.userID&lt;span class="o"&gt;})&lt;/span&gt;

      //Notify Socket server is not ready to chat
      socket.emit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"UserEnteredRoom"&lt;/span&gt;, userData&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;})&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   //Send Socket &lt;span class="nb"&gt;command &lt;/span&gt;to create user info &lt;span class="k"&gt;for &lt;/span&gt;current user
   socket.emit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"CreateUserData"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So what exactly is happening here?&lt;/p&gt;

&lt;p&gt;So what we are doing is checking to see if our current client/user has a Chat Room "identity" yet. In code prior to this conditional you will see this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;let &lt;/span&gt;userIDVal &lt;span class="o"&gt;=&lt;/span&gt; localStorage.getItem&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'userID'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;let &lt;/span&gt;usernameVal &lt;span class="o"&gt;=&lt;/span&gt; localStorage.getItem&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'username'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What this code is doing, is attempting to retrieve &lt;em&gt;userID&lt;/em&gt; and &lt;em&gt;username&lt;/em&gt; data stored in our browsers local storage. If the data does not exist (&lt;em&gt;if(!userIDVal)&lt;/em&gt;), we are assuming that this is the users first time in the chat room. &lt;/p&gt;

&lt;p&gt;The first thing we do is implement a &lt;em&gt;socket.on&lt;/em&gt; method with name "SetUserData" that will begin listening for the server to send information about this users newly made identity. Within that &lt;em&gt;socket.on&lt;/em&gt; method_ we have some code that retrieves newly created user data from the server and then promptly saves it to the browser's local storage for future use and sets the values in the React components state. Once the user info is set, we use the &lt;em&gt;socket.emit&lt;/em&gt; method "UserEnteredRoom" to let the server know that the user is now entering the Chat room with an identity and can chat.&lt;/p&gt;

&lt;p&gt;After we setup the &lt;em&gt;socket.on&lt;/em&gt; method, "SetUserData", we then implement a &lt;em&gt;socket.emit&lt;/em&gt; method called "CreateUserData" which will be used to actually ask the server to make an identity for our user. The emit will send the message to create user data for our client and the server will promptly send a message back to be retrieved by our listening "SetUserData" method.&lt;/p&gt;

&lt;p&gt;NOTE: The reason we don't write these two methods in reverse order is to ensure that the listener, "SetUserData", is prepared to receive newly created user data from the server &lt;strong&gt;before&lt;/strong&gt; we ask the server to make new user data. In some cases, the request for new user data and its response may be fast, and if we set the listener method after the messaging function, there is a chance the listener method may still be getting setup and miss the server's response. If that doesn't make sense, please feel free to leave a comment asking for more clarification.&lt;/p&gt;

&lt;p&gt;Now that we have added code for a first time chat user, it is also necessary for us to have things set up for a returning user with pre-existing user data stored in the browser.&lt;/p&gt;

&lt;p&gt;In the else condition of our &lt;em&gt;if(!userIDVal)&lt;/em&gt; conditional, we will add this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   //If user already has userid and username, notify server to allow them to &lt;span class="nb"&gt;join &lt;/span&gt;chat
   this.setState&lt;span class="o"&gt;({&lt;/span&gt;currentUsername: usernameVal, currentUserID: userIDVal&lt;span class="o"&gt;})&lt;/span&gt;
   socket.emit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"UserEnteredRoom"&lt;/span&gt;, &lt;span class="o"&gt;{&lt;/span&gt;userID: userIDVal, username: usernameVal&lt;span class="o"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the user exists in browser local storage, we simply store that information to React state and send a message to the server using the "UserEnteredRoom" socket.io method to inform our server that our client is ready to chat.&lt;/p&gt;

&lt;p&gt;The next piece of code we will be entering will be at the end of our &lt;em&gt;componentDidMountMethod()&lt;/em&gt;. This code will simply setup up a &lt;em&gt;socket.on&lt;/em&gt; method called "RetrieveChatRoomData" that will always be listening for new Chat Room data, aka when a new chat message has been received by the server. This the code that we will add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;socket.on&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"RetrieveChatRoomData"&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;chatRoomData&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   this.setState&lt;span class="o"&gt;({&lt;/span&gt;chatRoomData: chatRoomData&lt;span class="o"&gt;}&lt;/span&gt;, &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; this.shouldScrollToBottom&lt;span class="o"&gt;())&lt;/span&gt;
&lt;span class="o"&gt;})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that new addition our complete componentDidMount() method should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;componentDidMount&lt;span class="o"&gt;(){&lt;/span&gt;

    // localStorage.removeItem&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'userID'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    // localStorage.removeItem&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'username'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

    &lt;span class="nb"&gt;let &lt;/span&gt;userIDVal &lt;span class="o"&gt;=&lt;/span&gt; localStorage.getItem&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'userID'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;let &lt;/span&gt;usernameVal &lt;span class="o"&gt;=&lt;/span&gt; localStorage.getItem&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'username'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

    //If user does not have a userid and username saved &lt;span class="k"&gt;in &lt;/span&gt;&lt;span class="nb"&gt;local &lt;/span&gt;storage, create them &lt;span class="k"&gt;for &lt;/span&gt;them
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(!&lt;/span&gt;userIDVal&lt;span class="o"&gt;){&lt;/span&gt;

      socket.on&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SetUserData"&lt;/span&gt;, userData &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        //When user creation on server is &lt;span class="nb"&gt;complete&lt;/span&gt;, retrieve and save data to &lt;span class="nb"&gt;local &lt;/span&gt;storage
        localStorage.setItem&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'userID'&lt;/span&gt;, userData.userID&lt;span class="o"&gt;)&lt;/span&gt;
        localStorage.setItem&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'username'&lt;/span&gt;, userData.username&lt;span class="o"&gt;)&lt;/span&gt;
        console.log&lt;span class="o"&gt;(&lt;/span&gt;userData&lt;span class="o"&gt;)&lt;/span&gt;

        this.setState&lt;span class="o"&gt;({&lt;/span&gt;currentUsername: userData.username, currentUserID: userData.userID&lt;span class="o"&gt;})&lt;/span&gt;

        //Notify Socket server is not ready to chat
        socket.emit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"UserEnteredRoom"&lt;/span&gt;, userData&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;})&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      //Send Socket &lt;span class="nb"&gt;command &lt;/span&gt;to create user info &lt;span class="k"&gt;for &lt;/span&gt;current user
      socket.emit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"CreateUserData"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; 
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        //If user already has userid and username, notify server to allow them to &lt;span class="nb"&gt;join &lt;/span&gt;chat
        this.setState&lt;span class="o"&gt;({&lt;/span&gt;currentUsername: usernameVal, currentUserID: userIDVal&lt;span class="o"&gt;})&lt;/span&gt;
        socket.emit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"UserEnteredRoom"&lt;/span&gt;, &lt;span class="o"&gt;{&lt;/span&gt;userID: userIDVal, username: usernameVal&lt;span class="o"&gt;})&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    //Retrieve game data &lt;span class="o"&gt;(&lt;/span&gt;from Get Chat data socket call&lt;span class="o"&gt;)&lt;/span&gt;
    socket.on&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"RetrieveChatRoomData"&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;chatRoomData&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        this.setState&lt;span class="o"&gt;({&lt;/span&gt;chatRoomData: chatRoomData&lt;span class="o"&gt;}&lt;/span&gt;, &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; this.shouldScrollToBottom&lt;span class="o"&gt;())&lt;/span&gt;
    &lt;span class="o"&gt;})&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we will implement the method that will actually send the chat messages to our server.&lt;/p&gt;

&lt;p&gt;Find the method called &lt;em&gt;sendMessageData()&lt;/em&gt; in our file. In this empty method we will be adding this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;var &lt;span class="o"&gt;{&lt;/span&gt;message, currentUsername, currentUserID&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; this.state

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;message.length &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 0&lt;span class="o"&gt;){&lt;/span&gt;
    //Send chat message to server...
    socket.emit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SendMessage"&lt;/span&gt;, &lt;span class="o"&gt;{&lt;/span&gt;message: message, username: currentUsername, userID: currentUserID, timeStamp: null&lt;span class="o"&gt;})&lt;/span&gt;
    //Clear chat message textfield box
    this.setState&lt;span class="o"&gt;({&lt;/span&gt;message: &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code first retrieves our current entered message, our username and our userID from our React state and stores them as variables for future use. Next, we check to make sure the message has some length, otherwise we risk sending an empty message to the server. If the message length is greater than zero, we then use the &lt;em&gt;socket.emit&lt;/em&gt; method "SendMessage" to send our typed in chat message with the information on who sent the message. NOTE: I added an extra timestamp data point just in case I wanted to add timestamps in the future to the chat view.&lt;/p&gt;

&lt;p&gt;Once we have sent the message to the server we empty our message string from our React state which in turns clears our textfield input box. &lt;/p&gt;

&lt;p&gt;With that last addition our Chat Room is almost ready. There is one minor housekeeping-code addition we need to add in order to prevent against possible memory leaks.&lt;/p&gt;

&lt;p&gt;As I mentioned earlier, whenever we implement a &lt;em&gt;socket.on&lt;/em&gt; method, we are telling our code to constantly listen to messages that may come from our server. The thing is, if you do not tell the listeners to stop listening, they will continue to listen pretty much indefinitely as long as the application is running. So if we by-chance, navigated to another page within our application, the listeners would keep on listening even though we are no longer on the page that needed the listeners. &lt;strong&gt;That&lt;/strong&gt;, my friends, is essentially a memory leak. Because if we kept navigating to and from our page with the listeners it would keep adding listeners over and over and over, bogging down our application.&lt;/p&gt;

&lt;p&gt;With all that being said, we need we need to add a set of clean-up methods that turn off those listeners when we leave the chat room page. &lt;/p&gt;

&lt;p&gt;Somewhere in the code, preferably directly under the &lt;em&gt;componentDidMount()&lt;/em&gt; method add this method and code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;componentWillUnmount&lt;span class="o"&gt;(){&lt;/span&gt;
    socket.off&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"RetrieveChatRoomData"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    socket.off&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SetUserData"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As the &lt;em&gt;socket.off&lt;/em&gt; method implies, it "turns off" the listening of these functions when we unmount this particular view or leave this page entirely. &lt;/p&gt;

&lt;p&gt;Before we declare victory on our Chat Room app, I would like us to add one more convenience method to our React application that will allow us to clear our chat history whenever we would like.&lt;/p&gt;

&lt;p&gt;In the "pages" folder within our "src" directory of our project, open the file titled "ClearChat.js". &lt;/p&gt;

&lt;p&gt;At the top of the file, import socket below the last import:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;...
import &lt;span class="o"&gt;{&lt;/span&gt; Row, Container &lt;span class="o"&gt;}&lt;/span&gt; from &lt;span class="s1"&gt;'react-bootstrap'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

import &lt;span class="o"&gt;{&lt;/span&gt;socket&lt;span class="o"&gt;}&lt;/span&gt; from &lt;span class="s1"&gt;'../services/socket'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we have added the import, scroll down until you find the empty method called &lt;em&gt;clearChatData()&lt;/em&gt;. In that method we will add one simple line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;socket.emit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"ClearChat"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As the &lt;em&gt;socket.emit&lt;/em&gt; suggests, this will send a message to our Node server to clear our chat history. This functionality can only be used by navigating to the "/clearChat" page when we run our application.&lt;/p&gt;

&lt;p&gt;With that our Chat Room application is ready to go. Before we deploy our application to the cloud, we are going to briefly test if our application is configured correctly on our local machine. This way we won't be surprised by any errors when we attempt to push it to the cloud.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#local-test-of-reactnode-server-connection"&gt;
  &lt;/a&gt;
  Local Test of React/Node Server Connection
&lt;/h1&gt;

&lt;p&gt;So let's do a quick test to see if our React application is properly configured and setup to connect with our socket.io NodeJS Server.&lt;/p&gt;

&lt;p&gt;In a terminal/command line window, make sure you are currently in our &lt;em&gt;simple-react-chat-app&lt;/em&gt; directory. Once we are sure we are in our directory, let's run a command that will run our React application locally. Type this command into your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should begin locally running our React code in our browser on our localhost (most likely port 3000). In most cases, the application should open automatically in your default browser, if not, enter &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; into your desired browser to view the application. If your application ran successfully, you should see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bwzSo7fB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vo99b6rc3q196xkx58by.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bwzSo7fB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vo99b6rc3q196xkx58by.png" alt="React-App-Local-Host-Chat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It should simply note that someone entered the chat (which was you!). At the top of the screen below the "Chat Room" title it should show who you are now appearing as in the chat. Go ahead and navigate to the bottom of the page and type something into the chat message input box. Send your message by either pressing the send icon or pressing Enter/Return. You should now see your message appear in the chat.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I0Km3hNn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1p9bphpm8qp9dbo4c0j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I0Km3hNn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1p9bphpm8qp9dbo4c0j.png" alt="React-App-Hello-Chat"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If that worked, that means your Node server in the Cloud is working and your react application is communicating correctly with it. If that did not work, go back and ensure your code matches what was shared above. NOTE: Also, check your browser web console (normally accessible via developer tools) to check if you are receiving an errors. This may give you guidance on your issue. &lt;/p&gt;

&lt;p&gt;If you want to check what it would be like to have more than one individual in the Chat Room, Open a different browser (E.g. If you are currently testing with Firefox, now open the Chat Room with Chrome) to see how it works.&lt;/p&gt;

&lt;p&gt;Now that we see the general chat Room functionality is working, let's just test that our Clear chat functionality is working. &lt;/p&gt;

&lt;p&gt;In your browser address bar go to this address: &lt;a href="http://localhost:3000/clearChat"&gt;http://localhost:3000/clearChat&lt;/a&gt; (Note: If your React is hosting at a different port replace 3000 with that port).&lt;/p&gt;

&lt;p&gt;You should be presented with a simple page that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wSWQMDPn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81nyajkkqssaiqjmdgnk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wSWQMDPn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81nyajkkqssaiqjmdgnk.png" alt="React-App-Clear-Chat-View"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click the button on the page that says "Clear Chat".&lt;/p&gt;

&lt;p&gt;Once you have done that, navigate back to main page (&lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;) and you should now see that the chat cleared itself. NOTE: You will only be able to clear the chat while running the application on your local machine. When hosted in cloud, I did not make it possible to route directly to Clear Chat. Feel free to add that capability if you'd like.&lt;/p&gt;

&lt;p&gt;Now that we have tested this locally, it's time to deploy this Chat Room into the cloud. Go ahead and stop the React application so we can move on to the next steps. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#deploying-your-react-chat-room-to-the-cloud"&gt;
  &lt;/a&gt;
  Deploying your React chat Room to the Cloud
&lt;/h1&gt;

&lt;p&gt;The following steps are going to be almost identical to what we did to deploy our Node server to the cloud so quite a bit of this will be familiar. The biggest difference will be the name of our Application and the route and making sure we initiate a React build before we deploy.&lt;/p&gt;

&lt;p&gt;The first thing we are going to need to do is build our React application so it can be properly deployed on our Cloud server (IBM Cloud Cloud Foundry server). So let's go ahead and run this command to build our React app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That should initiate the React build process. This may take a few minutes and your terminal window should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZbnMvRtG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r1459jl9t14u89bnvtin.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZbnMvRtG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r1459jl9t14u89bnvtin.png" alt="CLI-successful-react-app-build"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now in order to have a free way to easily deploy our application to the cloud, we will be using an &lt;a href="https://www.ibm.com/cloud/free"&gt;IBM Cloud Lite account&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;If you do not have IBM Cloud Lite account, you can quickly sign-up for free access to cloud resources for hosting your application in the cloud. Signup using this link: &lt;a href="https://ibm.biz/IBM-Cloud-Signup"&gt;IBM Cloud Signup Link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you are signed up we will be pushing our application to the cloud using IBM Cloud CLI in our terminal. If you do not have the IBM Cloud CLI, you can download the latest version here: &lt;a href="https://www.ibm.com/cloud/cli"&gt;IBM Cloud CLI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;NOTE: If you are interested on how to do this through the IBM Cloud dashboard, you can check out my blog on deploying a React application to the cloud for general walkthrough of how that works: [Deploying ReactJS to the Cloud](&lt;a href="https://ibm.biz/deploying-react-app-in-cloud-devto-bradstondev"&gt;https://ibm.biz/deploying-react-app-in-cloud-devto-bradstondev&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, make sure you are still in a terminal window and that you are still in the _simple-react-chat-app directory.&lt;/p&gt;

&lt;p&gt;While in the directory, log into your IBM Cloud account using this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ibmcloud login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Enter you username and password and you should be presented with a screen like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a1VY9y4V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a0wieoic3xhh8dv4sphx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a1VY9y4V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a0wieoic3xhh8dv4sphx.png" alt="CLI-IBM-Cloud-Login"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HEfLW4-V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzhmrydq2em8u5aq3uan.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HEfLW4-V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzhmrydq2em8u5aq3uan.png" alt="CLI-Authenticated-Success"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have logged into IBM Cloud, we need to set our IBM cloud target to Cloud Foundry as we will be using the Cloud Foundry framework to host our application. If you'd like to learn more about Cloud Foundry, check out this link: [Cloud Foundry](&lt;a href="https://ibm.biz/ibm-cloud-foundry-homepage-bradstondev"&gt;https://ibm.biz/ibm-cloud-foundry-homepage-bradstondev&lt;/a&gt;. Type this command to target Cloud Foundry:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ibmcloud target &lt;span class="nt"&gt;--cf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If it was successful, you should see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1G6gRjX4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3izbju5g1z55wnr5hqv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1G6gRjX4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3izbju5g1z55wnr5hqv.png" alt="CLI-Target-CF"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Right before we deploy our server to the cloud, we need to make some minor updates to our code.&lt;/p&gt;

&lt;p&gt;In our &lt;em&gt;simple-react-chat-app&lt;/em&gt; directory and open the file named "manifest.yml"&lt;/p&gt;

&lt;p&gt;In the file you should see this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;applications:
  - name: Simple React Chat App
memory: 64M
path: build/
buildpack: staticfile_buildpack 
routes:
  - route: simple-react-chat-app-&amp;lt;your-intials&amp;gt;.&amp;lt;server-closest-to-you&amp;gt;.cf.appdomain.cloud
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Replace &lt;em&gt; with your initials and _&lt;/em&gt; with a the server closest to you. Because you may not know what are possible server names, here is a list. Choose a server that you believe you think may be closest to you. And if you want to view this list yourself you can enter the command listed below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ibmcloud regions

//Output
Name       Display name   
au-syd     Sydney   
&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="nt"&gt;-che&lt;/span&gt;     Chennai   
jp-osa     Osaka   
jp-tok     Tokyo   
kr-seo     Seoul   
eu-de      Frankfurt   
eu-gb      London   
ca-tor     Toronto   
us-south   Dallas   
us-east    Washington DC   
br-sao     Sao Paulo  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example, this was my updated manifest.yml(NOTE: Please do not use the same route name as displayed below. This will likely cause an error saying route is already taken when you attempt to push to IBM Cloud):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;applications:
  - name: Simple React Chat App
memory: 64M
path: build/
buildpack: staticfile_buildpack 
routes:
  - route: simple-react-chat-app-bsh.us-south.cf.appdomain.cloud
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you have updated your manifest.yml, you only have one more step: &lt;strong&gt;Deploy your React application into the Cloud!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the same terminal window you logged into IBM Cloud with, enter this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ibmcloud cf push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will initiate the process of deploying your NodeJS application into the cloud. It in general takes a few minutes to deploy this code.&lt;/p&gt;

&lt;p&gt;When the the application has been successfully deployed, you should see something like this in your terminal window:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OqiAkujK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b6l7qntk5o1ojffqrpaq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OqiAkujK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b6l7qntk5o1ojffqrpaq.png" alt="CLI-React-app-successful-push"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go to a browser window and insert the route value you entered into the manifest.yml. In my case that would be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;simple-react-chat-app-bsh.us-south.cf.appdomain.cloud
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should be presented with our Chat Room and with the message that a new user entered the chat. If you did not clear the chat in our previous step, you will likely see the messages you sent earlier while testing:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z05dLb5x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/195a5sppuhuzlyv5tcvj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z05dLb5x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/195a5sppuhuzlyv5tcvj.png" alt="React-App-Deployed-Chat"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you do not see this page, you may need to check that you code matches the code I shared above and feel free to check the actual application status and error log by visiting the IBM Cloud Resource list and finding your application by its name.&lt;/p&gt;

&lt;p&gt;And just like that, we have a working chat room that can be shared with whomever you like!!&lt;/p&gt;

&lt;p&gt;I really encourage you to take the time to really understand what all this code I have shared with you is doing. Change method names, change how data is sent, and just break things! This is the best way to truly understand what is happening under the hood so that you can use socket.io to implement realtime communication in applications like this.&lt;/p&gt;

&lt;p&gt;Since socket.io's real-time messaging can be used in a lot of different scenarios, I'd like to hear from all of you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What other ways could you imagine using the socket.io technology other than a chat room?&lt;/strong&gt; Leave you ideas in the the comments below. I'd love to hear them!&lt;/p&gt;

&lt;p&gt;Thanks for reading this blog and I am encouraged by your desire to learn new topics like these.&lt;/p&gt;

&lt;p&gt;Have a great one until next time!&lt;/p&gt;

&lt;p&gt;==== FOLLOW ME ON SOCIAL MEDIA ====&lt;br&gt;
Twitter: &lt;a href="https://twitter.com/BradstonDev"&gt;Bradston Dev&lt;/a&gt;&lt;br&gt;
Dev.to: &lt;a class="mentioned-user" href="https://dev.to/bradstondev"&gt;@bradstondev&lt;/a&gt;
 &lt;br&gt;
Youtube: &lt;a href="https://www.youtube.com/channel/UC6Ky8s71RP65akLb_XV1_OA"&gt;Bradston YT&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>node</category>
      <category>cloud</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Set up automated deployments with Google Cloud Run and Gitlab</title>
      <author>akinniyi</author>
      <pubDate>Fri, 07 May 2021 20:03:45 +0000</pubDate>
      <link>https://dev.to/akinniyi/set-up-automated-deployments-with-google-cloud-run-and-gitlab-53j5</link>
      <guid>https://dev.to/akinniyi/set-up-automated-deployments-with-google-cloud-run-and-gitlab-53j5</guid>
      <description>&lt;p&gt;Let's look at how we can set up our continuous delivery pipeline for our Google Cloud Run projects with Gitlab CI/CD&lt;/p&gt;

&lt;p&gt;Prerequisites:&lt;br&gt;
Google Cloud Run:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Cloud Run is a serverless, managed compute platform that enables you to run stateless containers that are invocable via web requests or Pub/Sub events.&lt;br&gt;
 To run a Cloud Run service, you need to have a &lt;a href="https://console.cloud.google.com/project"&gt;Google Project&lt;/a&gt;&lt;br&gt;
&lt;a href="https://console.developers.google.com/apis/api/run.googleapis.com/overview"&gt;enable Cloud Run API&lt;/a&gt;&lt;br&gt;
&lt;a href="https://console.cloud.google.com/cloud-build/builds"&gt;enable Cloud Build API&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Gitlab:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;GitLab is a web-based DevOps lifecycle tool that provides a Git-repository manager providing wiki, issue-tracking, and continuous integration and deployment pipeline features, using an open-source license, developed by GitLab Inc.&lt;br&gt;
 You can create a Gitlab repo here &lt;a href="https://gitlab.com/projects/new"&gt;Google Project&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Clone sample repo here:&lt;br&gt;
&lt;a href="https://gitlab.com/niyi/myhelloworldapp"&gt;https://gitlab.com/niyi/myhelloworldapp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 1a: Validate Service Account&lt;br&gt;
A service account is a special kind of account used by an application to make authorized API calls on the GCP platform.&lt;br&gt;
On your Google Cloud project, navigate through Cloud Build &amp;gt; Settings.&lt;br&gt;
Under Service account permissions, make sure both Cloud Run and Service Accounts are enabled&lt;br&gt;
Step 1b: Create a Google Service Account&lt;br&gt;
We'll create a new service account for your application to use&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On your Google Cloud project, navigate through IAM &amp;amp; Admin &amp;gt; Service Accounts &amp;gt; Click on CREATE SERVICE ACCOUNT
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ugq_wFf_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ikb4jdw0pgf35uvxf4cz.jpg" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Give your new service account any name you want and click CREATE&lt;/li&gt;
&lt;li&gt;Add the following roles to your service account by clicking Select Role input under task number 2&lt;/li&gt;
&lt;li&gt;Cloud Build Service Agent&lt;/li&gt;
&lt;li&gt;Click Create then click Done to add the account.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--shfOdUIN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sse7hrlpzsezhw6no3no.jpg" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Generate a credential file for this account by navigating to the newly created service account &amp;gt; Keys &amp;gt; Click on Add Key &amp;gt; Create New Key. Select JSON and click CREATE
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lPr1d7sB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/byg0btv07j354147jg58.jpg" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Step 2: Setup Gitlab CICD variables:&lt;br&gt;
In this step, we'll create variables that we'll use in our code. One for the GCP Project ID and another for the Service Account we created earlier&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Navigate to the project repository on Gitlab &amp;gt; Settings &amp;gt; CI/CD&lt;/li&gt;
&lt;li&gt;To add a variable, under the Variables section, click the Expand button and click on Add Variable
We need to add two variables, one names GCP_PROJECT_ID with the value of our GCP Project ID and the other named GCP_SERVICE_ACCOUNT for the content of the JSON we downloaded earlier
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RlxatMnS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01ijlhysfoenyxljfuo6.jpg" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WJFsVr7q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ldxultn8bj3k19e4745.jpg" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Step 3: Setup Application code&lt;br&gt;
We need to configure our code to connect to Gitlab CI/CD. We'll also use Docker to containerize our application so it runs the same across multiple platforms.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We've added a Dockerfile in our application that will run on PORT 8080, which is Google Cloud Run's default port&lt;/li&gt;
&lt;li&gt;We've also added a .gitlab-ci.yml file which is the file the triggers our &lt;a href="https://docs.gitlab.com/ee/ci/quick_start/index.html"&gt;CI/CD pipeline on Gitlab&lt;/a&gt;
*
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# File: .gitlab-ci.yml
variables:
  SERVICE_NAME: "myHelloWorldApp"

deploy:
  stage: deploy
  only:
    - master # This pipeline stage will run on this branch alone

  image: google/cloud-sdk:latest # We'll use Google Cloud SDK for Cloud Run related commands
  script:
    - echo $GCP_SERVICE_ACCOUNT &amp;gt; gcloud-service-key.json # Save Google cloud contents in a temporary json file
    - gcloud auth activate-service-account --key-file gcloud-service-key.json # Activate your service account
    - gcloud auth configure-docker # Configure docker environment
    - gcloud config set project $GCP_PROJECT_ID #Set the GCP Project ID to the variable name
    - gcloud builds submit --tag gcr.io/$GCP_PROJECT_ID/$SERVICE_NAME #Run the gcloud build command to build our image
    - gcloud run deploy interaction --image gcr.io/$GCP_PROJECT_ID/$SERVICE_NAME --region=us-east4 --platform managed --allow-unauthenticated # Run the gcloud run deploy command to deploy our new service
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Replace the SERVICE_NAME value with the desired name for your application and save the changes.&lt;/p&gt;

&lt;p&gt;At the end of the file, we're running the commands &lt;a href="https://cloud.google.com/run/docs/building/containers"&gt;gcloud build&lt;/a&gt; and &lt;a href="https://cloud.google.com/run/docs/deploying"&gt;gcloud run deploy&lt;/a&gt; to build and deploy our application respectively.&lt;/p&gt;

&lt;p&gt;Push your changes to the remote Gitlab repository and watch as your new baby is created.&lt;/p&gt;

&lt;p&gt;To monitor the progress of your deployment on Gitlab navigate to CI/CD &amp;gt; Pipelines and click on the latest job.&lt;br&gt;
To see your new application on Cloud Run, navigate to GCP &amp;gt; Cloud Run and search for the name of the service&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cERoaUbU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s3wtnne0vnv6p76aoxn4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cERoaUbU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s3wtnne0vnv6p76aoxn4.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Join Us To Discuss Features of GitHub and Open Source</title>
      <author>Christina Gorton</author>
      <pubDate>Fri, 07 May 2021 19:59:25 +0000</pubDate>
      <link>https://dev.to/devteam/join-us-to-discuss-features-of-github-and-open-source-4o3e</link>
      <guid>https://dev.to/devteam/join-us-to-discuss-features-of-github-and-open-source-4o3e</guid>
      <description>&lt;h2&gt;
  &lt;a href="#twitch"&gt;
  &lt;/a&gt;
  Twitch 👾
&lt;/h2&gt;

&lt;p&gt;Are you participating in the &lt;a href="https://dev.to/devteam/join-us-for-the-first-dev-community-bug-smash-3plm"&gt;DEV Community Bug Smash&lt;/a&gt;? Are you interested in contributing to other open source projects? Does GitHub confuse you?&lt;/p&gt;

&lt;p&gt;Nick Taylor and I will be on the &lt;a href="https://www.twitch.tv/thepracticaldev"&gt;Practical DEV Twitch&lt;/a&gt; stream Wednesday, May 12th 1pm ET(5pm UTC) to talk about GitHub and open source. &lt;/p&gt;

&lt;p&gt;We will discuss features you might not know exist, best practices, contributing to a project, and more.&lt;/p&gt;

&lt;p&gt;If you have questions about open source or GitHub come hang out with us and ask ALL your questions live. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bug-smash"&gt;
  &lt;/a&gt;
  Bug Smash 🐛
&lt;/h2&gt;

&lt;p&gt;If you are interested in participating in the Bug Smash event we still have several bugs ready for you to smash! &lt;/p&gt;

&lt;p&gt;You can check out the full list of bugs in our repo labeled &lt;a href="https://github.com/forem/forem/labels/bug%20smash"&gt;&lt;code&gt;bug smash&lt;/code&gt; here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Accessibility and/or Frontend:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/13505"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Skip links are not the first focused element on internal navigation
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#13505&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/aitchiss"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--gKQDnp6U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/20773163%3Fv%3D4" alt="aitchiss avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/aitchiss"&gt;aitchiss&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/13505"&gt;&lt;time&gt;Apr 26, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      

&lt;p&gt;&lt;strong&gt;Describe the bug&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Under #1153 we added skip links to all pages in the app. A skip link should be the first element focused on a page when the user presses the Tab key - however, this is only the case in a Forem if you land directly on a URL, and not if you navigate internally, e.g. by a link click.&lt;/p&gt;
&lt;p&gt;There are several strategies available to managing focus on route change, but I would suggested the approach Marcy Sutton has written about following user testing with Fable: &lt;a href="https://www.gatsbyjs.com/blog/2019-07-11-user-testing-accessible-client-routing/" rel="nofollow"&gt;What we learned from user testing of accessible client-side routing techniques with Fable Tech Labs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The recommendation in that article is to send focus immediately to the skip link on the new page. We will need to experiment with &lt;code&gt;:focus-visible&lt;/code&gt; to ensure that for users who navigated by mouse click, the skip link isn't visible. If this isn't possible, I think an acceptable fallback would be to focus an empty element directly before the skip link, so that once on the new page, the skip link is the first item focused on Tab press.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To Reproduce&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Load the home page, and press Tab. You should see the skip link appear&lt;/li&gt;
&lt;li&gt;Activate the skip link by clicking or pressing Enter&lt;/li&gt;
&lt;li&gt;Select a post using the Tab key and press enter to view it&lt;/li&gt;
&lt;li&gt;On the new page, press Tab again&lt;/li&gt;
&lt;li&gt;Notice that the skip link is not the first item focused, and if you want to get to the main post content you have to press Tab multiple more times&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I select an article by keyboard on the home page&lt;/li&gt;
&lt;li&gt;On the new page the skip link is visible and focused&lt;/li&gt;
&lt;li&gt;If I repeat these actions but use the mouse, the skip link is not visible when I arrive on the new page&lt;/li&gt;
&lt;/ul&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/13505"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/13195"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Modal appears under the navbar
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#13195&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/aurelieverrot"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KBy2XoLK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/50857179%3Fv%3D4" alt="aurelieverrot avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/aurelieverrot"&gt;aurelieverrot&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/13195"&gt;&lt;time&gt;Mar 30, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;&lt;strong&gt;Describe the bug&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The modal triggered by the three dots on the left of an article appears stuck under the navbar of the website, it is not readable entirely.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To Reproduce&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;After submitting an article but before publishing.
Click on the three dots on the top left of the article.
The modal will show up but a part of it is hidden behind the navbar&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The modal should appear entirely to see all the links.  It can appear under the navbar, or on top of it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Screenshots&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://user-images.githubusercontent.com/50857179/113064409-c6eed080-916b-11eb-80a0-9425a733ac65.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eIWvzyaP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/50857179/113064409-c6eed080-916b-11eb-80a0-9425a733ac65.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Desktop (please complete the following information):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS, version: MacOS Catalina 10.15.7&lt;/li&gt;
&lt;li&gt;Browser, version: Chrome Version 88.0.4324.192 (Official Build) (x86_64)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Additional context&lt;/strong&gt;
button id="article-show-more-button"&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/13195"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Podcast:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/13667"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        "Follow" text missing from Podcast Liquid tag display. 
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#13667&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/cmgorton"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wm5awArh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/21039864%3Fv%3D4" alt="cmgorton avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/cmgorton"&gt;cmgorton&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/13667"&gt;&lt;time&gt;May 05, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;&lt;strong&gt;Describe the bug&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When using the podcast liquid tag in an article the button that should have "Follow" no longer displays the text. I tested this with several podcasts and none of them display the "Follow" text.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To Reproduce&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to the editor to create a new post.&lt;/li&gt;
&lt;li&gt;Use the podcast liquid tag to render any of the podcasts on DEV &lt;code&gt;{% podcast url-for-episode-here %}&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;click preview to preview the liquid tag&lt;/li&gt;
&lt;li&gt;Scroll down to the rendered podcast liquid tag; it will be displayed with an empty button that should contain "Follow"&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;
Follow text inside of the empty button&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Screenshots&lt;/strong&gt;
&lt;a href="https://user-images.githubusercontent.com/21039864/117168445-631c8080-ad85-11eb-8d22-2470f1704451.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KfRD2t4p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21039864/117168445-631c8080-ad85-11eb-8d22-2470f1704451.png" alt="Screen Shot 2021-05-05 at 9 30 24 AM"&gt;&lt;/a&gt;
&lt;a href="https://user-images.githubusercontent.com/21039864/117168460-657eda80-ad85-11eb-8e49-c457f8feb6cd.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fjxuRMLO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21039864/117168460-657eda80-ad85-11eb-8e49-c457f8feb6cd.png" alt="Screen Shot 2021-05-05 at 9 30 57 AM"&gt;&lt;/a&gt;
&lt;a href="https://user-images.githubusercontent.com/21039864/117168469-6879cb00-ad85-11eb-8f81-00bc5a6c2fe4.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uCUOudBE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21039864/117168469-6879cb00-ad85-11eb-8f81-00bc5a6c2fe4.png" alt="Screen Shot 2021-05-05 at 9 31 35 AM"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here you can see the text is not rendered at all in the HTML
&lt;a href="https://user-images.githubusercontent.com/21039864/117168477-6a438e80-ad85-11eb-91bf-bc48db140c46.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lwtP6Z1j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21039864/117168477-6a438e80-ad85-11eb-91bf-bc48db140c46.png" alt="Screen Shot 2021-05-05 at 9 33 59 AM"&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/13667"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/8757"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Podcast episodes not processing HTML
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#8757&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/benhalpern"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Btd6rDfR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/3102842%3Fv%3D4" alt="benhalpern avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/benhalpern"&gt;benhalpern&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/8757"&gt;&lt;time&gt;Jun 17, 2020&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;&lt;code&gt;processed_html&lt;/code&gt; for recent podcast episodes is &lt;code&gt;nil&lt;/code&gt;.... The &lt;code&gt;body&lt;/code&gt; which is the raw content returned from the RSS, is present. So something is wrong with our pipeline.&lt;/p&gt;
&lt;p&gt;Example...&lt;/p&gt;
&lt;p&gt;&lt;a href="https://dev.to/devdiscuss/s1-e6-little-known-productivity-tools-big-productivity-gains" rel="nofollow"&gt;https://dev.to/devdiscuss/s1-e6-little-known-productivity-tools-big-productivity-gains&lt;/a&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/8757"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Miscellaneous:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/13194"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Article `date_time` validation seems to be about one hour ahead
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#13194&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/cognivore"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--pHSYwpFT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/66186054%3Fv%3D4" alt="cognivore avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/cognivore"&gt;cognivore&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/13194"&gt;&lt;time&gt;Mar 30, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;While importing from RSS, if the time is set to approximately current (for example it's 22:00 UTC, and &lt;code&gt;date:&lt;/code&gt; is getting set to &lt;code&gt;21:57&lt;/code&gt;), dev.to deployment won't accept the post.&lt;/p&gt;
&lt;p&gt;A significant reduction in time should be applied for the post to be posted. For example, &lt;code&gt;20:57 UTC&lt;/code&gt; shall work.&lt;/p&gt;
&lt;p&gt;Expected behaviour: dev.to deployment accepts the post.&lt;/p&gt;
&lt;p&gt;Post in question: &lt;a href="https://dev.to/doma/parser-combinators-in-rust-1f2e" rel="nofollow"&gt;https://dev.to/doma/parser-combinators-in-rust-1f2e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A 10 second summary: &lt;a href="https://www.youtube.com/watch?v=4ddiTSWtwB8" rel="nofollow"&gt;https://www.youtube.com/watch?v=4ddiTSWtwB8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To Reproduce&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to dev.to/settings/extensions&lt;/li&gt;
&lt;li&gt;Enter RSS feed like &lt;a href="https://doma.dev/atom.xml" rel="nofollow"&gt;https://doma.dev/atom.xml&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Click Save Feed Settings&lt;/li&gt;
&lt;li&gt;Choose a post to publish, for example "Parser combinators in Rust"&lt;/li&gt;
&lt;li&gt;Click "Edit"&lt;/li&gt;
&lt;li&gt;Change time to current minus three minutes, make sure to keep the time zone intact&lt;/li&gt;
&lt;li&gt;Click "Save"&lt;/li&gt;
&lt;li&gt;Get confusing error actually advertising wrong time format!&lt;/li&gt;
&lt;li&gt;Change the time to current minus one hour and three minutes, make sure to keep the time zone intact&lt;/li&gt;
&lt;li&gt;Click "Save"&lt;/li&gt;
&lt;li&gt;Now the post saves, even though both attempts were valid&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Expected behaviour: dev.to deployment accepts the post when we click "Save" the first time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Screenshots&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=4ddiTSWtwB8" rel="nofollow"&gt;https://www.youtube.com/watch?v=4ddiTSWtwB8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Desktop (please complete the following information):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS, version: Linux, Windows&lt;/li&gt;
&lt;li&gt;Browser, version: Firefox&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Smartphone (please complete the following information):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Device: NAN&lt;/li&gt;
&lt;li&gt;OS, version: NAN&lt;/li&gt;
&lt;li&gt;Browser, version: NAN&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Additional context&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ditto&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/13194"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/6586"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Tag "taggings_count" are not always updated correctly
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#6586&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/rhymes"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--b29X-Z_H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/146201%3Fv%3D4" alt="rhymes avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/rhymes"&gt;rhymes&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/6586"&gt;&lt;time&gt;Mar 11, 2020&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      

&lt;p&gt;&lt;strong&gt;Describe the bug&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Each tag has an associated &lt;code&gt;taggings_count&lt;/code&gt; which contains the number of items they are associated with (in our case either articles or listings).&lt;/p&gt;
&lt;p&gt;The problem lies in the fact that some of these counts are incorrect in the DB.&lt;/p&gt;
&lt;p&gt;I found this out by playing with the Tags API which returns tags sorted by &lt;code&gt;taggings_count&lt;/code&gt; in descending order&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;archlinux&lt;/code&gt; according to the API - &lt;a href="https://dev.to/api/tags" rel="nofollow"&gt;https://dev.to/api/tags&lt;/a&gt; - is the third most used tag but it's very unlikely that is true. Its tag page - &lt;a href="https://dev.to/t/archlinux" rel="nofollow"&gt;https://dev.to/t/archlinux&lt;/a&gt; - lists 50 articles and even taking into account all listings it might have been used in, it doesn't add up&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/api/tags?per_page=15" rel="nofollow"&gt;https://dev.to/api/tags?per_page=15&lt;/a&gt; shows that &lt;code&gt;devops&lt;/code&gt; is more popular than &lt;code&gt;showdev&lt;/code&gt; but &lt;a href="https://dev.to/t/devops" rel="nofollow"&gt;devops page&lt;/a&gt; contains 2917 articles, &lt;a href="https://dev.to/t/showdev" rel="nofollow"&gt;showdev page&lt;/a&gt; contains 3110. Again, I don't think there are enough listings tagged with &lt;code&gt;devops&lt;/code&gt; to account for the difference&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thus, the bug.&lt;/p&gt;
&lt;p&gt;This counter is managed by automatically by the &lt;a href="https://github.com/mbleigh/acts-as-taggable-on"&gt;acts-as-taggable-on&lt;/a&gt; gem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I'd expect the counter to reflect the correct number of items that have been tagged with it.&lt;/p&gt;
&lt;p&gt;I see two possible explanations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;there's an error in our setup, in respect to the &lt;a href="https://github.com/mbleigh/acts-as-taggable-on#usage"&gt;usage guide&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;it has something to do with tag aliasing (?)&lt;/li&gt;
&lt;li&gt;there's a bug in the gem itself. I found a few issue tickets that might point us in this direction:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mbleigh/acts-as-taggable-on/issues/929"&gt;https://github.com/mbleigh/acts-as-taggable-on/issues/929&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mbleigh/acts-as-taggable-on/issues/947"&gt;https://github.com/mbleigh/acts-as-taggable-on/issues/947&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/6586"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/6417"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Incomplete surrogate-key cache invalidation logic
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#6417&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/benhalpern"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Btd6rDfR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/3102842%3Fv%3D4" alt="benhalpern avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/benhalpern"&gt;benhalpern&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/6417"&gt;&lt;time&gt;Mar 02, 2020&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;Currently we user surrogate keys to determine when certain endpoints should have their caches cleared, such as an article API endpoint like this...&lt;/p&gt;
&lt;p&gt;&lt;code&gt;set_surrogate_key_header Article.table_key, @articles.map(&amp;amp;:record_key)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And then we call &lt;code&gt;article.purge&lt;/code&gt; which magically makes any endpoint with that article's &lt;code&gt;record_key&lt;/code&gt; have its edge cache expire.&lt;/p&gt;
&lt;p&gt;More on surrogate keys...&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.fastly.com/en/guides/getting-started-with-surrogate-keys" rel="nofollow"&gt;https://docs.fastly.com/en/guides/getting-started-with-surrogate-keys&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The issue with the above logic is that a &lt;em&gt;new&lt;/em&gt; article which should become part of that endpoint will not flush its cache if created. So it will not show up on that endpoint until another article which fits within the above &lt;code&gt;@articles&lt;/code&gt; is purged. This makes it kind of random to find out when it will be included.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;article.purge&lt;/code&gt; is a magic method to create a purge ping which uses the appropriate surrogate header.&lt;/p&gt;
&lt;p&gt;A solution for this could be a surrogate key like this...&lt;/p&gt;
&lt;p&gt;&lt;code&gt;set_surrogate_key_header Article.table_key, "tag-index-endpoint-#{tag}", @articles.map(&amp;amp;:record_key)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and then we make a specific purge call when a new article should purge it like &lt;code&gt;purge("tag-index-endpoint-#{tag}"&lt;/code&gt; when an article is created.&lt;/p&gt;
&lt;p&gt;Our current situation isn't causing any radically wrong behavior and the "random" purging is working okay but we should look into this as we go about bigger changes here.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/6417"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>devbugsmash</category>
      <category>opensource</category>
      <category>forem</category>
      <category>contributorswanted</category>
    </item>
    <item>
      <title>Rethinking Jupyter Interactive Documentation</title>
      <author>Matthias Bussonnier</author>
      <pubDate>Fri, 07 May 2021 19:45:38 +0000</pubDate>
      <link>https://dev.to/quansightlabs/rethinking-jupyter-interactive-documentation-4okm</link>
      <guid>https://dev.to/quansightlabs/rethinking-jupyter-interactive-documentation-4okm</guid>
      <description>&lt;p&gt;Jupyter Notebook first release was 8 years ago – under the IPython Notebook name at the time. Even if notebooks were not invented by Jupyter; they were definitely democratized by it. Being Web powered allowed development of many changes in the Datascience world. Objects now often expose rich representation; from Pandas dataframes with as html tables, to more recent &lt;a href="https://github.com/scikit-learn/scikit-learn/pull/14180"&gt;Scikit-learn model&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Today I want to look into a topic that has not evolved much since, and I believe&lt;br&gt;
could use an upgrade. Accessing interactive Documentation when in a Jupyter session, and what it could become. At the end I'll link to my current prototype if you are adventurous.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#the-current-limitation-for-users"&gt;
  &lt;/a&gt;
  The current limitation for users
&lt;/h1&gt;

&lt;p&gt;The current documentation of IPython and Jupyter come in a few forms, but mostly have the same limitation. The typical way to reach for help is to use the &lt;code&gt;?&lt;/code&gt; operator. Depending on the frontend you are using it will bring a pager, or a panel that will display some information about the current object.&lt;/p&gt;

&lt;p&gt;It can show some information about the current object (signature, file, sub/super classes) and the raw DocString of the object.&lt;/p&gt;

&lt;p&gt;You can scroll around but that's about it whether in terminal or Notebooks.&lt;/p&gt;

&lt;p&gt;Compare it to the same documentation on the NumPy website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--myY0Vs_P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://labs.quansight.org/images/2021/05/numpy-linspace-compare.png" class="article-body-image-wrapper"&gt;&lt;img alt="numpy.linspace on numpy.org" src="https://res.cloudinary.com/practicaldev/image/fetch/s--myY0Vs_P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://labs.quansight.org/images/2021/05/numpy-linspace-compare.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the left is the documentation for NumPy when visiting &lt;a href="https://numpy.org"&gt;the NumPy website&lt;/a&gt;. Let's call that "rendered documentation". On the right what you get in Jupyter Lab or in the IPython or regular Python REPL, let's cal that "help documentation" since it is typically reached via &lt;code&gt;identifier?&lt;/code&gt; or &lt;code&gt;help(identifier)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Compared to rendered documentation, the help documentation is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hard to read,&lt;/li&gt;
&lt;li&gt;Has no navigation,&lt;/li&gt;
&lt;li&gt;RST Directives have not been interpreted,&lt;/li&gt;
&lt;li&gt;No inline graphs, no rendered math.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is also no access to non-docstring based documentation, &lt;strong&gt;no narrative&lt;/strong&gt;, &lt;strong&gt;no tutorials&lt;/strong&gt;, &lt;strong&gt;no image gallery or examples&lt;/strong&gt;, no search, no syntax highlighting, no way to interact or modify documentation to test effects of parameters.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#limitation-for-authors"&gt;
  &lt;/a&gt;
  Limitation for authors
&lt;/h1&gt;

&lt;p&gt;Due to Jupyter and IPython limitations to display documentation I believe authors are often contained to document functions.&lt;/p&gt;

&lt;p&gt;Syntax in docstrings is often kept simple for readability, this first version is&lt;br&gt;
often preferred:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;You can use ``np.einsum('i-&amp;gt;', a)`` ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the longer form, which makes the reference into a link when viewing rendered&lt;br&gt;
documentation, it is difficult to read when shown as help documentation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;You can use :py:func:`np.einsum('i-&amp;gt;', a) &amp;lt;numpy.einsum&amp;gt;` ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This also leads to long discussions about which syntax to use in advanced areas, like formulas in &lt;a href="https://github.com/sympy/sympy/issues/14964"&gt;Sympy's docstrings&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Many projects have to implement dynamic docstrings; for example to include all the parameters a function or class would pass down using &lt;code&gt;**kwargs&lt;/code&gt; (search the matplotlib source code for &lt;code&gt;_kwdoc&lt;/code&gt; for example, or look at the &lt;code&gt;pandas.DataFrame&lt;/code&gt; implementation).&lt;/p&gt;

&lt;p&gt;This can make it relatively difficult for authors and contributors to properly maintain and provide comprehensive docs.&lt;/p&gt;

&lt;p&gt;I'm not sure I can completely predict all the side effects this has on how library maintainers write docs; but I believe there is also a strong opportunity for a tool to help there. See for example &lt;a href="https://github.com/Carreau/velin"&gt;vélin&lt;/a&gt; which attempts to auto reformat and fix common NumPyDoc's format mistakes and&lt;br&gt;
typos – but that's a subject of a future post.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#stuck-between-a-rock-and-a-hard-place"&gt;
  &lt;/a&gt;
  Stuck between a Rock and a Hard place
&lt;/h1&gt;

&lt;p&gt;While Sphinx and related projects are great at offering hosted HTML documentation, extensive usage of those makes interactive documentation harder to consume.&lt;/p&gt;

&lt;p&gt;While it is possible to &lt;a href="https://github.com/spyder-ide/docrepr"&gt;run Sphinx on the fly when rendering docstrings&lt;/a&gt;, most Sphinx features only work when building a full project, with the proper configuration and extension, and can be computationally intensive. This makes running Sphinx locally impractical.&lt;/p&gt;

&lt;p&gt;Hosted websites often may not reflect the locally installed version of the libraries and require careful linking, deprecation and narrative around platform or version specific features.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#this-is-fixable"&gt;
  &lt;/a&gt;
  This is fixable
&lt;/h1&gt;

&lt;p&gt;For the past few months I've been working on rewriting how IPython (and hence Jupyter) can display documentation. It works both in terminal (IPython) and browser context (notebook, JupyterLab, Spyder) with proper rendering, and currently understands most directives; it could be customized to understand any new ones:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_cdWPNWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://labs.quansight.org/images/2021/05/papyri-1.png" class="article-body-image-wrapper"&gt;&lt;img alt="papyri1" src="https://res.cloudinary.com/practicaldev/image/fetch/s--_cdWPNWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://labs.quansight.org/images/2021/05/papyri-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Above is the (terminal) documentation of &lt;code&gt;scipy.polynomial.lagfit&lt;/code&gt;, see how the single backticks are properly understood and refer to known parameters, it detected that  &lt;code&gt;`n`&lt;/code&gt; is incorrect as it should have double backticks; notice the rendering of the math even in terminal.&lt;/p&gt;

&lt;p&gt;For that matter technically this does not care as to whether the DocString is written in RST or Markdown; though I need to implement the latter part. I believe though that some maintainers would be quite happy to use Markdown, the syntax of which more users are familiar with.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xf1mbhoR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://labs.quansight.org/images/2021/05/papyri-nav.gif" class="article-body-image-wrapper"&gt;&lt;img alt="papyri navigation" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xf1mbhoR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://labs.quansight.org/images/2021/05/papyri-nav.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It supports navigation – here in a terminal – where clicking or pressing enter on a link would bring you to the target page. In the above gif you can see that many tokens of the code example are also automatically type-inferred (thanks &lt;a href="https://github.com/davidhalter/jedi"&gt;Jedi&lt;/a&gt;), and can also be clicked on to navigate to their corresponding page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5nu6i5hj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://labs.quansight.org/images/2021/05/papyri-terminal-fig.png" class="article-body-image-wrapper"&gt;&lt;img alt="papyri terminal-fig" src="https://res.cloudinary.com/practicaldev/image/fetch/s--5nu6i5hj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://labs.quansight.org/images/2021/05/papyri-terminal-fig.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Images are included, even in the terminal when they are not inline but replaced by a button to open them in your preferred viewer (see the &lt;code&gt;Open with quicklook&lt;/code&gt; in the above screenshot).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-future"&gt;
  &lt;/a&gt;
  The future
&lt;/h1&gt;

&lt;p&gt;I'm working on a number of other features, in particular:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;rendering of narrative docs – for which I have a prototype,&lt;/li&gt;
&lt;li&gt;automatic indexing of all the figures and plots –  working but slow right now,&lt;/li&gt;
&lt;li&gt;proper cross-library referencing and indexing without the need for intersphinx.
For example, it is possible from the &lt;code&gt;numpy.linspace&lt;/code&gt; page to see all pages that
reference it, or use &lt;code&gt;numpy.linspace&lt;/code&gt; in their example section
(see previous image).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And many others, like showing a graph of the local references between functions, search, and preference configurability. I think this could also support many other desirable features, like user preferences (hide/show type annotation, deprecated directives, and custom color/syntax highlighting) - though I haven't started working on these. I do have some ideas on how this could be used to provide translations as well.&lt;/p&gt;

&lt;p&gt;Right now, is it not as fast and efficient as I would like to – though it's faster than running Sphinx on the fly – but requires some ahead of time processing. And it crashes in many places; it can render most of the documentation of SciPy, NumPy, xarray, IPython and scikit-image.&lt;/p&gt;

&lt;p&gt;I encourage you to think about what features you are missing when using documentation from within Jupyter and let me know. I hope this could become a nice addition to Sphinx when consulting documentation from within Jupyter.&lt;/p&gt;

&lt;p&gt;For now I've submitted a &lt;a href="https://docs.google.com/document/d/1hk-Ww7pUwnoHINNhDeP9UOPvNEemAFe-pohK5dCtZPs/edit?usp=sharing"&gt;Letter of intent to CZI EOSS 4&lt;/a&gt; in an attempt to get some of that work funded to land in IPython, and if you have any interest in contributing or want something like that for your library, feel free to reach out.&lt;/p&gt;

&lt;p&gt;You can find the repository &lt;a href="https://github.com/Carreau/papyri"&gt;on my GitHub account&lt;/a&gt;, it's still in pre-alpha stage. It is still quite unstable with too many hard coded values to my taste, and needs some polish to be considered usable for production. I've focused my effort for now mostly on terminal rendering – a Jupyter notebook or JupyterLab extension would be welcome. So if you are adventurous and like to work from the cutting (or even bleeding) edge, please feel free to try it out and open issues/pull request.&lt;/p&gt;

&lt;p&gt;It also needs to be better documented (pun intended), I'm hoping to use papyri itself to document papyri; but it needs to be a bit more mature for that.&lt;/p&gt;

&lt;p&gt;Stay tuned for more news, I'll try to explain how it works in more detail in a follow-up post, and discuss some of the advantages (and drawbacks) this project has.&lt;/p&gt;

</description>
      <category>python</category>
      <category>opensource</category>
      <category>datascience</category>
      <category>jupyter</category>
    </item>
    <item>
      <title>What was your win this week?</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Fri, 07 May 2021 19:24:59 +0000</pubDate>
      <link>https://dev.to/devteam/what-was-your-win-this-week-nbe</link>
      <guid>https://dev.to/devteam/what-was-your-win-this-week-nbe</guid>
      <description>&lt;p&gt;Hey there!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Looking back on your week — what was something you're proud of?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All wins count — big or small 🎉&lt;/p&gt;

&lt;p&gt;Examples of 'wins' include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starting a new project&lt;/li&gt;
&lt;li&gt;Fixing a tricky bug&lt;/li&gt;
&lt;li&gt;Starting a new book ... or whatever else might spark joy ❤️ &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Happy Friday!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/EktbegF3J8QIo/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/EktbegF3J8QIo/giphy.gif" alt="Pokemon party"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>😢 Saying Goodbye to Axway Amplify Titanium</title>
      <author>Brenton House</author>
      <pubDate>Fri, 07 May 2021 18:39:42 +0000</pubDate>
      <link>https://dev.to/brentonhouse/saying-goodbye-to-axway-amplify-titanium-7gn</link>
      <guid>https://dev.to/brentonhouse/saying-goodbye-to-axway-amplify-titanium-7gn</guid>
      <description>&lt;p&gt;🪦   &lt;strong&gt;RIP &lt;code&gt;Axway Amplify Titanium&lt;/code&gt; (2010 - 2022)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt; &lt;br&gt;
"Everything has to come to an end, sometime."&lt;/p&gt;

&lt;p&gt;      - L. Frank Baum, The Marvelous Land of Oz&lt;br&gt;
     &lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#i-first-met-titanium-long-ago"&gt;
  &lt;/a&gt;
  &lt;em&gt;I first met Titanium long ago,&lt;/em&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#before-she-was-married-to-axway"&gt;
  &lt;/a&gt;
  &lt;em&gt;before she was married to Axway...&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Back then she was known by her maiden name:  &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-appcelerator-endraw-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;code&gt;Appcelerator&lt;/code&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;It was over 10 years ago and she was so full of life!   &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QcY_3-q8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7zxw6u95i1bu0crkph0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QcY_3-q8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7zxw6u95i1bu0crkph0.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But first, a little background...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#my-name-is"&gt;
  &lt;/a&gt;
  My name is
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#brenton-house"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Brenton House&lt;/strong&gt;
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#and-i-apis"&gt;
  &lt;/a&gt;
  and &lt;strong&gt;I ❤️ APIs&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;There.      I said it.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Wait!  I thought this was about Titanium and mobile??&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#it-is-but-to-understand-mobile"&gt;
  &lt;/a&gt;
  It is.   But to understand mobile
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#i-mean-really-understand-it"&gt;
  &lt;/a&gt;
  &lt;em&gt;(I mean REALLY understand it),&lt;/em&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#you-have-to-understand-apis"&gt;
  &lt;/a&gt;
  you have to understand APIs.
&lt;/h3&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#i-had-invested-my-career-in-apis"&gt;
  &lt;/a&gt;
  I had invested my career in APIs.
&lt;/h4&gt;

&lt;p&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Designing, Developing, Architecting, and Evangelizing APIs.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;I loved seeing the web being created and taking shape.   &lt;/p&gt;

&lt;p&gt;Communication standards and APIs of various shapes, colors, and sizes appeared (and disappeared).&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-mobile-was-going-to-change-everything"&gt;
  &lt;/a&gt;
  But mobile was going to change everything.
&lt;/h3&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;I realized that mobile apps were going to make the &lt;code&gt;API market&lt;/code&gt; &lt;strong&gt;EXPLODE&lt;/strong&gt;!  There was suddenly going to be a massive growth in the number of &lt;code&gt;API consumers&lt;/code&gt; in the world!  &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;I never left the &lt;code&gt;API world&lt;/code&gt; but did realize that expanding my horizons to include the mobile app economy was essential to being successful with &lt;code&gt;APIs and Integrations&lt;/code&gt; in the future.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-i-am-getting-ahead-of-myself"&gt;
  &lt;/a&gt;
  &lt;strong&gt;But... I am getting ahead of myself&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Let me back up a bit...&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;




&lt;p&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-year-is-1989"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The year is 1989&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt; &lt;/p&gt;




&lt;p&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tim Berners-Lee, a British scientist, invented the World Wide Web (WWW) in 1989, while working at CERN.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wait-lets-not-go-back-that-far"&gt;
  &lt;/a&gt;
  Wait... let's not go back that far!
&lt;/h3&gt;

&lt;p&gt; &lt;/p&gt;




&lt;p&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-year-is-2007"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The year is 2007&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt; &lt;/p&gt;




&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;although it feels like it was just yesterday.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;The mobile development market was suddenly revolutionized with the introduction of the first iPhone by Apple.  &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---bZKz7nF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7enh8renliuv9igp4rhb.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---bZKz7nF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7enh8renliuv9igp4rhb.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;The first Android phone also released a short time after that and it became clear that developers were either going to have to become experts in both Objective-C for iPhone and Java for Android &lt;strong&gt;or some other solution was going to have to appear.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;




&lt;p&gt;&lt;em&gt;PhoneGap and similar hybrid "web" mobile apps appeared but most people realized that they were never going to be a serious solution due to the lack of features and performance issues that were inherent to non-native mobile apps.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-year-is-2011"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The year is 2011&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt; &lt;/p&gt;




&lt;p&gt; &lt;/p&gt;

&lt;p&gt;I was introduced to &lt;code&gt;Appcelerator Titanium Mobile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;She had already hit her 1.0 version milestone and had quite an active development community.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-still-remember-the-first-time-i-saw-her"&gt;
  &lt;/a&gt;
  I still remember the first time I saw her.
&lt;/h3&gt;

&lt;p&gt; &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Write once.  Run Everywhere.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;p&gt;With &lt;code&gt;Appcelerator Titanium&lt;/code&gt;, I could write JavaScript code and it would create a native mobile app using Objective-C and Java for the appropriate platforms.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#wow"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;WOW!!&lt;/em&gt;&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CHg1rEzs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5wango3xk4bgbugsvu96.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CHg1rEzs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5wango3xk4bgbugsvu96.png" alt="RIP Axway"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Could it really be that easy??
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;p&gt;With the introduction of the &lt;code&gt;Appcelerator Alloy&lt;/code&gt; library for Titanium, the JavaScript features expanded to include an MVC framework with even more options for using JavaScript to access native iOS and Android features!   &lt;code&gt;Titanium Alloy&lt;/code&gt; hit version 1.0 and everything seemed like it was going so well!&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;




&lt;p&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-year-is-2015"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The year is 2015&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt; &lt;/p&gt;




&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Facebook released a new product: React Native, a mobile JavaScript platform that seemed to have a similar set of features to Titanium.   &lt;/p&gt;

&lt;p&gt;Also &lt;strong&gt;in 2015&lt;/strong&gt;, another JavaScript platform, NativeScript, was also released to the community.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;The plans for &lt;code&gt;Titanium Alloy 2.0&lt;/code&gt; got pushed out and suddenly there was a lot more diversity (and competition) in the cross-platform native mobile market.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ykf9oXVQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rr96tq2zgxswg5s47pm9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ykf9oXVQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rr96tq2zgxswg5s47pm9.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;




&lt;p&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-year-is-2016"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The year is 2016&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt; &lt;/p&gt;




&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Axway acquired Appcelerator and integrated it into the &lt;code&gt;Axway Amplify Platform&lt;/code&gt;.  &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xkVxGQ5x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chcq51t6uwuxf0qipo77.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xkVxGQ5x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chcq51t6uwuxf0qipo77.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You may recognize some of the different variations used to reference the &lt;code&gt;Titanium&lt;/code&gt; products over the next few months that followed!&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Appcelerator Titanium&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Appcelerator Titanium SDK&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Appcelerator Titanium Alloy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Axway Titanium&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Axway Titanium Mobile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Axway Appcelerator Titanium&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Axway Appcelerator Titanium SDK&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Axway Appcelerator Titanium Alloy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Axway Amplify Appcelerator Titanium&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Axway Amplify Appcelerator Titanium SDK&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Axway Amplify Appcelerator Titanium Alloy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Axway Amplify Titanium Alloy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Axway Amplify Titanium Mobile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Axway Amplify Titanium&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;




&lt;p&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-year-is-2018"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The year is 2018&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt; &lt;/p&gt;




&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Given my ❤️❤️❤️ for APIs and Integrations -- combined with my personal experience using &lt;code&gt;Axway Amplify Titanium&lt;/code&gt;, I joined Axway as an API Evangelist!&lt;/p&gt;

&lt;p&gt; &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Over the next couple of years, 
I was able to get creative with a lot
of fun blog posts and YouTube videos!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#who-can-forget-raw-breaking-the-build-endraw-and-important-topics-like-raw-tabs-vs-spaces-endraw-"&gt;
  &lt;/a&gt;
  Who can forget, &lt;code&gt;Breaking the Build&lt;/code&gt; and important topics like &lt;code&gt;Tabs vs. Spaces&lt;/code&gt;? 🤣
&lt;/h3&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/qYPupvFUpf8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#with-raw-api-cookery-endraw-we-covered-api-management-and-integrations"&gt;
  &lt;/a&gt;
  With &lt;code&gt;API Cookery&lt;/code&gt; we covered API Management and Integrations!
&lt;/h3&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/t43USof9K2w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Axway Amplify Titanium&lt;/code&gt; features continued to be added to the SDK over the next couple of years!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Although &lt;code&gt;Axway Titanium Alloy v2.0&lt;/code&gt; never materialized, I did end up forking Titanium Alloy v1 to add in a bunch of v2 type features to make Titanium easier to use with APIs and Node.js. &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;It kinda spun off into its own open-source product &lt;strong&gt;&lt;a href="https://github.com/brentonhouse/titanium-turbo"&gt;&lt;code&gt;Titanium Turbo&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;.   &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9foLgOPJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7cdul3yn2os1mjd37q2r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9foLgOPJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7cdul3yn2os1mjd37q2r.png" alt="Titanium Turbo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;It was super cool and I was able to use &lt;code&gt;Titanium Turbo&lt;/code&gt; to create native mobile apps faster than I could ever imagine doing before!  &lt;/p&gt;

&lt;p&gt;It also made integrating with APIs a snap (which was very important, given my ❤️ for APIs )&lt;/p&gt;

&lt;p&gt;You can see an example of using &lt;code&gt;Titanium Turbo&lt;/code&gt; in a complete API and Mobile App solution for managing the return of employees to the office, that we open-sourced last year!&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--cHZxfTyX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1362477106794360834/fidaDVoG_normal.jpg" alt="Brenton House ⭐️ API Evangelist and Strategist profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Brenton House ⭐️ API Evangelist and Strategist
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/brentonhouse"&gt;@brentonhouse&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      🚀 &lt;a href="https://twitter.com/Axway"&gt;@Axway&lt;/a&gt; has open-sourced their Mobile App and API!!&lt;br&gt;&lt;br&gt;Transitioning your team back into the workplace safely can be challenging and complex but creating cross-platform native mobile apps and APIs doesn’t have to be!  &lt;a href="https://twitter.com/axwaydev"&gt;@axwaydev&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/openeverything"&gt;#openeverything&lt;/a&gt; &lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/pfX85MkHUO"&gt;devblog.axway.com/featured/open-…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:25 PM - 27 Oct 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1321095757852823554" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1321095757852823554" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1321095757852823554" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;(SPOILERS: Unfortunately, given the recent news, &lt;code&gt;Titanium Turbo&lt;/code&gt; will probably die a nice, quiet open-source death with very little fanfare...)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;




&lt;p&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-year-is-now-2021"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The year is now 2021&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt; &lt;/p&gt;




&lt;p&gt; &lt;/p&gt;

&lt;p&gt;We have now caught up to present day but unfortunately, it also means that we've reached the end of our story.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;A few weeks ago, &lt;a href="https://devblog.axway.com/featured/product-update-changes-to-application-development-services-appcelerator/"&gt;Axway announced the End-of-Life for &lt;code&gt;Axway Amplify Titanium&lt;/code&gt;&lt;/a&gt;.    &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SeEs1Lzq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1wh06vwmtcm4q3j9q9l0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SeEs1Lzq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1wh06vwmtcm4q3j9q9l0.jpg" alt="RIP Axway Amplify"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-sad-saying-goodbye"&gt;
  &lt;/a&gt;
  It's sad saying goodbye!
&lt;/h2&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Although Axway will be shutting things down &lt;strong&gt;&lt;code&gt;in March 2022&lt;/code&gt;&lt;/strong&gt;, because it is an open-source product, forks of it will still live on in the community!&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;There are very few products I have been able to closely observe from cradle to grave.   It has been a pleasure to work with such an innovative and active community!&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;API Integrations are sometimes difficult for people to wrap their heads around and Titanium made it easy to be able to see the power of APIs in the palm of their hands!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Titanium had a great run and 
I am grateful there are so many 
in the Titanium community, 
both past and present, 
that I can call great friends!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;




&lt;p&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;On a personal note, I have decided that the timing was right for me to begin a new chapter in my career and I will be leaving Axway this week. I have thoroughly enjoyed my time at Axway and have worked with some truly amazing and talented people!  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#my-love-for-apis-and-integrations-has-only-grown-stronger-over-the-past-few-years-and-i-am-going-to-continue-following-my-passion-for-evangelizing-them-to-the-community"&gt;
  &lt;/a&gt;
  My love for APIs and Integrations has only grown stronger over the past few years and I am going to continue following my passion for evangelizing them to the community!
&lt;/h4&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Connect with me &lt;a href="https://www.linkedin.com/in/brentonhouse/"&gt;on LinkedIn&lt;/a&gt; or &lt;a href="//twitter.com/brentonhouse"&gt;on Twitter&lt;/a&gt; as I continue to share what I learn about this crazy digital world we integrate with everyday!&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keep-coding-strong"&gt;
  &lt;/a&gt;
  Keep Coding Strong!!
&lt;/h2&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

</description>
      <category>axway</category>
      <category>titanium</category>
      <category>mobile</category>
      <category>amplify</category>
    </item>
    <item>
      <title>How I Negotiated Job Offers in my Career...</title>
      <author>Ankur Tyagi</author>
      <pubDate>Fri, 07 May 2021 18:11:54 +0000</pubDate>
      <link>https://dev.to/tyaga001/how-i-negotiated-job-offers-in-my-career-453f</link>
      <guid>https://dev.to/tyaga001/how-i-negotiated-job-offers-in-my-career-453f</guid>
      <description>&lt;h1&gt;
  &lt;a href="#how-i-negotiated-job-offers-in-my-career"&gt;
  &lt;/a&gt;
  How I Negotiated Job Offers in my Career...
&lt;/h1&gt;

&lt;p&gt;*&lt;em&gt;Congratulations, you got an offer! *&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That’s great news, negotiating the details of an offer is part of the process of getting hired. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;One important thing to remember is that entry-level jobs are not always open for salary negotiation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;but that doesn’t mean that you can’t work with an employer to make sure you get a combination of salary and benefits that will work for you.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Whether you think you can or you think you can’t, you’re right.” — Henry Ford&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#salary-negotiation-is-an-art"&gt;
  &lt;/a&gt;
  Salary negotiation is an art.
&lt;/h2&gt;

&lt;p&gt;If you don’t ask for what you want, you’re not going to get it.&lt;/p&gt;

&lt;p&gt;It does not matter how slowly you go as long as you do not stop.&lt;/p&gt;

&lt;p&gt;Believe you can negotiate and you’re halfway there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-always-establish-a-connection-with-my-negotiator"&gt;
  &lt;/a&gt;
  I always establish a connection with my negotiator...
&lt;/h2&gt;

&lt;p&gt;You’ve got to develop, in whatever amount of time you have, a degree of personal empathy with that person&lt;/p&gt;

&lt;p&gt;some kind of personal connection with the individual so they look at you as other than something like a cog in a wheel.&lt;/p&gt;

&lt;p&gt;If you want to maximize your pay, the rule is: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Do not bring up pay first."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you throw out the first number, you might be negotiating against yourself, since it is possible the employer would be willing to make a higher salary offer than what you propose.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-make-all-of-my-requests-at-once-when-negotiating"&gt;
  &lt;/a&gt;
  I make all of my requests at once when negotiating...
&lt;/h2&gt;

&lt;p&gt;Don’t make the mistake of negotiating each benefit individually so that you are constantly requesting new stuff. &lt;/p&gt;

&lt;p&gt;Divide your request in two ways: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hard request&lt;/li&gt;
&lt;li&gt;soft request&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Anything related to pay, bonuses and stock options should be negotiated together, as part of your hard requests. &lt;/p&gt;

&lt;p&gt;Once you have reached an agreement on those, move on to the softer requests like vacation time, flexible work, and job title, WFH.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-always-go-with-my-research"&gt;
  &lt;/a&gt;
  I always go with my research...
&lt;/h2&gt;

&lt;p&gt;There are several sites that can help make the process both quick and easy. &lt;/p&gt;

&lt;p&gt;To get a better idea of the average salary for a specific job or industry, head over to Glassdoor.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Do or do not. There is no try...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#i-always-be-grateful-not-entitled"&gt;
  &lt;/a&gt;
  I always be grateful, not entitled...
&lt;/h2&gt;

&lt;p&gt;One of the most important aspects of negotiating a job offer is saying thank you as soon as you receive it.&lt;/p&gt;

&lt;p&gt;Receiving an offer is a great sign that an employer sees your potential and believes that you would be a good fit for the role.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-never-focus-entirely-on-the-salary-during-negotiating"&gt;
  &lt;/a&gt;
  I never focus entirely on the salary during negotiating...
&lt;/h2&gt;

&lt;p&gt;Many developers only negotiate salary and bonuses, but that is a huge mistake. &lt;/p&gt;

&lt;p&gt;There are many other aspects of a job that can be negotiated.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“The future depends on what you do today.” — Mahatma Gandhi&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#i-never-sell-myself-short"&gt;
  &lt;/a&gt;
  I never sell myself short...
&lt;/h2&gt;

&lt;p&gt;Most developers don’t realize the amount of value and benefit you can bring to a company.&lt;/p&gt;

&lt;p&gt;During a negotiation, the employer is trying to entice you to work for them while offering you the minimum.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Nothing will work unless you do.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Don’t be afraid to show your worth to the company and back it up with statistics and your experience to get the best job offer you deserve.&lt;/p&gt;

&lt;p&gt;I am not a product of my circumstances. &lt;br&gt;
I am a product of my decisions.&lt;br&gt;
I am a product of my mistakes. &lt;/p&gt;

&lt;p&gt;Harder I practice, luckier I get.&lt;/p&gt;

&lt;p&gt;That's it for today &amp;amp; Thanks for reading. &lt;/p&gt;

&lt;p&gt;I have recently written a book for developer growth &amp;amp; shared my 11+ years of experience.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are serious to grow as a developer. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Grab the book now for just $20 &lt;a href="https://gumroad.com/l/nextgendev/grow"&gt;The Prime Guide&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0QSnKm7j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619958998661/st8Eq0o8b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0QSnKm7j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619958998661/st8Eq0o8b.png" alt="book.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Join 100+ developers who already bought &amp;amp; growing better. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KFCrNgLt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/beojtaoajaziwv46rkdi.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KFCrNgLt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/beojtaoajaziwv46rkdi.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-write-more-about-code-life-and-fitness-in-my-211-newsletter"&gt;
  &lt;/a&gt;
  I write more about code life and fitness in my 2-1-1 newsletter.
&lt;/h3&gt;

&lt;p&gt;I encourage you to sign up for my weekly:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“2-1-1” Friday newsletter:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Check out the latest edition: 👇&lt;/p&gt;

&lt;p&gt;It's free.  &lt;a href="https://codelifefitness.com/2-1-1/"&gt;CLF&lt;/a&gt; &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>career</category>
    </item>
    <item>
      <title>Linux admin skillset</title>
      <author>Roadmaps master</author>
      <pubDate>Fri, 07 May 2021 18:08:20 +0000</pubDate>
      <link>https://dev.to/roadmaps/linux-admin-skillset-4gof</link>
      <guid>https://dev.to/roadmaps/linux-admin-skillset-4gof</guid>
      <description>&lt;p&gt;Skillset for linux admin from one famous company. I have removed some data. It is be very useful for middle and senior linux administrators for growth&lt;/p&gt;

&lt;p&gt;&lt;a href="https://infinite.education/expertise/senior_linux_system_administrator"&gt;https://infinite.education/expertise/senior_linux_system_administrator&lt;/a&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>devops</category>
      <category>ansible</category>
      <category>beginners</category>
    </item>
    <item>
      <title>27 Chrome Browser Extensions For Front-end, React, Vue, Programming, General</title>
      <author>Eleftheria Batsou</author>
      <pubDate>Fri, 07 May 2021 18:02:17 +0000</pubDate>
      <link>https://dev.to/eleftheriabatsou/27-chrome-browser-extensions-for-front-end-react-vue-programming-general-2bo8</link>
      <guid>https://dev.to/eleftheriabatsou/27-chrome-browser-extensions-for-front-end-react-vue-programming-general-2bo8</guid>
      <description>&lt;p&gt;Let's check some chrome extensions for Front-end, React, Vue, Programming and for general use! If you use different extensions let me know I'll do a part-2. &lt;/p&gt;

&lt;p&gt;Note: this post has been created with the help of my  &lt;a href="https://twitter.com/BatsouElef/status/1387686592731500545"&gt;Twitter&lt;/a&gt; friends.&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;What browser extensions do you use?&lt;a href="https://twitter.com/hashtag/100DaysOfCode?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#100DaysOfCode&lt;/a&gt;&lt;/p&gt;— Eleftheria Batsou (@BatsouElef) &lt;a href="https://twitter.com/BatsouElef/status/1387686592731500545?ref_src=twsrc%5Etfw"&gt;April 29, 2021&lt;/a&gt;
&lt;/blockquote&gt; 
&lt;h2&gt;
  &lt;a href="#frontend"&gt;
  &lt;/a&gt;
  Front-end
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#1-json-formatter"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa?hl=en"&gt;JSON Formatter&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6wisS4vC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620235488126/pMrt4sDUT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6wisS4vC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620235488126/pMrt4sDUT.png" alt="1.jasonFr.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;FEATURES&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JSON &amp;amp; JSONP support&lt;/li&gt;
&lt;li&gt;Syntax highlighting&lt;/li&gt;
&lt;li&gt;Collapsible trees, with indent guides&lt;/li&gt;
&lt;li&gt;Clickable URLs&lt;/li&gt;
&lt;li&gt;Toggle between raw and parsed JSON&lt;/li&gt;
&lt;li&gt;Works on any valid JSON page – URL doesn't matter&lt;/li&gt;
&lt;li&gt;Works on local files too &lt;/li&gt;
&lt;li&gt;You can inspect the JSON by typing "json" in the console&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2-allow-cors"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://chrome.google.com/webstore/detail/allow-cors-access-control/lhobafahddgcelffkeicbaginigeejlf?hl=en"&gt;Allow CORS&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wScdiylh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620307046184/hlgtQIOIs.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wScdiylh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620307046184/hlgtQIOIs.jpeg" alt="13.allowcors.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Allow CORS: Access-Control-Allow-Origin lets you easily perform cross-domain Ajax requests in web applications.&lt;/p&gt;

&lt;p&gt;Simply activate the add-on and perform the request. CORS or Cross Origin Resource Sharing is blocked in modern browsers by default (in JavaScript APIs). Installing this add-on will allow you to unblock this feature.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-modheader"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://chrome.google.com/webstore/detail/modheader/idgpnmonknjnojddfkpgkljpfnnfcklj?hl=en"&gt;ModHeader&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ieqZBhRg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620309393849/CWhZ1w4wB.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ieqZBhRg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620309393849/CWhZ1w4wB.jpeg" alt="20.modify.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;FEATURES&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add / modify / remove request headers and response headers (you can use this to set X-Forwarded-For, Authorization, Access-Control-Allow-Origin: *)&lt;/li&gt;
&lt;li&gt;Conditionally enable header modification based on URL and/or resource type&lt;/li&gt;
&lt;li&gt;Add comments to header&lt;/li&gt;
&lt;li&gt;Support having multiple profiles with quick switching between profiles&lt;/li&gt;
&lt;li&gt;Sorting headers and name, value, or comments&lt;/li&gt;
&lt;li&gt;Append value to existing request or response header&lt;/li&gt;
&lt;li&gt;Export and import header&lt;/li&gt;
&lt;li&gt;Clone profile&lt;/li&gt;
&lt;li&gt;Cloud backup&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-web-sniffer"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://chrome.google.com/webstore/detail/web-sniffer/ndfgffclcpdbgghfgkmooklaendohaef?hl=en"&gt;Web Sniffer&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MFK02Cj8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620236120624/0ACgI-Bj2.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MFK02Cj8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620236120624/0ACgI-Bj2.jpeg" alt="4 sniffer.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;View all HTTP Requests and Responses sent between the Web browser and the Web server.&lt;br&gt;
For every HTTP request, the following information is displayed (can hide):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tab ID, Title [filtered]&lt;/li&gt;
&lt;li&gt;Request ID&lt;/li&gt;
&lt;li&gt;Type Request [filtered]&lt;/li&gt;
&lt;li&gt;Time [filtered]&lt;/li&gt;
&lt;li&gt;Status [filtered]&lt;/li&gt;
&lt;li&gt;Method (GET/POST, POST Body) [filtered]&lt;/li&gt;
&lt;li&gt;Hostname [filtered]&lt;/li&gt;
&lt;li&gt;URL (GET Params)&lt;/li&gt;
&lt;li&gt;Headers (Request/Response)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#5-wappalyzer"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://chrome.google.com/webstore/detail/wappalyzer/gppongmhjkpfnbhagpmjfkannfbllamg"&gt;Wappalyzer&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cz9Rsd3R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620307408291/ofPfjqpwu.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cz9Rsd3R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620307408291/ofPfjqpwu.jpeg" alt="15.wazzy.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wappalyzer is a browser extension that uncovers the technologies used on websites. It detects content management systems, eCommerce platforms, web servers, JavaScript frameworks, analytics tools and many more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-whatfont"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://chrome.google.com/webstore/detail/whatfont/jabopobgcpjmedljpbcaablpmlmfcogm"&gt;WhatFont&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uHpPLRd0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620310563275/4-cYFMwWL.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uHpPLRd0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620310563275/4-cYFMwWL.jpeg" alt="21.WHAT FONT.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The easiest way to identify fonts on web pages. What is the easiest way to find out the fonts used in a webpage? Firebug and Webkit Inspector are easy enough to use for developers. However, for others, this should not be necessary. With this extension, you could inspect web fonts by just hovering on them. It is that simple and elegant.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-css-peeper"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://chrome.google.com/webstore/detail/css-peeper/mbnbehikldjhnfehhnaidhjhoofhpehk"&gt;CSS Peeper&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Jq1-4oB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620310853636/rgOe8t4n4.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Jq1-4oB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620310853636/rgOe8t4n4.jpeg" alt="23cssproper.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Extract CSS and build beautiful styleguides. No more digging in a code. Inspect styles in a simple, well-organized &amp;amp; beautiful way. Get it now! CSS Peeper is a CSS viewer tailored for Designers. Get access to the useful styles with our Chrome extension. Our mission is to let Designers focus on design, and spend as little time as possible digging in a code.&lt;/p&gt;

&lt;p&gt;Ever wondered what’s the line-height, font or a button size on a website? We provide you the ultimate tool to satisfy your curiosity. We enable you to inspect code in the easiest possible way. Check the hidden CSS style of objects, colors and assets on the web.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8html-to-figma"&gt;
  &lt;/a&gt;
  8.&lt;a href="https://chrome.google.com/webstore/detail/html-to-figma/efjcmgblfpkhbjpkpopkgeomfkokpaim"&gt;HTML to Figma&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UYjBuGog--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620310922110/KEBr8qMWE.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UYjBuGog--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620310922110/KEBr8qMWE.jpeg" alt="24.figma.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use this extension to capture your current page and import it as editable Figma layers! What it's useful for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Easily import real live site styles for a starting point for designs and prototypes&lt;/li&gt;
&lt;li&gt;Quickly turn real site components into design components&lt;/li&gt;
&lt;li&gt;Easy import components from storybook, etc&lt;/li&gt;
&lt;li&gt;Import a great live web design as a starting point for inspiration for your mockups&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#9-colorzilla"&gt;
  &lt;/a&gt;
  9. &lt;a href="https://chrome.google.com/webstore/detail/colorzilla/bhlhnicpbhignbdhedgjhgdocnmhomnp?hl=en"&gt;ColorZilla&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xL33S7l---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620235702093/JCWx-afFQ.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xL33S7l---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620235702093/JCWx-afFQ.jpeg" alt="2.colorzilla.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;FEATURES&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Eyedropper - get the color of any pixel on the page&lt;/li&gt;
&lt;li&gt;Advanced Color Picker (similar to Photoshop's)&lt;/li&gt;
&lt;li&gt;Ultimate CSS Gradient Generator&lt;/li&gt;
&lt;li&gt;Webpage Color Analyzer - get a color palette for any site&lt;/li&gt;
&lt;li&gt;Palette Viewer with 7 pre-installed palettes&lt;/li&gt;
&lt;li&gt;Color History of recently picked colors&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#react"&gt;
  &lt;/a&gt;
  React
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#10-react-developer-tools"&gt;
  &lt;/a&gt;
  10. &lt;a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en"&gt;React Developer Tools&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XYHTZjQg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620235909791/ua1j2kMDK.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XYHTZjQg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620235909791/ua1j2kMDK.jpeg" alt="3.reactdev.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;React Developer Tools is a Chrome DevTools extension for the open-source React JavaScript library. It allows you to inspect the React component hierarchies in the Chrome Developer Tools.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-redux-devtools"&gt;
  &lt;/a&gt;
  11. &lt;a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en"&gt;Redux DevTools&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Redux DevTools is for debugging application state changes.&lt;br&gt;
The extension provides power-ups for your Redux development workflow. Apart from Redux, it can be used with any other architectures which handle the state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vuejs"&gt;
  &lt;/a&gt;
  VueJS
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#12-vuejs-devtools"&gt;
  &lt;/a&gt;
  12. &lt;a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd"&gt;Vue.js devtools&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fyZiH_XA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620308971405/uq1JmFn3J.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fyZiH_XA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620308971405/uq1JmFn3J.jpeg" alt="17.vue.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Chrome dev tools extension for debugging Vue.js applications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13-vue-telescope"&gt;
  &lt;/a&gt;
  13. &lt;a href="https://chrome.google.com/webstore/detail/vue-telescope/neaebjphlfplgdhedjdhcnpjkndddbpd?hl=en"&gt;Vue Telescope&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yhkvLa4I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620309057055/-26RgznDg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yhkvLa4I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620309057055/-26RgznDg.jpeg" alt="18.vuejs.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Discover Vue.js Websites. Vue Telescope is a utility that uncovers the Vue.js plugins and technology stack used on websites. It detects the Vue version, plugins, frameworks, Nuxt modules and even the UI used.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#programminggeneral"&gt;
  &lt;/a&gt;
  Programming-general
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#14-google-tag-assistant"&gt;
  &lt;/a&gt;
  14. &lt;a href="https://chrome.google.com/webstore/detail/tag-assistant-legacy-by-g/kejbdjndbnbjgmefkgdddjlbokphdefk?hl=en"&gt;Google Tag Assistant&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Tag Assistant helps to troubleshoot the installation of various Google tags including Google Analytics, Google Tag Manager and more.&lt;/p&gt;

&lt;p&gt;Tag Assistant helps you verify that you have installed various Google tags correctly on your page. Just navigate to any page and Tag Assistant will tell you which tags are present, report any errors we find and suggest improvements that can be made to your implementation. Most Google tags are checked including Google Analytics, Adwords Conversion Tracking, Google Tag Manager and more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#15-dailydev"&gt;
  &lt;/a&gt;
  15. &lt;a href="https://chrome.google.com/webstore/detail/dailydev-all-in-one-codin/jlmpjdjjbgclbocgajdjefcidcncaied"&gt;dailyDev&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u8cWXAY_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620237375501/ghcLJ3m-A.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u8cWXAY_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620237375501/ghcLJ3m-A.jpeg" alt="9.devTo.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Why give it a try?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stay up-to-date with zero effort&lt;/li&gt;
&lt;li&gt;Free forever&lt;/li&gt;
&lt;li&gt;No sign up needed&lt;/li&gt;
&lt;li&gt;100% open-source&lt;/li&gt;
&lt;li&gt;Private. You own and control all your data.&lt;/li&gt;
&lt;li&gt;Active dev community &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#16-markdown-viewer"&gt;
  &lt;/a&gt;
  16. &lt;a href="https://chrome.google.com/webstore/detail/markdown-viewer/ckkdlimhmcjmikdlpkmbgfkaikojcbjk?hl=en"&gt;Markdown Viewer&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jWkWxVBG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620306826889/njhWIqBJb.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jWkWxVBG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620306826889/njhWIqBJb.jpeg" alt="12.markdown.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;FEATURES&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Renders local and remote URLs&lt;/li&gt;
&lt;li&gt;Granular access to remote origins&lt;/li&gt;
&lt;li&gt;Multiple markdown parsers&lt;/li&gt;
&lt;li&gt;Full control over the compiler options&lt;/li&gt;
&lt;li&gt;Themes (including GitHub theme)&lt;/li&gt;
&lt;li&gt;GitHub Flavored Markdown (GFM)&lt;/li&gt;
&lt;li&gt;Auto reload on file change&lt;/li&gt;
&lt;li&gt;Syntax highlighted code blocks&lt;/li&gt;
&lt;li&gt;Table of Contents (TOC)&lt;/li&gt;
&lt;li&gt;MathJax and Emoji support&lt;/li&gt;
&lt;li&gt;Mermaid diagrams support&lt;/li&gt;
&lt;li&gt;Remembers scroll position&lt;/li&gt;
&lt;li&gt;Markdown Content-Type detection&lt;/li&gt;
&lt;li&gt;URL detection using RegExp&lt;/li&gt;
&lt;li&gt;Toggle Content Security Policy (CSP)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#lifegeneral"&gt;
  &lt;/a&gt;
  💃 Life-general
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#17-grammarly"&gt;
  &lt;/a&gt;
  17. &lt;a href="https://chrome.google.com/webstore/detail/grammarly-for-chrome/kbfnbcaeplbcioakkpcpgfkobkghlhen"&gt;Grammarly&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HBmGTSBE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620237207586/Qyz7GIEJo.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HBmGTSBE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620237207586/Qyz7GIEJo.jpeg" alt="5.grammartly.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Grammarly helps you eliminate writing errors and find the perfect words to express yourself. You’ll get real-time feedback from Grammarly on Gmail, Google Docs, Twitter, LinkedIn, and nearly everywhere else you find yourself writing. Grammarly is a writing assistant that offers you specific suggestions to help you improve your writing — and it goes way beyond grammar. You can be confident that your writing is not only correct, but clear and concise, too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#18-adblock-plus"&gt;
  &lt;/a&gt;
  18. &lt;a href="https://chrome.google.com/webstore/detail/adblock-plus-free-ad-bloc/cfhdojbkjhnklbpkdaibdccddilifddb"&gt;Adblock Plus&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gZRFCdXV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620236942124/59iv-GDcN.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gZRFCdXV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620236942124/59iv-GDcN.jpeg" alt="7.blovk.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Adblock Plus for Google Chrome blocks video ads, banners, pop-ups and other forms of intrusive and annoying advertising, as well as blocking tracking and malware.&lt;/p&gt;

&lt;p&gt;An easy-to-use, customizable ad-blocking browser extension, Adblock Plus gives you control over your Google Chrome browsing experience. Block annoying and intrusive ads for a cleaner, better web experience. Blocking ads also reduces the risk of infection from malvertising campaigns. Users also have the option to add personal filters and whitelist websites.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#19-dark-reader"&gt;
  &lt;/a&gt;
  19. &lt;a href="https://chrome.google.com/webstore/detail/dark-reader/eimadpbcbfnmbkopoojfekhnkhdbieeh?hl=en"&gt;Dark Reader&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--08JT0G4Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620237115430/h9vqAduxL.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--08JT0G4Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620237115430/h9vqAduxL.jpeg" alt="8.darkreader.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dark mode for every website. Take care of your eyes, use a dark theme for night and daily browsing. This eye-care extension enables night mode creating dark themes for websites on the fly. Dark Reader inverts bright colors making them high contrast and easy to read at night. You can adjust brightness, contrast, sepia filter, dark mode, font settings and ignore-list.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#20-malwarebytes-browser-guard"&gt;
  &lt;/a&gt;
  20. &lt;a href="https://chrome.google.com/webstore/detail/malwarebytes-browser-guar/ihcjicgdanjaechkgeegckofjjedodee"&gt;Malwarebytes Browser Guard&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oVuEXhGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620236604816/y1gk9iyt6n.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oVuEXhGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620236604816/y1gk9iyt6n.jpeg" alt="6.malware.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;FEATURES&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Advertising/tracker protection: Blocks third-party ads and trackers that monitor your online activity. The number of blocked ads &amp;amp; blocked trackers for a website will show beside the Malwarebytes logo in your browser.&lt;/li&gt;
&lt;li&gt;Scam protection: Blocks online scams, including technical support scams, browser lockers, and phishing.&lt;/li&gt;
&lt;li&gt;Potentially unwanted program (PUP) protection: Blocks the downloading of potentially unwanted programs, including toolbars and pop-ups.&lt;/li&gt;
&lt;li&gt;Browser-level malware protection: Blocks malicious programs or code that can damage your system.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#21-bitwarden-free-password-manager"&gt;
  &lt;/a&gt;
  21. &lt;a href="https://chrome.google.com/webstore/detail/bitwarden-free-password-m/nngceckbapebfimnlniiiahkandclblb?hl=en"&gt;Bitwarden - Free Password Manager&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0cQ7k4GM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620238094355/zXTNGoB4g.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0cQ7k4GM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620238094355/zXTNGoB4g.jpeg" alt="10.password.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bitwarden is the easiest and safest way to store all of your logins and passwords while conveniently keeping them synced between all of your devices.&lt;/p&gt;

&lt;p&gt;Password theft is a serious problem. The websites and apps that you use are under attack every day. Security breaches occur and your passwords are stolen. When you reuse the same passwords across apps and websites hackers can easily access your email, bank, and other important accounts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#22-authenticator"&gt;
  &lt;/a&gt;
  22. &lt;a href="https://chrome.google.com/webstore/detail/authenticator/bhghoamapcdpbohphigoooaddinpkbai?hl=en"&gt;Authenticator&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M6SZGAZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620247519125/I3rjIQkme.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M6SZGAZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620247519125/I3rjIQkme.jpeg" alt="11.authenticator.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;FEATURES:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add accounts by scanning QR codes&lt;/li&gt;
&lt;li&gt;Search your accounts by pressing "/"&lt;/li&gt;
&lt;li&gt;Translated into more than ten languages&lt;/li&gt;
&lt;li&gt;Encrypt your secrets with a password&lt;/li&gt;
&lt;li&gt;Backup your secrets to a file, Google Drive, Microsoft OneDrive, or Dropbox&lt;/li&gt;
&lt;li&gt;Sync your secrets with your Google Account&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#23-loom"&gt;
  &lt;/a&gt;
  23. &lt;a href="https://chrome.google.com/webstore/detail/loom-for-chrome/liecbddmkiiihnedobmlmillhodjkdmb"&gt;Loom&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EYAtbL6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620307179339/8RWPlhmnv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EYAtbL6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620307179339/8RWPlhmnv.jpeg" alt="14.loom.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With Loom, you can record your screen, voice, and face to create an instantly shareable video in less time than it would take to type an email. Reduce back-and-forth typing and get your message across the first time. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#24-zenmate"&gt;
  &lt;/a&gt;
  24. &lt;a href="https://chrome.google.com/webstore/detail/zenmate-free-vpn%E2%80%93best-vpn/fdcgdnkidjaadafnichfpabhfomcebme/related?hl=en"&gt;ZenMate&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yk8aG6k8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620307926408/TDZBuo7VC.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yk8aG6k8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620307926408/TDZBuo7VC.jpeg" alt="16.zenmate.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The ZenMate free VPN browser extension uses strong encryption to secure all your traffic and hides your real IP address so you can access any blocked website, protect your data and surf the internet anonymously without a data limit.   &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#25-honey"&gt;
  &lt;/a&gt;
  25. &lt;a href="https://chrome.google.com/webstore/detail/honey/bmnlcjabgnpnenekpadlanbbkooimhnj?hl=en"&gt;Honey&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M3MTQQ1p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620309194195/brFkK5YhCz.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M3MTQQ1p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620309194195/brFkK5YhCz.jpeg" alt="19.honey.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Automatically find and apply coupon codes when you shop online. Automatically apply coupons on 30,000+ sites. Join 17 million members who shop with confidence. Honey automatically searches for and apply coupons when you shop online. One-click and it tests different codes and applies the best one to your cart.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#26-screentime"&gt;
  &lt;/a&gt;
  26. &lt;a href="https://chrome.google.com/webstore/detail/screentime/ofmanejijbcohgebmdfacglmhemiifca?hl=en"&gt;Screentime&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CfOxejet--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620310715983/NzAf-Ri_C.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CfOxejet--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620310715983/NzAf-Ri_C.jpeg" alt="22.concentrate.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The extension allows you to control how much time you spend on popular social media sites and entertainment sites. You can specify how many minutes in a day you want to use on each site and once you've gotten to the limit, you won't be able to access the site. Time frames can be specified for when you want the sites to be inaccessible for each day of the week. You can also add or remove sites.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#27-hare-beautiful-tab-manager"&gt;
  &lt;/a&gt;
  27. &lt;a href="https://chrome.google.com/webstore/detail/hare-%E2%80%93%C2%A0beautiful-tab-mana/elklpfhmdbclpenlnljkfknnijnjnmon?hl=en"&gt;Hare – Beautiful tab manager&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D-r4o4ba--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620311175282/AOO9a2fMA.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D-r4o4ba--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620311175282/AOO9a2fMA.jpeg" alt="25.hare.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A beautifully designed search engine for your tabs. When we have many tabs open and are confused about which window's tab is already open, we go ahead and create a new tab with the exact same content. This makes your browsing experience too cluttered and less productive.&lt;/p&gt;

&lt;p&gt;Hare makes it faster for you to jump on any tab, you have open, by doing a fuzzy search on factors like URL, title etc. When you are all done with your tabs, you can have a nice interface for them to close it at once based on your fuzzy search.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;These are just a few of the great extensions you can find for chrome, most of these extensions are available for the other well-known browsers as well. Thank you to everyone on  &lt;a href="https://twitter.com/BatsouElef/status/1387686592731500545"&gt;Twitter&lt;/a&gt;  who wrote an answer. I learn quite a few new ones! Unfortunately, I didn't mention all the extensions from your answers as there were too many. But if you are interested let me know and I can do part 2. I haven't even included all the ones I'm using :) &lt;/p&gt;




&lt;p&gt;👋Hello, I'm Eleftheria, a developer, public speaker, and chocolate lover.&lt;/p&gt;

&lt;p&gt;🥰If you liked this post please share.&lt;/p&gt;

&lt;p&gt;🍩Would you care about buying me a coffee? You can do it &lt;a href="https://www.buymeacoffee.com/elef/"&gt;here&lt;/a&gt; but If you can't that's ok too!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.paypal.com/paypalme/eleftheriabatsou"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7QXiTcCu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616336641314/ycZgZ44G3.gif" alt="cofGif.gif"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;🙏It would be nice to subscribe to my &lt;a href="https://www.youtube.com/c/EleftheriaBatsou"&gt;Youtube&lt;/a&gt; channel. It’s free and it helps to create more content.&lt;/p&gt;

&lt;p&gt;🌈&lt;a href="https://www.youtube.com/c/EleftheriaBatsou"&gt;Youtube&lt;/a&gt; | &lt;a href="https://codepen.io/EleftheriaBatsou"&gt;Codepen&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/eleftheriabatsou"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://twitter.com/BatsouElef"&gt;Twitter&lt;/a&gt; | &lt;a href="http://eleftheriabatsou.com/"&gt;Site&lt;/a&gt; | &lt;a href="https://www.instagram.com/elef_in_tech"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

</description>
      <category>browserextensions</category>
      <category>extensions</category>
    </item>
    <item>
      <title>Boost your code coverage with API Tests</title>
      <author>Anudeep</author>
      <pubDate>Fri, 07 May 2021 17:40:26 +0000</pubDate>
      <link>https://dev.to/asaianudeep/boost-your-code-coverage-with-api-tests-13hd</link>
      <guid>https://dev.to/asaianudeep/boost-your-code-coverage-with-api-tests-13hd</guid>
      <description>&lt;p&gt;Code coverage is an important quality metric that determines the number of lines of source code that is tested &amp;amp; covered by automated tests. Usually, developers achieve code coverage close to &lt;strong&gt;80%&lt;/strong&gt; by writing &lt;strong&gt;unit tests&lt;/strong&gt; (&lt;em&gt;most popular tests to generate code coverage&lt;/em&gt;).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#targeted-code"&gt;
  &lt;/a&gt;
  Targeted Code
&lt;/h4&gt;

&lt;p&gt;In general unit tests targets happy paths, core business logic, and rarely sad paths. Most likely they can give us close to &lt;strong&gt;80%&lt;/strong&gt; of code coverage. The remaining &lt;strong&gt;20%&lt;/strong&gt; of source code might be responsible for handling external interfaces and exceptions/errors. Unit tests generally omit testing external interface logic that interacts with outside applications &amp;amp; databases.&lt;/p&gt;

&lt;p&gt;Testing the external interface logic at the early phases of SDLC is very critical for delivering a quality software product.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#api-testing"&gt;
  &lt;/a&gt;
  API Testing
&lt;/h4&gt;

&lt;p&gt;API testing is critical for automating testing because APIs now serve as the primary interface to application logic. API tests could greatly improve the code coverage of applications and the overall confidence in the product.&lt;/p&gt;

&lt;p&gt;Let's see how to get code coverage from API tests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;In this example, we will be looking at a basic &lt;strong&gt;Node.js&lt;/strong&gt; web application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  Source Code
&lt;/h3&gt;

&lt;p&gt;Look at the sample web app server written in &lt;a href="https://expressjs.com/"&gt;express&lt;/a&gt;. (&lt;em&gt;Express is a minimal and flexible Node.js web application framework&lt;/em&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`App listening at http://localhost:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To run the application, execute the below command in terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#api-tests"&gt;
  &lt;/a&gt;
  API Tests
&lt;/h3&gt;

&lt;p&gt;Look at the sample API tests written using &lt;a href="https://pactumjs.github.io/"&gt;PactumJS&lt;/a&gt; and &lt;a href="https://mochajs.org/"&gt;mocha&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app.test.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pactum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pactum&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET /hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;pactum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:3333/hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expectStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expectBody&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To run the tests, execute the below command in terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;mocha app.test.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#code-coverage"&gt;
  &lt;/a&gt;
  Code Coverage
&lt;/h3&gt;

&lt;p&gt;We have seen how to run the application &amp;amp; execute tests against it. To generate code coverage from API tests, we will be using an npm package called &lt;a href="https://www.npmjs.com/package/nyc"&gt;nyc&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Install the package globally&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i nyc &lt;span class="nt"&gt;-g&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now run your application with this magical tool &lt;strong&gt;nyc&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nyc node index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hwi2IAUF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zqyqviizmp2kwom40yx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hwi2IAUF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zqyqviizmp2kwom40yx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Run Tests&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;mocha app.test.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QG_hMJLT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xp63k4ab8qbqgl61l0rg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QG_hMJLT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xp63k4ab8qbqgl61l0rg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Stop the application by pressing &lt;code&gt;CTRL + c&lt;/code&gt;. Now the &lt;strong&gt;nyc&lt;/strong&gt; tool will generate and display the code coverage in the terminal.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uqWXxqqD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2npwkizvxnqe0r3y8pj7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uqWXxqqD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2npwkizvxnqe0r3y8pj7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For real and complex web applications, the code-coverage setup might not be straightforward. It might require additional steps and advanced configurations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Importance of API testing is growing day by day. Not only using these tests for validating applications but also for generating code coverage metrics is an added advantage. &lt;/p&gt;

&lt;p&gt;In most scenarios, a simple API test could cover a big chunk of source code. It means with fewer API Tests we can get more code coverage and confidence in the application.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>javascript</category>
      <category>codequality</category>
      <category>pactumjs</category>
    </item>
    <item>
      <title>React/Redux Interview Questions with answers 🚀</title>
      <author>Suprabha</author>
      <pubDate>Fri, 07 May 2021 17:22:07 +0000</pubDate>
      <link>https://dev.to/suprabhasupi/react-redux-interview-questions-with-answers-13ba</link>
      <guid>https://dev.to/suprabhasupi/react-redux-interview-questions-with-answers-13ba</guid>
      <description>&lt;p&gt;&lt;span&gt;I&lt;/span&gt; prepared list of react and redux interview question, Few question I faced in my journey and few of the question I have referred from Google itself 😂&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#react-interview-questions"&gt;
  &lt;/a&gt;
  React Interview Questions 🚀
&lt;/h1&gt;

&lt;p&gt;&lt;a href="#1-create-components-in-react"&gt;&lt;strong&gt;Q.1. How to create components in React?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#2-class-vs-functional-comp"&gt;&lt;strong&gt;Q.2. What are the difference between a class component and functional component?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#3-controlled-vs-uncontrolled-comp"&gt;&lt;strong&gt;Q.3. What is difference between controlled vs uncontrolled component?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#4-chidlren"&gt;&lt;strong&gt;Q.4. What is children?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#5-prop-drilling"&gt;&lt;strong&gt;Q.5. What is prop drilling and how can you avoid it?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#6-pure-component"&gt;&lt;strong&gt;Q.6. What is Pure Component?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#7-not-update-state-directly"&gt;&lt;strong&gt;Q.7. Why should we not update the state directly?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#8-cb-func-as-args-of-setstate"&gt;&lt;strong&gt;Q.8. What is the purpose of callback function as an argument of setState()?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#9-sythetic-event"&gt;&lt;strong&gt;Q.9. What are synthetic events in React?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#10-key-prop"&gt;&lt;strong&gt;Q.10. What is "key" prop and what is the benefit of using it in arrays elements?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#11-string-refs-legacy"&gt;&lt;strong&gt;Q.11. Why are String Refs legacy?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#12-createelement-vs-cloneelement"&gt;&lt;strong&gt;Q.12. What is the difference between createElement and cloneElement?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#13-reconciliation"&gt;&lt;strong&gt;Q.13. What is reconciliation?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#14-lazy-function"&gt;&lt;strong&gt;Q.14. Is lazy function supports named exports?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#15-portals"&gt;&lt;strong&gt;Q.15. What are portals in React?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#16-stateless-comp"&gt;&lt;strong&gt;Q.16. What are stateless components?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#17-stateful-comp"&gt;&lt;strong&gt;Q.17. What are stateful components?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#18-impact-of-index-as-keys"&gt;&lt;strong&gt;Q.18. What is the impact of indexes as keys?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#19-memoize-component"&gt;&lt;strong&gt;Q.19. How do you memoize a component?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#20-pass-func-to-setstate"&gt;&lt;strong&gt;Q.20. Why we need to pass a function to setState()?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#21-comp-name-starts-capital-letter"&gt;&lt;strong&gt;Q.21. Why should component names start with capital letter?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#22-rerender-without-calling-setstate"&gt;&lt;strong&gt;Q.22. Can you force a component to re-render without calling setState?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#23-super-vs-super-props"&gt;&lt;strong&gt;Q.23. What is the difference between super() and super(props) in React usin ES6 classes?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#24-constructor"&gt;&lt;strong&gt;Q.24. Is it mandatory to define constructor for React component?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#25-default-props"&gt;&lt;strong&gt;Q.25. What are default props?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#26-validation-on-props"&gt;&lt;strong&gt;Q.26. How to apply validation on props in React?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#27-cant-updated-props"&gt;&lt;strong&gt;Q.27. Why you can't update props in React?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#28-render-props"&gt;&lt;strong&gt;Q.28. What are render props?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#29-suspense"&gt;&lt;strong&gt;Q.29. What is Suspense component?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#30-diffing"&gt;&lt;strong&gt;Q.30. What is diffing algorithm?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#31-rerender-browser-resized"&gt;&lt;strong&gt;Q.31. How to re-render the view when the browser is resized?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#32-react-memo"&gt;&lt;strong&gt;Q.32. What is React memo function?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#33-methods-order-when-comp-rerendered"&gt;&lt;strong&gt;Q.33. What is the methods order when component re-rendered?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#34-loadable-comp"&gt;&lt;strong&gt;Q.34. What are loadable components?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#35-print-json"&gt;&lt;strong&gt;Q.35. How to pretty print JSON with React?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#36-render-hijakcing"&gt;&lt;strong&gt;Q.36. What is render hijacking in react?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#37-use-https-instead-http"&gt;&lt;strong&gt;Q.37. How to use https instead of http in create-react-app?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#38-functional-to-pure-component"&gt;&lt;strong&gt;Q.38. How can we convert functional component to pure component?&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="1-create-components-in-react"&gt;Q.1. How to create components in React?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt;  There are two possible ways to create a component.&lt;/p&gt;

&lt;p&gt;✅Functional Components: This is the simplest way to create a component. Those are pure JavaScript functions that accept props object as first parameter and return React elements:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Greeting&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`Hello, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;✅Class Components: You can also use ES6 class to define a component. The above function component can be written as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Greeting&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`Hello, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="2-class-vs-functional-comp"&gt;Q.2. What are the difference between a class component and functional component?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;✅Class Components&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Class-based Components uses ES6 class syntax. It can make use of the lifecycle methods.&lt;/li&gt;
&lt;li&gt;Class components extend from React.Component.&lt;/li&gt;
&lt;li&gt;In here you have to use this keyword to access the props and functions that you declare inside the class components.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;✅Functional Components&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Functional Components are simpler comparing to class-based functions.&lt;/li&gt;
&lt;li&gt;Functional Components mainly focuses on the UI of the application, not on the behavior.&lt;/li&gt;
&lt;li&gt;To be more precise these are basically render function in the class component.&lt;/li&gt;
&lt;li&gt;Functional Components can have state and mimic lifecycle events using Reach Hooks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="3-controlled-vs-uncontrolled-comp"&gt;Q.3. What is difference between controlled vs uncontrolled component?&lt;/p&gt;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Ans.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;✅Controlled Components&lt;br&gt;
In HTML, form elements such as &lt;code&gt;&amp;lt;input /&amp;gt;, &amp;lt;textarea /&amp;gt;, and &amp;lt;select /&amp;gt;&lt;/code&gt; typically maintain their own state and update it based on user input. When a user submits a form, the values from the elements mentioned above are sent with the form. With React it works differently. The component containing the form will keep track of the value of the input in its state and will re-render the component each time the callback function, e.g., onChange is fired as the state will be updated. An input form element whose value is controlled by React in this way is called a "controlled component". You could also call this a "dumb component".&lt;/p&gt;

&lt;p&gt;✅Uncontrolled Components&lt;br&gt;
A Uncontrolled Component is one that stores its own state internally, and you query the DOM using a ref to find its current value when you need it. This is a bit more like traditional HTML.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;Example&lt;/u&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Controlled:&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Uncontrolled:&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;inputRef&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;// Use `inputRef.current.value` to read the current value of &amp;lt;input&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="4-chidlren"&gt;Q.4. What is children?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; In JSX expressions that contain both an opening tag and a closing tag, the content between those tags is passed to components automatically as a special prop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are some methods available in the React API to work with this prop. These include React.Children.map, React.Children.forEach, React.Children.count, React.Children.only, React.Children.toArray 👶&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MainContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createClass&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;render&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MainContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;MainContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="5-prop-drilling"&gt;Q.5. What is prop drilling and how can you avoid it?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; While passing a prop from each component to the next in the hierarchy from the source component to the deeply nested component. This is called &lt;strong&gt;prop drilling&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To avoid prop drilling, a common approach is to use React context. This allows a &lt;code&gt;Provider&lt;/code&gt; component that supplies data to be defined, and allows nested components to consume context data via either a &lt;code&gt;Consumer&lt;/code&gt; component or a &lt;code&gt;useContext&lt;/code&gt; hook.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="6-pure-component"&gt;Q.6. What is Pure Component?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; &lt;code&gt;React.PureComponent&lt;/code&gt; is exactly the same as &lt;code&gt;React.Component&lt;/code&gt; except that it handles the &lt;code&gt;shouldComponentUpdate()&lt;/code&gt; method for you. When props or state changes, PureComponent will do a shallow comparison on both props and state. Component on the other hand won't compare current props and state to next out of the box. Thus, the component will re-render by default whenever shouldComponentUpdate is called.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="7-not-update-state-directly"&gt;Q.7. Why should we not update the state directly?&lt;/p&gt;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Ans.&lt;/strong&gt; If you try to update state directly then it won't re-render the component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Wrong ❌&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Not Updated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead use &lt;code&gt;setState()&lt;/code&gt; method. It schedules an update to a component's state object. When state changes, the component responds by re-rendering.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Correct ✅&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Updated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;📝 Note: You can directly assign to the state object either in &lt;em&gt;constructor&lt;/em&gt; or using latest javascript's class field declaration syntax.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="8-cb-func-as-args-of-setstate"&gt;Q.8. What is the purpose of callback function as an argument of setState()&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; The callback function is invoked when setState finished and the component gets rendered. Since &lt;code&gt;setState()&lt;/code&gt; is &lt;strong&gt;asynchronous&lt;/strong&gt; the callback function is used for any post action.&lt;/p&gt;

&lt;p&gt;📝 Note: It is recommended to use lifecycle method rather than this callback function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Supi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The name has updated and component re-rendered&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="9-sythetic-event"&gt;Q.9. What are synthetic events in React?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; Synthetic Event is a cross-browser wrapper around the browser's native event. It's API is same as the browser's native event, including &lt;code&gt;stopPropagation()&lt;/code&gt; and &lt;code&gt;preventDefault()&lt;/code&gt;, except the events work identically across all browsers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="10-key-prop"&gt;Q.10. What is "key" prop and what is the benefit of using it in arrays of elements 🗝?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; A &lt;code&gt;key&lt;/code&gt; is a special string attribute you &lt;strong&gt;should&lt;/strong&gt; include when creating arrays of elements.&lt;em&gt;Key&lt;/em&gt; prop helps React identify which items have changed, are added, or are removed.&lt;/p&gt;

&lt;p&gt;Most often we use ID from our data as &lt;em&gt;key&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todoItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you don't have stable IDs for rendered items, you may use the item &lt;em&gt;index&lt;/em&gt; as a &lt;em&gt;key&lt;/em&gt; as a last resort:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todoItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;📝 Note:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using &lt;em&gt;indexes&lt;/em&gt; for &lt;em&gt;keys&lt;/em&gt; is &lt;strong&gt;not recommended&lt;/strong&gt; if the order of items may change. This can negatively impact performance and may cause issues with component state.&lt;/li&gt;
&lt;li&gt;If you extract list item as separate component then apply &lt;em&gt;keys&lt;/em&gt; on list component instead of &lt;code&gt;li&lt;/code&gt; tag.&lt;/li&gt;
&lt;li&gt;There will be a warning message in the console if the &lt;code&gt;key&lt;/code&gt; prop is not present on list items.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="11-string-refs-legacy"&gt;Q.11. Why are String Refs legacy? &lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; If you worked with React before, you might be familiar with an older API where the &lt;code&gt;ref&lt;/code&gt; attribute is a string, like &lt;code&gt;ref={'textInput'}&lt;/code&gt;, and the DOM node is accessed as &lt;code&gt;this.refs.textInput&lt;/code&gt;. We advise against it because &lt;em&gt;string refs have below issues&lt;/em&gt;, and are considered legacy. String refs were &lt;strong&gt;removed in React v16&lt;/strong&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;They &lt;em&gt;force React to keep track of currently executing component&lt;/em&gt;. This is problematic because it makes react module stateful, and thus causes weird errors when react module is duplicated in the bundle.&lt;/li&gt;
&lt;li&gt;They are &lt;em&gt;not composable&lt;/em&gt; — if a library puts a ref on the passed child, the user can't put another ref on it. Callback refs are perfectly composable.&lt;/li&gt;
&lt;li&gt;They &lt;em&gt;don't work with static analysis&lt;/em&gt; like Flow. Flow can't guess the magic that framework does to make the string ref appear on &lt;code&gt;this.refs&lt;/code&gt;, as well as its type (which could be different). Callback refs are friendlier to static analysis.&lt;/li&gt;
&lt;li&gt;It doesn't work as most people would expect with the "render callback" pattern (e.g. )
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;renderRow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// This won't work. Ref will get attached to DataTable rather than MyComponent:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// This would work though! Callback refs are awesome.&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

   &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;DataTable&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;renderRow&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;renderRow&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="12-createelement-vs-cloneelement"&gt;Q.12. What is the difference between createElement and cloneElement?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; JSX elements will be transpiled to React.createElement() functions to create React elements which are going to be used for the object representation of UI. Whereas cloneElement is used to clone an element and pass it new props.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="13-reconciliation"&gt;Q.13. What is reconciliation?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; When a component's props or state change, React decides whether an actual DOM update is necessary by comparing the newly returned element with the previously rendered one. When they are not equal, React will update the DOM. This process is called reconciliation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="14-lazy-function"&gt;Q.14. Is lazy function supports named exports?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; No, currently &lt;code&gt;React.lazy&lt;/code&gt; function supports &lt;code&gt;default exports&lt;/code&gt; only. If you would like to import modules which are named exports, you can create an intermediate module that reexports it as the default. It also ensures that tree shaking keeps working and don’t pull unused components. Let's take a component file which exports multiple named components,&lt;/p&gt;

&lt;p&gt;&lt;u&gt;Example:&lt;/u&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// FewComponents.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SomeComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UnusedComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and reexport &lt;code&gt;FewComponents.js&lt;/code&gt; components in an intermediate file &lt;code&gt;IntermediateComponent.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// IntermediateComponent.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SomeComponent&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./FewComponents.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can import the module using lazy function as below,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;lazy&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SomeComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lazy&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./IntermediateComponent.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="15-portals"&gt;Q.15. What are portals in React?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; Portal is a recommended way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createPortal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first argument is any render-able React child, such as an element, string, or fragment. The second argument is a DOM element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="16-stateless-comp"&gt;Q.16. What are stateless components?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; If the behaviour is independent of its state then it can be a stateless component. You can use either a function or a class for creating stateless components. But unless you need to use a lifecycle hook in your components, you should go for function components.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="17-stateful-comp"&gt;Q.17. What are stateful components?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; If the behaviour of a component is dependent on the &lt;em&gt;state&lt;/em&gt; of the component then it can be termed as stateful component. These &lt;em&gt;stateful components&lt;/em&gt; are always &lt;em&gt;class components&lt;/em&gt; and have a state that gets initialized in the &lt;code&gt;constructor&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="c1"&gt;// ...&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;React 16.8 Update:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hooks let you use state and other React features without writing classes.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Equivalent Functional Component&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="c1"&gt;// JSX&lt;/span&gt;
   &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="18-impact-of-index-as-keys"&gt;Q.18. What is the impact of indexes as keys?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; Keys should be stable, predictable, and unique so that React can keep track of elements.&lt;/p&gt;

&lt;p&gt;In the below code snippet each element's key will be based on ordering, rather than tied to the data that is being represented. This limits the optimizations that React can do.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Todo&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you use element data for unique key, assuming todo.id is unique to this list and stable, React would be able to reorder elements without needing to reevaluate them as much.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Todo&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="19-memoize-component"&gt;Q.19. How do you memoize a component?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; Since React v16.6.0, we have a &lt;code&gt;React.memo&lt;/code&gt;. It provides a higher order component which memoizes component unless the props change. To use it, simply wrap the component using &lt;code&gt;React.memo&lt;/code&gt; before you use it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MemoComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MemoComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* render using props */&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// OR&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MyFunctionComponent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="20-pass-func-to-setstate"&gt;Q.20. Why we need to pass a function to setState()?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; The reason behind for this is that &lt;code&gt;setState()&lt;/code&gt; is an asynchronous operation. React batches state changes for performance reasons, so the state may not change immediately after &lt;code&gt;setState()&lt;/code&gt; is called. That means you should not rely on the current state when calling &lt;code&gt;setState()&lt;/code&gt; since you can't be sure what that state will be. The solution is to pass a function to &lt;code&gt;setState()&lt;/code&gt;, with the previous state as an argument. By doing this you can avoid issues with the user getting the old state value on access due to the asynchronous nature of &lt;code&gt;setState()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's say the initial count value is zero. After three consecutive increment operations, the value is going to be incremented only by one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// assuming this.state.count === 0&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;// this.state.count === 1, not 3&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we pass a function to &lt;code&gt;setState()&lt;/code&gt;, the count gets incremented correctly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="c1"&gt;// this.state.count === 3 as expected&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="21-comp-name-starts-capital-letter"&gt;Q.21. Why should component names start with capital letter?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; If you are rendering your component using JSX, the name of that component has to begin with a capital letter otherwise React will throw an error as unrecognized tag. This convention is because only HTML elements and SVG tags can begin with a lowercase letter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;OneComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can define component class which name starts with lowercase letter, but when it's imported it should have capital letter. Here lowercase is fine:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;myComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;myComponent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While when imported in another file it should start with capital letter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./MyComponent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-are-the-exceptions-on-react-component-naming"&gt;
  &lt;/a&gt;
  What are the exceptions on React component naming?
&lt;/h3&gt;

&lt;p&gt;The component names should start with a uppercase letter but there are few exceptions on this convention. The lowercase tag names with a dot (property accessors) are still considered as valid component names.&lt;/p&gt;

&lt;p&gt;For example the below tag can be compiled to a valid component,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;component&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;// `React.createElement(obj.component)`&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="22-rerender-without-calling-setstate"&gt;Q.22. Can you force a component to re-render without calling setState?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; By default, when your component's state or props change, your component will re-render. If your &lt;code&gt;render()&lt;/code&gt; method depends on some other data, you can tell React that the component needs re-rendering by calling &lt;code&gt;forceUpdate()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forceUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is recommended to avoid all uses of &lt;code&gt;forceUpdate()&lt;/code&gt; and only read from &lt;code&gt;this.props&lt;/code&gt; and &lt;code&gt;this.state&lt;/code&gt; in &lt;code&gt;render()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="23-super-vs-super-props"&gt;Q.23. What is the difference between super() and super(props) in React usin ES6 classes?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; When you want to access &lt;code&gt;this.props&lt;/code&gt; in &lt;code&gt;constructor()&lt;/code&gt; then you should pass props to &lt;code&gt;super()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using &lt;code&gt;super(props)&lt;/code&gt;:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// { name: 'Supi', ... }&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Using &lt;code&gt;super()&lt;/code&gt;:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Outside &lt;code&gt;constructor()&lt;/code&gt; both will display same value for &lt;code&gt;this.props&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="24-constructor"&gt;Q.24. Is it mandatory to define constructor for React component?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; No, it is not mandatory. i.e, If you don’t initialize state and you don’t bind methods, you don’t need to implement a constructor for your React component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="25-default-props"&gt;Q.25. What are default props?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; The defaultProps are defined as a property on the component class to set the default props for the class. This is used for undefined props, but not for null props.&lt;/p&gt;

&lt;p&gt;For example, let us create color default prop for the button component,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyButton&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;MyButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaultProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If props.color is not provided then it will set the default value to 'red'. i.e, Whenever you try to access the color prop it uses default value&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MyButton&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// props.color will be set to red&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;📝 Note: If you provide null value then it remains null value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="26-validation-on-props"&gt;Q.26. How to apply validation on props in React?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; When the application is running in &lt;em&gt;development mode&lt;/em&gt;, React will automatically check all props that we set on components to make sure they have &lt;em&gt;correct type&lt;/em&gt;. If the type is incorrect, React will generate warning messages in the console. It's disabled in &lt;em&gt;production mode&lt;/em&gt; due to performance impact. The mandatory props are defined with &lt;code&gt;isRequired&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The set of predefined prop types:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;PropTypes.number&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PropTypes.string&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PropTypes.array&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PropTypes.object&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PropTypes.func&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PropTypes.node&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PropTypes.element&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PropTypes.bool&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PropTypes.symbol&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PropTypes.any&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We can define &lt;code&gt;propTypes&lt;/code&gt; for &lt;code&gt;User&lt;/code&gt; component as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prop-types&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;propTypes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isRequired&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isRequired&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`Welcome, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`Age, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;📝 Note: In React v15.5 &lt;em&gt;PropTypes&lt;/em&gt; were moved from &lt;code&gt;React.PropTypes&lt;/code&gt; to &lt;code&gt;prop-types&lt;/code&gt; library.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="27-cant-updated-props"&gt;Q.27. Why you can't update props in React?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; The React philosophy is that props should be immutable and top-down. This means that a parent can send any prop values to a child, but the child can't modify received props.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="28-render-props"&gt;Q.28. What are render props?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; Render Props is a simple technique for sharing code between components using a prop whose value is a function. The below component uses render prop which returns a React element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;DataProvider&lt;/span&gt; &lt;span class="na"&gt;render&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Libraries such as React Router and DownShift are using this pattern.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="29-suspense"&gt;Q.29. What is Suspense component?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; If the module containing the dynamic import is not yet loaded by the time parent component renders, you must show some fallback content while you’re waiting for it to load using a loading indicator. This can be done using Suspense component.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;Example&lt;/u&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;OneComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lazy&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./OneComponent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Suspense&lt;/span&gt; &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Loading...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;OneComponent&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Suspense&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As mentioned in the above code, Suspense is wrapped above the lazy component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="30-diffing"&gt;Q.30. What is diffing algorithm?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; React needs to use algorithms to find out how to efficiently update the UI to match the most recent tree. The diffing algorithms is generating the minimum number of operations to transform one tree into another. However, the algorithms have a complexity in the order of O(n3) where n is the number of elements in the tree.&lt;/p&gt;

&lt;p&gt;In this case, for displaying 1000 elements would require in the order of one billion comparisons. This is far too expensive. Instead, React implements a heuristic O(n) algorithm based on two assumptions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Two elements of different types will produce different trees.&lt;/li&gt;
&lt;li&gt;The developer can hint at which child elements may be stable across different renders with a key prop.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="31-rerender-browser-resized"&gt;Q.31. How to re-render the view when the browser is resized?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; You can listen to the &lt;code&gt;resize&lt;/code&gt; event in &lt;code&gt;componentDidMount()&lt;/code&gt; and then update the dimensions (&lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;). You should remove the listener in &lt;code&gt;componentWillUnmount()&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;WindowDimensions&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateDimensions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateDimensions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="nx"&gt;componentWillMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateDimensions&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;resize&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateDimensions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="nx"&gt;componentWillUnmount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;resize&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateDimensions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="nx"&gt;updateDimensions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; x &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="32-react-memo"&gt;Q.32. What is React memo function?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; Class components can be restricted from rendering when their input props are the same using &lt;strong&gt;PureComponent or shouldComponentUpdate&lt;/strong&gt;. Now you can do the same with function components by wrapping them in &lt;strong&gt;React.memo&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* only rerenders if props change */&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="33-methods-order-when-comp-rerendered"&gt;Q.33. What is the methods order when component re-rendered?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; An update can be caused by changes to props or state. The below methods are called in the following order when a component is being re-rendered.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;static getDerivedStateFromProps()&lt;/li&gt;
&lt;li&gt;shouldComponentUpdate()&lt;/li&gt;
&lt;li&gt;render()&lt;/li&gt;
&lt;li&gt;getSnapshotBeforeUpdate()&lt;/li&gt;
&lt;li&gt;componentDidUpdate()&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="34-loadable-comp"&gt;Q.34. What are loadable components?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; If you want to do code-splitting in a server rendered app, it is recommend to use Loadable Components because &lt;code&gt;React.lazy&lt;/code&gt; and &lt;code&gt;Suspense&lt;/code&gt; is not yet available for server-side rendering. &lt;code&gt;Loadable&lt;/code&gt; lets you render a dynamic import as a regular component.&lt;/p&gt;

&lt;p&gt;Lets take an example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;loadable&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@loadable/component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;OtherComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;loadable&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./OtherComponent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;OtherComponent&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now OtherComponent will be loaded in a separated bundle&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="35-print-json"&gt;Q.35. How to pretty print JSON with React?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; We can use &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; tag so that the formatting of the &lt;code&gt;JSON.stringify()&lt;/code&gt; is retained:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="36-render-hijakcing"&gt;Q.36. What is render hijacking in react?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; The concept of &lt;code&gt;render hijacking&lt;/code&gt; is the ability to control what a component will output from another component. It actually means that you decorate your component by wrapping it into a Higher-Order component. By wrapping you can inject additional props or make other changes, which can cause changing logic of rendering. It does not actually enables hijacking, but by using HOC you make your component behave in different way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="37-use-https-instead-http"&gt;Q.37. How to use https instead of http in create-react-app?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; You just need to use &lt;code&gt;HTTPS=true&lt;/code&gt; configuration. You can edit your &lt;code&gt;package.json&lt;/code&gt; scripts section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"set HTTPS=true &amp;amp;&amp;amp; react-scripts start"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or just run &lt;code&gt;set HTTPS=true &amp;amp;&amp;amp; npm start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="38-functional-to-pure-component"&gt;Q.38. How can we convert functional component to pure component?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; We can convert functional to pure component using &lt;code&gt;React.memo&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#redux-interview-questions"&gt;
  &lt;/a&gt;
  Redux Interview Questions 👩🏻‍💻
&lt;/h1&gt;

&lt;p&gt;&lt;a href="#1-reducers"&gt;&lt;strong&gt;Q.1. What are reducers in redux?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#2-state-changed-in-redux"&gt;&lt;strong&gt;Q.2. How is state changed in redux?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#3-initialvalues-updated-from-satte"&gt;&lt;strong&gt;Q.3. How Redux Form initialValues get updated from state?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#4-redux-thunk"&gt;&lt;strong&gt;Q.4. What is Redux Thunk?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#5-mapstatetoprops-vs-mapdispatchtoprops"&gt;&lt;strong&gt;Q.5. What is the difference between mapStateToProps() and mapDispatchToProps()?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#6-mutiple-middleware"&gt;&lt;strong&gt;Q.6. How to add multiple middlewares to Redux?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#7-react-context-vs-redux"&gt;&lt;strong&gt;Q.7. What is React context vs React redux?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#8-redux-thunk"&gt;&lt;strong&gt;Q.8. Why React uses className over class attribute?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#9-relay"&gt;&lt;strong&gt;Q.9. What is Relay?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#10-relay-different-from-redux"&gt;&lt;strong&gt;Q.10. How Relay is different from Redux?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#11-combine-reducer"&gt;&lt;strong&gt;Q.11. What is Combine Reducer?&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="1-reducers"&gt;Q.1. What are reducers in redux?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; The reducer is a pure function that takes the previous state and an action, and returns the next state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;previousState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;newState&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's very important that the reducer stays &lt;em&gt;pure&lt;/em&gt;. Things you should never do inside a reducer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mutate its arguments;&lt;/li&gt;
&lt;li&gt;Perform side effects like API calls and routing transitions;&lt;/li&gt;
&lt;li&gt;Call non-pure functions, e.g. Date.now() or Math.random()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="2-state-changed-in-redux"&gt;Q.2. How is state changed in redux?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; The only way to change the state is to emit an action, an object describing what happened. This ensures that neither the views nor the network callbacks will ever write directly to the state. Instead, they express an intent to transform the state. Because all changes are centralized and happen one by one in a strict order, there are no subtle race conditions to watch out for. As actions are just plain objects, they can be logged, serialized, stored, and later replayed for debugging or testing purposes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="3-initialvalues-updated-from-satte"&gt;Q.3. How Redux Form initialValues get updated from state?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; You need to add &lt;code&gt;enableReinitialize : true&lt;/code&gt; setting.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;InitializeFromStateForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reduxForm&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;form&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;initializeFromState&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;enableReinitialize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})(&lt;/span&gt;&lt;span class="nx"&gt;UserEdit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If your &lt;code&gt;initialValues&lt;/code&gt; prop gets updated, your form will update too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="4-redux-thunk"&gt;Q.4. What is Redux Thunk?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; Redux Thunk middleware allows you to write action creators that return a function instead of an action. The thunk can be used to delay the dispatch of an action, or to dispatch only if a certain condition is met. The inner function receives the store methods dispatch and &lt;code&gt;getState()&lt;/code&gt; as parameters.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="5-mapstatetoprops-vs-mapdispatchtoprops"&gt;Q.5. What is the difference between mapStateToProps() and mapDispatchToProps()?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;mapStateToProps()&lt;/code&gt; is a utility which helps your component get updated state (which is updated by some other components):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mapStateToProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getVisibleTodos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visibilityFilter&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;mapDispatchToProps()&lt;/code&gt; is a utility which will help your component to fire an action event (dispatching action which may cause change of application state):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mapDispatchToProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;onTodoClick&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toggleTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Recommend always using the "object shorthand" form for the &lt;code&gt;mapDispatchToProps&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Redux wrap it in another function that looks like &lt;code&gt;(…args) =&amp;gt; dispatch(onTodoClick(…args))&lt;/code&gt;, and pass that wrapper function as a prop to your component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mapDispatchToProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;onTodoClick&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="6-mutiple-middleware"&gt;Q.6. How to add multiple middlewares to Redux?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; You can use &lt;code&gt;applyMiddleware&lt;/code&gt; where you can pass each piece of middleware as a new argument. So you just need to pass each piece of middleware you'd like. For example, you can add Redux Thunk and logger middlewares as an argument as below,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;applyMiddleware&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;redux&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createStoreWithMiddleware&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;applyMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ReduxThunk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="7-react-context-vs-redux"&gt;Q.7. What is React context vs React redux?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; You can use Context in your application directly and is going to be great for passing down data to deeply nested components which what it was designed for. Whereas Redux is much more powerful and provides a large number of features that the Context Api doesn't provide.&lt;/p&gt;

&lt;p&gt;Also, &lt;strong&gt;React Redux&lt;/strong&gt; uses context internally but it doesn’t expose this fact in the public API. So you should feel much safer using Context via React Redux than directly because if it changes, the burden of updating the code will be on React Redux instead developer responsibility.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="8-redux-thunk"&gt;Q.8. Why React uses className over class attribute?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; &lt;em&gt;class&lt;/em&gt; is a keyword in javascript and JSX is an extension of javascript. That's the principal reason why React uses &lt;code&gt;className&lt;/code&gt; instead of class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"menu navigation-menu"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Menu&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="9-relay"&gt;Q.9. What is Relay?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; Relay is a JavaScript framework for providing a data layer and client-server communication to web applications using the React view layer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="10-relay-different-from-redux"&gt;Q.10. How Relay is different from Redux?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; Relay is similar to Redux in that they both use a single store. The main difference is that relay only manages state originated from the server, and all access to the state is used via GraphQL queries (for reading data) and mutations (for changing data). Relay caches the data for you and optimizes data fetching for you, by fetching only changed data and nothing more. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="11-combine-reducer"&gt;Q.11. What is Combine Reducer?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; The &lt;code&gt;combineReducers&lt;/code&gt; helper function turns an object whose values are different reducing functions into a single reducing function you can pass to createStore . The resulting reducer calls every child reducer, and gathers their results into a single state object.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;
        🌟 &lt;a href="https://twitter.com/suprabhasupi"&gt; Twitter&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;
        👩🏻‍💻 &lt;a href="https://www.suprabha.me/"&gt; suprabha.me&lt;/a&gt;
      &lt;/td&gt;
&lt;td&gt;
        🌟 &lt;a href="https://www.instagram.com/suprabhasupi/"&gt; Instagram&lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>react</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Build APIs without code </title>
      <author>Vasanth</author>
      <pubDate>Fri, 07 May 2021 16:55:29 +0000</pubDate>
      <link>https://dev.to/vasanth7781/build-apis-without-code-4g2j</link>
      <guid>https://dev.to/vasanth7781/build-apis-without-code-4g2j</guid>
      <description>&lt;p&gt;I have been involving in building no code API builder platform &lt;a href="https://fireapis.com/"&gt;Fireapis&lt;/a&gt; where now APIs can be built within minutes and can be consumed easily.No need to worry about deployment, scalability, availability, etc..,&lt;br&gt;
Another thing is we can create different APIs resources for different environments (stage, prod, dev, or any, etc..,)&lt;/p&gt;

&lt;p&gt;Now, I'll show you how to make an example (we say Plan) API without any code and consume our Plan API &lt;/p&gt;

&lt;p&gt;First, enter into &lt;a href="https://fireapis.com/"&gt;https://fireapis.com/&lt;/a&gt; and signup, its free account&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First step:&lt;/strong&gt;&lt;br&gt;
You will be landed on the Dashboard page after signup or login, go to the &lt;strong&gt;Environments tab&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The first thing is we have to create an environment&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rDh7ZYjJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8n467waowvz3qgchdgnj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rDh7ZYjJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8n467waowvz3qgchdgnj.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rlOoXoqU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1d2tqvbm8m2z0x36bl68.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rlOoXoqU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1d2tqvbm8m2z0x36bl68.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter our environment &lt;strong&gt;name, domain URL,&lt;/strong&gt; and a short &lt;strong&gt;description&lt;/strong&gt; about the environment, then &lt;strong&gt;click Add&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now we have &lt;strong&gt;created our environment.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Second step:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Next thing, we have to go to the &lt;strong&gt;API tab&lt;/strong&gt; section, &lt;strong&gt;Click Add new API&lt;/strong&gt; button&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zlbxak8U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16xlt82rscopkgv1dq4s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zlbxak8U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16xlt82rscopkgv1dq4s.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter the &lt;strong&gt;name and URL&lt;/strong&gt; of our endpoint and &lt;strong&gt;select the environment&lt;/strong&gt; for which API has to be built&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B4CjEbKq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zpkkqp5b6cc4gzs98283.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B4CjEbKq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zpkkqp5b6cc4gzs98283.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we are going to &lt;strong&gt;add fields&lt;/strong&gt; for our API. Here for eg, I have added name as string type, amount as a numeric type,is_active as boolean, description as a string that can accept null and blank values. For primary key leaving a blank as it will auto add field id as primary key, if not added custom primary key&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nlnTCdiF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9nsracbhp0g34gm87tjm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nlnTCdiF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9nsracbhp0g34gm87tjm.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7CE_9yc4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1ioojapm6ud0ve23lbm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7CE_9yc4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1ioojapm6ud0ve23lbm.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After &lt;strong&gt;adding all fields, click Add.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now successfully we have &lt;strong&gt;created Plan API&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Third Step:&lt;/strong&gt;&lt;br&gt;
Now we are &lt;strong&gt;going to test our Plan API&lt;/strong&gt; endpoint by using the&lt;br&gt;
autogenerated curl command&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D45R1B-n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79b54bbqr63paneeo3e1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D45R1B-n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79b54bbqr63paneeo3e1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Going to test different request by using the &lt;strong&gt;auto-generated curl command&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yedsi2XY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwp183zcxw3oe1c0zpi3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yedsi2XY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwp183zcxw3oe1c0zpi3.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have got success response after making a POST request for Plan API&lt;/p&gt;

&lt;p&gt;Now &lt;strong&gt;we going to make GET request for the primary key using curl command&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r22___9K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgs8yz2m2cc84baf9cp0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r22___9K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgs8yz2m2cc84baf9cp0.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w2RLkV7O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dzk14g5qr3yv9daksknk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w2RLkV7O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dzk14g5qr3yv9daksknk.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we have got a response for GET request using the primary key&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Finally&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can &lt;strong&gt;check our logs&lt;/strong&gt;, now we enter into the &lt;strong&gt;Logs tab&lt;/strong&gt; section&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nSMVMxwY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ceckjplex0pris37zndb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nSMVMxwY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ceckjplex0pris37zndb.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EcHAaxq0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ckxlnbdobn9s9tetvbz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EcHAaxq0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ckxlnbdobn9s9tetvbz.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IcJGZXZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5usabj7spdr9y93zontc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IcJGZXZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5usabj7spdr9y93zontc.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We can see a detailed log report for different requests&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Now we have created an API that can do CRUD operation in few minutes&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#fireapis"&gt;
  &lt;/a&gt;
  Fireapis?
&lt;/h1&gt;

&lt;p&gt;Solving the development time and difficulties in coding, scaling, and storage of data using API within few minutes.&lt;/p&gt;

&lt;p&gt;Fireapis also provides Logs for all the request coming in and out for your different set of environments &lt;/p&gt;

&lt;p&gt;We hope you liked this write up and got the gist of fireapis on how it can be used in your projects&lt;/p&gt;

&lt;p&gt;Feel free to reach out to us by Email(&lt;a href="mailto:vasanth@fireapis.com"&gt;vasanth@fireapis.com&lt;/a&gt;) if you would like to know more about Fireapis.&lt;/p&gt;

&lt;p&gt;I’d love to hear what you think of Fireapis and if there is anything we can improve.&lt;/p&gt;

&lt;p&gt;Catch you in the next one 👋&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>database</category>
      <category>aws</category>
      <category>python</category>
    </item>
  </channel>
</rss>
