<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>SigNoz Product Update -Deploy SigNoz using Helm charts, 500+ members on our slack community</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Tue, 11 Jan 2022 12:42:00 +0000</pubDate>
      <link>https://dev.to/signoz/signoz-product-update-deploy-signoz-using-helm-charts-500-members-on-our-slack-community-809</link>
      <guid>https://dev.to/signoz/signoz-product-update-deploy-signoz-using-helm-charts-500-members-on-our-slack-community-809</guid>
      <description>&lt;p&gt;Welcome to SigNal 08 - SigNoz's monthly product update, and the last SigNal issue of 2021! 🥳&lt;/p&gt;

&lt;p&gt;This month, we made numerous PRs improving our product experience, added new awesome contributors, and launched a new initiative to discover better UX for our users. We also crossed 500+ members on our Slack community! 🥳&lt;/p&gt;

&lt;p&gt;Wrapping up 2021, let’s see what Humans at SigNoz were up to in the month of December!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-we-shipped"&gt;
  &lt;/a&gt;
  What we shipped?
&lt;/h2&gt;

&lt;p&gt;We made two major releases this month with lots of UI improvements. We also enabled Helm chart support for ClickHouse Setup.&lt;/p&gt;

&lt;p&gt;Latest Release:&lt;br&gt;&lt;br&gt;
&lt;a href="https://github.com/SigNoz/signoz/releases/tag/v0.5.4" rel="noopener noreferrer nofollow"&gt;Release v0.5.4&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#helm-charts-for-clickhouse-setup"&gt;
  &lt;/a&gt;
  Helm Charts for ClickHouse Setup
&lt;/h3&gt;

&lt;p&gt;Related PR - &lt;a href="https://github.com/SigNoz/signoz/pull/479" rel="noopener noreferrer nofollow"&gt;&lt;/a&gt;&lt;a href="https://github.com/SigNoz/signoz/pull/479"&gt;https://github.com/SigNoz/signoz/pull/479&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Helm charts are the preferred way of deploying applications on Kubernetes and our users requested this feature.  You can now get started with SigNoz on Kubernetes using Helm charts. The Helm chart installation installs the following components of SigNoz:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Query Service (Backend service)&lt;/li&gt;
&lt;li&gt;Web UI (Frontend)&lt;/li&gt;
&lt;li&gt;ClickHouse instance (Datastore)&lt;/li&gt;
&lt;li&gt;OpenTelemetry collector&lt;/li&gt;
&lt;li&gt;Alert Manager&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can read detailed instructions from our &lt;a href="https://signoz.io/docs/deployment/helm_chart"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#support-for-hetzner-cloud-in-helm-charts"&gt;
  &lt;/a&gt;
  Support for Hetzner Cloud in Helm charts
&lt;/h3&gt;

&lt;p&gt;Related PR - &lt;a href="https://github.com/SigNoz/signoz/pull/537" rel="noopener noreferrer nofollow"&gt;&lt;/a&gt;&lt;a href="https://github.com/SigNoz/signoz/pull/537"&gt;https://github.com/SigNoz/signoz/pull/537&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hetzner cloud is a popular hosting service provider from Germany. With this &lt;a href="https://github.com/SigNoz/signoz/pull/537"&gt;PR&lt;/a&gt;, Hetzner users can deploy SigNoz easily using Helm charts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mac-m1-support-released-for-clickhouse-setup"&gt;
  &lt;/a&gt;
  Mac M1 support released for ClickHouse setup
&lt;/h3&gt;

&lt;p&gt;Related PR - &lt;a href="https://github.com/SigNoz/signoz/pull/429" rel="noopener noreferrer nofollow"&gt;&lt;/a&gt;&lt;a href="https://github.com/SigNoz/signoz/pull/429"&gt;https://github.com/SigNoz/signoz/pull/429&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our users using Mac M1 chips were not able to install SigNoz. Clickhouse officially works on M1 chips but they don’t provide an official docker build for arm64. We fixed the issue by using arm64 docker build by Altinity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#better-graphs-and-legends"&gt;
  &lt;/a&gt;
  Better Graphs and Legends
&lt;/h3&gt;

&lt;p&gt;Our out-of-the-box charts on important application metrics like latency, throughput, and error rates are critical to performance monitoring. We improved these graphs and made the legends more user-friendly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xrnW4_u8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://signoz.io/img/blog/2021/12/graphs_legends.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xrnW4_u8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://signoz.io/img/blog/2021/12/graphs_legends.webp" alt="Application latency charts on SigNoz dashboard" width="651" height="424"&gt;&lt;/a&gt;Application latency charts on SigNoz metrics tab&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#featured-issue"&gt;
  &lt;/a&gt;
  Featured issue
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/SigNoz/signoz/issues/530" rel="noopener noreferrer nofollow"&gt;Tracing Serverless Architecture&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Serverless architecture has become one of the most popular cloud service models. According to market estimates, its market will reach $22 billion by 2025. We are currently exploring OpenTelemetry’s capabilities to trace a serverless architecture like Lambda service provided by AWS.&lt;/p&gt;

&lt;p&gt;We would love to hear your ideas on this, and if you have used distributed tracing for your serverless functions, feel free to share on this &lt;a href="https://github.com/SigNoz/signoz/issues/530"&gt;GitHub issue&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-upcoming"&gt;
  &lt;/a&gt;
  What's upcoming?
&lt;/h2&gt;

&lt;p&gt;We are redesigning our &lt;code&gt;Traces&lt;/code&gt; tab with much more powerful filters for quicker troubleshooting and root cause analysis of issues in your application.&lt;/p&gt;

&lt;p&gt;Some of the filters that we’ll be incorporating in the revamped page:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Status&lt;/li&gt;
&lt;li&gt;Services&lt;/li&gt;
&lt;li&gt;Resources&lt;/li&gt;
&lt;li&gt;HTTP Code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s a sneak peek of our redesign. We are actively looking for feedback on our &lt;code&gt;tracing&lt;/code&gt; user experience.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c5D86Sb7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://signoz.io/img/blog/2021/12/trace_filters_v2_search.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c5D86Sb7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://signoz.io/img/blog/2021/12/trace_filters_v2_search.webp" alt="Application latency charts on SigNoz dashboard" width="880" height="550"&gt;&lt;/a&gt;Sneak peek of our redesigned Traces tab&lt;/p&gt;

&lt;p&gt;If you have experience using traces of any monitoring tool, please help us out by booking a &lt;a href="https://calendly.com/ankit-signoz/user-feedback"&gt;feedback meeting&lt;/a&gt;. As a token of appreciation, we’re giving out 1000 INR/20 USD Amazon eGift cards to devs who help us out. 🙂&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#signoz-news"&gt;
  &lt;/a&gt;
  SigNoz News
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#500-members-on-our-slack-community"&gt;
  &lt;/a&gt;
  500+ members on our Slack Community 🥳
&lt;/h3&gt;

&lt;p&gt;This month we crossed an important milestone in our community. We are now 500+ members strong on Slack, a place where we discuss all things open-source and SigNoz.&lt;/p&gt;

&lt;p&gt;If you’re a developer interested in open-source software and APM tools, then we would love to host you there.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/signoz-slack"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dSs2tC2s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/join_slack_cta.png" alt="SigNoz Slack community" width="880" height="118"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#user-shoutout"&gt;
  &lt;/a&gt;
  User shoutout 😊
&lt;/h3&gt;

&lt;p&gt;We are happiest when our users appreciate our product experience. Notes like these keep us going in our vision to create the best open-source APM tool for developer teams of all sizes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/posts/pawan-bhadauria-25980b7_seed-to-scale-podcast-series-by-accel-insights-activity-6877448856892768256-Fapw"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WqyIjzgv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://signoz.io/img/blog/2021/12/user_love.webp" alt="User testimonial for SigNoz" width="574" height="371"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of our users also became a contributor. This is the true essence of open-source, especially for a developer tool. Devs don’t need to wait for anyone to make small tweaks to suit their use-case.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#user-interviews"&gt;
  &lt;/a&gt;
  User Interviews
&lt;/h3&gt;

&lt;p&gt;We are talking to backend/devops engineers who have experience working with APM tools to discover challenges they face while monitoring their applications. We have come across numerous insights with this exercise that will help us make SigNoz better!&lt;/p&gt;

&lt;p&gt;If you are a developer who has used monitoring tools for debugging applications and improving performance, feel free to book a 25-30 mins slot with us 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://calendly.com/ankit-signoz/user-feedback"&gt;Help us make SigNoz better!&lt;/a&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;As mentioned earlier, we are also giving out 1000 INR/$20 USD Amazon eGift cards as a token of appreciation. 🙌&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#contributor-highlight"&gt;
  &lt;/a&gt;
  Contributor Highlight
&lt;/h3&gt;

&lt;p&gt;We want to thank these amazing contributors who made SigNoz better with their contributions. 🤗&lt;/p&gt;

&lt;p&gt;PRs by new contributors in the last month:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/SigNoz/signoz/pull/459"&gt;Allow empty input values in settings retention page&lt;/a&gt; and three others by &lt;a href="https://github.com/aryanshridhar"&gt;Aryan Shridhar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/SigNoz/signoz/pull/458"&gt;fix: product feedback button&lt;/a&gt; by &lt;a href="https://github.com/Anurag5086"&gt;Anurag Gupta&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/SigNoz/signoz/pull/537"&gt;build(kubernetes): Support hcloud CSI (Hetzner)&lt;/a&gt; by &lt;a href="https://github.com/ceefour"&gt;Hendy Irawan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, our contributors are loving the swag we ship them. 🥳&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/anurag_gupta23/status/1476089058384252929"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4gCTPAcC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://signoz.io/img/blog/2021/12/contributor_swag_love.webp" alt="twitter shoutout by contributor" width="462" height="665"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#from-our-blog"&gt;
  &lt;/a&gt;
  From our blog
&lt;/h2&gt;

&lt;p&gt;Nestjs is a Nodejs framework for building scalable server-side applications with typescript. It makes use of frameworks like Express and Fastify to enable rapid development. It has gained wide popularity in recent times, and many applications are making use of the Nestjs framework.&lt;/p&gt;

&lt;p&gt;You can monitor your Nestjs application using SigNoz as OpenTelemetry supports nestjs instrumentation. The biggest advantage of using OpenTelemetry is that you don’t get locked into any vendors. It is an open-source project backed by a huge community of developers, cloud and APM vendors. SigNoz is built natively on OpenTelemetry.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://signoz.io/blog/opentelemetry-nestjs/"&gt;Monitor your Nestjs application using OpenTelemetry&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Thank you for taking out the time to read this issue :) If you have any feedback or want any changes with the format, please create an &lt;a href="https://github.com/SigNoz/signoz/issues"&gt;issue&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>monitoring</category>
      <category>devops</category>
      <category>performance</category>
      <category>microservices</category>
    </item>
    <item>
      <title>IoT-SaaS: Web App using ReactJS, MongoDB Atlas &amp; Realm</title>
      <author>TagorenathV</author>
      <pubDate>Tue, 11 Jan 2022 12:41:56 +0000</pubDate>
      <link>https://dev.to/tagorenathv/iot-saas-web-app-using-reactjs-mongodb-atlas-realm-48gb</link>
      <guid>https://dev.to/tagorenathv/iot-saas-web-app-using-reactjs-mongodb-atlas-realm-48gb</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;Nowadays, SaaS platforms &amp;amp; IoT devices are gaining popularity in a variety of use-cases. I built a prototype for IoT based SaaS platform for aquaculture. Users can register to the platform, subscribe to a device and get Real-Time alerts and Dashboards on the fly. Importantly, Pay-as-you-use.&lt;/p&gt;

&lt;p&gt;Though IoT use cases primarily focus on Timeseries collections, I tried to include random features as much as possible to experience different MongoDB features with this proto-type project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Prime Time&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/tagorenathv/iot-saas"&gt;https://github.com/tagorenathv/iot-saas&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tool-stack-used"&gt;
  &lt;/a&gt;
  Tool Stack Used
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;All data stored in &lt;code&gt;MongoDB Atlas&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Timeseries collection&lt;/code&gt; for storing sensor_data with granularity and expireAfterSeconds defined&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Atlas Search&lt;/code&gt;: Search Index on device collection for fields: title with analyzers &amp;amp; mapping defined for Autocompletition functianality&lt;/li&gt;
&lt;li&gt;Text Index on device collection for fields: title and description for &lt;code&gt;Full-Text search&lt;/code&gt; functionality, including spell corrections&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Scheduled-Triggers&lt;/code&gt; for:

&lt;ul&gt;
&lt;li&gt;simulating data &lt;/li&gt;
&lt;li&gt;calculating aggregated sensor data values &lt;/li&gt;
&lt;li&gt;generating bills every month&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Database-Triggers&lt;/code&gt; on every aggregated-value to check alert condition and insert into alert collection if any&lt;/li&gt;
&lt;li&gt;Used &lt;code&gt;Realm-Functions&lt;/code&gt; for performing data manipulations present in MongoDB Atlas collections&lt;/li&gt;
&lt;li&gt;Frontend made with React JS, ant.design UI library and used &lt;code&gt;Realm-Web-Client&lt;/code&gt; SDK for calling Realm-Functions&lt;/li&gt;
&lt;li&gt;Used Email/Password provider of &lt;code&gt;Realm-Authentication&lt;/code&gt; for UI authentication&lt;/li&gt;
&lt;li&gt;Applied &lt;code&gt;Realm-DataAccess Rules&lt;/code&gt; for added layer of Authorization for each collection&lt;/li&gt;
&lt;li&gt;Hosted react application on &lt;code&gt;Realm-Hosting&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h3&gt;

&lt;p&gt;To Watch: &lt;a href="https://watch.screencastify.com/v/GIhh6PDvAx6WIoXJ1K6g"&gt;Link-1&lt;/a&gt; or &lt;a href="https://drive.google.com/file/d/1WX0zJvo65LyWddyfbZUBdVFOW58BaP7f/view?usp=sharing"&gt;Link-2&lt;/a&gt;&lt;br&gt;
To Experience: &lt;a href="https://iot-saas-user-umzdm.mongodbstitch.com/"&gt;iot-saas&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wana-try"&gt;
  &lt;/a&gt;
  Wana Try?
&lt;/h3&gt;

&lt;p&gt;Please follow &lt;a href="https://github.com/tagorenathv/iot-saas#setup-guide"&gt;README&lt;/a&gt; file for setup details and also to understand how different MongoDB services are combined together to perform some action in this project&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#takeaways"&gt;
  &lt;/a&gt;
  Take-Aways
&lt;/h3&gt;

&lt;p&gt;My Take-Aways on MongoDB ecosystem after this project&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MongoDB ecosystem has evolved at its best, making developers life easy and bringing ideas into existance with matter of clicks! Importantly, no need to go for other services. One stop solution for all your usecases.&lt;/li&gt;
&lt;li&gt;Want Autocomplete feature? Use Atlas-Search. No more replicating data to Elasticsearch&lt;/li&gt;
&lt;li&gt;Want Timeseries feature? Use Timeseries collection. Utilize granularity and expireAfterSeconds for data archivals and performance enhacement Out-of-the-box. (P.S: Use Atlas cluster from v5.0 for Timeseries collections)&lt;/li&gt;
&lt;li&gt;Want Full-Text search feature? Create Text-Index on collection. No more replicating data to Elasticsearch&lt;/li&gt;
&lt;li&gt;Want Authentication? Use Realm-Authentication&lt;/li&gt;
&lt;li&gt;Want Authorization? Use Realm-Rules&lt;/li&gt;
&lt;li&gt;Want Event-Driven triggers both Scheduled &amp;amp; Database? - Use Realm-Triggers&lt;/li&gt;
&lt;li&gt;Want to access data Serverlessly without backend? Use Realm-Client SDKs or Enable HTTP Endpoints&lt;/li&gt;
&lt;li&gt;Want to host your application? Use Realm-Hosting&lt;/li&gt;
&lt;li&gt;and lot lot lot more out-of-the-box&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-else-could-be-better"&gt;
  &lt;/a&gt;
  What else could be better?
&lt;/h3&gt;

&lt;p&gt;PS.: In my opinion&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Times I felt, documentation is misleading. Navigations could be more clear&lt;/li&gt;
&lt;li&gt;Folders uploading not available at Realm-Hosting UI. Need to create folders and upload files individually if needed. Would save time if this is available from UI&lt;/li&gt;
&lt;li&gt;At Realm-Deployment,  it would be helpful to modify all json configuration files and deploy from UI itself. External &amp;amp; Github actions are quite helpful thought.&lt;/li&gt;
&lt;li&gt;Eagerly waiting for Flutter Realm-SDK GA. Can't wait to use two best things for a project 🔥🔥🔥&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;React UI library - &lt;a href="https://ant.design/components/overview/"&gt;ant.design&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.atlas.mongodb.com/getting-started/"&gt;MongoDB Atlas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.mongodb.com/realm/functions/"&gt;Realm-Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.mongodb.com/realm/triggers/trigger-types/"&gt;Realm-Triggers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.mongodb.com/realm/web/"&gt;Realm-Web Client SDK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.mongodb.com/realm/rules/"&gt;Realm-Rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.mongodb.com/realm/authentication/"&gt;Realm-Authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.mongodb.com/realm/hosting/"&gt;Realm-Hosting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mongodb.com/developer/how-to/build-ci-cd-pipelines-realm-apps-github-actions/"&gt;Realm Github CI/CD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;PS:&lt;/strong&gt; Project is built and hosted with MongoDB ecosystem and ❤️&lt;/p&gt;

</description>
      <category>atlashackathon</category>
      <category>react</category>
      <category>mongodb</category>
    </item>
    <item>
      <title>What is an AWS Lambda function?</title>
      <author>Taavi Rehemägi</author>
      <pubDate>Tue, 11 Jan 2022 12:41:40 +0000</pubDate>
      <link>https://dev.to/dashbird/what-is-an-aws-lambda-function-3fgi</link>
      <guid>https://dev.to/dashbird/what-is-an-aws-lambda-function-3fgi</guid>
      <description>&lt;p&gt;In this article, we will cover the basics of a Lambda function and its functionality in our every day digital lives.&lt;/p&gt;

&lt;p&gt;AWS Lambda, as we already know, is a compute service that allows you to run code without managing servers. AWS Lambda runs the code when it is needed, and it is &lt;a href="https://aws.amazon.com/lambda/features/#Automatic_scaling"&gt;automatically scaled&lt;/a&gt;. The &lt;strong&gt;code you execute on AWS Lambda is called Lambda function&lt;/strong&gt;, and it can be considered, for better understanding, as a formula in a spreadsheet. As you need to make formulas, so it could automatically calculate any data you enter, functions are somewhat similar.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-basics"&gt;
  &lt;/a&gt;
  The Basics
&lt;/h2&gt;

&lt;p&gt;Creating simple functions via the Lambda web console is quite easy. Functions allow your code to run smoothly in performing smaller automated tasks. The function is ready to run as soon as it has been triggered. The Lambda function includes your code along with associated configuration information. Lambda functions have nothing to do with the underlying infrastructure. Therefore, Lambda can execute as many copies of the function as needed so it can be scaled to comply with the rate of the incoming events.&lt;/p&gt;

&lt;p&gt;When your code is uploaded to AWS Lambda, your function is commonly associated with some specific AWS resources like an Amazon S3 bucket, an Amazon DynamoDB table, Amazon SNS notifications, or Amazon Kinesis streams. After associating your function with AWS resources, when the resource has changed, Lambda will execute your function and manage the compute resources to achieve success with the incoming requests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-lambda-functions"&gt;
  &lt;/a&gt;
  Building Lambda Functions
&lt;/h2&gt;

&lt;p&gt;After uploading your application code in the form of one or even several AWS Lambda functions to AWS Lambda, AWS Lambda will execute the code for you. AWS Lambda takes care of managing the servers to run the code when invoked. The lifecycle of an AWS Lambda-based application includes several sections.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Authoring code for your Lambda function&lt;/strong&gt; in the languages supported by AWS Lambda. The supported languages are Node.js, Java, C#, Python, and Go. These languages use specific tools for authoring code. Some of them are AWS Lambda console, Eclipse IDE, etc.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Deploying code and creating a Lambda function&lt;/strong&gt; requires you first to package your code and dependencies in a deployment package to be able to develop a Lambda function. After doing so, you need to upload the deployment package to AWS Lambda, so it will allow you to create Lambda function. Organizing your code and dependencies in specific ways is the first step towards building the deployment package. Deployment package instructions may vary depending on the language you have chosen to author the code.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Uploading a deployment package&lt;/strong&gt; is allowed by AWS Lambda's CreateFunction operation which is used for creating a Lambda function. You can choose between AWS Lambda console, &lt;a href="https://aws.amazon.com/cli/"&gt;AWS CLI&lt;/a&gt;, and &lt;a href="https://aws.amazon.com/tools/#sdk"&gt;AWS SDKs&lt;/a&gt; to create a lambda function. Providing configuration information after establishing the lambda function including the compute requirements is submitted to your deployment package.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Testing Lambda functions&lt;/strong&gt; can be done by following one of the methods like testing your lambda function in the console or using the AWS CLI or even check it locally using the &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/test-sam-cli.html"&gt;AWS SAM CLI&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Monitoring&lt;/strong&gt; of lambda functions becomes automatic after your it is in production while reporting metrics is done through Amazon CloudWatch. This is the main pain-point of lambda functions. Take a look at &lt;a href="https://dashbird.io/"&gt;our site&lt;/a&gt; to get better insight into your Lambda functions.&lt;/li&gt;
&lt;li&gt;  Lambda itself assists in &lt;strong&gt;troubleshooting&lt;/strong&gt; failures in a function. Lambda logs all of the requests that are handled by your function and it also automatically stores all the logs generated by your code in Amazon CloudWatch Logs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#configuring-lambda-functions"&gt;
  &lt;/a&gt;
  Configuring Lambda Functions
&lt;/h2&gt;

&lt;p&gt;A Lambda function consists of the code and associated dependencies, and it also has configuration information within it. You are the one who's specifying the configuration information when creating a Lambda function. API is also provided so you can update some of the configuration data. Lambda function configuration information comes with critical elements like computing the resources needed, maximum execution time (timeout), IAM role (execution role), and handler name.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Calculating the required resources&lt;/strong&gt; is done by specifying the amount of memory that you wish to allocate for your Lambda function. AWS Lambda allocates CPU power in proportion to the memory by the same ratio as a general-purpose Amazon EC2 instance type like an M3 type. In the example, it would mean that if you allocate 1024 MB of memory, your lambda function will get twice the CPU share than if you allocated 512 MB.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Maximum execution time (timeout)&lt;/strong&gt; is specified to prevent the Lambda function from running non-stop. Since you're paying for the AWS resources that are used to run your Lambda function, this comes quite handy. Upon reaching the timeout, AWS Lambda is terminating the execution of your Lambda function. The recommended setting is valued upon the expected execution time.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;IAM role (execution role)&lt;/strong&gt; is the role that AWS Lambda performs on your behalf when executing a lambda function.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Handler name&lt;/strong&gt; is the method of entry point that runs your lambda function code with any event source dependencies included as a part of your lambda function. You will be able to discover more details, and the quality features of monitoring and debugging AWS Lambda and your Lambda functions by exploring our &lt;a href="https://dashbird.io/docs/"&gt;product features&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#triggering-lambda-function"&gt;
  &lt;/a&gt;
  Triggering Lambda Function
&lt;/h2&gt;

&lt;p&gt;AWS Lambda is operated by utilizing one of these two event models.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  a push event model&lt;/li&gt;
&lt;li&gt;  a pull event model&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lambda functions can be written in Node.js (or JavaScript) and Java (Java 8 compatible). These are some of the events that can be configured to trigger the Lambda function.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Table updates in Amazon DynamoDB&lt;/li&gt;
&lt;li&gt;  Modifying objects in the S3 bucket&lt;/li&gt;
&lt;li&gt;  Messages that arrive at the Amazon Kinesis stream&lt;/li&gt;
&lt;li&gt;  Notifications that are sent from the Amazon SNS&lt;/li&gt;
&lt;li&gt;  HTTP events sent from API Gateway&lt;/li&gt;
&lt;li&gt;  Custom events coming from mobile applications, web applications, or any other web services&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lambda functions are small bits of more significant work done, allowing you to perform it seamlessly and effectively. Starting from scratch is always the best option especially for beginners in the field.&lt;/p&gt;

&lt;p&gt;Hopefully, this article managed to find its way to the readers that are eager to learn and obtain some new knowledge about AWS Lambda and lambda functions. Feel free to post any questions in the comment sections below or even start a discussion about this topic.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Further reading:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/how-to-deploy-nodejs-application-aws-lambda/"&gt;How to deploy a Node.js application to AWS Lambda using Serverless Framework&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/lambda-metrics-monitoring-what-matters/"&gt;AWS Lambda metrics you should definitely be monitoring&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/top-aws-lambda-performance-monitoring-tools/"&gt;Top 6 AWS Lambda monitoring tools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/lambda-not-logging-to-cloudwatch/"&gt;Debugging with Dashbird: Lambda not logging to AWS CloudWatch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/what-are-aws-lambda-triggers/"&gt;What are AWS Lambda triggers?&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
      <category>devops</category>
      <category>beginners</category>
    </item>
    <item>
      <title>🗨️ Build a WhatsApp API using Node &amp; Express</title>
      <author>Max Programming</author>
      <pubDate>Tue, 11 Jan 2022 12:30:43 +0000</pubDate>
      <link>https://dev.to/maxprogramming/build-a-whatsapp-api-using-node-express-chf</link>
      <guid>https://dev.to/maxprogramming/build-a-whatsapp-api-using-node-express-chf</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uxVe9Y_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/8GDoVtr9mvQAAAAC/hey-everyone-spider-man.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uxVe9Y_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/8GDoVtr9mvQAAAAC/hey-everyone-spider-man.gif" alt="hey.gif" width="498" height="218"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today, you will be able to build a &lt;strong&gt;WhatsApp REST API&lt;/strong&gt; using Node.js and Express using Puppeteer and web scraping.&lt;/p&gt;

&lt;p&gt;Although we won't be doing any web scraping, we will use a library that does everything for you already and makes it very easy to work with WhatsApp programmatically.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#express-server-setup"&gt;
  &lt;/a&gt;
  Express server setup
&lt;/h3&gt;

&lt;p&gt;To set up the express server, we are not going to do it from scratch, we'll use a generator called  &lt;a href="https://npmjs.org/express-draft"&gt;&lt;code&gt;express-draft&lt;/code&gt;&lt;/a&gt;  by  &lt;a href="https://www.youtube.com/c/yoursTRULY267"&gt;YoursTruly&lt;/a&gt;. Firstly, install &lt;code&gt;express-draft&lt;/code&gt; globally and use the following command to generate an express app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;-g&lt;/span&gt; express-draft
exp &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--esgEWpjs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641634524269/MM1PjxGlU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--esgEWpjs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641634524269/MM1PjxGlU.png" alt="image.png" width="880" height="917"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#install-whatsapp-web-library"&gt;
  &lt;/a&gt;
  Install Whatsapp Web library
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Caution&lt;/strong&gt;: Installing this package will also download Chromium because of Puppeteer. To disable Chromium download, follow the steps on  &lt;a href="https://blog.usman-s.me/how-to-skip-chromium-download-in-puppeteer"&gt;this post&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So there's an awesome open-source Whatsapp client that connects through the Whatsapp Web browser app made by &lt;a href="https://twitter.com/pedroslopez"&gt;Pedro S. Lopez&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/pedroslopez"&gt;
        pedroslopez
      &lt;/a&gt; / &lt;a href="https://github.com/pedroslopez/whatsapp-web.js"&gt;
        whatsapp-web.js
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A WhatsApp client library for NodeJS that connects through the WhatsApp Web browser app
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/whatsapp-web.js" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/428351067e85ae072bc069b4fe0e2990f4e2de5fd7655855e80d0239cfdac41b/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f77686174736170702d7765622e6a732e737667" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://depfu.com/github/pedroslopez/whatsapp-web.js?project_id=9765" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/cd080a847d5cb24617ba0c08297978c442357987d4f1010e6ac7f21a154c6958/68747470733a2f2f6261646765732e64657066752e636f6d2f6261646765732f34613635613064653936656365363566646633396532393465306338646362612f6f766572766965772e737667" alt="Depfu"&gt;&lt;/a&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/182ade54e7d6fe00fceb65f0d3cc8d97c2b981bcfe1e3b8f28c234e692e7c922/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f57686174734170705f5765622d322e323134372e31342d627269676874677265656e2e737667"&gt;&lt;img src="https://camo.githubusercontent.com/182ade54e7d6fe00fceb65f0d3cc8d97c2b981bcfe1e3b8f28c234e692e7c922/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f57686174734170705f5765622d322e323134372e31342d627269676874677265656e2e737667" alt="WhatsApp_Web 2.2147.14"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/H7DqQs4" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8985d4dcb1ac05c52d0b0c919f708ab3d48b5435e4d2e89d01e996a0318a86c8/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f3639383631303437353433323431313139362e7376673f6c6f676f3d646973636f7264" alt="Discord Chat"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
whatsapp-web.js&lt;/h1&gt;
&lt;p&gt;A WhatsApp API client that connects through the WhatsApp Web browser app&lt;/p&gt;
&lt;p&gt;It uses Puppeteer to run a real instance of Whatsapp Web to avoid getting blocked.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; I can't guarantee you will not be blocked by using this method, although it has worked for me. WhatsApp does not allow bots or unofficial clients on their platform, so this shouldn't be considered totally safe.&lt;/p&gt;
&lt;h2&gt;
Quick Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://wwebjs.dev/guide" rel="nofollow"&gt;Guide / Getting Started&lt;/a&gt; &lt;em&gt;(work in progress)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.wwebjs.dev/" rel="nofollow"&gt;Reference documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pedroslopez/whatsapp-web.js"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://npmjs.org/package/whatsapp-web.js" rel="nofollow"&gt;npm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;The module is now available on npm! &lt;code&gt;npm i whatsapp-web.js&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Please note that Node v12+ is required.&lt;/p&gt;
&lt;h2&gt;
Example usage&lt;/h2&gt;
&lt;div class="highlight highlight-source-js position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; Client &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;require&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'whatsapp-web.js'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;client&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-v"&gt;Client&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-s1"&gt;client&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;on&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'qr'&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;qr&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
    &lt;span class="pl-c"&gt;// Generate and scan this code with your phone&lt;/span&gt;
    &lt;span class="pl-smi"&gt;console&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;log&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'QR RECEIVED'&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-s1"&gt;qr&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-s1"&gt;client&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/pedroslopez/whatsapp-web.js"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;First, we'll install it through NPM &lt;em&gt;or yarn&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i whatsapp-web.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After we're done with that, we can set it up in our &lt;code&gt;app.js&lt;/code&gt; file by following the given  &lt;a href="https://github.com/pedroslopez/whatsapp-web.js/blob/main/example.js"&gt;example&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We can alter the file as follows,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createError&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http-errors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;morgan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;morgan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;whatsapp-web.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SESSION_FILE_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./session.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sessionCfg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;existsSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SESSION_FILE_PATH&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;sessionCfg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SESSION_FILE_PATH&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;puppeteer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;headless&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="c1"&gt;// Make headless true or remove to run browser in background&lt;/span&gt;
  &lt;span class="na"&gt;session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;sessionCfg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While using this library, whenever a user logs in, their information will be stored in a &lt;code&gt;session.json&lt;/code&gt; file, which is then used to authenticate the user the next time when the server starts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: Create a &lt;code&gt;nodemon.json&lt;/code&gt; file in the root folder and add these contents to ignore the &lt;code&gt;session.json&lt;/code&gt; file whenever it changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"$schema"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;can&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;omitted&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;it's&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;used&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;IntelliSense.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;REMOVE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;THIS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;COMMENT&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"$schema"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://json.schemastore.org/nodemon.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"ignore"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"session.json"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-routes-and-user-login"&gt;
  &lt;/a&gt;
  Creating routes and user login
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#using-events"&gt;
  &lt;/a&gt;
  Using events
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;whatsapp-web.js&lt;/code&gt; has a lot of events to work with, and we'll now use some of them to get the QR code, check the authentication, etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Add this after express code but before starting the server&lt;/span&gt;

&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;qr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;qr&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// NOTE: This event will not be fired if a session is specified.&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;QR RECEIVED&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;qr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/getqr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;qr&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;authenticated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;AUTHENTICATED&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;sessionCfg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SESSION_FILE_PATH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;auth_failure&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Fired if session restore was unsuccessfull&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;AUTHENTICATION FAILURE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ready&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;READY&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Listening for the server&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`🚀 @ http://localhost:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code uses events provided by the library to tackle different situations. They are pretty self-explanatory so I am not gonna explain each of them.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;"qr"&lt;/code&gt; method, we create a route that sends the QR code as the response. The QR code is in raw format, meaning it needs to be generated so for the purpose of this tutorial, we'll use a library called &lt;code&gt;qrcode-terminal&lt;/code&gt; to show the QR Code in the terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Run `npm i qrcode-terminal` before this&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;qrcode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;qrcode-terminal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;qr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;qr&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// NOTE: This event will not be fired if a session is specified.&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;QR RECEIVED&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;qr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;qrcode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;qr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;small&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="c1"&gt;// Add this line&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/getqr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;qr&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-raw-sendmessage-endraw-endpoint"&gt;
  &lt;/a&gt;
  The &lt;code&gt;sendmessage&lt;/code&gt; endpoint
&lt;/h3&gt;

&lt;p&gt;Now that we have everything set up, let's do the most exciting part that is to send a message using our own API.&lt;/p&gt;

&lt;p&gt;For that, we create a route in the &lt;code&gt;app.js&lt;/code&gt; file itself.&lt;/p&gt;

&lt;p&gt;Let's create the POST endpoint for &lt;code&gt;sendmessage&lt;/code&gt; and it will be an &lt;code&gt;async&lt;/code&gt; function with a try-catch block.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/sendmessage&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Magic happens here&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the body of the request, the user has to enter two pieces of data.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Mobile number&lt;/li&gt;
&lt;li&gt;Message&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We'll identify those as &lt;code&gt;number&lt;/code&gt; and &lt;code&gt;message&lt;/code&gt; respectively. Hence, we get them from the request body, and use them to very easily send the message &lt;strong&gt;from the client to the given number&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To send a message, we use the &lt;code&gt;client.sendMessage&lt;/code&gt; method and these are the arguments we need to pass in&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UqiT9hcM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641641747436/t-Pzomgq-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UqiT9hcM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641641747436/t-Pzomgq-.png" alt="image.png" width="459" height="192"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/sendmessage&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Get the body&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;@c.us`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Send the message&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="c1"&gt;// Send the response&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now here, in the &lt;code&gt;sendMessage&lt;/code&gt; method, we pass in the mobile number and the message itself. With the mobile number, we have to attach &lt;code&gt;@c.us&lt;/code&gt; at the very end, so we do that with template literals in JavaScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-the-api"&gt;
  &lt;/a&gt;
  Testing the API
&lt;/h2&gt;

&lt;p&gt;In order to test our API, we first run it using &lt;code&gt;npm run dev&lt;/code&gt;. That will open up a browser (if you've set &lt;code&gt;headless&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Running the server will give us the QR Code to authenticate because it's the first time. So, you have to scan it through WhatsApp.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9T5t2EwO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641642355849/9jDhG2-nd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9T5t2EwO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641642355849/9jDhG2-nd.png" alt="image.png" width="738" height="1600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once authenticated, you will notice that a &lt;code&gt;session.json&lt;/code&gt; file has been created with the following contents.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UiaaUnYu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641642315529/HTwbVxMBq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UiaaUnYu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641642315529/HTwbVxMBq.png" alt="image.png" width="880" height="132"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now in VS Code itself, we'll use an extension called &lt;strong&gt;Thunder Client&lt;/strong&gt;, which works like Postman for API testing.  &lt;a href="https://marketplace.visualstudio.com/items?itemName=rangav.vscode-thunder-client"&gt;Here's the link&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WXYc8tXR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641642506648/MYLChp2-l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WXYc8tXR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641642506648/MYLChp2-l.png" alt="image.png" width="278" height="68"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create a &lt;strong&gt;New Request&lt;/strong&gt; in Thunder Client, and then add the following details. In the &lt;code&gt;number&lt;/code&gt; field, add the mobile number followed by the country code of the number.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jJ0QavDC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641645569198/ysdOUnwwE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJ0QavDC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641645569198/ysdOUnwwE.png" alt="image.png" width="511" height="632"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Look at the image carefully&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And then hit &lt;strong&gt;Send&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If the message is sent successfully, the number you entered will receive it and you will get back the &lt;code&gt;msg&lt;/code&gt; as the response. If not, then an error.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xVf6MzU0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641643609398/muQhzRQSn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xVf6MzU0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641643609398/muQhzRQSn.png" alt="image.png" width="500" height="617"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jUIUesZl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/68a5_Ug62VYAAAAM/success-strong.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jUIUesZl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/68a5_Ug62VYAAAAM/success-strong.gif" alt="success.gif" width="220" height="178"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;You can read more about the library here&lt;/p&gt;

&lt;p&gt;&lt;a href="https://wwebjs.dev/"&gt;https://wwebjs.dev/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you enjoyed building out the WhatsApp API using Node.js, Express, and &lt;code&gt;whatsapp-web.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Comment down your thoughts! There is always room for improvement so let me know your suggestions on this project!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Connect with me on my &lt;a href="https://youtube.com/MaxProgramming"&gt;YouTube channel&lt;/a&gt; and my  &lt;a href="https://twitter.com/maxprogramming1"&gt;Twitter&lt;/a&gt; 😉&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Until next time, keeping awesome ✌️.&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Creating a discord auto threading system</title>
      <author>Chris Bongers</author>
      <pubDate>Tue, 11 Jan 2022 12:12:55 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/creating-a-discord-auto-threading-system-433</link>
      <guid>https://dev.to/dailydevtips1/creating-a-discord-auto-threading-system-433</guid>
      <description>&lt;p&gt;In case you missed it, I launched a discord server for technical writers: &lt;a href="https://discord.gg/bfnmNMCTSJ"&gt;Technical Types Community&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The idea of this server is to create a dedicated space for technical writers, where we can collaborate, share ideas and ask questions.&lt;/p&gt;

&lt;p&gt;This is an open-sourced free for all and welcoming community.&lt;/p&gt;

&lt;p&gt;I introduced a channel to get feedback on your work with this community. However, the realization quickly was that feedback gets buried if there are a lot of comments.&lt;/p&gt;

&lt;p&gt;Threads would be a fantastic solution. However, it's difficult to force and monitor this behavior.&lt;/p&gt;

&lt;p&gt;That leaves us with only one choice: Automate it!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DTtnEeLr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641093383809/xByZ1tpZK.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DTtnEeLr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641093383809/xByZ1tpZK.jpeg" alt="Automate all the things" width="289" height="175"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-sure-people-cant-spam-the-main-channel"&gt;
  &lt;/a&gt;
  Making sure people can't spam the main channel
&lt;/h2&gt;

&lt;p&gt;The first thing we need to take care of is to make sure people can only post one link per x hours.&lt;/p&gt;

&lt;p&gt;Luckily for us, discord comes with this feature built-in, and it's called "slow mode" this allows a user to only post once per x hours on the main thread.&lt;/p&gt;

&lt;p&gt;This is no longer applicable in the threads created, so ideal for what we want to achieve.&lt;/p&gt;

&lt;p&gt;To enable slow mode for a channel, click the little gear icon next to the channel's name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MbkSH8wY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641093668608/3Te80oZ58.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MbkSH8wY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641093668608/3Te80oZ58.png" alt="Edit channel in discord" width="556" height="236"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then you want to set the slow mode slider to the max (6 hours).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eN-FqGUA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641093754940/bGMMVLi3L.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eN-FqGUA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641093754940/bGMMVLi3L.png" alt="Slow mode enabled in discord" width="880" height="589"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This setting will make sure a user can only send one message per 6 hours on the main channel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-auto-threader-bot"&gt;
  &lt;/a&gt;
  Creating the auto threader bot
&lt;/h2&gt;

&lt;p&gt;We want to make sure a thread is created for every post on this channel.&lt;/p&gt;

&lt;p&gt;We won't be building this bot from scratch as a super awesome one already exists.&lt;/p&gt;

&lt;p&gt;It's this &lt;a href="https://github.com/MarcusOtter/discord-needle"&gt;Discord needle bot&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, I did make my own version of this because I wanted it to work with &lt;code&gt;.env&lt;/code&gt; variables.&lt;/p&gt;

&lt;p&gt;Markus made some changes to his one based on my feedback, and you can use his &lt;code&gt;custom-config&lt;/code&gt; branched version at the point of writing this.&lt;/p&gt;

&lt;p&gt;If you choose to use my version, you must create a &lt;code&gt;.env&lt;/code&gt; file that includes the following two variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;API_TOKEN={DISCORD_API_TOKEN}
CHANNEL={CHANNEL_ID}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#find-the-channel-id"&gt;
  &lt;/a&gt;
  Find the channel id
&lt;/h3&gt;

&lt;p&gt;To find the discord channel id, you will need to enable developer mode in discord.&lt;/p&gt;

&lt;p&gt;Click your user profile settings by clicking on the gear icon next to your profile.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IUabV04P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641094151122/izpMDIHLX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IUabV04P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641094151122/izpMDIHLX.png" alt="User settings in discord" width="480" height="102"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then you can find the "Advanced" menu and toggle the developer mode on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N__f8qNF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641094215732/X_q5nfDy1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N__f8qNF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641094215732/X_q5nfDy1.png" alt="Developer mode in discord" width="880" height="571"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once this is on, you can right-click any channel and click the "Copy ID" option.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YQGC4To9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641094288763/K_cR_ehDk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YQGC4To9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641094288763/K_cR_ehDk.png" alt="Discord copy channel ID" width="692" height="812"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-the-discord-bot"&gt;
  &lt;/a&gt;
  Creating the discord bot
&lt;/h3&gt;

&lt;p&gt;We have to create the discord bot by visiting the &lt;a href="https://discord.com/developers/applications"&gt;Discord Developer portal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Create a new bot by clicking the "New Application" button.&lt;/p&gt;

&lt;p&gt;Once you've done this, click the "Oauth2" item.&lt;br&gt;
Select "Bot" as the scope and check the following permissions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;View channels&lt;/li&gt;
&lt;li&gt;Send messages&lt;/li&gt;
&lt;li&gt;Send messages in threads&lt;/li&gt;
&lt;li&gt;Create public threads&lt;/li&gt;
&lt;li&gt;Read message history&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mb3DcsLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641094693993/WfrqSarqM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mb3DcsLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641094693993/WfrqSarqM.png" alt="discord bot settings" width="880" height="457"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click the copy button at the bottom and paste this into a new tab.&lt;br&gt;
This will prompt a setup for this bot.&lt;br&gt;
Select the server you want to add this bot to.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ng1rva5a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641094750090/9PYPMpfM6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ng1rva5a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641094750090/9PYPMpfM6.png" alt="Adding the discord bot" width="756" height="836"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#running-the-bot"&gt;
  &lt;/a&gt;
  Running the bot
&lt;/h3&gt;

&lt;p&gt;Now it's time to run your bot.&lt;br&gt;
To test the bot, you can run the local version using &lt;code&gt;npm start&lt;/code&gt; in the project.&lt;/p&gt;

&lt;p&gt;Or you can follow my guide on &lt;a href="https://daily-dev-tips.com/posts/hosting-a-discord-bot-on-railway/"&gt;running a bot on Railway app&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#try-it-out"&gt;
  &lt;/a&gt;
  Try it out
&lt;/h2&gt;

&lt;p&gt;You should now post on this channel, and a thread will be automatically created for you!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B0bwgJW8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641094965254/cBbNb8gOm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B0bwgJW8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641094965254/cBbNb8gOm.png" alt="Auto threader bot in action" width="880" height="577"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or even better, you can try it in real life on the &lt;a href="https://discord.gg/bfnmNMCTSJ"&gt;Technical Typers Discord server&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discord</category>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Convert your website into EXE file using Node.JS</title>
      <author>SupremeWyn</author>
      <pubDate>Tue, 11 Jan 2022 12:06:58 +0000</pubDate>
      <link>https://dev.to/supremewyn/convert-your-website-into-exe-file-using-nodejs-2nkg</link>
      <guid>https://dev.to/supremewyn/convert-your-website-into-exe-file-using-nodejs-2nkg</guid>
      <description>&lt;p&gt;Cover designed by KindPng.com&lt;/p&gt;

&lt;p&gt;Hey guys 😁, today I'm gonna be showing you how to convert your website link into exe file&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download node.js&lt;/li&gt;
&lt;li&gt;When you downloading make sure you click the button "Add to PATH", and then you ready to install.&lt;/li&gt;
&lt;li&gt;Open cmd and type "npm install -g nativefier"&lt;/li&gt;
&lt;li&gt;Wait until the installation is finished.&lt;/li&gt;
&lt;li&gt;After that type like this "nativefier --name 'Your App Name' 'myapp.com'"&lt;/li&gt;
&lt;li&gt;Wait until the converting is finish and goto C:/Windows/System32/And search folder with the name "yourappname-win32"&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you have any problem feel free to ask, im gonna answer as fast as i can&lt;/p&gt;

</description>
      <category>node</category>
      <category>nativefier</category>
      <category>tutorial</category>
      <category>npm</category>
    </item>
    <item>
      <title>Can GitHub Copilot center a div?</title>
      <author>Virej Dasani</author>
      <pubDate>Tue, 11 Jan 2022 11:54:31 +0000</pubDate>
      <link>https://dev.to/virejdasani/can-github-copilot-center-a-div-26lj</link>
      <guid>https://dev.to/virejdasani/can-github-copilot-center-a-div-26lj</guid>
      <description>&lt;p&gt;I asked Github Copilot to center a div!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ualZRQfBlq4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Comment what I should do for my next video&lt;/p&gt;

&lt;p&gt;Subscribe for more content!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>css</category>
    </item>
    <item>
      <title>Drinkizz E-Commerce Application</title>
      <author>Swapnil Patil</author>
      <pubDate>Tue, 11 Jan 2022 11:18:43 +0000</pubDate>
      <link>https://dev.to/isscswapnil/drinkizz-e-commerce-application-220o</link>
      <guid>https://dev.to/isscswapnil/drinkizz-e-commerce-application-220o</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;Hello Guys We are making  an E-commerce web application using NodeJS and ExpressJs for Backend and MongoDB for database, also we are use ReactJS for frontend, This app is Good user interface, This is an Online Liquor ordering platform &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;E-Commerce Creation&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;

&lt;p&gt;Backend : (&lt;a href="https://github.com/issc-Swapnil/drinkizz-api.git"&gt;https://github.com/issc-Swapnil/drinkizz-api.git&lt;/a&gt;)&lt;br&gt;
Frontend : (&lt;a href="https://github.com/Naeema21/drinkizz.git"&gt;https://github.com/Naeema21/drinkizz.git&lt;/a&gt;)&lt;br&gt;
Hosting : &lt;a href="https://www.heroku.com/"&gt;https://www.heroku.com/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;Live Preview : (&lt;a href="https://drinkizz.herokuapp.com/"&gt;https://drinkizz.herokuapp.com/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Sample Users:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Email : &lt;a href="mailto:swapnil@drinkizz.com"&gt;swapnil@drinkizz.com&lt;/a&gt;&lt;br&gt;
Password : drinkizz&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Email : &lt;a href="mailto:naeema@lt.com"&gt;naeema@lt.com&lt;/a&gt;&lt;br&gt;
Password : naee2022&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;[Note:] # Screenshots&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hEG3umAT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/begiujw5anxv50k1x2ex.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hEG3umAT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/begiujw5anxv50k1x2ex.png" alt="HomePage" width="870" height="836"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l24YfFYC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x4psxwqs9mjjdxrdiuyh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l24YfFYC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x4psxwqs9mjjdxrdiuyh.png" alt="cart product list" width="880" height="545"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_OHhcP3u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y0m144ks4vt2273tzsf3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_OHhcP3u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y0m144ks4vt2273tzsf3.png" alt="compare products" width="880" height="507"&gt;&lt;/a&gt;&lt;br&gt;
[Note]: #  DEV usernames of my collaborator &lt;a class="mentioned-user" href="https://dev.to/naeema21"&gt;@naeema21&lt;/a&gt; &lt;/p&gt;

</description>
      <category>atlashackathon</category>
      <category>mongodb</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Changelog #0009 — 🌊 export cURL, HAR, and 30+ other formats</title>
      <author>Cláudia Delgado</author>
      <pubDate>Tue, 11 Jan 2022 11:18:24 +0000</pubDate>
      <link>https://dev.to/pie/changelog-0009-export-curl-har-and-30-other-formats-1d2l</link>
      <guid>https://dev.to/pie/changelog-0009-export-curl-har-and-30-other-formats-1d2l</guid>
      <description>&lt;p&gt;New year, new features! Over the past week, we’ve been primarily focusing on our overall architecture and under the hood improvements that will unlock work throughout the year. In addition to that, we’ve got a couple of user-visible goodies ready for you as well.&lt;/p&gt;

&lt;p&gt;Check out what's new 👇&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#httpie-for-web-amp-desktop"&gt;
  &lt;/a&gt;
  HTTPie for Web &amp;amp; Desktop
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#curl-command-generation-and-more"&gt;
  &lt;/a&gt;
  📦 cURL command generation, and more
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://httpie.io/blog/changelog-0003"&gt;HTTPie command generation&lt;/a&gt; has been available in the preview panel for a while. You can now export code and commands for many other languages and tools, including the highly requested cURL, HAR, JavaScript, Node, Java, PHP, Objective-C, Swift, Python, Ruby, C#, Go, OCaml, and more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DgI4uxsz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://httpie.io/Blog/changelog-0009/httpie-curl-export-3IZZKTFL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DgI4uxsz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://httpie.io/Blog/changelog-0009/httpie-curl-export-3IZZKTFL.png" alt="HTTPie cURL export" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open the preview and select the export format you like. Make some changes to your request and see them instantly reflected in the code preview — it’s like a WYSIWYG editor for API calls code. Hit the three dots at the right, copy the generated code to export and share. Easy!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#improvements"&gt;
  &lt;/a&gt;
  ✨ Improvements
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Small improvements and optimizations.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#httpie-for-terminal"&gt;
  &lt;/a&gt;
  HTTPie for Terminal
&lt;/h2&gt;

&lt;p&gt;We have been working towards the upcoming 3.0.0 release of &lt;a href="https://httpie.io/cli"&gt;HTTPie for Terminal&lt;/a&gt; that will come out &lt;em&gt;very&lt;/em&gt; soon. Here’s  what’s new in the &lt;a href="https://github.com/httpie/httpie"&gt;development version&lt;/a&gt;:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#more-robust-and-userfriendly-nested-json-syntax"&gt;
  &lt;/a&gt;
  🌲 More robust and user-friendly nested JSON syntax
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://httpie.io/docs/cli/HEAD/nested-json-fields"&gt;nested JSON syntax&lt;/a&gt; extends the &lt;a href="https://httpie.io/docs/cli/request-items"&gt;HTTPie request language&lt;/a&gt; and through its compactness and expressiveness offers a productivity boost when talking to JSON APIs. It allows you to craft complex JSON structures without worrying about curly braces, quotes, or backlashes.&lt;/p&gt;

&lt;p&gt;This syntax, together with the rest of the HTTPie language, will eventually find its way to HTTPie for Web &amp;amp; Desktop as well, so we wanted to make extra sure it’s up to HTTPie’s standards before we release it to the wild.&lt;/p&gt;

&lt;p&gt;With the help of our users, we identified various edge cases and ended up re-writing the underlying implementation to be much more robust. On the more user-visible side, we now offer guiding syntax and type errors instead of silently accepting the broken input, for example:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unbalanced-brackets"&gt;
  &lt;/a&gt;
  Unbalanced brackets
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;http &lt;span class="nt"&gt;--offline&lt;/span&gt; &lt;span class="nt"&gt;--print&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;B  pie.dev/post &lt;span class="s2"&gt;"foo[bar]=baz"&lt;/span&gt; &lt;span class="s2"&gt;"foo[quux:=1"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;HTTPie Syntax Error: Expecting ']'

foo[quux
        ^
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#omitted-brackets"&gt;
  &lt;/a&gt;
  Omitted brackets
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;http &lt;span class="nt"&gt;--offline&lt;/span&gt; &lt;span class="nt"&gt;--print&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;B  pie.dev/post &lt;span class="s2"&gt;"foo[bar]baz[quux]:=2"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;HTTPie Syntax Error: Expecting '['

foo[bar]baz[quux]
        ^^^
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#type-errors"&gt;
  &lt;/a&gt;
  Type errors
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;http &lt;span class="nt"&gt;--offline&lt;/span&gt; &lt;span class="nt"&gt;--print&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;B  pie.dev/post &lt;span class="s2"&gt;"foo[bar]=baz"&lt;/span&gt; &lt;span class="s2"&gt;"foo[1]:=2"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;HTTPie Type Error: Can't perform 'index' based access on 'foo' which has a type of 'object' but this operation requires a type of 'array'.

foo[1]
   ^^^
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#happy-testing-and-see-you-next-week"&gt;
  &lt;/a&gt;
  Happy testing, and see you next week!
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;💁🏻‍♀️ If you’re not on the private beta yet, you can &lt;a href="https://httpie.io/beta"&gt;join the waitlist here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;👉 You can also follow &lt;a href="https://twitter.com/httpie"&gt;@httpie&lt;/a&gt; and join our &lt;a href="https://httpie.io/discord"&gt;Discord community&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;👩‍💻 We’re looking for new colleagues in &lt;a href="https://httpie.io/jobs"&gt;engineering and design roles&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Originally published on &lt;a href="https://httpie.io/blog/changelog-0009"&gt;HTTPie blog&lt;/a&gt;.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>A CSS Container Queries Example</title>
      <author>Ingo Steinke</author>
      <pubDate>Tue, 11 Jan 2022 11:13:33 +0000</pubDate>
      <link>https://dev.to/ingosteinke/a-css-container-queries-example-1le0</link>
      <guid>https://dev.to/ingosteinke/a-css-container-queries-example-1le0</guid>
      <description>&lt;p&gt;CSS container queries are similar to media queries, but related to a container element size rather than the viewport size. While adaptive layouts often set breakpoints based on the viewport using media queries, we can use container queries to achieve a similar effect when creating modular components in a design system.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-can-we-use-container-queries"&gt;
  &lt;/a&gt;
  But can we use Container Queries?
&lt;/h2&gt;

&lt;p&gt;At the time of writing, in January 2022, container queries are only available after opt-in by feature flag, so don't expect container query support in your regular end-user's browsers today. But, like &lt;a href="https://piccalil.li/blog/container-queries-are-actually-coming/"&gt;Andy Bell wrote&lt;/a&gt;, we can start to use container queries progressively right now:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If the browser doesn’t understand some CSS, it’ll ignore it and carry on parsing the rest, so we can effectively use container queries today.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#what-not-to-use-container-queries-for"&gt;
  &lt;/a&gt;
  What not to use Container Queries for
&lt;/h3&gt;

&lt;p&gt;HTML websites are responsive out of the box. Without adding style rules, text content will adapt to fill the browser window so that it does not flow out of the visible area. Adding a few lines of CSS, we can make images behave the same (provided we set their &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; or an explicit &lt;code&gt;aspect-ratio&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Provided that we properly stated the actual (intrinsic) image sizes, we can apply this rule safely without any media query or container query. If the image is smaller than the viewport width, the rule will have no effect. On smaller screens, the browser can use the resulting aspect ratio to calculate the height and resize the image without distortion. And if we want to hide an images on mobile screens, we can use a &lt;code&gt;picture&lt;/code&gt; elements with a &lt;code&gt;srcset&lt;/code&gt; to prevent loading hidden images.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-cases-for-container-queries"&gt;
  &lt;/a&gt;
  Use Cases for Container Queries
&lt;/h2&gt;

&lt;p&gt;Maybe we want to toggle the &lt;code&gt;flex-wrap&lt;/code&gt; or &lt;code&gt;flex-direction&lt;/code&gt; property, set &lt;code&gt;position: fixed&lt;/code&gt; with a &lt;code&gt;z-index&lt;/code&gt;, or change typography and colors based on the available space for our component, depending on how much space is available for our component.&lt;/p&gt;

&lt;p&gt;By taking into account a parent container rather than the whole site, we can design web components that can be reused inside other columns, dynamically changing their appearance based on the width or height that is actually available.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-flexbox-holy-albatross"&gt;
  &lt;/a&gt;
  The "Flexbox Holy Albatross"
&lt;/h3&gt;

&lt;p&gt;At beyond Tellerrand conference 2019, &lt;a href="https://beyondtellerrand.com/events/dusseldorf-2019/speakers/heydon-pickering"&gt;Heydon Pickering presented the "Holy Albatross"&lt;/a&gt; a layout using sophisticated CSS that will become more elegant and readable by using container queries.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/336148765" width="710" height="399"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The idea of emulating container queries using other CSS properties had become an ambition obsession like searching for the Holy Grail, impossible to avoid like the Albatross vendor in a sketch by Monty Python's Flying Circus, so he called his code &lt;a href="https://heydonworks.com/article/the-flexbox-holy-albatross-reincarnated/"&gt;the Flexbox Holy Albatross&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#emulating-container-queries-in-a-flexbox"&gt;
  &lt;/a&gt;
  Emulating Container Queries in a Flexbox
&lt;/h3&gt;

&lt;p&gt;In Heydon's example, a flexbox will automatically switch from horizontal (multi-column) to vertical (single column) flexbox layouts, by a calculating a flex-basis based on the difference between our breakpoint (&lt;code&gt;640px&lt;/code&gt; in the below example) and the available container width (&lt;code&gt;100%&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/openmindculture/pen/xxXaLed"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KlcREDes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dtgryrakkt6endskmyk3.png" alt="Codepen: Flexbox Albatross without Container Queries (screenshot)" width="880" height="394"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This technique works pretty well, but the code is not easy to understand.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--modifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;640px&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--margin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;flex-grow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-basis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--modifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="m"&gt;999&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--margin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's refactor the code using container queries.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-container-queries"&gt;
  &lt;/a&gt;
  Using Container Queries
&lt;/h3&gt;

&lt;p&gt;First, we have to make sure we can actually use them, which is currently an opt-in preview feature in Chrome and Chromium-based browsers like Edge or Vivaldi.&lt;/p&gt;

&lt;p&gt;Navigate to &lt;a href="https://dev.tochrome::flags"&gt;chrome://flags&lt;/a&gt;, search for &lt;code&gt;container&lt;/code&gt;, switch "Enable CSS Container Queries" to "Enabled" and restart your browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xDlxA8ju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s8mg6z8qr39xmb3ueu5b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xDlxA8ju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s8mg6z8qr39xmb3ueu5b.png" alt="Screenshot: enable container queries in Chrome's feature flags" width="880" height="458"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#refactoring-the-albatross-flexbox-example"&gt;
  &lt;/a&gt;
  Refactoring the Albatross Flexbox Example
&lt;/h2&gt;

&lt;p&gt;We have to use the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Containment"&gt;contain property&lt;/a&gt; to explicitly define our container as a container element (similar to using &lt;code&gt;position: relative&lt;/code&gt; to define a parent context for &lt;code&gt;position: absolute&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/suprabhasupi"&gt;@suprabhasupi&lt;/a&gt;'s article &lt;a href="https://dev.to/suprabhasupi/future-of-css-container-query-4ma4"&gt;Future of CSS - Container Query&lt;/a&gt; explaines containment and container queries, providing a hands-on example.&lt;/p&gt;

&lt;p&gt;To define a container that enables container queries based on width and height, we can use the existing containment property &lt;code&gt;contain: size&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In many common use cases, we are only interested in the width. This is what the new &lt;code&gt;contain: inline-size&lt;/code&gt; is for. This common use-case also applies to our flexbox example.&lt;/p&gt;

&lt;p&gt;In any case, we also need to define a containment for &lt;code&gt;layout&lt;/code&gt; to enable container queries, as well as &lt;code&gt;style&lt;/code&gt; to prevent dynamic style calculation causing infinite loops.&lt;/p&gt;

&lt;p&gt;If you don't specify &lt;code&gt;style&lt;/code&gt;, container queries will not work in the current experimental implementation (of late 2021 at least).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;contain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="n"&gt;inline-size&lt;/span&gt; &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@container&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;640px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;flex-basis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/openmindculture/embed/jOGvZNO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you see a pink border around the albatross boxes in the small-container vertical column layout, your browser has applied the styles based on CSS container queries.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shipping-stable-code-to-production"&gt;
  &lt;/a&gt;
  Shipping Stable Code to Production
&lt;/h3&gt;

&lt;p&gt;At the time of writing, no popular browser supports container queries by default. So what's the point in using future CSS right now?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-usage-as-vote-for-a-feature"&gt;
  &lt;/a&gt;
  Code Usage as Vote for a Feature
&lt;/h3&gt;

&lt;p&gt;Code is crawled and examined by various parties like Web Almanac, search engines and browser vendors. This was &lt;a href="https://dev.opera.com/articles/new-structural-elements-in-html5/#how-decided"&gt;how semantic HTML 5 elements like nav got their names&lt;/a&gt; and this might also be a hint for decisions on what features to prioritize and which ones to deprecate.&lt;/p&gt;

&lt;p&gt;Citation needed: I overheard that there is still similar research going on to help decide which browser features to prioritize, but I did not find any official statement to acknowledge this claim.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-fallback-code"&gt;
  &lt;/a&gt;
  Adding Fallback Code
&lt;/h2&gt;

&lt;p&gt;We can add a container query emulation like Heydon's "Flexbox Holy Albatross" or use a &lt;a href="https://tomquinonero.com/blog/a-guide-to-css-container-queries/"&gt;container query polyfill&lt;/a&gt; as a polyfill and switch browsers or feature flags to make sure that our code works as expected with or without container queries.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/openmindculture/embed/qBPMpQj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>webdesign</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>Adding external javascript script to React</title>
      <author>Mulligan81</author>
      <pubDate>Tue, 11 Jan 2022 11:07:49 +0000</pubDate>
      <link>https://dev.to/mulligan81/adding-external-javascript-script-to-react-3a25</link>
      <guid>https://dev.to/mulligan81/adding-external-javascript-script-to-react-3a25</guid>
      <description>&lt;p&gt;I'd like to include &amp;amp; run some &lt;code&gt;js&lt;/code&gt; file in the &lt;code&gt;React&lt;/code&gt; using &lt;code&gt;Helmet&lt;/code&gt; component. Here is the simple code:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;index.js:&lt;/em&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";
import ReactDOM from "react-dom";
import { Helmet } from "react-helmet";

import "./styles.css";

function App() {
  console.log("op");

  return (
    &amp;lt;div className="App"&amp;gt;
      &amp;lt;Helmet&amp;gt;
        &amp;lt;script src="hello.js" type="text/jsx" /&amp;gt;
      &amp;lt;/Helmet&amp;gt;
      &amp;lt;h1&amp;gt;Hellok CodeSandbox&amp;lt;/h1&amp;gt;
      &amp;lt;h2&amp;gt;Start editing to see some magic happen!&amp;lt;/h2&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;and ultra simple &lt;code&gt;js&lt;/code&gt; script to include &amp;amp; run:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;hello.js:&lt;/em&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log("opl882...")
document.body.style.backgroundColor = "red";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;But the script seems NOT to work! - i have no console output and/or background color changed. What's odd when I use the &lt;code&gt;js&lt;/code&gt; code as an inline code like:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;Helmet&amp;gt;
   &amp;lt;script type="text/javascript"&amp;gt;
     console.log("opl882..."); document.body.style.backgroundColor = "red"
   &amp;lt;/script&amp;gt;
 &amp;lt;/Helmet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;it works! &lt;/p&gt;

&lt;p&gt;Why doesn't  the external &lt;code&gt;js&lt;/code&gt; file work?&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>A look at the Redux connect() function</title>
      <author>Akhil Reddy Mallidi</author>
      <pubDate>Tue, 11 Jan 2022 11:01:58 +0000</pubDate>
      <link>https://dev.to/itzzmeakhi/a-look-at-the-redux-connect-function-b7i</link>
      <guid>https://dev.to/itzzmeakhi/a-look-at-the-redux-connect-function-b7i</guid>
      <description>&lt;p&gt;It is no secret that React is one of the most popular libraries for building User Interfaces in today's day and age. I am confident most of you who read this blog have used Redux for managing the overall state of the application in your previous projects.&lt;/p&gt;

&lt;p&gt;Ever wondered how the redux connect() function works? Or what are the various JavaScript concepts involved in writing a connect() function?&lt;/p&gt;

&lt;p&gt;In that case, I will walk you through the JavaScript concepts involved in writing our own connect() function, which can then be integrated into the Redux library and used in conjunction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As per the Redux documentation, connect()() function returns&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The return of connect() is a wrapper function that takes your component and returns a wrapper component with the additional props it injects. In most cases, the wrapper function will be called right away, without being saved in a temporary variable: export default connect(mapStateToProps, mapDispatchToProps)(Component).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First, let's take a look at Higher Order Functions in JavaScript.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-are-higher-order-functions"&gt;
  &lt;/a&gt;
  What are Higher Order Functions?
&lt;/h4&gt;

&lt;p&gt;JavaScript treats functions as First Class Citizens, which means that a function can return another function, or a function can be passed as a parameter to other functions or even store function as a value in a variable.&lt;/p&gt;

&lt;p&gt;Basically, Higher Order Functions are just functions that return another function or which accept a function as a parameter.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Redux's connect() function is a Higher Order Function that takes two functions as parameters (mapStateToProps and mapDispatchToProps), and it also returns a function that wraps the component.&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const mapStateToProps = state =&amp;gt; {
  return {};
}
const mapDispatchToProps = dispatch =&amp;gt; {
  return {};
}
export default connect(mapStateToProps, mapDispatchToProps)(OurComponent);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have seen the above implementation of Redux's connect() function, we know that connect() is an Higher Order Function. Before writing our own connect() function, we need to learn about closures and currying.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#currying"&gt;
  &lt;/a&gt;
  Currying
&lt;/h4&gt;

&lt;p&gt;Currying is a process in functional programming in which we can transform a function with multiple arguments into a sequence of nesting functions. It returns a new function that expects the next argument inline.&lt;/p&gt;

&lt;p&gt;Here's an example in JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rrying-1.js
function multiply(a, b) {
  return a * b;
}
// Generally, we will call the above function as multiply(1, 2)
// Lets make this function as a curried one
function multiply(a) {
  return (b) =&amp;gt; {
    return a * b;
  }
}
// We can call the curried multiply function as follows
// multiply(1)(2);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Confused? How does this concept apply to real-world scenarios. Let me give you a scenario.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In our application, there is a case where the result of some calculations has to be doubled. We typically did this by passing the result with 2 as arguments to the multiply function in the following way: multiply(result, 2);&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A function can be returned from currying, so it can be stored and used with other sets of parameters if needed.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function multiply(a) {
  return (b) =&amp;gt; {
    return a * b;
  }
}
// Returns a function, which can be used with other set of parameters
const double = multiply(2);
// Using curried function with result, instead of passing same argument again and again.
const doubledResult = double(result);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hopefully, you got the idea of how redux implements the connect()() function, using currying.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export default connect(mapStateToProps, mapDispatchToProps)(OurComponent);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#closures"&gt;
  &lt;/a&gt;
  Closures
&lt;/h4&gt;

&lt;p&gt;Closures simply refer to the scope of the outer function being accessible by the inner function, even after the outer function has been executed and removed from the call stack.&lt;/p&gt;

&lt;p&gt;Lets suppose we have an outer function A and inner function B.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function A() {
  const msgFromOuterFn = 'I am from Outer function scope';
  function B() {
    console.log(msgFromOuterFn);
  }
  return B;
}
// A returns a function B, In JavaScript when ever any function completes its execution, its scope is removed from the heap. So all the variables declared in its scope won't be available once its execution is done.
const returnedFn = A();
// A() completed its execution, so the value msgFromOuterFn will not able available.
// With JS Closures, even the outer function completed execution, inner functions are able to access the outer functions scope.
console.log(returnedFn());
// Will print its value, instead of throwing an error
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;_From the concept of Higher Order Functions, Currying, we learned that the connect()() function is a HOF (Higher Order Function) that takes two functions as parameters and returns an anonymous function, which we use to wrap our component, by calling it using Currying.&lt;/p&gt;

&lt;p&gt;Hence connect() is an outer function, whereas anonymous function returned is an inner function, so the props passed to connect() can be accessed by anonymous inner function, even after connect() has completed its execution using closures.&lt;/p&gt;

&lt;p&gt;Now that all of these are in place, let's move on to writing our own connect() function_&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Let's write our own connect() function&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We are going to use a starter application counter, which has increment/decrement actions connecting to a redux store. So the plan is to write our own connect function first, and then integrate the working application with it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The GitHub link of the counter application is as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/itzzmeakhi/blog-code-rep/tree/main/own-connect-fn-starter"&gt;Github-own_connect_fn_starter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WpQfsoRB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3xwo77whaqxi4myt4yy1.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WpQfsoRB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3xwo77whaqxi4myt4yy1.JPG" alt="Image description" width="880" height="414"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A simple counter application where the counter value is stored at redux store, which can be incremented or decremented by dispatching a redux action and updating the reducer. The Counter component is connected to redux store using react-redux connect() function.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Our understanding is that connect() is an HOF (Higher Order Function) that takes two functions as arguments and returns an anonymous function. Let's build on this idea.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// connectFn.js file
const connectFn = (mapStateToProps, mapDispatchToProps) =&amp;gt; {
  return () =&amp;gt; {
  }
}
export { connectFn };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, with the Anonymous Function receiving our component as an argument, we can pass it through with Currying. Next, we'll create our anonymous class component within the Anonymous Function, and the class will be returned by the Anonymous Function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// connectFn.js file
import React, { Component } from 'react';

const connectFn = (mapStateToProps, mapDispatchToProps) =&amp;gt; {
  return (WrappedComponent) =&amp;gt; {
    return class extends Component {
      render() {
        return (
          &amp;lt;WrappedComponent /&amp;gt;
        );
      }
    }
  }
}

export { connectFn };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we are using anonymous class to return our WrappedComponent inside of an anonymous function based on the HOF pattern.&lt;/p&gt;

&lt;p&gt;We can now pass the component props along with the props generated by mapStateToProps and mapDispatchToProps. The implementation states that mapStateToProps requires an overall redux state and component props as parameters, while mapDispatchToProps requires a dispatch function and component props as parameters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const mapStateToProps = (state, ownProps) =&amp;gt; {
  return {};
}

const mapDispatchToProps = (dispatch, ownProps) =&amp;gt; {
  return {};
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The component props can be accessed with this.props, but how do we get the state and dispatch method of the redux store?&lt;/p&gt;

&lt;p&gt;In the process of integrating redux into our application, a store will be created. We will export that store and import it in our connectFn file. We can access them using that store object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// store.js

import { createStore } from 'redux';

import reducer from './reducer';

const store = createStore(reducer);

export { store };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { Component } from 'react';
import { store } from './redux/store';

const connectFn = (mapStateToProps, mapDispatchToProps) =&amp;gt; {
  return (WrappedComponent) =&amp;gt; {
    return class extends Component {
      render() {
        console.log(this.props)
        return (
          &amp;lt;WrappedComponent 
            {...this.props}
            {...mapStateToProps(store.getState(), this.props)}
            {...mapDispatchToProps(store.dispatch, this.props)}
          /&amp;gt;
        );
      }
    }
  }
}

export { connectFn };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's still work to do. At this point, you may observe component is rendered on screen without any errors, however when clicking on increment/decrement the value of counter does not update. It is because we have to re-render a component whenever its state changes.&lt;/p&gt;

&lt;p&gt;We can do this by subscribing to the store and rendering it whenever state change happens.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { Component } from 'react';
import { store } from './redux/store';

const connectFn = (mapStateToProps, mapDispatchToProps) =&amp;gt; {
  return (WrappedComponent) =&amp;gt; {
    return class extends Component {

      unsubscribeTheStore = null;

      componentDidMount() {
        this.unsubscribeTheStore = store.subscribe(this.handleStateChange);
      }

      componentWillUnmount() {
        this.unsubscribeTheStore();
      }

      handleStateChange = () =&amp;gt; {
        this.forceUpdate();
      }

      render() {
        return (
          &amp;lt;WrappedComponent 
            {...this.props}
            {...mapStateToProps(store.getState(), this.props)}
            {...mapDispatchToProps(store.dispatch, this.props)}
          /&amp;gt;
        );
      }
    }
  }
}

export { connectFn };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can import the connectFn and can be used as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export default connectFn(mapStateToProps, mapDispatchToProps)(Counter);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it!!! We built our own connect() function and integrated it with the Redux store.&lt;/p&gt;

&lt;p&gt;Final code in the &lt;a href="https://github.com/itzzmeakhi/blog-code-rep/tree/main/own-connect-fn-final"&gt;Github repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope it's useful&lt;/p&gt;

&lt;p&gt;A ❤️ would be Awesome 😊&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#happycoding"&gt;
  &lt;/a&gt;
  HappyCoding
&lt;/h4&gt;

</description>
      <category>react</category>
      <category>redux</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
