<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The 7 Most Popular DEV Posts from the Past Week</title>
      <author>Jess Lee (she/her)</author>
      <pubDate>Tue, 20 Apr 2021 18:06:50 +0000</pubDate>
      <link>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-16fl</link>
      <guid>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-16fl</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week. ‚ù§Ô∏è&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#save-hours-of-manual-typing"&gt;
  &lt;/a&gt;
  Save hours of manual typing
&lt;/h2&gt;

&lt;p&gt;A super handy list from &lt;a class="mentioned-user" href="https://dev.to/simonpaix"&gt;@simonpaix&lt;/a&gt;
! If you're just starting your coding journey, these tips might just save you a significant amount of time.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/simonpaix" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7wLng5_j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--x2GWJPj---/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/592016/ac52b742-ede9-4335-9692-80b246d53ce7.png" alt="simonpaix image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/simonpaix/10-useful-vs-code-shortcuts-you-should-know-42m" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;10 useful VS Code shortcuts you should know  ()&lt;/h2&gt;
      &lt;h3&gt;Mariana Simon Paixao „Éª Apr 14 „Éª 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#vscode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-only-way-out-is-through"&gt;
  &lt;/a&gt;
  The only way out is through...
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/alexlsalt"&gt;@alexlsalt&lt;/a&gt;
 shows us that we truly have so much to learn &lt;em&gt;from&lt;/em&gt; early-career developers.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/alexlsalt" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mY85lbma--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--rbWwRtco--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/284014/36cbe4fd-2ae3-4651-a2fd-ea65ef3b6cb9.jpg" alt="alexlsalt image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/alexlsalt/10-things-i-ve-learned-after-3-months-as-a-junior-software-engineer-2m89" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;10 Things I've Learned After 3 Months as a Junior Software Engineer&lt;/h2&gt;
      &lt;h3&gt;Alex Morton „Éª Apr 19 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#firstyearincode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#womenintech&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#never-underestimate-the-power-of-simplicity"&gt;
  &lt;/a&gt;
  Never underestimate the power of simplicity
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/commentme"&gt;@commentme&lt;/a&gt;
 shares some examples of the libraries that make Vanilla JS "somewhat impeccable".&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/commentme" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O0ky6rhi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--6NRkV1iH--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/429862/46d4537e-4efc-4333-b743-d0f67136bb57.png" alt="commentme image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/commentme/some-vanilla-js-libraries-you-must-try-17a3" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Some Vanilla JS libraries you must try&lt;/h2&gt;
      &lt;h3&gt;Unnati Bamania „Éª Apr 18 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#rest-for-the-weary"&gt;
  &lt;/a&gt;
  REST for the weary
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/lucasnevespereira"&gt;@lucasnevespereira&lt;/a&gt;
 breaks down the process of writing a REST API using Golang. Best practices, galore!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/lucasnevespereira" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6EtKO_Mv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--WDzM03Oe--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/252716/759d6de0-45ea-4f79-9d8d-312e23b00e58.jpeg" alt="lucasnevespereira image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/lucasnevespereira/write-a-rest-api-in-golang-following-best-practices-pe9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Write a REST API in Golang following best practices&lt;/h2&gt;
      &lt;h3&gt;Lucas Neves Pereira „Éª Apr 13 „Éª 10 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#go&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#postgres&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#docker&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#restapi&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#thisissocool"&gt;
  &lt;/a&gt;
  üëèThisüëèIsüëèSoüëèCool
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/devdevcharlie"&gt;@devdevcharlie&lt;/a&gt;
 thought it would be fun to toggle dark mode on and off by clapping your hands, just like those classic &lt;a href="https://www.youtube.com/watch?v=Ny8-G8EoWOw&amp;amp;ab_channel=JosephEnterprises"&gt;Clapper&lt;/a&gt; commercials. So, they built a way to do just that. What a great idea!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/devdevcharlie" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y3wdbKXy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--SAqR9xjx--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/22924/38d877c9-2f04-4b6e-8d55-b6a9c9f14f3e.jpeg" alt="devdevcharlie image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/devdevcharlie/toggle-dark-light-mode-by-clapping-your-hands-li7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Toggle dark/light mode by clapping your hands&lt;/h2&gt;
      &lt;h3&gt;Charlie Gerard „Éª Apr 14 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#tensorflowjs&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#machinelearning&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#dont-let-js-drive-you-nuts"&gt;
  &lt;/a&gt;
  Don't let JS drive you nuts
&lt;/h2&gt;

&lt;p&gt;As this post explains, JavaScript is accessible for newcomers, and a lot of what you'll use it for doesn't require an in-depth understanding of the mechanics. But this phenomenon can "trap" you if you're not careful. Good looking out, &lt;a class="mentioned-user" href="https://dev.to/jesuisundev"&gt;@jesuisundev&lt;/a&gt;
.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jesuisundev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--57qnjZFZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--iAeIhQmp--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/8016/c141c542-c6eb-4c0b-8224-591bd801277f.jpg" alt="jesuisundev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jesuisundev/javascript-what-i-didn-t-understand-14hl" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Javascript: what I didn't understand&lt;/h2&gt;
      &lt;h3&gt;Mehdi Zed „Éª Apr 17 „Éª 10 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#todayilearned&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#running-your-containerized-workloads-on-aws"&gt;
  &lt;/a&gt;
  Running your containerized workloads on AWS
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/aditmodi"&gt;@aditmodi&lt;/a&gt;
's post compares the three most important ways to run Docker on AWS.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Amazon Elastic Container Service (ECS) with AWS Fargate&lt;/li&gt;
&lt;li&gt;Amazon Elastic Container Service for Kubernetes (EKS)&lt;/li&gt;
&lt;li&gt;AWS Elastic Beanstalk (EB) with Single Container Docker&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Helpful!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/aditmodi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FYJrtrA_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--mUzXbt1U--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/497987/edde8513-7308-4a4d-9592-2be160d074d2.png" alt="aditmodi image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws-builders/introduction-to-containers-with-aws-og4" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Introduction to Containers with AWS&lt;/h2&gt;
      &lt;h3&gt;Adit Modi „Éª Apr 16 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cloud&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>Apple AirTag announced</title>
      <author>Anthony Bouvier</author>
      <pubDate>Tue, 20 Apr 2021 17:54:24 +0000</pubDate>
      <link>https://dev.to/thebouv/apple-airtag-announced-3a04</link>
      <guid>https://dev.to/thebouv/apple-airtag-announced-3a04</guid>
      <description>&lt;p&gt;The AirTag has been &lt;a href="https://www.apple.com/newsroom/2021/04/apple-introduces-airtag/"&gt;announced&lt;/a&gt; by Apple.&lt;/p&gt;

&lt;p&gt;"Apple today introduced AirTag, a small and elegantly designed accessory that helps keep track of and find the items that matter most with Apple‚Äôs Find My app. Whether attached to a handbag, keys, backpack, or other items, AirTag taps into the vast, global Find My network1 and can help locate a lost item, all while keeping location data private and anonymous with end-to-end encryption. AirTag can be purchased in one and four packs for just $29 and $99, respectively, and will be available beginning Friday, April 30. "&lt;/p&gt;

&lt;p&gt;And I think the real key element here is the use of Find My App / Find My Network.&lt;/p&gt;

&lt;p&gt;Apparently this leverages the vast, mostly unknown, network that Apple has where every device from them with Bluetooth on contributes to the Find My network. Meaning, even if you don't own a AirTag, but you happen to have Bluetooth on and are near an AirTag, your phone will send and receive data to share the location with the network.&lt;/p&gt;

&lt;p&gt;No opt-in. No opt-out besides leaving Bluetooth off.&lt;/p&gt;

&lt;p&gt;Though I've definitely been one to lose my keys or backpack and wish I had something like an AirTag or its predecessor called &lt;a href="https://www.thetileapp.com/"&gt;Tile&lt;/a&gt; I am wholly uncomfortable that they are using my device to communicate with other people's devices creating a large mesh network with no knowledge of my participation.&lt;/p&gt;

&lt;p&gt;This is being discussed on Hacker News right now and other sites too. The benefit seems cool and huge, but much like Amazon's announcement several months ago about its &lt;a href="https://www.forbes.com/sites/paullamkin/2020/11/27/what-is-amazon-sidewalk-and-why-is-it-on-your-echo-smart-speaker/?sh=34f46e19acfd"&gt;Sidewalk&lt;/a&gt; feature, I feel like there will be a &lt;a href="https://www.businessinsider.com/amazon-sidewalk-privacy-neighborhood-wifi-networks-us-2020-11?op=1"&gt;backlash&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I'd love to hear what others think because my initial reaction is revulsion. And I'm seeing mixed thoughts on articles concerning it. To me it is without my consent and if it weren't for a single device in my home I use Bluetooth for from my iPhone I would definitely have it turned off all the time.&lt;/p&gt;

&lt;p&gt;Why isn't there active, positive consent to participate in this?&lt;/p&gt;

&lt;p&gt;Why isn't this theft of resources, although minimal, to participate in this?&lt;/p&gt;

&lt;p&gt;Do we really want to participate more in the already egregious tracking done by just participating in having a smart phone?&lt;/p&gt;

</description>
      <category>apple</category>
      <category>iot</category>
      <category>privacy</category>
      <category>ios</category>
    </item>
    <item>
      <title>5 CSS Techniques That I Use The Most..!</title>
      <author>Pawan Bhayde</author>
      <pubDate>Tue, 20 Apr 2021 17:45:07 +0000</pubDate>
      <link>https://dev.to/pawanbhayde/5-css-techniques-that-i-use-the-most-13oa</link>
      <guid>https://dev.to/pawanbhayde/5-css-techniques-that-i-use-the-most-13oa</guid>
      <description>&lt;p&gt;What is up everybody today i have 5 unique css techniques that i use most of the time, some techniques you already know and some don't know hopefully you enjoy's this 5 css techniques.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Centering Div&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KWvPFLnE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lp1njhq4zaqgqvspa9u7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KWvPFLnE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lp1njhq4zaqgqvspa9u7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am talk about centering div most of the new developers didn't know how to center child div&lt;/p&gt;

&lt;p&gt;i have one div in white color and i want to move this div in center of the blue color parent div, How i Do..? Basically we can do this in tow methods &lt;/p&gt;

&lt;p&gt;&lt;em&gt;method 1&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="parent"&amp;gt;
    &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.parent{
    display: grid;
    place-content: center;
    height: 100vh;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;em&gt;method 2&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="parent"&amp;gt;
    &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.parent{
    display:flex;
    text-align: center;
    justify-content: center;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;2. Little Graphics Line On Headline&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u3rlrdBF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bitcc856dhc5z4d7e9xb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u3rlrdBF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bitcc856dhc5z4d7e9xb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lat's talk about this one its not necessary to add this line on your headline but its look batter how we add this?&lt;/p&gt;

&lt;p&gt;This method is helpful you for create this small graphics line&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h1&amp;gt;This Is Heading&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;h1{
    position: relative;
}
h1:before{
    content: "";
    position: absolute;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;its very very handy i use all the time&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Adding ‚Ä¶ when text is too long&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K-C5UCwA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fxxma2ik24xsonivdwgd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K-C5UCwA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fxxma2ik24xsonivdwgd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's look at this in 1st image product title its too lenthy and 2ed image you can see title is absolutely perfect how to fix it using css&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="shopping-item"&amp;gt;
  &amp;lt;img var="img" src="https://i5.walmartimages.com/asr/57f89337-45de-4cd4-9f05-e26a107b2644_1.5db5139ea852e09b168744041199fc59.jpeg?odnHeight=100&amp;amp;amp;odnWidth=100&amp;amp;amp;odnBg=FFFFFF"&amp;gt;
  &amp;lt;div var="title"&amp;gt;Keurig K-Select Single Serve, K-Cup Pod Coffee Maker, Matte White&amp;lt;/div&amp;gt; &amp;lt;i var="price"&amp;gt;$99.00&amp;lt;/i&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.shopping-item {
  width: 300px;
  position: relative;
  background-color: #fff;
  height: 110px;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
  border-radius: 7px;
  margin: 5px;
  box-sizing: border-box;
  padding-left: 110px;
  padding-right: 10px;
  font-family: Arial, sans-serif;
}

.shopping-item&amp;gt;div {
  line-height: 17px;
  font-size: 12px;
  padding-top: 10px;
  color: #017ADB;
  font-weight: bold;
  cursor: pointer;
  max-height: 68px;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

.shopping-item img {
  width: 90px;
  height: 90px;
  position: absolute;
  top: 10px;
  left: 10px;
  border-radius: 3px;
  overflow: hidden;
}

.shopping-item i {
  color: #FFC94A;
  font-style: normal;
  font-size: 14px;
  line-height: 32px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;4. Styling Button&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--edS-vTab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hjax3uwtqva4w5zumpi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--edS-vTab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hjax3uwtqva4w5zumpi.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Styling Button Its Difficult Job for as new developer but its vary easy let's do it&lt;/p&gt;

&lt;p&gt;Buttons are one of the elements which are used over almost every single page. In some cases, they even contain the purpose of the page e.g. buying an item, subscribing to an email list, answering a survey.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button&amp;gt;
Add to Cart
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;button {
  margin: 20px;
  line-height: 50px;
  min-width: 150px;
  text-align: center;
  font-family: Arial, sans-serif;
  background-color: #FD310F;
  border-radius: 5px;
  color: #fff;
  border: 0;
  cursor: pointer;
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
  transition: background-color 0.3s ease-in-out;
}

button:hover {
  background-color: #FE712A;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;5. Tooltips&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W_nBWsDA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0tlajv3kte1567l1seok.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W_nBWsDA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0tlajv3kte1567l1seok.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tooltips is a simple way to giving more info. after they hover it&lt;/p&gt;

&lt;p&gt;its actually goods pretty lets do is fast its very simple one off the biggest issue about tooltips is positioning developer want to resize according to content.So we need something that is flexible and which position it is depending on the position of the element you want to place the tooltip over.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="instagram"&amp;gt;
  &amp;lt;b&amp;gt;
    &amp;lt;svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="heart" class="svg-inline--fa fa-heart fa-w-16" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"&amp;gt;&amp;lt;path fill="currentColor" d="M462.3 62.6C407.5 15.9 326 24.3 275.7 76.2L256 96.5l-19.7-20.3C186.1 24.3 104.5 15.9 49.7 62.6c-62.8 53.6-66.1 149.8-9.9 207.9l193.5 199.8c12.5 12.9 32.8 12.9 45.3 0l193.5-199.8c56.3-58.1 53-154.3-9.8-207.9z"&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;/svg&amp;gt;
    &amp;lt;span class="tooltip"&amp;gt;
      &amp;lt;i&amp;gt;
          &amp;lt;svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="heart" class="svg-inline--fa fa-heart fa-w-16" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"&amp;gt;&amp;lt;path fill="currentColor" d="M462.3 62.6C407.5 15.9 326 24.3 275.7 76.2L256 96.5l-19.7-20.3C186.1 24.3 104.5 15.9 49.7 62.6c-62.8 53.6-66.1 149.8-9.9 207.9l193.5 199.8c12.5 12.9 32.8 12.9 45.3 0l193.5-199.8c56.3-58.1 53-154.3-9.8-207.9z"&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;/svg&amp;gt;30&amp;lt;/i&amp;gt;
    &amp;lt;/span&amp;gt;
  &amp;lt;/b&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;body {
  background-color: #000;
}
.instagram{
  margin-top: 100px;
  height: 50px;
  position: relative;
  border: 1px solid #ccc;
  background-color: #fff;
}
.instagram &amp;gt; b{
  position: absolute;
  left: 75%;
  width: 50px;
  height: 50px;
  display: inline-block;
  top: 0;
  margin-left: -25px;
}
.instagram &amp;gt; b &amp;gt; svg{
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  height: 16px;
}
.instagram &amp;gt; b .tooltip{
  position: absolute;
  left: 50%;
  bottom: 60px;
  line-height: 30px;
  border-radius: 5px;
  padding: 0 5px;
  color: #fff;
  transform:translateX(-50%);
  background-color: #F44456;
  font-size: 12px;
}
.instagram &amp;gt; b .tooltip:after{
  width: 0;
  height: 0;
  display: block;
  content: '';
  bottom: -8px;
  left: 50%;
  position: absolute;
  margin-left: -8px;
  border-left: 8px solid transparent;
  border-right: 8px solid transparent;
  border-top: 8px solid #F44456;
}
.instagram &amp;gt; b .tooltip i{
  padding-left: 24px;
  position: relative;
  display: inline-block;
  font-style: normal;
  padding-right: 5px;
}
.instagram &amp;gt; b .tooltip i svg{
  position: absolute;
  top: 50%;
  left: 12px;
  transform: translate(-50%, -50%);
  height: 16px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Note:- visit my youtube channel for frontend tutorials&lt;br&gt;
&lt;strong&gt;subscribe to my youtube channel :-&lt;/strong&gt; &lt;a href="https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg"&gt;https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resent post :-&lt;/strong&gt; &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/pawanbhayde" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zic_2tNp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--C-k5zhb8--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/616392/67585460-1ef8-429f-9da3-98339a4e0449.jpg" alt="pawanbhayde image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pawanbhayde/react-vs-angular-comparison-which-is-better-for-your-project-in-2021-4o5a" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;React vs Angular comparison: Which is better for your project in 2021?&lt;/h2&gt;
      &lt;h3&gt;Pawan Bhayde „Éª Apr 20 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#angular&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>Fastify and PostgreSQL REST API</title>
      <author>Kenwanjohi</author>
      <pubDate>Tue, 20 Apr 2021 17:23:48 +0000</pubDate>
      <link>https://dev.to/kenwanjohi/fastify-and-postgresql-rest-api-2f9l</link>
      <guid>https://dev.to/kenwanjohi/fastify-and-postgresql-rest-api-2f9l</guid>
      <description>&lt;h2&gt;
  &lt;a href="#enter-the-speed-force"&gt;
  &lt;/a&gt;
  Enter the 'speed force'
&lt;/h2&gt;

&lt;p&gt;From the &lt;a href="https://www.fastify.io/"&gt;documentation&lt;/a&gt;,  fastify is a fast and low overhead web framework for Node.js.&lt;/p&gt;

&lt;p&gt;So, I decided to explore some of the awesome features that fastify offers including but not limited to, speed, extensibility via plugins and decorators, schema validation, and serialization and logging. I dived into their &lt;a href="https://www.fastify.io/docs/latest/"&gt;documentation&lt;/a&gt;, which is excellent by the way, with the help of some GitHub repositories and decided to build some REST API endpoints powered by fastify and a PostgreSQL database.&lt;/p&gt;

&lt;p&gt;You can check out the &lt;a href="https://github.com/Kenwanjohi/fastify"&gt;source code&lt;/a&gt; or follow along in this post.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-the-project"&gt;
  &lt;/a&gt;
  Setting up the project
&lt;/h3&gt;

&lt;p&gt;Navigate to the root folder of your project and run &lt;code&gt;npm init&lt;/code&gt; to initialize your project. Create an &lt;code&gt;src&lt;/code&gt; folder for your project source code and create an &lt;code&gt;index.js&lt;/code&gt; file as the entry point.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-dependencies"&gt;
  &lt;/a&gt;
  Installing dependencies
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Installing nodemon&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/nodemon"&gt;nodemon&lt;/a&gt; is a dev dependency that'll monitor your file changes and restart your server automatically.&lt;/p&gt;

&lt;p&gt;You can install nodemon locally with npm:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install nodemon --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add this npm script to the scripts in the &lt;code&gt;package.json&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"nodemon src/index.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Installing Fastify&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Install with npm:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i fastify --save
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#hello-world-starting-and-running-your-server"&gt;
  &lt;/a&gt;
  Hello World: Starting and running your server
&lt;/h3&gt;

&lt;p&gt;In the &lt;code&gt;index.js&lt;/code&gt; file add this block of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fastify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fastify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)({&lt;/span&gt;&lt;span class="na"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; 
&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
     &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; 
  &lt;span class="p"&gt;})&lt;/span&gt; 
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the first line, we create a fastify instance and enable logging, fastify uses &lt;a href="https://getpino.io/#/"&gt;pino&lt;/a&gt; as its logger. We then define a &lt;code&gt;GET&lt;/code&gt; route method, specify a homepage endpoint &lt;code&gt;'/'&lt;/code&gt; and pass in the route handler function which responds with the object &lt;code&gt;{hello: 'world'}&lt;/code&gt; when we make a get request to the homepage.&lt;/p&gt;

&lt;p&gt;We instantiate our fastify server instance (wrapped in our &lt;code&gt;start&lt;/code&gt; function)¬† and listen for requests on port 3000. To start the server, run &lt;code&gt;npm start&lt;/code&gt; on your terminal in the root folder. You Server should now be running and the following will be logged in the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{"level":30,"time":1618477680757,"pid":5800,"hostname":"x","msg":"Server listening at http://127.0.0.1:3000"}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you visit the homepage you should see the response:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl http://localhost:3000/ 
{"hello":"world"}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great we have our server!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#plugins"&gt;
  &lt;/a&gt;
  Plugins
&lt;/h2&gt;

&lt;p&gt;We can extend fastify's functionality with plugins.&lt;br&gt;
From the documentation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A plugin can be a set of routes, a server¬†decorator,¬†or whatever.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can refactor our route into a plugin and put it in a separate file i.e &lt;code&gt;routes.js&lt;/code&gt;, then require it in our root file and use the &lt;code&gt;register&lt;/code&gt; API to add the route or other plugins.&lt;/p&gt;

&lt;p&gt;Create a &lt;code&gt;routes.js&lt;/code&gt; file and add this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; 
    &lt;span class="p"&gt;})&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then require our module in &lt;code&gt;index.js&lt;/code&gt; and register it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fastify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fastify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)({&lt;/span&gt;&lt;span class="na"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./routes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A request on the homepage should still work. Great, we have our first plugin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-our-database"&gt;
  &lt;/a&gt;
  Creating our database
&lt;/h2&gt;

&lt;p&gt;To create a database we first need to connect to &lt;code&gt;psql&lt;/code&gt;, an interactive terminal for working with Postgres.&lt;/p&gt;

&lt;p&gt;To connect to &lt;code&gt;psql&lt;/code&gt; run the command in the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;psql -h localhost -U postgres
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Enter your password in the prompt to connect to &lt;code&gt;psql&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;CREATE DATABASE databaseName&lt;/code&gt; statement creates a database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;DATABASE&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To connect to the created database run the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To create our table run the statement&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; 
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="n"&gt;UUID&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="nv"&gt;"createdAt"&lt;/span&gt; &lt;span class="nb"&gt;TIMESTAMP&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;important&lt;/span&gt; &lt;span class="nb"&gt;BOOLEAN&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="nv"&gt;"dueDate"&lt;/span&gt; &lt;span class="nb"&gt;TIMESTAMP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;done&lt;/span&gt; &lt;span class="nb"&gt;BOOLEAN&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; 
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#connecting-our%C2%A0-database"&gt;
  &lt;/a&gt;
  Connecting our¬† database
&lt;/h2&gt;

&lt;p&gt;To interface with postgreSQL database we need &lt;a href="https://node-postgres.com/"&gt;node-postgres&lt;/a&gt; or the &lt;code&gt;pg&lt;/code&gt; driver.&lt;/p&gt;

&lt;p&gt;To install &lt;code&gt;node-postgres&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install pg
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Database connection plugin&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's create a plugin to connect to our database. Create a &lt;code&gt;db.js&lt;/code&gt; file and add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fastifyPlugin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fastify-plugin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; 
    &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;postgres&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PASSWORD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;localhost&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5432&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="na"&gt;database&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DATABASE&lt;/span&gt; 
&lt;span class="p"&gt;})&lt;/span&gt; 
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;dbconnector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;db connected succesfully&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;decorate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;db&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fastifyPlugin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dbconnector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's skip the &lt;code&gt;fastifyPlugin&lt;/code&gt; part first.&lt;/p&gt;

&lt;p&gt;We require &lt;code&gt;Client&lt;/code&gt; module from &lt;code&gt;node-postgres&lt;/code&gt; and create a &lt;code&gt;client&lt;/code&gt; instance, passing in the object with the various fields.&lt;/p&gt;

&lt;p&gt;Make sure to create a &lt;code&gt;.env&lt;/code&gt; file and add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PASSWORD='yourpassword'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install and require the &lt;code&gt;dotenv&lt;/code&gt; module to load the environment variables&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then create our &lt;code&gt;dbconnector&lt;/code&gt; plugin and inside the try block, we connect to our postgres database.&lt;/p&gt;

&lt;p&gt;Inside the block you can also see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;decorate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;db&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;What is the decorate function?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In fastify, to add functionality to the fastify instance, you use &lt;a href="https://www.fastify.io/docs/latest/Decorators/"&gt;decorators&lt;/a&gt;. We use the &lt;code&gt;decorate&lt;/code&gt; API, pass the property name &lt;code&gt;'db'&lt;/code&gt; as the first argument and the value of our &lt;code&gt;client&lt;/code&gt; instance (&lt;code&gt;{client}&lt;/code&gt;) as the second argument. The value could also be a function or a string.&lt;br&gt;
We export the plugin wrapped in a &lt;code&gt;fastifyPlugin&lt;/code&gt; module.&lt;/p&gt;

&lt;p&gt;Require the module in the &lt;code&gt;index.js&lt;/code&gt; file and register it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dbconnector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./db&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dbconnector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now access our client instance in other parts of the application for instance in our routes to query data using¬† &lt;code&gt;fastify.db.client&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's take a step back to the &lt;code&gt;fastifyPlugin&lt;/code&gt; module. Why wrap our plugin with fastifyPlugin? When we register a plugin, we create a fastify context (encapsulation), which means access to the data outside our registered plugin is restricted. In this case, we can't access our database &lt;code&gt;client&lt;/code&gt; instance using &lt;code&gt;fastify.db.client&lt;/code&gt; anywhere in our application.&lt;/p&gt;

&lt;p&gt;To share context, we wrap our plugin in a &lt;code&gt;fastifyPlugin&lt;/code&gt; module. We can now access our database &lt;code&gt;client&lt;/code&gt; instance anywhere in our application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serialization"&gt;
  &lt;/a&gt;
  Serialization
&lt;/h2&gt;

&lt;p&gt;Lets refactor our homepage route to return information from our database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="c1"&gt;//Access our client instance value from our decorator&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;
    &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;allTodos&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
                &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SELECT * FROM todos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
                &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
                &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
            &lt;span class="p"&gt;}&lt;/span&gt; 
        &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We First access our database &lt;code&gt;client&lt;/code&gt; instance and assign it to a &lt;code&gt;client&lt;/code&gt; variable.&lt;br&gt;
Inside our routes we query all columns from our database using the shorthand &lt;code&gt;*&lt;/code&gt; and send the returned todos using &lt;code&gt;reply.send(rows)&lt;/code&gt; - you could also use &lt;code&gt;return rows&lt;/code&gt;.&lt;br&gt;
Make sure you add some todos in your database first in the &lt;code&gt;psql&lt;/code&gt; terminal i.e:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;"createdAt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;important&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;"dueDate"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'54e694ce-6003-46e6-9cfd-b1cf0fe9d332'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'learn fastify'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'2021-04-20T12:39:25Z'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'2021-04-22T15:22:20Z'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;todos&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;"createdAt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;important&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;"dueDate"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'d595655e-9691-4d1a-9a6b-9fbba046ae36'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'learn REST APIs'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'2021-04-18T07:24:07Z'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If an error occurs, trying to query our database, we throw the error.&lt;/p&gt;

&lt;p&gt;When you look closer at our get route method, you can see have an object as our second argument with a &lt;code&gt;schema&lt;/code&gt; key and &lt;code&gt;allTodos&lt;/code&gt; as the value.&lt;/p&gt;

&lt;p&gt;Fastify uses¬† &lt;a href="https://www.npmjs.com/package/fast-json-stringify"&gt;fast-json-stringify&lt;/a&gt; to serialize your response body when a schema is provided in the route options.&lt;/p&gt;

&lt;p&gt;To add the schema create a &lt;code&gt;schemas.js&lt;/code&gt; file and add the &lt;code&gt;allTodos schema&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;array&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;createdAt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;important&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dueDate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;done&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;uuid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;                                                              
                    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;                                           
                    &lt;span class="na"&gt;createdAt&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;date-time&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;                  
                    &lt;span class="na"&gt;important&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;boolean&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                    &lt;span class="na"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;date-time&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                    &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;boolean&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fastify recommends using &lt;a href="https://json-schema.org/"&gt;JSON Schema&lt;/a&gt; to serialize your outputs, you can read how to write JSON schema &lt;a href="https://json-schema.org/understanding-json-schema/index.html"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;We're specifying the &lt;code&gt;response&lt;/code&gt;, the response &lt;code&gt;status code&lt;/code&gt;, and the entity which is an &lt;code&gt;array&lt;/code&gt; type. The &lt;code&gt;items&lt;/code&gt; specify each entry in the array as an object with the required keys and the properties with the various fields and types.&lt;/p&gt;

&lt;p&gt;Remember to require the module in the &lt;code&gt;routes.js&lt;/code&gt; file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#validation"&gt;
  &lt;/a&gt;
  Validation
&lt;/h2&gt;

&lt;p&gt;In the &lt;code&gt;routes.js&lt;/code&gt; file, let's add a &lt;code&gt;POST&lt;/code&gt; method route inside our route plugin to add todos to our database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;addTodo&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;important&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;uuidv4&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
            &lt;span class="nx"&gt;createdAt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`INSERT INTO todos (id, name, "createdAt", important, "dueDate", done)
                                    VALUES($1, $2, $3, $4, $5, $6 ) RETURNING *`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createdAt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;important&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                    &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;created&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We allow the client to send a JSON object in the body with &lt;code&gt;name&lt;/code&gt; of the todo, &lt;code&gt;important&lt;/code&gt;, and &lt;code&gt;dueDate&lt;/code&gt; properties.&lt;/p&gt;

&lt;p&gt;We then generate a unique &lt;code&gt;id&lt;/code&gt;, assign false to &lt;code&gt;done&lt;/code&gt; and a timestamp assigned to &lt;code&gt;createdAt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To generate the unique id install &lt;code&gt;uuid&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install uuid
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Require the module in the &lt;code&gt;routes.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;v4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;uuidv4&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;uuid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then construct a query object with a &lt;code&gt;text&lt;/code&gt; property with the SQL statement to insert the todos in the database and the &lt;code&gt;values&lt;/code&gt; property containing the values to be inserted into the respective columns.&lt;/p&gt;

&lt;p&gt;After a successful insert we send a &lt;code&gt;201 Created&lt;/code&gt; status code back to the client.&lt;br&gt;
In the &lt;code&gt;schemas.js&lt;/code&gt; file, let's add the validation schema for our todos:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,},&lt;/span&gt;
            &lt;span class="na"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;date-time&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;nullable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;important&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;boolean&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;created&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;boolean&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fastify uses &lt;a href="https://ajv.js.org/"&gt;Ajv&lt;/a&gt; to validate requests.&lt;br&gt;
We expect the client to always send the &lt;code&gt;name&lt;/code&gt; of the todo by adding it in the required property array.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;dueDate&lt;/code&gt; property can be omitted by the client whereby it will be &lt;code&gt;null&lt;/code&gt; by default. This is made possible by setting the &lt;code&gt;nullable&lt;/code&gt; property to &lt;code&gt;true&lt;/code&gt; which allows a data instance to be JSON null. When provided it has to be of the format 'date-time'.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;client&lt;/code&gt; can optionally indicate whether a todo is important or it falls back to the default.&lt;/p&gt;

&lt;p&gt;If the above conditions are not satisfied, fastify will automatically send an error object with the error message.&lt;/p&gt;

&lt;p&gt;For instance, if you omit a name, you should see an error like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"statusCode"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Bad Request"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"body should have required property 'name'"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! Our validation is working&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-other-rest-endpoints"&gt;
  &lt;/a&gt;
  Adding other REST endpoints
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Update todo&lt;/strong&gt;&lt;br&gt;
Let's allow users to set their todo as done or importance of the todo or change dueDate. To do that let's add a &lt;code&gt;PATCH&lt;/code&gt; method route to our routes plugin.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;&lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;updateTodo&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;important&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="s2"&gt;`UPDATE todos SET 
                                important = COALESCE($1, important), 
                                "dueDate" = COALESCE($2, "dueDate"), 
                                done = COALESCE($3, done) 
                                WHERE id = $4 RETURNING *`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;values&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;important&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;204&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're extracting the &lt;code&gt;id&lt;/code&gt; of the todo we want to update from the parameter and the values from the request body.&lt;/p&gt;

&lt;p&gt;We then create our query statement, updating the columns provided optionally using the &lt;code&gt;COALESCE&lt;/code&gt; function. That is, if the clients omit some properties in the JSON body, we update only the provided properties and leave the rest as they are in the todo row.&lt;/p&gt;

&lt;p&gt;We then respond with a &lt;code&gt;204 No Content&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Lets add a  validation schema for our route:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;date-time&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;important&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;boolean&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;boolean&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;uuid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;params validates the params object.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Delete todo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To delete a todo, we just need the &lt;code&gt;id&lt;/code&gt; sent in the URL parameter.&lt;br&gt;
Add a &lt;code&gt;DELETE&lt;/code&gt; method route:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;deleteTodo&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DELETE FROM todos
                    WHERE id = $1 RETURNING *&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                    &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;204&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lets add a  validation schema for our &lt;code&gt;DELETE&lt;/code&gt; route:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deleteTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;uuid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;Give fastify a try and "take your HTTP server to ludicrous speed" ~ &lt;a href="https://twitter.com/matteocollina"&gt;Matteo Collina&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can check out the project source code &lt;a href="https://github.com/Kenwanjohi"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.fastify.io/docs/latest/"&gt;Fastify Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://json-schema.org/understanding-json-schema/index.html"&gt;Understanding JSON schema&lt;/a&gt;
### Fastify examples; GitHub repos:&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/delvedor/fastify-example"&gt;fastify-example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fastify/fastify-example-todo"&gt;fastify-example-todo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>postgres</category>
    </item>
    <item>
      <title>New Bash Alias: Git Out</title>
      <author>Parth Agarwal</author>
      <pubDate>Tue, 20 Apr 2021 16:59:55 +0000</pubDate>
      <link>https://dev.to/ra101/new-bash-alias-git-out-2603</link>
      <guid>https://dev.to/ra101/new-bash-alias-git-out-2603</guid>
      <description>&lt;p&gt;Up until now, we only had &lt;code&gt;git commit&lt;/code&gt; and &lt;code&gt;git push&lt;/code&gt;. But what about &lt;code&gt;git out&lt;/code&gt;? If you know what it feels like to be left out, you should empathize with this command. Even though it is a part of this legendary trio, it is never actually used.&lt;/p&gt;

&lt;p&gt;But not today, Not anymore!&lt;br&gt;
Let's right the wrongs of this society!&lt;br&gt;
So, if you are with me!&lt;/p&gt;

&lt;p&gt;Open Your &lt;code&gt;.bashrc&lt;/code&gt; File!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nano ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;Add This Line! &amp;amp; Save it! (ctrl+x, y, return)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"out"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then &lt;/span&gt;&lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="s2"&gt;"exit"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;else &lt;/span&gt;&lt;span class="nb"&gt;command &lt;/span&gt;git &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;fi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;And Finally! Source it!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;source&lt;/span&gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Good job! Be Proud! Because of you, there is one less lonely command!&lt;/p&gt;

&lt;p&gt;PS: Feel free to share any meme command out there.&lt;/p&gt;

</description>
      <category>git</category>
      <category>bash</category>
      <category>github</category>
    </item>
    <item>
      <title>Ruby Tutorial for Python Programmers: how to make the switch</title>
      <author>Amanda Fawcett</author>
      <pubDate>Tue, 20 Apr 2021 16:52:40 +0000</pubDate>
      <link>https://dev.to/educative/ruby-tutorial-for-python-programmers-how-to-make-the-switch-305n</link>
      <guid>https://dev.to/educative/ruby-tutorial-for-python-programmers-how-to-make-the-switch-305n</guid>
      <description>&lt;p&gt;Ruby is a general-purpose, dynamic, open source programming language that focuses on &lt;strong&gt;simplicity and productivity&lt;/strong&gt;. The Ruby programming language is frequently compared to Python for their similarities. Many developers say that learning Ruby is easier if you know Python due to their similarities. However, these two languages differ in major ways.&lt;/p&gt;

&lt;p&gt;We've created this basic introduction to help you make the transition from Python to Ruby. We'll go over their main differences and then take a dive into Ruby's syntax so you can get hands-on with Ruby code quickly. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here's what we'll cover today:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#vs"&gt;Ruby vs Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#differences"&gt;Summary of Main Code Differences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hello"&gt;Hello World with Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#syntax"&gt;Ruby Syntax Quick Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#next"&gt;What to learn next with Ruby&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ruby-vs-python"&gt;
  &lt;/a&gt;
  Ruby vs Python
&lt;/h2&gt;

&lt;p&gt;Ruby and Python are both popular programming languages known for their speed, simplicity, and user-friendly syntax. Both languages are flexible, object-oriented , dynamic, and have a lot of useful frameworks and libraries to use, particularly for web applications and web development &lt;em&gt;(&lt;a href="https://www.educative.io/blog/ruby-on-rails"&gt;Ruby on Rails&lt;/a&gt; for Ruby or &lt;a href="https://www.educative.io/blog"&gt;Django&lt;/a&gt; for Python)&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ruby&lt;/strong&gt; is a high-level, interpreted programming language, created in 1995 by Yukihiro Matsumoto. His goal was to make an object-oriented scripting language that improved on other scripting languages of the time. &lt;/p&gt;

&lt;p&gt;Ruby also allows for &lt;a href="https://www.educative.io/blog/what-is-functional-programming-python-js-java"&gt;functional programming&lt;/a&gt; and is known for being very similar to written human languages, making it easy to learn.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt; is an interpreted, high-level general-purpose language, created by Guido van Rossum with the goal of code readability. Python is know well-loved for its robust standard library.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Ruby&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;No primitive data types. Everything is an object.&lt;/td&gt;
&lt;td&gt;Has primitive types and objects&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mixins can be used&lt;/td&gt;
&lt;td&gt;Mixins cannot be used&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Less available functions. Relies mostly on methods.&lt;/td&gt;
&lt;td&gt;Lots of available functions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cannot modify built-in classes&lt;/td&gt;
&lt;td&gt;Can modify built-in classes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Supports Tuples with Rinda. Other collections include Arrays, Hash, Set, and Struct.&lt;/td&gt;
&lt;td&gt;Supports Tuples, Sets, Dictionary (Hash), and Lists&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Iterators less common&lt;/td&gt;
&lt;td&gt;Iterators are very common&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#career"&gt;
  &lt;/a&gt;
  Career
&lt;/h4&gt;

&lt;p&gt;Both languages are used by big companies. Companies that use Python include YouTube, Instagram, Spotify, Reddit, Dropbox, while Ruby is used at Hulu, Basecamp, GitHub, and Airbnb. Ruby developers also tend to make higher salaries than Python developers. StackOverflow's 2020 survey lists Ruby's global average salary at $71k and Python's at $59k. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Both Ruby and Python offer higher annual salaries than other software development languages, including PHP, JavaScript, and Java.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#machine-learning"&gt;
  &lt;/a&gt;
  Machine Learning
&lt;/h4&gt;

&lt;p&gt;Python is currently the go-to language for machine learning (ML) and artificial intelligence (AI) due to its extensive libraries and visualization tools. Ruby does offer some competitive options, but there is a long way to go before it will hold a torch to Python. So, if you are looking to work in data science, Python is the winner.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#web-frameworks"&gt;
  &lt;/a&gt;
  Web Frameworks
&lt;/h4&gt;

&lt;p&gt;The main web frameworks for both Ruby and Python, Django and Ruby on Rails, are rather similar. Both are based on the classic &lt;a href="https://www.educative.io/blog/mvc-tutorial"&gt;model-view-controller (MVC)&lt;/a&gt; pattern, and they both provide similar  repositories (PyPi for Python and RubyGems for Ruby). Both frameworks perform well and are easy to learn.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#testing-environment"&gt;
  &lt;/a&gt;
  Testing Environment
&lt;/h4&gt;

&lt;p&gt;Test-driven development (TDD) is pretty standard for both Ruby and Python, but Ruby does offer &lt;strong&gt;behavior-driven development (BDD)&lt;/strong&gt; while Python does not, which may be useful in some cases&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#community"&gt;
  &lt;/a&gt;
  Community
&lt;/h4&gt;

&lt;p&gt;Both languages have large, active communities, which Python's community being a bit larger, namely because Ruby is most popular for its development tool Ruby on Rails. Both communities seem to be equally active and supportive. &lt;/p&gt;

&lt;p&gt;One benefit to Ruby is that there are unique Ruby forums and job boards since the language is more specialized in some regards.&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary-of-main-code-differences"&gt;
  &lt;/a&gt;
  Summary of Main Code Differences
&lt;/h2&gt;

&lt;p&gt;Now that we understand the difference between Ruby and Python at a high level, let's dive into the main code differences between the two. We've compiled the main things that differ from Python below. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In the Ruby programming language:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Strings are mutable&lt;/li&gt;
&lt;li&gt;You can make constants &lt;/li&gt;
&lt;li&gt;Parentheses for most method calls are optional&lt;/li&gt;
&lt;li&gt;There‚Äôs only one mutable list container (Array)&lt;/li&gt;
&lt;li&gt;There are no ‚Äúnew style‚Äù or ‚Äúold style‚Äù classes &lt;/li&gt;
&lt;li&gt;Only &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;nil&lt;/code&gt; evaluate to false, and everything else is &lt;code&gt;true&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;You never directly access attributes. Instead, we use method calls.&lt;/li&gt;
&lt;li&gt;We use &lt;code&gt;elsif&lt;/code&gt; instead of &lt;code&gt;elif&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;We use &lt;code&gt;require&lt;/code&gt; instead of &lt;code&gt;import&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;We use mixins instead of multiple inheritance&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;yield&lt;/code&gt; executes another function that is passed as the final argument, then it resumes&lt;/li&gt;
&lt;li&gt;We use &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;private&lt;/code&gt;, and &lt;code&gt;protected&lt;/code&gt; for access &lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hello-world-with-ruby"&gt;
  &lt;/a&gt;
  Hello World with Ruby
&lt;/h2&gt;

&lt;p&gt;Now that we understand how Ruby and Python differ at the code level, let's look at some actual Ruby code, starting with the classic Hello World program.  Take a look below and note how simply Ruby's syntax is here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Hello World!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, the &lt;code&gt;puts&lt;/code&gt; keyword is used to print. Remember: Ruby's code is very readable, designed to emulate spoken English language. &lt;/p&gt;

&lt;p&gt;There's even a simpler way to do this. Ruby comes with a built-in program that will show the results of any statements you feed it, called &lt;strong&gt;Interactive Ruby (IRB)&lt;/strong&gt;. This is the best way to learn Ruby. First, open IRB:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;macOS:&lt;/strong&gt; open Terminal and type &lt;code&gt;irb&lt;/code&gt;. Hit enter.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Linux:&lt;/strong&gt; open up a shel, type &lt;code&gt;irb&lt;/code&gt;, and hit enter.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Windows:&lt;/strong&gt; open Interactive Ruby from the Start Menu (see the Ruby section)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="s2"&gt;"Hello World"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will get the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;001&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"Hello World"&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"Hello World"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The second line tells us the result of the last expression. We can print this using the &lt;code&gt;puts&lt;/code&gt; command we learned before.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;002&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Hello World"&lt;/span&gt;
&lt;span class="no"&gt;Hello&lt;/span&gt; &lt;span class="no"&gt;World&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here,  &lt;code&gt;=&amp;gt; nil&lt;/code&gt; is the result of the expression, since &lt;code&gt;puts&lt;/code&gt; always returns &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ruby-syntax-quick-guide"&gt;
  &lt;/a&gt;
  Ruby Syntax Quick Guide
&lt;/h2&gt;

&lt;p&gt;Let's now quickly go over the basics of Ruby's syntax that may be different from what you're used to in Python. Note how Ruby differs and how it is similar as you read.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#variable-assignment"&gt;
  &lt;/a&gt;
  Variable Assignment
&lt;/h3&gt;

&lt;p&gt;In Ruby, you assign a name to a variable using the assignment operator &lt;code&gt;=&lt;/code&gt;, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is a list of the different kinds of variables in Ruby:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Local variables (&lt;code&gt;something&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Instance variables (&lt;code&gt;@something&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Constants (&lt;code&gt;Something&lt;/code&gt; or &lt;code&gt;SOMETHING&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Global variables (&lt;code&gt;$something&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;



&lt;h3&gt;
  &lt;a href="#identifiers-and-keywords"&gt;
  &lt;/a&gt;
  Identifiers and Keywords
&lt;/h3&gt;

&lt;p&gt;Keywords and identifiers are similar to Python. Identifiers are case sensitive, and they may consist of alphanumeric characters and underscore &lt;code&gt;_&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ruby's reserved keywords include the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zcAna9lU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yeeemt0x8roiywvf03u6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zcAna9lU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yeeemt0x8roiywvf03u6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#strings"&gt;
  &lt;/a&gt;
  Strings
&lt;/h3&gt;

&lt;p&gt;In Ruby, a string is a sequence of characters inside quotation marks &lt;code&gt;" "&lt;/code&gt;. We can also use single quotation marks. &lt;/p&gt;

&lt;p&gt;You can concatenate strings with the plus sign &lt;code&gt;+&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"snow"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"ball"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; snowball&lt;/p&gt;

&lt;p&gt;In Ruby, multiplying a String by a number will repeat a String that many times.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Ruby"&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; RubyRubyRuby&lt;/p&gt;

&lt;p&gt;Some important methods for Ruby strings include: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;size&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;empty?&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;include?&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gsub&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;split&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Pro Tip:&lt;/strong&gt; Ruby's percentage sign &lt;code&gt;%&lt;/code&gt; shortcut can be used with strings and arrays&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;%w&lt;/code&gt; will create an array of strings&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;%i&lt;/code&gt; with create an array of symbols&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;%q&lt;/code&gt; will create a string without quotation marks&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;



&lt;h3&gt;
  &lt;a href="#hashes"&gt;
  &lt;/a&gt;
  Hashes
&lt;/h3&gt;

&lt;p&gt;In Ruby, you can create a Hash by assigning a key to a value with &lt;code&gt;=&amp;gt;&lt;/code&gt;. We separate these key/value pairs with commas and enclose the whole thing with curly braces.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;"one"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"eins"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"two"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"zwei"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"three"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"drei"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This defines a Hash with three key/value pairs, so we can look up three values (the strings &lt;code&gt;"eins"&lt;/code&gt;, &lt;code&gt;"zwei"&lt;/code&gt;, and &lt;code&gt;"drei"&lt;/code&gt;) using three different keys (the strings &lt;code&gt;"one"&lt;/code&gt;, &lt;code&gt;"two"&lt;/code&gt;, and &lt;code&gt;"three"&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Some important methods for Ruby hashes include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;key?&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;merge&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;new&lt;/code&gt; &lt;em&gt;(for default values)&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;



&lt;h3&gt;
  &lt;a href="#array"&gt;
  &lt;/a&gt;
  Array
&lt;/h3&gt;

&lt;p&gt;In Ruby, we create an Array by separating values with commas and enclosing this list with square brackets, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Ruby Arrays always keep their order&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Like in Python, there are all sorts of things you can do with Arrays. The most important methods being:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;size&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;empty?&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;push&lt;/code&gt; / &lt;code&gt;pop&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;join&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flatten&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is an example of the intersection operator &lt;code&gt;&amp;amp;&lt;/code&gt;, which finds the intersecting parts of our arrays:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; 2 3&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#parenthesis"&gt;
  &lt;/a&gt;
  Parenthesis
&lt;/h3&gt;

&lt;p&gt;In Ruby, parenthesis and semicolons are not required, but we can use them. However, we follow these basic rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do use parenthesis with method arguments: &lt;code&gt;def foo(a, b, c)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Do use parenthesis to change the priority of an operation: &lt;code&gt;(a.size + b.size) * 2&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Don't use parenthesis when defining a method that has no arguments: &lt;code&gt;def foo&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;



&lt;h4&gt;
  &lt;a href="#commenting"&gt;
  &lt;/a&gt;
  Commenting
&lt;/h4&gt;

&lt;p&gt;There are three main ways we can add comments to a Ruby program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Single line comment&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Multiple&lt;/span&gt;
&lt;span class="c1"&gt;# Lines&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="cm"&gt;=begin
Block fashion
Commenting
=end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#methods"&gt;
  &lt;/a&gt;
  Methods
&lt;/h3&gt;

&lt;p&gt;In Ruby, we define methods using the &lt;code&gt;def&lt;/code&gt; keyword followed by &lt;code&gt;method_name&lt;/code&gt;. IT ends with the &lt;code&gt;end&lt;/code&gt; keyword.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method_name&lt;/span&gt;
&lt;span class="c1"&gt;# Statement &lt;/span&gt;
&lt;span class="c1"&gt;# Statement &lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nf"&gt;.&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We pass parameters to our methods in parentheses.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Statement &lt;/span&gt;
&lt;span class="c1"&gt;# Statement &lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nf"&gt;.&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#classes"&gt;
  &lt;/a&gt;
  Classes
&lt;/h3&gt;

&lt;p&gt;In Ruby, we create classes using the &lt;code&gt;class&lt;/code&gt; keyword followed by the name of the class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Class_name&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The first letter of your class names should be a capital letter.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In Ruby, objects are created with the &lt;code&gt;new&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;object_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Class_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#conditionals"&gt;
  &lt;/a&gt;
  Conditionals
&lt;/h3&gt;

&lt;p&gt;Conditional statements are similar to most other languages with a few slight differences. Take a look at the examples below to get at sense of how they look in Ruby.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;between?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"The number is between 1 and 10"&lt;/span&gt;
&lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;between?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"The number is between 11 and 20"&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"The number is bigger than 20"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; The number is between 1 and 10&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;elsif&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; statements are optional. You can have an &lt;code&gt;if&lt;/code&gt; statement without &lt;code&gt;elsif&lt;/code&gt; or &lt;code&gt;else&lt;/code&gt; branches, an &lt;code&gt;if&lt;/code&gt; statement only with an &lt;code&gt;else&lt;/code&gt;, or you could have an &lt;code&gt;if&lt;/code&gt; statement with one or more &lt;code&gt;elsif&lt;/code&gt; statements. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ruby also has a shorthand for working with conditional statements. So, we could write this bit of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;odd?&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"The number is odd."&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As this instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"The number is odd."&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;odd?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-learn-next-with-ruby"&gt;
  &lt;/a&gt;
  What to learn next with Ruby
&lt;/h2&gt;

&lt;p&gt;Now that you know the basics of Ruby and know how it differs from Python, you're ready to cover more advanced topics. We recommended studying the following concepts next:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ruby inheritance&lt;/li&gt;
&lt;li&gt;Using Ruby libraries&lt;/li&gt;
&lt;li&gt;Nested arrays &lt;/li&gt;
&lt;li&gt;Ruby blocks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get started with these concepts and get hands-on with Ruby, check out Educative's course &lt;strong&gt;&lt;a href="https://www.educative.io/courses/learn-ruby-from-scratch"&gt;Learn Ruby from Scratch.&lt;/a&gt;&lt;/strong&gt; This introductory course offers tons of hands-on practice on all the need-to-know topics, including variables, built-in classes, objects, conditionals, blocks and much more!&lt;/p&gt;

&lt;p&gt;By the end, you'll be a confident Ruby developer, ready to take on complex projects!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy learning!&lt;/em&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#continue-reading-about-ruby"&gt;
  &lt;/a&gt;
  Continue reading about Ruby
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/ruby-best-practices"&gt;8 tricks and best practices for improving your Ruby code
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/ruby-on-rails"&gt;Getting Started with Ruby on Rails: build a web app with Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/docker-with-rails"&gt;Docker with Rails: Benefits and Top Use Cases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>ruby</category>
      <category>python</category>
      <category>languages</category>
      <category>functional</category>
    </item>
    <item>
      <title>Background Music for Coding for Every Tasteüé∂</title>
      <author>Anastasia üèÑüèª‚Äç‚ôÄÔ∏è</author>
      <pubDate>Tue, 20 Apr 2021 16:24:04 +0000</pubDate>
      <link>https://dev.to/coffeestasia/background-music-for-coding-for-every-taste-2oo6</link>
      <guid>https://dev.to/coffeestasia/background-music-for-coding-for-every-taste-2oo6</guid>
      <description>&lt;p&gt;The right background music can boost our concentration. But chill and lo-fi beats won‚Äôt satisfy every taste. What makes this music playlist compilation unique is that I‚Äôll share my favorite playlists of epic, Celtic, hard rock, metal and electronicore music. Put your handphones on and explore.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lofi-and-triphop-beats"&gt;
  &lt;/a&gt;
  Lo-Fi and Trip-Hop Beats
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#freecodecamp-247-radio"&gt;
  &lt;/a&gt;
  &lt;a href="https://coderadio.freecodecamp.org/"&gt;freeCodeCamp 24/7 Radio&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b3wCkCFr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/875/1%2A0Wn9pWCEQl1ZRZo7c4fS6w.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b3wCkCFr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/875/1%2A0Wn9pWCEQl1ZRZo7c4fS6w.jpeg" alt="freecodecamp radio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;freeCodeCamp is one of the largest developer communities that offers free coding courses with certifications. Beyond that, it has its own 24/7 music stream without ads. You are most likely to hear low-fi and trip-how tunes that create the right rhythm to catch the flow state.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lofi-hip-hop-radio-beats-to-relaxstudy-to"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=5qap5aO4i9A"&gt;lofi hip hop radio ‚Äî beats to relax/study to&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/5qap5aO4i9A"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This 24/7 YouTube radio has 8,2 million subscribers and most of us came across this girl from the video at least once. Reddit users even launched &lt;a href="https://www.reddit.com/r/LofiGirl/"&gt;‚ÄòLo-fi girl challenge‚Äô&lt;/a&gt; that prompted Reddit‚Äôs best anime artists to draw her in their own style or country. Back to the topic, this radio broadcasts lo-fi music that is both stress-relieving and focus-sharpening.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#chillhop-music"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/channel/UCOxqgCwgOqC2lMqC5PYz_Dg"&gt;Chillhop Music&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/iEGFFyv0MH4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you feel tired of wondering how soon the Lo-Fi girl will finish her homework, you can listen to the lo-fi sounds on the second popular YouTube lo-fi and chill beats channel. Listen to the curated jazzy and chill music on YouTube or &lt;a href="https://open.spotify.com/user/chillhopmusic"&gt;Spotify&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#epic-instrumental-music"&gt;
  &lt;/a&gt;
  Epic Instrumental Music
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#there-is-a-hero-in-us-epic-music-mix"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=gbVpNqiR0YA&amp;amp;t=104s"&gt;THERE IS A HERO IN US | Epic Music Mix&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/gbVpNqiR0YA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This playlist is meant for epic music lovers who like Thomas Bergersen, Two Steps From Hell and other soundtrack music that gives you the shudders and makes you feel like a savior of the world. It has no ads, so nothing will disturb your heroic coding quest.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4hours-epic-celtic-mix-worlds-most-powerful-amp-beautiful-music-adrian-von-ziegler"&gt;
  &lt;/a&gt;
  &lt;a href="https://youtu.be/80du9gScaqw"&gt;4-Hours Epic Celtic Mix | World‚Äôs Most Powerful &amp;amp; Beautiful Music (Adrian von Ziegler)&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/80du9gScaqw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This playlist combines 4 hours of beautiful Celtic music that reminds me of the TES V: Skyrim soundtrack and its tavern music. Have you ever practiced coding listening to medieval vibes? It‚Äôs a sign from Talos.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fantasy-bardtavern-music-compilation"&gt;
  &lt;/a&gt;
  &lt;a href="https://youtu.be/wLlovxa3VJ0"&gt;Fantasy Bard/Tavern Music Compilation&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/wLlovxa3VJ0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This playlist is a compilation of medieval fantasy bard and tavern music with lyrics(!) from Dragon Age, WoW, The TES series, The Witcher games and more. Greetings, coding traveler, have a seat around the fire.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#hard-rock-metal-and-electronicore-playlists"&gt;
  &lt;/a&gt;
  Hard Rock, Metal and Electronicore Playlists
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#ultimate-hard-rockmetal-mix-playlist"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=htCcgpisgtk&amp;amp;t=141s"&gt;Ultimate Hard Rock/Metal Mix Playlist&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/htCcgpisgtk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Now you know that you grew your hair out for a reason. Melodic guitar riffs without vocals for a kick-ass coding session. Please, be aware that this video has ads (use AdBlock for uninterrupted experience).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ultimate-heavy-metal-hard-rock-step-unthinking-songs-for-work-gym-study"&gt;
  &lt;/a&gt;
  &lt;a href="https://youtu.be/Lmp2zJ7UNPM"&gt;Ultimate Heavy Metal Hard Rock Step Unthinking Songs For Work, Gym, Study&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Lmp2zJ7UNPM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Now everyone listens to lo-fi and trip-hop tunes in the background. If you want to get energized and rock through the day, you‚Äôll enjoy this heavy metal playlist without ads and lyrics. Headbang your coding!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aggressive-music-mix-electronicore-metalstep-industrial"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=E5Fpuw5BeBE&amp;amp;t=29s"&gt;Aggressive Music Mix | Electronicore, Metalstep, Industrial&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/E5Fpuw5BeBE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Celldweller and industrial music lovers will enjoy this one. Think of it as metal and dubstep in a single music genre. Be ready for ads ‚Äî download an AdBlocker extension.&lt;/p&gt;




&lt;p&gt;If I overlooked one of your favorite genres of background music ‚Äî please, leave your request in the comments and I‚Äôll add the music to the list. I‚Äôm also curious about your favorite groups, artists, sources of background music for coding ‚Äî you are also welcome to share these.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>100daysofcode</category>
      <category>webdev</category>
      <category>career</category>
    </item>
    <item>
      <title>Skyhook: a Redis-compatible interface to Aerospike Database</title>
      <author>Eugene R.</author>
      <pubDate>Tue, 20 Apr 2021 16:21:39 +0000</pubDate>
      <link>https://dev.to/aerospike/skyhook-a-redis-compatible-interface-to-aerospike-database-4hjj</link>
      <guid>https://dev.to/aerospike/skyhook-a-redis-compatible-interface-to-aerospike-database-4hjj</guid>
      <description>&lt;p&gt;&lt;a href="https://www.aerospike.com/"&gt;Aerospike&lt;/a&gt; is a highly available and scalable NoSQL distributed database used in production to provide blazingly fast performance at Petabyte scale. Production deployments of Aerospike are almost always serving their data from NVMe drives, though it‚Äôs possible to run namespaces in memory.&lt;/p&gt;

&lt;p&gt;Redis is a well loved key-value data store that is widely used by developers, which was designed to run single node (single-threaded originally) and in-memory.&lt;br&gt;
This article might be interesting to developers who are using &lt;a href="https://redis.io/"&gt;Redis&lt;/a&gt; and looking for more scalable and highly available alternatives, or maybe already have some applications running on Aerospike.&lt;/p&gt;

&lt;p&gt;Migrating to a different technology is always a challenging process. You need to train engineers, rewrite the codebase, and set up a production cluster to take over. Using &lt;a href="https://github.com/aerospike/skyhook"&gt;Skyhook&lt;/a&gt;, you can move applications to Aerospike first, then come back to rewrite them as Aerospike native, or if you‚Äôre satisfied with their performance, keep them as they are.&lt;br&gt;
Or maybe you‚Äôre looking to expose your Aerospike data to external Redis-based applications? We would love to hear how you would use this project.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#skyhook-to-the-rescue"&gt;
  &lt;/a&gt;
  Skyhook to the rescue
&lt;/h2&gt;

&lt;p&gt;We, as a company, observed this need and came up with the highly performant bridge service, which acts as a fully-fledged (with commands support limitation) Redis server, bridging the clients‚Äô commands to Aerospike clusters.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#technical-details"&gt;
  &lt;/a&gt;
  Technical details
&lt;/h2&gt;

&lt;p&gt;Skyhook is a standalone server application written in Kotlin, which projects Redis protocol commands to an Aerospike cluster using the Aerospike Java client under the hood. The server supports a single namespace and set configuration, where the incoming commands will be applied. This project uses &lt;a href="https://netty.io/"&gt;Netty&lt;/a&gt; as a non-blocking I/O client-server framework.&lt;/p&gt;

&lt;p&gt;Netty, is a highly performant JVM asynchronous event-driven network application framework. Its customizable thread model and native transport support forge an incredibly performant network communication layer.&lt;/p&gt;

&lt;p&gt;What‚Äôs left is to translate Redis commands to Aerospike commands, and here come the async capabilities of the Aerospike Java Client.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installation-and-configuration"&gt;
  &lt;/a&gt;
  Installation and configuration
&lt;/h2&gt;

&lt;p&gt;You will need JDK8 and an Aerospike Server version &amp;gt;= 4.9 because Skyhook uses the new scan capabilities which are available starting from that version.&lt;/p&gt;

&lt;p&gt;Clone &lt;a href="https://github.com/aerospike/skyhook"&gt;aerospike/skyhook&lt;/a&gt; or grab a prebuilt executable JAR from the &lt;a href="https://github.com/aerospike/skyhook/releases"&gt;releases&lt;/a&gt; to get started.&lt;/p&gt;

&lt;p&gt;To build the service from the sources:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./gradlew clean build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will build an executable JAR file.&lt;/p&gt;

&lt;p&gt;Skyhook is configured using a configuration file and it‚Äôs in YAML format. You will need to specify it using the &lt;code&gt;-f&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;To run the server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;java &lt;span class="nt"&gt;-jar&lt;/span&gt; skyhook-[version]-all.jar &lt;span class="nt"&gt;-f&lt;/span&gt; config/server.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;An example configuration file can be found in the config folder under the project repository.&lt;/p&gt;

&lt;p&gt;Here are the current configuration properties available.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Property name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Default value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;hostList&lt;/td&gt;
&lt;td&gt;The host list to seed the Aerospike cluster.&lt;/td&gt;
&lt;td&gt;localhost:3000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;namespase&lt;/td&gt;
&lt;td&gt;The Aerospike namespace.&lt;/td&gt;
&lt;td&gt;test&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;set&lt;/td&gt;
&lt;td&gt;The Aerospike set name.&lt;/td&gt;
&lt;td&gt;redis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bin&lt;/td&gt;
&lt;td&gt;The Aerospike bin name to set values.&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;redisPort&lt;/td&gt;
&lt;td&gt;The server port to bind to.&lt;/td&gt;
&lt;td&gt;6379&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;workerThreads&lt;sup&gt;1&lt;/sup&gt;
&lt;/td&gt;
&lt;td&gt;The Netty worker group size.&lt;/td&gt;
&lt;td&gt;number of available cores&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bossThreads&lt;/td&gt;
&lt;td&gt;The Netty acceptor group size.&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; &lt;code&gt;workerThreads&lt;/code&gt; property is used to configure the size of the Aerospike Java Client EventLoops as well.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;workerThreads&lt;/code&gt; and &lt;code&gt;bossThreads&lt;/code&gt; are the Netty thread pool sizes and can be easily fine-tuned for optimal performance.&lt;br&gt;
After the server is up and running, any Redis client can connect to it as if it were a regular Redis server.&lt;/p&gt;

&lt;p&gt;For the test purposes you can use redis-cli or even the nc (or netcat) utility:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"GET key1&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; | nc localhost 6379
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#benchmarking"&gt;
  &lt;/a&gt;
  Benchmarking
&lt;/h2&gt;

&lt;p&gt;From the very beginning, the project was built with an attention to performance, and the results speak for themselves.&lt;/p&gt;

&lt;p&gt;Running this Redis benchmark:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;redis-benchmark &lt;span class="nt"&gt;-t&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; 100000 &lt;span class="nt"&gt;-n&lt;/span&gt; 1000000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We had the following results on local Skyhook with a single-node default configuration Aerospike cluster on Docker:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Summary:&lt;/em&gt;&lt;br&gt;
 &lt;em&gt;throughput summary: 13453.88 requests per second&lt;/em&gt;&lt;br&gt;
 &lt;em&gt;latency summary (msec):&lt;/em&gt;&lt;br&gt;
   &lt;em&gt;avg       min       p50       p95       p99    max&lt;/em&gt;&lt;br&gt;
   &lt;em&gt;3.627     0.864     3.263     5.583     7.463  1012.223&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While those were the results for the Redis node running on Docker:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Summary:&lt;/em&gt;&lt;br&gt;
 &lt;em&gt;throughput summary: 14967.15 requests per second&lt;/em&gt;&lt;br&gt;
 &lt;em&gt;latency summary (msec):&lt;/em&gt;&lt;br&gt;
   &lt;em&gt;avg       min       p50       p95       p99    max&lt;/em&gt;&lt;br&gt;
   &lt;em&gt;3.275     0.608     2.935     5.087     6.679  1006.591&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can see that they are really close. More than that, we can multiply the number of the Skyhook nodes and significantly improve performance working with the same aerospike cluster. For instance, you can use the Round-robin DNS or any popular load balancer like HAProxy. This will not require any specific configuration since Skyhook is completely stateless.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;The project is constantly evolving, having more and more commands being supported. You can find the coverage of the supported Redis commands in the &lt;a href="https://github.com/aerospike/skyhook"&gt;repo readme&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It will be really great to hear from you about the experience of using it. Also, your contributions to the project are very welcome.&lt;/p&gt;

&lt;p&gt;If you encounter a bug, please report it or &lt;a href="https://github.com/aerospike/skyhook/issues"&gt;open an issue&lt;/a&gt; stating the commands you would like to be supported.&lt;/p&gt;

</description>
      <category>aerospike</category>
      <category>redis</category>
      <category>gateway</category>
      <category>nosql</category>
    </item>
    <item>
      <title>Help Setting Up VSCode Formatting</title>
      <author>Chad Smith</author>
      <pubDate>Tue, 20 Apr 2021 16:09:22 +0000</pubDate>
      <link>https://dev.to/twigman08/help-setting-up-vscode-formatting-1kf2</link>
      <guid>https://dev.to/twigman08/help-setting-up-vscode-formatting-1kf2</guid>
      <description>&lt;p&gt;So I feel like I should not be having to ask for help on this, but I feel like I have grown very annoyed with formatters fighting over each other that it has actually gotten old to write TypeScript/JavaScript code in VSCode with Vue (or really any other frontend framework).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#issue"&gt;
  &lt;/a&gt;
  Issue
&lt;/h2&gt;

&lt;p&gt;So here is my issue: Currently I have my &lt;code&gt;.vue&lt;/code&gt; files formatting correctly and it is giving me good &lt;code&gt;eslint&lt;/code&gt; warnings and errors. Though now the issue is in my &lt;code&gt;.ts&lt;/code&gt; or &lt;code&gt;.js&lt;/code&gt; files. These files never want to format properly now and I can't get it to format on save. Then if I do end up getting it to format on save, it seems it will fight against the &lt;code&gt;.vue&lt;/code&gt; files.&lt;/p&gt;

&lt;p&gt;Example: Currently my &lt;code&gt;.vue&lt;/code&gt; files format properly and use my preferred 2 spaces for tabbing. While my &lt;code&gt;.ts&lt;/code&gt; or &lt;code&gt;.js&lt;/code&gt; files will just go straight to using the 4 spaces for tabs, and won't even correct itself no matter what I do. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-im-looking-for"&gt;
  &lt;/a&gt;
  What I'm looking for
&lt;/h3&gt;

&lt;p&gt;What I'm looking for a great environment and project setup that will do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Listen to the projects eslint settings&lt;/li&gt;
&lt;li&gt;Listen to the projects prettier settings for formatting&lt;/li&gt;
&lt;li&gt;Be able to auto format on save all my files and not have them conflict with each other&lt;/li&gt;
&lt;li&gt;Best way to update and modify settings&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#current-environmentproject-setup"&gt;
  &lt;/a&gt;
  Current Environment/Project Setup
&lt;/h3&gt;

&lt;p&gt;Currently the environment/project setup is the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;VSCode&lt;/li&gt;
&lt;li&gt;Vetur Extension&lt;/li&gt;
&lt;li&gt;ESLint Extension&lt;/li&gt;
&lt;li&gt;VueJS&lt;/li&gt;
&lt;li&gt;eslint and prettier on project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For Vetur I have all my formatters turned on. I also have the format on save turned on. For the Vue project I am using the following packages/rules for eslint&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;extends: ["prettier", "prettier/standard", "plugin:@typescript-eslint/recommended", "plugin:vue/recommended"],
  plugins: ["vue", "prettier"],
  parser: "vue-eslint-parser",
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And for prettier, I have the following setup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"singleQuote"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"trailingComma"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"none"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"endOfLine"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"auto"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"htmlWhitespaceSensitivity"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ignore"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"tabWidth"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I will take any suggestions on best practices to take. I understand a lot of this will be opinionated as everyone has different takes on how formatting should be done, but I am looking for the best practices to make sure your environment and project is setup properly so you are not fighting these issues for every new project that you start or work with, with other people.&lt;/p&gt;

&lt;p&gt;Any help/suggestions is greatly appreciated. Thanks!&lt;/p&gt;

</description>
      <category>help</category>
      <category>vscode</category>
      <category>vue</category>
    </item>
    <item>
      <title>#9 Of 100DaysOfCode</title>
      <author>atulit023</author>
      <pubDate>Tue, 20 Apr 2021 16:05:50 +0000</pubDate>
      <link>https://dev.to/icecoffee/9-of-100daysofcode-2pp8</link>
      <guid>https://dev.to/icecoffee/9-of-100daysofcode-2pp8</guid>
      <description>&lt;p&gt;In the continuation of my yesterday's topic, I studied more about state management in React and a couple of more topics.&lt;/p&gt;

&lt;p&gt;Following are the new things that I learned today about React.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Synthetic Event handlers&lt;/strong&gt; &lt;br&gt;
Just like browsers React got its native event handlers too. But you may as why do we need'em? We already got our silly old toys to play with. But hold up, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Synthetic event handlers provide improved performance and&lt;/li&gt;
&lt;li&gt;Cross Browser compatibility.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Then there was this thing about when React renders or re-renders?&lt;/strong&gt; &lt;br&gt;
So react renders when&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;State changes - any of it and remember state must always be declared at the top of the scope.&lt;/li&gt;
&lt;li&gt;Prop changes&lt;/li&gt;
&lt;li&gt;Parent renders&lt;/li&gt;
&lt;li&gt;Context Changes
As React is a declarative language so we rarely need any optimization but you still can control whether the state should render or not explicitly.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here you can get more info about states.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/icecoffee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qRw8PnaD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--V2yBTOrT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/583438/e8ceceea-d6dc-4493-a2eb-0a47f371d6a6.png" alt="icecoffee image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/icecoffee/8-of-100daysofcode-24ng" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;#8 of 100DaysOfCode &lt;/h2&gt;
      &lt;h3&gt;atulit023 „Éª Apr 19 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;useContext()&lt;/strong&gt;
useContext hook is a great tool and I learned something more about it .
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;dependency&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now we all know about the callback but the dependency array is the new cool thing&lt;br&gt;
&lt;em&gt;dependency array is a list of reasons that will make useEffect re-render&lt;/em&gt; or in layman's terms &lt;em&gt;any states or props we will list in this array will make useEffect re-render every time they change&lt;/em&gt;.&lt;br&gt;
The second definition is better, I know. lol&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Handling Errors via Error Boundary&lt;/strong&gt;
This thing takes care of its child.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;hasError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;getDerivedStateFromError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Update state so the next render will show the fallback UI.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;hasError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// You can render your custom fallback UI for errors&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Heyyy&lt;/span&gt;&lt;span class="o"&gt;!!!&lt;/span&gt; &lt;span class="nx"&gt;Glitch&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;martrix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;üò≤&lt;/span&gt; 
                    &lt;span class="nx"&gt;Sit&lt;/span&gt; &lt;span class="nx"&gt;tight&lt;/span&gt; &lt;span class="nx"&gt;we&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;coming&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Code for making an error boundary class&lt;/p&gt;

&lt;p&gt;And then you can just use it like a normal component. üòÄ&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ErrorBoundary&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Pretty cool right!!!&lt;/p&gt;

&lt;p&gt;I know this looks familiar. &lt;br&gt;
Here you can get this in a little more detail.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/icecoffee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qRw8PnaD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--V2yBTOrT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/583438/e8ceceea-d6dc-4493-a2eb-0a47f371d6a6.png" alt="icecoffee image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/icecoffee/7-of-100daysofcode-2lbi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;#7 of 100DaysOfCode&lt;/h2&gt;
      &lt;h3&gt;atulit023 „Éª Apr 18 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#nextjs&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;But, It got limitations too.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Error Boundaries ought to be classes&lt;/li&gt;
&lt;li&gt;They can't catch certain types of errors: 

&lt;ul&gt;
&lt;li&gt;Errors in event handlers&lt;/li&gt;
&lt;li&gt;Errors in async code&lt;/li&gt;
&lt;li&gt;Errors in server sider rendering &lt;/li&gt;
&lt;li&gt;Error thrown in error boundary itself
Also they are just concerned of the errors within their child elements.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;A little tip&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We can handle async errors with error boundries with a little bit of quick fix.&lt;/strong&gt;&lt;br&gt;
Plan:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make a state that will store error and set it to null.&lt;/li&gt;
&lt;li&gt;Catch error and set state equals to corresponding error.&lt;/li&gt;
&lt;li&gt;Apply an if before rendering markup
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and error boundary will take over.üòé&lt;br&gt;
LOL Nice.&lt;/p&gt;

&lt;p&gt;That's it for today.üòå&lt;br&gt;
Thanks for joining me.&lt;br&gt;
Have a wonderful day.üå∑&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>react</category>
    </item>
    <item>
      <title>Building a Hybrid SQL + NoSQL E-Commerce Data Model</title>
      <author>John G</author>
      <pubDate>Tue, 20 Apr 2021 15:52:33 +0000</pubDate>
      <link>https://dev.to/fabric_commerce/building-a-hybrid-sql-nosql-e-commerce-data-model-3fc3</link>
      <guid>https://dev.to/fabric_commerce/building-a-hybrid-sql-nosql-e-commerce-data-model-3fc3</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qv5kT82c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/FSkeOvN.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qv5kT82c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/FSkeOvN.jpg" alt="Image by Mike Petrucci"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;E-commerce databases track unpredictable human actors across a complicated monetary system: at the end of the day, you want to deliver a product to a person you never see after getting a payment authorized by a third party. Processing payments, adding products, tracking orders, and handling rebates are all complicated features your e-commerce database has to handle in order to reach that goal.&lt;/p&gt;

&lt;p&gt;This article will build on previous articles, talking about a &lt;a href="https://resources.fabric.inc/blog/e-commerce-data-model"&gt;scalable SQL data model&lt;/a&gt; and a &lt;a href="https://resources.fabric.inc/blog/nosql-e-commerce-data-model"&gt;NoSQL data model&lt;/a&gt;, to show how you can build a hybrid data model. You‚Äôll learn how to utilize the strengths of various database engines specifically to handle more complicated e-commerce interactions. &lt;/p&gt;

&lt;p&gt;Imagine a user returning one item out of a dozen that were discounted after being purchased in bulk. The user has forgotten their password, and the returned package has arrived at the wrong supplier warehouse. When this return arrives, your database model has to handle a complicated web of working relationships to put everything back in the right place. You might also need to trace the chain of events that led to this outcome so you can send the customer a satisfaction survey.&lt;/p&gt;

&lt;p&gt;This article will make a database that can shine in this situation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modeling-your-users"&gt;
  &lt;/a&gt;
  Modeling Your Users
&lt;/h2&gt;

&lt;p&gt;The foundation of any e-commerce site are its users. They perform every action, and each one is a complicated, out-of-your-control person. Users move, change payment methods, forget to inform the businesses they frequent, then request a refund.&lt;/p&gt;

&lt;p&gt;Fortunately, you only need to know a very fixed set of facts about users. There are rarely new types of things you need to know about people, but they are queried in a variety of ways. Some common access patterns for user data are adding new addresses or updating email addresses or passwords.&lt;/p&gt;

&lt;p&gt;Because they feature a fixed set of data with a wide variety of access patterns, user data is a great candidate for a structured SQL data store. Also, user information is one of the best sources of analytical data for your business. For example, you‚Äôre likely to want to perform ad hoc queries about the users buying your products, further cementing the suitability of SQL for your user data.&lt;/p&gt;

&lt;p&gt;The following user model implements some complicated patterns that an e-commerce site has to support, like resetting a password, adding multiple shipping and billing addresses, as well as tracking how long users spend on various pages and what they clicked to get there.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LvP9eGTO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/bGaRNsc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LvP9eGTO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/bGaRNsc.png" alt="Users model"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you‚Äôre building out your model, be aware that you don‚Äôt need to collect all the information up front. You don‚Äôt need to collect a user‚Äôs shipping or billing address when they first sign up for your application. For example, &lt;a href="https://api.fabric.inc/users/create-a-local-user"&gt;Fabric&lt;/a&gt; keeps the onboarding process simple, only asking for an email, name, and password at sign up. However, as we‚Äôve seen in our &lt;a href="https://resources.fabric.inc/blog/bjs-wholesale-ecommerce-breakdown"&gt;e-commerce site breakdowns&lt;/a&gt;, many businesses complexify this step, making it hard for people to checkout online.&lt;/p&gt;

&lt;p&gt;Next, let‚Äôs look at what you‚Äôll show users.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#your-product-catalog"&gt;
  &lt;/a&gt;
  Your Product Catalog
&lt;/h2&gt;

&lt;p&gt;A product catalog represents every item that‚Äôs available for your users to purchase: objects, subscriptions, or donation tiers. All of these options have different structures and need to keep track of slightly different things. Subscriptions have features or access levels, while objects have sizes, colors, and images. There‚Äôs a lot of flexibility and variety as to what can live in a product catalog.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mixing-in-nosql"&gt;
  &lt;/a&gt;
  Mixing in NoSQL
&lt;/h3&gt;

&lt;p&gt;Unlike SQL data, which is structured, normalized, and optimized to save on storage, NoSQL data is denormalized and optimized to save on CPU. This means it‚Äôs a bad choice for data analysis applications (like tracking users on a page) but a great candidate for high throughput applications when you fully understand the access patterns.&lt;/p&gt;

&lt;p&gt;NoSQL can be perfect for hosting product information. Most of the time, product information is simply displayed to a user, and the stock available might be updated if an item is purchased. NoSQL databases are great at creating instantiated views populated with data from a single round trip query.&lt;/p&gt;

&lt;p&gt;With NoSQL, your goal is to store all the data that your application uses for a page inside a single document. Here‚Äôs an example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KLuFaaZV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/tuRzOtw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KLuFaaZV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/tuRzOtw.png" alt="A NoSQL data model"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With this data model, when a customer requests a product page, your application requests and receives everything it needs to render the page in a single round trip. Images, prices, options, and dimensions for every variant that a customer can inspect are all stored in a single document. This means the data layer doesn‚Äôt spend CPU time finding and mashing together various tables, making NoSQL requests very horizontally scalable.&lt;/p&gt;

&lt;p&gt;One of the other benefits of NoSQL is that data is returned in a format the web understands (JSON), which can save you the trouble of writing a custom Object Relationship Mapper (ORM) for your products.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-cache"&gt;
  &lt;/a&gt;
  What to Cache
&lt;/h2&gt;

&lt;p&gt;One of the data storage options available to developers is in-memory storage, like &lt;a href="https://redislabs.com/"&gt;Redis&lt;/a&gt;. With any caching strategy, the goal is to preserve CPU and disk I/O by moving transactions formerly performed in your data layer into faster access hardware like RAM.&lt;/p&gt;

&lt;p&gt;The features that make the product catalog a good candidate for a NoSQL data store also make it a good candidate for caching in an in-memory data store. The data is read heavy and rarely changes, so caches will save disk time while maintaining accuracy.&lt;/p&gt;

&lt;p&gt;Caching is also a good solution for session management, and in the e-commerce context, storing a user‚Äôs current cart. Rather than looking up a cookie in your database or returning all the items in their cart every time a user makes a request, you can push that workload to your caching layer and achieve a request response time that would require significantly more resources if handled by your database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#payment-models"&gt;
  &lt;/a&gt;
  Payment Models
&lt;/h2&gt;

&lt;p&gt;Payment systems allow users to purchase and receive your products by linking your website to various services that enable payment. This is a vital moving part of any e-commerce website, and it has to function well to ensure customer satisfaction. A broken checkout flow is often a dealbreaker.&lt;/p&gt;

&lt;p&gt;This step also has the most stringent security requirements for what kinds of data are stored and how. In general, don‚Äôt store much credit card information, and be sure you encrypt any identifiable payment information you do save, like the card identifier. The less data your payment model stores, the better. It reduces your legal liability and helps you stay in compliance with &lt;a href="https://resources.fabric.inc/blog/ecommerce-pci-compliance"&gt;Payment Card Industry-Data Security Standards (PCI-DSS)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--myPmIqCr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/EisVQzc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--myPmIqCr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/EisVQzc.png" alt="Payments data model"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The ideal payments table does not contain much information. When a user finally clicks &lt;em&gt;Buy&lt;/em&gt; after entering their payment information, your application can mostly bypass your data layer. Instead, it will pass the request to a payment processor, which will handle it and return the result.&lt;/p&gt;

&lt;p&gt;If you think you need to store payment information for future use, your payment processor very likely has an option for storing that data and will provide you a unique, not personally identifiable token to use next time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sending-your-product-to-a-customer"&gt;
  &lt;/a&gt;
  Sending Your Product to a Customer
&lt;/h2&gt;

&lt;p&gt;Order models are the part of your database that tracks the process of getting a product to a customer, from the moment they first express interest all the way through getting the item into their hands. An order can involve ongoing access to a website or handling a discrete event, like sending a product to a client.&lt;/p&gt;

&lt;p&gt;A smooth order flow is vital for creating a user experience that people are willing to repeat. The order is where all our other database schemas get put to use.&lt;/p&gt;

&lt;p&gt;Here‚Äôs an order for a product: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R9Xlkzvt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/en6WAVI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R9Xlkzvt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/en6WAVI.png" alt="Orders"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You‚Äôll notice that discount and price information have been duplicated from our NoSQL data model into the &lt;code&gt;cart_item&lt;/code&gt; table. The NoSQL model represents the discounts that are shown to a customer when they enter a page, and the saved price and discount are the discounts that were actually applied to the item.&lt;/p&gt;

&lt;p&gt;If a price or discount changes, you‚Äôll want to be sure to keep a record of what prices were actually paid. Be aware of fault lines like this between your NoSQL and SQL components.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Revisiting the initial scenario presented in this article, let‚Äôs see how the model fares all stitched together. The user has forgotten their password, but our user‚Äôs model handles updating it. The returned package has arrived at the wrong supplier warehouse, but we tracked the original source in the order, so we can forward it to the correct destination. Calculating the refund is tricky, but because we tracked discount information on an order level, we can run an ad hoc query to figure out the appropriate rebate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0rBGUEzI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/9vuynE2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0rBGUEzI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/9vuynE2.png" alt="All the schema"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When planning your data model, remember that SQL is optimized for efficiently storing structured data and performing arbitrary queries on data, while NoSQL is optimized for efficiently delivering unstructured data.&lt;/p&gt;

&lt;p&gt;There are dozens of challenges that an e-commerce website can face that aren‚Äôt covered by this model, like &lt;a href="https://fabric.inc/subscriptions"&gt;handling subscriptions&lt;/a&gt;, applying a &lt;a href="https://fabric.inc/offers"&gt;discount to an item&lt;/a&gt; based on user behavior, and &lt;a href="https://fabric.inc/oms"&gt;tracking inventory&lt;/a&gt;. &lt;a href="https://fabric.inc/"&gt;Fabric&lt;/a&gt; has a team of experts who‚Äôve built e-commerce data models and websites for years, offering simple solutions to these complicated problems.&lt;/p&gt;

</description>
      <category>database</category>
      <category>mongodb</category>
      <category>sql</category>
    </item>
    <item>
      <title>How Open-Source changed the world: Cloud Computing </title>
      <author>Nirvik Agarwal</author>
      <pubDate>Tue, 20 Apr 2021 15:43:05 +0000</pubDate>
      <link>https://dev.to/nitdgplug/how-open-source-changed-the-world-cloud-computing-5c9b</link>
      <guid>https://dev.to/nitdgplug/how-open-source-changed-the-world-cloud-computing-5c9b</guid>
      <description>&lt;p&gt;The words &lt;strong&gt;&lt;em&gt;cloud computing&lt;/em&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;em&gt;the cloud&lt;/em&gt;&lt;/strong&gt; have garnered a lot of attention in the context of an average user needing a lot of data and the computing power to process that data in their daily lives, be it saving their photos in google drive, posting pictures on social media or developers deploying applications on serverless platforms.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vKbv54BH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5afeimiruhofnnagutqq.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vKbv54BH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5afeimiruhofnnagutqq.jpeg" alt="How cloud works"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-what-do-we-actually-mean-by-the-cloud"&gt;
  &lt;/a&gt;
  But what do we actually mean by the cloud?
&lt;/h2&gt;

&lt;p&gt;It‚Äôs just a metaphor for the internet. Cloud computing is the on-demand availability of computer resources, especially data storage (cloud storage) and computing power, without direct active management by the user.&lt;br&gt;
By using cloud computing, users and companies don't have to manage physical servers themselves or run software applications on their own machines.&lt;/p&gt;

&lt;p&gt;The cloud makes services device-agnostic because the computing and storage take place on servers instead of locally on the user's device. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-cloud-hidden-in-plain-sight"&gt;
  &lt;/a&gt;
  The cloud hidden in plain sight
&lt;/h2&gt;

&lt;p&gt;A misconception that most people have is that the &lt;em&gt;cloud&lt;/em&gt; is some sort of advanced software that only developers can use but in reality, we all are using cloud technology in our daily lives. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z6ybRX3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ksza4176ni9zjorm5t1n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z6ybRX3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ksza4176ni9zjorm5t1n.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One can log in to their Google account from a new device with all their emails, photos, contacts in place.&lt;/li&gt;
&lt;li&gt;Seamless sharing and delivery of files and applications is done using cloud-based storage services like &lt;code&gt;Google Drive&lt;/code&gt;, &lt;code&gt;Dropbox&lt;/code&gt;, etc.&lt;/li&gt;
&lt;li&gt;Cloud computing has made real-time collaboration possible on the internet with web applications like &lt;code&gt;Figma&lt;/code&gt; and &lt;code&gt;Google Docs&lt;/code&gt; running on the cloud.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#how-opensource-ties-them-all-up"&gt;
  &lt;/a&gt;
  How Open-Source ties them all up
&lt;/h2&gt;

&lt;p&gt;The heart of Cloud Computing is the kernel that powers it, which to no one's surprise is &lt;em&gt;Linux&lt;/em&gt;. &lt;br&gt;
This statement is well supported by the fact that Linux is free and Open Source. Linux systems are in general more stable and reliable than their counterparts and hence become an obvious choice for companies to use to power their servers.&lt;/p&gt;

&lt;p&gt;The essential tools above the Operating System including the Web servers, FTP servers, DNS servers, and on and on, are available for Linux first and in a wide variety. Also, most of these technologies are open-source themselves.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--12uo-mji--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/brwim8pjkrz4r2io4wzn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--12uo-mji--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/brwim8pjkrz4r2io4wzn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Serverless computing&lt;/strong&gt; is a cloud computing execution model in which the cloud provider allocates machine resources on-demand, taking care of the servers on behalf of their customers. This is cheaper than setting up your own infrastructure but at the same time, the systems are highly scalable and easy to maintain.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l15qXsaf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://colab.research.google.com/img/colab_favicon_256px.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l15qXsaf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://colab.research.google.com/img/colab_favicon_256px.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Machine Learning, especially Deep Learning has always been a field that has required a lot of computing power to deliver accurate results and has most been elusive to developers. But with platforms like &lt;strong&gt;Google Collab&lt;/strong&gt; one gets to access powerful GPUs which they can leverage to train state-of-the-art models directly on the cloud.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#impact-of-cloud-computing-during-the-pandemic"&gt;
  &lt;/a&gt;
  Impact of Cloud Computing during the Pandemic
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qYn2zVVl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4glt5admnym0ngt1wpp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qYn2zVVl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4glt5admnym0ngt1wpp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The tools and services that are ensuring that our work and our education goes unhindered even in these tough times are mostly powered by the cloud. Be it attending online classes through platforms like Google Classroom and Google meet or attending important meetings all have been made possible with the Cloud.&lt;/p&gt;

&lt;p&gt;Open Source has changed the world, it's an undeniable fact. By putting the power of supercomputers in the hands of every user and developers, even smaller companies can leverage the infrastructure previously limited to only the large corporations, and deliver products that push the horizon of technology one step further.&lt;/p&gt;

&lt;p&gt;We got more on this topic for you to explore, To know more head over to this YouTube Video -&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/_607lZ0xM7o"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;This article has been co-authored by&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__446720"&gt;
  
    .ltag__user__id__446720 .follow-action-button {
      background-color: #000000 !important;
      color: #ffffff !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/nirvikagarwal" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y_Lhnfy1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--EGxHpzl5--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/446720/74427276-6708-4a2e-bfb2-d0f83d2109f2.png" alt="nirvikagarwal image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/nirvikagarwal"&gt;Nirvik Agarwal&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/nirvikagarwal"&gt;Computer Science Student | Web Developer | FOSS Enthusiast&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;div class="ltag__user ltag__user__id__431923"&gt;
  
    .ltag__user__id__431923 .follow-action-button {
      background-color: #d7dee2 !important;
      color: #022235 !important;
      border-color: #d7dee2 !important;
    }
  
    &lt;a href="/knightvertrag" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KaIrlg2o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--jgP-z1g6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/431923/ada2407b-4509-408c-b556-9944ffb4801e.png" alt="knightvertrag image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/knightvertrag"&gt;Anurag Mondal&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/knightvertrag"&gt;A student trying to learn as much as humanly possible&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;





&lt;p&gt;&lt;strong&gt;We hope you found this insightful.&lt;/strong&gt;&lt;br&gt;
Do visit our &lt;a href="https://nitdgplug.org/"&gt;website&lt;/a&gt; to know more about us and also follow us on :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/nitdgplug"&gt;Facebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.instagram.com/nitdgplug/"&gt;Instagram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/company/lugnitdgp/"&gt;Linkedin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCYZPnN5vP5B1sINLLkI1aDA"&gt;YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also do not forget to like and comment.&lt;/p&gt;

&lt;p&gt;Until then,&lt;br&gt;
&lt;strong&gt;stay safe, and May the Source Be With You!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sZInPlPk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cplzcsry6s5r8m1pale8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sZInPlPk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cplzcsry6s5r8m1pale8.gif" alt="Star Wars Who?"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>opensource</category>
      <category>linux</category>
      <category>learning</category>
    </item>
  </channel>
</rss>
