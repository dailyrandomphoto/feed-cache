<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Read, Parse and Write CSV Files with Python.</title>
      <author>Collins</author>
      <pubDate>Fri, 17 Sep 2021 02:48:40 +0000</pubDate>
      <link>https://dev.to/0th/read-parse-and-write-csv-files-with-python-obj</link>
      <guid>https://dev.to/0th/read-parse-and-write-csv-files-with-python-obj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-are-csv-files-anyway"&gt;
  &lt;/a&gt;
  What are CSV files anyway?ü§∑‚Äç‚ôÇÔ∏è
&lt;/h2&gt;

&lt;p&gt;CSV files, the &lt;strong&gt;CSV&lt;/strong&gt; meaning &lt;strong&gt;Comma Separated Values&lt;/strong&gt;, are text files used to store data.&lt;br&gt;&lt;br&gt;
CSV files emulate tabular data, except that each field is separated by a &lt;em&gt;comma&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j7sggi_D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r073jq2ud4g54yzz3uu2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j7sggi_D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r073jq2ud4g54yzz3uu2.PNG" alt="csv_file"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;CSV files can be manipulated with Python in either of these ways:  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;traditional read/write methods&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;csv&lt;/code&gt; module
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#what-would-be-covered"&gt;
  &lt;/a&gt;
  What would be covered-
&lt;/h2&gt;

&lt;p&gt;In this article, the focus would be manipulating CSV files using &lt;em&gt;Python's&lt;/em&gt; &lt;code&gt;csv&lt;/code&gt; module, why it is preferred over the usual read/write method would become apparent in a bit.&lt;br&gt;&lt;br&gt;
This article covers the concepts and code (in Python üêç) used in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#reading-csv-files"&gt;reading CSV files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#field-names"&gt;accessing field names/headers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#writing-to-csv-files"&gt;writing CSV files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-dictionary-readers-and-writers"&gt;leveraging dictionary readers and writers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#reading-csv-files"&gt;
  &lt;/a&gt;
  Reading CSV files
&lt;/h2&gt;

&lt;p&gt;Without wasting any more time, let's get straight to reading CSV files üöÄ.&lt;br&gt;&lt;br&gt;
The CSV file used in this article can be found &lt;a href=""&gt;here&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# import csv module
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;

&lt;span class="c1"&gt;# open the csv file with a context manager
&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'records.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

  &lt;span class="c1"&gt;# using the csv reader function
&lt;/span&gt;  &lt;span class="n"&gt;csv_reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# loop through the csv_reader iterable object
&lt;/span&gt;  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;csv_reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# print each line in the reader object
&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    ['first_name', 'last_name', 'email']
    ['John', 'Doe', 'john-doe@bogusemail.com']
    ['Mary', 'Smith-Robinson', 'maryjacobs@bogusemail.com']
    ['Dave', 'Smith', 'davesmith@bogusemail.com']
    ['Jane', 'Stuart', 'janestuart@bogusemail.com']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The block of code above prints each line in the CSV file.&lt;br&gt;&lt;br&gt;
This was achieved first by importing the &lt;code&gt;csv&lt;/code&gt; module, then a &lt;em&gt;context manager&lt;/em&gt; is used to open the CSV file, the CSV file is read into a file object referenced &lt;code&gt;csv_file&lt;/code&gt;, using the &lt;code&gt;open()&lt;/code&gt; function.&lt;br&gt;&lt;br&gt;
Using the &lt;code&gt;csv&lt;/code&gt; module's &lt;code&gt;reader()&lt;/code&gt; function, each line in the CSV file is parsed into a &lt;strong&gt;reader&lt;/strong&gt; object, &lt;code&gt;csv_reader&lt;/code&gt;.&lt;br&gt;&lt;br&gt;
The &lt;em&gt;reader&lt;/em&gt; object is &lt;em&gt;iterable&lt;/em&gt;, it returns &lt;em&gt;each line&lt;/em&gt; in the CSV file &lt;em&gt;as lists&lt;/em&gt; when subjected to iteration. &lt;br&gt;
A quick &lt;code&gt;for&lt;/code&gt; loop and a &lt;code&gt;print()&lt;/code&gt; function would return each line in the CSV file üòä.  &lt;/p&gt;

&lt;p&gt;It is important to note, that the &lt;em&gt;reader&lt;/em&gt; object iterable when iterated, returns each line of the CSV file in a &lt;code&gt;list&lt;/code&gt; object where each &lt;em&gt;comma-separated field&lt;/em&gt; is a &lt;em&gt;list item&lt;/em&gt;.&lt;br&gt;&lt;br&gt;
This could be helpful to determine what field values would be returned, by &lt;em&gt;indexing&lt;/em&gt; the &lt;em&gt;list&lt;/em&gt; that is returned for every line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# open file with a context manager
&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'records.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# create reader object
&lt;/span&gt;  &lt;span class="n"&gt;csv_reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# loop through reader object csv_reader
&lt;/span&gt;  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;csv_reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# print the field values under the field header email
&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    email
    john-doe@bogusemail.com
    maryjacobs@bogusemail.com
    davesmith@bogusemail.com
    janestuart@bogusemail.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code block above prints the last &lt;em&gt;field value&lt;/em&gt; for every line in the CSV file.&lt;br&gt;&lt;br&gt;
First, the file is read as before, by a context manager, into a file object.&lt;br&gt;&lt;br&gt;
The &lt;em&gt;reader&lt;/em&gt; object is created next, it gets iterated through with a &lt;code&gt;for&lt;/code&gt; loop, and within the &lt;code&gt;print()&lt;/code&gt; function, is where the &lt;em&gt;indexing&lt;/em&gt; of each list item (line in CSV file) is done.  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#field-names"&gt;
  &lt;/a&gt;
  Field names
&lt;/h2&gt;

&lt;p&gt;Just as most &lt;em&gt;tables&lt;/em&gt; have &lt;em&gt;headers&lt;/em&gt;, so do most CSV files also contain &lt;strong&gt;field names&lt;/strong&gt;, the &lt;em&gt;field names&lt;/em&gt; of a csv file can be obtained also if present, using the &lt;code&gt;reader&lt;/code&gt; object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# open file with a context manager
&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'records.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# create reader object
&lt;/span&gt;  &lt;span class="n"&gt;csv_reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# iterate through the csv_reader once
&lt;/span&gt;  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'Field names: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_reader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    Field names: ['first_name', 'last_name', 'email']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the concept of &lt;em&gt;iterators&lt;/em&gt; or &lt;em&gt;generators&lt;/em&gt; (which are iterators) is not strange, it shouldn't be new to know that when a loop is used to iterate through an &lt;em&gt;iterator&lt;/em&gt;, it's the &lt;code&gt;next()&lt;/code&gt; function that keeps getting called on the &lt;em&gt;iterator&lt;/em&gt; each time.  &lt;/p&gt;

&lt;p&gt;Here the &lt;code&gt;next()&lt;/code&gt; function is called once, which could be seen as looping or iterating through the &lt;em&gt;reader&lt;/em&gt; object once, this returns the first line in the CSV file, which would most of the time be the &lt;em&gt;field names&lt;/em&gt;.  &lt;/p&gt;

&lt;p&gt;It shouldn't be confusing that the &lt;em&gt;reader&lt;/em&gt; object was called an &lt;em&gt;iterable&lt;/em&gt; previously and an &lt;em&gt;iterator&lt;/em&gt; here, because all &lt;em&gt;iterators&lt;/em&gt; are actually &lt;em&gt;iterable&lt;/em&gt;. &lt;br&gt;
If there's any confusion about the difference between an &lt;em&gt;iterator&lt;/em&gt; and an &lt;em&gt;iterable&lt;/em&gt;, this &lt;a href="https://www.geeksforgeeks.org/python-difference-iterable-iterator/#:~:text=Iterable%20is%20an%20object%2C%20which%20one%20can%20iterate%20over.&amp;amp;text=Iterator%20is%20an%20object%2C%20which,every%20iterable%20is%20an%20iterator."&gt;article&lt;/a&gt; from geeksforgeeks should help.  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#writing-to-csv-files"&gt;
  &lt;/a&gt;
  Writing to CSV files
&lt;/h2&gt;

&lt;p&gt;Just as it is possible to read CSV files in Python, it is also possible to write comma-separated values or fields into CSV files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# open the file to read or get comma separated values or data from
&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'records.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# create reader object
&lt;/span&gt;  &lt;span class="n"&gt;csv_reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# open/create the file to write comma separated values to
&lt;/span&gt;  &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'new_records.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;new_csv_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# create writer object
&lt;/span&gt;    &lt;span class="n"&gt;csv_writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_csv_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# iterate through the comma separated values of the initially opened file through the reader object
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;csv_lines&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;csv_reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# write these values to the new file
&lt;/span&gt;      &lt;span class="n"&gt;csv_writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_lines&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The block of code above would successfully read or copy &lt;em&gt;comma-separated values&lt;/em&gt; from a CSV file (&lt;em&gt;records.csv&lt;/em&gt;) into another (&lt;em&gt;new_records.csv&lt;/em&gt;).  &lt;/p&gt;

&lt;p&gt;As repeated in previous code blocks, the CSV file is opened within a context manager, two CSV files were opened in the block of code above, the initial CSV file was opened to read comma-separated values out of it, into a &lt;code&gt;csv&lt;/code&gt; module's reader object.  &lt;/p&gt;

&lt;p&gt;The next CSV file is also opened within a context manager, although in this case it was opened so comma-separated values could be &lt;em&gt;written&lt;/em&gt; into it.  &lt;/p&gt;

&lt;p&gt;Next, a &lt;strong&gt;writer&lt;/strong&gt; object was created using the &lt;code&gt;csv&lt;/code&gt; module's &lt;code&gt;writer()&lt;/code&gt; function, which takes as argument the CSV file object.  &lt;/p&gt;

&lt;p&gt;The next section in the code block contains a loop that iterates through the &lt;em&gt;reader&lt;/em&gt; object, to return each line copied from the &lt;em&gt;first file&lt;/em&gt; (&lt;em&gt;records.csv&lt;/em&gt;) that was opened into the &lt;code&gt;csv_lines&lt;/code&gt; variable, this variable, is passed to the &lt;em&gt;writer&lt;/em&gt; object's method &lt;code&gt;writerow()&lt;/code&gt;, which writes these values into the &lt;em&gt;last opened file&lt;/em&gt; (&lt;em&gt;new_records.csv&lt;/em&gt;).&lt;br&gt;&lt;br&gt;
Within the &lt;code&gt;csv.writer()&lt;/code&gt; function in the previous code block, a second argument was included - &lt;code&gt;delimiter='-'&lt;/code&gt;, which would write the values from the previously opened file into the newly opened file, but each field value would be separated by a hyphen (-) instead of a comma (,).  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V6aFBjOH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/px0c3kpcks11fxnew6ai.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V6aFBjOH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/px0c3kpcks11fxnew6ai.PNG" alt="records"&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#first-csv-file-commaseparated-values-were-copiedread-from-it"&gt;
  &lt;/a&gt;
  First CSV file (comma-separated values were copied/read from it).
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X5_7FKIP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s9b8byw623vfeacbw9d3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X5_7FKIP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s9b8byw623vfeacbw9d3.jpg" alt="new_records_LI"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#second-csv-file-commaseparated-values-were-written-to-it"&gt;
  &lt;/a&gt;
  Second CSV file (comma-separated values were written to it).
&lt;/h4&gt;

&lt;p&gt;The second CSV file looks very hard to read and could be problematic if the field values contain the delimiting character (the hyphen, "-"), looking again at the second image, the &lt;em&gt;email field&lt;/em&gt; of the second entry (&lt;a href="mailto:john-doe@bogusemail.com"&gt;john-doe@bogusemail.com&lt;/a&gt;), and the &lt;em&gt;last_name&lt;/em&gt; field of the third entry (Smith-Robinson) have hyphens, which is the delimiting character.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CSV files values are not always separated by a comma, as seen in the second file above, the &lt;em&gt;delimiting&lt;/em&gt; character could be arbitrary, &lt;em&gt;commas&lt;/em&gt; are mostly used as a convention, and in some cases to improve readability.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;csv&lt;/code&gt; module's &lt;code&gt;writer()&lt;/code&gt; function, knew to place field values that contained the delimiting character in double quotes, as seen in the image above. This would have otherwise made the file hard to read or use in a program.  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#using-dictionary-readers-and-writers"&gt;
  &lt;/a&gt;
  Using Dictionary readers and writers
&lt;/h2&gt;

&lt;p&gt;Although using the &lt;code&gt;csv&lt;/code&gt; module's &lt;code&gt;reader()&lt;/code&gt; and &lt;code&gt;writer()&lt;/code&gt; functions seems like the standard way to handle CSV files, there's a better way to read from and write to CSV files, that improves code readability, and helps explicitly manipulate and parse comma-separated-values, the way to achieve this would be using the &lt;code&gt;csv&lt;/code&gt; module's &lt;code&gt;DictReader()&lt;/code&gt; and &lt;code&gt;DictWriter()&lt;/code&gt; functions for reading from and writing to CSV files respectively.  &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#reading-csv-files-with-the-raw-dictreader-endraw-"&gt;
  &lt;/a&gt;
  Reading CSV files with the &lt;code&gt;DictReader()&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The next code block would show how to read from a CSV file using the &lt;code&gt;csv&lt;/code&gt; module's &lt;code&gt;DictReader()&lt;/code&gt; function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# open the file to be read in a context manager
&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'records.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

  &lt;span class="c1"&gt;# create a DictReader object using the DictReader function
&lt;/span&gt;  &lt;span class="n"&gt;csv_dict_reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DictReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# iterate through DictReader object
&lt;/span&gt;  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;csv_dict_reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# print each line in the CSV file as an OrderedDict object
&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    OrderedDict([('first_name', 'John'), ('last_name', 'Doe'), ('email', 'john-doe@bogusemail.com')])
    OrderedDict([('first_name', 'Mary'), ('last_name', 'Smith-Robinson'), ('email', 'maryjacobs@bogusemail.com')])
    OrderedDict([('first_name', 'Dave'), ('last_name', 'Smith'), ('email', 'davesmith@bogusemail.com')])
    OrderedDict([('first_name', 'Jane'), ('last_name', 'Stuart'), ('email', 'janestuart@bogusemail.com')])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Reading from a CSV file using the &lt;code&gt;DictReader()&lt;/code&gt; function is very similar to using the &lt;code&gt;reader()&lt;/code&gt; function as shown in the code block above.&lt;br&gt;&lt;br&gt;
The first and obvious difference is that the &lt;code&gt;DictReader()&lt;/code&gt; function is used in place of the &lt;code&gt;reader()&lt;/code&gt; function, thereby returning a &lt;code&gt;DictReader&lt;/code&gt; object, as opposed to the &lt;code&gt;reader&lt;/code&gt; object of the &lt;code&gt;reader()&lt;/code&gt; function.&lt;br&gt;&lt;br&gt;
The second difference would be iterating through the &lt;code&gt;DictReader&lt;/code&gt; object an &lt;code&gt;OrderedDict&lt;/code&gt; object is returned for each line in the CSV file, as opposed to a &lt;code&gt;list&lt;/code&gt; object from a &lt;code&gt;reader&lt;/code&gt; object.&lt;br&gt;&lt;br&gt;
Due to the &lt;code&gt;OrderedDict&lt;/code&gt; object returned for each line in the CSV file, it makes it easy to index field values, as it would be indexed by the field headers rather than ambiguous index numbers.&lt;br&gt;&lt;br&gt;
A use-case is illustrated in the code block below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# open CSV file in a context manager
&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'records.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

  &lt;span class="c1"&gt;# create a DictReader object
&lt;/span&gt;  &lt;span class="n"&gt;csv_dict_reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DictReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# iterate through DictReader object
&lt;/span&gt;  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;csv_dict_reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# get field values for the email field only
&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    john-doe@bogusemail.com
    maryjacobs@bogusemail.com
    davesmith@bogusemail.com
    janestuart@bogusemail.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code block prints only the field values under the &lt;em&gt;email&lt;/em&gt; header, by indexing with the field header - &lt;em&gt;'email'&lt;/em&gt;. This substantially improves code readability, due to how explicit it is.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#writing-to-csv-files-using-the-raw-dictwriter-endraw-"&gt;
  &lt;/a&gt;
  Writing to CSV files using the &lt;code&gt;DictWriter()&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# open CSV file to read comma separated values from it
&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'records.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# create DictReader object using the DictReader function
&lt;/span&gt;  &lt;span class="n"&gt;csv_dict_reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DictReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# open new CSV file to write comma separated values into it
&lt;/span&gt;  &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'new_records.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;new_csv_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="c1"&gt;# create a list of the field names or headers of the field values that would be written to the file
&lt;/span&gt;    &lt;span class="n"&gt;field_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'first_name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'last_name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="c1"&gt;# create a DictWriter object using the DictWriter() function.
&lt;/span&gt;    &lt;span class="c1"&gt;# assign the field_names list above to the fieldnames parameter of the function
&lt;/span&gt;    &lt;span class="c1"&gt;# pass a tab character as the delimiting character
&lt;/span&gt;    &lt;span class="n"&gt;csv_dict_writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DictWriter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_csv_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fieldnames&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;field_names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# write the field header into the CSV file
&lt;/span&gt;    &lt;span class="n"&gt;csv_dict_writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writeheader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# iterate through the values read from the previous file
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;csv_dict_reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# write the comma separated values to the new CSV file
&lt;/span&gt;      &lt;span class="n"&gt;csv_dict_writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output-file"&gt;
  &lt;/a&gt;
  Output file:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qRmtmUZo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pzwjfdhszr5hmrw1865f.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qRmtmUZo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pzwjfdhszr5hmrw1865f.PNG" alt="new_records_2"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The code block above would read comma-separated values from one CSV file, and write these values into another CSV file, separating each field value in the new CSV file by a tab character. &lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;DictWriter()&lt;/code&gt; function is very similar to using the &lt;code&gt;writer()&lt;/code&gt; function, significant differences to be noted would be explained.&lt;/p&gt;

&lt;p&gt;Firstly, after opening the second CSV file for writing (within the second context manager), a list referenced by variable name field_names was created, the list items are the field headers or field names of the comma-separated values that would be written into the new CSV file, this explains why it is passed as an argument to the &lt;code&gt;DictWriter()&lt;/code&gt; function, by assigning it to the &lt;code&gt;fieldnames=&lt;/code&gt; parameter.  &lt;/p&gt;

&lt;p&gt;Secondly, after calling the &lt;code&gt;DictWriter()&lt;/code&gt; function, the next line contains a method of the &lt;code&gt;DictWriter&lt;/code&gt; object created in the previous line, the &lt;code&gt;writeheader()&lt;/code&gt; method, this just makes sure that the field headers or field names are included when the comma-separated values are written, field headers are written to the top of the CSV file.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Hopefully, the article has been able to put into perspective how easy it is to handle CSV files in Python, thanks to the &lt;code&gt;csv&lt;/code&gt; module, and further usage of concepts and methods explained should be a walk in the park.  &lt;/p&gt;

&lt;p&gt;If the CSV files would be worked with in a data-science-focused setting, using the &lt;code&gt;csv&lt;/code&gt; module is not advisable, the &lt;code&gt;pandas&lt;/code&gt; library should come in handy in such situations, as it contains functions and objects that are better suited for such tasks.&lt;br&gt;&lt;br&gt;
Although the objects that are very much compatible with pandas functions may be difficult to handle in a traditional Python program.&lt;br&gt;&lt;br&gt;
It should also be clear at this point why the traditional &lt;code&gt;read()&lt;/code&gt;, &lt;code&gt;write()&lt;/code&gt; methods would not be feasible when handling CSV files.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hopefully-youve-learnt-how-to"&gt;
  &lt;/a&gt;
  Hopefully, you've learnt how to-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;read data from CSV files&lt;/li&gt;
&lt;li&gt;write to CSV files&lt;/li&gt;
&lt;li&gt;use dictionary readers to intuitively manipulate CSV files.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#other-resources"&gt;
  &lt;/a&gt;
  Other resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/csv.html"&gt;Python documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=YYXdXT2l-Gg&amp;amp;list=PL-osiE80TeTt2d9bfVyTiXJA-UTHn6WwU"&gt;Corey Schafer Series&lt;/a&gt; on youtube.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, connect with me on &lt;a href="https://twitter.com/__0th__"&gt;Twitter&lt;/a&gt; and &lt;a href="https://linkedin.com/in/0th"&gt;LinkedIn&lt;/a&gt;, let's vibe ‚úåüèΩ.&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>codenewbie</category>
      <category>programming</category>
    </item>
    <item>
      <title>Newsletter sharing font &amp; design tips üé®</title>
      <author>Hua</author>
      <pubDate>Fri, 17 Sep 2021 02:10:14 +0000</pubDate>
      <link>https://dev.to/huatweets/newsletter-sharing-font-design-tips-22lg</link>
      <guid>https://dev.to/huatweets/newsletter-sharing-font-design-tips-22lg</guid>
      <description>&lt;p&gt;Hi everyone! I'm Hua and I run a design tool startup called Typogram! As part of my startup, I create FontDiscovery, a digestible weekly newsletter with fonts, colors, and design tips to help makers step up their game in marketing and get creative! If you feel like checking it out, you can subscribe &lt;a href="https://fonts.substack.com/"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>design</category>
      <category>startup</category>
      <category>saas</category>
      <category>fonts</category>
    </item>
    <item>
      <title>Cheat Sheet for C++ </title>
      <author>Bhagya Mudgal</author>
      <pubDate>Fri, 17 Sep 2021 01:54:29 +0000</pubDate>
      <link>https://dev.to/bhagyamudgal/cheat-sheet-for-c-ljg</link>
      <guid>https://dev.to/bhagyamudgal/cheat-sheet-for-c-ljg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#basics"&gt;
  &lt;/a&gt;
  Basics
&lt;/h2&gt;

&lt;p&gt;Basic syntax and functions from the C++ programming language.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-boilerplate"&gt;
  &lt;/a&gt;
  1. Boilerplate
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Hi, I am Bhagya Mudgal"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-cout-ltlt"&gt;
  &lt;/a&gt;
  2. cout &amp;lt;&amp;lt;
&lt;/h3&gt;

&lt;p&gt;It prints output on the screen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"This is C++ Programming"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-cin-gtgt"&gt;
  &lt;/a&gt;
  3. cin &amp;gt;&amp;gt;
&lt;/h3&gt;

&lt;p&gt;It takes input from the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;cin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;variable_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#data-types"&gt;
  &lt;/a&gt;
  Data types
&lt;/h2&gt;

&lt;p&gt;The data type is the type of data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-raw-char-endraw-"&gt;
  &lt;/a&gt;
  1. &lt;code&gt;char&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Typically a one byte. It is an character type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;variable_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-raw-int-endraw-"&gt;
  &lt;/a&gt;
  2. &lt;code&gt;int&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Size depends on compiler, 2 bytes in 32-bit compiler and 4 bytes in 54-bit compiler.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;variable_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-raw-float-endraw-"&gt;
  &lt;/a&gt;
  3. &lt;code&gt;float&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;A single-precision floating-point value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;variable_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-raw-double-endraw-"&gt;
  &lt;/a&gt;
  4. &lt;code&gt;double&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;A double-precision floating-point value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;variable_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-raw-void-endraw-"&gt;
  &lt;/a&gt;
  5. &lt;code&gt;void&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Represents the absence of the type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-raw-bool-endraw-"&gt;
  &lt;/a&gt;
  6. &lt;code&gt;bool&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Represent Boolean value i.e. either true or false.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#escape-sequences"&gt;
  &lt;/a&gt;
  Escape Sequences
&lt;/h2&gt;

&lt;p&gt;In computer science, an escape sequence is a combination of characters that has a meaning other than the literal characters contained therein.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-alarm-or-beep"&gt;
  &lt;/a&gt;
  1. Alarm or beep
&lt;/h3&gt;

&lt;p&gt;It produces a beep sound.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-backspace"&gt;
  &lt;/a&gt;
  2. Backspace
&lt;/h3&gt;

&lt;p&gt;It adds a backspace.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-newline"&gt;
  &lt;/a&gt;
  3. Newline
&lt;/h3&gt;

&lt;p&gt;Newline Character.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-carriage-return"&gt;
  &lt;/a&gt;
  4. Carriage return
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-tab"&gt;
  &lt;/a&gt;
  5. Tab
&lt;/h3&gt;

&lt;p&gt;It gives a tab space.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-backslash"&gt;
  &lt;/a&gt;
  6. Backslash
&lt;/h3&gt;

&lt;p&gt;It adds a backslash.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="err"&gt;\&lt;/span&gt;\
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#7-single-quote"&gt;
  &lt;/a&gt;
  7. Single quote
&lt;/h3&gt;

&lt;p&gt;It adds a single quotation mark.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="err"&gt;\'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#8-question-mark"&gt;
  &lt;/a&gt;
  8. Question mark
&lt;/h3&gt;

&lt;p&gt;It adds a question mark.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#9-octal-number"&gt;
  &lt;/a&gt;
  9. Octal Number
&lt;/h3&gt;

&lt;p&gt;It represents the value of an octal number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;nnn&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#10-hexadecimal-number"&gt;
  &lt;/a&gt;
  10. Hexadecimal Number
&lt;/h3&gt;

&lt;p&gt;It represents the value of a hexadecimal number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;xhh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#11-null"&gt;
  &lt;/a&gt;
  11. Null
&lt;/h3&gt;

&lt;p&gt;The null character is usually used to terminate a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#comments"&gt;
  &lt;/a&gt;
  Comments
&lt;/h2&gt;

&lt;p&gt;A comment is a code that is not executed by the compiler, and the programmer uses it to explain the code where needed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-single-line-comment"&gt;
  &lt;/a&gt;
  1. Single line comment
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// It's a single line comment&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-multiline-comment"&gt;
  &lt;/a&gt;
  2. Multi-line comment
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* It's a 
multi-line
comment
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#strings"&gt;
  &lt;/a&gt;
  Strings
&lt;/h2&gt;

&lt;p&gt;It is a collection of characters surrounded by double quotes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-declaring-string"&gt;
  &lt;/a&gt;
  1. Declaring String
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Include the string library&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;string&amp;gt;
&lt;/span&gt;&lt;span class="c1"&gt;// String variable&lt;/span&gt;
&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;variable1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-raw-append-endraw-function"&gt;
  &lt;/a&gt;
  2. &lt;code&gt;append()&lt;/code&gt; function
&lt;/h3&gt;

&lt;p&gt;It is used to concatenate two strings&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Bhagya "&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Mudgal"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;fullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Output: BhagyaMudgal&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-raw-length-endraw-function"&gt;
  &lt;/a&gt;
  3. &lt;code&gt;length()&lt;/code&gt; function
&lt;/h3&gt;

&lt;p&gt;It returns the length of the string&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Bhagya Mudgal"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"The length of the string is: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Output: The length of the string is: 13&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-accessing-and-changing-string-characters"&gt;
  &lt;/a&gt;
  4. Accessing and changing string characters
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'i'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Output: Hillo World&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#maths"&gt;
  &lt;/a&gt;
  Maths
&lt;/h2&gt;

&lt;p&gt;C++ provides some built-in math functions that help the programmer to perform mathematical operations efficiently.&lt;/p&gt;

&lt;p&gt;To use functions these functions first include &lt;code&gt;cmath&lt;/code&gt; in your program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;cmath&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#1-raw-max-endraw-function"&gt;
  &lt;/a&gt;
  1. &lt;code&gt;max()&lt;/code&gt; function
&lt;/h3&gt;

&lt;p&gt;It returns the larger value among the given two values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Output: 150&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-raw-min-endraw-function"&gt;
  &lt;/a&gt;
  2. &lt;code&gt;min()&lt;/code&gt; function
&lt;/h3&gt;

&lt;p&gt;It returns the smaller value among the given two values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Output: 75&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-raw-sqrt-endraw-function"&gt;
  &lt;/a&gt;
  3. &lt;code&gt;sqrt()&lt;/code&gt; function
&lt;/h3&gt;

&lt;p&gt;It returns the square root of the given number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Output: 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-raw-ceil-endraw-function"&gt;
  &lt;/a&gt;
  4. &lt;code&gt;ceil()&lt;/code&gt; function
&lt;/h3&gt;

&lt;p&gt;It returns the value of x rounded up to its nearest integer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Output: 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-raw-floor-endraw-function"&gt;
  &lt;/a&gt;
  5. &lt;code&gt;floor()&lt;/code&gt; function
&lt;/h3&gt;

&lt;p&gt;It returns the value of x rounded down to its nearest integer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Output: 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-raw-pow-endraw-function"&gt;
  &lt;/a&gt;
  6. &lt;code&gt;pow()&lt;/code&gt; function
&lt;/h3&gt;

&lt;p&gt;It returns the value of x to the power of y.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Output: 25&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#control-statements"&gt;
  &lt;/a&gt;
  Control Statements
&lt;/h2&gt;

&lt;p&gt;Conditional statements are used to perform operations based on some condition.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-raw-if-endraw-statement"&gt;
  &lt;/a&gt;
  1. &lt;code&gt;if&lt;/code&gt; Statement
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// This block of code will get executed, if the condition is True&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-raw-ifelse-endraw-statement"&gt;
  &lt;/a&gt;
  2. &lt;code&gt;if-else&lt;/code&gt; Statement
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// If condition is True then this block will get executed&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// If condition is False then this block will get executed&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-raw-ifelse-if-endraw-statement"&gt;
  &lt;/a&gt;
  3. &lt;code&gt;if-else if&lt;/code&gt; Statement
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// Statements;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nf"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="c1"&gt;// Statements;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// Statements&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-ternary-operator"&gt;
  &lt;/a&gt;
  4. Ternary Operator
&lt;/h3&gt;

&lt;p&gt;It is shorthand of an &lt;code&gt;if-else&lt;/code&gt; statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;expressionTrue&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;expressionFalse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-switch-case-statement"&gt;
  &lt;/a&gt;
  5. Switch Case Statement
&lt;/h3&gt;

&lt;p&gt;It allows a variable to be tested for equality against a list of values (cases).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;statement1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                          &lt;span class="n"&gt;statement2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                          &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;statement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                          &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nl"&gt;default:&lt;/span&gt; &lt;span class="n"&gt;statement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#iterative-statements-known-as-loops"&gt;
  &lt;/a&gt;
  Iterative Statements known as Loops
&lt;/h2&gt;

&lt;p&gt;Iterative statements facilitate programmers to execute any block of code lines repeatedly and can be controlled as per conditions added by the programmer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-raw-while-endraw-loop"&gt;
  &lt;/a&gt;
  1. &lt;code&gt;while&lt;/code&gt; Loop
&lt;/h3&gt;

&lt;p&gt;It iterates the block of code as long as a specified condition is True&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* condition */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cm"&gt;/* code block to be executed */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-raw-dowhile-endraw-loop"&gt;
  &lt;/a&gt;
  2. &lt;code&gt;do-while&lt;/code&gt; loop
&lt;/h3&gt;

&lt;p&gt;It is an exit controlled loop. It is very similar to the while loop with one difference, i.e., the body of the do-while loop is executed at least once even if the condition is False&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cm"&gt;/* code */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* condition */&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-raw-for-endraw-loop"&gt;
  &lt;/a&gt;
  3. &lt;code&gt;for&lt;/code&gt; loop
&lt;/h3&gt;

&lt;p&gt;It is used to iterate the statements or a part of the program several times. It is frequently used to traverse the data structures like the array and linked list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cm"&gt;/* code */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-break-statement"&gt;
  &lt;/a&gt;
  4. Break Statement
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;break&lt;/code&gt; keyword inside the loop is used to terminate the loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-continue-statement"&gt;
  &lt;/a&gt;
  5. Continue Statement
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;continue&lt;/code&gt; keyword skips the rest of the current iteration of the loop and returns to the starting point of the loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;Reference is an alias for an already existing variable. Once it is initialized to a variable, it cannot be changed to refer to another variable. So, it's a const pointer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-references"&gt;
  &lt;/a&gt;
  Creating References
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Value1"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// var1 variable&lt;/span&gt;
&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;var2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// reference to var1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#pointers"&gt;
  &lt;/a&gt;
  Pointers
&lt;/h2&gt;

&lt;p&gt;Pointer is a variable that holds the memory address of another variable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#declaration"&gt;
  &lt;/a&gt;
  Declaration
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;datatype&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;var_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;var_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;variable2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h2&gt;

&lt;p&gt;Functions are used to divide an extensive program into smaller pieces. It can be called multiple times to provide reusability and modularity to the program.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-function-definition"&gt;
  &lt;/a&gt;
  1. Function Definition
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;return_type&lt;/span&gt; &lt;span class="nf"&gt;function_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_type&lt;/span&gt; &lt;span class="n"&gt;parameter&lt;/span&gt;&lt;span class="p"&gt;...){&lt;/span&gt;
&lt;span class="c1"&gt;//code to be executed &lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-function-call"&gt;
  &lt;/a&gt;
  2. Function Call
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;function_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#recursion"&gt;
  &lt;/a&gt;
  Recursion
&lt;/h2&gt;

&lt;p&gt;Recursion is when a function calls a copy of itself to work on a minor problem. And the function that calls itself is known as the Recursive function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;recurse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;recurse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#objectoriented-programming"&gt;
  &lt;/a&gt;
  Object-Oriented Programming
&lt;/h2&gt;

&lt;p&gt;It is a programming approach that primarily focuses on using objects and classes. The objects can be any real-world entities.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-raw-class-endraw-"&gt;
  &lt;/a&gt;
  1. &lt;code&gt;class&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;A class in C++ is a user-defined type or data structure declared with keyword class that has data and functions as its members whose access is governed by the three access specifiers private, protected or public. By default access to members of a C++ class is private.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Class_name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt; &lt;span class="c1"&gt;// Access specifier&lt;/span&gt;
&lt;span class="c1"&gt;// fields&lt;/span&gt;
&lt;span class="c1"&gt;// functions&lt;/span&gt;
&lt;span class="c1"&gt;// blocks&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-raw-object-endraw-"&gt;
  &lt;/a&gt;
  2. &lt;code&gt;object&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;It is an instance of a class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;Class_name&lt;/span&gt; &lt;span class="n"&gt;ObjectName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-constructors"&gt;
  &lt;/a&gt;
  3. Constructors
&lt;/h3&gt;

&lt;p&gt;It is a special method that is called automatically as soon as the object is created.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;className&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// The class&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt; &lt;span class="c1"&gt;// Access specifier&lt;/span&gt;
&lt;span class="n"&gt;className&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// Constructor&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Code With Harry"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;className&lt;/span&gt; &lt;span class="n"&gt;obj_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-encapsulation"&gt;
  &lt;/a&gt;
  4. Encapsulation
&lt;/h3&gt;

&lt;p&gt;Data encapsulation is a mechanism of bundling the data, and the functions that use them and data abstraction is a mechanism of exposing only the interfaces and hiding the implementation details from the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&amp;lt;iostream&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExampleEncap&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;private:&lt;/span&gt;
&lt;span class="cm"&gt;/* Since we have marked these data members private, 
* any entity outside this class cannot access these 
* data members directly, they have to use getter and 
* setter functions. 
*/&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
&lt;span class="cm"&gt;/* Getter functions to get the value of data members. 
* Since these functions are public, they can be accessed 
* outside the class, thus provide the access to data members 
* through them 
*/&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;getNum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;getCh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/* Setter functions, they are called for assigning the values 
* to the private data members. 
*/&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;setNum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;setCh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
&lt;span class="n"&gt;ExampleEncap&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setNum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setCh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getNum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getCh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#file-handling"&gt;
  &lt;/a&gt;
  File Handling
&lt;/h2&gt;

&lt;p&gt;File handling refers to reading or writing data from files. C++ provides some functions that allow us to manipulate data in the files.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-creating-and-writing-to-a-text-file"&gt;
  &lt;/a&gt;
  1. Creating and writing to a text file
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;fstream&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// Create and open a text file&lt;/span&gt;
&lt;span class="n"&gt;ofstream&lt;/span&gt; &lt;span class="n"&gt;MyFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"filename.txt"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Write to the file&lt;/span&gt;
&lt;span class="n"&gt;MyFile&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"File Handling in C++"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Close the file&lt;/span&gt;
&lt;span class="n"&gt;MyFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-reading-a-file"&gt;
  &lt;/a&gt;
  2. Reading a file
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;getline()&lt;/code&gt; function allows us to read the file line by line&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;getline&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-opening-a-file"&gt;
  &lt;/a&gt;
  3. Opening a File
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;open()&lt;/code&gt; method opens a file in the C++ program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ios&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;openmode&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#openmodes"&gt;
  &lt;/a&gt;
  openmodes:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;in&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Opens the file to read(default for ifstream).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fstream&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;code&gt;out&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Opens the file to write(default for ofstream).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fstream&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;binary&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Opens the file in binary mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fstream&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Opens the file and appends all the outputs at the end.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fstream&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;ate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Opens the file and moves the control to the end of the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fstream&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;trunc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Removes the data in the existing file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fstream&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;trunc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;nocreate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Opens the file only if it already exists.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fstream&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;nocreate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;noreplace&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Opens the file only if it does not already exist.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fstream&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;noreplace&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-closing-a-file"&gt;
  &lt;/a&gt;
  4. Closing a file
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;close()&lt;/code&gt; method closes the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;myfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#exception-handling"&gt;
  &lt;/a&gt;
  Exception Handling
&lt;/h2&gt;

&lt;p&gt;An exception is an unusual condition that results in an interruption in the flow of the program.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#try-and-catch-block"&gt;
  &lt;/a&gt;
  try and catch block
&lt;/h3&gt;

&lt;p&gt;A basic try-catch block in python. When the try block throws an error, the control goes to the catch block.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// code to try&lt;/span&gt;
&lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// If a problem arises, then throw an exception&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// Block of code to handle errors&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;I hope this C++ Cheat Sheet will help you and save your time.&lt;/p&gt;

&lt;p&gt;Feel free to connect with me on &lt;a href="https://bit.ly/3AgR0MT"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href="https://bit.ly/2YZxZRq"&gt;Instagram&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To know more about me and my projects visit my &lt;a href="https://bit.ly/3zOlSUS"&gt;Portfolio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you enjoyed this post, you can support me and &lt;a href="https://bit.ly/3nyg52d"&gt;Buy Me A Coffee&lt;/a&gt;. It encourages me to write more informational and useful content in the future.&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>programming</category>
      <category>cheatsheet</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>part 3: 5 cool css properties</title>
      <author>Aya Bouchiha</author>
      <pubDate>Fri, 17 Sep 2021 01:02:37 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/part-3-5-cool-css-properties-lag</link>
      <guid>https://dev.to/ayabouchiha/part-3-5-cool-css-properties-lag</guid>
      <description>&lt;p&gt;Hi, I'm &lt;a href="//developer.aya.b@gmail.com"&gt;Aya Bouchiha&lt;/a&gt;, and this is part 3 of 5 cool CSS properties.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/5-cool-css-properties-part-1-nkg/"&gt;part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/part-2-5-cool-css-properties-bdl"&gt;part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#word-spacing"&gt;
  &lt;/a&gt;
  word spacing
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;word-spacing&lt;/strong&gt;: specify the space between words.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Aya_Bouchiha/embed/jOwYdXq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lineheight"&gt;
  &lt;/a&gt;
  line-height
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;line-height&lt;/strong&gt;: specifies the line-height of specified content.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Aya_Bouchiha/embed/NWgXoJG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#objectfit"&gt;
  &lt;/a&gt;
  object-fit
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;object-fit&lt;/strong&gt;: specifies how an image, video should be displayed and resized. &lt;a href="https://www.w3schools.com/cssref/css3_pr_object-fit.asp"&gt;more info&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Aya_Bouchiha/embed/wvepOBK?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#letterspacing"&gt;
  &lt;/a&gt;
  letter-spacing
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;letter-spacing&lt;/strong&gt;: specifies the space between the letters.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Aya_Bouchiha/embed/dyRJwyY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cursor"&gt;
  &lt;/a&gt;
  cursor
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;cursor&lt;/strong&gt;: specify the cursor type.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/cssref/pr_class_cursor.asp"&gt;all cursor types&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Aya_Bouchiha/embed/vYZpvXy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;cursor&lt;/strong&gt;: specify the cursor type.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;letter-spacing&lt;/strong&gt;: specifies the space between the letters.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;object-fit&lt;/strong&gt;: specifies how an image, video should be displayed and resized.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;line-height&lt;/strong&gt;: specifies the line-height of specified content.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;word-spacing&lt;/strong&gt;: specify the space between words.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#suggested-posts"&gt;
  &lt;/a&gt;
  Suggested Posts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/5-cool-css-properties-part-1-nkg/"&gt;part 1: (5 cool CSS cool properties)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/part-2-5-cool-css-properties-bdl"&gt;part 2: (5 cool CSS cool properties)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/57-essential-html-tags-to-know-as-a-beginnert-1f3f"&gt;57 Essential HTML Tags To Know As A Beginner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/5-html-tags-that-almost-nobody-knows-5p5"&gt;part-1: 5 HTML Tags That Almost Nobody Knows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/part-2-5-html-tags-that-almost-nobody-knows-nj8"&gt;Part-2: 5 HTML Tags That Almost Nobody Knows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have a great day!&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to create a Profile README for your Organisation</title>
      <author>Michelle Mannering</author>
      <pubDate>Fri, 17 Sep 2021 00:59:03 +0000</pubDate>
      <link>https://dev.to/github/how-to-create-a-profile-readme-for-your-organisation-g2</link>
      <guid>https://dev.to/github/how-to-create-a-profile-readme-for-your-organisation-g2</guid>
      <description>&lt;p&gt;You've heard, seen, and probably have your own GitHub Profile README. Did you know you can now do the same for an organisation?&lt;/p&gt;

&lt;p&gt;If you are an org maintainer or owner, you can create an organisation profile README that will appear on your organisation's home page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-create-github-folder"&gt;
  &lt;/a&gt;
  Step 1. Create .github folder
&lt;/h2&gt;

&lt;p&gt;In order to create the organisation README, you'll need a special location for this README file. Just like a profile README is hosted under &lt;code&gt;github.com/YOUR_USERNAME/YOUR_USERNAME&lt;/code&gt;, an organisation README lives in a special place too.&lt;/p&gt;

&lt;ol&gt;1. Go to your organisation &lt;/ol&gt;

&lt;ol&gt;2. Click "New" to create a new repository &lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---cRaFXAt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57q1r8pbjad1tuqx40oa.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---cRaFXAt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57q1r8pbjad1tuqx40oa.JPG" alt="New"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;3. Type `.github` and you'll see that you've discovered a _secret_ &lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CDtCFGsY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n3mps0ecihax9ug2w9gq.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CDtCFGsY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n3mps0ecihax9ug2w9gq.JPG" alt="Secret"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;4. Make sure the repo is public and click "Create repository" &lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZAJ5QJep--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4pwot51zbe98lmenqr96.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZAJ5QJep--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4pwot51zbe98lmenqr96.JPG" alt="Create"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you have the repo setup for your organisation README.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-create-readmemd"&gt;
  &lt;/a&gt;
  Step 2. Create README.md
&lt;/h2&gt;

&lt;p&gt;Since organisation profile READMEs are a new feature, GitHub has added some fancy buttons to help make this step super easy.&lt;/p&gt;

&lt;p&gt;Now that you have your new &lt;code&gt;.github&lt;/code&gt; repo, go to this new repo you created in Step 1.&lt;/p&gt;

&lt;p&gt;On the right side of the screen, you should see a nice green box to help you set up your profile. Click the button that says "Add profile README".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EK5aTatn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rod6d6zpdy8ekphyjkyx.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EK5aTatn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rod6d6zpdy8ekphyjkyx.JPG" alt="Add"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will add a folder under your repo called profile, and will create a README.md file in this folder with some suggestions to help you get started.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7pCLh_71--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ylv30odw6r5d0l0qex1u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7pCLh_71--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ylv30odw6r5d0l0qex1u.png" alt="CleanShot 2021-09-16 at 10.47.19@2x"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also do this manually by clicking "Add file" --&amp;gt; "Create new file" and typing: &lt;code&gt;profile/readme.md&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a0zT4Gtj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ee50vw2efo9pgmmqeefx.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a0zT4Gtj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ee50vw2efo9pgmmqeefx.JPG" alt="README Profile folder"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that you have your README.md file created, it's time to add content!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-add-content"&gt;
  &lt;/a&gt;
  Step 3. Add content
&lt;/h2&gt;

&lt;p&gt;Like other READMEs, Profile READMEs are written in GitHub Flavoured Markdown. You can add text, images, gifs, and emojis. Add whatever you like to showcase your organisation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CRFdUJQ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wm5c91n4zzdkazvqx0m.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CRFdUJQ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wm5c91n4zzdkazvqx0m.JPG" alt="README"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out some of our Markdown updates:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/github" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pM6fmKzZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7fGFlBNG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2575/3da37f64-b46e-4fa5-bf86-01b63ba5f57b.png" alt="GitHub"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OwuwYieg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5RYSMLa0--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/397557/afcf6be6-f639-43ac-bdba-4a6056f7aada.jpeg" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/github/updates-to-github-markdown-making-it-easier-for-you-to-build-amazing-things-49fj" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Updates to GitHub Markdown - Making it easier for you to build amazing things&lt;/h2&gt;
      &lt;h3&gt;Michelle Mannering for GitHub „Éª Jan 8 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;As well as tips on creating your README file, complete with snippets of code for you to use:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/github" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pM6fmKzZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7fGFlBNG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2575/3da37f64-b46e-4fa5-bf86-01b63ba5f57b.png" alt="GitHub"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OwuwYieg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5RYSMLa0--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/397557/afcf6be6-f639-43ac-bdba-4a6056f7aada.jpeg" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/github/how-to-create-a-github-profile-readme-jha" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to create a GitHub Profile README&lt;/h2&gt;
      &lt;h3&gt;Michelle Mannering for GitHub „Éª Jul 13 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#githunt&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#markdown&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#step-4-commit"&gt;
  &lt;/a&gt;
  Step 4. Commit
&lt;/h2&gt;

&lt;p&gt;Once you're happy with your Markdown file, commit your code. Don't forget, you can use the "Preview" button while writing your README file to see how your Markdown will render.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yP-hxCcS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4ke4ltefxe9ad70his7.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yP-hxCcS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4ke4ltefxe9ad70his7.JPG" alt="Profile"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-show-it-off"&gt;
  &lt;/a&gt;
  Step 5. Show it off!
&lt;/h2&gt;

&lt;p&gt;Your organisation profile README is now be available on your organisation's Overview page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dbQEaloe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4cp27x74q0btqtz425xl.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dbQEaloe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4cp27x74q0btqtz425xl.JPG" alt="Profile README"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also check out other organisation profile READMEs. Do you have an organisation README setup? Drop the link below so we can all see it!&lt;/p&gt;

&lt;p&gt;If you want to find out more about org profile READMEs, &lt;a href="https://docs.github.com/en/organizations/collaborating-with-groups-in-organizations/customizing-your-organizations-profile"&gt;check out the GitHub Docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Check out our video on creating your org profile README:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/oQnJ6XYp_YM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>github</category>
      <category>opensource</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>ViteJS, Ionic Framework Beta v6, ReactJS And Capacitor Mobile Device Deployment</title>
      <author>Aaron K Saunders</author>
      <pubDate>Fri, 17 Sep 2021 00:53:03 +0000</pubDate>
      <link>https://dev.to/aaronksaunders/vitejs-ionic-framework-beta-v6-reactjs-and-capacitor-mobile-device-deployment-53e3</link>
      <guid>https://dev.to/aaronksaunders/vitejs-ionic-framework-beta-v6-reactjs-and-capacitor-mobile-device-deployment-53e3</guid>
      <description>&lt;p&gt;Since Ionic has announced the beta for v6, I wanted to see if I can start using Ionic Framework and Capacitor with &lt;a href="https://vitejs.dev/guide/#scaffolding-your-first-vite-project"&gt;ViteJS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Even if you don't use the &lt;a href="https://ionicframework.com/docs/react"&gt;Ionic ReactJS Components&lt;/a&gt;, this video shows you how you can deploy you ViteJS application to mobile devices using &lt;a href="https://capacitorjs.com/"&gt;Ionic Capacitor&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are looking for VueJS integration, I got you covered here. &lt;a href="https://www.youtube.com/watch?v=JnfAH1gXVdU"&gt;ViteJS Ionic Framework and VueJS&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this video, the approach I took is to follow the instructions for creating a ReactJS project in ViteJS and then add in the Ionic packages with npm and then pasted in the required styles and it worked!!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/uVjPBiNz5yk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-here"&gt;
  &lt;/a&gt;
  Start Here
&lt;/h2&gt;

&lt;p&gt;We are using the command &lt;code&gt;npm init vite@latest&lt;/code&gt; to get things rolling, see output below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Aarons-iMac:vite aaronksaunders&lt;span class="nv"&gt;$ &lt;/span&gt;npm init vite@latest
npx: installed 6 &lt;span class="k"&gt;in &lt;/span&gt;2.281s
‚úî Project name: ‚Ä¶ vite-ionic-react
‚úî Select a framework: ‚Ä∫ react
‚úî Select a variant: ‚Ä∫ react-ts

Scaffolding project &lt;span class="k"&gt;in&lt;/span&gt; /Users/aaronksaunders/dev/projects/vite/vite-ionic-react...

Done. Now run:

  &lt;span class="nb"&gt;cd &lt;/span&gt;vite-ionic-react
  npm &lt;span class="nb"&gt;install
  &lt;/span&gt;npm run dev

Aarons-iMac:vite aaronksaunders&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;vite-ionic-react/
Aarons-iMac:vite-ionic-react aaronksaunders&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install
&lt;/span&gt;Aarons-iMac:vite-ionic-react aaronksaunders&lt;span class="nv"&gt;$ &lt;/span&gt;npm i @ionic/react@next  @ionic/react-router@next react-router react-router-dom
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that the project is set up and running, we need to make it an Ionic React Project. Add some ionic specific code by replacing the existing code in &lt;code&gt;App.jsx&lt;/code&gt; with the code below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;logo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./logo.svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;IonContent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;IonPage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;IonRouterOutlet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;IonApp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;IonToolbar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;IonHeader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;IonButtons&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;IonBackButton&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;IonButton&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;IonTitle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;IonItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;IonLabel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@ionic/react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;IonReactRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@ionic/react-router&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Redirect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useHistory&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/* Core CSS required for Ionic components to work properly */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@ionic/react/css/core.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/* Basic CSS for apps built with Ionic */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@ionic/react/css/normalize.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@ionic/react/css/structure.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@ionic/react/css/typography.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/* Optional CSS utils that can be commented out */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@ionic/react/css/padding.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@ionic/react/css/float-elements.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@ionic/react/css/text-alignment.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@ionic/react/css/text-transformation.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@ionic/react/css/flex-utils.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@ionic/react/css/display.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonApp&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonReactRouter&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonRouterOutlet&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/home"&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;HomePage&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;exact&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/detail"&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;DetailPage&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;exact&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt; &lt;span class="na"&gt;exact&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Redirect&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/home"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonRouterOutlet&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonReactRouter&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonApp&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;HomePage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;history&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useHistory&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nextPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/detail&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonPage&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonHeader&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonToolbar&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonTitle&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonTitle&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonToolbar&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonHeader&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonContent&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"ion-padding"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;HOME PAGE&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonButton&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;nextPage&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;NEXT PAGE&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonContent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonPage&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;DetailPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonPage&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonHeader&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonToolbar&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonButtons&lt;/span&gt; &lt;span class="na"&gt;slot&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonBackButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonBackButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonButtons&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonTitle&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Detail Page&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonTitle&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonToolbar&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonHeader&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonContent&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"ion-padding"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;DETAIL&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonItem&lt;/span&gt; &lt;span class="na"&gt;details&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IonLabel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;More Information&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonLabel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonItem&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonContent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;IonPage&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Update the &lt;code&gt;index.html&lt;/code&gt;, replace the &lt;code&gt;viewport&lt;/code&gt; tag to make sure the page renders properly&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&amp;lt;meta
   &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"viewport"&lt;/span&gt;
   &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"viewport-fit=cover, width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"&lt;/span&gt;
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can run the app now to see that it is working before we install on device, type the following command in project directory&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;vite
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you should see your inoic project running with a Home Page and a Detail Page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-the-application-on-device"&gt;
  &lt;/a&gt;
  Running The Application On Device
&lt;/h2&gt;

&lt;p&gt;Add Capacitor to the project so we can deploy on device, I am just doing IOS here but a similar approach will work with Android&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @capacitor/core
npm &lt;span class="nb"&gt;install&lt;/span&gt; @capacitor/cli &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
npx cap init &lt;span class="nt"&gt;--web-dir&lt;/span&gt; dist
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then build app&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;vite build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now lets run on ios, first add the platform&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @capacitor/ios
npx cap add ios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then run the app&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx cap run ios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#running-capacitor-live-reload"&gt;
  &lt;/a&gt;
  Running Capacitor Live Reload
&lt;/h3&gt;

&lt;p&gt;make sure you select &lt;code&gt;custom&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ionic init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then modify the script section of the &lt;code&gt;package.json&lt;/code&gt; file. We need to do this so Ionic knows how to build the web application... there might be another way to accomplish this but I am not sure at this point. New code below is &lt;code&gt;"ionic:serve": "vite"&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vite"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vite build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"serve"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vite preview"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"ionic:serve"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vite"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can run the command below to run then application on device and have live reload working when you make changes in the website.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
ionic cap run ios &lt;span class="nt"&gt;--livereload&lt;/span&gt; &lt;span class="nt"&gt;--external&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>vite</category>
      <category>react</category>
      <category>ionic</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Trying to reach terminal constancy using ANSI only colors</title>
      <author>Cason Adams</author>
      <pubDate>Fri, 17 Sep 2021 00:23:20 +0000</pubDate>
      <link>https://dev.to/casonadams/trying-to-reach-terminal-constancy-using-ansi-only-colors-4kho</link>
      <guid>https://dev.to/casonadams/trying-to-reach-terminal-constancy-using-ansi-only-colors-4kho</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PEYke3GK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17ozspwl34iyelxlk9fl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PEYke3GK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17ozspwl34iyelxlk9fl.png" alt="light mode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yO7DHc3q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ly0mkvravq9cyaa9ie8c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yO7DHc3q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ly0mkvravq9cyaa9ie8c.png" alt="dark"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I really like spending as much of my day as a software engineer in the terminal.  I really wanted to get all the things to match colors, themes, etc.  Now keep in mind this doesn't always solve all the things but it is a good step forward.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#goal"&gt;
  &lt;/a&gt;
  Goal
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use terminal colors across vi, tmux, bat, fzf, and most other terminal applications.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#terminal-setup"&gt;
  &lt;/a&gt;
  Terminal setup
&lt;/h2&gt;

&lt;p&gt;I really like the &lt;a href="https://github.com/alacritty/alacritty"&gt;alacritty&lt;/a&gt; terminal and I needed to find a color style that works for me.  I ended up with something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;schemes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;dark&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;dark&lt;/span&gt;
    &lt;span class="na"&gt;primary&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#2B2B2B"&lt;/span&gt;
      &lt;span class="na"&gt;foreground&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#BBBBBB"&lt;/span&gt;

    &lt;span class="na"&gt;normal&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;black&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#252525"&lt;/span&gt;
      &lt;span class="na"&gt;red&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#DB5451"&lt;/span&gt;
      &lt;span class="na"&gt;green&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#548C26"&lt;/span&gt;
      &lt;span class="na"&gt;yellow&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#A89022"&lt;/span&gt;
      &lt;span class="na"&gt;blue&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#3A91CF"&lt;/span&gt;
      &lt;span class="na"&gt;magenta&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#A575BA"&lt;/span&gt;
      &lt;span class="na"&gt;cyan&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#009191"&lt;/span&gt;
      &lt;span class="na"&gt;white&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#CCCCCC"&lt;/span&gt;
    &lt;span class="na"&gt;bright&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;black&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#666666"&lt;/span&gt;
      &lt;span class="na"&gt;white&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#FFFFFF"&lt;/span&gt;

  &lt;span class="na"&gt;light&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;light&lt;/span&gt;
    &lt;span class="na"&gt;primary&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#E2E2E2"&lt;/span&gt;
      &lt;span class="na"&gt;foreground&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#666666"&lt;/span&gt;

    &lt;span class="na"&gt;normal&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;black&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#FFFFFF"&lt;/span&gt;
      &lt;span class="na"&gt;red&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#DB5451"&lt;/span&gt;
      &lt;span class="na"&gt;green&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#548C26"&lt;/span&gt;
      &lt;span class="na"&gt;yellow&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#A89022"&lt;/span&gt;
      &lt;span class="na"&gt;blue&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#3A91CF"&lt;/span&gt;
      &lt;span class="na"&gt;magenta&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#A575BA"&lt;/span&gt;
      &lt;span class="na"&gt;cyan&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#009191"&lt;/span&gt;
      &lt;span class="na"&gt;white&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#AAAAAA"&lt;/span&gt;
    &lt;span class="na"&gt;bright&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;black&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#666666"&lt;/span&gt;
      &lt;span class="na"&gt;white&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#000000"&lt;/span&gt;

&lt;span class="na"&gt;colors&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*dark&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I can switch between &lt;code&gt;dark&lt;/code&gt; and &lt;code&gt;light&lt;/code&gt; mode by changing the &lt;code&gt;colors:&lt;/code&gt; value.  And because alacritty can do live reload of the config file.  A simple script to modify that value allows for light and dark mode switching via the command line.  And because I am using all ANSI colors for things everything changes in real time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vim-setup"&gt;
  &lt;/a&gt;
  Vim setup
&lt;/h2&gt;

&lt;p&gt;I created a &lt;a href="https://github.com/casonadams/vim-dim"&gt;color theme&lt;/a&gt; for vim based off &lt;a href="https://github.com/jeffkreeftmeijer/vim-dim"&gt;vim-dim&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using &lt;a href="https://github.com/junegunn/vim-plug"&gt;vim-plug&lt;/a&gt; I load the plugin like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;call&lt;/span&gt; plug#begin&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'~/.config/nvim/plugged'&lt;/span&gt;
  Plug &lt;span class="s1"&gt;'casonadams/vim-dim'&lt;/span&gt;
&lt;span class="k"&gt;call&lt;/span&gt; plug#end&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;colorscheme&lt;/span&gt; dim
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Be sure that &lt;code&gt;set termguicolors&lt;/code&gt; is not in the &lt;code&gt;vimrc&lt;/code&gt; or &lt;code&gt;init.vim&lt;/code&gt; file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shell-setup"&gt;
  &lt;/a&gt;
  shell setup
&lt;/h2&gt;

&lt;p&gt;I use &lt;a href="https://github.com/junegunn/fzf"&gt;fzf&lt;/a&gt; and &lt;a href="https://github.com/sharkdp/bat"&gt;bat&lt;/a&gt; for fuzzy searching to set it to use ANSI colors do the following in a bashrc or zshrc file.&lt;/p&gt;

&lt;p&gt;snippet&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;BAT_THEME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ansi"&lt;/span&gt;

&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;FZF_DEFAULT_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"
--inline-info &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;
--layout=reverse &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;
--ansi &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;
--color=16 &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;full working example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;BAT_THEME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ansi"&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;FZF_DEFAULT_COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"fd -uu"&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;FZF_CTRL_T_COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FZF_DEFAULT_COMMAND&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; --type file"&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;FZF_ALT_C_COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FZF_DEFAULT_COMMAND&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; --type directory"&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;FZF_DEFAULT_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"
--inline-info &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;
--layout=reverse &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;
--ansi &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;
--color=16 &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;
--preview-window=:hidden &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;
--preview '([[ -f {} ]] &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;
    &amp;amp;&amp;amp; (bat --style=numbers --color=always {} &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;
    || cat {})) &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;
    || ([[ -d {} ]] &amp;amp;&amp;amp; (tree -C {} | less)) &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;
    || echo {} 2&amp;gt; /dev/null | head -200' &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;
--bind '?:toggle-preview'
"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tmux-fun-iterm-dimming"&gt;
  &lt;/a&gt;
  tmux fun (iterm dimming)
&lt;/h2&gt;

&lt;p&gt;Modifying &lt;a href="https://github.com/tmux/tmux"&gt;tmux&lt;/a&gt; doesn't need to happen, but this is a fun trick to add using this color idea.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Currently this only looks good in dark mode
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight conf"&gt;&lt;code&gt;&lt;span class="n"&gt;set&lt;/span&gt; -&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;pane&lt;/span&gt;-&lt;span class="n"&gt;border&lt;/span&gt;-&lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="n"&gt;fg&lt;/span&gt;=&lt;span class="n"&gt;colour8&lt;/span&gt;,&lt;span class="n"&gt;bg&lt;/span&gt;=&lt;span class="n"&gt;colour237&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; -&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;pane&lt;/span&gt;-&lt;span class="n"&gt;active&lt;/span&gt;-&lt;span class="n"&gt;border&lt;/span&gt;-&lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="n"&gt;fg&lt;/span&gt;=&lt;span class="n"&gt;blue&lt;/span&gt;,&lt;span class="n"&gt;bg&lt;/span&gt;=&lt;span class="n"&gt;colour237&lt;/span&gt;

&lt;span class="n"&gt;set&lt;/span&gt;-&lt;span class="n"&gt;window&lt;/span&gt;-&lt;span class="n"&gt;option&lt;/span&gt; -&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;-&lt;span class="n"&gt;active&lt;/span&gt;-&lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="n"&gt;bg&lt;/span&gt;=&lt;span class="n"&gt;terminal&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt;-&lt;span class="n"&gt;window&lt;/span&gt;-&lt;span class="n"&gt;option&lt;/span&gt; -&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;-&lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="n"&gt;bg&lt;/span&gt;=&lt;span class="n"&gt;colour237&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5OgfDe-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06qf42lpjpdl69fr4qz2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5OgfDe-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06qf42lpjpdl69fr4qz2.png" alt="dim left"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7582g-9a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7y6jq1j1lkh7fi700625.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7582g-9a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7y6jq1j1lkh7fi700625.png" alt="dim right"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#full-tmux-color-settings-from-images"&gt;
  &lt;/a&gt;
  full tmux color settings from images
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight conf"&gt;&lt;code&gt;&lt;span class="c"&gt;######### THEME  ##########
&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt; -&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;-&lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="n"&gt;bg&lt;/span&gt;=&lt;span class="n"&gt;colour8&lt;/span&gt;,&lt;span class="n"&gt;fg&lt;/span&gt;=&lt;span class="n"&gt;colour7&lt;/span&gt;
&lt;span class="n"&gt;setw&lt;/span&gt; -&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;clock&lt;/span&gt;-&lt;span class="n"&gt;mode&lt;/span&gt;-&lt;span class="n"&gt;colour&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt;

&lt;span class="n"&gt;set&lt;/span&gt; -&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;-&lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="n"&gt;bg&lt;/span&gt;=&lt;span class="n"&gt;blue&lt;/span&gt;,&lt;span class="n"&gt;fg&lt;/span&gt;=&lt;span class="n"&gt;colour7&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; -&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;-&lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="n"&gt;bg&lt;/span&gt;=&lt;span class="n"&gt;colour8&lt;/span&gt;,&lt;span class="n"&gt;fg&lt;/span&gt;=&lt;span class="n"&gt;colour7&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; -&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;-&lt;span class="n"&gt;command&lt;/span&gt;-&lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="n"&gt;bg&lt;/span&gt;=&lt;span class="n"&gt;colour8&lt;/span&gt;,&lt;span class="n"&gt;fg&lt;/span&gt;=&lt;span class="n"&gt;colour7&lt;/span&gt;

&lt;span class="n"&gt;set&lt;/span&gt;-&lt;span class="n"&gt;option&lt;/span&gt; -&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;-&lt;span class="n"&gt;right&lt;/span&gt;-&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt;-&lt;span class="n"&gt;option&lt;/span&gt; -&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;-&lt;span class="n"&gt;left&lt;/span&gt;-&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; -&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;-&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="s2"&gt;" #{?pane_synchronized, ¬§ ,}#{?window_zoomed_flag, ‚Üï ,}[#S-#{window_active_clients}] "&lt;/span&gt;

&lt;span class="n"&gt;set&lt;/span&gt; -&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;-&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="s2"&gt;"#(cd #{pane_current_path}; git branch --show-current) #H "&lt;/span&gt;

&lt;span class="n"&gt;set&lt;/span&gt; -&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;pane&lt;/span&gt;-&lt;span class="n"&gt;border&lt;/span&gt;-&lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="n"&gt;fg&lt;/span&gt;=&lt;span class="n"&gt;colour8&lt;/span&gt;,&lt;span class="n"&gt;bg&lt;/span&gt;=&lt;span class="n"&gt;colour237&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; -&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;pane&lt;/span&gt;-&lt;span class="n"&gt;active&lt;/span&gt;-&lt;span class="n"&gt;border&lt;/span&gt;-&lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="n"&gt;fg&lt;/span&gt;=&lt;span class="n"&gt;blue&lt;/span&gt;,&lt;span class="n"&gt;bg&lt;/span&gt;=&lt;span class="n"&gt;colour237&lt;/span&gt;

&lt;span class="n"&gt;set&lt;/span&gt;-&lt;span class="n"&gt;window&lt;/span&gt;-&lt;span class="n"&gt;option&lt;/span&gt; -&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;-&lt;span class="n"&gt;active&lt;/span&gt;-&lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="n"&gt;bg&lt;/span&gt;=&lt;span class="n"&gt;terminal&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt;-&lt;span class="n"&gt;window&lt;/span&gt;-&lt;span class="n"&gt;option&lt;/span&gt; -&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;-&lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="n"&gt;bg&lt;/span&gt;=&lt;span class="n"&gt;colour237&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>vim</category>
      <category>tmux</category>
      <category>linux</category>
    </item>
    <item>
      <title>How do you use Git and GitHub everyday when working with a team?</title>
      <author>nphamvn</author>
      <pubDate>Fri, 17 Sep 2021 00:17:03 +0000</pubDate>
      <link>https://dev.to/nphamvn/how-do-you-use-git-and-github-everyday-when-working-with-a-team-39ej</link>
      <guid>https://dev.to/nphamvn/how-do-you-use-git-and-github-everyday-when-working-with-a-team-39ej</guid>
      <description>&lt;p&gt;Start from scratch to final, how are you using?&lt;br&gt;
When do you initialize git, commit first commit and so on?&lt;/p&gt;

</description>
      <category>github</category>
      <category>discuss</category>
    </item>
    <item>
      <title>MS Graph, Blazor WebAssembly and Azure Static Web Apps</title>
      <author>Justin Yoo</author>
      <pubDate>Fri, 17 Sep 2021 00:00:25 +0000</pubDate>
      <link>https://dev.to/azure/ms-graph-blazor-webassembly-and-azure-static-web-apps-3p1d</link>
      <guid>https://dev.to/azure/ms-graph-blazor-webassembly-and-azure-static-web-apps-3p1d</guid>
      <description>&lt;p&gt;&lt;a href="https://docs.microsoft.com/azure/static-web-apps/overview?WT.mc_id=dotnet-42714-juyoo"&gt;Azure Static Web Apps (ASWA)&lt;/a&gt; offers a straightforward &lt;a href="https://docs.microsoft.com/azure/static-web-apps/authentication-authorization?WT.mc_id=dotnet-42714-juyoo"&gt;authentication&lt;/a&gt; feature. With this feature, you don't need to write a complicating authentication logic by your hand and can sign in to ASWA. By the way, the authentication details from there only show whether you've logged in or not. If you need more information, you should do something more on your end. Throughout this post, I'm going to discuss how to access your user profile data stored in &lt;a href="https://docs.microsoft.com/azure/active-directory/fundamentals/active-directory-whatis?WT.mc_id=dotnet-42714-juyoo"&gt;Azure Active Directory (AAD)&lt;/a&gt; through &lt;a href="https://docs.microsoft.com/graph/overview?WT.mc_id=dotnet-42714-juyoo"&gt;Microsoft Graph&lt;/a&gt; from the &lt;a href="https://docs.microsoft.com/aspnet/core/blazor/?WT.mc_id=dotnet-42714-juyoo"&gt;Blazor WebAssembly (WASM)&lt;/a&gt; app running on an &lt;a href="https://docs.microsoft.com/azure/static-web-apps/overview?WT.mc_id=dotnet-42714-juyoo"&gt;ASWA&lt;/a&gt; instance.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can find the sample code used in this post on this &lt;a href="https://github.com/fusiondevkr/fusiondevkr"&gt;GitHub repository&lt;/a&gt; (docs in Korean).&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/fusiondevkr"&gt;
        fusiondevkr
      &lt;/a&gt; / &lt;a href="https://github.com/fusiondevkr/fusiondevkr"&gt;
        fusiondevkr
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      fusiondevkr Î∞±ÏóîÎìú ÏÑ∏ÌåÖ
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Office for Fusion Dev Korea&lt;/h1&gt;
&lt;p&gt;Fusion Dev Korea ÏóêÏÑú Ïö¥ÏòÅÌïòÎäî Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖòÏùÑ Í¥ÄÎ¶¨Ìï©ÎãàÎã§.&lt;/p&gt;
&lt;h2&gt;
Íµ¨Ï°∞&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;resources&lt;/code&gt;: Ïï†Ï†Ä Î¶¨ÏÜåÏä§Î•º Íµ¨ÏÑ±ÌïòÎäî ARM ÌÖúÌîåÎ¶ø Î∞è Biceps ÌÖúÌîåÎ¶ø ÌååÏùº&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;src&lt;/code&gt;: ÌîÑÎ°†Ìä∏ÏóîÎìú Î∞è Î∞±ÏóîÎìú Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;power/flow&lt;/code&gt;: ÌååÏõå Ïò§ÌÜ†Î©îÏù¥Ìä∏ ÏÜîÎ£®ÏÖò&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;power/apps&lt;/code&gt;: ÌååÏõå Ïï±Ïä§ ÏÜîÎ£®ÏÖò&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/fusiondevkr/fusiondevkr"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#retrieving-authentication-data-from-azure-static-web-apps"&gt;
  &lt;/a&gt;
  Retrieving Authentication Data from Azure Static Web Apps
&lt;/h2&gt;

&lt;p&gt;After publishing your &lt;a href="https://docs.microsoft.com/aspnet/core/blazor/?WT.mc_id=dotnet-42714-juyoo"&gt;Blazor WASM&lt;/a&gt; app to &lt;a href="https://docs.microsoft.com/azure/static-web-apps/overview?WT.mc_id=dotnet-42714-juyoo"&gt;ASWA&lt;/a&gt;, the page before log-in might look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fPdN6u6D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sa0blogs.blob.core.windows.net/devkimchi/2021/09/accessing-msgraph-from-blazor-wasm-running-on-aswa-01-en.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fPdN6u6D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sa0blogs.blob.core.windows.net/devkimchi/2021/09/accessing-msgraph-from-blazor-wasm-running-on-aswa-01-en.png" alt="Before log-in"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to use &lt;a href="https://docs.microsoft.com/azure/active-directory/fundamentals/active-directory-whatis?WT.mc_id=dotnet-42714-juyoo"&gt;AAD&lt;/a&gt; as your primary identity provider, add the link to the &lt;code&gt;Login&lt;/code&gt; HTML element.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;After the sign-in, you can retrieve your authentication details by calling the API endpoint like below. For brevity, I omitted unnecessary codes.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Here are the authentication details from the response:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;As mentioned above, there's only limited information available from the response. Therefore, if you need more user details, you should do some additional work on your end.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessing-user-data-through-microsoft-graph"&gt;
  &lt;/a&gt;
  Accessing User Data through Microsoft Graph
&lt;/h2&gt;

&lt;p&gt;You only know your email address used for log-in. Here are the facts about your logged-in details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You signed in through your tenant where your email belongs.&lt;/li&gt;
&lt;li&gt;The sign-in information &lt;strong&gt;TELLS&lt;/strong&gt; your email address used for log-in.&lt;/li&gt;
&lt;li&gt;The sign-in information &lt;strong&gt;DOESN'T TELL&lt;/strong&gt; the tenant information where you logged in.&lt;/li&gt;
&lt;li&gt;The sign-in information &lt;strong&gt;DOESN'T TELL&lt;/strong&gt; the tenant information where the ASWA is hosted.&lt;/li&gt;
&lt;li&gt;The sign-in information &lt;strong&gt;DOESN'T TELL&lt;/strong&gt; the tenant information where you want to access.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In other words, there are chances that all three tenants details ‚Äì the tenant where you logged in, the tenant hosting the ASWA instance, and the tenant where you want to access ‚Äì might be different from each other. All you know of my details are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You logged into a tenant, and&lt;/li&gt;
&lt;li&gt;You only know my email address used for log-in.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then, how can you know your user details from the tenant that you want to access?&lt;/p&gt;

&lt;p&gt;First of all, you need to get permission to get the details to the tenant. Although you signed in to ASWA, it doesn't mean you have enough permission to access the resources. Because &lt;a href="https://docs.microsoft.com/azure/static-web-apps/overview?WT.mc_id=dotnet-42714-juyoo"&gt;ASWA&lt;/a&gt; offers &lt;a href="https://docs.microsoft.com/azure/static-web-apps/apis?WT.mc_id=dotnet-42714-juyoo"&gt;Azure Functions&lt;/a&gt; as its facade API, let's use this feature.&lt;/p&gt;

&lt;p&gt;When calling the facade API from the Blazor WASM app side, it always includes the auth details through the request header of &lt;code&gt;x-ms-client-principal&lt;/code&gt;. The information is the Base64 encoded string, which looks like this:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Therefore, decode the string and deserialise it to get the email address for log-in. Here's a POCO class for deserialisation.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;With this POCO class, deserialise the header value and get the email address you're going to utilise.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;All the plumbing to get the user details is done. Let's move on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#registering-app-on-azure-active-directory"&gt;
  &lt;/a&gt;
  Registering App on Azure Active Directory
&lt;/h2&gt;

&lt;p&gt;The next step is to &lt;a href="https://docs.microsoft.com/azure/active-directory/develop/quickstart-register-app?WT.mc_id=dotnet-42714-juyoo"&gt;register an app&lt;/a&gt; on &lt;a href="https://docs.microsoft.com/azure/active-directory/fundamentals/active-directory-whatis?WT.mc_id=dotnet-42714-juyoo"&gt;AAD&lt;/a&gt; through Azure Portal. I'm not going to go further for this step but will give you &lt;a href="https://docs.microsoft.com/azure/active-directory/develop/quickstart-register-app?WT.mc_id=dotnet-42714-juyoo"&gt;this document&lt;/a&gt; to get it done. Once you complete app registration, you should give it &lt;a href="https://docs.microsoft.com/azure/active-directory/develop/quickstart-configure-app-access-web-apis?WT.mc_id=dotnet-42714-juyoo#application-permission-to-microsoft-graph"&gt;appropriate roles and permissions&lt;/a&gt;, which is the &lt;a href="https://docs.microsoft.com/azure/active-directory/develop/quickstart-configure-app-access-web-apis?WT.mc_id=dotnet-42714-juyoo#application-permission-to-microsoft-graph"&gt;application permission&lt;/a&gt; instead of the delegate permission.  For example, &lt;code&gt;User.Read.All&lt;/code&gt; permission should be enough for this exercise.&lt;/p&gt;

&lt;p&gt;Once you complete this step, you'll have &lt;code&gt;TenantID&lt;/code&gt;, &lt;code&gt;ClientID&lt;/code&gt; and &lt;code&gt;ClientSecret&lt;/code&gt; information.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#microsoft-authentication-library-msal-for-net"&gt;
  &lt;/a&gt;
  Microsoft Authentication Library (MSAL) for .NET
&lt;/h2&gt;

&lt;p&gt;You first need to get an access token to retrieve your details stored on &lt;a href="https://docs.microsoft.com/azure/active-directory/fundamentals/active-directory-whatis?WT.mc_id=dotnet-42714-juyoo"&gt;AAD&lt;/a&gt;. There are many ways to get the token, but let's use the &lt;a href="https://docs.microsoft.com/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow?WT.mc_id=dotnet-42714-juyoo#get-a-token"&gt;client credential&lt;/a&gt; approach for this time. First, as we're using Blazor WASM, we need a NuGet package to install.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.nuget.org/packages/Microsoft.Identity.Client/"&gt;Microsoft.Identity.Client&lt;/a&gt;: &lt;code&gt;dotnet add package Microsoft.Identity.Client&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After installing the package, add several environment variables to &lt;code&gt;local.settings.json&lt;/code&gt;. Here are the details for authentication.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;To get the access token, write the code below. Without having to worry about the user interaction, simply use both ClientID and ClientSecret values, and you'll get the access token. For example, if you use the &lt;a href="https://docs.microsoft.com/dotnet/api/microsoft.identity.client.confidentialclientapplicationbuilder?WT.mc_id=dotnet-42714-juyoo"&gt;&lt;code&gt;ConfidentialClientApplicationBuilder&lt;/code&gt;&lt;/a&gt; class, you'll easily get the one (line #16-20).&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Once you have the access token in hand, you can use &lt;a href="https://docs.microsoft.com/graph/overview?WT.mc_id=dotnet-42714-juyoo"&gt;Microsoft Graph&lt;/a&gt; API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#microsoft-graph-api-for-net"&gt;
  &lt;/a&gt;
  Microsoft Graph API for .NET
&lt;/h2&gt;

&lt;p&gt;To use Microsoft Graph API, install another NuGet package:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.nuget.org/packages/Microsoft.Graph/"&gt;Microsoft.Graph&lt;/a&gt;: &lt;code&gt;dotnet add package Microsoft.Graph&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And here's the code to get the Graph API. Call the method written above, &lt;code&gt;GetAccessTokenAsync()&lt;/code&gt; (line #4-8).&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Finally, call the &lt;code&gt;GetGraphClientAsync()&lt;/code&gt; method to create the Graph API client (line #1) and get the user details using the email address taken from the &lt;code&gt;ClientPrincipal&lt;/code&gt; instance (line #4). If no user data is queried, you can safely assume that the email address used for the ASWA log-in is not registered as either a Guest User or an External User. Therefore, the code will return the &lt;code&gt;404 Not Found&lt;/code&gt; response (line #7).&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The amount of your information would be huge if you could filter out your details from AAD.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;You don't want to expose all the details to the public. Therefore, you can create another POCO class only for the necessary information.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;And return the POCO instance to the Blazor WASM app side.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now, you've got the API to get the user details. Let's keep moving.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exposing-user-details-on-azure-static-web-apps"&gt;
  &lt;/a&gt;
  Exposing User Details on Azure Static Web Apps
&lt;/h2&gt;

&lt;p&gt;Here's the code that the Blazor WASM app calls the API to get the user details. I use the &lt;code&gt;try { ... } catch { ... }&lt;/code&gt; block here because I want to silently proceed with the response regardless it indicates success or failure. Of course, You should handle it more carefully, but I leave it for now.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;In your Blazor component, the method &lt;code&gt;GetLoggedInUserDetailsAsync()&lt;/code&gt; is called like below (line #6, 18).&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;If your email address belongs to the tenant you want to query, you'll see the result screen like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZmMSO4mY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sa0blogs.blob.core.windows.net/devkimchi/2021/09/accessing-msgraph-from-blazor-wasm-running-on-aswa-02-en.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZmMSO4mY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sa0blogs.blob.core.windows.net/devkimchi/2021/09/accessing-msgraph-from-blazor-wasm-running-on-aswa-02-en.png" alt="After the log-in - user found"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If your email address doesn't belong to the tenant you want to query, you'll see the result screen like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cG-Ve-ae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sa0blogs.blob.core.windows.net/devkimchi/2021/09/accessing-msgraph-from-blazor-wasm-running-on-aswa-03-en.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cG-Ve-ae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sa0blogs.blob.core.windows.net/devkimchi/2021/09/accessing-msgraph-from-blazor-wasm-running-on-aswa-03-en.png" alt="After the log-in - user not found"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we can access your user details from the Blazor WASM app running on ASWA through Microsoft Graph API.&lt;/p&gt;




&lt;p&gt;So far, I've walked through the entire process to get the user details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using &lt;a href="https://docs.microsoft.com/aspnet/core/blazor/?WT.mc_id=dotnet-42714-juyoo"&gt;Blazor WASM&lt;/a&gt; app hosted on &lt;a href="https://docs.microsoft.com/azure/static-web-apps/overview?WT.mc_id=dotnet-42714-juyoo"&gt;ASWA&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;Using &lt;a href="https://docs.microsoft.com/azure/active-directory/develop/msal-overview?WT.mc_id=dotnet-42714-juyoo"&gt;MSAL&lt;/a&gt; for authentication and authorisation against &lt;a href="https://docs.microsoft.com/azure/active-directory/fundamentals/active-directory-whatis?WT.mc_id=dotnet-42714-juyoo"&gt;AAD&lt;/a&gt;, and&lt;/li&gt;
&lt;li&gt;Using &lt;a href="https://docs.microsoft.com/graph/overview?WT.mc_id=dotnet-42714-juyoo"&gt;Microsoft Graph&lt;/a&gt; to access to the user details.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you know, Microsoft Graph can access all &lt;a href="https://www.microsoft.com/microsoft-365?WT.mc_id=dotnet-42714-juyoo"&gt;Microsoft 365&lt;/a&gt; resources like &lt;a href="https://www.microsoft.com/microsoft-365/sharepoint/collaboration?WT.mc_id=dotnet-42714-juyoo"&gt;SharePoint Online&lt;/a&gt;, &lt;a href="https://www.microsoft.com/microsoft-teams/group-chat-software?WT.mc_id=dotnet-42714-juyoo"&gt;Teams&lt;/a&gt; and so forth. So if you follow this approach, your chances to use Microsoft 365 resources will get more broadened.&lt;/p&gt;

</description>
      <category>azure</category>
      <category>staticwebapps</category>
      <category>blazorwasm</category>
      <category>msgraph</category>
    </item>
    <item>
      <title>Free stuff on internet for developers</title>
      <author>Marinsborg</author>
      <pubDate>Thu, 16 Sep 2021 23:09:52 +0000</pubDate>
      <link>https://dev.to/marinsborg/free-stuff-on-internet-for-developers-3mpo</link>
      <guid>https://dev.to/marinsborg/free-stuff-on-internet-for-developers-3mpo</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;Bunch of free tutorials, hosting sites, organization tools and some student benefits&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#education"&gt;Education&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#pluralsight"&gt;Pluralsight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#udemy"&gt;Udemy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-odin-project"&gt;The Odin project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#free-code-camp"&gt;Free Code Camp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#free-programming-books"&gt;Free Programming Books&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#edx"&gt;edX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#game-development"&gt;Game development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#web-hosting"&gt;Web hosting&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#-the-big-three--free-tier"&gt;'The big three' free tier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#heroku-free-tier"&gt;Heroku free tier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#github-pages"&gt;GitHub pages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#organization"&gt;Organization&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#todoist"&gt;Todoist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#note-taking-applications"&gt;Note-taking applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#flux"&gt;f.lux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#student-benefits"&gt;Student benefits&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#github-student-developer-pack"&gt;GitHub Student Developer Pack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#jetbrains-ide-licenses"&gt;JetBrains IDE licenses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#linkedin-learning"&gt;LinkedIn learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#namecheap-domain"&gt;Namecheap domain&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In this post, I will list some free stuff that you can get on the internet and that might be useful for you.&lt;/p&gt;

&lt;p&gt;I will try to organize them in some categories so you can just skip them if you do not care about them. I just want to point out that I am not affiliated with any of these pages, I just find them interesting and helpful.&lt;/p&gt;

&lt;p&gt;So let's start&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#education"&gt;
  &lt;/a&gt;
  Education
&lt;/h2&gt;

&lt;p&gt;"Education is the most powerful weapon which you can use to change the world." This quote was said by Nelson Mandela and I think we all can agree with it. We are lucky that we are living in a world where education is very accessible to us through the internet. &lt;/p&gt;

&lt;p&gt;I will show you some sites that offer education in computer science or in some specific programming language. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pluralsight"&gt;
  &lt;/a&gt;
  Pluralsight
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.pluralsight.com/"&gt;Pluralsight&lt;/a&gt; is an education company that offers a variety of video training courses for software developers, IT administrators, and creative professionals through its website. It is a subscription-based site which means that you need to pay money to get access to their videos. They also offer a 10-day free trial. I will show you how can you get one month for free. Pluralsight is good because there are beginner, intermediate, and advanced level topics for some programming languages, frameworks, or tools. They also have those videos grouped in categories called paths. Paths combine specific courses and tools into one experience to teach you any given skill from start to finish. Paths are aligned to an individual's knowledge level, to help you and your team develop the right skills in the right order.&lt;/p&gt;

&lt;p&gt;To get Pluralsight for free for one month you just need to go to &lt;a href="https://my.visualstudio.com/"&gt;Visual studio benefits&lt;/a&gt; and log in with your Microsoft account.  If you don't have a Microsoft account, you can easily create one with any email address. Once you are logged in, you should see this: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NpTAohOh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/imgpostsfree-for-developerspluralsight.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NpTAohOh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/imgpostsfree-for-developerspluralsight.jpg" alt=""&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;As you can see, you also get a free subscription for some Microsoft products and also one month of premium subscription to Linkedin learning.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#udemy"&gt;
  &lt;/a&gt;
  Udemy
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/"&gt;Udemy&lt;/a&gt; is an online learning and teaching marketplace with over 155000 courses and 40 million students. There you can learn programming, marketing, data science, and more.&lt;/p&gt;

&lt;p&gt;Every once and then, some courses become free so you can claim them on your Udemy account. To do so, you need to obtain a coupon that gives you a 100% discount.&lt;/p&gt;

&lt;p&gt;People post those codes on &lt;a href="https://www.reddit.com/r/udemyfreebies/"&gt;this subreddit&lt;/a&gt;. Just get the code and apply it to the course. Then you can start watching that course. Keep in mind that not all courses are good, so sometimes it is not even worth taking a coupon.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-odin-project"&gt;
  &lt;/a&gt;
  The Odin project
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.theodinproject.com/"&gt;The Odin Project&lt;/a&gt; is an open-source online curriculum for learning &lt;strong&gt;web development&lt;/strong&gt;. The curriculum contains programming fundamentals and two career paths you can take. One path is to become full-stack ruby on rails developer and the other is to become a full-stack javascript developer. I would recommend taking the javascript path unless there is plenty amount of ruby on rails jobs in your area.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#free-code-camp"&gt;
  &lt;/a&gt;
  Free Code Camp
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.freecodecamp.org/"&gt;Free code camp&lt;/a&gt; is a non-profit organization that consists of an interactive learning web platform, an online community forum, chat rooms, online publications, and local organizations that intend to make learning programming accessible to anyone. The curriculum is mostly focused on web development but there are also parts of the curriculum focused on Python (data analysis, machine learning, and scientific computing). &lt;/p&gt;

&lt;p&gt;Free code camp also has a great &lt;a href="https://www.youtube.com/channel/UC8butISFwT-Wl7EV0hUK0BQ"&gt;YouTube channel&lt;/a&gt; where they post various programming tutorial videos.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#free-programming-books"&gt;
  &lt;/a&gt;
  Free Programming Books
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;Free Programming Books&lt;/a&gt; is a list of over 3,000 free programming books and other free programming resources, maintained collaboratively as a repository on Github. With lists in 29 spoken languages, it has helped countless programmers around the world acquire and improve their programming abilities.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#edx"&gt;
  &lt;/a&gt;
  edX
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LaqWXy2s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/imgpostsfree-for-developersedx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LaqWXy2s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/imgpostsfree-for-developersedx.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;edX is an American massive open online course (MOOC) provider created by Harvard and MIT. It hosts online university-level courses in a wide range of disciplines to a worldwide student body, including some courses at no charge. &lt;/p&gt;

&lt;p&gt;You can learn about computer science, data science, business, chemistry, medicine, music, and many other topics. You can enroll in courses for free, access materials for a limited time, and only if you want a certificate at the end, you can pay for it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#game-development"&gt;
  &lt;/a&gt;
  Game development
&lt;/h3&gt;

&lt;p&gt;I think everybody at least once in their life wanted to create some kind of game. &lt;a href="https://devga.me/free/"&gt;Devga.me&lt;/a&gt; is a great starting point. They have a great number of guides, tutorials, free resources, tools and engine recommendations, a YouTube channel, and a Discord community. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-hosting"&gt;
  &lt;/a&gt;
  Web hosting
&lt;/h2&gt;

&lt;p&gt;If you want to host a personal project, proof of concept, or any non-commercial app, you can do that easily and for free on several web hosting providers. &lt;/p&gt;

&lt;p&gt;If you don't have any application to host, then you can create a basic 'Hello world' application written in Java, C#, or any other language you are working with and host it. That way you are getting useful and new experience of putting applications on the server.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-big-three-free-tier"&gt;
  &lt;/a&gt;
  'The big three' free tier
&lt;/h3&gt;

&lt;p&gt;(Probably) The three most popular web hosting providers are &lt;a href="https://aws.amazon.com/free/?all-free-tier.sort-by=item.additionalFields.SortRank&amp;amp;all-free-tier.sort-order=asc&amp;amp;awsf.Free%20Tier%20Types=*all&amp;amp;awsf.Free%20Tier%20Categories=*all"&gt;Amazon&lt;/a&gt;, &lt;a href="https://azure.microsoft.com/en-us/free/"&gt;Microsoft&lt;/a&gt;, and &lt;a href="https://cloud.google.com/free"&gt;Google&lt;/a&gt;. But they are not just web hosting providers, they offer &lt;a href="https://www.redhat.com/en/topics/cloud-computing/what-are-cloud-services"&gt;cloud services&lt;/a&gt;. But for now, let's just focus on web hosting. If you want to host a web application, select one of the providers and Google how to do hosting. There are plenty of tutorials explaining step by step how to do that. If you are a web developer, it is good to have some experience with any of the providers because some companies are using cloud services almost on daily basis.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#heroku-free-tier"&gt;
  &lt;/a&gt;
  Heroku free tier
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.heroku.com/pricing"&gt;Heroku&lt;/a&gt; is a cloud platform as a service (PaaS) supporting several programming languages. One of the first cloud platforms, Heroku has been in development since June 2007, when it supported only the Ruby programming language, but now supports Java, Node.js, Scala, Clojure, Python, PHP, and Go out of the box. There is a high chance that you can host any language to Heroku using &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;. They have documentation for every language they support so it should not be hard to have your application up and running. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#github-pages"&gt;
  &lt;/a&gt;
  GitHub pages
&lt;/h3&gt;

&lt;p&gt;If you want to host a website, portfolio, or blog you can do it for free and it is very easy.  &lt;/p&gt;

&lt;p&gt;All you have to do is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create or log in to your &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; account.&lt;/li&gt;
&lt;li&gt;Create a new repository that is named your_github_username.github.io&lt;/li&gt;
&lt;li&gt;Add index.html with some content and commit that.&lt;/li&gt;
&lt;li&gt;In your browser visit your_github_username.github.io. You should see the content of your index.html.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you can create a website from scratch using HTML, CSS, and javascript or you can just download a free website template and change text and images.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#organization"&gt;
  &lt;/a&gt;
  Organization
&lt;/h2&gt;

&lt;p&gt;Being a developer means that most of the day you are sitting in front of a computer. You are using your mind a lot more than your body. This can result in mental exhaustion, stress, and burnout. To prevent or reduce those negative impacts on your mind it is a good idea to organize your days and increase your productivity. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#todoist"&gt;
  &lt;/a&gt;
  Todoist
&lt;/h3&gt;

&lt;p&gt;As a developer you get (or take) tasks from issue tracking and project management applications like Jira. But during your workday, you need to do several other things that are not directly connected to your tasks like attend meetings, call or talk with colleagues, review pull requests, onboard new colleagues, etc. &lt;/p&gt;

&lt;p&gt;Sometimes you have a lot of tasks like this and they can cause a problem for you. The best idea would be to write them down so you don't need to remember them and then prioritize them. That way you have those tasks in the same place and you resolve them by priority. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://todoist.com/home"&gt;Todoist&lt;/a&gt; is an application that does that. It allows you to create tasks as a TODO list for every day, set priority on every task, and even sort tasks in projects. When you complete your task just delete it and focus on other tasks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#notetaking-applications"&gt;
  &lt;/a&gt;
  Note-taking applications
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://evernote.com/"&gt;Evernote&lt;/a&gt; is an app designed for note-taking, organizing, task management, and archiving. The app allows users to create notes, which can be text, drawings, photographs, audio, or saved web content. Notes are stored in notebooks and can be tagged, annotated, edited, searched, given attachments, and exported. Evernote is cross-platform, for Android, iOS, macOS, and Microsoft Windows. It is free to use with monthly usage limits and offers paid plans for expanded or lifted limits.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.notion.so/"&gt;Notion&lt;/a&gt; is an application that provides components such as notes, databases, kanban boards, wikis, calendars, and reminders. Users can connect these components to create their own systems for knowledge management, note-taking, data management, project management, among others. These components and systems can be used individually, or in collaboration with others.&lt;/p&gt;

&lt;p&gt;Applications like these two are useful for taking notes when learning something new, taking meeting notes, creating a draft version of product documentation, etc. &lt;/p&gt;

&lt;p&gt;One thing I am using this kind of app for is to keep track of all tasks I worked on, business logic that was required for each task, and sometimes what programming paradigm I used to complete that tasks. This way, when somebody in the future asks me about some feature I worked on or some bug I fixed, I can easily remember why and how it was done. This is very useful when I work on several tasks or event projects in a short time period. It is easier to write that stuff than try to remember it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flux"&gt;
  &lt;/a&gt;
  f.lux
&lt;/h3&gt;

&lt;p&gt;If for whatever reason you need to work on or use the computer in the evening it is a good idea to install &lt;a href="https://justgetflux.com/"&gt;f.lux&lt;/a&gt;. f.lux is an application that removes blue light from your computer screen during the evening hours. Blue light might give you trouble sleeping. According to some researches, blue light &lt;strong&gt;suppresses the body's release of melatonin.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;f.lux makes your computer screen look like the room you're in, all the time. When the sun sets, it makes your computer look like your indoor lights. In the morning, it makes things look like sunlight again. Once you install it, you'll need to configure it and then you will forget about it. It will do everything automatically.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#student-benefits"&gt;
  &lt;/a&gt;
  Student benefits
&lt;/h2&gt;

&lt;p&gt;If you are a university student and you are 'lucky' that your student email address is accepted to these pages then you can use the benefits they offer for students. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#github-student-developer-pack"&gt;
  &lt;/a&gt;
  GitHub Student Developer Pack
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://education.github.com/pack#offers"&gt;GitHub student developer pack&lt;/a&gt; is probably the biggest and most famous pack of benefits for students. They offer free access to some tools and frameworks, credits for web hosting, resources for learning, etc. I am sure that pack will give you enough material to play with and you can use it to increase your skill level, knowledge and boost your portfolio.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jetbrains-ide-licenses"&gt;
  &lt;/a&gt;
  JetBrains IDE licenses
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.jetbrains.com/community/education/#students"&gt;JetBrains&lt;/a&gt; is a software development company that makes tools for software developers and project managers. The company offers many integrated development environments (IDE) for the programming languages Java, Groovy, Kotlin, Ruby, Python, PHP, C, Objective-C, C++, C#, Go, JavaScript, and SQL. The company created the Kotlin programming language. &lt;/p&gt;

&lt;p&gt;For students, they offer free licenses for every IDE for personal use. If you are Java/Spring developer I would recommend their IntelliJ IDE.&lt;/p&gt;

&lt;p&gt;It is also worth mentioning &lt;a href="https://www.jetbrains.com/academy/"&gt;&lt;strong&gt;JetBrains Academy&lt;/strong&gt;&lt;/a&gt;. JetBrains Academy is an online platform to learn programming, including such programming languages as Python, Java, and Kotlin. Their resources are great because they teach you language from beginner to advanced level.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#linkedin-learning"&gt;
  &lt;/a&gt;
  LinkedIn learning
&lt;/h3&gt;

&lt;p&gt;LinkedIn Learning is a massive open online course provider. It provides video courses taught by industry experts in software, creative, and business skills. You can get access for free by having a library card. To see if your library is eligible, just Google  Linkedin learning. If it is, you just need to get a code for the website and you can start learning.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#namecheap-domain"&gt;
  &lt;/a&gt;
  Namecheap domain
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://nc.me/"&gt;Namecheap&lt;/a&gt; offers free .me domains and to select universities in the US, UK, Canada, and Australia.&lt;/p&gt;

&lt;p&gt;However, if you have access to the GitHub student developer pack then you can claim your domain for sure. While you might not be interested in it, it can be a good idea to try a set up a domain with your website just for the experience of doing it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this post, I gave you a lot of resources that you can get for free. Pick whatever you like, do whatever you want, and get some experience. After all, investing in your knowledge is never a wrong idea.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>codenewbie</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Getting Started with Flask and Docker üê≥üöÄ</title>
      <author>Zoo Codes</author>
      <pubDate>Thu, 16 Sep 2021 23:05:37 +0000</pubDate>
      <link>https://dev.to/ken_mwaura1/getting-started-with-flask-and-docker-3ie8</link>
      <guid>https://dev.to/ken_mwaura1/getting-started-with-flask-and-docker-3ie8</guid>
      <description>&lt;p&gt;Over the past few weeks, I've worked on a few flask apps across a variety of use cases. The aim was brush up my knowledge of flask as well proper structure for a production application. When I got challenged to use docker and flask app for a starter project and write about it. It was a perfect opportunity to really cement my knowledge as well provide my version of a quickstart guide. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#audience-and-objectives"&gt;
  &lt;/a&gt;
  Audience and Objectives
&lt;/h2&gt;

&lt;p&gt;This article is aimed at beginner developers who are looking for a guide using docker and flask. However, intermediate &lt;br&gt;
developers can also glean some knowledge. I will also endeavour to point out issues I faced while working on this project.&lt;/p&gt;

&lt;p&gt;This article aims at developing a simple flask app and dockerizing the app and pushing the code to GitHub.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#prerequisites-to-getting-started"&gt;
  &lt;/a&gt;
  Prerequisites to Getting Started
&lt;/h2&gt;

&lt;p&gt;To effectively follow along with this post and subsequent code, you will need the following prerequisites.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python and pip (I am currently using 3.9.7 ) Any version above 3.7 should work.&lt;/li&gt;
&lt;li&gt;Git installed in your system. Check appropriate instructions for your system.&lt;/li&gt;
&lt;li&gt;Docker on your system. &lt;a href="https://docs.docker.com/get-docker/"&gt;Installation instructions&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Terminal. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#initial-setup"&gt;
  &lt;/a&gt;
  Initial Setup
&lt;/h3&gt;

&lt;p&gt;These instructions are verified to work on most Unix systems. &lt;strong&gt;Note:&lt;/strong&gt; Windows implementation may vary. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a new directory and change into it.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;flask_starter_app &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;flask_starter_app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Create a new virtual environment for the project. Alternatively activate your preferred virtual environment.&lt;/li&gt;
&lt;li&gt;Proceed to use pip to install our required modules using pip. we'll be using flask, flask-bootstrap and jikanpy&lt;/li&gt;
&lt;li&gt;Save the installed packages in a requirements file.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  python3 &lt;span class="nt"&gt;-m&lt;/span&gt; venv venv
  &lt;span class="nb"&gt;source &lt;/span&gt;venv/bin/activate
  pip &lt;span class="nb"&gt;install &lt;/span&gt;flask flask-bootstrap jikanpy 
  pip freeze &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We are installing main flask module for our project. Flask-Bootstrap will help us integrate bootstrap in our app for styling.&lt;br&gt;
We also install Jikanpy is a python wrapper for &lt;a href="https://jikan.moe/"&gt;Jikan Api&lt;/a&gt;, which is the unofficial &lt;a href="https://myanimelist.net/"&gt;MyAnimeList&lt;/a&gt; Api.&lt;/p&gt;

&lt;p&gt;Hopefully, everything is installed successfully. Alternatively check the code on &lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/KenMwaura1"&gt;
        KenMwaura1
      &lt;/a&gt; / &lt;a href="https://github.com/KenMwaura1/flask_starter_app"&gt;
        flask_starter_app
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      simple flask starter app utilizing docker 
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
flask_starter_app&lt;/h1&gt;
&lt;p&gt;simple flask starter app utilizing docker to showcase seasonal anime using jikanpy (myanimelist unofficial api).&lt;/p&gt;
&lt;h2&gt;
Docker Quickstart&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Using Docker is recommended, as it guarantees the application is run using compatible versions of Python and Node&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Inside the app there a Dockerfile to help you get started.&lt;/p&gt;
&lt;p&gt;To build the development version of the app&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;docker build -t flask-starter-app &lt;span class="pl-c1"&gt;.&lt;/span&gt;   &lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;To run the app&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt; docker run --name=flask-app -p 5001:5000 -t -i flask-starter-app  &lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;If everything went well, the app should be running on &lt;a href="http://localhost:5001" rel="nofollow"&gt;localhost:5001&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/KenMwaura1/flask_starter_app"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h2&gt;
  &lt;a href="#its-all-containers"&gt;
  &lt;/a&gt;
  It's All Containers
&lt;/h2&gt;

&lt;p&gt;Docker refers to open source &lt;a href="https://www.ibm.com/cloud/learn/containerization"&gt;containerization&lt;/a&gt; platform.&lt;br&gt;
Containers are standardized executable components that combine application source code with OS-level dependencies and libraries. We can create containers without docker, however it provides a consistent, simpler and safer way to build containers. One of the major reasons for the meteoric growth of the use of containers from software development to software delivery and even testing, is the ease of use and reproducibility of the entire workflow. &lt;/p&gt;

&lt;p&gt;Previously developers used Virtual Machines in the cloud or self-hosted servers to run their applications and workloads. &lt;br&gt;
However, going from development to production was sometimes plagued with failures due differences in Operating systems or &lt;br&gt;
at times dependencies. Containers allow us to essentially take the code, file structure, dependencies etc. and package them and deploy them to a server and have them run as expected with minimal changes. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#terminology"&gt;
  &lt;/a&gt;
  Terminology
&lt;/h3&gt;

&lt;p&gt;Here we'll run through some tools and terminology in reference to Docker: &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#dockerfile"&gt;
  &lt;/a&gt;
  DockerFile
&lt;/h4&gt;

&lt;p&gt;Docker containers start out as single text file containing all the relevant instructions  on how build an &lt;em&gt;image&lt;/em&gt;.&lt;br&gt;
A &lt;em&gt;Dockerfile&lt;/em&gt; automates the process of creating an image, contains a series of CLI instructions for the Docker engine to assemble the image. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#docker-images"&gt;
  &lt;/a&gt;
  Docker Images
&lt;/h4&gt;

&lt;p&gt;Docker images hold all application source code, libraries and dependencies to run an application. It is very possible to build a docker image from scratch but developers leverage common repositories to pull down pre-built images for common software and tools. &lt;br&gt;
Docker images are made up of layers and each time a container is built from an image. a new layer is added becoming the latest version of the image. You can use a single to run multiple live containers. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#docker-hub"&gt;
  &lt;/a&gt;
  Docker Hub
&lt;/h4&gt;

&lt;p&gt;This is a public repository of Docker images, containing over 100,000 container images. It holds containers of software from commercial vendors, open-source projects and even individual developers.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#docker-daemon"&gt;
  &lt;/a&gt;
  Docker daemon
&lt;/h4&gt;

&lt;p&gt;Refers the service that runs in your system powering the creation of Docker images and containers.The daemon receives commands from client and executes them.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#docker-registry"&gt;
  &lt;/a&gt;
  Docker registry
&lt;/h4&gt;

&lt;p&gt;This is an open-source scalable storage and distribution system for docker images. Using git( a version control system) the registry track image versions in repositories using tags for identification.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lets-build"&gt;
  &lt;/a&gt;
  Let's Build!
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#flask"&gt;
  &lt;/a&gt;
  Flask
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://flask.palletsprojects.com/en/2.0.x/"&gt;Flask&lt;/a&gt; prides itself in being micro framework therefore it only comes with &lt;br&gt;
simple configuration out of the box. However. it allows for a wide range of custom configuration options. This gives you &lt;br&gt;
the freedom to start simple, add extensions for variety utilities as you grow. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-were-building"&gt;
  &lt;/a&gt;
  What we're Building
&lt;/h3&gt;

&lt;p&gt;Today we'll be building a simple web app to display the current seasonal anime from MyAnimeList. If you follow me on &lt;a href="https://twitter.com/Ken_Mwaura1"&gt;Twitter&lt;/a&gt; you'll know am a massive manga and anime fan. MyAnimeList is defacto platform for information, reviews and rankings thus it was the optimal choice. However, it doesn't have an API or sdk to access their content. Normally we would have to scrape the site, luckily the awesome community created [Jikan (&lt;a href="https://jikan.moe/"&gt;https://jikan.moe/&lt;/a&gt;) Api  as well &lt;a href="https://github.com/abhinavk99/jikanpy"&gt;jikanpy&lt;/a&gt; which is python wrapper for the API. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#wheres-the-code"&gt;
  &lt;/a&gt;
  Where's the code?
&lt;/h3&gt;

&lt;p&gt;Now hopefully you carried out the steps above in Prerequisites section. Ensure your virtual environment is activated. Inside our &lt;code&gt;flask-starter-app&lt;/code&gt; directory create &lt;code&gt;run.py&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# run.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This file will serve our app. First we import our app instance from app directory, which doesn't exist yet. Let's create it.&lt;br&gt;
Create the app directory, inside it create:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;templates folder&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;__init__.py&lt;/code&gt; file &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;models.py&lt;/code&gt; file &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;views.py&lt;/code&gt; file &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;anime_requests.py&lt;/code&gt; file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your folder structure should now look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python-projects &lt;span class="nv"&gt;$ &lt;/span&gt;tree flask_starter_app
flask_starter_app
‚îú‚îÄ‚îÄ app
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ anime_request.py
‚îÇ   ‚îú‚îÄ‚îÄ models.py
‚îÇ   ‚îú‚îÄ‚îÄ views.py
‚îÇ   ‚îî‚îÄ‚îÄ templates
‚îÇ       ‚îî‚îÄ‚îÄ index.html
‚îî‚îÄ‚îÄ requirements.txt
‚îî‚îÄ‚îÄ run.py
‚îî‚îÄ‚îÄ venv


2 directories, 7 files
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside the &lt;code&gt;__init__.py&lt;/code&gt; file add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/__init__.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_bootstrap&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bootstrap&lt;/span&gt;

&lt;span class="n"&gt;bootstrap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first two lines import the Flask and Bootstrap classes from their respective modules. We then instantiate the Bootstrap class and assign it bootstrap variable.The app variable contains an instance of the Flask object and pass along the &lt;strong&gt;name&lt;/strong&gt; as the first parameter to refer to our app. We then initialize bootstrap by calling the &lt;code&gt;init_app()&lt;/code&gt; method as passing pur app as an argument.&lt;br&gt;
Finally, we import views file from our current directory. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#class-is-in-session"&gt;
  &lt;/a&gt;
  Class is in Session
&lt;/h4&gt;

&lt;p&gt;Inside the &lt;code&gt;models.py&lt;/code&gt; file ad the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/models.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dataclasses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;dataclass&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Anime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""
    class to model anime data
    """&lt;/span&gt;
    &lt;span class="n"&gt;mal_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;image_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;synopsis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;airing_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;episodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;members&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This file will hold all of our models, here we create an Anime class to hold data from the Api. We import dataclass decorator from the &lt;a href="https://docs.python.org/3.9/library/dataclasses.html"&gt;dataclasses&lt;/a&gt; module. This will give us access to a variety of special methods, allowing us to keep our code simple and succinct. We attach the decorator to our class and then proceed to define the structure of the data from the Api. Check the &lt;a href="https://jikan.docs.apiary.io/#"&gt;docs&lt;/a&gt; to understand more. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#requests-requests-"&gt;
  &lt;/a&gt;
  Requests, Requests ...
&lt;/h4&gt;

&lt;p&gt;Add the following to the &lt;code&gt;anime_request.py&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/anime_request.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;jikanpy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Jikan&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Anime&lt;/span&gt;

&lt;span class="n"&gt;jikan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Jikan&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# function to get seasonal anime
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_season_anime&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="s"&gt;"""
    function to get the top anime from My anime list
    :return: list of anime
    """&lt;/span&gt;
    &lt;span class="n"&gt;season_anime_request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jikan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;season&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;season_anime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;season_anime_request&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'anime'&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;season_anime_request&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'anime'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;anime&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;mal_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;anime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'mal_id'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;anime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'url'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;anime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;image_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;anime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'image_url'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;synopsis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;anime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'synopsis'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;anime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'type'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;airing_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;anime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'airing_start'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;episodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;anime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'episodes'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;members&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;anime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'members'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;new_anime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Anime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mal_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;synopsis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;airing_start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;episodes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;members&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;season_anime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_anime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;season_anime&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above we import Jikan class from the jikanpy module, this will give us access to variety of methods to make requests to the Jikan Api. We also import our Anime class from the &lt;code&gt;models&lt;/code&gt; file. we create a variable jikan and assign it an instance of the Jikan class. &lt;br&gt;
We now define &lt;code&gt;get_season_anime&lt;/code&gt; function to make requests to the Jikan Api and append it to a list. We create a variable &lt;code&gt;season_anime_request&lt;/code&gt; that calls &lt;code&gt;season&lt;/code&gt; method from Jikan class. It accepts the two parameters: year and season, this is handy when you want retrieve specific data from year and even season. In our case we don't specify in order to get the current season anime. We then define an empty list to hold our data. &lt;/p&gt;

&lt;p&gt;The season method returns a dictionary of various key value pairs. The data we need is values of the &lt;code&gt;anime&lt;/code&gt; key. which is a list of dictionaries. We add an if statement to check if key we want exists, then loop through the values. We create appropriate variables to reference the data in the response.&lt;br&gt;
We create a &lt;code&gt;new_anime&lt;/code&gt; variable that is an instance of Anime class. We append our class to our empty list, finally we return the list of classes. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#views-for-days"&gt;
  &lt;/a&gt;
  Views For Days
&lt;/h4&gt;

&lt;p&gt;Add the following code your &lt;code&gt;views.py&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.anime_request&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_season_anime&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'GET'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="s"&gt;"""
    root page view that returns the index page and its data
    :return: index template
    """&lt;/span&gt;
    &lt;span class="n"&gt;season_anime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_season_anime&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'index.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;season_anime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;season_anime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This file is holds routes for our flask application. Currently, we'll only have one, feel free to add more. We begin by importing &lt;code&gt;render_template&lt;/code&gt; this will pass render our html pages in the browser and pass along any required parameters. We also import &lt;code&gt;get_season_anime&lt;/code&gt; function from anime_request file. We also import our app from &lt;code&gt;__init__.py&lt;/code&gt; file, this allows use the &lt;code&gt;@app&lt;/code&gt; decorator that exposes the route method. This registers routes passed as arguments as well the methods allowed for the route. &lt;/p&gt;

&lt;p&gt;We define the &lt;code&gt;index&lt;/code&gt; function that will be called once the user opens root route. Inside the function, we define season_anime variable that holds list of instance of the Anime classes. We finally call &lt;code&gt;render_template&lt;/code&gt; function and pass along our index.html file inside the templates folder, along with season_anime variable to our template. &lt;/p&gt;

&lt;p&gt;Add the following to your index.html file inside the templates folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!--app/templates/index.html --&amp;gt;&lt;/span&gt;
{% extends 'bootstrap/base.html' %}

{% block navbar %}
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar navbar-inverse"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"navigation"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container-fluid"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar-header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar-toggle"&lt;/span&gt; &lt;span class="na"&gt;data-toggle=&lt;/span&gt;&lt;span class="s"&gt;"collapse"&lt;/span&gt; &lt;span class="na"&gt;data-target=&lt;/span&gt;&lt;span class="s"&gt;".navbar-collapse"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sr-only"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Toggle navigation&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon-bar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon-bar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon-bar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar-brand"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; Anime Watchlist &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar-collapse collapse"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav navbar-nav"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
{% endblock %}

{% block content %}
    {% for anime in season_anime %}
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-group col-xs-12 col-sm-4 col-md-2 col-lg-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"{{ anime.image_url }}"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"{{ anime.title }} poster"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"img-responsive"&lt;/span&gt;
                     &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"max-height: 30rem"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-left "&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/anime/{{anime.mal_id}}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                        {{ anime.title|truncate(30)}}&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; Episodes : {{ anime.episodes }}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; date started airing: {{ anime.airing_start | truncate(13) }}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    {% endfor %}
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Flask uses the &lt;a href="https://flask.palletsprojects.com/en/2.0.x/templating/"&gt;jinja&lt;/a&gt; templating engine. This allows us to use a slew of advanced features. In our case we extend the base html file containing all bootstrap styling, this keeps allows to have a basic structure that applies all of our pages. We also use special &lt;code&gt;{% %}&lt;/code&gt; to define a special navbar block. &lt;br&gt;
Normally this is  set in its own file and imported but here we'll just have it here. We define a content block inside we loop through season_anime argument passed in our views file. For each value we render a card with title, image, number of episodes and the date it started airing.&lt;/p&gt;

&lt;p&gt;Open a terminal and run &lt;code&gt;python run.py&lt;/code&gt; Your app should look similar below: &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#dockerize-everything"&gt;
  &lt;/a&gt;
  Dockerize Everything
&lt;/h2&gt;

&lt;p&gt;Now we have a fully functional flask app, lets dockerize it. Inside the root of our app(flask_starter_app), create a &lt;code&gt;Dockerfile&lt;/code&gt;. &lt;br&gt;
Add the following configuration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;#Dockerfile &lt;/span&gt;

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3.9.7&lt;/span&gt;

&lt;span class="k"&gt;MAINTAINER&lt;/span&gt;&lt;span class="s"&gt; Ken Mwaura "kemwaura@gmail.com"&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ./requirements.txt /app/requirements.txt&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . /app&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; app&lt;/span&gt;

&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; FLASK_APP=run.py&lt;/span&gt;

&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; FLASK_ENV=development&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt

&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 5001:5000&lt;/span&gt;

&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["flask", "run", "--host", "0.0.0.0"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first line sets the base image to build from, in our case we're using the python 3.9.7 image to mirror the development &lt;br&gt;
environment. Let‚Äôs go over some of these Docker instructions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;MAINTAINER sets the Author field of the image (useful when pushing to Docker Hub)&lt;/li&gt;
&lt;li&gt;COPY copies files from the first parameter (the source .) to the destination parameter (in this case, /app)&lt;/li&gt;
&lt;li&gt;WORKDIR sets the working directory (all following instructions operate within this directory); you may use WORKDIR as often as you like&lt;/li&gt;
&lt;li&gt;ENV sets environment variable &lt;code&gt;FLASK_APP&lt;/code&gt; to the run.py file. This flask cli the file to run. &lt;/li&gt;
&lt;li&gt;ENV sets environment variable &lt;code&gt;FLASK_ENV&lt;/code&gt; to development. This tells flask to run the app in a development mode.&lt;/li&gt;
&lt;li&gt;RUN uses pip to install the required dependencies from the requirements file. &lt;/li&gt;
&lt;li&gt;EXPOSE tells docker to map port 5001 to port 5000 where our app is running. &lt;/li&gt;
&lt;li&gt;CMD tells docker what should be executed to run our app. In our case it's flask run command and the specified host. &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#build-the-image"&gt;
  &lt;/a&gt;
  Build the Image
&lt;/h3&gt;

&lt;p&gt;Now that we gave a Dockerfile, let's check it builds correctly&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker build &lt;span class="nt"&gt;-t&lt;/span&gt; flask-starter-app &lt;span class="nb"&gt;.&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#run-the-container"&gt;
  &lt;/a&gt;
  Run the Container
&lt;/h3&gt;

&lt;p&gt;After the build completes, run the container&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; docker run &lt;span class="nt"&gt;--name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;flask-app &lt;span class="nt"&gt;-p&lt;/span&gt; 5001:5000 &lt;span class="nt"&gt;-t&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; flask-starter-app  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go to &lt;a href="http://localhost:5001"&gt;localhost:5001&lt;/a&gt; and you should see your app running as below: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FUn7226J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7roted279imwa2nw6mt6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FUn7226J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7roted279imwa2nw6mt6.png" alt="Screenshot of docker"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-information"&gt;
  &lt;/a&gt;
  Further information
&lt;/h2&gt;

&lt;p&gt;Ensure you are using the right ports. Flask by default runs on port 5000 (not 8000 like Django or 80 like Apache). &lt;br&gt;
Check out &lt;a href="https://runnable.com/docker/binding-docker-ports"&gt;Binding Docker Ports&lt;/a&gt; for more information.&lt;/p&gt;

&lt;p&gt;I hope you liked this write-up and get inspired to extend it further. Keep coding! Feel free to leave comments below or &lt;br&gt;
reach out on Twitter: &lt;a href="https://twitter.com/Ken_Mwaura1"&gt;Ken_Mwaura1&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>python</category>
      <category>docker</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Git pre-hook: pre-commit with Gradle task</title>
      <author>Animesh Kumar</author>
      <pubDate>Thu, 16 Sep 2021 23:00:32 +0000</pubDate>
      <link>https://dev.to/an1meshk/git-pre-hook-pre-commit-with-gradle-task-134m</link>
      <guid>https://dev.to/an1meshk/git-pre-hook-pre-commit-with-gradle-task-134m</guid>
      <description>&lt;p&gt;There are various Git pre-hooks that are quite helpful for several essential tasks we want to execute before commit or push or rebase etc. Basically, there are various use cases, like running linting before you commit or running unit tests before push or commit.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Whenever a Git repository is initialized, Git creates sample hooks inside &lt;code&gt;.git/hooks&lt;/code&gt; directory in the project directory. E.g. &lt;code&gt;.git/hooks/pre-commit.sample&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#below-are-steps-on-how-to-configure-prehook-for-a-gradle-project"&gt;
  &lt;/a&gt;
  Below are steps on how to configure pre-hook for a Gradle project:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-create-a-prehook-script-lets-create-raw-precommit-endraw-file-inside-a-new-raw-scripts-endraw-directory-and-we-want-to-run-unit-tests-before-code-commit"&gt;
  &lt;/a&gt;
  1. Create a pre-hook script, let's create &lt;code&gt;pre-commit&lt;/code&gt; file inside a new &lt;code&gt;scripts&lt;/code&gt; directory, and we want to run unit tests before code commit.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"*****Running unit tests******"&lt;/span&gt;

git stash &lt;span class="nt"&gt;-q&lt;/span&gt; &lt;span class="nt"&gt;--keep-index&lt;/span&gt;

./gradlew &lt;span class="nb"&gt;test

&lt;/span&gt;&lt;span class="nv"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;

git stash pop &lt;span class="nt"&gt;-q&lt;/span&gt;

&lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="nv"&gt;$status&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above command stash the working directory changes before running the unit tests, and unstash back. This makes sure, we're running unit tests only in the clean working directory. (as this is been configured for pre-commit, changes must have been staged, make sense?üòÄ)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-next-create-gradle-task-to-install-the-raw-precommit-script-endraw-why-do-we-need-it-because-we-want-this-to-run-on-all-developers-machine-not-just-on-our-machine-we-all-love-consistency-and-wants-to-put-the-constraints"&gt;
  &lt;/a&gt;
  2. Next, create Gradle task to install the &lt;code&gt;pre-commit script&lt;/code&gt;. Why do we need it? because, we want this to run on all developers' machine, not just on our machine, we all love consistency and wants to put the constraints.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight gradle"&gt;&lt;code&gt;
&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="nf"&gt;installLocalGitHook&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;type:&lt;/span&gt; &lt;span class="n"&gt;Copy&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
&lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rootProject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;rootDir&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'scripts/pre-commit'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;into&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rootProject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;rootDir&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'.git/hooks'&lt;/span&gt;&lt;span class="o"&gt;)}&lt;/span&gt;
&lt;span class="n"&gt;fileMode&lt;/span&gt; &lt;span class="mi"&gt;0775&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dependsOn&lt;/span&gt; &lt;span class="n"&gt;installLocalGitHook&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Here pre-commit file was created inside project root directory i.e. &lt;code&gt;scripts&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Above Gradle task will run whenever someone takes the build and assuming that developer who is making changes will run the Gradle build task at least once and I hope I'm rightüòâ.&lt;/p&gt;

&lt;p&gt;Once pre-commit script is copied to &lt;code&gt;.git/hooks/&lt;/code&gt; directory, we're all set. We can verify its content as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; .git/hooks/pre-commit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, next time whenever someone will run &lt;code&gt;git commit&lt;/code&gt;, it will first run the &lt;code&gt;./gradlew test&lt;/code&gt; task.&lt;/p&gt;

&lt;p&gt;E.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ak@--mac git-pre-commit % git commit &lt;span class="nt"&gt;-am&lt;/span&gt; &lt;span class="s2"&gt;"update"&lt;/span&gt;

&lt;span class="nt"&gt;--&lt;/span&gt; Output

&lt;span class="k"&gt;*****&lt;/span&gt;Running unit tests&lt;span class="k"&gt;******&lt;/span&gt;

BUILD SUCCESSFUL &lt;span class="k"&gt;in &lt;/span&gt;1s
4 actionable tasks: 4 up-to-date
&lt;span class="o"&gt;[&lt;/span&gt;main ed41136] update
 1 file changed, 13 insertions&lt;span class="o"&gt;(&lt;/span&gt;+&lt;span class="o"&gt;)&lt;/span&gt;, 1 deletion&lt;span class="o"&gt;(&lt;/span&gt;-&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The way &lt;code&gt;./gradlew test&lt;/code&gt; is configured, in the same way, any other tasks can be executed. And of course for other tasks stash and unstash won't be compulsory.&lt;/li&gt;
&lt;li&gt;And very similarly other pre-hooks can be configured&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#here-is-the-github-repo-with-an-example"&gt;
  &lt;/a&gt;
  Here is the &lt;a href="https://github.com/an1meshk/git-pre-commit"&gt;GitHub repo&lt;/a&gt; with an example.
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;If you have reached here, then I did a satisfactory effort to keep you reading. Please be kind to leave any comments or ask for any corrections. &lt;strong&gt;Happy Coding!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>git</category>
      <category>github</category>
    </item>
  </channel>
</rss>
