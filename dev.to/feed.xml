<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Why I use Laravel as a Rails aficionado</title>
      <author>Martin Vandersteen</author>
      <pubDate>Thu, 05 Aug 2021 19:26:05 +0000</pubDate>
      <link>https://dev.to/vdsmartin/why-i-use-laravel-as-a-rails-aficionado-4ea2</link>
      <guid>https://dev.to/vdsmartin/why-i-use-laravel-as-a-rails-aficionado-4ea2</guid>
      <description>&lt;p&gt;I've been building web products professionnally and for fun for more than 7 years now. Despite being a complete Ruby on Rails fan (my first love) and having first experienced Laravel in the worst ways possible (taking over a legacy SaaS that was a complete mess), I still decided to use Laravel for my next major projects.&lt;/p&gt;

&lt;p&gt;Both present similar MVC structures and similar functionalities, but they have quite different ecosystems. To me, being a good developer means choosing the right tool for the job, here are some reasons why I chose Laravel over Rails for those applications.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-ecosystem"&gt;
  &lt;/a&gt;
  The ecosystem
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u4pc3r7X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9a2dyy84jm7qe8ipn9o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u4pc3r7X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9a2dyy84jm7qe8ipn9o.png" alt="The Laravel Ecosystem"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks to Tailor Otwell and others, there are a lot of VERY powerful satellite packages and tools that'll make you win precious time when building web products. Here are some of the ones that drove my decision :&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#laravel-sail"&gt;
  &lt;/a&gt;
  Laravel Sail
&lt;/h3&gt;

&lt;p&gt;Super easy development environment : &lt;code&gt;$ sail up&lt;/code&gt; and you're good to go ! It spins up a web server, database, redis server and even mailhog to monitor your emails. All through Dockerüêã so you don't pollute your computer with useless servers that will clash with your other development projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#laravel-breeze-amp-jetstream"&gt;
  &lt;/a&gt;
  Laravel Breeze &amp;amp; Jetstream
&lt;/h3&gt;

&lt;p&gt;Thanks to those, you can start your application with all the boring authentication part pre-made for you. This includes signup, login, profile settings, dashboard, email verification &amp;amp; forgot password, password change, 2FA, .. Such a huge timesaver !&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#laravel-nova"&gt;
  &lt;/a&gt;
  Laravel Nova
&lt;/h3&gt;

&lt;p&gt;Powerful, beautiful &amp;amp; customizable admin ! Quite easy to install and to extend, with a lot of very useful plugins that'll make your life way easier. Building admins for web apps is a big part of the development time and any time saved is a big money saver, as long as the quality remains.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#laravel-vapor"&gt;
  &lt;/a&gt;
  Laravel Vapor
&lt;/h3&gt;

&lt;p&gt;Vapor turns your app into a Serverless app that autoscales in a hearthbeat. It manages your AWS ressources for you and allows you to change things in your Cloud with simple commands. It will save you weeks of handling your servers, I really think it has a crazy good Return On Investment for small to mid-sized applications. Focus on building your app and not on fiddling in AWS !&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#statamic"&gt;
  &lt;/a&gt;
  Statamic
&lt;/h3&gt;

&lt;p&gt;Statamic is a pretty powerful and modern CMS that'll get you out of your Wordpress nightmares. Simple and efficient ! It recently saved me when I needed to build a BIG application that was a mix of a Website, CMS, CRM and E-commerce. Statamic made it possible for my client to edit pages &amp;amp; products in an efficient way while giving me the whole power of Laravel to meet requirements for the CRM aspect of things.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#laravel-spark"&gt;
  &lt;/a&gt;
  Laravel Spark
&lt;/h3&gt;

&lt;p&gt;I personally never used it but it seems to be the Laravel Jetstream of SaaS products ! (It actually plays along well with Jetstream &amp;amp; Breeze) It handles subscriptions, payment providers &amp;amp; invoices for you so you can focus on the actual value your app brings.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-community"&gt;
  &lt;/a&gt;
  The community
&lt;/h1&gt;

&lt;p&gt;Pretty simple and straightforward but as there are more people using Laravel, it's easier to find answers to your problem on the web as well as finding help !&lt;/p&gt;

&lt;p&gt;But that was not the deciding factor for me as, in my opinion, Rails is often easier to understand and more logical than Laravel. The main reason why the community is so important to me is that I'm making it easy for my clients to find new developers later on, as they will need someone to maintain and improve on the application that I built someday. There are a lot more people that use PHP in the world than Ruby and it's important to keep that in mind when you build an application that will be the epicenter of someone's business.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;I'm still in love with Rails ! And I love that it keeps growing so well and evolving (can't wait to try Hotwire and compare it with Livewire), and it still is one of my favourite tools. &lt;/p&gt;

&lt;p&gt;I just think it's important to be flexible and to be able to avoid getting stuck with one framework the becomes a Bible you franctically shake in front of everybody that uses something else! &lt;/p&gt;

&lt;p&gt;Be curious and open to new things, give it a look and objectively assess if it's for you, or not, and if it actually brings new value to the programming world. There are tons of frameworks popping up everyday and while a lot are probably good, only a few will really fit you and make your work more efficient.&lt;/p&gt;

&lt;p&gt;What's your take on this ? How do you position yourself in this world of frameworks ? üòú&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>rails</category>
      <category>php</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to make a qr-code generator in JavaScript</title>
      <author>The Vik</author>
      <pubDate>Thu, 05 Aug 2021 19:11:00 +0000</pubDate>
      <link>https://dev.to/heheprogrammer/how-to-make-a-qr-code-generator-in-javascript-2pma</link>
      <guid>https://dev.to/heheprogrammer/how-to-make-a-qr-code-generator-in-javascript-2pma</guid>
      <description>&lt;p&gt;Making a qr-code generator is pretty simple tbh because of the existing stuff available on the internet.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/thevik/qrcode"&gt;Source Code Of This Blog&lt;/a&gt;&lt;br&gt;
&lt;a href="https://thevik.github.io/qrcode/"&gt;Try Out The QRCODE Generator We Are Going To Make In This Blog&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;onchange=&lt;/span&gt;&lt;span class="s"&gt;"generateQR()"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"url"&lt;/span&gt; 
    &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Place Your Url"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"makeQR"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        Generate QR Code
    &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"output"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"qrcode.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"main.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;qrcode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QRCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;output&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;qrdata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;url&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;makeQr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;makeQR&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;generateQR&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;qrdata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;qrcode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;makeQr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;generateQR&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Okay so thats all of the code you got to understand to make this.&lt;/p&gt;

&lt;p&gt;First of all you have to &lt;a href="https://github.com/davidshimjs/qrcodejs/zipball/master"&gt;download this&lt;/a&gt; from &lt;a href="https://davidshimjs.github.io/qrcodejs/"&gt;https://davidshimjs.github.io/qrcodejs/&lt;/a&gt; this is nesecarry to be downloaded because the base code isnt mine its this guy who made it.&lt;/p&gt;

&lt;p&gt;Okay so now first we are gonna make the html&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;onchange=&lt;/span&gt;&lt;span class="s"&gt;"generateQR()"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"url"&lt;/span&gt; 
    &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Place Your Url"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"makeQR"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        Generate QR Code
    &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"output"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"qrcode.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"main.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First we are making a input box and giving it onchange="generateOR()" which is a function we are making in main.js also we giving it a ID.&lt;br&gt;
then we making a button and giving it a ID too.&lt;br&gt;
Now we making a &lt;/p&gt; it is necessary because the qr code is going to be shown here only, and in last we importing the script.( main.js is the code we are making and qrcode.min.js is the base code)&lt;br&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;qrcode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QRCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;output&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;qrdata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;url&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;makeQr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;makeQR&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;generateQR&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;qrdata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;qrcode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;makeQr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;generateQR&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Okay in the first three lines we are just importing all of the ids we gave in our html by using document.getElementById.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;qrcode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QRCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;output&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;in this line we are making a new QRCode and it is important because there is something in qrcode.min.js so if we write new QRCode when import out div then it is going to automatically find that this is the div it is going to show the generated qr.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;generateQR&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;qrdata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;qrcode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Here we are making the generateOR function ( used in html ) and making a const named data and getting qrdata.value ( the value of that input box ) at last we are adding qrcode.makeCode(data) ( qrcode is that div ) and makeCode means generate QR Code and (data) menas qrdata.value ( value of input box )&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#this-code-should-now-also-work-if-we-write-the-link-and-press-enter-but-if-you-want-that-the-qrcode-also-shows-when-we-click-on-the-button-then"&gt;
  &lt;/a&gt;
  this code should now also work if we write the link and press enter but if you want that the qrcode also shows when we click on the button then
&lt;/h4&gt;



&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;makeQr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;generateQR&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;here we arent doing much just adding a event listener 'click' and passing generateOR() function in it&lt;/p&gt;

&lt;p&gt;Thanks for reading till the ending you can &lt;a href="https://github.com/thevik"&gt; follow me on github &lt;/a&gt; and &lt;a href="https://github.com/thevik/qrcode"&gt; star this repo &lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
      <category>help</category>
    </item>
    <item>
      <title>Basic PHP course</title>
      <author>Walter Nascimento</author>
      <pubDate>Thu, 05 Aug 2021 18:56:22 +0000</pubDate>
      <link>https://dev.to/walternascimentobarroso/basic-php-course-3hih</link>
      <guid>https://dev.to/walternascimentobarroso/basic-php-course-3hih</guid>
      <description>&lt;p&gt;&lt;a href="https://medium.com/walternascimentobarroso-pt/curso-de-php-b%C3%A1sico-fa984be7c9b9"&gt;[Clique aqui para ler em portugu√™s]&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#which-is"&gt;
  &lt;/a&gt;
  Which is?
&lt;/h2&gt;

&lt;p&gt;PHP is a language that allows you to create dynamic WEB sites, enabling interaction with the user through forms, URL parameters and links.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;PHP is a popular general-purpose scripting language that is especially suited to web development.&lt;/p&gt;

&lt;p&gt;Fast, flexible and pragmatic, PHP powers everything from your blog to the most popular websites in the world.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Although PHP is widely used in web environments, it is quite flexible and can also be used for creating desktop applications and so on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#history"&gt;
  &lt;/a&gt;
  History
&lt;/h2&gt;

&lt;p&gt;The PHP language was conceived during the fall of 1994 by Rasmus Lerdorf. There were several versions to get to the PHP that we have today, for a more complete reading visit the site &lt;a href="https://www.php.net/manual/pt_BR/history.php.php"&gt;https://www.php.net/manual/pt_BR/history.php.php&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-php"&gt;
  &lt;/a&gt;
  Installing PHP
&lt;/h2&gt;

&lt;p&gt;To install PHP you just have to download the desired version file directly from the official website &lt;a href="https://www.php.net/downloads"&gt;https://www.php.net/downloads&lt;/a&gt; and configure the environment variable, if you use linux it‚Äôs even simpler, just run apt install php and php will be installed on your machine (in case you need to define the version you want to install eg 5.4, 7.1, 7.3, 8.0 and etc).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-php"&gt;
  &lt;/a&gt;
  Running PHP
&lt;/h2&gt;

&lt;p&gt;The php can be used directly in the terminal, for that use the command php -a, with that you will be able to execute all the commands directly in the terminal (interactive terminal).&lt;/p&gt;

&lt;p&gt;To execute a command we will simply type echo ‚ÄúHello World‚Äù; and with that the text will be displayed in the terminal, if you want to exit the terminal type quit (or CTRL+C).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#embedded-web-server"&gt;
  &lt;/a&gt;
  Embedded web server
&lt;/h3&gt;

&lt;p&gt;Since version 5.4 the PHP CLI comes with a built-in http server. It can be used for development and testing or for demonstrations of applications that run in controlled environments.&lt;/p&gt;

&lt;p&gt;If you want to use it for development, follow the example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/public_html
php &lt;span class="nt"&gt;-S&lt;/span&gt; localhost:8000
php &lt;span class="nt"&gt;-S&lt;/span&gt; 0.0.0.0:80 // So the application is already exposed within your network &lt;span class="k"&gt;for &lt;/span&gt;your ip
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-file"&gt;
  &lt;/a&gt;
  Creating a file
&lt;/h2&gt;

&lt;p&gt;To create a php file, you need at the beginning of the file put the instruction &amp;lt;?php this declares that the content will be processed via php, to complete the creation of the file save with the extension .php (example index.php), to execute the file type php index.php.&lt;br&gt;
Tools&lt;/p&gt;

&lt;p&gt;To work with PHP you need two important tools the first is the browser (browser) as it will display the page you are creating (remembering that we can use the php cli itself to display information but as the objective is to work with the php for web the ideal and already getting used to the browser) and the second is an editor, although we can work with a standard file editor (notepad and etc) the better the tool the faster we create our pages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Browsers:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.google.com/intl/pt-BR/chrome/"&gt;Chrome&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.mozilla.org/pt-BR/firefox/new/"&gt;Firefox&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.microsoft.com/pt-br/edge"&gt;Microsoft Edge&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.opera.com/pt-br"&gt;Opera&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.microsoft.com/pt-br/download/internet-explorer.aspx"&gt;Internet Explorer&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.apple.com/br/safari/"&gt;Safari&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;etc‚Ä¶&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Text Editor:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://notepad-plus-plus.org/downloads/"&gt;Notepad++&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://atom.io/"&gt;Atom&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://brackets.io/"&gt;Brackets&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;etc‚Ä¶&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#basic-syntax"&gt;
  &lt;/a&gt;
  Basic Syntax
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#comments"&gt;
  &lt;/a&gt;
  Comments
&lt;/h3&gt;

&lt;p&gt;To use comments in php you can use it in two ways, the first /** */ is mainly used for multiline comments, and for only one line it is mainly used //&lt;/p&gt;

&lt;p&gt;PHP supports ‚ÄòC‚Äô, ‚ÄòC++‚Äô and Unix shell (Perl style) comments. For example:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'This is a test'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// One-line comment style in C++ &lt;/span&gt;
&lt;span class="cm"&gt;/* This is a multiline comment yet another line of comment */&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'This is yet another test'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'A final test'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# This is a one-line shell-style comment&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#short-echo"&gt;
  &lt;/a&gt;
  Short echo
&lt;/h3&gt;

&lt;p&gt;PHP includes a short tag echo &amp;lt;?= which is shorthand for &amp;lt;?php echo.&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$var&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt; // this
&lt;span class="cp"&gt;&amp;lt;?=&lt;/span&gt; &lt;span class="nv"&gt;$var&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt; // turns into that
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h3&gt;

&lt;p&gt;Whenever you have information that needs to be saved or some value that will be manipulated, We use variables, and to use variables in PHP, we always add the $ symbol at the beginning of the word, and to assign the value to a variable we add the equal(=) operator ) and the value to be assigned, for example:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#data-type"&gt;
  &lt;/a&gt;
  Data type
&lt;/h3&gt;

&lt;p&gt;PHP has several data types, there are scalar types&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Escalares&lt;/th&gt;
&lt;th&gt;Compostos&lt;/th&gt;
&lt;th&gt;Especiais&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;array&lt;/td&gt;
&lt;td&gt;resource&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;object&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;callable&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;iterable&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$wage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1000.301&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$division&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Ol√° mundo"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;getType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$boolean&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Despite having several data types, as php is weakly typed, so being a beginner you don‚Äôt need to worry too much about the initial data type, because even if the variable is string, you can still make a mathematical expression with her.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#strings"&gt;
  &lt;/a&gt;
  Strings
&lt;/h3&gt;

&lt;p&gt;When setting a value in quotes, php already transforms it into a string.&lt;/p&gt;

&lt;p&gt;If you want to set a single value use single quotes, if you want to read the value of a variable use double quotes&lt;/p&gt;

&lt;p&gt;Ex.:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'ok'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'$test'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$output&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Prints the text $test&lt;/span&gt;
&lt;span class="nv"&gt;$output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$test&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$output&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Prints the text ok&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To concatenate strings we use the period (.) and inside the double quotes we can use variables.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#operations"&gt;
  &lt;/a&gt;
  Operations
&lt;/h3&gt;

&lt;p&gt;To do operations in PHP is very simple, simply using the operators of addition, subtraction and so on.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$minus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;‚Äì&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$multiplication&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$division&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$potency&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$rest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#control-structures"&gt;
  &lt;/a&gt;
  Control Structures
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#decisions-in-code-if"&gt;
  &lt;/a&gt;
  Decisions in code (IF)
&lt;/h3&gt;

&lt;p&gt;To make decisions we use the IF conditions, the if makes a check if something is true and if it is it executes a {} statement block, example&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$age&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"over 18"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#decisions-in-code-else"&gt;
  &lt;/a&gt;
  Decisions in code (ELSE)
&lt;/h3&gt;

&lt;p&gt;Else is the opposite case of if, so every if statement can be followed by an else, example:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$age&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"over 18"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"under 18"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#code-decisions-else-if-and-elseif"&gt;
  &lt;/a&gt;
  Code decisions (ELSE IF and ELSEIF)
&lt;/h3&gt;

&lt;p&gt;The Else if is when you fall to the else but there is no statement something like that&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;So the first statement after the else is executed, in this case the if, and the elseif is a reserved word to do a check after the if fails and falls into the elseif, in short, they both do the same thing in different ways.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;elseif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; all expressions that were written and evaluated by if must be able to be represented as a boolean value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you use some other value (string, int, float, etc), PHP itself will convert these values to Boolean following the rules explained in the documentation.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#ternary-operator"&gt;
  &lt;/a&gt;
  Ternary Operator
&lt;/h3&gt;

&lt;p&gt;When the if and/or else has only one statement, then it is not mandatory to use braces {}, but by default it is more used with braces regardless of having only one line or not. Also, when there is only one line to be executed, we have another option for making decisions. If we need, for example, to assign the value to a variable based on some condition, we can use what is called a ternary operator. Its syntax is as follows:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$condition&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nv"&gt;$ValueIfTrue&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$ValueIfFalse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#repetitions-loop"&gt;
  &lt;/a&gt;
  Repetitions (loop)
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#while"&gt;
  &lt;/a&gt;
  while
&lt;/h3&gt;

&lt;p&gt;While loops are the simplest loop types in PHP. It behaves similarly to C. The basic format of a while statement is:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;statement&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The purpose of the while statement is simple. It will tell PHP to execute nested statements repeatedly as long as the while expression evaluates to true.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#dowhile"&gt;
  &lt;/a&gt;
  do-while
&lt;/h3&gt;

&lt;p&gt;Do-while loops are very similar to while loops, except that the evaluation expression is checked at the end of each iteration rather than at the beginning. The biggest difference for the while loop is that the first iteration of the do-while loop is always executed (the evaluation expression is only executed at the end of the iteration), whereas in the while loop it is not necessarily executed (the evaluation expression is executed at the beginning of each iteration, if it evaluates to false at the beginning, the execution of the loop will be aborted immediately).&lt;/p&gt;

&lt;p&gt;There is only one syntax for the do-while loop.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#for"&gt;
  &lt;/a&gt;
  for
&lt;/h3&gt;

&lt;p&gt;For loops are the most complex in PHP. It has similar behavior to C. The syntax of the for loop is:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expr1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;expr2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;expr3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;statement&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The first expression (expr1) is evaluated (executed) once, unconditionally, at the beginning of the loop.&lt;/p&gt;

&lt;p&gt;At the beginning of each iteration expr2 is evaluated. If it evaluates to true, the loop will continue and the nested statements will be executed. If it evaluates to false, loop execution will terminate.&lt;/p&gt;

&lt;p&gt;At the end of each iteration, expr3 is evaluated (executed).&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* example 1 */&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* example 2 */&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* example 3 */&lt;/span&gt;
&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(;&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* example 4 */&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$j&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#foreach"&gt;
  &lt;/a&gt;
  foreach
&lt;/h3&gt;

&lt;p&gt;The foreach constructor provides an easy way to iterate over arrays. foreach only works on arrays and objects, and will throw an error when trying to use it on a variable with a different data type or on an uninitialized variable. It has two syntaxes:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array_expression&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;statement&lt;/span&gt;

&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array_expression&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;statement&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#arrays"&gt;
  &lt;/a&gt;
  Arrays
&lt;/h2&gt;

&lt;p&gt;An array in PHP is actually an ordered map. A map is a type that relates values to keys. This type is optimized for several different uses: it can be treated as an array, a list (vector), HashTables (which is an implementation of maps), dictionary, collection, stack, queue and probably more. They are dynamic in size, can have strings as their indices, and can be manipulated in different ways.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;chave&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;valor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;chave2&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;valor2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;chave3&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;valor3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="err"&gt;‚Ä¶&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Php only works with keys being numeric or string, boolean, float and etc will be forced to be converted.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"1"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mf"&gt;1.5&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;var_dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#function"&gt;
  &lt;/a&gt;
  Function
&lt;/h2&gt;

&lt;p&gt;Subroutine executes what it has to execute and doesn‚Äôt return anything, a function returns something.&lt;/p&gt;

&lt;p&gt;A function can be defined using the following syntax:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$arg_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$arg_2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="cm"&gt;/* ‚Ä¶, */&lt;/span&gt; &lt;span class="nv"&gt;$arg_n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Function example.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$returned_value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Any valid PHP code can appear inside a function, even other functions and &lt;a href="https://www.php.net/manual/pt_BR/language.oop5.basic.php#language.oop5.basic.class"&gt;class&lt;/a&gt; definitions.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#anonymous-functions"&gt;
  &lt;/a&gt;
  Anonymous functions
&lt;/h3&gt;

&lt;p&gt;Anonymous functions, also known as closures, allow you to create functions that don‚Äôt have the specified name. They are most useful as the value of &lt;a href="https://www.php.net/manual/pt_BR/language.pseudo-types.php#language.types.callback"&gt;callback&lt;/a&gt; parameters, but they can have many other uses.&lt;/p&gt;

&lt;p&gt;Anonymous functions are implemented using the &lt;a href="https://www.php.net/manual/pt_BR/class.closure.php"&gt;Closure&lt;/a&gt; class&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;preg_replace_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‚Äò&lt;/span&gt;&lt;span class="o"&gt;~-&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="err"&gt;‚Äô&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$match&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;strtoupper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$match&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="err"&gt;‚Äò&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="err"&gt;‚Äô&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// outputs helloWorld&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#recursive-functions"&gt;
  &lt;/a&gt;
  Recursive functions
&lt;/h3&gt;

&lt;p&gt;A recursive function is nothing less than a function that invokes itself.&lt;/p&gt;

&lt;p&gt;For that, there must necessarily be a condition in which the functions stop calling each other, and when they reach a certain argument value, they stop calling.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;fat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$number&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$number&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;fat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$number&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#coding-standard"&gt;
  &lt;/a&gt;
  Coding Standard
&lt;/h2&gt;

&lt;p&gt;Every language leaves a range of possibilities to work with it, HTML is no different, you can write tags in uppercase or lowercase or not put certain attributes and so on.&lt;/p&gt;

&lt;p&gt;To make writing more compatible, the ideal is to have a coding standard.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h2&gt;

&lt;p&gt;Every language has documentation and PHP would be no different, a tool I really like to read documentation is &lt;a href="https://devdocs.io/"&gt;DevDocs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;if you need any tips faster, use &lt;a href="https://devhints.io/wip/php"&gt;devhints&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For usage tips, visit &lt;a href="http://br.phptherightway.com/"&gt;phptherightway&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h2&gt;

&lt;p&gt;If you have any questions, complaints or tips, you can leave them here in the comments. I will be happy to answer!&lt;/p&gt;

&lt;p&gt;üòäüòä See you! üòäüòä&lt;/p&gt;

</description>
      <category>php</category>
      <category>course</category>
      <category>training</category>
    </item>
    <item>
      <title>Starting with sorting algorithms</title>
      <author>Ricardo Borges</author>
      <pubDate>Thu, 05 Aug 2021 18:27:05 +0000</pubDate>
      <link>https://dev.to/ricardo_borges/starting-with-sorting-algorithms-1e5m</link>
      <guid>https://dev.to/ricardo_borges/starting-with-sorting-algorithms-1e5m</guid>
      <description>&lt;p&gt;a sorting algorithm is an algorithm that sorts elements in a list into an order, among other uses, sorting can be applied to prepare a set of data for another algorithm, for example, Binary Search.&lt;/p&gt;

&lt;p&gt;In this post, I'll describe three sorting algorithms that, although not the most efficient, are easy to understand and are in-place algorithms, meaning that they don't require auxiliary data structures.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bubble-sort"&gt;
  &lt;/a&gt;
  Bubble Sort
&lt;/h3&gt;

&lt;p&gt;Bubble sort starts at the beginning of the list, comparing each pair of adjacent elements, if the first is greater than the second, it swaps them. Then it starts again at the beginning of the list and repeats this process until no swap occurred on the last pass.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jIDOT29c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1627934933/algorithms/sorting/bubble-sort_az17q6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jIDOT29c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1627934933/algorithms/sorting/bubble-sort_az17q6.gif" alt="bubble sort"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bubbleSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;swapped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;swapped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;swapped&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;bubbleSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since its complexity is Œü(n^2) on average and worst cases, this algorithm is more suitable for small or nearly ordered data sets.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#selection-sort"&gt;
  &lt;/a&gt;
  Selection Sort
&lt;/h3&gt;

&lt;p&gt;The list is divided into a sorted part at the left and an unsorted part at the right in this algorithm. Initially, the sorted sublist is empty and the unsorted one is all the list. Then it searches for the smallest element in the unsorted sublist and swaps it with the leftmost sorted element, moving the sublist boundaries one element to the right.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OQwNquIh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1627934933/algorithms/sorting/selection-sort_limbbw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OQwNquIh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1627934933/algorithms/sorting/selection-sort_limbbw.gif" alt="selection sort"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;selectionSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Like Bubble Sort, this algorithm has a quadratic complexity Œü(n^2), so it is also more suitable for small or nearly ordered data sets. However, Selection Sort performs fewer swaps than Bubble Sort.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#insertion-sort"&gt;
  &lt;/a&gt;
  Insertion Sort
&lt;/h3&gt;

&lt;p&gt;Insertion Sort keeps a sorted sublist at the beginning of the list, and for each element from the list, it searches for the right position in that sublist to &lt;em&gt;insert&lt;/em&gt; that element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QIKh5kg5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1627934933/algorithms/sorting/Insertion-sort_txmv8m.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QIKh5kg5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1627934933/algorithms/sorting/Insertion-sort_txmv8m.gif" alt="insertion sort"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;insertionSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Insertion sort has a quadratic complexity for average and worst cases too, however, it's the fastest sorting algorithm for small lists.&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>sorting</category>
      <category>typescript</category>
    </item>
    <item>
      <title>My Journey Of Building pascaline  üßÆ</title>
      <author>Ritesh Kumar</author>
      <pubDate>Thu, 05 Aug 2021 18:16:32 +0000</pubDate>
      <link>https://dev.to/wordssaysalot/my-journey-of-building-pascaline-5017</link>
      <guid>https://dev.to/wordssaysalot/my-journey-of-building-pascaline-5017</guid>
      <description>&lt;h3&gt;
  &lt;a href="#hi-everyone-hope-you-all-are-doing-well"&gt;
  &lt;/a&gt;
  Hi Everyone üëã, hope you all are doing well. üöÄ
&lt;/h3&gt;

&lt;p&gt;In this article, I'll tell you how the notion of pascaline came to me.&lt;/p&gt;

&lt;p&gt;Last week, I took part in the week-long  IBD WFH tool building challenge hosted by crio.do.&lt;br&gt;
In this challenge, We were instructed to build useful open-source apps or extensions that would help us work more efficiently and increase productivity.&lt;/p&gt;

&lt;p&gt;So I began thinking about what I could build and decided to work on an issue I found¬†a few days ago.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem
&lt;/h2&gt;

&lt;p&gt;a while ago while filling out a form and had to answer some questions about my budget, so I think of quickly installed an extension to help me out. As soon as I opened the chrome¬†store and explored some extensions, I found that all of them had a really unpleasant UI, they were working perfectly fine but the experience I found was not that pleasant. After that, I looked into some articles on how to build an extension and found the  &lt;a href="https://developer.chrome.com/docs/extensions/"&gt;Chrome documentation&lt;/a&gt; &amp;amp;  &lt;a href="https://www.freecodecamp.org/news/how-to-implement-a-chrome-extension-3802d63b5376/"&gt;this article &lt;/a&gt; to be really informative and useful.&lt;/p&gt;

&lt;p&gt;So I decided to build a new one because we all know from personal experience that a good User Interface is important in the sense that it allows everyone to clearly see and use the products. also, It was an excellent opportunity for me to implement the¬†stack that I've recently learned.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúGood design is like a refrigerator‚Äîwhen it works, no one notices, but when it doesn‚Äôt, it sure stinks.‚Äù ‚ÄìIrene Au&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#design"&gt;
  &lt;/a&gt;
  Design
&lt;/h2&gt;

&lt;p&gt;I've been going deeper into the world of UI/UX for a few months now, and I'm loving the procss.&lt;br&gt;
Now, I started with a sketch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UTUZkhYd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628051986433/qKKbLBcQ0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UTUZkhYd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628051986433/qKKbLBcQ0.png" alt="Frame 38.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, I began creating the Design in FIGMA,&lt;br&gt;
screenshot of my untidy artboard&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eeiCPXnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627905202902/65k6OXC_pd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eeiCPXnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627905202902/65k6OXC_pd.png" alt="image 26.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#development"&gt;
  &lt;/a&gt;
  Development
&lt;/h2&gt;

&lt;p&gt;Basically, Extensions are software programs, built on web technologies that enable users to customize the browsing experience.&lt;br&gt;
First, let's talk about the &lt;br&gt;&lt;br&gt;
&lt;strong&gt;Tech Stack I used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Library I used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mathjs.org/"&gt;math.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, &lt;strong&gt;Phases of Development&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Extension Interface&lt;/li&gt;
&lt;li&gt;Manifest File&lt;/li&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I will explain each phase of development with relevant screenshots and code for better understanding.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-extension-interface"&gt;
  &lt;/a&gt;
  1. Extension Interface
&lt;/h2&gt;

&lt;p&gt;To build the extension interface, we should have a fundamental knowledge of HTML, CSS, and JavaScript. HTML (index.html) is used to build the skeleton body of our extension and we style the components and button using CSS (style.css). We use JavaScript (script.js) to giving it life, i.e, make it work to solve the equations. &lt;/p&gt;

&lt;p&gt;So let‚Äôs dive into the first Part: The structure and design of our calculator.&lt;br&gt;
In the HTML skeleton Inside Body, I‚Äôm defining a new div with a class named ‚Äúbutton‚Äù.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="button"&amp;gt; &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I place one more div, inside this div and there will be text that our button should hold is placed between these two tags. Along with the tag, I‚Äôll be giving them an id. This id will help at the time of back-end programming. See example below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="button"&amp;gt;
&amp;lt;div class="inner-button"&amp;gt;
0
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&amp;amp;, I‚Äôve coded the same div approx 20 times to make the basic structure of the calculator.&lt;br&gt;
You can find the whole HTML code below&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/Wordssaysalot/k3hceavx/embedded/html//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Let‚Äôs jump to the CSS section. &lt;/p&gt;

&lt;p&gt;I primarily worked on these properties in order to make the calculator look nice.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;background-color
&lt;/li&gt;
&lt;li&gt;Padding
&lt;/li&gt;
&lt;li&gt;Width
&lt;/li&gt;
&lt;li&gt;Text alignment
&lt;/li&gt;
&lt;li&gt;Font size
&lt;/li&gt;
&lt;li&gt;BORDER RADIUS
&lt;/li&gt;
&lt;li&gt;Box- Shadow

complete CSS code for this:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/Wordssaysalot/k3hceavx/3//embedded/css//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Now, We will be coming to the javascript part &lt;br&gt;&lt;br&gt;
Until now the calculator is lifeless. We have to give it life.&lt;br&gt;
So let‚Äôs dive into the backend section and make the calculator solve our problems.&lt;br&gt;
Now we have to define a function, that can perform different tasks and for the calculation part I used  Math.js i.e an extensive math library for JavaScript, It features real and complex numbers, units, matrices, a large set of mathematical functions, and a flexible expression parser.&lt;br&gt;&lt;br&gt;
Below is the complete script.js :&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/Wordssaysalot/k3hceavx/5//embedded/js//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-manifest-file"&gt;
  &lt;/a&gt;
  2. Manifest File
&lt;/h2&gt;



&lt;p&gt;We have now reached the second phase in our extension development and it involves creating a manifest.json file. The manifest.json file is the only file that every extension using WebExtension APIs must contain. Using manifest.json, we specify basic metadata about your extension such as the name and version, and can also specify aspects of your extension's functionality (such as background scripts, content scripts, and browser actions). We also add icons to our extension and test them in the browser to connect everything.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
We set our extension name in the name attribute. We define a version number and type out a description which the users can see after loading the extension. We set our background script in place. We use a 128px icon and a default icon to be displayed on the extension bar, both designed in Figma. Whenever the user opens a new tab we want our extension page to be loaded there. This is possible because of chrome_url_overrides which overrides the default new tab layout and loads our extension home index.html. We lastly add manifest version and security policies.&lt;br&gt;&lt;br&gt;
Below is the complete manifest.json code:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L5VbppZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pnk6e1h7z5kwpij8njy0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L5VbppZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pnk6e1h7z5kwpij8njy0.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-testing"&gt;
  &lt;/a&gt;
  3. Testing
&lt;/h2&gt;

&lt;p&gt;Loading and Testing the extension &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We open the Chrome web browser. On the top right corner customize button is represented by three vertical dots. Go to &lt;strong&gt;More tools -&amp;gt; Extensions&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Enable Developer Mode&lt;/strong&gt; on the top left after opening the Extensions page. Then Click on Load unpacked and select the parent directory of the built extension.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sky_SG5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628009741532/rnsKldviD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sky_SG5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628009741532/rnsKldviD.png" alt="1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Fact: While loading an unpacked extension, Chrome always looks for the manifest.json file and loads the extension using that file as a parent. Know we know the importance of manifest.json.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt; 3.  Once loaded, on the extension page, we can see our extension with the icon and description as below. Click on Details.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VqcMrN0a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628009754217/zAsVohw2_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VqcMrN0a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628009754217/zAsVohw2_.png" alt="2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt; 4. Here, we can see each and every detail about our extension which we put in our manifest.json file and the directory from which it was loaded.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P_rQKs8I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628009791902/kILPZGi9F.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P_rQKs8I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628009791902/kILPZGi9F.png" alt="Frame 37.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt; 5. Enable the extension and open a new tab. Voila! You should be able to see the extension up and running.&lt;/p&gt;

&lt;p&gt;You can now see the Pascaline logo in the browser's extension bar on the top right, from which you can also launch the extension.&lt;/p&gt;

&lt;p&gt;This brings us to the end of our development, and it was a great learning experience for me because I had never built an extension before.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Feel free to star ‚≠êÔ∏è the project if you found it useful -&lt;br&gt;
&lt;a href="https://github.com/wordssaysalot/Pascaline"&gt;https://github.com/wordssaysalot/Pascaline&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h2&gt;

&lt;p&gt;Let me know your thoughts and feedback in the comments section.&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>opensource</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>How I Think About React (A Mental Model For Beginners) | Part 3: Managing Data</title>
      <author>Michael Mangialardi</author>
      <pubDate>Thu, 05 Aug 2021 17:56:56 +0000</pubDate>
      <link>https://dev.to/michaelmangial1/how-i-think-about-react-a-mental-model-for-beginners-part-3-managing-data-1983</link>
      <guid>https://dev.to/michaelmangial1/how-i-think-about-react-a-mental-model-for-beginners-part-3-managing-data-1983</guid>
      <description>&lt;p&gt;In a &lt;a href="https://dev.to/michaelmangial1/how-i-think-about-react-a-mental-model-for-beginners-part-2-component-hierarchy-1g4p"&gt;previous article&lt;/a&gt;, I summarized React as a means to render a collection of elements to a web page using &lt;em&gt;components&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Components are ultimately functions that render elements to a web page.&lt;/p&gt;

&lt;p&gt;Since elements have a hierarchical structure, and components are just a means to rendering elements, components are also organized in a hierarchical structure.&lt;/p&gt;

&lt;p&gt;By using functions to render elements (instead of typing things directly into an HTML file), React components can dynamically display and render different things to the user based on the flow of data.&lt;/p&gt;

&lt;p&gt;Today, I'll be diving into my mental model for understanding React's "flow of data" between components.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data"&gt;
  &lt;/a&gt;
  Data
&lt;/h2&gt;

&lt;p&gt;Data sounds like a technical term, but it's quite simple. Data is simply information.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VuQU0V9B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1532619675605-1ede6c2ed2b0%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1050%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VuQU0V9B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1532619675605-1ede6c2ed2b0%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1050%26q%3D80" alt="data"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Any web application needs information to guide the user to an end goal.&lt;/p&gt;

&lt;p&gt;For example, Twitter needs to know your username and password (data/information) in order to log you into the application. It also needs to know recent tweets from your followers (data/information) based on the current date (data/information).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sources-of-data"&gt;
  &lt;/a&gt;
  Sources of Data
&lt;/h3&gt;

&lt;p&gt;Since a web application needs data/information to guide the user to an end goal, we'll need to think about what &lt;em&gt;sources&lt;/em&gt; of data exist in a web application.&lt;/p&gt;

&lt;p&gt;Knowing the different sources of data, we'll be able to clarify how React handles these sources of data for dynamically rendering elements to a web page.&lt;/p&gt;

&lt;p&gt;I tend to think that there are 3 potential sources of data in a web application:&lt;/p&gt;

&lt;p&gt;1) Data stored &lt;em&gt;locally&lt;/em&gt; in your code or on your computer&lt;br&gt;
2) Data that must be &lt;em&gt;fetched/retrieved&lt;/em&gt; from another computer&lt;br&gt;
3) Data that is collected from the &lt;em&gt;end user's interactions&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_FUHc8uX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1597852074816-d933c7d2b988%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D1050%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_FUHc8uX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1597852074816-d933c7d2b988%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D1050%26q%3D80" alt="data"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#local-data"&gt;
  &lt;/a&gt;
  Local Data
&lt;/h4&gt;

&lt;p&gt;A React project might initially receive data from another file in the project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// File A&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;someFileWithData&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./someFileWithData.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// File B (someFileWithData.js)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Perhaps, it could "hardcode" the data directly in the file that needs it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// File A&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#data-from-another-computer"&gt;
  &lt;/a&gt;
  Data From Another Computer
&lt;/h4&gt;

&lt;p&gt;A React project might initially receive data from another computer.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#databases"&gt;
  &lt;/a&gt;
  Databases
&lt;/h5&gt;

&lt;p&gt;First off, why would there be data on another computer when you can store data locally as we just saw?&lt;/p&gt;

&lt;p&gt;Storing data locally works fine here and there, but typically, the bulk of the data that "runs" a web application is better stored in a &lt;em&gt;database&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A database is essentially storage room for data on a computer. It allows you to store data in an organized way.&lt;/p&gt;

&lt;p&gt;Storing data in a database has several advantages:&lt;/p&gt;

&lt;p&gt;1) It is optimized for storing large volumes of data. If your data was stored all in your project, it could slow things down.&lt;br&gt;
2) It can be "sourced" by multiple applications. If you needed to share data between two web applications that are different but similar in a company, for example, then a database would have you covered.&lt;br&gt;
3) Databases are optimized for being searched and sorted. Meaning, you need to do less thinking and coding to organize, search, and sort your data since databases.&lt;br&gt;
4) Databases are safer places to store personal information about users (i.e. emails and passwords).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0aSUPgy1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1582139329536-e7284fece509%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D800%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0aSUPgy1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1582139329536-e7284fece509%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D800%26q%3D80" alt="data"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#servers"&gt;
  &lt;/a&gt;
  Servers
&lt;/h5&gt;

&lt;p&gt;These databases need to be stored on another computer so that multiple web applications can retrieve the data.&lt;/p&gt;

&lt;p&gt;So, we need a computer that will always be running. Another name for a computer that is always running is a server.&lt;/p&gt;

&lt;p&gt;Still to this day, the word "server" makes me cringe a little because it seems like such a technical, loaded term. I think of dark closet with a bunch of complex wires.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jEsaMnVW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1558494949-ef010cbdcc31%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1491%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jEsaMnVW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1558494949-ef010cbdcc31%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1491%26q%3D80" alt="server"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, it's quite simple. Again, it is just a computer that is meant to always running.&lt;/p&gt;

&lt;p&gt;A server is meant to always be running so that it can "serve," that is make accessible to other computers, applications and databases.&lt;/p&gt;

&lt;p&gt;So, data that is initially needed for a React project might be retrieved from a database that is accessible via a server (another computer that is always running).&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#apis"&gt;
  &lt;/a&gt;
  APIs
&lt;/h5&gt;

&lt;p&gt;Ok, so how does a React project retrieve data from a database that is accessible via a server?&lt;/p&gt;

&lt;p&gt;The answer is that you retrieve data from a server using &lt;em&gt;APIs&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;"API" stands for &lt;strong&gt;A&lt;/strong&gt;pplication &lt;strong&gt;P&lt;/strong&gt;rogramming &lt;strong&gt;I&lt;/strong&gt;nterface.&lt;/p&gt;

&lt;p&gt;This is just one of those acronyms that you'll have to get used to hearing...&lt;/p&gt;

&lt;p&gt;Basically, it's an API is any &lt;em&gt;interface&lt;/em&gt;, or means of communication, with another application.&lt;/p&gt;

&lt;p&gt;Specifically in our case, we're interested in APIs, means of communication, that interact with a database "served" by an application on a server.&lt;/p&gt;

&lt;p&gt;APIs for this specific context are called &lt;em&gt;REST&lt;/em&gt; APIs. "REST" stands for "&lt;strong&gt;re&lt;/strong&gt;presentational &lt;strong&gt;s&lt;/strong&gt;tate &lt;strong&gt;t&lt;/strong&gt;ransfer." "Representational state transfer" could be put in plainer words: "organized data transfer," referring to structured/organized data being transferred from a database to an application. "State" is essentially just another word for "data" used by an application.&lt;/p&gt;

&lt;p&gt;A REST API, therefore, is the type of API used to by web application to get data from a database running on another server.&lt;/p&gt;

&lt;p&gt;A REST API is the middleman. Our application can say "here's what I need from that database over yonder." The REST API says, "sure thing, boss. Here you go!"&lt;/p&gt;

&lt;p&gt;Now, like a human conversation, we need to speak to a REST API in a way it will understand.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mu3pMu1b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1523908511403-7fc7b25592f4%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D1050%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mu3pMu1b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1523908511403-7fc7b25592f4%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D1050%26q%3D80" alt="conversation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I won't be diving into that in this article, you can &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"&gt;dig more into it&lt;/a&gt; on your own if you'd like.&lt;/p&gt;

&lt;p&gt;All you need to know, for the purpose of forming a foundation mental model, is that a React project may get data from another computer (server) via an API.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#data-collected-from-user-interactions"&gt;
  &lt;/a&gt;
  Data Collected From User Interactions
&lt;/h4&gt;

&lt;p&gt;Third and finally, data can be initially retrieved from a React project by collecting user interactions.&lt;/p&gt;

&lt;p&gt;For every element on a web page, you can write instructions (code) on how to handle interactions.&lt;/p&gt;

&lt;p&gt;In technical terms, an interaction is called an &lt;em&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events"&gt;event&lt;/a&gt;&lt;/em&gt;."&lt;/p&gt;

&lt;p&gt;In other words, web elements comes with ways to handle events; you can code &lt;em&gt;event handlers&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For example, let's say that you want to write code to handle if a user clicks on an element (triggering a "click" event).&lt;/p&gt;

&lt;p&gt;Here's how you would write the code in React:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Clicked!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click Me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If a user clicks the &lt;code&gt;div&lt;/code&gt; element, an alert will be triggered.&lt;/p&gt;

&lt;p&gt;In that code, we are handling a user's interaction, but that interaction is not providing us data.&lt;/p&gt;

&lt;p&gt;Nevertheless, we can &lt;em&gt;derive&lt;/em&gt; data based on a user's interactions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;hasClicked&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setHasClicked&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// hasClicked --&amp;gt; false&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setHasClicked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click Me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// hasClicked --&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't worry about this React code yet, as I've not yet given a mental model to explain those specifics.&lt;/p&gt;

&lt;p&gt;The point is that React has a way to "derive" data/state from a user's interactions.&lt;/p&gt;

&lt;p&gt;Now, some web elements allow us to not merely derive data, but to get data as inputted from a user (i.e. username and password).&lt;/p&gt;

&lt;p&gt;Data that must be explicitly collected from a user requires an &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input"&gt;&lt;code&gt;input&lt;/code&gt;&lt;/a&gt; element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/*...*/&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above is some React code for handling the event that a user should type text into an input field.&lt;/p&gt;

&lt;p&gt;This is what happens when you log into a web application, for example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z_sX6vhv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.pexels.com/photos/162622/facebook-login-office-laptop-business-162622.jpeg%3Fauto%3Dcompress%26cs%3Dtinysrgb%26dpr%3D2%26h%3D650%26w%3D940" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z_sX6vhv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.pexels.com/photos/162622/facebook-login-office-laptop-business-162622.jpeg%3Fauto%3Dcompress%26cs%3Dtinysrgb%26dpr%3D2%26h%3D650%26w%3D940" alt="login"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;To sum things up so far, we've learned that a React project can get data from another file on the same computer, data from a database on a server via an API, or from user interactions via event handlers on a web element.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#react-state-and-props"&gt;
  &lt;/a&gt;
  React State and Props
&lt;/h2&gt;

&lt;p&gt;As I've mentioned before, React is a framework that offers a shorthand way to render web elements and dynamically change them based on the data that can be "sourced" from a variety of sources in a project, as we have just seen.&lt;/p&gt;

&lt;p&gt;Let's dive into the React specifics a bit more.&lt;/p&gt;

&lt;p&gt;Again, React components are just functions that render a web element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Some Button&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This component is a function that returns a &lt;code&gt;button&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;Easy enough.&lt;/p&gt;

&lt;p&gt;Now, let's say we want to make this dynamic based on changes in data.&lt;/p&gt;

&lt;p&gt;This doesn't usually happen, but for the sake of illustration, let's say we wanted to change the button's text if the user has hovered it.&lt;/p&gt;

&lt;p&gt;We want to derive data (whether the user has hovered a button) based on an event (the user hovers).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#state"&gt;
  &lt;/a&gt;
  State
&lt;/h3&gt;

&lt;p&gt;In React, all data that could impact what is rendered by a component needs to be explicitly "stored" as &lt;em&gt;state&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I mentioned before that state, generally speaking, is just data used by an application.&lt;/p&gt;

&lt;p&gt;"State", in the React sense, is data that React uses to determine whether refresh/re-render the element returned by a component. If data is stored as React state, then if the data changes, React knows to re-render the element.&lt;/p&gt;

&lt;p&gt;Usually, React state is the data that is derived or explicitly provided by the user via event handlers, and data that is retrieved from any API.&lt;/p&gt;

&lt;p&gt;Data that is hardcoded/unchanging/static in the same file as the component (or another file) doesn't need to be stored as React state since it will never change. Hence, it will never cause a need for the component to re-render.&lt;/p&gt;

&lt;p&gt;On the other hand, data derived from a user's interactions is dynamic (can change while the user is accessing the web application), so it needs to be stored as React state.&lt;/p&gt;

&lt;p&gt;Data that is retrieved from a database can change if a user's interaction requires re-fetching/re-retrieving the data from the database. So, it needs to also be stored as React state.&lt;/p&gt;

&lt;p&gt;React exposes a function called &lt;code&gt;useState&lt;/code&gt; for you so that you can tell it to store data as state and update the state based on a user's interactions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;hasClicked&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setHasClicked&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setHasClicked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click Me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;useState&lt;/code&gt; initially called with the "initial state."&lt;/p&gt;

&lt;p&gt;It returns 1) the state (&lt;code&gt;hasClicked&lt;/code&gt;) and 2) a function for changing the state (&lt;code&gt;setHasClicked&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;When the state is changed, React knows to re-render the returned element.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#props"&gt;
  &lt;/a&gt;
  Props
&lt;/h3&gt;

&lt;p&gt;Given that React components are just functions for rendering elements to a web page, and elements have a hierarchy, components also have a hierarchy.&lt;/p&gt;

&lt;p&gt;Following the City Model discussed in the &lt;a href="https://dev.to/michaelmangial1/how-i-think-about-react-a-mental-model-for-beginners-part-2-component-hierarchy-1g4p"&gt;previous article&lt;/a&gt;, we will have city, neighborhood, block, and house components (and hence, elements).&lt;/p&gt;

&lt;p&gt;Data can be retrieved at any layer in the city hierarchy. Given that there are 3 layers besides the house (the bottom layer), it is common to have to "pass down" the React state from one higher/parent component to a lower/child component.&lt;/p&gt;

&lt;p&gt;React calls data that is passed down to a child component a &lt;em&gt;prop&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ParentComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;hasClicked&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setHasClicked&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ChildComponent&lt;/span&gt; &lt;span class="na"&gt;hasClicked&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;hasClicked&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These "props," or properties are read-only. Meaning, you only change them by calling the function to set new state that is returned by &lt;code&gt;useState&lt;/code&gt; as we saw in a previous example.&lt;/p&gt;

&lt;p&gt;So, it's also common to pass down the function that can update state. That way, a child component can trigger a change. in state.&lt;/p&gt;

&lt;p&gt;React knows that if state initialized in a parent component is passed down to children component(s) as props, and that state is updated, then the component that initialized the state and the components that "consumed" that state via props should be refreshed/re-rendered.&lt;/p&gt;




&lt;p&gt;In future articles, we'll look into the specifics of React's syntax as well as React's concepts of component lifecycles.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>I made a script in Rust that will change your mac app's icon from a png</title>
      <author>Kunal Bagaria</author>
      <pubDate>Thu, 05 Aug 2021 17:43:37 +0000</pubDate>
      <link>https://dev.to/kb24x7/i-made-a-script-in-rust-that-will-change-your-mac-app-s-icon-from-a-png-5g2m</link>
      <guid>https://dev.to/kb24x7/i-made-a-script-in-rust-that-will-change-your-mac-app-s-icon-from-a-png-5g2m</guid>
      <description>&lt;p&gt;Thumbnail credit: &lt;a href="https://dribbble.com/shots/13810933-Big-Sur-Mac-Icons"&gt;Eric Hoffman&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cool, how do I use it?&lt;/p&gt;

&lt;p&gt;Firstly, you'll need to install the Rust's package manager.&lt;/p&gt;

&lt;p&gt;Install it here: &lt;a href="https://doc.rust-lang.org/cargo/getting-started/installation.html"&gt;Guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After installing the package manager, clone the &lt;a href="https://github.com/kb24x7/mac-icon-from-png"&gt;GitHub Repository&lt;/a&gt; using Git CLI, GitHub Desktop or &lt;a href="https://github.com/kb24x7/mac-icon-from-png/archive/refs/heads/main.zip"&gt;Download Zip&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now in you terminal, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cargo run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It'll prompt you to drag your PNG file. (The file should have a large resolution and should be square.)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--appoZAke--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vhdyf9psn5z8vrlmq3h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--appoZAke--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vhdyf9psn5z8vrlmq3h.png" alt="Screen Shot 2021-08-05 at 11.10.25 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After adding the PNG file, it'll prompt you to drag the application you want to replace the icon of.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iR9UohWw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kvj6qrei1qe4a1uoifxd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iR9UohWw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kvj6qrei1qe4a1uoifxd.png" alt="Screen Shot 2021-08-05 at 11.11.16 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After you do that, you can sit back and relax while the script does its thing.&lt;/p&gt;

&lt;p&gt;(This is the first time I've ever coded in Rust, so you might see some ugly scripting if you want to check the source)&lt;/p&gt;

&lt;p&gt;If you liked this content, hit this post a like and follow me on &lt;a href="https://twitter.com/kb24x7"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Will see you the next time I create something :)&lt;/p&gt;

</description>
      <category>rust</category>
      <category>dock</category>
      <category>macos</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Why is everyone so excited about PolyWork? First impressions aren't good!</title>
      <author>InHuOfficial</author>
      <pubDate>Thu, 05 Aug 2021 17:22:14 +0000</pubDate>
      <link>https://dev.to/inhuofficial/why-is-everyone-so-excited-about-polywork-first-impressions-aren-t-good-37d1</link>
      <guid>https://dev.to/inhuofficial/why-is-everyone-so-excited-about-polywork-first-impressions-aren-t-good-37d1</guid>
      <description>&lt;p&gt;Hi, just wondered what I was missing (as I am sure there is something!).&lt;/p&gt;

&lt;p&gt;Just signed up to &lt;a href="https://www.polywork.com/"&gt;PolyWork&lt;/a&gt; with a VIP code and I just don't get it?&lt;/p&gt;

&lt;p&gt;I spent ages scrolling through the never ending list of tags to add to my profile (which had repeated tags all over the place), weird but I get the concept. &lt;/p&gt;

&lt;p&gt;Anyway got it all set up and...now what? I added a link to a post (the editor is not great...and you can't add &lt;code&gt;alt&lt;/code&gt; descriptions so I had to improvise...so that immediately puts a big nail in the coffin for me anyway) - great, now what?&lt;/p&gt;

&lt;p&gt;Headed over to the "multiverse" - nothing really makes me want to follow anyone on there as it is just a list of names, went to "space station"...sure maybe I will contact a couple of investors but yet again it seems very basic and limited.&lt;/p&gt;

&lt;p&gt;I have yet to see a feed with articles or anything like that to give me ideas of who I want to follow. &lt;/p&gt;

&lt;p&gt;The whole thing is slow and clunky, having to press a couple of times to get pages to load.&lt;/p&gt;

&lt;p&gt;So please, what am I missing...is it all marketing hype with the "invite codes" rubbish and the pretty graphics, or do they actually have something special and I am just not getting it (and if that is the case, could someone tell me how I am &lt;em&gt;meant&lt;/em&gt; to be using it!).&lt;/p&gt;

&lt;p&gt;Thanks in advance. &lt;/p&gt;

</description>
      <category>discuss</category>
      <category>healthydebate</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Set up NodeJs in global path in Ubuntu with simple steps
</title>
      <author>Danyson</author>
      <pubDate>Thu, 05 Aug 2021 17:11:54 +0000</pubDate>
      <link>https://dev.to/danyson/set-up-nodejs-in-global-path-in-ubuntu-with-simple-steps-3bfm</link>
      <guid>https://dev.to/danyson/set-up-nodejs-in-global-path-in-ubuntu-with-simple-steps-3bfm</guid>
      <description>&lt;h1&gt;
  &lt;a href="#step-1-"&gt;
  &lt;/a&gt;
  Step 1 :
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Note : NodeJS v14 stable&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo snap install node --classic
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-2-"&gt;
  &lt;/a&gt;
  Step 2 :
&lt;/h1&gt;

&lt;h4&gt;
  &lt;a href="#configure-npm-to-use-the-raw-npmglobal-endraw-directory-for-global-module"&gt;
  &lt;/a&gt;
  Configure npm to use the &lt;code&gt;~/.npm-global&lt;/code&gt; directory for global module:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir ~/.npm-global
npm config set prefix '~/.npm-global'
echo 'export PATH=~/.npm-global/bin:$PATH' &amp;gt;&amp;gt; ~/.profile
source ~/.profile
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-3-"&gt;
  &lt;/a&gt;
  Step 3 :
&lt;/h1&gt;

&lt;h4&gt;
  &lt;a href="#update-npm-"&gt;
  &lt;/a&gt;
  Update npm :
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo npm install npm --global
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>ubuntu</category>
      <category>linux</category>
      <category>node</category>
      <category>npm</category>
    </item>
    <item>
      <title>GitHub CoPilot, Security Concerns About QR Codes, Why Covid-19 AI Predictive Models Fell Short &amp; more on DevNews!</title>
      <author>dev.to staff</author>
      <pubDate>Thu, 05 Aug 2021 17:10:16 +0000</pubDate>
      <link>https://dev.to/devteam/github-copilot-security-concerns-about-qr-codes-why-covid-19-ai-predictive-models-fell-short-more-on-devnews-23n8</link>
      <guid>https://dev.to/devteam/github-copilot-security-concerns-about-qr-codes-why-covid-19-ai-predictive-models-fell-short-more-on-devnews-23n8</guid>
      <description>&lt;p&gt;Listen to S5E3 of the DevNews podcast today!&lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devnews/s5-e3-github-copilot-oculus-passthrough-api-security-concerns-about-qr-codes-and-why-covid-19-ai-predictive-models-fell-short"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S5:E3 - GitHub CoPilot, Oculus‚Äô Passthrough API, Security Concerns About QR Codes, and Why Covid-19 AI Predictive Models Fell Short&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devnews"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevNews ¬†

      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s5-e3-github-copilot-oculus-passthrough-api-security-concerns-about-qr-codes-and-why-covid-19-ai-predictive-models-fell-short" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s5-e3-github-copilot-oculus-passthrough-api-security-concerns-about-qr-codes-and-why-covid-19-ai-predictive-models-fell-short" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s5-e3-github-copilot-oculus-passthrough-api-security-concerns-about-qr-codes-and-why-covid-19-ai-predictive-models-fell-short" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s5-e3-github-copilot-oculus-passthrough-api-security-concerns-about-qr-codes-and-why-covid-19-ai-predictive-models-fell-short" alt="DevNews" src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJPvwj98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XOSCOlKI--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s5-e3-github-copilot-oculus-passthrough-api-security-concerns-about-qr-codes-and-why-covid-19-ai-predictive-models-fell-short"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devnews/s5-e3-github-copilot-oculus-passthrough-api-security-concerns-about-qr-codes-and-why-covid-19-ai-predictive-models-fell-short"&gt;
      &lt;img id="episode-profile-image" alt="S5:E3 - GitHub CoPilot, Oculus‚Äô Passthrough API, Security Concerns About QR Codes, and Why Covid-19 AI Predictive Models Fell Short" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--84VpOv6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--3GWkSFQs--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;√ó&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Hosts:&lt;/strong&gt; &lt;a class="mentioned-user" href="https://dev.to/saronyitbarek"&gt;@saronyitbarek&lt;/a&gt;
 &amp;amp; &lt;a class="mentioned-user" href="https://dev.to/joshpuetz"&gt;@joshpuetz&lt;/a&gt;
 &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Guests:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/technollama"&gt;Andres Guadamuz&lt;/a&gt;, Senior Lecturer in Intellectual Property Law at the University of Sussex and the Editor in Chief of the Journal of World Intellectual Property. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/laure_wynants"&gt;Laure Wynants&lt;/a&gt;: Assistant Professor at Maastricht University Department of Epidemiology.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devnews"&gt;follow DevNews&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; &lt;em&gt;‚Äî or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Quick Listening Links&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/s5-e3-github-copilot-oculus-passthrough-api-security/id1525581923?i=1000531066439"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/2FuOLeFEtbAIQWleQJJSQp"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cDovL2ZlZWRzLmNvZGVuZXdiaWUub3JnL2Rldm5ld3NfcG9kY2FzdC54bWw/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZuZXdzLzM1?sa=X&amp;amp;ved=0CAQQkfYCahcKEwjQ88atr5ryAhUAAAAAHQAAAAAQCA"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.stitcher.com/show/devnews/episode/s5-e3-github-copilot-oculus-passthrough-api-security-concerns-about-qr-codes-and-why-covid-19-ai-predictive-models-fell-short-85904168"&gt;Stitcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devnews/s5e3-github-copilot-oculus-vPe2F-G8RYN/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevNews-p1352512/?topicId=164926485"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devpods.herokuapp.com/podcasts/devnews/episodes/176"&gt;DEV Pods website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#acknowledgements"&gt;
  &lt;/a&gt;
  &lt;em&gt;Acknowledgements&lt;/em&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt;
 for producing &amp;amp; mixing the show&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Our season five sponsor, &lt;a href="https://scoutapm.com/devnews"&gt;Scout APM&lt;/a&gt; ‚ù§Ô∏è &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We hope you enjoy this episode of DevNews!&lt;/p&gt;

</description>
      <category>news</category>
      <category>podcast</category>
    </item>
    <item>
      <title>Making beautiful websites: Top 5 FREE color palettes resources</title>
      <author>martin krause</author>
      <pubDate>Thu, 05 Aug 2021 17:07:10 +0000</pubDate>
      <link>https://dev.to/martinkr/making-beautiful-websites-top-5-free-color-palettes-resources-4jpd</link>
      <guid>https://dev.to/martinkr/making-beautiful-websites-top-5-free-color-palettes-resources-4jpd</guid>
      <description>&lt;p&gt;Choosing a beautiful and pleasing color scheme is one of the most difficult tasks for every designer.&lt;br&gt;
Even with the general rule of using a base, accent and a neutral color for your palette, choosing the colors is mostly a matter of intuition and experience.&lt;br&gt;
Don't worry, I have you covered - check out the top five resources and choosing your perfect color palette will be a breeze.&lt;/p&gt;

&lt;p&gt;PS: Don't forget to check the &lt;em&gt;bonus link&lt;/em&gt;!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#coolors"&gt;
  &lt;/a&gt;
  &lt;a href="http://coolors.co"&gt;coolors&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The super fast and super fun color schemes generator. Gamification for the win. You can play for hours or just pick the first color scheme.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#colorhunt"&gt;
  &lt;/a&gt;
  &lt;a href="http://colorhunt.co"&gt;colorhunt&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Thousands of pre-made color palettes. Each appealing palette consists of four matching colors ready to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#paletton"&gt;
  &lt;/a&gt;
  &lt;a href="http://paletton.com"&gt;paletton&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Are you looking for a more traditional and professional way of choosing matching colors? You are looking for "triad" or "tetrad" palettes?&lt;br&gt;
Try Paletton, it is the complete opposite of coolors.co. - no gamification but lots of options.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#colorsmuzli"&gt;
  &lt;/a&gt;
  &lt;a href="https://colors.muz.li/"&gt;colors.muz.li&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Upload a picture and muzli colors does not only generates a matching palette from the predominant colors, you will also get a sample page and related palettes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-colormind"&gt;
  &lt;/a&gt;
  Bonus: &lt;a href="http://colormind.io/"&gt;colormind&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Use technology instead of intuition: Colormind is a color scheme generator that uses deep learning. It can learn color styles from photographs, movies, and popular art.&lt;/p&gt;




&lt;p&gt;Have fun and if you &lt;a href="https://www.buymeacoffee.com/martinkr"&gt;buy me a coffee&lt;/a&gt; I can stay awake and write another post ;)&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>design</category>
    </item>
    <item>
      <title>How to Compare Arrays in JavaScript Efficiently</title>
      <author>Danny Adams</author>
      <pubDate>Thu, 05 Aug 2021 16:15:25 +0000</pubDate>
      <link>https://dev.to/doabledanny/how-to-compare-arrays-in-javascript-efficiently-1p0</link>
      <guid>https://dev.to/doabledanny/how-to-compare-arrays-in-javascript-efficiently-1p0</guid>
      <description>&lt;p&gt;In this article, I‚Äôm going to show you two ways of solving a typical interview-style question. The first solution is more obvious and less efficient. The second solution introduces a great problem-solving tool: frequency counter objects, which greatly improves the efficiency.&lt;/p&gt;

&lt;p&gt;Here‚Äôs what you‚Äôll gain from reading this article:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A framework for approaching problems&lt;/li&gt;
&lt;li&gt;A very useful, highly performant problem solving technique&lt;/li&gt;
&lt;li&gt;An improved ability to analyse functions and improve performance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also made a &lt;a href="https://www.youtube.com/watch?v=pL-ZMMYVCSM&amp;amp;t=296s&amp;amp;ab_channel=DoableDannyDoableDanny"&gt;YouTube video&lt;/a&gt; for those that like video. If you enjoy the video, consider subscribing to &lt;a href="https://www.youtube.com/channel/UC0URylW_U4i26wN231yRqvA?sub_confirmation=1"&gt;my channel&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h2&gt;

&lt;p&gt;‚ÄúWrite a function called ‚Äúsquared‚Äù which takes two arrays. The function should return true if every value in the array has its value squared in the second array. The frequency of values must be the same.‚Äù&lt;/p&gt;

&lt;p&gt;-- Your interviewer&lt;/p&gt;

&lt;p&gt;At first, I will show you the ‚ÄúNa√Øve‚Äù way of solving the problem ‚Äì the more obvious way that isn‚Äôt efficient.&lt;/p&gt;

&lt;p&gt;I‚Äôll then show you an efficient way to solve the problem using ‚Äúfrequency counter objects‚Äù. This is a very handy technique to have in your problem-solving toolbox (your brain).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-the-problem"&gt;
  &lt;/a&gt;
  Understanding the problem
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Problem solving 101:&lt;/strong&gt; Before we attempt to write a solution, it‚Äôs very important to understand the problem - to give some examples and the results we expect. We can then use these examples as tests to ensure our solution is working correctly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Squared([1, 2, 3], [9, 1, 4]) // true&lt;/li&gt;
&lt;li&gt;Squared([1, 2, 3], [1, 4]) // false&lt;/li&gt;
&lt;li&gt;Squared([2, 2, 3], [4, 9, 9]) // false&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Example 1 is true because:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1&lt;sup&gt;2&lt;/sup&gt; = 1 (yep, that‚Äôs in array 2)&lt;/li&gt;
&lt;li&gt;2&lt;sup&gt;2&lt;/sup&gt; = 4 (yep, that‚Äôs in array 2)&lt;/li&gt;
&lt;li&gt;3&lt;sup&gt;2&lt;/sup&gt; = 9 (yep, that‚Äôs in array 2)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example 2 is false because:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1&lt;sup&gt;2&lt;/sup&gt; = 1 (yep, that‚Äôs in array 2)&lt;/li&gt;
&lt;li&gt;2&lt;sup&gt;2&lt;/sup&gt; = 4 (yep, that‚Äôs in array 2)&lt;/li&gt;
&lt;li&gt;3&lt;sup&gt;2&lt;/sup&gt; = 9 (nope, that's not in array 2)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example 3 is false because:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2&lt;sup&gt;2&lt;/sup&gt; = 4 (yep that‚Äôs in array 2)&lt;/li&gt;
&lt;li&gt;2&lt;sup&gt;2&lt;/sup&gt; = 4 (nope, there is only one 4 in array 2)&lt;/li&gt;
&lt;li&gt;3&lt;sup&gt;2&lt;/sup&gt; = 9 (yep, but we won‚Äôt even get to this check because the function returned false beforehand)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-na%C3%AFve-way"&gt;
  &lt;/a&gt;
  The ‚Äúna√Øve‚Äù way
&lt;/h2&gt;

&lt;p&gt;First, we check if the arrays are not equal length. If not, we return false and get out of the function early because the frequency of values can‚Äôt possibly be the same.&lt;/p&gt;

&lt;p&gt;Next, we loop over each number (num) in arr1. Inside the loop, we use &lt;code&gt;indexOf()&lt;/code&gt; to look for the position of &lt;code&gt;num2&lt;/code&gt; in arr2. The value is assigned to the variable &lt;code&gt;foundIndex&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If the value was not found, indexOf returns -1. So, we can check if foundIndex = -1, and return false if so.&lt;/p&gt;

&lt;p&gt;If all is good, we move on and remove this value from arr2 using the &lt;code&gt;splice()&lt;/code&gt; method. This ensures the frequency of values in both arrays are the same.&lt;/p&gt;

&lt;p&gt;After looping over each number, and all the checks pass, we can return true.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;squared&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;foundIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foundIndex&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;

    &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foundIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h2&gt;

&lt;p&gt;This algorithm has a &lt;a href="https://www.doabledanny.com/big-o-notation-in-javascript"&gt;Big O&lt;/a&gt;(n&lt;sup&gt;2&lt;/sup&gt;) because we loop over every single item in the first array, then inside this loop, we are looping over every single item in the second array (with &lt;code&gt;indexOf()&lt;/code&gt;) at worst-case.&lt;/p&gt;

&lt;p&gt;If you don‚Äôt know (or have forgotten) what Big O is, check out this video: &lt;a href="https://www.youtube.com/watch?v=lWldunWaLPs&amp;amp;t=327s&amp;amp;ab_channel=DoableDanny"&gt;Big O Notation in JavaScript&lt;/a&gt;. It‚Äôs an important topic!&lt;/p&gt;

&lt;p&gt;If the arrays are of length n, then the number of operations will be n * n = n&lt;sup&gt;2&lt;/sup&gt;. Hence Big O(n&lt;sup&gt;2&lt;/sup&gt;).&lt;/p&gt;

&lt;p&gt;Now, this is not quite true because the second array becomes shorter on each loop, so on average we will only loop over half the second array (0.5n). The Big O will be of n * 0.5n = 0.5n&lt;sup&gt;2&lt;/sup&gt;. But Big O looks at big picture stuff, and as the input approaches infinity, the 0.5 will be insignificant and so we simplify to Big O(n&lt;sup&gt;2&lt;/sup&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-smarter-way-frequency-counter-objects-big-on"&gt;
  &lt;/a&gt;
  A smarter way ‚Äì Frequency Counter Objects ‚Äì Big O(n)
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-are-frequency-counter-objects"&gt;
  &lt;/a&gt;
  What are Frequency Counter Objects?
&lt;/h3&gt;

&lt;p&gt;Frequency counters are objects that tally things up. Here‚Äôs two examples of where they would be useful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=oyBXiJgU--U&amp;amp;ab_channel=DoableDanny"&gt;The number of times a character appears in a string&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The number of times a number appears in an array&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using frequency counters can also significantly improve the performance of an algorithm, as it can often remove the need to use nested for-loops.&lt;/p&gt;

&lt;p&gt;Here‚Äôs what the frequency counter object for [1, 2, 3, 4, 3] would look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;frequencyCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All the numbers appear once, apart from 3, which appears twice.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The solution
&lt;/h3&gt;

&lt;p&gt;To create a frequency counter object, we loop over the array in question. We then create a key and give it a value of the current value + 1, or if it‚Äôs the first time we‚Äôve encountered this number, &lt;code&gt;frequencyCounter[num]&lt;/code&gt; will be undefined and so we initialise the value to 1.&lt;/p&gt;

&lt;p&gt;I used two for‚Ä¶of loops as I felt it was easier to read, but it could also be done with just one for-loop.&lt;/p&gt;

&lt;p&gt;The frequency counter objects can then be compared. We first check if each key squared from frequency counter 1 is a key in frequency counter 2. If not, return false.&lt;/p&gt;

&lt;p&gt;Next, we check if the frequencies (values) are equal. If not, return false.&lt;/p&gt;

&lt;p&gt;And if we get through all this unscathed, we get to the bottom and return true.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;squared&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;frequencyCounter1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;frequencyCounter2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="c1"&gt;// Create frequencyCounter1&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;frequencyCounter1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;frequencyCounter1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Create frequencyCounter2&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;frequencyCounter2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;frequencyCounter2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Compare frequency counters&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;frequencyCounter1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;frequencyCounter2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;frequencyCounter1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;frequencyCounter2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;To create frequencyCounter1, we loop over all the numbers in arr1 =&amp;gt; n loops&lt;/li&gt;
&lt;li&gt;Same for frequencyCounter2 =&amp;gt; n loops&lt;/li&gt;
&lt;li&gt;To compare the frequency counters, we loop over all the keys in frequencyCounter1 =&amp;gt; at worst case, n loops&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Total = n + n + n = 3n&lt;/p&gt;

&lt;p&gt;Resulting in a Big O(n) ‚Äì linear time complexity.&lt;/p&gt;

&lt;p&gt;Much better than our first effort of with Big O(n&lt;sup&gt;2&lt;/sup&gt;) ‚Äì quadratic time complexity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#awesome-references"&gt;
  &lt;/a&gt;
  Awesome references
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I can attribute almost all of my knowledge of algorithms and data structures to one outstanding course: &lt;a href="https://ad.admitad.com/g/05dgete24sfa55577a70b3e3b7aadc/?ulp=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fjs-algorithms-and-data-structures-masterclass%2F"&gt;JavaScript Algorithms and Data Structures Masterclass by Colt Steele&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If you prefer books: &lt;a href="https://www.amazon.co.uk/gp/product/1484239873/ref=as_li_qf_asin_il_tl?ie=UTF8&amp;amp;tag=doabledanny-21&amp;amp;creative=6738&amp;amp;linkCode=as2&amp;amp;creativeASIN=1484239873&amp;amp;linkId=445fcf63f9402faf2b2b0ef6c5c2f5d8"&gt;JavaScript Data Structures and Algorithms: An Introduction to Understanding and Implementing Core Data Structure and Algorithm Fundamentals by Sammie Bae&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you enjoyed this post, consider subscribing to &lt;a href="https://www.youtube.com/channel/UC0URylW_U4i26wN231yRqvA?sub_confirmation=1"&gt;my YouTube channel&lt;/a&gt; - it would be much appreciated!&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

&lt;p&gt;Have a great day!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>algorithms</category>
    </item>
  </channel>
</rss>
