<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Which is Best Partner for eCommerce Shipping in India
</title>
      <author>pavankumars178</author>
      <pubDate>Tue, 31 Aug 2021 13:38:15 +0000</pubDate>
      <link>https://dev.to/pavankumars178/which-is-best-partner-for-ecommerce-shipping-in-india-15j2</link>
      <guid>https://dev.to/pavankumars178/which-is-best-partner-for-ecommerce-shipping-in-india-15j2</guid>
      <description>&lt;p&gt;&lt;strong&gt;Overview of ecommerce shipping in India&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ecommerce businesses owe a big chunk of their growth to the efforts of the ecommerce shipping industry in India. Ecommerce shipping has become a vast industry that provides numerous specialised and niche shipping services which help ensure a smoother delivery experience. Faster and more efficient delivery is key to ensuring customers are happy and keep coming back. We’ll be walking you through the best of the best for &lt;a href="https://www.clickpost.ai/blog/ecommerce-shipping"&gt;ecommerce shipping in India&lt;/a&gt; and how to select the best partner.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to Choose the Best Partner for Ecommerce Shipping in India&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With over 150+ different shipping partners located all across India, choosing the best partner for ecommerce shipping needs is like finding a needle in a haystack. However, knowing your shipping needs can help ensure you pick the right ones. Take a good look at what your shipping strategy needs to be. You’ll find the following elements take priority when it comes to ecommerce shipping needs. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Pin Code Serviceability&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;The best partner in ecommerce shipping is one that serves the pin codes of your choice at the volume you require.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Tech capabilities&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;A good shipping partner is equipped with the latest tech to enable real-time tracking and automated shipping services. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Shipping Services&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Different shipping companies offer different services like express delivery, hyperlocal delivery and customised packaging which can improve delivery experience.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Cost&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The cost of shipping should ideally be inclusive of various shipping services so as to reduce losses and maintain profitability. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Top 10 Best Partner for eCommerce Shipping in India&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that you’ve mapped out your core shipping strategy, you’ve got a clearer picture of what you need from a shipping partner. However, it’s also important to take a good look at the range of services that different shipping companies offer. To that end, we’ve compiled a brief list of the top 10 best partners for ecommerce shipping in India. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Aramex&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Founded in 1997 and acquired by Delhivery to operate in India, Aramex is a UAE-based global carrier that offers express delivery services and COD (cash-on-delivery) services.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Blue Dart&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since its launch in 1983, Blue Dart has become one of the leading global shipping partners. It has a reach of 35000+ pin codes and offers specialised shipping services like weather resistant packaging.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Delhivery&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Delhivery began its journey in India in 2011 and provides numerous shipping services like express delivery, specialised order handling, and bulk order shipping. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. DHL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;DHL has been operational since 1969 and is the best shipping partner if you want to offer environmentally-friendly shipping to customers and reduce the wastage of delivery.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Ecom Express&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Launched in 2012, Ecom Express caters specifically to ecommerce businesses with a reach of 27000+ pin codes and offers express shipping guaranteed to be completed in 72 hours. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. EKart&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;In 2009, Ekart was started by FlipKart to handle shipping services for ecommerce businesses, providing next-day and same-day shipping to customers across 3800+ pin codes. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. FedEx&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Since 1971, FedEx has been providing shipping services globally and has a reach of 19000+ pin codes. Heavyweight, fragile, and dangerous items can be shipped with FedEx. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. Safe Express&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Safe Express has been providing safe and secured shipping services to ecommerce businesses in India since 1995. It offers security, surveillance and better tracking using GPRS tech. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. ShadowFax&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Shadowfax’s journey began in India in 2015 and provides express shipping, hyperlocal delivery and reverse shipping services across a reach of 7000+ pin codes. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10. XpressBees&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;XpressBees is another company that was established in 2015 and caters to ecommerce shipping exclusively. In addition to express delivery, this company aids with customs clearances across 13000+ pin codes. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;The best ecommerce business must have this best partner for ecommerce shipping in order to fulfill customer demands and maximise order fulfillment. From speedy shipping services to use of advanced technology to optimise order tracking and secure delivery, the efforts of the ecommerce shipping industry have taken online shopping to the next level. With the best partner for shipping, you can take your ecommerce business to the next level. &lt;/p&gt;

</description>
      <category>ecommerce</category>
      <category>shipping</category>
    </item>
    <item>
      <title>I just made my first $1 on the Internet!!! 😲💸</title>
      <author>Hugo Montenegro</author>
      <pubDate>Tue, 31 Aug 2021 13:34:33 +0000</pubDate>
      <link>https://dev.to/hm/i-just-made-my-first-1-on-the-internet-12bk</link>
      <guid>https://dev.to/hm/i-just-made-my-first-1-on-the-internet-12bk</guid>
      <description>&lt;p&gt;I couldn't be happier right now.&lt;/p&gt;

&lt;p&gt;I've been working on &lt;a href="http://www.namy.ai"&gt;www.namy.ai&lt;/a&gt; for a while, and yesterday I finally finished making &amp;amp; training an AI model that I was happy with, and deployed it to live. Then I made a &lt;em&gt;small&lt;/em&gt; announcement on Twitter (~300 followers) about it.&lt;/p&gt;

&lt;p&gt;Some people visited and entered prompts, loitered around, but I didn't see anyone actually buy a domain. "Oh well" I said, I still needed to improve my SEO anyways (barely have done anything on that front😅)&lt;/p&gt;

&lt;p&gt;BUT TODAY I log into my dashboard, and I see:&lt;br&gt;
balance: €0.99 EUR&lt;/p&gt;

&lt;p&gt;😲&lt;/p&gt;

&lt;p&gt;It finally happened!!!!!! My FIRST internet money that I earned on my own!!!!&lt;/p&gt;

&lt;p&gt;I know it's not a lot and that I have a long way to go (and just making twitter posts is not sustainable. I need to improve SEO.), but damn does it feel good!&lt;/p&gt;

&lt;p&gt;It's definitely validating that someone, somewhere paid money for something you built. Great feeling!&lt;/p&gt;

&lt;p&gt;Anyways I just wanted to share this little victory with the community here. Wish you all the best!&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>saas</category>
      <category>ai</category>
      <category>showdev</category>
    </item>
    <item>
      <title>How I structure my React projects</title>
      <author>Lars Wächter</author>
      <pubDate>Tue, 31 Aug 2021 13:24:23 +0000</pubDate>
      <link>https://dev.to/larswaechter/how-i-structure-my-react-projects-jii</link>
      <guid>https://dev.to/larswaechter/how-i-structure-my-react-projects-jii</guid>
      <description>&lt;p&gt;This post was originally published on my &lt;a href="https://larswaechter.dev/blog/react-project-structure/"&gt;blog&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;It's been quite a while since I wrote an &lt;a href="https://larswaechter.dev/blog/nodejs-rest-api-structure/"&gt;article&lt;/a&gt; about how I structure my Node.js REST APIs. The article covered the approach of designing a well organized and maintainable folder structure for Node.js applications.&lt;/p&gt;

&lt;p&gt;So today I don't want to talk about Node.js APIs, but about the architecture of React applications and answer the same question from the previous article a second time:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What should the folder structure look like?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And again: there’s &lt;strong&gt;no perfect or 100% correct&lt;/strong&gt; answer to this question, but there are tons of other articles discussing this one on the internet too. This folder structure is also partly based on multiple of them.&lt;/p&gt;

&lt;p&gt;One important thing to mention is that React does not really tell you how to organize your project, except the fact that you should avoid too much nesting and overthinking. To be exact they say: (&lt;a href="https://reactjs.org/docs/faq-structure.html"&gt;Source&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;React doesn’t have opinions on how you put files into folders. That said there are a few common approaches popular in the ecosystem you may want to consider.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Take a look at the linked source where you can read more about those common approaches. They won't be further discussed in this article.&lt;/p&gt;

&lt;p&gt;The following structure and architecture is one that has proven maintainable and reliable for me. It might give you a help for designing your own project. Keep in mind that the following architecture is based on a application bootstrapped with &lt;a href="https://github.com/facebook/create-react-app"&gt;create-react-app&lt;/a&gt; and written in &lt;strong&gt;JavaScript&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#directory-root"&gt;
  &lt;/a&gt;
  Directory: root
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-project
├── node_modules
├── public
├── src
├── package.json
└── package-lock.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This structure is nothing special and shouldn’t be new to you. It’s actually a basic &lt;a href="https://github.com/facebook/create-react-app"&gt;create-react-app&lt;/a&gt; setup. The interesting part here is the content of the &lt;code&gt;src&lt;/code&gt; folder which this article is about.&lt;/p&gt;

&lt;p&gt;So what do we have in here?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-project
├── api
├── components
├── i18n
├── modules
├── pages
├── stores
├── tests
├── utils
├── index.js
├── main.js
└── style.css
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see the application is primarily split into eight directories. From here on, we'll go top-down through the directories and examine each one.&lt;/p&gt;

&lt;p&gt;Let’s start with the &lt;code&gt;api&lt;/code&gt; directory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#directory-srcapi"&gt;
  &lt;/a&gt;
  Directory: src/api
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-project
├── api
│   ├── services
│   │   ├── Job.js
│   │   ├── User.js
│   ├── auth.js
│   └── axios.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;api&lt;/code&gt; directory contains all services that take care of the communication between the React application (frontend) and an API (backend). A single service provides multiple functions to retrieve data from or post data to an external service using the HTTP protocol.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;auth.js&lt;/code&gt; provides functions for authentication and &lt;code&gt;axios.js&lt;/code&gt; contains an &lt;a href="https://www.npmjs.com/package/axios"&gt;axios&lt;/a&gt; instance including interceptors for the outgoing HTTP requests and incoming responses. Moreover, the process of refreshing JWTs is handled in here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#directory-srccomponents"&gt;
  &lt;/a&gt;
  Directory: src/components
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-project
├── components
│   ├── Job
│   │   ├── Description.js
│   │   └── Preview.js
│   └── User
│   │   ├── Card.js
│   │   ├── Create.js
│   │   └── List.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're already familiar with React you should know that it's mainly component based. The components are actually the heart of every React application. The whole application, at least the presentational view, is built of many small components.&lt;/p&gt;

&lt;p&gt;So what is a component? &lt;a href="https://reactjs.org/docs/components-and-props.html"&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Components let you split the UI into independent, reusable pieces, and think about each piece in isolation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Imagine you have a website like Twitter or Facebook. The large website is made of many smaller pieces (components) that can be Buttons, Inputs or Widgets for example. Those pieces are put together to build ever more complex and larger ones. Each component has its own lifecyle and state management, whereby you can share a component's state with other ones.&lt;/p&gt;

&lt;p&gt;Components are reused multiple times within the application to save the developer from writing redundant code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://de.wikipedia.org/wiki/Don%E2%80%99t_repeat_yourself"&gt;Don't repeat yourself (DRY)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Splitting the codebase into multiple components is not just a "React thing". It's a common pattern in software engineering to simplify the development process and the maintenance later on.&lt;/p&gt;

&lt;p&gt;In React, a component is mostly a simple JavaScript function or a class. Usually, I create a new file for each single component. In some rare cases I group multiple of them (functions or classes) into a single file. Imagine a &lt;code&gt;UserList.js&lt;/code&gt; component which renders multiple elements of &lt;code&gt;UserListItem&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserListItem&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;))}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserListItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, it makes sense to combine both into one file. Further, &lt;code&gt;UserListItem&lt;/code&gt; is probably not even used by any other component than &lt;code&gt;UserList&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Beside the components themselves, you can also add their stylesheets or tests to this directory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#directory-srci18n"&gt;
  &lt;/a&gt;
  Directory: src/i18n
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-project
├── i18n
│   ├── de.json
│   └── en.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;i18n&lt;/code&gt; stands for &lt;strong&gt;internationalization&lt;/strong&gt; and takes care of the language support of the application. The including JSON files are basically objects containg fixed constants as keys and their associated translations as values.&lt;/p&gt;

&lt;p&gt;Therefore, the keys should be equal for each language file. Only the values (translations) differ from each other. You can easily query those language files later on by writing your own custom hook or component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#directory-srcmodules"&gt;
  &lt;/a&gt;
  Directory: src/modules
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-project
├── modules
│   ├── logger.js
│   └── session.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This directory includes some global modules that might be used for logging or as wrapper for the browser's &lt;code&gt;LocalStorage&lt;/code&gt; for example.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#directory-srcpages"&gt;
  &lt;/a&gt;
  Directory: src/pages
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-project
├── pages
│   ├── Home
│   │   ├── components
│   │   │   ├── Dashboard.js
│   │   │   └── Welcome.js
│   │   └── index.js
│   ├── Login.js
│   └── Profile.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;pages&lt;/code&gt; directory includes the &lt;code&gt;react-router-dom&lt;/code&gt; paths accessed while navigating through the application. Here, we collect multiple components into a single larger one to display a complete page view.&lt;/p&gt;

&lt;p&gt;A page might contain its own &lt;code&gt;component&lt;/code&gt; directory which includes "local" components that are only used on this page. For complex pages with a deep component tree you might want to check out the &lt;a href="https://reactjs.org/docs/context.html"&gt;React Context API&lt;/a&gt; which makes it much easier to pass props along the tree and to handle a global "page state".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#directory-srcstores"&gt;
  &lt;/a&gt;
  Directory: src/stores
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-project
├── stores
│   ├── language.js
│   └── user.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This directory includes all global React states that can be accessed from any component within the application. While &lt;a href="https://react-redux.js.org/"&gt;Redux&lt;/a&gt; is probably the most popular solution for managing global state I prefer to use &lt;a href="https://github.com/pmndrs/zustand"&gt;zustand&lt;/a&gt;. It's very easy to get started with and its API is really straightforward.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#directory-srctests"&gt;
  &lt;/a&gt;
  Directory: src/tests
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-project
├── tests
│   ├── language.test.js
│   └── utils.test.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;tests&lt;/code&gt; directory includes tests that do not belong to certain components. This could be tests for the implementation of algorithms for example. Moreover, I validate and compare the keys of the language files I mentioned above to make sure I did not miss any translation for a given language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#directory-srcutils"&gt;
  &lt;/a&gt;
  Directory: src/utils
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-project
├── utils
│   ├── hooks
│   │   ├── useChat.js
│   │   ├── useOutsideAlerter.js
│   │   ├── useToast.js
│   ├── providers
│   │   ├── HomeContextProvider.js
│   │   ├── ToastContextProvider.js
│   ├── colors.js
│   ├── constants.js
│   ├── index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we have a bunch of utilities like: custom hooks, context providers, constants and helper functions. Feel free to add more stuff here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#all-together"&gt;
  &lt;/a&gt;
  All together
&lt;/h2&gt;

&lt;p&gt;Last but not least a complete overview of the project structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-project
├── api
│   ├── services
│   │   ├── Job.js
│   │   ├── User.js
│   ├── auth.js
│   └── axios.js
├── components
│   ├── Job
│   │   ├── Description.js
│   │   └── Preview.js
│   └── User
│   │   ├── Card.js
│   │   ├── Create.js
│   │   └── List.js
├── i18n
│   ├── de.json
│   └── en.json
├── modules
│   ├── logger.js
│   └── session.js
├── pages
│   ├── Home
│   │   ├── components
│   │   │   ├── Dashboard.js
│   │   │   └── Welcome.js
│   │   └── index.js
│   ├── Login.js
│   └── Profile.js
├── stores
│   ├── language.js
│   └── user.js
├── tests
│   ├── language.test.js
│   └── utils.test.js
├── utils
│   ├── hooks
│   │   ├── useChat.js
│   │   ├── useOutsideAlerter.js
│   │   ├── useToast.js
│   ├── providers
│   │   ├── HomeContextProvider.js
│   │   ├── ToastContextProvider.js
│   ├── colors.js
│   ├── constants.js
│   ├── index.js
├── index.js
├── main.js
└── style.css
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That’s it! I hope this is a little help for people who don't know how to structure their React application or didn’t know how to start. Feel free to give any suggestions.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>react</category>
    </item>
    <item>
      <title>ES6 - A beginners guide, following my own learning</title>
      <author>Stefan Wright</author>
      <pubDate>Tue, 31 Aug 2021 13:14:49 +0000</pubDate>
      <link>https://dev.to/stefanwrightcodes/es6-a-beginners-guide-following-my-own-learning-4e05</link>
      <guid>https://dev.to/stefanwrightcodes/es6-a-beginners-guide-following-my-own-learning-4e05</guid>
      <description>&lt;h2&gt;
  &lt;a href="#welcome"&gt;
  &lt;/a&gt;
  Welcome
&lt;/h2&gt;

&lt;p&gt;For my employment we have been asked to learn/revisit ES6 as we begin to transfer the JS in our codebase into ES6, if you're here then its likely you already know what ES6 is, if you don't...let me summarise below. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-es6"&gt;
  &lt;/a&gt;
  What is ES6?
&lt;/h3&gt;

&lt;p&gt;Well, ES6 stands for ECMAScript 6 which has been around now since June 2015, it is also known as ECMAScript 2015. &lt;a href="https://en.wikipedia.org/wiki/ECMAScript"&gt;ECMAScript&lt;/a&gt; itself has been around since June 1997 with an annual review of the standards in place. ECMAScript was invented to standardize JavaScript meaning that browsers could be built around that standard ensuring support of the different levels. ES6 introduces us with some new tools which I will go into in more detail in this series, for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Classes&lt;/li&gt;
&lt;li&gt;Arrow Functions&lt;/li&gt;
&lt;li&gt;New Variable scoping (var, let, const)&lt;/li&gt;
&lt;li&gt;Template Literals&lt;/li&gt;
&lt;li&gt;Object and Array Destructuring&lt;/li&gt;
&lt;li&gt;Default Parameters&lt;/li&gt;
&lt;li&gt;Rest and Spread Operators&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many ES6 tutorials will also cover various Array "helpers". I'll be looking to touch on these too as they are frequently used, but I have found often referred back to as a reminder of how to write it "properly". So those are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;forEach&lt;/li&gt;
&lt;li&gt;map&lt;/li&gt;
&lt;li&gt;filter&lt;/li&gt;
&lt;li&gt;find&lt;/li&gt;
&lt;li&gt;every/some&lt;/li&gt;
&lt;li&gt;and reduce (save the hardest til last!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this series, for each of the above I will try to include a variety of examples and real-world use cases&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>es6</category>
      <category>es5</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Everything you need to know about OpenTelemetry Collector 🚀</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Tue, 31 Aug 2021 12:57:05 +0000</pubDate>
      <link>https://dev.to/signoz/everything-you-need-to-know-about-opentelemetry-collector-l7f</link>
      <guid>https://dev.to/signoz/everything-you-need-to-know-about-opentelemetry-collector-l7f</guid>
      <description>&lt;p&gt;The first step in setting up distributed systems monitoring and tracing is instrumentation, which enables generating and managing telemetry data. Once the telemetry data is generated, you need a way to collect and analyze it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's where OpenTelemetry collector comes into the picture.&lt;/p&gt;

&lt;p&gt;OpenTelemetry collector provides a vendor-neutral way to collect, process, and export your telemetry data(logs, metrics, and traces) to an analysis backend of your choice.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kAeGuZpa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tl5efkay1799makz5n8e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kAeGuZpa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tl5efkay1799makz5n8e.png" alt="OpenTelemetry Architecture"&gt;&lt;/a&gt;Architecture - How OpenTelemetry fits in an application architecture. OTel collector refers to OpenTelemetry Collector&lt;/p&gt;

&lt;p&gt;Before deep-diving into OpenTelemetry collectors, let's take a short detour to understand what OpenTelemetry is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-opentelemetry"&gt;
  &lt;/a&gt;
  What is OpenTelemetry?
&lt;/h2&gt;

&lt;p&gt;OpenTelemetry is a set of API, SDKs, libraries, and integrations that is aiming to standardize the generation, collection, and management of telemetry data(logs, metrics, and traces). OpenTelemetry is a Cloud Native Computing Foundation project created after the merger of OpenCensus(from Google) and OpenTracing(From Uber).&lt;/p&gt;

&lt;p&gt;The data you collect with OpenTelemetry is vendor-agnostic and can be exported in many formats. Telemetry data has become critical to observe the state of distributed systems. With microservices and polyglot architectures, there was a need to have a global standard. OpenTelemetry aims to fill that space and is doing a great job at it thus far.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-to-use-opentelemetry-collector"&gt;
  &lt;/a&gt;
  Why to use OpenTelemetry Collector?
&lt;/h2&gt;

&lt;p&gt;A OpenTelemetry collector has three main functions - collect, process, and export the telemetry data collected. But before trying to understand more about OpenTelemetry collectors, let us first understand why it is a critical component of your monitoring architecture. Why can't you send your telemetry data directly to a backend analysis tool of your choice?&lt;/p&gt;

&lt;p&gt;OpenTelemetry Collector gives you the flexibility to handle multiple data formats and offloads responsibility from the application to manage telemetry data.&lt;/p&gt;

&lt;p&gt;List of reasons why to use OpenTelemetry Collector:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Provides a vendor-agnostic way to collect telemetry data&lt;/li&gt;
&lt;li&gt;Offloads responsibility from the application to manage telemetry data, thereby reducing overhead&lt;/li&gt;
&lt;li&gt;Makes changes to the way of managing telemetry data easier&lt;/li&gt;
&lt;li&gt;Enables data export in multiple formats, multiple vendors to your choice&lt;/li&gt;
&lt;li&gt;Enables quick config-based updates, trivial to update a config file to receive data in another format&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#architecture-of-opentelemetry-collector"&gt;
  &lt;/a&gt;
  Architecture of OpenTelemetry collector
&lt;/h2&gt;

&lt;p&gt;OpenTelemetry collector consists of three main components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Receivers
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Receivers are used to get data into the collector. You can use it to configure ports and formats the collector can take data in. It could be push or pull-based. You can receive data in multiple formats. It has a default OTLP format, but you can also receive data in other popular open-source formats like Jaeger or Prometheus. SigNoz uses the default OTLP format to receive telemetry data.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Processors
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Processors are used to doing any processing required on the collected data like data massaging, data manipulation, or any change in the data as it flows through the collector. It can also be used to remove PII data from the collected telemetry data, which can be very useful. You can also do things like batching the data before sending it out, retrying in case the exporting fails, adding metadata, tail-based sampling, etc.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Exporters
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Exporters are used to exporting data to a backend analysis tool like &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt;. You can send out data in multiple data formats.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rSZlzqyC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kj6c7suzy2licb29ipqx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rSZlzqyC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kj6c7suzy2licb29ipqx.png" alt="OpenTelemetry Collector"&gt;&lt;/a&gt;Architecture of OpenTelemetry Collector with receivers, processors and exporters.&lt;/p&gt;

&lt;p&gt;With the combination of these three components, OpenTelemetry Collector can be used to build data pipelines. Receiving data in one format, processing it and then sending out the data in another data format. This provides flexibility to teams working on distributed global systems.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-configure-a-opentelemetry-collector"&gt;
  &lt;/a&gt;
  How to configure a OpenTelemetry collector?
&lt;/h2&gt;

&lt;p&gt;You need to configure the three components of the OpenTelemetry collector described above. Once configured, these components must be enabled via pipelines within the service section.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#receivers"&gt;
  &lt;/a&gt;
  Receivers
&lt;/h3&gt;

&lt;p&gt;In the sample code shown below, we have two receivers:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;OTLP
Default OpenTelemetry protocol to transfer telemetry data. SigNoz receives telemetry data in OTLP format.&lt;/li&gt;
&lt;li&gt;Jaeger
You can also receive traces data in Jaeger format, which is a popular distributed tracing tool.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;receivers:
      otlp:
        protocols:
          grpc:
          http:
      jaeger:
        protocols:
          grpc:
          thrift_http:
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#processors"&gt;
  &lt;/a&gt;
  Processors
&lt;/h3&gt;

&lt;p&gt;There are three processors in the code sample shown below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Batch&lt;br&gt;&lt;br&gt;
Batching helps better compress the data and reduce the number of outgoing connections required to transmit the data. This processor supports both size and time-based batching.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Memory limiter&lt;br&gt;&lt;br&gt;
The memory limiter processor is used to prevent out-of-memory situations on the collector. Given that the amount and type of data a collector processes are environment-specific and resource utilization of the collector is also dependent on the configured processors, it is important to put checks in place regarding memory usage.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Queued retry&lt;br&gt;&lt;br&gt;
This processor is highly recommended to configure for every collector as it minimizes the likelihood of data being dropped due to delays in processing or issues exporting the data.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;processors:
      batch:
        send_batch_size: 1000
        timeout: 10s
      memory_limiter:
        # Same as --mem-ballast-size-mib CLI argument
        ballast_size_mib: 683
        # 80% of maximum memory up to 2G
        limit_mib: 1500
        # 25% of limit up to 2G
        spike_limit_mib: 512
        check_interval: 5s
      queued_retry:
        num_workers: 4
        queue_size: 100
        retry_on_failure: true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find detailed information about these processors and more in &lt;a href="https://github.com/open-telemetry/opentelemetry-collector/tree/caadbbc476cc13ba87503b8ae7a1a8a50d5b22c4/processor" rel="noopener noreferrer nofollow"&gt;OpenTelemetry Collector GitHub repo&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exporters"&gt;
  &lt;/a&gt;
  Exporters
&lt;/h3&gt;

&lt;p&gt;In this sample code, we have created two exporters.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;kafka/traces&lt;br&gt;&lt;br&gt;
This forwards collected traces to write to a kafka topic named as &lt;code&gt;otlp_spans&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;kafka/metrics&lt;br&gt;&lt;br&gt;
This forwards collected metrics to write to a kafka topic named as &lt;code&gt;otlp_metrics&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exporters:
      kafka/traces:
        brokers:
          - signoz-kafka:9092
        topic: 'otlp_spans'
        protocol_version: 2.0.0
      kafka/metrics:
        brokers:
          - signoz-kafka:9092
        topic: 'otlp_metrics'
        protocol_version: 2.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;You can also configure extensions which enables things like monitoring the health of OpenTelemetry Collector.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extensions"&gt;
  &lt;/a&gt;
  Extensions
&lt;/h3&gt;

&lt;p&gt;Extensions provide capabilities on top of primary functionality of the OpenTelemetry Collector.&lt;/p&gt;

&lt;p&gt;In this example, we have enabled two extensions.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Health Check&lt;br&gt;&lt;br&gt;
It enables a url that can be used to check the status of the OpenTelemetry Collector.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Zpages&lt;br&gt;&lt;br&gt;
It enables an HTTP endpoint that provides live data for debugging different components of the OpenTelemetry Collector.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;extensions:
      health_check: {}
      zpages: {}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#configuring-the-service-section-and-data-pipelines"&gt;
  &lt;/a&gt;
  Configuring the service section and data pipelines
&lt;/h3&gt;

&lt;p&gt;All the components that are configured must be enabled via pipelines within the service section. If a component is not defined in the service section, then it is not enabled. Pipelines make OpenTelemetry collector a must-have component in your architecture. It provides the flexibility of receiving and exporting data in multiple formats.&lt;/p&gt;

&lt;p&gt;In the example shown below, we have enabled two pipelines.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;traces
In this pipeline, we can receive traces in &lt;code&gt;jaeger&lt;/code&gt; and &lt;code&gt;otlp&lt;/code&gt; formats. We then use three processors on the collected traces namely &lt;code&gt;memory_limiter&lt;/code&gt; , &lt;code&gt;batch&lt;/code&gt; and &lt;code&gt;queued_retry&lt;/code&gt; . We export the processed traces to kafka topics.&lt;/li&gt;
&lt;li&gt;metrics
In the pipeline, we receive metrics in &lt;code&gt;otlp&lt;/code&gt; formats. Process the collected metrics using batch processor and then export the processed metrics to kafka topics.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;service:
      extensions: [health_check, zpages]
      pipelines:
        traces:
          receivers: [jaeger, otlp]
          processors: [memory_limiter, batch, queued_retry]
          exporters: [kafka/traces]
        metrics:
          receivers: [otlp]
          processors: [batch]
          exporters: [kafka/metrics]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;A sample OpenTelemetry Collector configuration file. (Source: &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-conf
  labels:
    app: opentelemetry
    component: otel-collector-conf
data:
  otel-collector-config: |
    receivers:
      otlp:
        protocols:
          grpc:
          http:
      jaeger:
        protocols:
          grpc:
          thrift_http:
    processors:
      batch:
        send_batch_size: 1000
        timeout: 10s
      memory_limiter:
        # Same as --mem-ballast-size-mib CLI argument
        ballast_size_mib: 683
        # 80% of maximum memory up to 2G
        limit_mib: 1500
        # 25% of limit up to 2G
        spike_limit_mib: 512
        check_interval: 5s
      queued_retry:
        num_workers: 4
        queue_size: 100
        retry_on_failure: true
    extensions:
      health_check: {}
      zpages: {}
    exporters:
      kafka/traces:
        brokers:
          - signoz-kafka:9092
        topic: 'otlp_spans'
        protocol_version: 2.0.0
      kafka/metrics:
        brokers:
          - signoz-kafka:9092
        topic: 'otlp_metrics'
        protocol_version: 2.0.0
    service:
      extensions: [health_check, zpages]
      pipelines:
        traces:
          receivers: [jaeger, otlp]
          processors: [memory_limiter, batch, queued_retry]
          exporters: [kafka/traces]
        metrics:
          receivers: [otlp]
          processors: [batch]
          exporters: [kafka/metrics]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#getting-started-with-opentelemetry"&gt;
  &lt;/a&gt;
  Getting started with OpenTelemetry
&lt;/h2&gt;

&lt;p&gt;OpenTelemetry provides a vendor-agnostic way of collecting and managing telemetry data. The next step is to choose a backend analysis tool that can help you make sense of the collected data. &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt; is a full-stack open-source application performance monitoring and observability platform.&lt;/p&gt;

&lt;p&gt;If you have docker installed, getting started with SigNoz just takes three easy steps at the command line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/SigNoz/signoz.git
cd signoz/deploy/
./install.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can read more about deploying SigNoz from its &lt;a href="https://signoz.io/docs/deployment/docker/"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;SigNoz can be used to visualize metrics and traces with charts that can enable quick insights for your teams.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZldkcrEV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/by1t5n6kds8c3fdp1iwa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZldkcrEV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/by1t5n6kds8c3fdp1iwa.png" alt="SigNoz dashboard showing overview metrics like RPS"&gt;&lt;/a&gt;SigNoz UI showing application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/p&gt;

&lt;p&gt;You can try out SigNoz by visiting its GitHub repo 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>monitoring</category>
      <category>microservices</category>
      <category>opentelemetry</category>
    </item>
    <item>
      <title>Presenting Enigma Reloaded(a self hosted, offline, DIY, encryption webapp)</title>
      <author>Enigma Reloaded</author>
      <pubDate>Tue, 31 Aug 2021 12:40:55 +0000</pubDate>
      <link>https://dev.to/enigmareloaded/presenting-enigma-reloaded-a-self-hosted-offline-diy-encryption-webapp-51df</link>
      <guid>https://dev.to/enigmareloaded/presenting-enigma-reloaded-a-self-hosted-offline-diy-encryption-webapp-51df</guid>
      <description>&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;As you already know in 2021 human privacy is at the mercy of large tech corporations. All data in and out including our private messages is being scanned and analyzed whether if you like it or not.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-enigma-reloaded"&gt;
  &lt;/a&gt;
  What is enigma reloaded?
&lt;/h2&gt;

&lt;p&gt;It's a simple tool that works as a contact book where you can keep the public keys and conversations with your contacts.  It works inside your browser without any:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;external service or server&lt;/li&gt;
&lt;li&gt;dependency on the internet (it has 100% offline support)&lt;/li&gt;
&lt;li&gt;all data stored in the browser is encrypted using AES&lt;/li&gt;
&lt;li&gt;dependency on the domain, &lt;code&gt;enigma-reloaded.github.io&lt;/code&gt;. You can self host it, it's simple HTML, CSS and JS.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#use-case"&gt;
  &lt;/a&gt;
  Use case
&lt;/h2&gt;

&lt;p&gt;Take this message:&lt;br&gt;
&lt;code&gt;Hey Bob, how are you?&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Without being encrypted you see the message, Bob sees the message, your app from your phone or browser sees the message, bob's app sees the message, and maybe more than that.&lt;/p&gt;

&lt;p&gt;Enigma reloaded helps you turn that message into&lt;br&gt;
&lt;code&gt;oayt2NqA kTlEB6 vzYArrD 0OXUw 1Z H 8ZX gFIGa1wM A1fC2Oil qA,mw iU8vPnhuw 8Jmbtk 4 mTp1 WP8cq asM ZP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Which looks like a text fragment from analyzer point of view. But the true meaning is indecipherable, unless you are Bob, the true receiver who can decipher back the text using his Enigma Reloaded with his public key.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-get-it"&gt;
  &lt;/a&gt;
  How to get it?
&lt;/h2&gt;

&lt;p&gt;You can use Enigma Reloaded directly here: &lt;a href="https://enigma-reloaded.github.io/enigma-reloaded"&gt;https://enigma-reloaded.github.io/enigma-reloaded&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or even better, to have 110% control, download gh-pages branch: &lt;a href="https://github.com/enigma-reloaded/enigma-reloaded/tree/gh-pages"&gt;https://github.com/enigma-reloaded/enigma-reloaded/tree/gh-pages&lt;/a&gt; as a zip and host it's content.&lt;/p&gt;

&lt;p&gt;You can also check the source code for it here: &lt;a href="https://github.com/enigma-reloaded/enigma-reloaded"&gt;https://github.com/enigma-reloaded/enigma-reloaded&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-nice-features"&gt;
  &lt;/a&gt;
  Other nice features:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Encrypt and decrypt files&lt;/li&gt;
&lt;li&gt;Time based PIN access control&lt;/li&gt;
&lt;li&gt;backup and restoration from encrypted backups&lt;/li&gt;
&lt;li&gt;PWA installation&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>privacy</category>
      <category>security</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>How I created a PHP function to transform a Local DateTime to UTC</title>
      <author>mattiatoselli</author>
      <pubDate>Tue, 31 Aug 2021 12:19:41 +0000</pubDate>
      <link>https://dev.to/mattiatoselli/how-i-created-a-php-function-to-transform-a-local-datetime-to-utc-56oo</link>
      <guid>https://dev.to/mattiatoselli/how-i-created-a-php-function-to-transform-a-local-datetime-to-utc-56oo</guid>
      <description>&lt;p&gt;Today I had to resolve a problem at work, at first sight it could be simple, but hands on, it was not so.&lt;/p&gt;

&lt;p&gt;Probably You will find another solution, but to me this was simple to code and enough easy to maintain. The idea is to use the functions that starting from PHP 5.4 we have to solve this problem.&lt;/p&gt;

&lt;p&gt;I had an API which received the DateTime and the timezone, and I had to transform it in UTC before sending it to the DB, using Unix timestamp was not an option.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;//we can specify GMT or for example a timezone name, under the snippet I'll provide the link to de documentation to find the names of the different timezones&lt;/span&gt;

&lt;span class="nv"&gt;$userTimezone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;DateTimeZone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'GMT+2'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;$myDateTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'2021-08-31 10:48'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$userTimezone&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//get the offset of the selected timezone from UTC&lt;/span&gt;
&lt;span class="nv"&gt;$offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$userTimezone&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getOffset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$myDateTime&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//create the corresponding DateTime in UTC&lt;/span&gt;
&lt;span class="nv"&gt;$myInterval&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nc"&gt;DateInterval&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;createFromDateString&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;$offset&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'seconds'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$myDateTime&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$myInterval&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//print the result&lt;/span&gt;
&lt;span class="nv"&gt;$result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$myDateTime&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Y-m-d H:i:s'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;Echo&lt;/span&gt; &lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usefull-links"&gt;
  &lt;/a&gt;
  Usefull links
&lt;/h2&gt;

&lt;p&gt;I have to mention this article which helped me very much, my snippet is an adaptation of this one &lt;a href="https://blog.serverdensity.com/handling-timezone-conversion-with-php-datetime/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, for a better implemantation, i suggest to use the strings accepted by the method, you can consult the list in the PHP DOC &lt;a href="https://www.php.net/manual/en/timezones.php"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>functional</category>
      <category>datetime</category>
    </item>
    <item>
      <title>How to lose a hackathon in 7 steps</title>
      <author>Arthur Grishkevich</author>
      <pubDate>Tue, 31 Aug 2021 12:04:42 +0000</pubDate>
      <link>https://dev.to/arrrgr/how-to-lose-a-hackathon-in-7-steps-2kf0</link>
      <guid>https://dev.to/arrrgr/how-to-lose-a-hackathon-in-7-steps-2kf0</guid>
      <description>&lt;p&gt;I took part in a hackathon recently. My team lost miserably. Here are the steps we followed to secure this loss.&lt;/p&gt;

&lt;p&gt;You may find these valuable if you do want to win the next hackathon you participate in. Or if you want to lose it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#losing-a-hackathon"&gt;
  &lt;/a&gt;
  Losing a hackathon
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#step-1-dont-prepare-until-an-hour-or-two-before-the-event-starts"&gt;
  &lt;/a&gt;
  Step 1 - Don’t prepare until an hour or two before the event starts
&lt;/h3&gt;

&lt;p&gt;This step is absolutely key. If you ignore it you might actually have a chance of winning. We had thought about reviewing the APIs we would be working with and getting together a week prior to the hackathon. Had we done so, we might have had time to brainstorm and come up with a concept for our product. We might even have mapped out our architecture and integrations, if at a high level. Or we may have defined our areas of responsibility. Certainly we would have been one step closer to winning, so we did not do it. Instead, we got together at the official start of the hackathon, bounced some ideas around, picked the worst one (more on that below) and ran with it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-come-to-the-hackathon-exhausted"&gt;
  &lt;/a&gt;
  Step 2 - Come to the hackathon exhausted
&lt;/h3&gt;

&lt;p&gt;This step really helps. Stay up for 12-18 hours before you begin your 24 hours of coding. Due to my current timezone constraints, I and one of my teammates were up working at 6am that day and sat down to the hackathon at 10pm. &lt;/p&gt;

&lt;p&gt;Dare I claim this feat made us more productive? Hell no. As a matter of fact, by the time we had gone to get some rest at 6am, we thought we were close to 50% done with our app but after getting some sleep, ended up having to rewrite some of the application code. We also were nowhere near finished in terms of integrating the whole thing together and deploying. I’d guess we were 20% done by the 6am mark, a far shot from the 50%.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-solve-a-problem-that-doesnt-exist"&gt;
  &lt;/a&gt;
  Step 3 - Solve a problem that doesn't exist
&lt;/h3&gt;

&lt;p&gt;This one is the cherry on the cake. Instead of making sure your app solves a real world problem, create a problem out of thin air. We wanted to showcase our own technology and in our brainstorming session (see Step 1 above) we came up with two use cases. One solved a real problem (replacing call center agents). The other did not (onboarding new customers with voice) but looked cool. We picked the latter. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-dont-use-the-tech-made-available-to-you-by-event-organizers"&gt;
  &lt;/a&gt;
  Step 4 - Don’t use the tech made available to you by event organizers
&lt;/h3&gt;

&lt;p&gt;Obviously this step only applies to those hackathons where organizers want participants to make use of their technologies. This one is quite self explanatory isn’t it? If the organizers want you to use their tech, make a token gesture to it. A nod. This is a sure way to lose the hackathon. &lt;/p&gt;

&lt;p&gt;We made a big mistake in picking our use case (Step 3). We picked the one which used exactly two methods in the US Bank APIs. The Brits might call this “taking the piss.” In contrast, the winner made use of what looked like 80% of the available methods.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-make-it-perfect"&gt;
  &lt;/a&gt;
  Step 5 - Make it perfect!
&lt;/h3&gt;

&lt;p&gt;Instead of building fast and shipping a rough but enticing product, focus on polishing the user experience. This one is all me. I was the team member responsible for the user-facing conversational AI interface and I spent A LOT of time reworking it, adjusting for more and more complex pathways and running test conversations over and over. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-6-forget-about-the-time"&gt;
  &lt;/a&gt;
  Step 6 - Forget about the time
&lt;/h3&gt;

&lt;p&gt;You know how you are going to have to create a presentation and practice presenting, make sure your deploys are working and data is rendering properly and actually run through the full demo a half dozen times to make sure you can fit the entire thing in five minutes? Yeah, forget about that. Instead, focus on Step 5. When you have 20 minutes left before the submission deadline, throw together a half assed deck and submit your code one minute after the cut off. Then find out that you are the second presenter in line and presentations are moved up 1.5 hours and start… right now. If you follow this step, you are guaranteed to lose. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-7-ignore-the-presentation-software"&gt;
  &lt;/a&gt;
  Step 7 - Ignore the presentation software
&lt;/h3&gt;

&lt;p&gt;WebEx never works like it’s meant to. But that’s no reason for you to worry. Yes, don’t worry about it. When it’s time for you to present, just open the thing in Safari and when you find out that you can’t share your screen, shrug it off and start telling a bad joke while the desktop version downloads. This is sure to put the judges in a good mood and not to penalize you at all. And, yes, this also really happened. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-we-built"&gt;
  &lt;/a&gt;
  What we built
&lt;/h2&gt;

&lt;p&gt;Reading over this now, it looks like such a trainwreck. It’s making me ask - did we do anything right? I think we did. &lt;/p&gt;

&lt;p&gt;We split up our areas of responsibility and stuck to them, yet helped each other out where needed. We stayed in a Discord voice channel and communicated the entire time we were online and working. We were civil to each other even as the deadline approached. &lt;/p&gt;

&lt;p&gt;For our product, we built an automated voice user onboarding workflow. The user opens the app, enters their phone number, gets a call from an AI agent who asks them a series of questions, helps them to open their account, suggests they may want to create a virtual credit card and takes them through the card creation process. We also built (I think) a fairly cool app concept. &lt;/p&gt;

&lt;p&gt;We used ReactJS, HTML5 on the front-end, ExpressJS, Node.js and MongoDB on the back-end, Websocket for communications, and consumed the bank’s card as a service API. We used Dasha AI Studio to create the conversational workflow and the Dasha SDK in our Node.js back-end to make the conversational workflow an integral part of the application. Here is me giving a demo of the app for some friends after we lost (if you like the conversational part, you can join our &lt;a href="https://community.dasha.ai"&gt;developer community&lt;/a&gt; where we build AI apps): &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/FlqnbPQQfv4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final words
&lt;/h2&gt;

&lt;p&gt;Congratulations. Now you know how to lose any hackathon. By extension, you now know what to avoid in order to increase your chances of winning a hackathon. Good luck and godspeed. &lt;/p&gt;

</description>
      <category>ai</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Today's Daily Dose of Programming Humor</title>
      <author>Daily Developer Jokes</author>
      <pubDate>Tue, 31 Aug 2021 12:00:25 +0000</pubDate>
      <link>https://dev.to/dailydeveloperjokes/today-s-daily-dose-of-programming-humor-dgm</link>
      <guid>https://dev.to/dailydeveloperjokes/today-s-daily-dose-of-programming-humor-dgm</guid>
      <description>&lt;p&gt;Hi there! Here's today's Daily Developer Joke. We hope you enjoy it; it's a good one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8svwXrKO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://private.xtrp.io/projects/DailyDeveloperJokes/public_image_server/images/5e125997196ca.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8svwXrKO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://private.xtrp.io/projects/DailyDeveloperJokes/public_image_server/images/5e125997196ca.png" alt="Joke Image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;For more jokes, and to submit your own joke to get featured, check out the &lt;a href="https://dailydeveloperjokes.github.io/"&gt;Daily Developer Jokes Website&lt;/a&gt;. We're also open sourced, so feel free to view &lt;a href="https://github.com/dailydeveloperjokes"&gt;our GitHub Profile&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#leave-this-post-a-if-you-liked-todays-joke-and-stay-tuned-for-tomorrows-joke-too"&gt;
  &lt;/a&gt;
  Leave this post a ❤️ if you liked today's joke, and stay tuned for tomorrow's joke too!
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;This joke comes from &lt;a href="https://github.com/wesbos/dad-jokes"&gt;Dad-Jokes GitHub Repo by Wes Bos&lt;/a&gt; (thank you!), whose owner has given me permission to use this joke with credit.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>jokes</category>
      <category>dailydeveloperjokes</category>
    </item>
    <item>
      <title>Deploy a Django App on AWS Lightsail: Docker, Docker Compose, PostgreSQL, Nginx &amp; Github Actions</title>
      <author>Mangabo Kolawole</author>
      <pubDate>Tue, 31 Aug 2021 11:55:58 +0000</pubDate>
      <link>https://dev.to/koladev/deploy-a-django-app-on-aws-lightsail-docker-docker-compose-postgresql-nginx-github-actions-bo6</link>
      <guid>https://dev.to/koladev/deploy-a-django-app-on-aws-lightsail-docker-docker-compose-postgresql-nginx-github-actions-bo6</guid>
      <description>&lt;p&gt;So you have written your Django Application and you are ready to deploy it? &lt;/p&gt;

&lt;p&gt;Although there are already existing solutions like Heroku, to help you deploy your application easily and quickly, it's always good for a developer to know how to deploy an application on a private server. &lt;/p&gt;

&lt;p&gt;Today, we'll learn how to deploy a Django App on AWS Lightsail. *&lt;em&gt;This can also be applied to others VPS providers. *&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of content
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Setup

&lt;ul&gt;
&lt;li&gt;Add PostgreSQL&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Prepare the Django application for deployment

&lt;ul&gt;
&lt;li&gt;Environment variables&lt;/li&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;li&gt;Docker Configuration&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Github Actions (testing)&lt;/li&gt;
&lt;li&gt;Preparing the server&lt;/li&gt;
&lt;li&gt;Github Actions (Deployment)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#1-setup"&gt;
  &lt;/a&gt;
  1 - Setup
&lt;/h2&gt;

&lt;p&gt;For this project, we'll be using an already configured Django application. It's a project made for this article about   &lt;a href="https://dev.to/koladev/django-rest-authentication-cmh"&gt; FullStack React &amp;amp; Django Authentication: Django REST, TypeScript, Axios, Redux &amp;amp; React Router &lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;You can directly clone the repo  &lt;a href="https://github.com/koladev32/django-auth-react-tutorial"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Once it's done, make sure to create a virtual environment and run the following commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd django-auth-react-tutorial 
virtualenv --python=/usr/bin/python3.8 venv
source venv/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#add-postgresql"&gt;
  &lt;/a&gt;
  Add PostgreSQL
&lt;/h3&gt;

&lt;p&gt;Actually, the project is running on sqlite3, which is very good in the local and development environments. Let's switch to PostgreSQL. &lt;/p&gt;

&lt;p&gt;Using this, I pretend that you have PostgreSQL installed on your machine and that the server is running. &lt;br&gt;
If that's not the case, feel free to check this resource to install the server. &lt;/p&gt;

&lt;p&gt;Once it's done, let's create the database we'll be using for this tutorial. Open your shell enter &lt;code&gt;psql&lt;/code&gt; and let's start writing some SQL commands.&lt;/p&gt;

&lt;p&gt;The CREATE DATABASE command lets us create a new database in PostgreSQL.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;DATABASE&lt;/span&gt; &lt;span class="n"&gt;coredb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The CREATE USER command lets us create a user for our database along with a password.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;USER&lt;/span&gt; &lt;span class="n"&gt;core&lt;/span&gt; &lt;span class="k"&gt;WITH&lt;/span&gt; &lt;span class="n"&gt;PASSWORD&lt;/span&gt; &lt;span class="s1"&gt;'12345678'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, let's grand to our new user access to the database created earlier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;GRANT&lt;/span&gt; &lt;span class="k"&gt;ALL&lt;/span&gt; &lt;span class="k"&gt;PRIVILEGES&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="k"&gt;DATABASE&lt;/span&gt; &lt;span class="n"&gt;coredb&lt;/span&gt; &lt;span class="k"&gt;TO&lt;/span&gt; &lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's install &lt;code&gt;psycopg2&lt;/code&gt; using &lt;code&gt;pip install psycopg2&lt;/code&gt; is a popular PostgreSQL database adapter for Python.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install psycopg2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next step, let's set up the project to use PostgreSQL database instead of Sqlite3.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'default'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'ENGINE'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'django.db.backends.sqlite3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'NAME'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;BASE_DIR&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s"&gt;'db.sqlite3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Change the above code snippet to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'default'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'ENGINE'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'django.db.backends.postgresql_psycopg2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'NAME'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'coredb'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'USER'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'core'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'PASSWORD'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'12345678'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'HOST'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'localhost'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'PORT'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5432&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What have we done? &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;ENGINE&lt;/code&gt;: We changed the database engine to use &lt;code&gt;postgresql_psycopg2&lt;/code&gt; instead of &lt;code&gt;sqlite3&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;NAME&lt;/code&gt;: is the name of the database we created for our project. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;USER&lt;/code&gt;: is the database user we've created during the database creation. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;PASSWORD&lt;/code&gt;: is the password to the database we created. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, make are that the Django application is connected to the PostgreSQL database. For this, we'll be running the &lt;code&gt;migrate&lt;/code&gt; command which is responsible for executing the SQL commands specified in the migrations files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll have a similar output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  Applying auth.0001_initial... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  ...
  Applying core_user.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying sessions.0001_initial... OK
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's run the server to check if the application is working well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see something like this when you hit &lt;code&gt;http://127.0.0.1:8000&lt;/code&gt; in your browser. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XY-J-j3u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629734721362/2Wy0WpBJA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XY-J-j3u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629734721362/2Wy0WpBJA.png" alt="Django Server Well Running"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bravo for us! We've successfully configured our Django app to use PostgresSQL.&lt;/p&gt;

&lt;p&gt;Now, let's prepare the application for deployment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-prepare-application-for-deployment"&gt;
  &lt;/a&gt;
  2 - Prepare application for deployment
&lt;/h2&gt;

&lt;p&gt;Here, we'll configure the application to use env variables but also configure  &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;  as well. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#env-variables"&gt;
  &lt;/a&gt;
  Env variables
&lt;/h3&gt;

&lt;p&gt;It's important to keep sensitive bits of code like API keys, passwords, and secret keys away from prying eyes. &lt;br&gt;
The best way to do it? Use environment variables. Here's how to do it in our application. &lt;/p&gt;

&lt;p&gt;First of all, let's install a python package named &lt;code&gt;django-environ&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install django-environ
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, import it in the settings.py file, and let's initialize environment variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# CoreRoot/settings.py
&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;environ&lt;/span&gt;

&lt;span class="c1"&gt;# Initialise environment variables
&lt;/span&gt;
&lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Env&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_env&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next step, create two files : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a &lt;code&gt;.env&lt;/code&gt; file which will contain all environment variables that &lt;code&gt;django-environ&lt;/code&gt; will read &lt;/li&gt;
&lt;li&gt;and a &lt;code&gt;env.example&lt;/code&gt; file which will contain the same content as &lt;code&gt;.env&lt;/code&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Actually, the &lt;code&gt;.env&lt;/code&gt; file is ignored by git. The &lt;code&gt;env.example&lt;/code&gt; file here represents a skeleton we can use to create our &lt;code&gt;.env&lt;/code&gt; file in another machine. &lt;/p&gt;

&lt;p&gt;It'll be visible, so make sure to not include sensitive information.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ./.env
SECRET_KEY=django-insecure-97s)x3c8w8h_qv3t3s7%)#k@dpk2edr0ed_(rq9y(rbb&amp;amp;_!ai%
DEBUG=0
DJANGO_ALLOWED_HOSTS="localhost 127.0.0.1 [::1]"
DB_ENGINE=django.db.backends.postgresql_psycopg2
DB_NAME=coredb
DB_USER=core
DB_PASSWORD=12345678
DB_HOST=localhost
DB_PORT=5432
CORS_ALLOWED_ORIGINS="http://localhost:3000 http://127.0.0.1:3000"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's copy the content paste it in &lt;code&gt;.env.example&lt;/code&gt;, but make sure to delete the values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./env.example
SECRET_KEY=
DEBUG=
DJANGO_ALLOWED_HOSTS=
DB_ENGINE=
DB_NAME=
DB_USER=
DB_PASSWORD=
DB_HOST=
DB_PORT=
CORS_ALLOWED_ORIGINS=
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now, let's go back to the settings file and add the env variables configurations as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ./CoreRoot/settings.py
&lt;/span&gt;
&lt;span class="c1"&gt;# SECURITY WARNING: keep the secret key used in production secret!
&lt;/span&gt;&lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'SECRET_KEY'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'qkl+xdr8aimpf-&amp;amp;x(mi7)dwt^-q77aji#j*d#02-5usa32r9!y'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# SECURITY WARNING: don't run with debug turned on in production!
&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"DEBUG"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="n"&gt;ALLOWED_HOSTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"DJANGO_ALLOWED_HOSTS"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'default'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'ENGINE'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'DB_ENGINE'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'django.db.backends.postgresql_psycopg2'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s"&gt;'NAME'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'DB_NAME'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'coredb'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s"&gt;'USER'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'DB_USER'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'core'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s"&gt;'PASSWORD'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'DB_PASSWORD'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'12345678'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s"&gt;'HOST'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'DB_HOST'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'localhost'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s"&gt;'PORT'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'DB_PORT'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'5432'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;CORS_ALLOWED_ORIGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"CORS_ALLOWED_ORIGINS"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h3&gt;

&lt;p&gt;Testing in an application is the first assurance of maintainability and reliability of our Django server. &lt;br&gt;
We'll be implementing testing to make sure everything is green before pushing for deployment.&lt;/p&gt;

&lt;p&gt;Let's write tests for our login and refresh endpoints. &lt;br&gt;
We'll also add one test to the &lt;code&gt;UserViewSet&lt;/code&gt;. &lt;br&gt;
First of all, create a file named &lt;code&gt;test_runner.py&lt;/code&gt; in &lt;code&gt;CoreRoot&lt;/code&gt; directory. &lt;/p&gt;

&lt;p&gt;The goal here is to rewrite the &lt;code&gt;DiscoverRunner&lt;/code&gt;, to load our custom fixtures in the test database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ./CoreRoot/test_runner.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;importlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;import_module&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;connections&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.test.runner&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DiscoverRunner&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CoreTestRunner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DiscoverRunner&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setup_test_environment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;"""We set the TESTING setting to True. By default, it's on False."""&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;setup_test_environment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TESTING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setup_databases&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;"""We set the database"""&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;setup_databases&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_fixtures&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_fixtures&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;import_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"core.fixtures"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"run_fixtures"&lt;/span&gt;&lt;span class="p"&gt;)()&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once it's done, we can add the TESTING configurations in the &lt;code&gt;settings.py&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# CoreRoot/settings.py
&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;TESTING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;TEST_RUNNER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"CoreRoot.test_runner.CoreTestRunner"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we can start writing our tests. &lt;/p&gt;

&lt;p&gt;Let's start with the authentication tests. First of all, let's add the URLs and the data we'll be using.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# core/auth/tests.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.test&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;APITestCase&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AuthenticationTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;APITestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;base_url_login&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"core:auth-login-list"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;base_url_refresh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"core:auth-refresh-list"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;data_register&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"pass"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"test@appseed.us"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;data_login&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"testuser@yopmail.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"12345678"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! We can add a test for login now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# core/auth/tests.py
&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
       &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;base_url_login&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data_login&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTP_200_OK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To run the tests, open the terminal and enter the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python manage.py test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see a similar output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Creating test database for alias 'default'...
System check identified no issues (0 silenced).
.
----------------------------------------------------------------------
Ran 1 test in 0.287s

OK
Destroying test database for alias 'default'...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's add a test for the refresh endpoint.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# core/auth/tests.py
&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_refresh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Login
&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;base_url_login&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data_login&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTP_200_OK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;response_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;access_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'access'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;refresh_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'refresh'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Refreshing the token
&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;base_url_refresh&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"refresh"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;refresh_token&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTP_200_OK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;response_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertNotEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;access_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'access'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we are doing here is pretty straightforward : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Login to retrieve the access and refresh tokens &lt;/li&gt;
&lt;li&gt;Making a request with the refresh token to gain a new access token&lt;/li&gt;
&lt;li&gt;Comparing the old access token and the new obtained access token to make sure they are not equal.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let's move to the  &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;  configuration. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dockerizing-our-app"&gt;
  &lt;/a&gt;
  Dockerizing our app
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;  is an open platform for developing, shipping, and running applications inside containers. &lt;br&gt;
Why use Docker? &lt;br&gt;
It helps you separate your applications from your infrastructure and helps in delivering code faster. &lt;/p&gt;

&lt;p&gt;If it's your first time working with Docker, I highly recommend you go through a quick tutorial and read some documentation about it. &lt;/p&gt;

&lt;p&gt;Here are some great resources that helped me: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://www.youtube.com/watch?v=eN_O4zd4D9o&amp;amp;list=PLPoSdR46FgI5wOJuzcPQCNqS37t39zKkg"&gt;Docker Tutorial&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://docker-curriculum.com/"&gt;Docker curriculum&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#dockerfile"&gt;
  &lt;/a&gt;
  Dockerfile
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;Dockerfile&lt;/code&gt; represents a text document containing all the commands that could call on the command line to create an image.&lt;/p&gt;

&lt;p&gt;Add a Dockerfile to the project root:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# pull official base image
FROM python:3.9-alpine

# set work directory
WORKDIR /app

# set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# install psycopg2 dependencies
RUN apk update \
    &amp;amp;&amp;amp; apk add postgresql-dev gcc python3-dev musl-dev

# install python dependencies
COPY requirements.txt /app/requirements.txt
RUN pip install --upgrade pip
RUN pip install --no-cache-dir -r requirements.txt


# copy project
COPY . .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we started with an &lt;strong&gt;Alpine-based Docker Image for Python&lt;/strong&gt;. It's a lightweight Linux distribution designed for security and resource efficiency. &lt;br&gt;
After that, we set a working directory followed by two environment variables: &lt;/p&gt;

&lt;p&gt;1 - &lt;code&gt;PYTHONDONTWRITEBYTECODE&lt;/code&gt; to prevent Python from writing &lt;code&gt;.pyc&lt;/code&gt; files to disc&lt;br&gt;
2 - &lt;code&gt;PYTHONUNBUFFERED&lt;/code&gt; to prevent Python from buffering &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After that, we perform operations like: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Setting up environment variables&lt;/li&gt;
&lt;li&gt;Installing Postgres server&lt;/li&gt;
&lt;li&gt;Copying there &lt;code&gt;requirements.txt&lt;/code&gt; file to our app path, upgrading pip, and installing the python package to run our application&lt;/li&gt;
&lt;li&gt;And last copying the entire project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, let's add a &lt;code&gt;.dockerignore&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;env
venv
.dockerignore
Dockerfile
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#docker-compose"&gt;
  &lt;/a&gt;
  Docker Compose
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://docs.docker.com/compose/"&gt;Docker Compose&lt;/a&gt;  is a great tool (&amp;lt;3). You can use it to define and run multi-container Docker applications.&lt;/p&gt;

&lt;p&gt;What do we need? Well, just a YAML file containing all the configuration of our application's services. &lt;br&gt;
Then, with the &lt;code&gt;docker-compose&lt;/code&gt; command, we can create and start all those services.&lt;/p&gt;

&lt;p&gt;Here, the &lt;code&gt;docker-compose.dev.yml&lt;/code&gt; file will contain three services that make our app: nginx, web, and db. &lt;/p&gt;

&lt;p&gt;This file will be used for development.&lt;/p&gt;

&lt;p&gt;As you guessed :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3.7'&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;nginx&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;core_web&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;on-failure&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx:stable&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./nginx/nginx.dev.conf:/etc/nginx/conf.d/default.conf&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;static_volume:/app/static&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;80:80"&lt;/span&gt;
    &lt;span class="na"&gt;depends_on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;web&lt;/span&gt;
  &lt;span class="na"&gt;web&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;core_app&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;always&lt;/span&gt;
    &lt;span class="na"&gt;env_file&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.env&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;5000:5000"&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="s"&gt;sh -c " python manage.py migrate &amp;amp;&amp;amp;&lt;/span&gt;
          &lt;span class="s"&gt;gunicorn CoreRoot.wsgi:application --bind 0.0.0.0:5000"&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
     &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;.:/app&lt;/span&gt;
     &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;static_volume:/app/static&lt;/span&gt;
    &lt;span class="na"&gt;depends_on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
     &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;db&lt;/span&gt;
  &lt;span class="na"&gt;db&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;core_db&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;postgres:12.0-alpine&lt;/span&gt;
    &lt;span class="na"&gt;env_file&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.env&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;postgres_data:/var/lib/postgresql/data/&lt;/span&gt;

&lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;static_volume&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;postgres_data&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;nginx&lt;/code&gt;:  &lt;a href="https://www.nginx.com/"&gt;NGINX&lt;/a&gt;  is an open-source software for web serving, reverse proxying, caching, load balancing, media streaming, and more.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;web&lt;/code&gt;: We'll run and serve the endpoint of the Django application through Gunicorn. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;db&lt;/code&gt;: As you guessed, this service is related to our PostgreSQL database.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And the next step, let's create the NGINX configuration file to proxy requests to our backend application. &lt;br&gt;
In the root directory, create a &lt;code&gt;nginx&lt;/code&gt; directory and create a &lt;code&gt;nginx.dev.conf&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;upstream webapp {
    server core_app:5000;
}
server {

    listen 80;
    server_name localhost;

    location / {
        proxy_pass http://webapp;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_redirect off;
    }

    location /static/ {
     alias /app/static/;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's add &lt;code&gt;gunicorn&lt;/code&gt; and some configurations before building our image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install gunicorn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And add it as a requirement as well in the &lt;code&gt;requirements.txt&lt;/code&gt;. &lt;br&gt;
Here's what my &lt;code&gt;requirements.txt&lt;/code&gt; file looks like :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Django==3.2.4
djangorestframework==3.12.4
djangorestframework-simplejwt==4.7.1
django-cors-headers==3.7.0
psycopg2==2.9.1
django-environ==0.4.5
gunicorn==20.1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the last thing, let's add &lt;code&gt;STATIC_ROOT&lt;/code&gt; in the &lt;code&gt;settings.py&lt;/code&gt; file.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#docker-build"&gt;
  &lt;/a&gt;
  Docker Build
&lt;/h4&gt;

&lt;p&gt;The setup is completed. Let's build our containers and test if everything works locally.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose -f docker-compose.dev.yml up -d --build 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once it's done, hit &lt;code&gt;localhost/api/auth/login/&lt;/code&gt; to see if your application is working. &lt;br&gt;
You should get a similar page. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f-k0S-ZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630022210893/4hCPqR6A4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f-k0S-ZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630022210893/4hCPqR6A4.png" alt="Page GET Not allowed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great! Our Django application is successfully running inside a container.&lt;/p&gt;

&lt;p&gt;Let's move to the Github Actions to run tests every time there is a push on the &lt;code&gt;main&lt;/code&gt; branch.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#github-actions-testing"&gt;
  &lt;/a&gt;
  Github Actions (Testing)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/features/actions"&gt;GitHub actions&lt;/a&gt;  are one of the greatest features of Github. it helps you build, test or deploy your application and more. &lt;/p&gt;

&lt;p&gt;Here, we'll create a YAML file named &lt;code&gt;django.yml&lt;/code&gt; to run some Django tests. &lt;/p&gt;

&lt;p&gt;In the root project, create a directory named &lt;code&gt;.github&lt;/code&gt;. Inside that directory, create another directory named &lt;code&gt;workflows&lt;/code&gt; and create the &lt;code&gt;django.yml&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Django CI&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;max-parallel&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;
      &lt;span class="na"&gt;matrix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;python-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;3.9&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
    &lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;postgres&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;postgres:12&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;POSTGRES_USER&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;core&lt;/span&gt;
          &lt;span class="na"&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12345678&lt;/span&gt;
          &lt;span class="na"&gt;POSTGRES_DB&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;coredb&lt;/span&gt;
        &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;5432:5432&lt;/span&gt;
        &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;--health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Set up Python ${{ matrix.python-version }}&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-python@v2&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;python-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.python-version }}&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;psycopg2 prerequisites&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sudo apt-get install python-dev libpq-dev&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install Dependencies&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;python -m pip install --upgrade pip&lt;/span&gt;
        &lt;span class="s"&gt;pip install -r requirements.txt&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run Tests&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;python manage.py test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically, what we are doing here is setting rules for the  &lt;a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions"&gt;GitHub action workflow&lt;/a&gt;, installing dependencies, and running the tests. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make sure that this workflow is triggered only when there is a push or pull_request on the main branch&lt;/li&gt;
&lt;li&gt;Choose &lt;code&gt;ubuntu-latest&lt;/code&gt; as the OS and precise the Python version on which this workflow will run. &lt;/li&gt;
&lt;li&gt;Next, we create a Postgres service, the database will be used to run our tests. &lt;/li&gt;
&lt;li&gt;After that as we install the python dependencies and just run the tests. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you push the code in your repository, you'll see something similar when you go to your repository page. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A3GsJ6dZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630024016358/wxAUXlykO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A3GsJ6dZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630024016358/wxAUXlykO.png" alt="Django Actions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After a moment, the yellow colors will turn to green, meaning that the checks have successfully completed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-aws-server"&gt;
  &lt;/a&gt;
  Setting up the AWS server
&lt;/h2&gt;

&lt;p&gt;I'll be using a  &lt;a href="https://aws.amazon.com/lightsail/"&gt;Lightsail server&lt;/a&gt; here. Note that these configurations can work with any VPS provider. &lt;/p&gt;

&lt;p&gt;If you want to set up a Lightsail instance, refer to the AWS  &lt;a href="https://aws.amazon.com/lightsail/"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Personally, I am my VPS is running on Ubuntu 20.04.3 LTS.&lt;/p&gt;

&lt;p&gt;Also, you'll need  &lt;a href="https://docs.docker.com/engine/install/ubuntu/"&gt;Docker&lt;/a&gt;  and  &lt;a href="https://docs.docker.com/compose/install/"&gt;docker-compose&lt;/a&gt; installed on the machine.&lt;/p&gt;

&lt;p&gt;After that, if you want to link your server to a domain name, make sure to add it to your DNS configuration panel. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gXPR5HYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630162654342/mGaOf9REK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gXPR5HYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630162654342/mGaOf9REK.png" alt="Domain name configurations"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you are done, we can start working on the deployment process. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#docker-build-script"&gt;
  &lt;/a&gt;
  Docker build script
&lt;/h3&gt;

&lt;p&gt;To automate things here, we'll write a bash script to pull changes from the repo and also build the docker image and run the containers. &lt;/p&gt;

&lt;p&gt;We'll also be checking if there are any coming changes before pulling and re-building the containers again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env bash

TARGET='main'

cd ~/app || exit

ACTION='\033[1;90m'
NOCOLOR='\033[0m'

# Checking if we are on the main branch

echo -e ${ACTION}Checking Git repo
BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [ "$BRANCH" != ${TARGET} ]
then
  exit 0
fi

# Checking if the repository is up to date.

git fetch
HEADHASH=$(git rev-parse HEAD)
UPSTREAMHASH=$(git rev-parse ${TARGET}@{upstream})

if [ "$HEADHASH" == "$UPSTREAMHASH" ]
then
  echo -e "${FINISHED}"Current branch is up to date with origin/${TARGET}."${NOCOLOR}"
  exit 0
fi

# If that's not the case, we pull the latest changes and we build a new image

git pull origin main;

# Docker

docker-compose up -d --build

exit 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Good! Login on your server using SSH. We'll be creating some new directories: one for the repo and another one for our scripts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir app .scripts
cd .scripts
vim docker-deploy.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And just paste the content of the precedent script and modify it if necessary.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd ~/app
git clone &amp;lt;your_repository&amp;gt; .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't forget to add the &lt;code&gt;.&lt;/code&gt;. Using this, it will simply clone the content of the repository in the current directory.&lt;/p&gt;

&lt;p&gt;Great! Now we need to write the default &lt;code&gt;docker-compose.yml&lt;/code&gt; file which will be run on this server.&lt;/p&gt;

&lt;p&gt;We'll be adding an SSL certificate, by the way, so we need to create another &lt;code&gt;nginx.conf&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Here's the &lt;code&gt;docker-compose.yml&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;version: '3.7'
services:
  nginx:
    container_name: core_web
    restart: on-failure
    image: jonasal/nginx-certbot:latest
    env_file:
      - .env.nginx
    volumes:
      - nginx_secrets:/etc/letsencrypt
      - ./nginx/user_conf.d:/etc/nginx/user_conf.d
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web

  web:
    container_name: core_app
    build: .
    restart: always
    env_file: .env
    ports:
      - "5000:5000"
    command: &amp;gt;
      sh -c " python manage.py migrate &amp;amp;&amp;amp;
          gunicorn CoreRoot.wsgi:application --bind 0.0.0.0:5000"
    volumes:
     - .:/app
     - static_volume:/app/static
    depends_on:
     - db
  db:
    container_name: core_db
    image: postgres:12.0-alpine
    env_file: .env
    volumes:
      - postgres_data:/var/lib/postgresql/data/

volumes:
  static_volume:
  postgres_data:
  nginx_secrets:
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you noticed, we've changed the &lt;code&gt;nginx&lt;/code&gt; service. Now, we are using the &lt;code&gt;docker-nginx-certbot&lt;/code&gt; image. It'll automatically create and renew SSL certificates using the  &lt;a href="https://letsencrypt.org/"&gt;Let's Encrypt&lt;/a&gt; free CA (Certificate authority) and its client &lt;code&gt;certbot&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Create a new directory &lt;code&gt;user_conf.d&lt;/code&gt; inside the &lt;code&gt;nginx&lt;/code&gt; directory and create a new file &lt;code&gt;nginx.conf&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;upstream webapp {
    server core_app:5000;
}

server {

    listen 443 default_server reuseport;
    listen [::]:443 ssl default_server reuseport;
    server_name dockerawsdjango.koladev.xyz;
    server_tokens off;
    client_max_body_size 20M;


    ssl_certificate /etc/letsencrypt/live/dockerawsdjango.koladev.xyz/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/dockerawsdjango.koladev.xyz/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/dockerawsdjango.koladev.xyz/chain.pem;
    ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem;

    location / {
        proxy_pass http://webapp;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_redirect off;
    }

    location /static/ {
     alias /app/static/;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Make sure to replace &lt;code&gt;dockerawsdjango.koladev.xyz&lt;/code&gt; with your own domain name...&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And no troubles! I'll explain what I've done.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;server {
    listen 443 default_server reuseport;
    listen [::]:443 ssl default_server reuseport;
    server_name dockerawsdjango.koladev.xyz;
    server_tokens off;
    client_max_body_size 20M;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So as usual, we are listening on port &lt;code&gt;443&lt;/code&gt; for &lt;strong&gt;HTTPS&lt;/strong&gt;. &lt;br&gt;
We've added a &lt;code&gt;server_name&lt;/code&gt; which is the domain name. We set the &lt;code&gt;server_tokens&lt;/code&gt; to off to not show the server version on error pages. &lt;br&gt;
And the last thing, we set the request size to a &lt;strong&gt;max of 20MB&lt;/strong&gt;. It means that requests larger than 20MB will result in errors with &lt;strong&gt;HTTP 413&lt;/strong&gt; (Request Entity Too Large).&lt;/p&gt;

&lt;p&gt;Now, let's write the job for deployment in the Github Action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
  deploy:
    name: Deploying
    needs: [test]
    runs-on: ubuntu-latest
    steps:
    - name: Deploying Application
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_AWS_SERVER_IP }}
        username: ${{ secrets.SSH_SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          cd ~/.scripts
          ./docker-deploy.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the usage of Github Secrets here. It allows the storage of sensitive information in your repository. Check this  &lt;a href="https://docs.github.com/en/actions/reference/encrypted-secrets"&gt;documentation&lt;/a&gt;  for more information.&lt;/p&gt;

&lt;p&gt;We also using here a GitHub action that requires the name of the host, the username, the key, and the passphrase. You can also use this action with a password but it'll require some configurations. &lt;br&gt;
Feel free to check the  &lt;a href="https://github.com/appleboy/ssh-action#setting-up-a-ssh-key"&gt;documentation&lt;/a&gt;  of this action for more detail.&lt;/p&gt;

&lt;p&gt;Also, notice the &lt;code&gt;needs: [build]&lt;/code&gt; line. It helps us make sure that the precedent job is successful before deploying the new version of the app.&lt;/p&gt;

&lt;p&gt;Once it's done, log via ssh in your server and create a .env file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd app/
vim .env # or nano or whatever
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, create a &lt;code&gt;.env.nginx&lt;/code&gt; file. This will contain the required configurations to create an SSL certificate.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Required
CERTBOT_EMAIL=

# Optional (Defaults)
STAGING=1
DHPARAM_SIZE=2048
RSA_KEY_SIZE=2048
ELLIPTIC_CURVE=secp256r1
USE_ECDSA=0
RENEWAL_INTERVAL=8d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add your email address. Notice here that &lt;code&gt;STAGING&lt;/code&gt; is set to 1. We will test the configuration first with &lt;strong&gt;Let’s encrypt&lt;/strong&gt; staging environment! It is important to not set staging=0 before you are 100% sure that your configuration is correct. &lt;/p&gt;

&lt;p&gt;This is because there is a limited number of retries to issue the certificate and you don’t want to wait till they are reset (once a week). &lt;/p&gt;

&lt;p&gt;Declare the environment variables your project will need. &lt;/p&gt;

&lt;p&gt;And we're nearly done. :)&lt;/p&gt;

&lt;p&gt;Make a push to the repository and just wait for the actions to pass successfully.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BE2HesTU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630170291071/0t26MZ9nt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BE2HesTU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630170291071/0t26MZ9nt.png" alt="Successful Deployment"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And voilà. I can check &lt;a href="https://dockerawsdjango.koladev.xyz/"&gt;https://dockerawsdjango.koladev.xyz/&lt;/a&gt; and here's the result.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZNwizssG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630280545520/4f2ttZjfw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZNwizssG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630280545520/4f2ttZjfw.png" alt="HTTPS expired"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It looks like our configuration is clean! We can issue a production-ready certificate now. &lt;br&gt;
On your server, stop the containers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose down
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;edit your &lt;code&gt;.env.nginx&lt;/code&gt; file and set &lt;code&gt;STAGING=0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, start the containers again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo docker-compose up -d --build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's refresh the page. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---9tuY1Uf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630281017853/jEnMx60C-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---9tuY1Uf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630281017853/jEnMx60C-.png" alt="HTTPS Secure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And it's working like a charm! :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article,  we've learned how to use Github Actions to deploy a dockerized Django application on an AWS Lightsail server. Note that you can use these steps on any VPS. &lt;/p&gt;

&lt;p&gt;And as every article can be made better so your suggestion or questions are welcome in the comment section. 😉&lt;/p&gt;

&lt;p&gt;Check the code of this tutorial  &lt;a href="https://github.com/koladev32/django-aws-docker-github-actions"&gt;here&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>python</category>
      <category>docker</category>
      <category>django</category>
      <category>github</category>
    </item>
    <item>
      <title>Testes de Software: quais os tipos e por que implementar?</title>
      <author>agatha-vieira</author>
      <pubDate>Tue, 31 Aug 2021 11:46:39 +0000</pubDate>
      <link>https://dev.to/fireworkweb/testes-de-software-quais-os-tipos-e-por-que-implementar-4p8c</link>
      <guid>https://dev.to/fireworkweb/testes-de-software-quais-os-tipos-e-por-que-implementar-4p8c</guid>
      <description>&lt;p&gt;Testes de software focam na investigação ou validação de funcionalidades que comprovam a qualidade do software ou produto que está sendo testado, para os envolvidos no projeto. Aprenda mais sobre este processo essencial para garantia a qualidade de um software 👇&lt;br&gt;
Quais são os tipos de testes de software?&lt;/p&gt;

&lt;p&gt;Geralmente existem dois tipos de testes:&lt;/p&gt;

&lt;p&gt;Funcionais:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unit Testing&lt;/li&gt;
&lt;li&gt;Integration Testing&lt;/li&gt;
&lt;li&gt;System Testing&lt;/li&gt;
&lt;li&gt;Sanity Testing&lt;/li&gt;
&lt;li&gt;Smoke Testing&lt;/li&gt;
&lt;li&gt;Interface Testing&lt;/li&gt;
&lt;li&gt;Regression Testing&lt;/li&gt;
&lt;li&gt;Beta/Acceptance Testing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Performance:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Load Testing&lt;/li&gt;
&lt;li&gt;Stress Testing&lt;/li&gt;
&lt;li&gt;Volume Testing&lt;/li&gt;
&lt;li&gt;Security Testing&lt;/li&gt;
&lt;li&gt;Compatibility Testing&lt;/li&gt;
&lt;li&gt;Install Testing&lt;/li&gt;
&lt;li&gt;Recovery Testing&lt;/li&gt;
&lt;li&gt;Reliability Testing&lt;/li&gt;
&lt;li&gt;Usability Testing&lt;/li&gt;
&lt;li&gt;Compliance Testing&lt;/li&gt;
&lt;li&gt;Localization Testing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Como definir quais testes devem ser implementados?&lt;/p&gt;

&lt;p&gt;Para definir os testes de um sistema, é importante se perguntar quais são as funcionalidades que o sistema tem, e o que ele precisa para funcionar. Depois de se fazer estas perguntas, é muito mais fácil identificar quais pontos os testes cabem. Inclusive se você é iniciante no mundo de testes e qualidade de software, pode ser uma maneira mais rápida de encontrar o teste que precisa, antes de se familiarizar mais profundamente com os nomes e categorias de cada um.&lt;/p&gt;

&lt;p&gt;A Implementação de testes varia por projeto e pelas tecnologias sendo usadas. Sistemas muito grandes geralmente precisam de testes de performance, pois tem um volume de usuários muito alto. Os demais podem se beneficiar muito de testes de regressão, testando o sistema por completo. Mas os mais comuns são os testes funcionais, pois são mais assertivos, e requerem um acompanhamento eficiente com a documentação, e tarefas bem descritas. Ajudando na organização do projeto e na detecção de erros antes de chegar ao cliente.&lt;/p&gt;

&lt;p&gt;É importante documentar os testes. Descrevendo qual o resultado esperado, o que está sendo testado, e caso necessário alguma instrução mais específica para seu time. Manter um bom controle de quais testes existem, e de detalhes de cada um previne a divergência de coordenação entre os desenvolvedores do projeto. Um time organizado pode chegar aos cenários de teste sendo estudados juntos, anotando também os requisitos funcionais, de database, especificações técnicas, entre outros.&lt;/p&gt;

&lt;p&gt;Comunicação é crucial para a criação de testes que trazem valor para o projeto. Faça reuniões com seus colegas, identifique os pontos mais fracos do sistema e use os testes para fortalecer esses pontos. &lt;/p&gt;

&lt;p&gt;Lembre-se que testes também podem melhorar a qualidade do código no seu projeto. Algumas ferramentas como PHP-cs-fixer, PHP Mess Detector, eslint, etc. Ajudaram a manter uma qualidade de código dentro do projeto com todos os desenvolvedores.&lt;br&gt;
Qual o impacto de testes contínuos em software para empresas?&lt;/p&gt;

&lt;p&gt;Fazer testes contínuos é o único jeito de garantir a qualidade de software. Então são essenciais, se adaptando aos requerimentos do projeto. O maior impacto, além de manter a qualidade, é garantir que o sistema continue funcionando como esperado e ajudando os desenvolvedores a encontrar erros antes de liberar o acesso para os clientes. &lt;/p&gt;

&lt;p&gt;Mais importante que prevenir erros de sistema ou uma experiência de usuário ruim, são os impactos financeiros e legais. Um sistema sem testes, é mais vulnerável a ter vulnerabilidades de segurança, usar pacotes desatualizados, ou ter Bugs que podem ser usados de maneira maliciosa por terceiros. Horrível não!? Então não se esqueça de implementar testes no seu software/sistema, e caso você não saiba por onde começar entre em contato conosco!&lt;/p&gt;




&lt;p&gt;Aprenda mais nos nossos canais digitais!&lt;br&gt;
Site: &lt;a href="https://fireworkweb.com.br"&gt;https://fireworkweb.com.br&lt;/a&gt;&lt;br&gt;
Youtube:&lt;a href="https://bit.ly/2GwqNU1"&gt;https://bit.ly/2GwqNU1&lt;/a&gt;&lt;br&gt;
Insta: @fireworkweb&lt;br&gt;
Face: @fireworkweb&lt;br&gt;
Linkedin: Firework Web &amp;amp; Mobile&lt;/p&gt;

</description>
      <category>braziliandevs</category>
      <category>basic</category>
      <category>testing</category>
    </item>
    <item>
      <title>How To Apply Confusion Matrix In Real-Life Scenario  </title>
      <author>Manar Abdelkarim</author>
      <pubDate>Tue, 31 Aug 2021 11:41:35 +0000</pubDate>
      <link>https://dev.to/manarabdelkarim/how-to-apply-confusion-matrix-in-real-life-scenario-2i7a</link>
      <guid>https://dev.to/manarabdelkarim/how-to-apply-confusion-matrix-in-real-life-scenario-2i7a</guid>
      <description>&lt;h3&gt;
  &lt;a href="#hello-scientist"&gt;
  &lt;/a&gt;
  Hello Scientist
&lt;/h3&gt;

&lt;p&gt;Before we start, this article is a follow-up to the previous one about (Sets) in Math and Python. &lt;/p&gt;

&lt;p&gt;To understand today’s post you should have knowledge of Sets or you can go and read &lt;a href="https://dev.to/manarabdelkarim/confusion-matrix-sets-in-math-and-python-5ahe"&gt;What Is Set In Math And Python&lt;/a&gt; &lt;br&gt;
Ok? Are you ready??&lt;/p&gt;

&lt;p&gt;Then let’s get started.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--obm6AZEy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eu37k2sfmm42x2nw62p2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--obm6AZEy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eu37k2sfmm42x2nw62p2.gif" alt="Confusion Matrix"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our first example is detecting Corona on People.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Let's call all the people that we chose as a test sample -&amp;gt; X&lt;/li&gt;
&lt;li&gt;And the set of people among X  who are sick (have Corona) -&amp;gt; S&lt;/li&gt;
&lt;li&gt;The set of people among X who are Healthy(don't have Corona) -&amp;gt; H&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5AkM8Knj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sytr12mcuh0slyl7bmry.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5AkM8Knj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sytr12mcuh0slyl7bmry.jpg" alt="Confusion Matrix"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To represent S in mathematics we write:&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;S={x ∈ X: x has Corona}&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;The small x means one of the X sets (a member of X).&lt;br&gt;
So the formula says an x "a person from the sample test" that is a member of the X "the set of all the people of the sample test" and that x "that person" has Corona (from the S sub set).&lt;/p&gt;

&lt;p&gt;And to represent H in mathematics we write:&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;H={x ∈ X: x doesn't have Corona}&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Now, what is the possibility that one of the X people has Corona and doesn't have Corona at the same time?&lt;br&gt;
Of course, this is impossible!&lt;/p&gt;

&lt;p&gt;So we know that |S| ∩ |H| = ∅ and |S| ∪ |H| = X (the people in the test sample are either sick or healthy so if we put all the sick and healthy people together they will be all of our samples)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uIcSZE6k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b236a3oszqvb9gleiz1e.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uIcSZE6k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b236a3oszqvb9gleiz1e.jpg" alt="Confusion Matrix"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's add our Corona detect prediction as we want to know how accurate is our CPR prediction.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;So let the people from the sample who tested positive -&amp;gt;P
And we represent them as P= {x ∈ X : x positive for Corona}&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that positive here means that the CPR predicts that someone has Corona.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The people from the sample who tested negative -&amp;gt;N
And we represent them as N= {x ∈ X : x negative for Corona}&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we have 4 probabilities:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;someone who has Corona and his test for Corona is positive.&lt;/li&gt;
&lt;li&gt;someone who does not have Corona and his test for Corona is negative.&lt;/li&gt;
&lt;li&gt;someone who has Corona but his test for Corona is negative.&lt;/li&gt;
&lt;li&gt;someone who does not have Corona but his test for Corona is positive.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;these probabilities are called the Confusion matrix&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DW0EvKFD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j5rf9xdzffeqqv0y7sys.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DW0EvKFD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j5rf9xdzffeqqv0y7sys.jpg" alt="Confusion Matrix"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#confusion-matrix"&gt;
  &lt;/a&gt;
  Confusion Matrix:
&lt;/h2&gt;

&lt;p&gt;A confusion matrix is a technique for summarizing the performance of a classification algorithm.&lt;/p&gt;

&lt;p&gt;Calculating a confusion matrix can give you a better idea of what your classification model is getting right and what types of errors it is making.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now Let's discuss the 4 possibility:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--av83w4Iw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.kym-cdn.com/entries/icons/original/000/021/464/14608107_1180665285312703_1558693314_n.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--av83w4Iw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.kym-cdn.com/entries/icons/original/000/021/464/14608107_1180665285312703_1558693314_n.jpg" alt="math"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#someone-who-has-corona-and-his-test-for-corona-is-positive"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Someone who has Corona and his test for Corona is positive.&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The representation of this possibility is: |S| ∩ |P|&lt;br&gt;
because S is the people who have Corona and P are the people who tested positive.&lt;br&gt;
someone who has Corona and tested positive means we want to find someone in both sets (S and P) which means the intersection.&lt;/p&gt;

&lt;p&gt;If we have a girl called Sara, Sara is in the P set which means the CPR predicted that Sara is in the S set ( the set of sick people)&lt;br&gt;
If Sara is tested positive we call this prediction "positive" and if she is sick "if she is in S set" then we say the prediction is True -&amp;gt; True Positive.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When the prediction of what we are trying to find is right we call it positive.&lt;/li&gt;
&lt;li&gt;When the reality meets the prediction we call it True
So |S| ∩ |P|  = True Positive.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#someone-who-does-not-have-corona-and-his-test-for-corona-is-negative"&gt;
  &lt;/a&gt;
  &lt;strong&gt;someone who does not have Corona and his test for Corona is negative.&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The representation of this possibility is: |H| ∩ |N|&lt;br&gt;
because H is the healthy people who don't have Corona and N are the people who tested negative.&lt;br&gt;
someone who doesn't have Corona and tested negative means we want to find someone in both sets (H and N) which means the intersection.&lt;/p&gt;

&lt;p&gt;Let's assume that the girl called Sara is in the N set which means the CPR predicted that Sara is in the H set ( the set of healthy people)&lt;br&gt;
If Sara is tested negative we call this prediction "negative" and if she is sick "if she is in S set" then we say the prediction is True -&amp;gt; True negative.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When the prediction of what we are &lt;strong&gt;, not&lt;/strong&gt; trying to find (or the opposite of what we want to predict) is right we call it negative.
-When the reality meets the prediction we call it True&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So |H| ∩ |N| = True Negative&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#someone-who-has-corona-but-his-test-for-corona-is-negative"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Someone who has Corona but his test for Corona is negative.&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The representation of this possibility is: |S| ∩ |N|&lt;br&gt;
because S is the sick people who do have Corona and N are the people who tested negative.&lt;/p&gt;

&lt;p&gt;Let's assume that the girl called Sara is in the N set which means the CPR predicted that Sara is in the H set ( the set of healthy people)&lt;br&gt;
If Sara is tested negative we call this prediction "negative" and because she is sick and not healthy "she is in S set" then we say the prediction is False -&amp;gt; False-negative.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When the prediction of what we are &lt;strong&gt;, not&lt;/strong&gt; trying to find (or the opposite of what we want to predict) is right we call it negative.&lt;/li&gt;
&lt;li&gt;When the reality does not match the prediction we call it False&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So |H| ∩ |N| = False Negative&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#someone-who-does-not-have-corona-but-his-test-for-corona-is-positive"&gt;
  &lt;/a&gt;
  &lt;strong&gt;someone who does not have Corona but his test for Corona is positive.&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The representation of this possibility is: |H| ∩ |P|&lt;br&gt;
because H are the healthy people who don't have Corona and P are the people who tested positive.&lt;/p&gt;

&lt;p&gt;Again, the poor Sara is in the P set which means the CPR predicted that Sara is in the N set ( the set of sick people)&lt;br&gt;
If Sara is tested positive we call this prediction "positive" and because she is healthy "she is in H set" and not sick then we say the prediction is False -&amp;gt; False positive.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When the prediction of what we are trying to find is right we call it positive.&lt;/li&gt;
&lt;li&gt;When the reality does not match the prediction we call it False&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So |H| ∩ |P| = False positive&lt;/p&gt;

&lt;p&gt;Note that to make our prediction accurate we want to increase the True positive and True negative and decrease the False-positive and the False-negative.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DozUKEHk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/603gtct19tmcicy2gjfi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DozUKEHk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/603gtct19tmcicy2gjfi.jpg" alt="Confusion matrix"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I know that it is a bit of a headache so here is another example you can think of:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;we are making an app with machine learning algorithms that predict if a word is a bad - nasty word.&lt;/p&gt;

&lt;p&gt;Again the word would be either bad word or not bad word and&lt;/p&gt;

&lt;p&gt;Because we are searching for bad words, if we predict one we call the prediction positive, and if we predict the opposite "not bad" we call the production negative.&lt;/p&gt;

&lt;p&gt;If our prediction is True then we call the prediction True, and if our prediction is False then we call the production False.&lt;/p&gt;

&lt;p&gt;So&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;our sample X is the words in a sentence.&lt;/li&gt;
&lt;li&gt;G is the set of not bad words. -&amp;gt; G= {x ∈ X: X is not a bad word}.&lt;/li&gt;
&lt;li&gt;B is the set of bad words. -&amp;gt; B= {x ∈ X: X is a bad word}.&lt;/li&gt;
&lt;li&gt;P is for the probability of bad words -&amp;gt; P= {x ∈ X: positive for bad words}.&lt;/li&gt;
&lt;li&gt;P is for the probability of not bad words -&amp;gt; P= {x ∈ X: negative for bad words}.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;|B| ∩ |P|= True Positive&lt;/li&gt;
&lt;li&gt;|B| ∩ |N|= False Negative&lt;/li&gt;
&lt;li&gt;|G| ∩ |P|= False Positive&lt;/li&gt;
&lt;li&gt;|G| ∩ |N|= True Negative&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#bonus-"&gt;
  &lt;/a&gt;
  Bonus 🥳:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Let's represent the Confusion Matrix&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JoQ_NQHV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xfkwdmk1dwewsksqe8fb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JoQ_NQHV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xfkwdmk1dwewsksqe8fb.png" alt="venn"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;References: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.coursera.org/learn/datasciencemathskills"&gt;Data Science Math Skills - Duke University | Coursera&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://machinelearningmastery.com/confusion-matrix-machine-learning/"&gt;What is a Confusion Matrix in Machine Learning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>datascience</category>
      <category>machinelearning</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
