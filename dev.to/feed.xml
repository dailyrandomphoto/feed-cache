<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>NgRx Tips I Needed in the Beginning</title>
      <author>Marko Stanimirović</author>
      <pubDate>Wed, 10 Nov 2021 10:51:06 +0000</pubDate>
      <link>https://dev.to/this-is-angular/ngrx-tips-i-needed-in-the-beginning-4hno</link>
      <guid>https://dev.to/this-is-angular/ngrx-tips-i-needed-in-the-beginning-4hno</guid>
      <description>&lt;p&gt;&lt;em&gt;Cover photo by &lt;a href="https://unsplash.com/photos/c1Jp-fo53U8"&gt;Léonard Cotte&lt;/a&gt; on Unsplash.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This article contains a list of tips and best practices for using the &lt;code&gt;@ngrx/store&lt;/code&gt; and &lt;code&gt;@ngrx/effects&lt;/code&gt; libraries. The list is based on the usual NgRx mistakes I've seen many times (some of which I've made myself) and on the great talks and articles that you can find in the &lt;a href="#resources"&gt;resources&lt;/a&gt; section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contents"&gt;
  &lt;/a&gt;
  Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#store-tips"&gt;Store Tips&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#put-global-state-in-a-single-place"&gt;Put global state in a single place&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dont-put-the-local-state-in-the-global-store"&gt;Don't put the local state in the global store&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-selectors-for-the-derived-state"&gt;Use selectors for the derived state&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-view-model-selectors"&gt;Use view model selectors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#treat-actions-as-unique-events"&gt;Treat actions as unique events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#group-actions-by-source"&gt;Group actions by source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dont-dispatch-actions-conditionally"&gt;Don't dispatch actions conditionally&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#create-reusable-reducers"&gt;Create reusable reducers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#be-careful-with-facades"&gt;Be careful with facades&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#effects-tips"&gt;Effects Tips&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#name-effects-like-functions"&gt;Name effects like functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#keep-effects-simple"&gt;Keep effects simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dont-create-boiler-effects"&gt;Don't create "boiler" effects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#apply-single-responsibility-principle"&gt;Apply single responsibility principle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#apply-good-action-hygiene"&gt;Apply good action hygiene&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#resources"&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#peer-reviewers"&gt;Peer Reviewers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#store-tips"&gt;
  &lt;/a&gt;
  Store Tips
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#put-global-state-in-a-single-place"&gt;
  &lt;/a&gt;
  Put global state in a single place
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Try to keep a global state of your application in a single place - NgRx store.&lt;/strong&gt; Having state spread across multiple stateful services makes an application harder to maintain. It also frequently leads to these services "re-storing" a derived state, which makes it harder to understand where the actual source of truth for a specific data lives.&lt;/p&gt;

&lt;p&gt;However, if you are in the process of migrating your application to NgRx, then it's fine to keep legacy stateful services as a temporary solution.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#dont-put-the-local-state-in-the-global-store"&gt;
  &lt;/a&gt;
  Don't put the local state in the global store
&lt;/h3&gt;

&lt;p&gt;The local state is tied to the lifecycle of a particular component. It is initialized and managed during the component lifetime and cleaned up when the component is destroyed.&lt;/p&gt;

&lt;p&gt;It's completely fine to store the local state in the component and manage it imperatively. However, if you're already using a reactive global state management solution such as NgRx store, then consider using a reactive solution for the local state management such as &lt;code&gt;@ngrx/component-store&lt;/code&gt;. It has many powerful features and fits perfectly with the global NgRx store.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#use-selectors-for-derived-state"&gt;
  &lt;/a&gt;
  Use selectors for derived state
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Don't put the derived state in the store, use selectors instead.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's first see the reducer that manages the state with the derived value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;musiciansReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musiciansPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// `filteredMusicians` is derived from `musicians` and `query`&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filteredMusicians&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;musicians&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;filteredMusicians&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The value of &lt;code&gt;filteredMusicians&lt;/code&gt; is derived from the &lt;code&gt;query&lt;/code&gt; and &lt;code&gt;musicians&lt;/code&gt; array. If you decide to keep the derived value in the store, then you should update it every time one of the values from which it is derived changes. The state will be larger, the reducer will contain additional logic, and you can easily forget to add filtering logic in another reducer that updates &lt;code&gt;query&lt;/code&gt; or &lt;code&gt;musicians&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The right way to handle the derived state is via selectors.&lt;/strong&gt; The selector that returns filtered musicians will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;selectFilteredMusicians&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;selectAllMusicians&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;selectMusicianQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musicians&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;musicians&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And &lt;code&gt;musiciansReducer&lt;/code&gt; will now be much simpler:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;musiciansReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musiciansPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#use-view-model-selectors"&gt;
  &lt;/a&gt;
  Use view model selectors
&lt;/h3&gt;

&lt;p&gt;View model selector combines other selectors to return all state chunks required for a particular view. It's a great way to make a container component cleaner by having a single selector per container. Besides that, view model selectors provide additional benefits.&lt;/p&gt;

&lt;p&gt;Let's first see what the container component will look like without the view model selector:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="c1"&gt;// the value of each Observable is unwrapped via `async` pipe&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
    &amp;lt;musician-search [query]="query$ | async"&amp;gt;&amp;lt;/musician-search&amp;gt;

    &amp;lt;musician-list
      [musicians]="musicians$ | async"
      [activeMusician]="activeMusician$ | async"
    &amp;gt;&amp;lt;/musician-list&amp;gt;

    &amp;lt;musician-details
      [musician]="activeMusician$ | async"
    &amp;gt;&amp;lt;/musician-details&amp;gt;
  `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MusiciansComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// select all state chunks required for the musicians container&lt;/span&gt;
  &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;musicians$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectFilteredMusicians&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;query$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectMusiciansQuery&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;activeMusician$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectActiveMusician&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are several drawbacks of this approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The size of the container component increases with the number of required state chunks.&lt;/li&gt;
&lt;li&gt;Testing is harder - there can be many selectors to mock.&lt;/li&gt;
&lt;li&gt;There are multiple subscriptions in the template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's now create a view model selector for this container:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;selectMusiciansPageViewModel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;selectFilteredMusicians&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;selectMusiciansQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;selectActiveMusician&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musicians&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;activeMusician&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;musicians&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;activeMusician&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the container now looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="c1"&gt;// single subscription in the template via `async` pipe&lt;/span&gt;
  &lt;span class="c1"&gt;// access to the view model properties via `vm` alias&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
    &amp;lt;ng-container *ngIf="vm$ | async as vm"&amp;gt;
      &amp;lt;musician-search [query]="vm.query"&amp;gt;&amp;lt;/musician-search&amp;gt;

      &amp;lt;musician-list
        [musicians]="vm.musicians"
        [activeMusician]="vm.activeMusician"
      &amp;gt;&amp;lt;/musician-list&amp;gt;

      &amp;lt;musician-details
        [musician]="vm.activeMusician"
      &amp;gt;&amp;lt;/musician-details&amp;gt;
    &amp;lt;/ng-container&amp;gt;
  `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MusiciansComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// select the view model&lt;/span&gt;
  &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;vm$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectMusiciansPageViewModel&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The component is now smaller and easier for testing. Also, there is a single subscription in the template.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#treat-actions-as-unique-events"&gt;
  &lt;/a&gt;
  Treat actions as unique events
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Treat NgRx actions as unique events, not as commands, and don't reuse them.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Commands can be fine for simple and isolated features. However, they can lead to dirty code and imply performance issues for complex functionalities that consume multiple feature states. Let's now walk through the example, to understand the importance of treating actions as unique events (a.k.a. good action hygiene).&lt;/p&gt;

&lt;p&gt;There is a straightforward NgRx flow for pages that display a list of entities:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Dispatch the action to load the entity collection on component initialization.&lt;/li&gt;
&lt;li&gt;Listen to this action in effect, load entities from the API, and return new action with loaded entities as a payload.&lt;/li&gt;
&lt;li&gt;Create a case reducer that will listen to the action returned from the effect and add loaded entities to the state.&lt;/li&gt;
&lt;li&gt;Finally, select entities from the store and display them in the template:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SongsComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// select songs from the store&lt;/span&gt;
  &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;songs$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectSongs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// dispatch the `loadSongs` action on component initialization&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Songs] Load Songs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this works fine. There is no need to change anything at first. However, what if we want to load another collection that is needed for a particular container component. In this example, imagine that we want to show the composer for each loaded song. If we treat actions as commands, then the &lt;code&gt;ngOnInit&lt;/code&gt; method of &lt;code&gt;SongsComponent&lt;/code&gt; will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Songs] Load Songs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Composers] Load Composers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we come to another very important rule: &lt;strong&gt;Don't dispatch multiple actions sequentially.&lt;/strong&gt; Sequentially dispatched actions can lead to unexpected intermediate states and cause unnecessary event loop cycles.&lt;/p&gt;

&lt;p&gt;It would be much better to dispatch single action indicating that the user has opened the songs page, and listen to that action in both &lt;code&gt;loadSongs$&lt;/code&gt; and &lt;code&gt;loadComposers$&lt;/code&gt; effects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Songs Page] Opened&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;"Songs Page" is the source of this action (it's dispatched from the songs page) and "Opened" is the name of the event (the songs page is opened).&lt;/p&gt;

&lt;p&gt;This brings us to a new rule: &lt;strong&gt;Be consistent in naming actions, use "[Source] Event" pattern.&lt;/strong&gt; Also, be descriptive in naming actions. It could help a lot in application maintenance, especially for catching bugs.&lt;/p&gt;

&lt;p&gt;If we check the Redux DevTools for this example when actions are treated as unique events, we'll see something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[Login Page] Login Form Submitted
[Auth API] User Logged in Successfully
[Songs Page] Opened
[Songs API] Songs Loaded Successfully
[Composers API] Composers Loaded Successfully
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we see a list of well-described actions, we can easily conclude what happened in our application:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The user submitted a login form.&lt;/li&gt;
&lt;li&gt;Auth API responded that the login was successful.&lt;/li&gt;
&lt;li&gt;The user opened the songs page.&lt;/li&gt;
&lt;li&gt;Songs successfully loaded from the Song API.&lt;/li&gt;
&lt;li&gt;Composers successfully loaded from the Composers API.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Unfortunately, this is not the case with commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[Auth] Login
[Auth] Login Success
[Songs] Load Songs
[Composers] Load Composers
[Songs] Load Songs Success
[Composers] Load Composers Success
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Commands can be dispatched from multiple places, so we can't figure out what their source is.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#group-actions-by-source"&gt;
  &lt;/a&gt;
  Group actions by source
&lt;/h3&gt;

&lt;p&gt;We saw in the previous example that one action can cause changes in multiple feature states. Therefore, do not group actions by feature state, but group them by source.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create action file per source.&lt;/strong&gt; Here are some examples of action files grouped by source:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// songs-page.actions.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;opened&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Songs Page] Opened&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;searchSongs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Songs Page] Search Songs Button Clicked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addComposer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Songs Page] Add Composer Form Submitted&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;composer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Composer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// songs-api.actions.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;songsLoadedSuccess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Songs API] Songs Loaded Successfully&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Song&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;songsLoadedFailure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Songs API] Failed to Load Songs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;errorMsg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// composers-api.actions.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;composerAddedSuccess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Composers API] Composer Added Successfully&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;composer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Composer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;composerAddedFailure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Composers API] Failed to Add Composer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;errorMsg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// composer-exists-guard.actions.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canActivate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Composer Exists Guard] Can Activate Entered&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;composerId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#dont-dispatch-actions-conditionally"&gt;
  &lt;/a&gt;
  Don't dispatch actions conditionally
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Don't dispatch actions conditionally based on the state value.&lt;/strong&gt; Move the condition to the effect or reducer instead. This tip also relates to good action hygiene.&lt;/p&gt;

&lt;p&gt;Let's first look at the case when an action is dispatched based on the state value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SongsComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectSongs&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// if the songs are not loaded&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// then dispatch the `loadSongs` action&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songsActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadSongs&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}),&lt;/span&gt;
      &lt;span class="nx"&gt;take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, the &lt;code&gt;loadSongs&lt;/code&gt; action is dispatched if the songs have not already been loaded. However, there is a better way to achieve the same result but to keep the component clean. We can move this condition to the effect:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;loadSongsIfNotLoaded$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// when the songs page is opened&lt;/span&gt;
    &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songsPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opened&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="c1"&gt;// then select songs from the store&lt;/span&gt;
    &lt;span class="nx"&gt;concatLatestFrom&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectSongs&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="c1"&gt;// and check if the songs are loaded&lt;/span&gt;
    &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(([,&lt;/span&gt; &lt;span class="nx"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="c1"&gt;// if not, load songs from the API&lt;/span&gt;
    &lt;span class="nx"&gt;exhaustMap&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;songsService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSongs&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;songsApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;songsLoadedSuccess&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;songs&lt;/span&gt; &lt;span class="p"&gt;})),&lt;/span&gt;
        &lt;span class="nx"&gt;catchError&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songsApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;songsLoadedFailure&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, the component will look much cleaner:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SongsComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songsPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opened&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#create-reusable-reducers"&gt;
  &lt;/a&gt;
  Create reusable reducers
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Use a single case reducer when multiple actions trigger the same state change:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;composersReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// case reducer can listen to multiple actions&lt;/span&gt;
  &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;composerExistsGuardActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canActivate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;composersPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opened&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;songsPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opened&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, if any of these actions require a different state change, don't add additional logic to the existing case reducer as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;composersReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;composerExistsGuardActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canActivate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;composersPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opened&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;songsPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opened&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="c1"&gt;// `composerExistsGuardActions.canActivate` action requires&lt;/span&gt;
      &lt;span class="c1"&gt;// different state change&lt;/span&gt;
      &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;composerExistsGuardActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canActivate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entities&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;composerId&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead, create a new case reducer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;composersReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;composersPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opened&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;songsPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opened&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="c1"&gt;// `composerExistsGuardActions.canActivate` action is moved&lt;/span&gt;
  &lt;span class="c1"&gt;// to a new case reducer&lt;/span&gt;
  &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;composerExistsGuardActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canActivate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;composerId&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entities&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;composerId&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#be-careful-with-facades"&gt;
  &lt;/a&gt;
  Be careful with facades
&lt;/h3&gt;

&lt;p&gt;I used facades as NgRx store wrappers before, but I stopped, and here are several reasons why:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the Redux pattern is not your cup of tea and you have a need to wrap it in services, then you should take a look at service-based state management solutions such as Akita or NGXS (or use &lt;code&gt;@ngrx/component-store&lt;/code&gt; for the global state as well).&lt;/li&gt;
&lt;li&gt;Using facades doesn't make much sense when view model selectors are used and when good action hygiene is applied. You will have an extra layer for testing and maintenance, without any benefit.&lt;/li&gt;
&lt;li&gt;Without strict rules in the coding guide, facades leave plenty of space for abuse (e.g. performing side effects).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, if a container component has a local state but also uses a global state, then consider using the ComponentStore as a dedicated facade for that container. In that case, ComponentStore will manage the local state, but will also select global state slices and/or dispatch actions to the global store.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#effects-tips"&gt;
  &lt;/a&gt;
  Effects Tips
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#name-effects-like-functions"&gt;
  &lt;/a&gt;
  Name effects like functions
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Name the effects based on what they are doing, not based on the action they are listening to.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If we name the effect based on the action it listens to, it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// the name of the effect is the same as the action it listens to&lt;/span&gt;
&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;addComposerSuccess$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;composersApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;composerAddedSuccess&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Composer saved successfully!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are at least two drawbacks of this approach. The first is that we cannot conclude what this effect does based on its name. The second is that it is not in accordance with open-closed principle - if we want to trigger the same effect for another action, we should change its name. However, if we name this effect as a function (&lt;code&gt;showSaveComposerSuccessAlert&lt;/code&gt;), the previously mentioned drawbacks will be solved.&lt;/p&gt;

&lt;p&gt;For example, if we want to display the same success alert when the composer is successfully updated, we only need to pass the &lt;code&gt;composerUpdatedSuccess&lt;/code&gt; action to the &lt;code&gt;ofType&lt;/code&gt; operator, without having to change the effect name:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// the effect name describes what the effect does&lt;/span&gt;
&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;showSaveComposerSuccessAlert$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;composersApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;composerAddedSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;// new action is added here&lt;/span&gt;
        &lt;span class="c1"&gt;// the rest of the effect remains the same&lt;/span&gt;
        &lt;span class="nx"&gt;composersApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;composerUpdatedSuccess&lt;/span&gt;
      &lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Composer saved successfully!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#keep-effects-simple"&gt;
  &lt;/a&gt;
  Keep effects simple
&lt;/h3&gt;

&lt;p&gt;There are cases when we need to invoke multiple API calls to perform a side effect, or when the format of API response is not appropriate, so we need to restructure it. However, putting all that logic into the NgRx effect can lead to very unreadable code.&lt;/p&gt;

&lt;p&gt;Here is an example of an effect that requires two API calls to get all the necessary data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;loadMusician$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// when the musician details page is opened&lt;/span&gt;
    &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musicianDetailsPage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opened&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="c1"&gt;// then select musician id from the route&lt;/span&gt;
    &lt;span class="nx"&gt;concatLatestFrom&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectMusicianIdFromRoute&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;concatMap&lt;/span&gt;&lt;span class="p"&gt;(([,&lt;/span&gt; &lt;span class="nx"&gt;musicianId&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// and load musician from the API&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;musiciansResource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMusician&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musicianId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="c1"&gt;// wait for musician to load&lt;/span&gt;
        &lt;span class="nx"&gt;mergeMap&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;musician&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// then load band from the API&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bandsResource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musician&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bandId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="c1"&gt;// append band name to the musician&lt;/span&gt;
            &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;band&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;musician&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;bandName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;band&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
          &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="c1"&gt;// if the musician is successfully loaded&lt;/span&gt;
        &lt;span class="c1"&gt;// then return success action and pass musician as a payload&lt;/span&gt;
        &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;musician&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;musiciansApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;musicianLoadedSuccess&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;musician&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="c1"&gt;// if an error occurs, then return error action&lt;/span&gt;
        &lt;span class="nx"&gt;catchError&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musiciansApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;musicianLoadedFailure&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is large and unreadable effect, even with comments. However, we can move API calls to the service and make the effect more readable. The service method for getting the musician will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MusiciansService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;getMusician&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musicianId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Musician&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;musiciansResource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMusician&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musicianId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;mergeMap&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;musician&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bandsResource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musician&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bandId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;band&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;musician&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;bandName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;band&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It can be used from the &lt;code&gt;loadMusician$&lt;/code&gt; effect, but also from other parts of the application. The &lt;code&gt;loadMusician$&lt;/code&gt; effect now looks much more readable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;loadMusician$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musicianDetailsPage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opened&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;concatLatestFrom&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectMusicianIdFromRoute&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;concatMap&lt;/span&gt;&lt;span class="p"&gt;(([,&lt;/span&gt; &lt;span class="nx"&gt;musicianId&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// API calls are moved to the `getMusician` method&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;musiciansService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMusician&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musicianId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;musician&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;musiciansApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;musicianLoadedSuccess&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;musician&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;catchError&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musiciansApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;musicianLoadedFailure&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're working with legacy APIs, you're probably having trouble with an API that doesn't return responses in the format your application needs, so you need to convert them. Apply the same principle described above: move the API call along with the mapping logic to the service method and use it from the effect.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#dont-create-boiler-effects"&gt;
  &lt;/a&gt;
  Don't create "boiler" effects
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Don't create effects that map multiple related actions into a single action:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// this effect returns the `loadMusicians` action&lt;/span&gt;
&lt;span class="c1"&gt;// when current page or page size is changed&lt;/span&gt;
&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;invokeLoadMusicians$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;musiciansPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;changeCurrentPage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;musiciansPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;changePageSize&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;musiciansActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadMusicians&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// this effect loads musicians from the API&lt;/span&gt;
&lt;span class="c1"&gt;// when the `loadMusicians` action is dispatched&lt;/span&gt;
&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;loadMusicians$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musiciansAction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadMusicians&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;concatLatestFrom&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectMusiciansPagination&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;switchMap&lt;/span&gt;&lt;span class="p"&gt;(([,&lt;/span&gt; &lt;span class="nx"&gt;pagination&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;musiciansService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMusicians&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pagination&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="cm"&gt;/* ... */&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt; 
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because the &lt;code&gt;ofType&lt;/code&gt; operator can accept a sequence of actions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;loadMusicians$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// `ofType` accepts a sequence of actions&lt;/span&gt;
    &lt;span class="c1"&gt;// and there is no need for "boiler" effects (and actions)&lt;/span&gt;
    &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;musiciansPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;changeCurrentPage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;musiciansPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;changePageSize&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;concatLatestFrom&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectMusiciansPagination&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;switchMap&lt;/span&gt;&lt;span class="p"&gt;(([,&lt;/span&gt; &lt;span class="nx"&gt;pagination&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;musiciansService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMusicians&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pagination&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="cm"&gt;/* ... */&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt; 
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#apply-single-responsibility-principle"&gt;
  &lt;/a&gt;
  Apply single responsibility principle
&lt;/h3&gt;

&lt;p&gt;In other words, &lt;strong&gt;don't perform multiple side effects within a single NgRx effect.&lt;/strong&gt; Effects with single responsibility are more readable and easier to maintain.&lt;/p&gt;

&lt;p&gt;Let's first see the NgRx effect that preforms two side effects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;deleteSong$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songsPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteSong&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;concatMap&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;songId&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// side effect 1: delete the song&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;songsService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteSong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;songsApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;songDeletedSuccess&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;songId&lt;/span&gt; &lt;span class="p"&gt;})),&lt;/span&gt;
        &lt;span class="nx"&gt;catchError&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// side effect 2: display an error alert in case of failure&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songsApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;songDeletedFailure&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we apply the single responsibility principle, we'll have two NgRx effects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// effect 1: delete the song&lt;/span&gt;
&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;deleteSong$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songsPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteSong&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;concatMap&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;songId&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;songsService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteSong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;songsApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;songDeletedSuccess&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;songId&lt;/span&gt; &lt;span class="p"&gt;})),&lt;/span&gt;
        &lt;span class="nx"&gt;catchError&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songsApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;songDeletedFailure&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// effect 2: show an error alert&lt;/span&gt;
&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;showErrorAlert$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songsApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteSongFailure&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here is another advantage: &lt;strong&gt;Effects with single responsibility are reusable.&lt;/strong&gt; We can use the &lt;code&gt;showErrorAlert$&lt;/code&gt; effect for any action that requires an error alert to be shown.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#apply-good-action-hygiene"&gt;
  &lt;/a&gt;
  Apply good action hygiene
&lt;/h3&gt;

&lt;p&gt;The same principles described for actions that are dispatched via store should be applied to the effects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don't return an array of actions (commands) from the effect.&lt;/li&gt;
&lt;li&gt;Return an unique action that can be handled by multiple reducers and/or effects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's first see an example where multiple actions are returned from the effect:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;loadAlbum$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;albumsActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadCurrentAlbum&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;concatLatestFrom&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectAlbumIdFromRoute&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="nx"&gt;concatMap&lt;/span&gt;&lt;span class="p"&gt;(([,&lt;/span&gt; &lt;span class="nx"&gt;albumId&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;albumsService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAlbum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;albumId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="c1"&gt;// an array of actions is returned on successful load&lt;/span&gt;
        &lt;span class="c1"&gt;// then, `loadSongsSuccess` is handled by `songsReducer`&lt;/span&gt;
        &lt;span class="c1"&gt;// and `loadComposersSuccess` is handled by `composersReducer`&lt;/span&gt;
        &lt;span class="nx"&gt;mergeMap&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;composers&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="nx"&gt;songsActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadSongsSuccess&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;songs&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
          &lt;span class="nx"&gt;composersActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadComposersSuccess&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;composers&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="p"&gt;]),&lt;/span&gt;
        &lt;span class="nx"&gt;catchError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have seen similar effects many times. This happens when actions are treated as commands. You can see the drawbacks of this approach in the &lt;a href="#treat-actions-as-unique-events"&gt;Treat actions as unique events&lt;/a&gt; section.&lt;/p&gt;

&lt;p&gt;However, if we apply good action hygiene, the &lt;code&gt;loadAlbum$&lt;/code&gt; effect will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;loadAlbum$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// when the album details page is opened&lt;/span&gt;
    &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;albumDetailsPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opened&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="c1"&gt;// then select album id from the route&lt;/span&gt;
    &lt;span class="nx"&gt;concatLatestFrom&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectAlbumIdFromRoute&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="nx"&gt;concatMap&lt;/span&gt;&lt;span class="p"&gt;(([,&lt;/span&gt; &lt;span class="nx"&gt;albumId&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// and load current album from the API&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;albumsService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAlbum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;albumId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="c1"&gt;// return unique action when album is loaded successfully&lt;/span&gt;
        &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;composers&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;albumsApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;albumLoadedSuccess&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;composers&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;catchError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, the &lt;code&gt;albumLoadedSuccess&lt;/code&gt; action can be handled by the reducer(s) and/or other effects. In this example, it will be handled by &lt;code&gt;songsReducer&lt;/code&gt; and &lt;code&gt;composersReducer&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// songs.reducer.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;songsReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;albumsApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;albumLoadedSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;songs&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}))&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// composers.reducer.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;composersReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;albumsApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;albumLoadedSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;composers&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;composers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}))&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;NgRx provides the ability to implement the same functionality in many different ways. However, some of the ways have emerged over time as best practices and you should consider applying them in your project to increase code quality, performance, and maintainability.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/JmnsEvoy-gY"&gt;Good Action Hygiene with NgRx&lt;/a&gt; by Mike Ryan&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/v5WSUE1_YHM?t=129"&gt;Rethinking State in Angular Applications&lt;/a&gt; by Alex Okrushko&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/RXuSDiLmcN0"&gt;Building Sub States with NgRx Selectors&lt;/a&gt; by Brandon Roberts&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://brandonroberts.dev/blog/posts/2020-12-14-maximizing-simplifying-component-views-ngrx-selectors"&gt;Maximizing and Simplifying Component Views with NgRx Selectors&lt;/a&gt; by Brandon Roberts&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://timdeschryver.dev/blog/solving-angular-slow-renders-with-ngrx-selectors"&gt;Solving Angular Slow Renders with NgRx Selectors&lt;/a&gt; by Tim Deschryver&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://timdeschryver.dev/blog/start-using-ngrx-effects-for-this"&gt;Start Using NgRx Effects for This&lt;/a&gt; by Tim Deschryver&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#peer-reviewers"&gt;
  &lt;/a&gt;
  Peer Reviewers
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/AlexOkrushko"&gt;Alex Okrushko&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/tim_deschryver"&gt;Tim Deschryver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/brandontroberts"&gt;Brandon Roberts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Big thanks to my teammates Brandon, Tim, and Alex for giving me helpful suggestions on this article!&lt;/p&gt;

</description>
      <category>angular</category>
      <category>ngrx</category>
      <category>rxjs</category>
      <category>redux</category>
    </item>
    <item>
      <title>Building Apps With Bubble.io</title>
      <author>Linda Sebastian</author>
      <pubDate>Wed, 10 Nov 2021 10:50:19 +0000</pubDate>
      <link>https://dev.to/rocklinda/building-apps-with-bubbleio-289e</link>
      <guid>https://dev.to/rocklinda/building-apps-with-bubbleio-289e</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2PFtZ2z5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fdsrrz7h4tdycrquz9nq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2PFtZ2z5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fdsrrz7h4tdycrquz9nq.png" alt="low code icon" width="880" height="165"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to build an app but don't have any skills for coding or maybe you just know little, I think bubble.io is one of the answers. Bubble.io is one of the low-code development platforms, this amazing tool allows you to create a website application with just a few steps.&lt;/p&gt;

&lt;p&gt;You can go to the website [&lt;a href="https://bubble.io/welcome"&gt;https://bubble.io/welcome&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;Bubble Also provides you step by step how to use this platform, for websites and mobile web.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LJl-Lp7i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uf4xois350n18ljeli3a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LJl-Lp7i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uf4xois350n18ljeli3a.png" alt="Bubble lesson" width="880" height="405"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bubble Pricing is cheaper compared to other platforms.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JulxHSHa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8idkdjpkgpyrdwavwthe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JulxHSHa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8idkdjpkgpyrdwavwthe.png" alt="Bubble pricing" width="880" height="289"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Even though bubble.io is a great platform but there is some concerns about scalability, speed performance, and security. I have my list of pros and cons about this platform.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Very easy just drag and drop&lt;/li&gt;
&lt;li&gt;Building apps faster compare than traditional hand-coding&lt;/li&gt;
&lt;li&gt;There are s many free plugins that you can use&lt;/li&gt;
&lt;li&gt;You don't have to set up a server or hosting&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Speed performance is not so good&lt;/li&gt;
&lt;li&gt;I'm not sure if bubble.io can handle such complex logic&lt;/li&gt;
&lt;li&gt;There's no versioning! If you did something wrong in production there's no going back.&lt;/li&gt;
&lt;li&gt;Scalability. The capacity limit for production planning is just 50 GB.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I think that's my impression of bubble.io. Cheers!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>Why Chatwoot is My Favorite Open Source Project? Integrations, Integrations, and Integrations.</title>
      <author>Mohmed Ishak</author>
      <pubDate>Wed, 10 Nov 2021 10:44:57 +0000</pubDate>
      <link>https://dev.to/ishakmohmed/why-chatwoot-is-my-favorite-open-source-project-integrations-integrations-and-integrations-4b81</link>
      <guid>https://dev.to/ishakmohmed/why-chatwoot-is-my-favorite-open-source-project-integrations-integrations-and-integrations-4b81</guid>
      <description>&lt;p&gt;&lt;a href="https://aviyel.com/post/1328/why-chatwoot-is-my-favorite-open-source-project-integrations-integrations-and-integrations"&gt;Full article available on Aviyel for free (leave a like here before you check it out on Aviyel)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you’re a business owner or you work in a large team, you’ll probably be overwhelmed by the number of messages that you receive from customers via mail, Telegram, Twitter, Facebook (recently rebranded to Meta) Messenger, and so on. &lt;a href="https://aviyel.com/post/184/the-ultimate-open-source-alternative-to-manage-customer-engagement-chatwoot-is-here"&gt;Chatwoot&lt;/a&gt; solves this problem by &lt;a href="https://aviyel.com/post/802/how-to-integrate-facebook-whatsapp-and-slack-into-your-customer-engagement-platform"&gt;integrating all your social media platforms&lt;/a&gt; into a single dashboard so you can connect with your customers from one app. It is an open-source project so you can be assured with engineers working 24/7 to improve this product from all over the world. Moreover, the live chat feature allows your agents to communicate with the customers instantly, leaving no chance for user dissatisfaction.&lt;/p&gt;

&lt;p&gt;Plus, it ensures that all customers from all different types of social media would not be neglected. This is important because the success of a business in my opinion starts with you taking care of the customer and working backward.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You never build fancy software without knowing whether the customers need it first.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this post, I’ll take you through Chatwoot’s architecture and how you can integrate the self-hosting &lt;a href="https://aviyel.com/post/751/beginning-with-chatwoot-an-open-source-customer-engagement-platform"&gt;customer engagement platform&lt;/a&gt; with your social media channels.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#chatwoot-architecture"&gt;
  &lt;/a&gt;
  Chatwoot Architecture
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xYJ26Lxw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipexwqsgguca3y9g7007.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xYJ26Lxw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipexwqsgguca3y9g7007.png" alt="Mohmed Ishak" width="760" height="428"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To know more, you may refer to the &lt;a href="https://www.chatwoot.com/docs/self-hosted/deployment/architecture"&gt;architecture written in official docs&lt;/a&gt;. To run Chatwoot in production (means to deploy it live for public use), you need these components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chatwoot web servers (built using Ruby or Node.js)&lt;/li&gt;
&lt;li&gt;Chatwoot workers (such as Sidekiq for Ruby)&lt;/li&gt;
&lt;li&gt;PostgreSQL database&lt;/li&gt;
&lt;li&gt;Email service (such as SendGrid by Twilio)&lt;/li&gt;
&lt;li&gt;Object storage (such as AWS S3)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have got these parts in your application (which might look complicated in my article but I can assure you it’s not), Chatwoot will do its magic and allow you to seamlessly interact with a whole lot of customers effortlessly. There are two recommended methods for deploying Chatwoot which I don’t want to write here because they’re documented clearly in the official docs, and they are using &lt;a href="https://www.chatwoot.com/docs/self-hosted/deployment/heroku"&gt;Heroku&lt;/a&gt; or &lt;a href="https://www.chatwoot.com/docs/self-hosted/deployment/caprover"&gt;Caprover&lt;/a&gt;. You can also use &lt;a href="https://www.chatwoot.com/docs/self-hosted/deployment/docker"&gt;Docker&lt;/a&gt; which may get slightly complicated for beginners, but if you are a little friendly towards docker-compose and Nginx, you’re good to go.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-choose-chatwoot"&gt;
  &lt;/a&gt;
  Why Choose Chatwoot?
&lt;/h3&gt;

&lt;p&gt;Chatwoot doesn’t have any bloatware features, but only the ones you need. Here are some of the features of Chatwoot that bought me in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Integrations with platforms that businesses really use in 2021 include &lt;a href="https://aviyel.com/post/264/how-to-integrate-chatwoot-with-slack-rasa-dialogflow-and-deploy-on-facebook-whatsapp-or-twilio"&gt;Slack, Dialogflow, Calendly,&lt;/a&gt; Shopify, WooCommerce, WordPress, Stripe, FullContact, and so on.&lt;/li&gt;
&lt;li&gt;Create &lt;a href="https://www.chatwoot.com/docs/product/features/campaigns"&gt;campaigns&lt;/a&gt;: That means when you have a lot of contacts (customers) saved, you can select a list of users and send a one-time message such as festive greetings, promotions, etc. On the other hand, you can also create ongoing campaigns where Chatwoot would take a much personalized approach where you can send a certain message if a user stayed on your page for x minutes (and there’s a lot of variations of conditions you can create) by just clicking a couple of buttons in the simple UI.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kdecxzF1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99q1gxcopdzc9s2st3x6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kdecxzF1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99q1gxcopdzc9s2st3x6.png" alt="Mohmed Ishak" width="760" height="389"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.chatwoot.com/docs/user-guide/features/canned-responses"&gt;Canned responses&lt;/a&gt;: Basically, you don’t want to manually type out the repetitive responses to your customers. So you can set type ‘/’ followed by a shortcode which you will set such as “greet” to automatically fill the input box with the long greeting message.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.chatwoot.com/docs/product/others/interactive-messages"&gt;Interactive messages&lt;/a&gt;: With this, your customers wouldn’t only get text messages but also interactive ones where they can make selections, order a product, and so on in the chatbox itself.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D2b8jZd4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/meq1ij2lw9cjruad1f9r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D2b8jZd4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/meq1ij2lw9cjruad1f9r.png" alt="Mohmed Ishak" width="760" height="734"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;And a lot of other features like managing contacts easily, conversation workflow (users say something like ‘hi’ and a certain reply is given and the conversation is carried in this manner without you having to answer them), &lt;a href="https://aviyel.com/post/399/try-chatwoot-an-open-source-customer-engagement-suite-to-set-up-multilingual-live-chat-support"&gt;multilingual support&lt;/a&gt;, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#integrations-in-chatwoot"&gt;
  &lt;/a&gt;
  Integrations in Chatwoot
&lt;/h3&gt;

&lt;p&gt;First, let me show you how to integrate all your social media to Chatwoot’s powerful dashboard.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, register to Chatwoot &lt;a href="https://app.chatwoot.com/app/auth/signup"&gt;here&lt;/a&gt;. I believe there’s no need for me to explain this step-by-step as it could bore you (and I’m sure you would know how to register). You can also &lt;a href="https://aviyel.com/post/801/how-to-contribute-to-chatwoot-on-github"&gt;contribute to Chatwoot on Github&lt;/a&gt; easily.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oBHKon33--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zowtzzhhwkrsxkkdzg41.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oBHKon33--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zowtzzhhwkrsxkkdzg41.png" alt="Mohmed Ishak" width="760" height="427"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Upon registration, you will see your dashboard. If this dashboard looks complicated, trust me, this looks very clean compared to other alternatives to Chatwoot. Click “Inboxes” in the column to your left and then click “Integrations”.&lt;/li&gt;
&lt;li&gt;You’ll see options(s) such as Slack integrations and so on. As of writing this article, I only saw the Slack option being displayed as the other platforms are set to be integrated in the near future. If you want to integrate your Slack account, click connect for the Slack option. You can also use &lt;a href="https://aviyel.com/post/323/use-chatwoot-to-set-up-a-chatbot-with-rasa-and-dialogflow"&gt;Chatwoot with Rasa&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Enter your Slack URL in the displayed form, grant the required permission, and that’s it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/d4gwpPJGXtc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;With this, you can sync your Slack messages with Chatwoot in its dashboard. To connect with WhatsApp, Twitter, or other social platforms, you should click the same &lt;strong&gt;“Inboxes”&lt;/strong&gt; button like in the previous step and then click &lt;strong&gt;“Add Inbox”&lt;/strong&gt;. The rest of the steps are easy, just provide the information that is asked. For instance, if you select WhatsApp, you need to provide your phone number, Twilio Account SID, and a little more data and you’re good to go.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-chatwoot-to-your-system"&gt;
  &lt;/a&gt;
  Installing Chatwoot to Your System
&lt;/h3&gt;

&lt;p&gt;Now, I’ll explain how to install &lt;a href="https://aviyel.com/post/263/chatwoot-with-next-js"&gt;Chatwoot using Next.js&lt;/a&gt; because I believe that Next.js is most likely to be used by companies in 2021 to build websites as it has a bunch of powerful features such out of the box as code-splitting, server-side rendering, image optimization, etc.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Anyway, just like previous instructions that I’ve written in this article, click the same “Inboxes” button in the left column on your Chatwoot app and click “Add Inbox”. Then click “Website” because you want to integrate Chatwoot to your site.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rvKvAedK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqgjma6ye38q73l2rm8d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rvKvAedK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqgjma6ye38q73l2rm8d.png" alt="Mohmed Ishak" width="760" height="427"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fill up the necessary details such as your website URL, and so on. At the end of the step, you’ll be given a short script based on the information you’ve given like the following image. Refer to this &lt;a href="https://aviyel.com/post/263/chatwoot-with-next-js"&gt;source&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YDlcx_Mw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/040pur21afnjcurcmzuo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YDlcx_Mw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/040pur21afnjcurcmzuo.png" alt="Mohmed Ishak" width="760" height="417"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Remember the script Chatwoot gave you? In your project folder, add a file named chatwoot.js or whatever you want to call and paste the script (without script tag because we’re using Next.js, not vanilla JavaScript).&lt;/li&gt;
&lt;li&gt;Go to index.js file and add the script. Here’s a simple template.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Script&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/script&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;​​&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;​​&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="err"&gt;​​ &lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;​​ &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="nx"&gt;All&lt;/span&gt; &lt;span class="nx"&gt;implementation&lt;/span&gt; &lt;span class="nx"&gt;stay&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;usual&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;but&lt;/span&gt; &lt;span class="nx"&gt;just&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;script&lt;/span&gt; 
         &lt;span class="nx"&gt;below&lt;/span&gt;
       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
​​ &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/chatwoot.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;​​ &lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
​​&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;​​&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;​​&lt;/span&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Done. You’ll see a clickable blue button at the bottom right of your site which will pull up Chatwoot’s chat box and Chatwoot will be up and running in no time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ETh0yFTI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxlnw6jrbddqdlthluzh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ETh0yFTI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxlnw6jrbddqdlthluzh.png" alt="Mohmed Ishak" width="399" height="638"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s all for today. As you can see, Chatwoot is very powerful and convenient to use. Even if you don’t need this tool right now, do remember it as you’ll surely need it in the future when you build bigger projects or work in a larger team. If you find this article useful, drop a like and share this with your friends and the tech community that you’re in.&lt;/p&gt;

&lt;p&gt;Also, Aviyel is partnering with Chatwoot to scale open source projects within communities. You can checkout &lt;a href="https://aviyel.com/discussions"&gt;Aviyel discussions&lt;/a&gt; and follow their &lt;a href="https://twitter.com/aviyelhq?lang=en"&gt;Twitter&lt;/a&gt; space.&lt;/p&gt;

</description>
      <category>chatwoot</category>
      <category>react</category>
      <category>nextjs</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Build a Machine Learning API With Django Rest Framework: </title>
      <author>paulsaul621</author>
      <pubDate>Wed, 10 Nov 2021 10:40:24 +0000</pubDate>
      <link>https://dev.to/paulwababu/build-a-machine-learning-api-with-django-rest-framework-1fb</link>
      <guid>https://dev.to/paulwababu/build-a-machine-learning-api-with-django-rest-framework-1fb</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Finding the proper treatment, especially drug treatment, can be a difficult task. Whether you're looking for drugs to treat seasonal allergies, or you're treating a serious illness, collecting data on various aspects of patients and what treatments they best respond to can be vital for saving lives and increasing patient convenience. Here, we'll act as a data analyst compiling medical data on a set of patients all suffering from the same illness. During their treatment, each patient responded to one of five drug treatments&lt;/p&gt;

&lt;p&gt;In this article, we'll:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build a simple Decision Tree model to predict Drug Treatment with relatively high accuracy.&lt;/li&gt;
&lt;li&gt;Create an API with &lt;a href="https://www.django-rest-framework.org/"&gt;Django Rest Framework&lt;/a&gt; that will be used to consume the Decision Tree Model created.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#build-a-model"&gt;
  &lt;/a&gt;
  Build a Model
&lt;/h2&gt;

&lt;p&gt;Let us start by building and saving a machine learning model that will be later used to make predictions for our API.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dataset"&gt;
  &lt;/a&gt;
  Dataset
&lt;/h3&gt;

&lt;p&gt;Find the dataset for this model on my &lt;a href="https://raw.githubusercontent.com/paulwababu/datasets/main/drug200.csv"&gt;Github repo&lt;/a&gt;. The file is a CSV with data from different patients who received treatment for the same disease. The different drugs can be drugA, drugB, drugC, drugX, or drugY.&lt;/p&gt;

&lt;p&gt;Let’s get started with the exploration of the dataset.&lt;/p&gt;

&lt;p&gt;The first thing that should be done is to import dependencies. If you do not have the libraries installed, kindly do so before proceeding.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import pandas
from sklearn import tree
import pydotplus
from sklearn.tree import DecisionTreeClassifier
import matplotlib.pyplot as plt
import matplotlib.image as pltimg
from sklearn.metrics import classification_report, plot_confusion_matrix, plot_roc_curve
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import joblib
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we load the dataset using pandas:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;df = pandas.read_csv("https://raw.githubusercontent.com/paulwababu/datasets/main/drug200.csv")
print(df.head())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   Age Sex      BP Cholesterol  Na_to_K   Drug
0   23   F    HIGH        HIGH   25.355  drugY
1   47   M     LOW        HIGH   13.093  drugC
2   47   M     LOW        HIGH   10.114  drugC
3   28   F  NORMAL        HIGH    7.798  drugX
4   61   F     LOW        HIGH   18.043  drugY
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To make a decision tree, all data has to be numerical.&lt;/p&gt;

&lt;p&gt;We have to convert the non-numerical columns 'Gender', 'Cholesterol', and 'BP' into numerical values.&lt;/p&gt;

&lt;p&gt;Pandas have a map() method that takes a dictionary with information on how to convert the values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#Change string values into numerical values:
d = {'M': 1, 'F': 0}
df['Sex'] = df['Sex'].map(d)

d = {'HIGH': 0, 'LOW': 1, 'NORMAL': 2}
df['BP'] = df['BP'].map(d)

d = {'HIGH': 0, 'LOW': 1, 'NORMAL': 2}
df['Cholesterol'] = df['Cholesterol'].map(d)
print(df.head())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   Age  Sex  BP  Cholesterol  Na_to_K   Drug
0   23    0   0            0   25.355  drugY
1   47    1   1            0   13.093  drugC
2   47    1   1            0   10.114  drugC
3   28    0   2            0    7.798  drugX
4   61    0   1            0   18.043  drugY
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we have to separate the feature columns(independent variables) from the target column(dependent variable).&lt;/p&gt;

&lt;p&gt;The feature columns are the columns that we try to predict from, and the target column is the column with the values we try to predict.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#independent variables
features = ['Age', 'Sex', 'BP', 'Cholesterol', 'Na_to_K']
X = df[features]

#dependent variable
y = df['Drug']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;     Age  Sex  BP  Cholesterol  Na_to_K
0     23    0   0            0   25.355
1     47    1   1            0   13.093
2     47    1   1            0   10.114
3     28    0   2            0    7.798
4     61    0   1            0   18.043
..   ...  ...  ..          ...      ...
195   56    0   1            0   11.567
196   16    1   1            0   12.006
197   52    1   2            0    9.894
198   23    1   2            2   14.020
199   40    0   1            2   11.349

[200 rows x 5 columns]
0      drugY
1      drugC
2      drugC
3      drugX
4      drugY
       ...  
195    drugC
196    drugC
197    drugX
198    drugX
199    drugX
Name: Drug, Length: 200, dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can create the actual decision tree, fit it with our details, and save a .png file on the computer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dtree = DecisionTreeClassifier()
dtree = dtree.fit(X, y)
data = tree.export_graphviz(dtree, out_file=None, feature_names=features)
graph = pydotplus.graph_from_dot_data(data)
graph.write_png('mydecisiontree2.png')

img=pltimg.imread('mydecisiontree2.png')
imgplot = plt.imshow(img)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#results-explained"&gt;
  &lt;/a&gt;
  Results Explained
&lt;/h2&gt;

&lt;p&gt;The decision tree uses your earlier decisions. Let us read the different aspects of the decision tree:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2nN8AEls--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636529767060/1QVk4HHoK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2nN8AEls--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636529767060/1QVk4HHoK.png" alt="mydecisiontree2.png" width="847" height="636"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#salt-to-potassium-ratio-natok"&gt;
  &lt;/a&gt;
  Salt to Potassium ratio (Na_to_K)
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Na_to_K &amp;lt;= 14.829&lt;/strong&gt; means that every patient with a sodium-potassium of 14.829 or lower will follow the True arrow (to the left), and the rest will follow the False arrow (to the right).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;gini = 0.694&lt;/strong&gt; refers to the quality of the split, where 0.0 would mean all of the samples got the same result, and 0.5 would mean that the split is done exactly in the middle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;samples = 200&lt;/strong&gt; means that there are 200 patients left at this point in the decision, which is all of them since this is the first step.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;value = [23, 16, 16, 54, 91]&lt;/strong&gt; means that of these 200 patients, 23 will get "drugY", 16 will get "drugB", 16 will get "drugC", 54 will get "drugX" and 91 will get "drugY",&lt;/p&gt;

&lt;p&gt;Note, to know these values, we ran:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print(df['Drug'].value_counts())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;drugY    91
drugX    54
drugA    23
drugB    16
drugC    16
Name: Drug, dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#predict-values"&gt;
  &lt;/a&gt;
  Predict Values
&lt;/h2&gt;

&lt;p&gt;We can use the Decision Tree to predict new values.&lt;/p&gt;

&lt;p&gt;Example: What prescription(among the five drugs: Y X A B and C) should a 68-year-old female with normal levels of cholesterol and BP and has salt to potassium level of 27.10 take?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print(dtree.predict([[68, 0, 2, 2, 27.10]]))
# ['drugY'] will be the output
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The system predicts drugY. If you follow the decision tree implemented above, you will arrive at drugY to! Sorry I cannot explain every aspect of the decision tree, its quite lengthy and is not within the scope of this tutorial. Let us now proceed to saving the model built&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Save the model
joblib_file = "DecisionTreeModel.joblib"
joblib.dump(dtree, joblib_file) 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can start the Django section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-an-api-with-django-rest-framework"&gt;
  &lt;/a&gt;
  Create an API With Django Rest Framework
&lt;/h2&gt;

&lt;p&gt;Following Python best practices, we will create a virtual environment for our project, and install the required packages.&lt;/p&gt;

&lt;p&gt;First, create the project directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir djangoapp
$ cd djangoapp

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, create a virtual environment and install the required packages.&lt;/p&gt;

&lt;p&gt;For macOS and Unix systems:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ python3 -m venv myenv
$ source myenv/bin/activate
(myenv) $ pip install django requests djangorestframework numpy joblib scikit-learn

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For Windows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ python3 -m venv myenv
$ myenv\Scripts\activate
(myenv) $ pip install django requests djangorestframework numpy joblib scikit-learn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-your-django-application"&gt;
  &lt;/a&gt;
  Setting Up Your Django Application
&lt;/h2&gt;

&lt;p&gt;First, navigate to the directory djangoapp we created and establish a Django project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(myenv) $ django-admin startproject mainapp

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will auto-generate some files for your project skeleton:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mainapp/
    manage.py
    mainapp/
        __init__.py
        settings.py
        urls.py
        asgi.py
        wsgi.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, navigate to the directory you just created (make sure you are in the same directory as manage.py) and create your app directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(myenv) $ python manage.py startapp monitor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;monitor/
    __init__.py
    admin.py
    apps.py
    migrations/
        __init__.py
    models.py
    tests.py
    views.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the mainapp/settings.py file, look for the following line and add the app we just created above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',#new line
    'monitor', #new line
]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ensure you are in the monitor directory then create a new directory called templates and a new file called urls.py. Your directory structure of monitor application should look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;monitor/
    __init__.py
    admin.py
    apps.py
    migrations/
    templates/
        __init__.py
    models.py
    tests.py
    urls.py
    views.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ensure your mainapp/urls.py file, add our monitor app URL to include the URLs we shall create next on the monitor app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    #path('admin/', admin.site.urls),
    path('', include('monitor.urls')),#monitor app url
]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, on the monitor/urls.py file, add our website there:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.urls import path
from .views import *

urlpatterns = [
    path('', Prediction.as_view(), name = 'prediction'),
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s create another directory to store our machine learning model. I’ll also add the dataset to the project for those who want to achieve the whole dataset. (It is not compulsory to create a data folder.)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(venv)$ mkdir ml
(venv)$ mkdir ml/models
(venv)$ mkdir ml/data
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also need to tell Django where our machine learning model is located. Add these lines to settings.py file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import os
MODELS = os.path.join(BASE_DIR, 'ml/models')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#load-model-through-appspy"&gt;
  &lt;/a&gt;
  Load Model through apps.py
&lt;/h2&gt;

&lt;p&gt;Load your machine learning models in apps.py so that when the application starts, the trained model is loaded only once. Otherwise, the trained model is loaded each time an endpoint is called, and then the response time will be slower. &lt;/p&gt;

&lt;p&gt;Let’s update apps.py&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import os
import joblib
from django.apps import AppConfig
from django.conf import settings


class ApiConfig(AppConfig):
    name = 'api'
    MODEL_FILE = os.path.join(settings.MODELS, "DecisionTreeModel.joblib")
    model = joblib.load(MODEL_FILE)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#edit-viewspy"&gt;
  &lt;/a&gt;
  Edit views.py
&lt;/h2&gt;

&lt;p&gt;The last step is to update views.py. The views will be mainly responsible for two tasks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Process incoming POST requests.&lt;/li&gt;
&lt;li&gt;Make a prediction with the incoming data and give the result as a Response.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import numpy as np
import pandas as pd
from .apps import *
from rest_framework.views import APIView
from rest_framework.response import Response


class Prediction(APIView):
    def post(self, request):
        #data = request.data
        age= request.GET.get('age')
        gender = request.GET.get('gender')
        bp = request.GET.get('bp')
        cholesterol = request.GET.get('cholesterol')
        salt = request.GET.get('salt')
        dtree = ApiConfig.model
        #predict using independent variables
        PredictionMade = dtree.predict([[age, gender, cholesterol, bp, salt]])
        response_dict = {"Predicted drug": PredictionMade}
        print(response_dict)
        return Response(response_dict, status=200)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#test-the-api"&gt;
  &lt;/a&gt;
  Test the API
&lt;/h2&gt;

&lt;p&gt;To test our API, I’ll use &lt;a href="https://docs.python-requests.org/en/latest/"&gt;requests&lt;/a&gt; library, which is the de facto standard for making HTTP requests in Python. You can also use &lt;a href="https://www.postman.com/"&gt;Postman&lt;/a&gt; or &lt;a href="https://insomnia.rest/"&gt;Insomnia&lt;/a&gt; for making the requests.&lt;/p&gt;

&lt;p&gt;Let’s predict what drug prescription(among the five drugs: Y X A B and C) should a 68-year-old female with normal levels of cholesterol and BP and has salt to potassium level of 27 take?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests
predict = requests.post("http://127.0.0.1:8000/?age=68&amp;amp;gender=0&amp;amp;bp=2&amp;amp;cholesterol=2&amp;amp;salt=27")
print(predict.json())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{'Predicted drug': ['drugY']}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks for staying tuned! In case of any questions, feel free to ask in the comment section below.&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>django</category>
      <category>webdev</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>10 Programs for Video Editing on Smartphones and PCs</title>
      <author>Explain Ninja</author>
      <pubDate>Wed, 10 Nov 2021 10:21:05 +0000</pubDate>
      <link>https://dev.to/explain_ninja/10-programs-for-video-editing-on-smartphones-and-pcs-3nl4</link>
      <guid>https://dev.to/explain_ninja/10-programs-for-video-editing-on-smartphones-and-pcs-3nl4</guid>
      <description>&lt;p&gt;When the video is shot, an exciting production stage to begin next is editing. Choosing an ideal editor is the first problem you will have to face if you do it on your favorite smartphone or your pc. We have collected ten editing programs for videos that will come in handy in processing &lt;a title="https://explain.ninja/blog/promotional-video-production-cost/" href="https://explain.ninja/blog/promotional-video-production-cost/" rel="noreferrer noopener"&gt;your videos&lt;/a&gt; asap. Check them out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kp8h6SvQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/image_processing20200508-12292-d36i9w.gif" class="article-body-image-wrapper"&gt;&lt;img title="10 Programs for Video Editing on Smartphones and PCs 1" src="https://res.cloudinary.com/practicaldev/image/fetch/s--kp8h6SvQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/image_processing20200508-12292-d36i9w.gif" alt="10 Programs for Video Editing on Smartphones and PCs 1" width="800" height="600"&gt;&lt;/a&gt;&lt;/p&gt;
Incredible motion design by &lt;a title="https://explain.ninja/contact-us/" href="https://explain.ninja/contact-us/" rel="noreferrer noopener"&gt;Explain Ninja&lt;/a&gt;



&lt;h2&gt;How to choose some useful edit programs for videos?&lt;/h2&gt;

&lt;p&gt;For cool videos for TikTok or Instagram, it may be enough to use smartphone apps designed for editing on Android or iOS. Their functionality will be enough for basic editing and even simple work sound processing.&lt;/p&gt;

&lt;p&gt;And if you plan to shoot &amp;amp; edit &lt;a href="https://explain.ninja/video-for-business/" rel="noreferrer noopener"&gt;professional video explainers&lt;/a&gt;, advertisements, or other hour-long videos and want to work with video on a wide computer monitor, go to check some solid programs for PC.&lt;/p&gt;

&lt;h2&gt;Choose your top program for video edit&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;span&gt;Here are some ideas for mobile video lovers:&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;1) InShot&lt;/h3&gt;

&lt;p&gt;InShot today is one of the most famous and popular mobile video apps. It has every function you may need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cutting clips.&lt;/li&gt;
&lt;li&gt;Cropping a picture for different formats.&lt;/li&gt;
&lt;li&gt;Adding music and the ability to cut it into pieces to adjust the volume at the right moments, and so much more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also record voice directly in the application – for example, for &lt;a title="https://explain.ninja/process/" href="https://explain.ninja/process/" rel="noreferrer noopener"&gt;voiceover&lt;/a&gt;, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FgDkqJst--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/inshot.jpg" class="article-body-image-wrapper"&gt;&lt;img title="10 Programs for Video Editing on Smartphones and PCs 2" src="https://res.cloudinary.com/practicaldev/image/fetch/s--FgDkqJst--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/inshot.jpg" alt="10 Programs for Video Editing on Smartphones and PCs 2" width="770" height="530"&gt;&lt;/a&gt;&lt;/p&gt;
Source: InShot



&lt;h3&gt;2) KineMaster&lt;/h3&gt;

&lt;p&gt;Try one of the most powerful mobile video editors out there. It is instead an advanced but, at the same time, quite easy-to-use video editor. You may work with several video tracks simultaneously, superimposing them on top of each other. You may also add handwritten text and record voice-overs in real-time. And, of course, all the basic set of options for a good video processing program: color settings, handy tools for cropping and scaling, as well as a variety of effects, stickers, and transitions are out there. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zefz9OVP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/kinemaster.jpg" class="article-body-image-wrapper"&gt;&lt;img title="10 Programs for Video Editing on Smartphones and PCs 3" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zefz9OVP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/kinemaster.jpg" alt="10 Programs for Video Editing on Smartphones and PCs 3" width="770" height="530"&gt;&lt;/a&gt;&lt;/p&gt;
Source: KineMaster



&lt;h3&gt;3) Magisto&lt;/h3&gt;

&lt;p&gt;You don’t have to bother. Immediately create a video with a given theme in three easy steps. It’s easy to use, you simply import videos and photos, choose an editing style, add music from the app’s library, etc. Though some experienced users may not have enough editing control, this app will be a godsend for those new to video editing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--abZRUQwq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/magisto.jpg" class="article-body-image-wrapper"&gt;&lt;img title="10 Programs for Video Editing on Smartphones and PCs 4" src="https://res.cloudinary.com/practicaldev/image/fetch/s--abZRUQwq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/magisto.jpg" alt="10 Programs for Video Editing on Smartphones and PCs 4" width="789" height="527"&gt;&lt;/a&gt;&lt;/p&gt;
Source: Magisto



&lt;h3&gt;4) FilmoraGo&lt;/h3&gt;

&lt;p&gt;FilmoraGo is an excellent editor for quick editing on the go. This app provides everything you may need. In addition to cutting videos or gluing pictures, you may apply filters, add music and change the speed. The video will be saved with a 1280 × 720 resolution. FilmoraGo is a great choice for editing videos for social media or home archives.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DwJiBYgF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/fimora.jpg" class="article-body-image-wrapper"&gt;&lt;img title="10 Programs for Video Editing on Smartphones and PCs 5" src="https://res.cloudinary.com/practicaldev/image/fetch/s--DwJiBYgF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/fimora.jpg" alt="10 Programs for Video Editing on Smartphones and PCs 5" width="775" height="521"&gt;&lt;/a&gt;&lt;/p&gt;
Source: FilmoraGo



&lt;h3&gt;5) Adobe Premiere Rush&lt;/h3&gt;

&lt;p&gt;Adobe Premiere Rush is a complete editing studio on your smartphone. If you’ve ever worked with Adobe Creative Suite programs, you know what it is.&lt;/p&gt;

&lt;p&gt;Adobe Premiere Rush is available for both smartphones and PCs for editing on multiple devices. All the essential professional tools for video editing, color adjustments, and audio work are included.&lt;/p&gt;

&lt;p&gt;And for an additional fee, you may download a variety of effects and titles from Adobe Stock.&lt;/p&gt;

&lt;p&gt;It will also be ideal for advanced video editor users and those already working with Adobe products. It is suitable for creating almost any content, except for stories and photo collages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GHe7Mnn---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/rush.jpg" class="article-body-image-wrapper"&gt;&lt;img title="10 Programs for Video Editing on Smartphones and PCs 6" src="https://res.cloudinary.com/practicaldev/image/fetch/s--GHe7Mnn---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/rush.jpg" alt="10 Programs for Video Editing on Smartphones and PCs 6" width="880" height="522"&gt;&lt;/a&gt;&lt;/p&gt;
Source: Adobe



&lt;p&gt;&lt;em&gt;&lt;span&gt;Here are also some ideas for those who need professional programs for PC in addition to effective mobile video editing apps:&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;6) PowerDirector&lt;/h3&gt;

&lt;p&gt;PowerDirector is a powerful video editor for working with videos and photos integrated with Google Disk cloud storage. In addition to standard tools, PowerDirector allows you to use chroma key and export video in 4K format. You can access an entire library of filters, titles, and effects for extra money, but the free selection is impressive.&lt;/p&gt;

&lt;p&gt;It will be an ideal tool for advanced editing software users and those working with professional video material.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UU0V_VeP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/director.jpg" class="article-body-image-wrapper"&gt;&lt;img title="10 Programs for Video Editing on Smartphones and PCs 7" src="https://res.cloudinary.com/practicaldev/image/fetch/s--UU0V_VeP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/director.jpg" alt="10 Programs for Video Editing on Smartphones and PCs 7" width="695" height="320"&gt;&lt;/a&gt;&lt;/p&gt;
Source: PowerDirector



&lt;h3&gt;7) Splice&lt;/h3&gt;

&lt;p&gt;Here you may use multiple audio tracks, add music from the built-in collection, and select the appropriate quality when exporting. The app is an excellent functional and intuitive video editor for all the rest. In the app, you may crop videos, overlay text, add transitions, and add professional touches.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PIh9nqF3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/splice.jpg" class="article-body-image-wrapper"&gt;&lt;img title="10 Programs for Video Editing on Smartphones and PCs 8" src="https://res.cloudinary.com/practicaldev/image/fetch/s--PIh9nqF3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/splice.jpg" alt="10 Programs for Video Editing on Smartphones and PCs 8" width="880" height="537"&gt;&lt;/a&gt;&lt;/p&gt;
Source: Splice



&lt;h3&gt;8) DaVinci Resolve&lt;/h3&gt;

&lt;p&gt;The interface looks complicated for a beginner, but you can get used to it. Originally it was developed for color correction. Today it offers many tools for adjusting the picture and sound. If you need to progress video editing, DaVinci Resolve is a great starting point.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2t870nxc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/davinci.jpg" class="article-body-image-wrapper"&gt;&lt;img title="10 Programs for Video Editing on Smartphones and PCs 9" src="https://res.cloudinary.com/practicaldev/image/fetch/s--2t870nxc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/davinci.jpg" alt="10 Programs for Video Editing on Smartphones and PCs 9" width="880" height="545"&gt;&lt;/a&gt;&lt;/p&gt;
Source: DaVinci Resolve



&lt;h3&gt;9) Final Cut Pro&lt;/h3&gt;

&lt;p&gt;Final Cut Pro is a powerful professional video editor created by Apple. The program has a simple, high-speed, and very smooth interface. Naturally, it is only available for Mac owners; there are no versions for Windows and Linux. Final Cut Pro may also offer you the most advanced organizing tools of any professional video editing application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QRVOhjW1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/pro.jpg" class="article-body-image-wrapper"&gt;&lt;img title="10 Programs for Video Editing on Smartphones and PCs 10" src="https://res.cloudinary.com/practicaldev/image/fetch/s--QRVOhjW1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/pro.jpg" alt="10 Programs for Video Editing on Smartphones and PCs 10" width="880" height="552"&gt;&lt;/a&gt;&lt;/p&gt;
Source: Final Cut Pro



&lt;h3&gt;10) Adobe Premiere Pro&lt;/h3&gt;

&lt;p&gt;Adobe Premiere Pro is known as one of the top video editing software. If you are familiar with any other Adobe products, you may quickly master the interface. Almost all operations can be performed using hot keyboard commands. If you are new to the program, immediately set them up for those installation operations that you use most often – over time this will save a lot of time working. Good luck!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hlKRgQxb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/adobe-1.jpg" class="article-body-image-wrapper"&gt;&lt;img title="10 Programs for Video Editing on Smartphones and PCs 11" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hlKRgQxb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/adobe-1.jpg" alt="10 Programs for Video Editing on Smartphones and PCs 11" width="773" height="514"&gt;&lt;/a&gt;&lt;/p&gt;
Source: Adobe



&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;If you still don’t like editing videos on your phone, you just haven’t tried an ideal app for this yet. You may process your incredible videos on your smartphone – including making films, doing professional editing, and producing expensive advertising content. Or you may edit your video material on your favorite machine.&lt;/p&gt;

&lt;p&gt;With a selection of the best programs for video editing for smartphones based on Android and iOs or PCs running on Windows or Linux, or Apple devices, it will be easier for you to test, experiment, and choose what you like the most.&lt;/p&gt;

&lt;p&gt;Anyway, you are always welcome to hire us for &lt;a href="https://explain.ninja/contact-us/"&gt;professional business video editing&lt;/a&gt;.&lt;/p&gt;



&lt;br&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>„Niewidzialne” podatności – czyli nowa technika ataku: Trojan Source</title>
      <author>Michał Giza</author>
      <pubDate>Wed, 10 Nov 2021 10:12:06 +0000</pubDate>
      <link>https://dev.to/gizamichal/niewidzialne-podatnosci-czyli-nowa-technika-ataku-trojan-source-4mb3</link>
      <guid>https://dev.to/gizamichal/niewidzialne-podatnosci-czyli-nowa-technika-ataku-trojan-source-4mb3</guid>
      <description>&lt;p&gt;&lt;a href="https://sekurak.pl/niewidzialne-podatnosci-czyli-nowa-technika-ataku-trojan-source/"&gt;https://sekurak.pl/niewidzialne-podatnosci-czyli-nowa-technika-ataku-trojan-source/&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Hacktoberfest 2021 Badge</title>
      <author>Ashish Patil</author>
      <pubDate>Wed, 10 Nov 2021 09:46:47 +0000</pubDate>
      <link>https://dev.to/ashish2831/hacktoberfest-2021-badge-131h</link>
      <guid>https://dev.to/ashish2831/hacktoberfest-2021-badge-131h</guid>
      <description>&lt;p&gt;Thank you so much Hacktoberfest and Dev Community for this Honour and also for having this opportunity😊. It was great experience and I have learned lot of things👑. &lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>django</category>
      <category>javascript</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Training BERT Text Classifier on a Tensor Processing Unit</title>
      <author>Abid</author>
      <pubDate>Wed, 10 Nov 2021 09:44:12 +0000</pubDate>
      <link>https://dev.to/kingabzpro/training-bert-text-classifier-on-a-tensor-processing-unit-3pg</link>
      <guid>https://dev.to/kingabzpro/training-bert-text-classifier-on-a-tensor-processing-unit-3pg</guid>
      <description>&lt;p&gt;Training Hugging Face's most famous model on TPU for Tunisian Arabizi Social Media Sentiment Analysis. 🚀&lt;br&gt;
Link: &lt;a href="https://zindi.africa/learn/training-bert-text-classifier-on-a-tensor-processing-unit"&gt;https://zindi.africa/learn/training-bert-text-classifier-on-a-tensor-processing-unit&lt;/a&gt;&lt;/p&gt;

</description>
      <category>zindi</category>
      <category>machinelearning</category>
      <category>huggingface</category>
      <category>nlp</category>
    </item>
    <item>
      <title>Top 7 React Developer Tools to Use in 2021 (With Bonus!)</title>
      <author>Sunil Joshi</author>
      <pubDate>Wed, 10 Nov 2021 09:39:37 +0000</pubDate>
      <link>https://dev.to/suniljoshi19/top-7-react-developer-tools-to-use-in-2021-with-bonus-58i4</link>
      <guid>https://dev.to/suniljoshi19/top-7-react-developer-tools-to-use-in-2021-with-bonus-58i4</guid>
      <description>&lt;p&gt;Whether you are just starting to learn React or you’re already full-time working professionally in it, there are many tools (both free and paid) that you can use in your personal or professional projects. They are always beneficial as they help speed up the workflow or get things done quickly.&lt;/p&gt;

&lt;p&gt;For React developers to take full advantage of the library so that coding becomes easier and faster, here are 7 of the best tools out there that you as a React dev should bookmark and use as a reference whenever needed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-reactide"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://reactide.io/"&gt;Reactide&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;What is it?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Reactide is a dedicated IDE for React web application development.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you ever wanted to have a separate IDE (not just an editor) just to fulfill all of your React development needs then Reactide is the tool you need right now. It is the first IDE ever built and released just for React web application development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Extensible: it runs an integrated Node server and custom browser simulator eliminating the need to configure any servers or build tools.&lt;/p&gt;

&lt;p&gt;Easy configuration: you can run a single command to streamline universal configuration.&lt;/p&gt;

&lt;p&gt;Components visualization: you can navigate through a live representation of your app’s architecture.&lt;/p&gt;

&lt;p&gt;Open-sourced: the code for this powerful tool is hosted on its GitHub repo so you can not only download it for Mac, Windows, and Linux platforms but also contribute to it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-bit"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://bit.dev/"&gt;Bit&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;What is it?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Bit is a standard infrastructure for components for autonomous micro-frontend/web app development.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Bit is a collection of almost everything you and your team may need to have fast releases, great consistency, and collaboration at a high scale to build components.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Split app development: with Bit, there is no need to do monolithic development. Instead, you work on modular apps composed of features built by teams working simultaneously.&lt;/p&gt;

&lt;p&gt;Hosting and resuing: you and your team can build together a reusable component for your organization and then collaborate on new builds in the cloud.&lt;/p&gt;

&lt;p&gt;Continuous release and component upgrades: you can deliver updates to app components with decoupled versions and release pipelines.&lt;br&gt;
Great at managing docs: Bit makes sure every component is documented, organized, and discoverable by anyone.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-storybook"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://storybook.js.org/"&gt;Storybook&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;What is it?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Storybook is an open-source tool for building UI components and pages in isolation.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It helps very much in streamlining UI development along with testing components and documenting them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Durable interfaces: it comes with a sandbox environment to build the UIs you need in isolation so that more of the edge cases and states of an element is covered.&lt;/p&gt;

&lt;p&gt;Testing UI easily: every time you write a story, you get a test case along with it. Along with this, you can reuse stories in your unit tests.&lt;/p&gt;

&lt;p&gt;Document and share UI: everything in Storybook is searchable with an option to share each story with your teammates for a single source of truth.&lt;/p&gt;

&lt;p&gt;Available for multiple tech stacks: along with React, Storybook is also available for Vue, Angular, Web Components, Ember, HTML, and more!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-react-developer-tools"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en"&gt;React Developer Tools&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;What is it?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;React Developer Tools adds React debugging tools to the Chrome Developer Tools.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This extension is so popular and useful that it’s recommended to install and use by everyone starting out to learn React. With extensive debugging with this tool, you can expect better bug busting throughout the app development process!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;br&gt;
Inspection: you can inspect the individual React component hierarchies in the Chrome Developer Tools.&lt;/p&gt;

&lt;p&gt;The components tab: shows you all of the root components that were rendered on the page along with the sub-components if available.&lt;/p&gt;

&lt;p&gt;The profiler tab: this tab allows you to record performance information.&lt;/p&gt;

&lt;p&gt;Deeper inspection: you can inspect and edit the selected component’s current props and state them in the panel right from this extension.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-react-cosmos"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://reactcosmos.org/"&gt;React Cosmos&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;What is it?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;React Cosmos is a sandbox for developing and testing UI components in isolation.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;With React Cosmos you don’t need to settle for the boring localhost:3000 dev environment and you can instead test and develop all components in isolation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Visual TDD: with Test Driven Development in React Cosmos you can develop one component at a time, isolate the UI and then iterate on it quickly. No need to reload the app on every change.&lt;/p&gt;

&lt;p&gt;Component library: it doesn’t matter if it’s a blank state or an edge case, you can bookmark each component state. The component library includes will organise everything you do.&lt;/p&gt;

&lt;p&gt;Open platform: it’s not used just for developing and testing UI components but it can also be used for snapshot and visual regression testing, as well as custom integrations.&lt;/p&gt;

&lt;p&gt;Maintainability: with reusable components, you can not only create awesome interfaces but also maintain the quality at scale.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-belle"&gt;
  &lt;/a&gt;
  6. &lt;a href="http://nikgraf.github.io/belle/#/"&gt;Belle&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;What is it?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Belle uses a set of configurable React components with great UX.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;With Belle, you can never be in doubt of the overall experience of your components. It provides you a set of commonly used React components like Toggle, ComboBox, Rating, TextInput, Button, Card, Select, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;br&gt;
Versatile and customisable: every component is optimised efficiently to work on both mobile and desktop devices.&lt;/p&gt;

&lt;p&gt;Component library: it doesn’t matter if it’s a blank state or an edge case, you can bookmark each component state. The component library includes will organise everything you do.&lt;/p&gt;

&lt;p&gt;Open platform: it’s not used just for developing and testing UI components but it can also be used for snapshot and visual regression testing, as well as custom integrations.&lt;/p&gt;

&lt;p&gt;Maintainability: with reusable components, you can not only create awesome interfaces but also maintain the quality at scale.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-react-360"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://github.com/facebook/react-360"&gt;React 360&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;What is it?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;React 360 is a framework for the creation of interactive 360 experiences that run in your web browser.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And yes, the same company that builds React is responsible for its VR version i.e Facebook. It uses three.js to facilitate lower-level WebVR and WebGL APIs to create a VR experience on the browser.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Cross-platform development: you can create VR experiences to run on desktops, mobiles, and the web without much change in different platforms.&lt;/p&gt;

&lt;p&gt;3D media: it has environment features that handle all the immersive media assets and configurations. That means you as a 360 developer will have precise control.&lt;/p&gt;

&lt;p&gt;Enhanced performance: the overall architecture is designed.&lt;br&gt;
Surfaces by React 360: this allows you to integrate UI panels into your apps by creating 2D interfaces that embed on 3D spaces.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-tools"&gt;
  &lt;/a&gt;
  Bonus Tools!
&lt;/h2&gt;

&lt;p&gt;Apart from the above 7 tools, we also got you three more! Let’s take a very quick look at them:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rekit.js.org/"&gt;&lt;strong&gt;Rekit:&lt;/strong&gt;&lt;/a&gt;  it’s a toolkit to build scalable web applications with React, &lt;a href="https://redux.js.org/"&gt;Redux&lt;/a&gt;, and &lt;a href="https://reactrouter.com/"&gt;React-router&lt;/a&gt;. It’s an all-in-one solution for creating modern React apps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://testing-library.com/docs/react-testing-library/intro"&gt;&lt;strong&gt;React Testing Library:&lt;/strong&gt;&lt;/a&gt; it is a lightweight solution for testing React components. It provides utility functions on top of react-dom and react-dom/&lt;a href="https://reactjs.org/docs/test-utils.html"&gt;test-utils&lt;/a&gt;, in a way that encourages better testing practices.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.plasmic.app/"&gt;&lt;strong&gt;Plasmic:&lt;/strong&gt;&lt;/a&gt; it’s an all-in-one tool to visually build pages and components, integrate them to your React code and then set/push them to production.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://wrappixel.com/"&gt;&lt;strong&gt;Wrappixel:&lt;/strong&gt;&lt;/a&gt; it’s a one-stop solution for your &lt;a href="https://www.wrappixel.com/templates/category/react-templates/"&gt;react template&lt;/a&gt; needs. It provides both free and premium versions for backend interfaces.&lt;/p&gt;

&lt;p&gt;And that was it! We hope these tools will help you in your upcoming React projects. Keep on exploring the vast ecosystem React provides by keeping a tab on their &lt;a href="http://reactjs.org/"&gt;official website.&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>programming</category>
    </item>
    <item>
      <title>Elon Musk News Api</title>
      <author>ROHAN KADAM</author>
      <pubDate>Wed, 10 Nov 2021 09:39:18 +0000</pubDate>
      <link>https://dev.to/rohan2596/elon-musk-news-api-113e</link>
      <guid>https://dev.to/rohan2596/elon-musk-news-api-113e</guid>
      <description>&lt;p&gt;Hello 👋 DevCommuinty,Checkout my news api on Elon Musk via &lt;a class="mentioned-user" href="https://dev.to/rapid_api"&gt;@rapid_api&lt;/a&gt;
 &lt;br&gt;
&lt;a href="https://rapidapi.com/rohankadam965@gmail.com/api/elon-musk-news"&gt;https://rapidapi.com/rohankadam965@gmail.com/api/elon-musk-news&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please Like💕, Share and Follow for more such amazing products&lt;/p&gt;

</description>
      <category>api</category>
      <category>programming</category>
      <category>beginners</category>
      <category>opensource</category>
    </item>
    <item>
      <title>What is Github Copilot? Will it take your jobs !?</title>
      <author>Nomadev💻🔱</author>
      <pubDate>Wed, 10 Nov 2021 09:27:42 +0000</pubDate>
      <link>https://dev.to/thenomadevel/what-is-github-copilot-will-it-take-your-jobs--33p5</link>
      <guid>https://dev.to/thenomadevel/what-is-github-copilot-will-it-take-your-jobs--33p5</guid>
      <description>&lt;p&gt;Hello, everyone  &lt;a href="https://twitter.com/thenomadevel"&gt;Nomadev&lt;/a&gt;  here, back with another blog on tech. Today we will be discussing in brief about the most fancy term around, nowadays - &lt;a href="https://copilot.github.com/"&gt;&lt;strong&gt;Github Copilot&lt;/strong&gt;&lt;/a&gt;. So if you have been paying attention to the latest tech updates, you have probably seen  &lt;a href="https://github.com/"&gt;Github&lt;/a&gt;  to ship the new feature and it's a VS code extension Github Copilot.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RLj0WKq7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636527668307/gz_iGt6da.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RLj0WKq7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636527668307/gz_iGt6da.gif" alt="start.gif" width="400" height="202"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;How it works&lt;/li&gt;
&lt;li&gt;Does GitHub Copilot write perfect code?&lt;/li&gt;
&lt;li&gt;Will it take dev jobs??&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#1-introduction"&gt;
  &lt;/a&gt;
  1. Introduction
&lt;/h2&gt;

&lt;p&gt;In simple it is a vs code extension by which you can convert your comments into code. GitHub Copilot understands significantly more context than most code assistants. So, whether it’s in a docstring, comment, function name, or the code itself, GitHub Copilot uses the context you’ve provided and synthesizes code to match. A tool powered by gpt3 capable of writing code automatically all you have to do is write a descriptive function name or some comments and it will automatically fill in the implementation details for you and it's not just inserting a snippet this is actual novel code that has never been seen before.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OL6Sbt3W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636533211218/cUlxmjG_1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OL6Sbt3W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636533211218/cUlxmjG_1.gif" alt="copilot.gif" width="640" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-how-it-works"&gt;
  &lt;/a&gt;
  2. How it works?
&lt;/h2&gt;

&lt;p&gt;GitHub Copilot can assemble code from user comments and predicts your code by just reading the function name you have declared.  It looks at the code you've already written in your project as context and attempts to generate new code to match it perfectly. &lt;/p&gt;

&lt;p&gt;The GitHub Copilot editor extension sends your comments and code to the GitHub Copilot service, which then uses OpenAI Codex to synthesize and suggest code. With Copilot, all I have to do is write a function name and it implements the function body for me automatically if I'm not perfectly happy with the implementation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HJGbN2eS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636533077691/rw9QcMLIy.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HJGbN2eS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636533077691/rw9QcMLIy.webp" alt="copilot.webp" width="880" height="423"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It actually works by reading through all the open-source code on the GitHub repos worldwide and then collecting the data and trying to find the best possible code related to it! It is said to work great with repetitive code patterns so users can let it generate the rest of the code. The AI assistant can also help you learn a new programming language. The deep learning model behind the data is gpt-3 or generative pre-trained transformer 3 which is easily one of the most impressive ai products ever developed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-does-github-copilot-write-perfect-code"&gt;
  &lt;/a&gt;
  3. Does GitHub Copilot write perfect code?
&lt;/h2&gt;

&lt;p&gt;We can't say that as GitHub Copilot tries to understand your intent and to generate the best code it can, but the code it suggests may not always work or even make sense. While devs are working hard to make GitHub Copilot better, code suggested by GitHub Copilot should be carefully tested, reviewed, and vetted, like any other code. &lt;/p&gt;

&lt;p&gt;It works best when you divide your code into small functions, use meaningful names for functions parameters, and write good docstrings and comments as you go. It also seems to do best when it’s helping you navigate unfamiliar libraries or frameworks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sgdYu5EI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636535492372/ouZWn6Bxn.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sgdYu5EI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636535492372/ouZWn6Bxn.jpeg" alt="perfect.jpg" width="430" height="253"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-will-it-take-dev-jobs-"&gt;
  &lt;/a&gt;
  4. Will it take dev jobs ??
&lt;/h2&gt;

&lt;p&gt;So if you're wondering, will this take over our jobs in the future It may be a ways off from that, but it is improving, and I think what this does is it makes us Faster coders.&lt;br&gt;
It's like, I always have a senior, but I always have stack overflow right next to me saying, Hey, maybe this is what you want, Maybe this is what you want!,  So it's more of a Smart Suggester. And that's why they call it a copilot, right? It's not the pilot.&lt;br&gt;
It's a copilot. So when we talk about this, there's probably responsibility.&lt;br&gt;
Copilot autocompletes code snippets, suggests new lines of code, and can even write whole functions based on the description provided. It will make things easy for developers, that's it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VzD-Z75a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636535609049/ihek4b5x2.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VzD-Z75a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636535609049/ihek4b5x2.jpeg" alt="jobs.jpg" width="800" height="573"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also follow me on  &lt;a href="https://twitter.com/thenomadevel"&gt;Twitter&lt;/a&gt; where I post daily threads on Programming, Open Source, and on Getting better remote job opportunities.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ds3CGr4S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636535713041/l_l_GhFZU.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ds3CGr4S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636535713041/l_l_GhFZU.gif" alt="twitter.gif" width="400" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#here-are-a-few"&gt;
  &lt;/a&gt;
  Here are a few
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://twitter.com/thenomadevel/status/1448187696367636483"&gt;Top 10 Websites where you can master programming for Free&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/thenomadevel/status/1453810075445841920"&gt;TOP 7 digit seven VS Code Extension for Developers&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://twitter.com/thenomadevel/status/1451082698500362244"&gt;The Best VS Code Extensions to Supercharge Your Git&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/thenomadevel/status/1450355811268448261"&gt;Top 5 Sites To Find Remote Developer Jobs&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://twitter.com/thenomadevel/status/1449253111235629057"&gt;MOST USED GIT COMMANDS YOU MUST LEARN &lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Make sure to like, comment, and follow so that you don't miss the amazing content.&lt;br&gt;
Happy coding!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UpsRUSQv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636535784823/qFdQIg54G.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UpsRUSQv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636535784823/qFdQIg54G.gif" alt="follow.gif" width="800" height="600"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>opensource</category>
      <category>github</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How to track changes in ngDoCheck with KeyValueDiffer</title>
      <author>Dharmen Shah</author>
      <pubDate>Wed, 10 Nov 2021 09:25:03 +0000</pubDate>
      <link>https://dev.to/shhdharmen/how-to-track-changes-in-ngdocheck-with-keyvaluediffer-1la7</link>
      <guid>https://dev.to/shhdharmen/how-to-track-changes-in-ngdocheck-with-keyvaluediffer-1la7</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;When we use &lt;code&gt;ngDoCheck&lt;/code&gt; to detect changes, we need to make sure that our implementation is extremely lightweight and fast, so it doesn’t affect user-experience. In this tutorial, we will learn how to efficiently track and process those changes using &lt;code&gt;KeyValueDiffer&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#-raw-ngdocheck-endraw-lifecycle-hook"&gt;
  &lt;/a&gt;
  &lt;code&gt;ngDoCheck&lt;/code&gt; life-cycle hook
&lt;/h2&gt;

&lt;p&gt;The official definition of this life-cycle hook goes like this:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"Detect and act upon changes that Angular can't or won't detect on its own. Called immediately after ngOnChanges() on every change detection run, and immediately after ngOnInit() on the first run."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Simply put, Angular tracks binding inputs by object reference. It means that if an object reference hasn’t changed, the binding change is not detected and change detection is not executed. This is where we need &lt;a href="https://angular.io/api/core/DoCheck"&gt;&lt;code&gt;ngDoCheck&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#practical-usage"&gt;
  &lt;/a&gt;
  Practical usage
&lt;/h3&gt;

&lt;p&gt;It is very important to understand when to use &lt;code&gt;ngDoCheck&lt;/code&gt; life-cycle hook when working with the code and how it’s different from &lt;code&gt;ngOnChanges&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, we are going to consider two components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;my-app&lt;/code&gt; - Has the basic layout and &lt;code&gt;rates&lt;/code&gt; property, which represents the rates of INR for 1 USD over time.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;app-rates&lt;/code&gt; - Accepts single &lt;code&gt;@Input&lt;/code&gt; for &lt;code&gt;rates&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Our goal is to track changes of &lt;code&gt;rates.inr&lt;/code&gt; and display the same in &lt;code&gt;app-rates&lt;/code&gt;. Let’s start with coding:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app.component.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
  &amp;lt;button (click)="updateRates()"&amp;gt;Update rates&amp;lt;/button&amp;gt;
  &amp;lt;div&amp;gt;
      &amp;lt;h4&amp;gt;{{ 1 | currency }} = {{ rates.inr | currency: 'INR' }}&amp;lt;/h4&amp;gt;
      &amp;lt;app-rates [rates]="rates"&amp;gt;&amp;lt;/app-rates&amp;gt;
  &amp;lt;/div&amp;gt;
  `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;rates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;inr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;inr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;updateRates&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rates&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;my-app&lt;/code&gt;’s code is basic. It just displays the &lt;code&gt;rates&lt;/code&gt; and we have also given a &lt;code&gt;button&lt;/code&gt; which will update the &lt;code&gt;rates&lt;/code&gt; by calling &lt;code&gt;updateRates&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s look at &lt;code&gt;app-rates&lt;/code&gt;’s code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// rates.component.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;DoCheck&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;OnChanges&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;SimpleChanges&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-rates&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
  &amp;lt;span
    *ngIf="diff !== undefined; else noDiff"
    class="badge"
    [class.bg-success]="diff &amp;gt; 0"
    [class.bg-danger]="diff &amp;lt; 0"
  &amp;gt;
    {{ diff | number: '1.0-2' }}
  &amp;lt;/span&amp;gt;
  &amp;lt;ng-template #noDiff&amp;gt;
    &amp;lt;span class="badge bg-secondary"&amp;gt;
      No difference
    &amp;lt;/span&amp;gt;
  &amp;lt;/ng-template&amp;gt;
  `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;RatesComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;rates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;inr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;inr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nx"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;app-rates&lt;/code&gt;’s template only displays &lt;code&gt;diff&lt;/code&gt;, which represents how much &lt;code&gt;rates.inr&lt;/code&gt; has changed since last time. And if there is no change, it will show “No difference” text.&lt;/p&gt;

&lt;p&gt;Now, to simply get &lt;code&gt;diff&lt;/code&gt;, we will need to calculate the difference between new value and old value.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-not-raw-ngonchanges-endraw-"&gt;
  &lt;/a&gt;
  Why not &lt;code&gt;ngOnChanges&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;We may think to do this with &lt;code&gt;ngOnChanges&lt;/code&gt;. Let’s first see what changes we are getting in &lt;code&gt;ngOnChanges&lt;/code&gt; life-cycle hook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;RatesComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnChanges&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnChanges&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SimpleChanges&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Is first change?&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rates&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstChange&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let’s keep an eye on the console and click on the “Update rates” button:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VrzL1jhk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/hn7bVJt.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VrzL1jhk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/hn7bVJt.gif" alt="console output on click of Update Rates button" title="console output on click of Update Rates button" width="600" height="471"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice that &lt;code&gt;ngOnChanges&lt;/code&gt; is getting called only when the &lt;code&gt;rates&lt;/code&gt; is assigned for the first time. This is happening because we are not changing the &lt;code&gt;rates&lt;/code&gt; object by reference from &lt;code&gt;my-app&lt;/code&gt;. If we write something like below in &lt;code&gt;my-app&lt;/code&gt;, then &lt;code&gt;ngOnChanges&lt;/code&gt; will capture the changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;updateRatesByReference&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rates&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;inr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#usage-of-raw-ngdocheck-endraw-"&gt;
  &lt;/a&gt;
  Usage of &lt;code&gt;ngDoCheck&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;Unlike &lt;code&gt;ngOnChanges&lt;/code&gt;, &lt;code&gt;ngDoCheck&lt;/code&gt; tracks all the changes, whether they are by reference or not and even more. Let’s utilise it in our example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;RatesComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;DoCheck&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;rates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;inr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;inr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nx"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;oldRate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;ngDoCheck&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rates&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inr&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;oldRate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rates&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inr&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;oldRate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;oldRate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rates&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, we introduced a new property called &lt;code&gt;oldRate&lt;/code&gt;. And in &lt;code&gt;ngDoCheck&lt;/code&gt; we are checking if the new &lt;code&gt;rates.inr&lt;/code&gt; is not same as &lt;code&gt;oldRate&lt;/code&gt;, then it should update the &lt;code&gt;diff&lt;/code&gt;. Let’s look at the output now:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bCjS2r67--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/OgQkfa5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bCjS2r67--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/OgQkfa5.gif" alt="output after ngDoCheck" title="output after ngDoCheck" width="600" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For more on &lt;code&gt;ngDoCheck&lt;/code&gt;, I would recommend you to read the article: &lt;a href="https://indepth.dev/posts/1131/if-you-think-ngdocheck-means-your-component-is-being-checked-read-this-article"&gt;If you think &lt;code&gt;ngDoCheck&lt;/code&gt; means your component is being checked — read this article - Angular inDepth&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This example is available on &lt;a href="https://stackblitz.com/edit/angular-ivy-tcrchs?file=src/app/rates/rates.component.ts"&gt;stackblitz&lt;/a&gt;. This code gives the result as expected. But Angular provides few utilities to efficiently track changes made to an object over time. Let’s look into those.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keyvaluediffer-and-utilities"&gt;
  &lt;/a&gt;
  KeyValueDiffer and utilities
&lt;/h2&gt;

&lt;p&gt;There are a few interfaces and a service involved when we want to use &lt;code&gt;KeyValueDiffer&lt;/code&gt;. Below is the illustration which covers them all:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RT408IDB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/e7BjYGp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RT408IDB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/e7BjYGp.jpg" alt="KeyValueDiffer flow" title="KeyValueDiffer flow" width="528" height="922"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Below is the summary:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We will inject the service &lt;a href="https://angular.io/api/core/KeyValueDiffers"&gt;&lt;code&gt;KeyValueDiffers&lt;/code&gt;&lt;/a&gt; and use its &lt;a href="https://angular.io/api/core/KeyValueDiffers#find"&gt;&lt;code&gt;find()&lt;/code&gt;&lt;/a&gt; method to get a &lt;code&gt;KeyValueDifferFactory&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Next, we will use  &lt;a href="https://angular.io/api/core/KeyValueDifferFactory"&gt;&lt;code&gt;KeyValueDifferFactory&lt;/code&gt;&lt;/a&gt;’s &lt;a href="https://angular.io/api/core/KeyValueDifferFactory#create"&gt;&lt;code&gt;create()&lt;/code&gt;&lt;/a&gt; method to create &lt;a href="https://angular.io/api/core/KeyValueDiffer"&gt;&lt;code&gt;KeyValueDiffer&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;We will track the changes through the &lt;code&gt;KeyValueDiffer&lt;/code&gt;’s &lt;a href="https://angular.io/api/core/KeyValueDiffer#diff"&gt;&lt;code&gt;diff()&lt;/code&gt;&lt;/a&gt; method. It returns &lt;code&gt;KeyValueChanges&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;And at last, we will analyse the changes from &lt;a href="https://angular.io/api/core/KeyValueChanges"&gt;&lt;code&gt;KeyValueChanges&lt;/code&gt;&lt;/a&gt; using one of its &lt;a href="https://angular.io/api/core/KeyValueChanges#methods"&gt;methods&lt;/a&gt;, for example &lt;a href="https://angular.io/api/core/KeyValueChanges#foreachchangeditem"&gt;&lt;code&gt;forEachChangedItem&lt;/code&gt;&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;All methods provide access to change-record &lt;code&gt;KeyValueChangeRecord&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://angular.io/api/core/KeyValueChangeRecord"&gt;&lt;code&gt;KeyValueChangeRecord&lt;/code&gt;&lt;/a&gt; interface is a record representing the item change information&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#practical-usage"&gt;
  &lt;/a&gt;
  Practical usage
&lt;/h3&gt;

&lt;p&gt;We will use the above utilities in the &lt;code&gt;app-rates&lt;/code&gt; which we created previously. We will start with blank &lt;code&gt;ngDoCheck&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;RatesComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;DoCheck&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;rates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;inr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;inr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nx"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;ngDoCheck&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our goal here is to track the changes made to &lt;code&gt;rates&lt;/code&gt; property with &lt;code&gt;KeyValueDiffer&lt;/code&gt; utilities. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#property-of-type-raw-keyvaluediffer-endraw-"&gt;
  &lt;/a&gt;
  Property of type &lt;code&gt;KeyValueDiffer&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;Let’s first create a &lt;code&gt;differ&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;differ&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;KeyValueDiffer&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As the &lt;code&gt;rates&lt;/code&gt; object has the key of type &lt;code&gt;string&lt;/code&gt; and value of type &lt;code&gt;number&lt;/code&gt;, we are passing two types, &lt;code&gt;string&lt;/code&gt; and &lt;code&gt;number&lt;/code&gt; respectively with &lt;code&gt;KeyValueDiffer&lt;/code&gt;. You can change this as per your need.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#inject-raw-keyvaluediffers-endraw-service"&gt;
  &lt;/a&gt;
  Inject &lt;code&gt;KeyValueDiffers&lt;/code&gt; service
&lt;/h4&gt;

&lt;p&gt;Next, let’s inject the &lt;code&gt;KeyValueDiffers&lt;/code&gt; service:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;_differsService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;KeyValueDiffers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#initialize-raw-keyvaluediffer-endraw-"&gt;
  &lt;/a&gt;
  Initialize &lt;code&gt;KeyValueDiffer&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;It’s time to initialize the &lt;code&gt;differ&lt;/code&gt; from service. We will do it in &lt;code&gt;ngOnInit&lt;/code&gt; life-cycle hook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;differ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_differsService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rates&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, first we are calling the &lt;code&gt;find()&lt;/code&gt; method. This method internally first checks if the object passed as argument is either a &lt;code&gt;Map&lt;/code&gt; or JSON and if the check is successful then it returns &lt;code&gt;KeyValueDiffersFactory&lt;/code&gt;. You can checkout it’s source-code on &lt;a href="https://github.com/angular/angular/blob/b1c028677f45e704342e81d7957d024c137340ce/packages/core/src/change_detection/differs/keyvalue_differs.ts#L179"&gt;GitHub&lt;/a&gt;, but overall, below is how it looks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;kv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;KeyValueDifferFactory&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;factory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;factories&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;supports&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;kv&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Cannot find a differ supporting object '&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;kv&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;'`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After &lt;code&gt;find()&lt;/code&gt;, we are calling the &lt;code&gt;create()&lt;/code&gt; method of &lt;code&gt;KeyValueDiffersFactory&lt;/code&gt;, which creates a &lt;code&gt;KeyValueDiffer&lt;/code&gt; object.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#track-changes-in-raw-ngdocheck-endraw-"&gt;
  &lt;/a&gt;
  Track changes in &lt;code&gt;ngDoCheck&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;Next, we will use the &lt;code&gt;differ&lt;/code&gt; and call it’s &lt;code&gt;diff()&lt;/code&gt; method inside &lt;code&gt;ngDoCheck&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ngDoCheck&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;differ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;changes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;differ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rates&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;diff()&lt;/code&gt; method returns &lt;code&gt;KeyValueChanges&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;. As mentioned earlier &lt;code&gt;KeyValueChanges&lt;/code&gt; provides methods to track all the changes, additions, and removals.&lt;/p&gt;

&lt;p&gt;In our case, we need to track changes made to &lt;code&gt;rates&lt;/code&gt;, so we will use &lt;code&gt;forEachChangedItem()&lt;/code&gt; and calculate the &lt;code&gt;diff&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ngDoCheck&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;differ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;changes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;differ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rates&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEachChangedItem&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;previousValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The final code of &lt;code&gt;app-rates&lt;/code&gt; looks like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-rates&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
  &amp;lt;span
    *ngIf="diff !== undefined; else noDiff"
    class="badge"
    [class.bg-success]="diff &amp;gt; 0"
    [class.bg-danger]="diff &amp;lt; 0"
  &amp;gt;
    {{ diff | number: '1.0-2' }}
  &amp;lt;/span&amp;gt;
  &amp;lt;ng-template #noDiff&amp;gt;
    &amp;lt;span class="badge bg-secondary"&amp;gt;
      No difference
    &amp;lt;/span&amp;gt;
    &amp;lt;/ng-template&amp;gt;
  `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;RatesComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;DoCheck&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;rates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;inr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;inr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nx"&gt;oldRate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;differ&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;KeyValueDiffer&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;_differsService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;KeyValueDiffers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;differ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_differsService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rates&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;ngDoCheck&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;differ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;changes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;differ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rates&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEachChangedItem&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;previousValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This example is also available on &lt;a href="https://stackblitz.com/edit/angular-ivy-nwzydo?file=src/app/rates/rates.component.ts"&gt;stackblitz&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We first started with a brief intro to &lt;a href="https://angular.io/api/core/DoCheck"&gt;&lt;code&gt;ngDoCheck&lt;/code&gt;&lt;/a&gt;. Then we learned the utilities needed to track the changes, i.e. interfaces &lt;a href="https://angular.io/api/core/KeyValueDiffer"&gt;&lt;code&gt;KeyValueDiffer&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://angular.io/api/core/KeyValueChanges"&gt;&lt;code&gt;KeyValueChanges&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://angular.io/api/core/KeyValueChangeRecord"&gt;&lt;code&gt;KeyValueChangeRecord&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://angular.io/api/core/KeyValueDifferFactory"&gt;&lt;code&gt;KeyValueDifferFactory&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://angular.io/api/core/KeyValueDiffers"&gt;&lt;code&gt;KeyValueDiffers&lt;/code&gt;&lt;/a&gt; service.&lt;/p&gt;

&lt;p&gt;Finally, we implemented it all in the code and tracked the changes made to the &lt;code&gt;rates&lt;/code&gt; object over time using &lt;a href="https://angular.io/api/core/KeyValueChanges#forEachChangedItem"&gt;&lt;code&gt;KeyValueChanges.forEachChangedItem&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This strategy is also used by Angular’s built-in directive &lt;a href="https://angular.io/api/common/NgStyle"&gt;&lt;code&gt;ngStyle&lt;/code&gt;&lt;/a&gt;, you can check it’s code on &lt;a href="https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_style.ts"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this tutorial, we learned about tracking changes made to an object. It is also possible to track changes made to an array. For that, you will need to use &lt;a href="https://angular.io/api/core/IterableDiffers"&gt;&lt;code&gt;IterableDiffers&lt;/code&gt;&lt;/a&gt; service and related interfaces in the same manner. For more on it, checkout &lt;a href="https://angular.io/api/common/NgClass"&gt;&lt;code&gt;ngClass&lt;/code&gt;&lt;/a&gt;’s code on &lt;a href="https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_class.ts"&gt;GitHub&lt;/a&gt;, where the Angular team have used &lt;code&gt;IterableDiffers&lt;/code&gt;.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>typescript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
