<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Undo your last git mistake with ugit</title>
      <author>Bhupesh Varshney üëæ</author>
      <pubDate>Sun, 02 May 2021 08:00:53 +0000</pubDate>
      <link>https://dev.to/bhupesh/undo-your-last-git-mistake-with-ugit-3kln</link>
      <guid>https://dev.to/bhupesh/undo-your-last-git-mistake-with-ugit-3kln</guid>
      <description>&lt;p&gt;So I have been working on this little tool called &lt;a href="https://github.com/Bhupesh-V/ugit"&gt;&lt;strong&gt;ugit&lt;/strong&gt;&lt;/a&gt; (and was finally able to release a stable version), the goal is to make it easier for beginner to intermediate git users to undo their last (accidental) git command. Because we are not perfect and commit mistakes.&lt;/p&gt;

&lt;p&gt;‚ÄúOh wait I deleted the &lt;em&gt;auth-jwt&lt;/em&gt; branch without merging!! fuck‚Äù&lt;br&gt;&lt;br&gt;
&lt;em&gt;Opens browser&lt;/em&gt;&lt;br&gt;&lt;br&gt;
‚ÄúHow to restore deleted branch‚Äù&lt;br&gt;&lt;br&gt;
&lt;em&gt;Wastes 5 minutes reading the thread,&lt;/em&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Brain context switch, losses focus&lt;/em&gt;&lt;br&gt;&lt;br&gt;
‚ÄúAarrgh, Git sucks‚Äù&lt;/p&gt;

&lt;p&gt;Failure is a good way to learn something new but how many times are you going to mess up with git, if your ultimate goal is to deliver the new feature in your startup as fast as possible, huh? Git is great but it‚Äôs not really good with developer experience (DX).&lt;/p&gt;

&lt;p&gt;Yo bhupesh, I can just you know &lt;em&gt;alias&lt;/em&gt; this command. Oh cool, good luck remembering that alias after 1 month when you fuck-up again.&lt;/p&gt;

&lt;p&gt;If you are in the gang of getting things done, adding &lt;strong&gt;ugit&lt;/strong&gt; might be a good choice for you.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Bhupesh-V"&gt;
        Bhupesh-V
      &lt;/a&gt; / &lt;a href="https://github.com/Bhupesh-V/ugit"&gt;
        ugit
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      üö®Ô∏è ugit helps you undo your last git command with grace. Your damage control git buddy
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
ugit&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/34342551/115037937-a608d800-9eec-11eb-88a9-252da7d6f507.png"&gt;&lt;img alt="ugit logo" height="100px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--FjBfTvje--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/34342551/115037937-a608d800-9eec-11eb-88a9-252da7d6f507.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
&lt;code&gt;Undo your last oopsie üôàÔ∏è in git with ease&lt;/code&gt;
&lt;/h4&gt;
&lt;p&gt;
  &lt;a href="https://github.com/Bhupesh-V/ugit/blob/master/LICENSE"&gt;
    &lt;img alt="License: MIT" src="https://camo.githubusercontent.com/d0c4f329325913dc80e868cce90186ce92143e28d3b2cbfb66e1e45abf149e98/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f426875706573682d562f75676974"&gt;
  &lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/Bhupesh-V/ugit/master/"&gt;
    &lt;img alt="platform support linux and macos" src="https://camo.githubusercontent.com/e23bd4e11e8aef909a9ff2c12990ee4ae7bf8583da60df079eda588fb2469a16/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706c6174666f726d2d474e552f4c696e757820253743204d61634f532d626c7565"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/ellerbrock/open-source-badges"&gt;
    &lt;img alt="bash love" src="https://res.cloudinary.com/practicaldev/image/fetch/s--_QXTYKQz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/ellerbrock/open-source-badges/master/badges/bash-v1/bash.png"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/bhupeshimself" rel="nofollow"&gt;
    &lt;img alt="Twitter: bhupeshimself" src="https://camo.githubusercontent.com/8191a674bed748b85e1bd7c9320ec24a9c9c8c6e32bc924ae1d7db0377527411/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f62687570657368696d73656c662e7376673f7374796c653d736f6369616c"&gt;
  &lt;/a&gt;
  &lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/34342551/114261429-1ea4fb80-99f8-11eb-92b4-66315a65b854.gif"&gt;&lt;img alt="ugit demo gif" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KvFKlzIt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/34342551/114261429-1ea4fb80-99f8-11eb-92b4-66315a65b854.gif"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
Why &lt;code&gt;ugit&lt;/code&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You did an accidental &lt;code&gt;git&lt;/code&gt; command you didn't want to.&lt;/li&gt;
&lt;li&gt;You don't want to waste your time searching on &lt;em&gt;how to undo ...&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Because ugit is cool&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
What's in the box&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ugit&lt;/code&gt; supports undoing following operations, some are a WIP. If you know of any other operations that can be undone and is not in the list, make sure to send a quick PR üíõÔ∏è&lt;/p&gt;
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;
 Undo &lt;code&gt;git commit&lt;/code&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Undo &lt;code&gt;git add&lt;/code&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Undo &lt;code&gt;git push&lt;/code&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Undo &lt;code&gt;git branch -D&lt;/code&gt; (branch delete)&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Undo &lt;code&gt;git pull&lt;/code&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Undo &lt;code&gt;git reset&lt;/code&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Undo &lt;code&gt;git tag -d&lt;/code&gt; (tag delete)&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Undo &lt;code&gt;git stash apply&lt;/code&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Undo &lt;code&gt;git stash pop/drop/clear&lt;/code&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Undo accidental file delete (Restore a deleted file after a commit)&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Undo (Restore) a file to a previous version&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Undo &lt;code&gt;git merge&lt;/code&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Undo &lt;code&gt;git tag&lt;/code&gt; (rename a tag)&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Undo &lt;code&gt;git rebase&lt;/code&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Undo &lt;code&gt;git cherry-pick&lt;/code&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Undo &lt;code&gt;git worktree remove&lt;/code&gt;‚Ä¶&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Bhupesh-V/ugit"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
Ok enough talking.
&lt;h2&gt;
  &lt;a href="#what-is-raw-ugit-endraw-"&gt;
  &lt;/a&gt;
  What is &lt;code&gt;ugit&lt;/code&gt;?
&lt;/h2&gt;

&lt;p&gt;It‚Äôs just a simple shell script with guided programmatic steps to undo your last git command, powered by FZF built for people who live and work with terminals every day.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#guided-tutorials"&gt;
  &lt;/a&gt;
  Guided Tutorials
&lt;/h2&gt;

&lt;p&gt;Below are some GIF demos of undoing some git operations, the list is long (around 17 scenarios) but I am only demonstrating some common ones.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#undoing-raw-git-add-endraw-"&gt;
  &lt;/a&gt;
  Undoing &lt;code&gt;git add&lt;/code&gt;
&lt;/h3&gt;


  


&lt;h3&gt;
  &lt;a href="#undoing-raw-git-branch-d-endraw-restore-deleted-branch"&gt;
  &lt;/a&gt;
  Undoing &lt;code&gt;git branch -D&lt;/code&gt; (Restore deleted branch)
&lt;/h3&gt;


  


&lt;h2&gt;
  &lt;a href="#undoingrestoring-file-to-previous-version"&gt;
  &lt;/a&gt;
  Undoing/Restoring file to previous version
&lt;/h2&gt;


  


&lt;h3&gt;
  &lt;a href="#undoing-raw-git-merge-endraw-"&gt;
  &lt;/a&gt;
  Undoing &lt;code&gt;git merge&lt;/code&gt;
&lt;/h3&gt;


  


&lt;h3&gt;
  &lt;a href="#i-dont-like-your-stupid-script"&gt;
  &lt;/a&gt;
  I don‚Äôt like your stupid script
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WtrVD5RW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/bhupesh/blog_content_pics/sed-doggo_e7RD-mM7L.webp" class="article-body-image-wrapper"&gt;&lt;img alt="sad dogo crying" src="https://res.cloudinary.com/practicaldev/image/fetch/s--WtrVD5RW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/bhupesh/blog_content_pics/sed-doggo_e7RD-mM7L.webp"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cool, I mean we are still friends right?? Friends help friends avoid git mistakes, that‚Äôs why I wrote an accompanying text guide on &lt;a href="https://bhupesh.gitbook.io/notes/git/how-to-undo-anything-in-git"&gt;How to undo anything in Git&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Share it with your friends, co-workers. No hard feelings&lt;/p&gt;

&lt;p&gt;Peace ‚úåÔ∏è&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>git</category>
      <category>github</category>
      <category>productivity</category>
    </item>
    <item>
      <title>C Programming Questions and Answers</title>
      <author>Thushara Thiwanka</author>
      <pubDate>Sun, 02 May 2021 06:05:43 +0000</pubDate>
      <link>https://dev.to/thusharax/c-programming-2i95</link>
      <guid>https://dev.to/thusharax/c-programming-2i95</guid>
      <description>&lt;p&gt;Shortly after starting a campus in the middle of last year, I created a separate GitHub repository for C Programming.&lt;/p&gt;

&lt;p&gt;I created this repository to put Questions and Answers related to c programming in the Introduction to Programming module, which is our first-year first-semester subject.&lt;/p&gt;

&lt;p&gt;Here is the link to that Repository &lt;a href="https://github.com/ThusharaX/C-programming/"&gt;C-programming&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank You!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ThusharaX"&gt;
        ThusharaX
      &lt;/a&gt; / &lt;a href="https://github.com/ThusharaX/C-programming"&gt;
        C-programming
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      C programming questions
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
C programming&lt;/h1&gt;
&lt;h2&gt;
&lt;strong&gt;IT 1010 Introduction to Programming&lt;/strong&gt;
&lt;/h2&gt;
&lt;h3&gt;
This project need a &lt;strong&gt;star&lt;/strong&gt; ‚≠ê from you ‚ô•
&lt;/h3&gt;
&lt;br&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/12b17fa0717af35bd16dd898913a62471093326a44e4331ff74e1b65cf070a49/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c616e6775616765732f746f702f5468757368617261582f432d70726f6772616d6d696e67"&gt;&lt;img src="https://camo.githubusercontent.com/12b17fa0717af35bd16dd898913a62471093326a44e4331ff74e1b65cf070a49/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c616e6775616765732f746f702f5468757368617261582f432d70726f6772616d6d696e67" alt="GitHub top language"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/dba8c1b40e9a235ca118172d52e664ad1abd6886e64df205619d0bc52e8d18cc/68747470733a2f2f76697369746f722d62616467652e676c697463682e6d652f62616467653f706167655f69643d5468757368617261582e432d70726f6772616d6d696e67"&gt;&lt;img src="https://camo.githubusercontent.com/dba8c1b40e9a235ca118172d52e664ad1abd6886e64df205619d0bc52e8d18cc/68747470733a2f2f76697369746f722d62616467652e676c697463682e6d652f62616467653f706167655f69643d5468757368617261582e432d70726f6772616d6d696e67" alt="visitor badge"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/28908c30c9d53137031e433dcb0f5a0bcb52dd7483c4a4a1ffe90a91a12cf6f1/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f5468757368617261582f432d70726f6772616d6d696e673f7374796c653d736f6369616c"&gt;&lt;img src="https://camo.githubusercontent.com/28908c30c9d53137031e433dcb0f5a0bcb52dd7483c4a4a1ffe90a91a12cf6f1/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f5468757368617261582f432d70726f6772616d6d696e673f7374796c653d736f6369616c" alt="GitHub forks"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/db8cffc93781a65e1b81b0c885af1d8331bd54b6b190677d417b81be4faf9fee/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6e7472696275746f72732f5468757368617261582f432d70726f6772616d6d696e67"&gt;&lt;img src="https://camo.githubusercontent.com/db8cffc93781a65e1b81b0c885af1d8331bd54b6b190677d417b81be4faf9fee/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6e7472696275746f72732f5468757368617261582f432d70726f6772616d6d696e67" alt="GitHub contributors"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/564d906b948da12fca189825f515877438739b3fdb6f5617823ade1ed2f75ea3/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f5468757368617261582f432d70726f6772616d6d696e673f7374796c653d736f6369616c"&gt;&lt;img src="https://camo.githubusercontent.com/564d906b948da12fca189825f515877438739b3fdb6f5617823ade1ed2f75ea3/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f5468757368617261582f432d70726f6772616d6d696e673f7374796c653d736f6369616c" alt="GitHub Repo stars"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/0b9ca89de39d1eff2a700c46f960d44e8558cdc69e9896f16782ecf28fcc895f/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7265706f2d73697a652f5468757368617261582f432d70726f6772616d6d696e67"&gt;&lt;img src="https://camo.githubusercontent.com/0b9ca89de39d1eff2a700c46f960d44e8558cdc69e9896f16782ecf28fcc895f/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7265706f2d73697a652f5468757368617261582f432d70726f6772616d6d696e67" alt="GitHub repo size"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/ab39a03ab7fab7f4b68b85c693a88ee6d0eef706dc0963b601e41fb4844d4c9d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f77617463686572732f5468757368617261582f432d70726f6772616d6d696e673f7374796c653d736f6369616c"&gt;&lt;img src="https://camo.githubusercontent.com/ab39a03ab7fab7f4b68b85c693a88ee6d0eef706dc0963b601e41fb4844d4c9d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f77617463686572732f5468757368617261582f432d70726f6772616d6d696e673f7374796c653d736f6369616c" alt="GitHub watchers"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/f064537a6211360cb5c689290bfa76300843b680df9727104d1dadc2ce46cd3d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f5468757368617261582f432d70726f6772616d6d696e67"&gt;&lt;img src="https://camo.githubusercontent.com/f064537a6211360cb5c689290bfa76300843b680df9727104d1dadc2ce46cd3d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f5468757368617261582f432d70726f6772616d6d696e67" alt="GitHub issues"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/cfd58c5f5463fa8c519bd912538b8659f8c46eac563d7fa463f725a19d41440b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d70722f5468757368617261582f432d70726f6772616d6d696e67"&gt;&lt;img src="https://camo.githubusercontent.com/cfd58c5f5463fa8c519bd912538b8659f8c46eac563d7fa463f725a19d41440b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d70722f5468757368617261582f432d70726f6772616d6d696e67" alt="GitHub pull requests"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/dda78bd1334129738cf2edc7c5f5bea447eb130003e35e76e66bc8f493024b4b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6162656c732f5468757368617261582f432d70726f6772616d6d696e672f68656c7025323077616e746564"&gt;&lt;img src="https://camo.githubusercontent.com/dda78bd1334129738cf2edc7c5f5bea447eb130003e35e76e66bc8f493024b4b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6162656c732f5468757368617261582f432d70726f6772616d6d696e672f68656c7025323077616e746564" alt="GitHub labels"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/212c2677035ec93ac5a1e9d4f079dc71b9c21b3b397154a7f34098ac2ce29a7f/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f5468757368617261582f432d70726f6772616d6d696e67"&gt;&lt;img src="https://camo.githubusercontent.com/212c2677035ec93ac5a1e9d4f079dc71b9c21b3b397154a7f34098ac2ce29a7f/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f5468757368617261582f432d70726f6772616d6d696e67" alt="GitHub"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
üå± This is a repository for C programming related questions.&lt;/li&gt;
&lt;li&gt;
üëØ Everyone is welcome to contribute.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Contributors ‚ú®
&lt;/h2&gt;
&lt;p&gt;Thanks goes to these wonderful people ‚ù§Ô∏è&lt;/p&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
    &lt;tbody&gt;
&lt;tr&gt;
        &lt;td&gt;
&lt;a href="https://github.com/ThusharaX"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0HLDM9I0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars2.githubusercontent.com/u/47711719%3Fs%3D400%26v%3D4" width="100px;" alt=""&gt;
        &lt;br&gt;
        &lt;b&gt;ThusharaX&lt;/b&gt;&lt;/a&gt;
        &lt;br&gt;
        &lt;/td&gt;
        &lt;td&gt;
&lt;a href="https://github.com/AshenWijesingha"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4tJcIYmK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars2.githubusercontent.com/u/66056859%3Fs%3D400%26v%3D4" width="100px;" alt=""&gt;
        &lt;br&gt;
        &lt;b&gt;AshenWijesingha&lt;/b&gt;&lt;/a&gt;
        &lt;br&gt;
        &lt;/td&gt;
        &lt;td&gt;
&lt;a href="https://github.com/Darklaneanjana"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8IeyEIHh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars2.githubusercontent.com/u/23092020%3Fs%3D400%26v%3D4" width="100px;" alt=""&gt;
        &lt;br&gt;
        &lt;b&gt;Darklaneanjana&lt;/b&gt;&lt;/a&gt;
        &lt;br&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;
&lt;a href="https://github.com/pasindulakshan"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wnmX0Sdt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars2.githubusercontent.com/u/74607482%3Fs%3D400%26v%3D4" width="100px;" alt=""&gt;
        &lt;br&gt;
        &lt;b&gt;pasindulakshan&lt;/b&gt;&lt;/a&gt;
        &lt;br&gt;
        &lt;/td&gt;
        &lt;td&gt;
&lt;a href="https://github.com/SasithaLakshan"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xcr3blgy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars2.githubusercontent.com/u/74831645%3Fs%3D400%26v%3D4" width="100px;" alt=""&gt;
        &lt;br&gt;
        &lt;b&gt;SasithaLakshan&lt;/b&gt;&lt;/a&gt;
        &lt;br&gt;
        &lt;/td&gt;
        &lt;td&gt;
&lt;a href="https://github.com/hirusha2577"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lnq02ZWJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars2.githubusercontent.com/u/56668123%3Fs%3D400%26v%3D4" width="100px;" alt=""&gt;
        &lt;br&gt;
        &lt;b&gt;hirusha2577&lt;/b&gt;&lt;/a&gt;
        &lt;br&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ThusharaX/C-programming"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


</description>
      <category>c</category>
      <category>programming</category>
    </item>
    <item>
      <title>Dynamic Programming Vs Greedy method</title>
      <author>Susritha09</author>
      <pubDate>Sun, 02 May 2021 06:04:18 +0000</pubDate>
      <link>https://dev.to/susritha09/dynamic-programming-vs-greedy-method-2km1</link>
      <guid>https://dev.to/susritha09/dynamic-programming-vs-greedy-method-2km1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#dynamic-programming"&gt;
  &lt;/a&gt;
  Dynamic Programming:
&lt;/h2&gt;

&lt;p&gt;It just solves problems by combining the sub problems to solutions only of the sub problems were independent.&lt;br&gt;
It can be used for solving both mathematical optimization method and computer programming method.&lt;br&gt;
For example,it can be used for finding the shortest path in graph.&lt;br&gt;
The algorithm used is:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iQP7cync--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ton0dn7c5vgq69auw3m8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iQP7cync--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ton0dn7c5vgq69auw3m8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#greedy-method"&gt;
  &lt;/a&gt;
  Greedy Method:
&lt;/h2&gt;

&lt;p&gt;Greedy method solves problems step by step which leads to global optimization solution.&lt;br&gt;
Algorithm for greedy is:&lt;br&gt;
Greedy(D,n)&lt;br&gt;
//In Greedy approach D is domain&lt;br&gt;
//from which solution is to be obtained of size n&lt;br&gt;
//Initially assume&lt;br&gt;
      solution&amp;lt;-0&lt;br&gt;
      for i&amp;lt;-1 to n do{&lt;br&gt;
             s&amp;lt;-select(D)&lt;br&gt;
             if(Feasible solution,s))then&lt;br&gt;
               Solution&amp;lt;-Union(Solution,s)&lt;br&gt;
}&lt;br&gt;
return solution&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Data.js mini framework for beginners</title>
      <author>Jahongir Sobirov</author>
      <pubDate>Sun, 02 May 2021 05:42:04 +0000</pubDate>
      <link>https://dev.to/jahongir2007/data-js-mini-framework-for-beginners-p5o</link>
      <guid>https://dev.to/jahongir2007/data-js-mini-framework-for-beginners-p5o</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---R4oDl31--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1p2y5b5y33j6zswull3t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---R4oDl31--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1p2y5b5y33j6zswull3t.png" alt="Data.js"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-datajs"&gt;
  &lt;/a&gt;
  What is Data.js?
&lt;/h2&gt;

&lt;p&gt;Data.js is a mini-framework that runs on Node.js. It is mainly programmed to work with arrays. This framework is able to display arrays in different formats and again give information about how much information is in the array. Its syntax is very simple.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-datajs-we-create-a-program-called-subgroup-of-numbers"&gt;
  &lt;/a&gt;
  In Data.js we create a program called "subgroup of numbers"
&lt;/h2&gt;

&lt;p&gt;We can download Data.js from &lt;a href="https://github.com/Jahongir2007/data.js"&gt;github&lt;/a&gt;. The location of the downloaded folder: (all &lt;a href="https://jahongir2007.github.io/data.js/"&gt;guides&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;|___bin
      |___data.js
      |___test.js
|___docs
      |___config.yml
      |___index.md
|___LICENSE
|___README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We attach the data.js file in the bin folder to our program (Of course we can copy the bin folder from the uploaded folder to the folder we are creating).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;bin&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;data.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//importing data.js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#now-its-your-turn-to-create-the-program"&gt;
  &lt;/a&gt;
  Now it's your turn to create the program:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;bin&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;data.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;],{&lt;/span&gt;
   &lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;false&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;getLenght&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;join&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[5,3,4,10] 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
    </item>
    <item>
      <title>React: Marquee using Framer Motion</title>
      <author>Rahul </author>
      <pubDate>Sun, 02 May 2021 04:39:32 +0000</pubDate>
      <link>https://dev.to/holdmypotion/react-marquee-in-framer-motion-3d5a</link>
      <guid>https://dev.to/holdmypotion/react-marquee-in-framer-motion-3d5a</guid>
      <description>&lt;p&gt;This is called a "marquee" and apparently, I needed one for my portfolio website. So, I thought I might as well share it with you all!&lt;/p&gt;

&lt;p&gt;In this blog, we'll create an infinitely running long text (that seems to be very trendy lately) using &lt;a href="https://www.framer.com/motion/"&gt;Framer Motion&lt;/a&gt; and obviously react!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://corhc.csb.app/"&gt;Live Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/holdmypotion-marquee-corhc"&gt;Code Sand Box&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/holdmypotion/marquee"&gt;Github Repo&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h1&gt;

&lt;p&gt;Run the following commands to set up a react app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;npx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;create-react-app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;marquee&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;marquee&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;npm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;framer-motion&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;npm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#final-file-structure"&gt;
  &lt;/a&gt;
  Final File Structure
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;src/&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sk1HgJ9y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2fdu1kl5f9rs4sqmfq1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sk1HgJ9y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2fdu1kl5f9rs4sqmfq1.png" alt="Final file structure"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#marqueecss"&gt;
  &lt;/a&gt;
  Marquee.css
&lt;/h1&gt;

&lt;p&gt;Create a file &lt;code&gt;src/components/marquee.css&lt;/code&gt; and paste the code below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.marquee&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;206px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow-x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.track&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;white-space&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;nowrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.track&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Antonio&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-text-fill-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-text-stroke-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-text-stroke-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f4955c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#marqueejs"&gt;
  &lt;/a&gt;
  Marquee.js
&lt;/h1&gt;

&lt;p&gt;Create a file &lt;code&gt;src/components/marquee.js&lt;/code&gt; and paste the code below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// 1. Importing framer-motion&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;motion&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;framer-motion&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./marquee.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// 2. Defining Variants&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;marqueeVariants&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1035&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;Infinity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;repeatType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;loop&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;ease&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;linear&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Marquee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"marquee"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* 3. Using framer motion */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;motion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;
          &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"track"&lt;/span&gt;
          &lt;span class="na"&gt;variants&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;marqueeVariants&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"animate"&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            Let's Work Together. Let's Work Together. Let's Work Together. Let's
            Work Together. Let's Work Together. Let's Work Together. Let's Work
            Together
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;motion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Marquee&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's break it down.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Importing Framer Motion:
&lt;code&gt;motion&lt;/code&gt; is an API provided by framer-motion that supercharges a normal JSX element(div, h1, span, you name it:)), giving us a lot more props to work with.&lt;/li&gt;
&lt;li&gt;Defining Variants:
This is the actual magic that makes the stuff do weird things.
Here, we are making a variable named &lt;code&gt;marqueeVariants&lt;/code&gt; (you can name it anything) and we are describing a property named &lt;code&gt;animate&lt;/code&gt; (again, name it whatever you like) that does all the jazz.

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;x: [0, -1035]&lt;/code&gt; ‚Üí will translate the element from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;-1035px&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Below this, we are defining the way we want our little element to translate, i.e. the &lt;code&gt;transition&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;repeatType: "loop"&lt;/code&gt; ‚Üí makes the translation go again and again, i.e. in a loop&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;repeat: Infinity&lt;/code&gt; ‚Üí makes the loop go infinite times&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;duration: 5&lt;/code&gt; ‚Üí time taken to complete the transition/loop.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ease: "linear"&lt;/code&gt; ‚Üí makes the speed of translation equal throughout its course.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Apply &lt;code&gt;motion&lt;/code&gt; and the variants on an element:

&lt;ul&gt;
&lt;li&gt;Set the &lt;code&gt;variants&lt;/code&gt; property to the name of the variable defined, in our case &lt;code&gt;marqueeVariants&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Set the &lt;code&gt;animate&lt;/code&gt; property to the name of the property defined in the &lt;code&gt;marqueeVariants&lt;/code&gt;, in our case &lt;code&gt;animate&lt;/code&gt;
(AS A STRING)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#appjs"&gt;
  &lt;/a&gt;
  App.js
&lt;/h1&gt;

&lt;p&gt;We just need to add this in our App.js and admire it while it rolls.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Marquee&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/marquee&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Marquee&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Oh, I almost forgot. The font.&lt;/p&gt;

&lt;p&gt;Here, paste this code in index.css&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url("https://fonts.googleapis.com/css2?family=Antonio:wght@400;500;600;700&amp;amp;display=swap")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;-apple-system&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BlinkMacSystemFont&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;"Segoe UI"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;"Roboto"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;"Oxygen"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;"Ubuntu"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;"Cantarell"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;"Fira Sans"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;"Droid Sans"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;"Helvetica Neue"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;"Antonio"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-font-smoothing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;antialiased&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;-moz-osx-font-smoothing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grayscale&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2e2e2e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;code&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;source-code-pro&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Menlo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Monaco&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Consolas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;"Courier New"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nb"&gt;monospace&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#thank-you-so-much-for-reading"&gt;
  &lt;/a&gt;
  Thank you so much for reading
&lt;/h3&gt;

&lt;p&gt;Leave your review down below.&lt;br&gt;
Later.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>design</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Publishing NuGet packages to a private Azure Artifacts feed with YAML Build files</title>
      <author>Will Velida</author>
      <pubDate>Sun, 02 May 2021 04:36:15 +0000</pubDate>
      <link>https://dev.to/willvelida/publishing-nuget-packages-to-a-private-azure-artifacts-feed-with-yaml-build-files-3bnb</link>
      <guid>https://dev.to/willvelida/publishing-nuget-packages-to-a-private-azure-artifacts-feed-with-yaml-build-files-3bnb</guid>
      <description>&lt;p&gt;We can publish NuGet packages to internal feeds hosted in Azure Artifacts easily via pipelines defined in YAML files.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xsAgDNF1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xefx05tb8n01lgnjj3fe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xsAgDNF1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xefx05tb8n01lgnjj3fe.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/devops/artifacts/?view=azure-devops"&gt;Using Azure Artifacts&lt;/a&gt;, we can publish NuGet packages to a private (or public) NuGet feed. These feeds can be scoped in Azure DevOps at either an organization level or at a project level.&lt;/p&gt;

&lt;p&gt;Creating a private NuGet feed in Azure DevOps is really simple. This article below shows have you can set one up. If you‚Äôre following along and you haven‚Äôt set up an internal feed yet, stop reading this article and check out the article &lt;a href="https://docs.microsoft.com/en-us/azure/devops/artifacts/get-started-nuget?view=azure-devops&amp;amp;tabs=windows"&gt;here&lt;/a&gt;. Once you‚Äôre done with that, you can return here.&lt;/p&gt;

&lt;p&gt;This post will show you how we can use a YAML build file to publish the NuGet packages we create to our own Private feeds in Azure Artifacts.&lt;/p&gt;

&lt;p&gt;Now you might have an opinion on YAML in general and yes, we can achieve the same result via the Classic user interface, but I like being able to include our build files within our code repository and providing me with the ability to check the history of our build file using the git history of that YAML file.&lt;/p&gt;

&lt;p&gt;To publish our NuGet package to our internal feed, we need to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create our NuGet package.&lt;/li&gt;
&lt;li&gt;Decide our versioning strategy for our package.&lt;/li&gt;
&lt;li&gt;Publish our package to our Internal Feed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For this post, I‚Äôm going to be using a helper library that I‚Äôve been using for my own health application. If you want to have a look at it while reading this (it includes the YAML file), check it out &lt;a href="https://github.com/willvelida/MyHealth.Common"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating our NuGet Package&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Before jumping into the meat of our build file, We need to set some things up:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Let‚Äôs break this down:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We trigger the build to kick off every time we make a commit to our &lt;strong&gt;main&lt;/strong&gt; branch.&lt;/li&gt;
&lt;li&gt;We set some common variables that we will need throughout our build pipeline.&lt;/li&gt;
&lt;li&gt;We‚Äôre using a Linux image as our build agent.&lt;/li&gt;
&lt;li&gt;We then install the .NET Core SDK on our build agent, restore our project using a &lt;strong&gt;DotNetCoreCLI&lt;/strong&gt; task that runs the restore command, then we build the project using another task that runs the build command.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To create a NuGet package in our build file, we need to add a &lt;strong&gt;DotNetCoreCLI&lt;/strong&gt; task like so:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;In this task, we are running the pack command and telling the task to pack our project path that I‚Äôve defined earlier in the YAML file. I‚Äôve set the &lt;strong&gt;nobuild&lt;/strong&gt; argument to true since I‚Äôve already built my project.&lt;/p&gt;

&lt;p&gt;My package is a .NET Standard package. For &lt;em&gt;.NET Core and .NET Standard packages&lt;/em&gt;, Microsoft recommends that you use the &lt;strong&gt;DotNetCoreCLI&lt;/strong&gt; tasks. If you‚Äôre building &lt;em&gt;packages for .NET Framework&lt;/em&gt;, you can use a &lt;strong&gt;NuGet&lt;/strong&gt; task.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Versioning Strategy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are a couple of ways we can do this. In my package &lt;strong&gt;.csproj&lt;/strong&gt; file, I‚Äôve specified my Version number like so:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;If we wanted to achieve this via a build task defined in YAML, we can do so like this:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;With the &lt;strong&gt;NuGet&lt;/strong&gt; task, we can use the &lt;strong&gt;Major.Minor.Patch&lt;/strong&gt; semantic versioning scheme for our builds. However, once a version has been produced, we can‚Äôt update or replace that version. They are immutable. To produce new versions of our package each time we update them, we can do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use the &lt;strong&gt;$(rev:.r)&lt;/strong&gt; variable for the version number that we wish to increment. This will automatically increment the build number for that variable each time we push to our branch, while keeping the other variables constant.&lt;/li&gt;
&lt;li&gt;Use the &lt;strong&gt;$(date:yyyyMMdd)&lt;/strong&gt; variable. This is ideal for creating prelease labels for the build, while allowing us to keep our major, minor and patch versions constant.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Publishing our package to the feed&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that we have a package, we can publish it to our feed. In order to publish to our Azure Artifacts feed, we‚Äôll need to set the &lt;a href="https://docs.microsoft.com/en-us/azure/devops/artifacts/feeds/feed-permissions?view=azure-devops#azure-artifacts-settings"&gt;Project Collection Build Service identity to be a Contributor on the feed&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once we have enabled that, we can add the following YAML to our build pipeline:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Here, we using &lt;strong&gt;NuGetAuthenticate&lt;/strong&gt; command to authenticate our Build server to push packages to our internal NuGet feed. We then run a &lt;strong&gt;NuGetCommand&lt;/strong&gt; task with the push command to push our package (stored in our Artifact Staging Directory) to our internal NuGet feed.&lt;/p&gt;

&lt;p&gt;Here, we have used &lt;em&gt;/&lt;/em&gt; as our VSTS feed to publish to. Remember we can scope our feeds at either the project level or at an organization level in Azure DevOps. Since my feed is scoped at the project level, I need to put the project name here.&lt;/p&gt;

&lt;p&gt;I‚Äôve also included the &lt;strong&gt;nuGetFeedType&lt;/strong&gt; argument and stated that our target field is an internal feed. Since we are using the &lt;strong&gt;push&lt;/strong&gt; command in the NuGet command task, this argument is required.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Full YAML file&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here‚Äôs our complete YAML file:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hopefully you can see how simple it is to publish our NuGet packages to a private NuGet feed in Azure Artifacts. This isn‚Äôt just limited to private NuGet feeds, we can also publish packages from DevOps to NuGet.org.&lt;/p&gt;

&lt;p&gt;If you want to learn more about Azure Artifacts, I recommend that you check out the &lt;a href="https://docs.microsoft.com/en-us/azure/devops/artifacts/?view=azure-devops"&gt;documentation&lt;/a&gt; that covers topics such as configuring feeds, publish NuGet (and other) types of packages and more.&lt;/p&gt;

&lt;p&gt;If you have any questions about this article, please let me know in the comments or you can reach out to me on &lt;a href="https://twitter.com/willvelida"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>azure</category>
      <category>devops</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>How to create PDFs with Go, Maroto &amp; GoFakeIt</title>
      <author>Div Rhino</author>
      <pubDate>Sun, 02 May 2021 04:27:37 +0000</pubDate>
      <link>https://dev.to/divrhino/creating-a-pdf-with-go-maroto-gofakeit-3c7m</link>
      <guid>https://dev.to/divrhino/creating-a-pdf-with-go-maroto-gofakeit-3c7m</guid>
      <description>&lt;p&gt;&lt;em&gt;Originally posted on &lt;a href="https://divrhino.com/articles/create-pdf-document-with-go-maroto-gofakeit/"&gt;divrhino.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/jwOy4JgleTU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In this tutorial, we will learn how to use the Maroto package to create a PDF. From invoices to certificates, being able to generate a PDF from app data is a pretty handy feature. In this tutorial, we will use the Maroto package to build and save a product list. We will also learn how we can use the GoFakeIt package to generate some random dummy data that we can use in our PDF.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;To follow along, you will need to have Go installed. We are using version &lt;code&gt;1.16.2&lt;/code&gt; for this tutorial.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-packages"&gt;
  &lt;/a&gt;
  The packages
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#maroto"&gt;
  &lt;/a&gt;
  Maroto
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://github.com/johnfercher/maroto"&gt;Maroto&lt;/a&gt; package is described as being &lt;code&gt;bootstrap-inspired&lt;/code&gt;, but you don't need to know Bootstrap to use it. However if you have used Bootstrap before, the approach Maroto takes will feel familiar to you. A document is built using rows, columns and components. The package gives us the ability to include features such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;images&lt;/li&gt;
&lt;li&gt;signatures&lt;/li&gt;
&lt;li&gt;Barcodes, and&lt;/li&gt;
&lt;li&gt;QR Codes&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#gofakeit"&gt;
  &lt;/a&gt;
  GoFakeIt
&lt;/h3&gt;

&lt;p&gt;Using mock data is a great way to speed up the prototyping process. We will use the &lt;a href="https://github.com/brianvoe/gofakeit"&gt;GoFakeIt&lt;/a&gt; package to create a little dummy data generator to insert into our PDF.&lt;/p&gt;

&lt;p&gt;We will see how to install these in the Getting Started section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wireframe-of-what-were-building"&gt;
  &lt;/a&gt;
  Wireframe of what we're building
&lt;/h2&gt;

&lt;p&gt;We will be creating an product list for an imaginary fruit shop called "&lt;strong&gt;Div Rhino Fruit&lt;/strong&gt;". The document will have a &lt;code&gt;header&lt;/code&gt; and a &lt;code&gt;table&lt;/code&gt; of products.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rO1URIIm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r65a0dn596eb05jirgeu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rO1URIIm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r65a0dn596eb05jirgeu.jpg" alt="Mockup of Div Rhino Fruit List PDF"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h2&gt;

&lt;p&gt;Now that we've covered the basic background information, we can start setting up our project.&lt;/p&gt;

&lt;p&gt;Inside our &lt;code&gt;Sites&lt;/code&gt; directory, we can make a new folder which we will call &lt;code&gt;fruitful-pdf&lt;/code&gt; and we will change into it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;Sites
&lt;span class="nb"&gt;mkdir &lt;/span&gt;fruitful-pdf
&lt;span class="nb"&gt;cd &lt;/span&gt;fruitful-pdf

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We will be using &lt;code&gt;go modules&lt;/code&gt; to manage our dependencies.&lt;/p&gt;

&lt;p&gt;It is a good idea to name your project using the URL where it can be downloaded, so I'm going to use my Github repo URL as the name of my package. Please feel free to substitute the following command with your own Github account or personal website&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go mod init github.com/divrhino/fruitful-pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After the command runs successfully, you should see a &lt;code&gt;go.mod&lt;/code&gt; file in your project directory.&lt;/p&gt;

&lt;p&gt;Next we will install the &lt;code&gt;Maroto&lt;/code&gt; package. This tutorial will be using version &lt;code&gt;v0.31.0&lt;/code&gt;. If you're using an older version of the &lt;code&gt;Maroto&lt;/code&gt; package, certain properties such as text colours may not be available.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go get &lt;span class="nt"&gt;-u&lt;/span&gt; github.com/johnfercher/maroto
go get github.com/johnfercher/maroto/internal@v0.31.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We will also need to install the &lt;code&gt;GoFakeIt&lt;/code&gt; package for our mock data generator. We will be using version &lt;code&gt;v6.3.0&lt;/code&gt; for this tutorial. You can install it with the following command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go get github.com/brianvoe/gofakeit/v6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After installing these packages, you should see a &lt;code&gt;go.sum&lt;/code&gt; file has been created in your project folder. This can be thought of as a lock file. It is used to verify that the &lt;a href="https://golangbyexample.com/go-mod-sum-module/"&gt;checksum&lt;/a&gt; of dependencies have not changed.&lt;/p&gt;

&lt;p&gt;Those are the only third-party packages we need. We are now ready to start creating our PDF structure.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#skeleton-pdf"&gt;
  &lt;/a&gt;
  Skeleton PDF
&lt;/h2&gt;

&lt;p&gt;Like with most Go projects, we can go ahead and create a &lt;code&gt;main.go&lt;/code&gt; file at the root of our project directory.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Inside our &lt;code&gt;main.go&lt;/code&gt; file, let's import all our necessary &lt;code&gt;Maroto&lt;/code&gt; sub-packages. Each package provides us with useful functions that will allow us to use things like colours, images, fonts and components.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, inside the body of our &lt;code&gt;func main()&lt;/code&gt;, we can create a &lt;code&gt;new maroto&lt;/code&gt; using the &lt;code&gt;pdf&lt;/code&gt; sub-package. The &lt;code&gt;NewMaroto()&lt;/code&gt; method creates a new &lt;code&gt;maroto&lt;/code&gt; instance and returns a pointer to &lt;code&gt;pdf.Maroto&lt;/code&gt;. It also expects two arguments: (i) orientation, and (ii) paper size. We can get these values from the &lt;code&gt;consts&lt;/code&gt; sub-package:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/johnfercher/maroto/pkg/consts"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/johnfercher/maroto/pkg/pdf"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewMaroto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Portrait&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;A4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We also want to give our PDF document some margins so the content isn't falling off the sides. We can do this by using the &lt;code&gt;SetPageMargins&lt;/code&gt; method, which takes 3 values: (i) a &lt;code&gt;left&lt;/code&gt;, (ii) a &lt;code&gt;top&lt;/code&gt;, and (iii) a &lt;code&gt;right&lt;/code&gt; margin value.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/johnfercher/maroto/pkg/consts"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/johnfercher/maroto/pkg/pdf"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewMaroto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Portrait&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;A4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetPageMargins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Our content isn't ready yet, but we can go ahead and save an empty file for now using the &lt;code&gt;OutputFileAndClose()&lt;/code&gt; method. Let's tell it that we want to save the output as &lt;code&gt;div_rhino_fruit.pdf&lt;/code&gt;, in a folder called &lt;code&gt;pdfs&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/johnfercher/maroto/pkg/consts"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/johnfercher/maroto/pkg/pdf"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewMaroto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Portrait&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;A4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetPageMargins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OutputFileAndClose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"pdfs/div_rhino_fruit.pdf"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We'll have to remember to create the &lt;code&gt;pdfs&lt;/code&gt; folder too.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="n"&gt;pdfs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;OutputFileAndClose()&lt;/code&gt; method returns an error, so let's do some quick error handling before we move on. If, for some reason, we're unable to output a &lt;code&gt;PDF&lt;/code&gt; file, the program immediately aborts, because its only purpose is to create this &lt;code&gt;PDF&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"os"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/johnfercher/maroto/pkg/consts"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/johnfercher/maroto/pkg/pdf"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewMaroto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Portrait&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;A4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetPageMargins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OutputFileAndClose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"pdfs/div_rhino_fruit.pdf"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"‚ö†Ô∏è  Could not save PDF:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And just so we know something is actually happening, let's print out a little message every time we run our code:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"os"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/johnfercher/maroto/pkg/consts"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/johnfercher/maroto/pkg/pdf"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewMaroto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Portrait&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;A4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetPageMargins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OutputFileAndClose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"pdfs/div_rhino_fruit.pdf"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"‚ö†Ô∏è  Could not save PDF:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"PDF saved successfully"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If we run our program now, we'll get an empty &lt;code&gt;PDF&lt;/code&gt; file saved to our &lt;code&gt;pdfs&lt;/code&gt; folder&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#building-the-header"&gt;
  &lt;/a&gt;
  Building the header
&lt;/h2&gt;

&lt;p&gt;An empty &lt;code&gt;PDF&lt;/code&gt; file isn't all that interesting, so let's add some content, starting with a header. Our header will hold an image of the "&lt;strong&gt;Div Rhino Fruit&lt;/strong&gt;" logo.&lt;/p&gt;

&lt;p&gt;We don't want to put everything in our &lt;code&gt;func main()&lt;/code&gt;, so let's create a new function to build our header. We will pass in our previously-created instance of &lt;code&gt;pdf.Maroto&lt;/code&gt; as an argument. This function will perform some transformations on the &lt;code&gt;pdf.Maroto&lt;/code&gt; instance (i.e. &lt;code&gt;m&lt;/code&gt;), and we won't be returning any values.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;buildHeading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Maroto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The Maroto package gives us a method that lets us register a header "component" that will appear on every page of our &lt;code&gt;PDF&lt;/code&gt; document. This &lt;code&gt;RegisterHeader()&lt;/code&gt; method accepts an anonymous callback function as the only argument. This anonymous function can be thought of as a header &lt;code&gt;container.&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;buildHeading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Maroto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Within the body of the "header &lt;code&gt;container&lt;/code&gt;", we can set up a row that contains a column. Much like the Bootstrap grid system, rows are wrappers for columns. Here we've given our row a height of &lt;code&gt;50&lt;/code&gt; and we've indicated that we want a full-width column that takes up &lt;code&gt;12&lt;/code&gt; spaces. The number &lt;code&gt;12&lt;/code&gt; is significant because most grid systems use &lt;code&gt;12&lt;/code&gt; columns.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;buildHeading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Maroto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Row&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Col&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We have a logo that was created beforehand and we've named it &lt;code&gt;logo_div_rhino.jpg&lt;/code&gt;. To keep things organised, let's make a new &lt;code&gt;images&lt;/code&gt; directory to hold images we use in this project. Feel free to use your own logo image instead.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;images
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We will also want to import the &lt;code&gt;props&lt;/code&gt; subpackage from &lt;code&gt;maroto&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"os"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/johnfercher/maroto/pkg/consts"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/johnfercher/maroto/pkg/pdf"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/johnfercher/maroto/pkg/props"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Inside our full-width column, we can set up an image component to display our "Div Rhino Fruit" logo. We will centralise it and tell it to take up 75% of the height of the cell.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;buildHeading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Maroto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Row&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Col&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"images/logo_div_rhino.jpg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Rect&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;Percent&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;FileImage()&lt;/code&gt; method returns an error, so let's do some quick error handling before we move on. If the image cannot be loaded, we print a message in the console to let the user know.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;buildHeading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Maroto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Row&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Col&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"images/logo_div_rhino.jpg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Rect&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;Percent&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;

                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Image file was not loaded üò± - "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next we want to create another row and full-width column to add some descriptive Text ‚Äî "Prepared for you by the Div Rhino Fruit Company".&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;buildHeading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Maroto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Row&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Col&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"images/logo_div_rhino.jpg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Rect&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;Percent&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;

                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Image file was not loaded üò± - "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Row&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Col&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Prepared for you by the Div Rhino Fruit Company"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;Style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;consts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bold&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;Align&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;consts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;getDarkPurpleColor&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;getDarkPurpleColor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Red&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="m"&gt;88&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Green&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Blue&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="m"&gt;99&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We want to use a custom colour here, so we will also want to make a new function &lt;code&gt;func getDarkPurpleColor()&lt;/code&gt; and use the &lt;code&gt;color&lt;/code&gt; sub-package that Maroto provides to create a dark purple colour&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"os"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/johnfercher/maroto/pkg/consts"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/johnfercher/maroto/pkg/pdf"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/johnfercher/maroto/pkg/props"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/johnfercher/maroto/pkg/color"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And that's our header. Let's call it inside out &lt;code&gt;func main()&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;func main&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    m :&lt;span class="o"&gt;=&lt;/span&gt; pdf.NewMaroto&lt;span class="o"&gt;(&lt;/span&gt;consts.Portrait, consts.A4&lt;span class="o"&gt;)&lt;/span&gt;
    m.SetPageMargins&lt;span class="o"&gt;(&lt;/span&gt;20, 10, 20&lt;span class="o"&gt;)&lt;/span&gt;

    buildHeading&lt;span class="o"&gt;(&lt;/span&gt;m&lt;span class="o"&gt;)&lt;/span&gt;

    err :&lt;span class="o"&gt;=&lt;/span&gt; m.OutputFileAndClose&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"pdfs/div_rhino_fruit.pdf"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if &lt;/span&gt;err &lt;span class="o"&gt;!=&lt;/span&gt; nil &lt;span class="o"&gt;{&lt;/span&gt;
        fmt.Println&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"‚ö†Ô∏è  Could not save PDF:"&lt;/span&gt;, err&lt;span class="o"&gt;)&lt;/span&gt;
        os.Exit&lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    fmt.Println&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"PDF saved successfully"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We can run our code to generate a &lt;code&gt;PDF&lt;/code&gt; file to see what this looks like:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#lay-out-a-table-of-products"&gt;
  &lt;/a&gt;
  Lay out a table of products
&lt;/h2&gt;

&lt;p&gt;We can build our table of fruit next. We first want to give the whole table a heading. We can create a new &lt;code&gt;teal&lt;/code&gt; colour and set the background colour of the cell to this &lt;code&gt;teal&lt;/code&gt; colour. Then, like we've done previously, we can add a row that contains a full-width column. We are giving the Text component properties such as &lt;code&gt;top&lt;/code&gt; position, &lt;code&gt;size&lt;/code&gt;, &lt;code&gt;color&lt;/code&gt;, etc.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;buildFruitList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Maroto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetBackgroundColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getTealColor&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Row&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Col&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Products"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="m"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewWhite&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                &lt;span class="n"&gt;Family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;consts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Courier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;Style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;consts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bold&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;Align&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;consts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;getTealColor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Red&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Green&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;166&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Blue&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="m"&gt;166&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;At this point, if you'd like to see what this looks like, you can just generate a &lt;code&gt;PDF&lt;/code&gt; and preview it:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Along with content, our table should have column headings as well. Similar to the &lt;code&gt;HTML&lt;/code&gt; table structure, we first want to create something that resembles a &lt;code&gt;thead&lt;/code&gt; and &lt;code&gt;tbody&lt;/code&gt;. We also want to set the cell colour of this section to &lt;code&gt;white&lt;/code&gt; and set the background colour of alternate rows to a light purple. We will need to create a new &lt;code&gt;light purple&lt;/code&gt; colour function.&lt;/p&gt;

&lt;p&gt;We can use the &lt;code&gt;TableList()&lt;/code&gt; component that Maroto provides to get a table. We want both the &lt;code&gt;HeaderProps&lt;/code&gt; and the &lt;code&gt;ContentProps&lt;/code&gt; to have 3 columns. We can do this by giving the &lt;code&gt;GridSizes&lt;/code&gt; property a value of &lt;code&gt;[]uint{3, 7, 2}&lt;/code&gt; (a slice of unsigned integers with the values of 3, 7 and 2). These grid sizes add up to &lt;code&gt;12&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;buildFruitList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Maroto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;tableHeadings&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Fruit"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Description"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Price"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[][]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="s"&gt;"Apple"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Red and juicy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"2.00"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Orange"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Orange and juicy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"3.00"&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="n"&gt;lightPurpleColor&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;getLightPurpleColor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetBackgroundColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getTealColor&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Row&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Col&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Products"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="m"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewWhite&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                &lt;span class="n"&gt;Family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;consts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Courier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;Style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;consts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bold&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;Align&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;consts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetBackgroundColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewWhite&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TableList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tableHeadings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TableList&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;HeaderProp&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TableListContent&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;      &lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;GridSizes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;uint&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="n"&gt;ContentProp&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TableListContent&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;      &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;GridSizes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;uint&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="n"&gt;Align&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;                &lt;span class="n"&gt;consts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;AlternatedBackground&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lightPurpleColor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;HeaderContentSpace&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Line&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;                 &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;getLightPurpleColor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Red&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="m"&gt;210&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Green&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Blue&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="m"&gt;230&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Just some notes on the code, above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;tableHeadings&lt;/code&gt; if of type &lt;code&gt;slice of string&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;the contents are &lt;code&gt;a slice of slice of string&lt;/code&gt;. Another way of saying &lt;code&gt;slice of slice of string&lt;/code&gt; is to say &lt;code&gt;two-dimensional slice&lt;/code&gt;. This type will be important in the next section when we work on our mock data generator.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Call the &lt;code&gt;buildFruitList()&lt;/code&gt; in &lt;code&gt;func main()&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;func main&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    m :&lt;span class="o"&gt;=&lt;/span&gt; pdf.NewMaroto&lt;span class="o"&gt;(&lt;/span&gt;consts.Portrait, consts.A4&lt;span class="o"&gt;)&lt;/span&gt;
    m.SetPageMargins&lt;span class="o"&gt;(&lt;/span&gt;20, 10, 20&lt;span class="o"&gt;)&lt;/span&gt;

    buildHeading&lt;span class="o"&gt;(&lt;/span&gt;m&lt;span class="o"&gt;)&lt;/span&gt;
    buildFruitList&lt;span class="o"&gt;(&lt;/span&gt;m&lt;span class="o"&gt;)&lt;/span&gt;


    err :&lt;span class="o"&gt;=&lt;/span&gt; m.OutputFileAndClose&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"pdfs/div_rhino_fruit.pdf"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if &lt;/span&gt;err &lt;span class="o"&gt;!=&lt;/span&gt; nil &lt;span class="o"&gt;{&lt;/span&gt;
        fmt.Println&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"‚ö†Ô∏è  Could not save PDF:"&lt;/span&gt;, err&lt;span class="o"&gt;)&lt;/span&gt;
        os.Exit&lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    fmt.Println&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"PDF saved successfully"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's do a quick preview of our &lt;code&gt;PDF&lt;/code&gt; again to see what we've just added so far&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#mock-data-generator"&gt;
  &lt;/a&gt;
  Mock data generator
&lt;/h2&gt;

&lt;p&gt;Okay, now let's take a small detour out of our &lt;code&gt;main.go&lt;/code&gt; file. So far we've used hardcoded content to inject into our table. We're going to try something different and use some randomly-generated data instead. To achieve this, we will create our own custom &lt;code&gt;data&lt;/code&gt; package and make use of the &lt;code&gt;GoFakeIt&lt;/code&gt; package we installed, earlier.&lt;/p&gt;

&lt;p&gt;In our project root, let's make a new folder called &lt;code&gt;data&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;data
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And within this new &lt;code&gt;data&lt;/code&gt; folder, let's create a new file called &lt;code&gt;products.go&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;data/products.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's head into our newly-created &lt;code&gt;products.go&lt;/code&gt; file. This is going to be a new package on its own, so we can start by indicating that it's part of &lt;code&gt;package data&lt;/code&gt; instead of &lt;code&gt;package main&lt;/code&gt;. Then we can import &lt;code&gt;GoFakeIt&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"github.com/brianvoe/gofakeit/v6"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;GoFakeIt&lt;/code&gt; packages gives us all sorts of functions for concepts such as a &lt;code&gt;File&lt;/code&gt;, a &lt;code&gt;Person&lt;/code&gt;, a &lt;code&gt;Number&lt;/code&gt;, among other things. We will be using &lt;code&gt;Fruit&lt;/code&gt; in this tutorial.&lt;/p&gt;

&lt;p&gt;We can represent the structure of each fruit item using a &lt;code&gt;Fruit&lt;/code&gt; struct type. Each Fruit will have a &lt;code&gt;Name&lt;/code&gt;, a &lt;code&gt;Description&lt;/code&gt; and a &lt;code&gt;Price&lt;/code&gt;. Each of these values will be randomly generated using &lt;code&gt;GoFakeIt&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"github.com/brianvoe/gofakeit/v6"&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Fruit&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Name&lt;/span&gt;        &lt;span class="kt"&gt;string&lt;/span&gt;  &lt;span class="s"&gt;`fake:"{fruit}"`&lt;/span&gt;
    &lt;span class="n"&gt;Description&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;  &lt;span class="s"&gt;`fake:"{loremipsumsentence:10}"`&lt;/span&gt;
    &lt;span class="n"&gt;Price&lt;/span&gt;       &lt;span class="kt"&gt;float64&lt;/span&gt; &lt;span class="s"&gt;`fake:"{price:1,10}"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now that we have our &lt;code&gt;Fruit&lt;/code&gt; struct type, we can create a function to make use of it. Every time the &lt;code&gt;generateFruit()&lt;/code&gt; function is called, we get a new random fruit.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/brianvoe/gofakeit/v6"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Fruit&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Name&lt;/span&gt;        &lt;span class="kt"&gt;string&lt;/span&gt;  &lt;span class="s"&gt;`fake:"{fruit}"`&lt;/span&gt;
    &lt;span class="n"&gt;Description&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;  &lt;span class="s"&gt;`fake:"{loremipsumsentence:10}"`&lt;/span&gt;
    &lt;span class="n"&gt;Price&lt;/span&gt;       &lt;span class="kt"&gt;float64&lt;/span&gt; &lt;span class="s"&gt;`fake:"{price:1,10}"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;generateFruit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;Fruit&lt;/span&gt;
    &lt;span class="n"&gt;gofakeit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Struct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;froot&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;froot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;froot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;froot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;froot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;froot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;froot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%.2f"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Price&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;froot&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Lastly, we want to create a function we can access outside this &lt;code&gt;data&lt;/code&gt; package. We need this in order to generate this random fruit data inside out &lt;code&gt;PDF&lt;/code&gt; table that lives in our &lt;code&gt;main.go&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/brianvoe/gofakeit/v6"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Fruit&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Name&lt;/span&gt;        &lt;span class="kt"&gt;string&lt;/span&gt;  &lt;span class="s"&gt;`fake:"{fruit}"`&lt;/span&gt;
    &lt;span class="n"&gt;Description&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;  &lt;span class="s"&gt;`fake:"{loremipsumsentence:10}"`&lt;/span&gt;
    &lt;span class="n"&gt;Price&lt;/span&gt;       &lt;span class="kt"&gt;float64&lt;/span&gt; &lt;span class="s"&gt;`fake:"{price:1,10}"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;generateFruit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;Fruit&lt;/span&gt;
    &lt;span class="n"&gt;gofakeit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Struct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;froot&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;froot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;froot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;froot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;froot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;froot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;froot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%.2f"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Price&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;froot&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;FruitList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[][]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="p"&gt;[][]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;onefruit&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;generateFruit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;onefruit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Just some notes about the code, above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;FruitList()&lt;/code&gt; is a public function that we can access from outside the &lt;code&gt;data&lt;/code&gt; package, which is why it starts with a capital letter.&lt;/li&gt;
&lt;li&gt;As we saw earlier, our &lt;code&gt;TableList&lt;/code&gt; component needs the data to come in as a &lt;code&gt;two-dimensional slice&lt;/code&gt; of &lt;code&gt;string&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;FruitList()&lt;/code&gt; takes in one parameter of &lt;code&gt;length&lt;/code&gt; so we can dynamically determine how many items of fruit we want to generate.&lt;/li&gt;
&lt;li&gt;We then pass this &lt;code&gt;length&lt;/code&gt; value into a little &lt;code&gt;for loop&lt;/code&gt; that calls our &lt;code&gt;generateFruit()&lt;/code&gt; function however many times &lt;code&gt;length&lt;/code&gt; determines.&lt;/li&gt;
&lt;li&gt;Then we return a &lt;code&gt;two-dimensional slice of string&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#hooking-up-the-dynamic-content"&gt;
  &lt;/a&gt;
  Hooking up the dynamic content
&lt;/h2&gt;

&lt;p&gt;Back in our &lt;code&gt;main.go&lt;/code&gt; file, we can import our &lt;code&gt;data&lt;/code&gt; package and replace our &lt;code&gt;contents&lt;/code&gt; variable. Let's use the &lt;code&gt;FruitList()&lt;/code&gt; function to generate &lt;code&gt;20&lt;/code&gt; random fruit.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"os"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/johnfercher/maroto/pkg/color"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/johnfercher/maroto/pkg/consts"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/johnfercher/maroto/pkg/pdf"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/johnfercher/maroto/pkg/props"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/divrhino/fruitful-pdf/data"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;buildFruitList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Maroto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;headings&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Fruit"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Description"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Price"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FruitList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And now if we run our code, we have a table of 20 randomly-generated fruit.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If we decide to generate many, many more random Fruit, say 100, our &lt;code&gt;PDF&lt;/code&gt; automatically adds pages to accommodate this.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#going-further"&gt;
  &lt;/a&gt;
  Going further
&lt;/h2&gt;

&lt;p&gt;If you'd like to extend this project further, you can consider doing the following&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;try replacing the mock data with actual data from an API&lt;/li&gt;
&lt;li&gt;use the &lt;code&gt;RegisterFooter()&lt;/code&gt; method to add a footer to every page of the &lt;code&gt;PDF&lt;/code&gt; document&lt;/li&gt;
&lt;li&gt;add a signature, barcode, page numbers and a QR code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This repository includes an extended version of this tutorial code in the &lt;code&gt;examples&lt;/code&gt; folder. You can also look at the &lt;code&gt;Maroto&lt;/code&gt; package Github page for even more examples.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this tutorial we learnt how to generate some dummy data that we saved in a &lt;code&gt;PDF&lt;/code&gt; file. We used the &lt;code&gt;maroto&lt;/code&gt; and &lt;code&gt;gofakeit&lt;/code&gt; packages to help us achieve this.&lt;/p&gt;

&lt;p&gt;If you enjoyed this article and you'd like more, consider following &lt;a href="https://www.youtube.com/c/DivRhino"&gt;Div Rhino on YouTube&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Congratulations, you did great! Keep learning and keep coding. Bye for now, &amp;lt;3&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/divrhino"&gt;
        divrhino
      &lt;/a&gt; / &lt;a href="https://github.com/divrhino/fruitful-pdf"&gt;
        fruitful-pdf
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Create a PDF document with Go, Maroto and GoFakeIt. Video tutorial available on the Div Rhino YouTube channel. 
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Create PDFs with Go, Maroto and GoFakeIt&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Text tutorial: &lt;a href="https://divrhino.com/articles/create-pdf-document-with-go-maroto-gofakeit" rel="nofollow"&gt;https://divrhino.com/articles/create-pdf-document-with-go-maroto-gofakeit&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Video tutorial: &lt;a href="https://youtu.be/jwOy4JgleTU" rel="nofollow"&gt;https://youtu.be/jwOy4JgleTU&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/divrhino/fruitful-pdf"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>go</category>
      <category>pdf</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to integrate React frontend with Node backend</title>
      <author>Swayam Singh</author>
      <pubDate>Sun, 02 May 2021 03:59:55 +0000</pubDate>
      <link>https://dev.to/_s_w_a_y_a_m_/how-to-integrate-react-frontend-with-node-backend-36a4</link>
      <guid>https://dev.to/_s_w_a_y_a_m_/how-to-integrate-react-frontend-with-node-backend-36a4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#overview-"&gt;
  &lt;/a&gt;
  Overview :
&lt;/h2&gt;

&lt;p&gt;React framework in great for creating awesome web apps and UIs. But sometimes we need extra functionalities like integrating database or performing authentication. Such stuff needs to be done in backend, you don't want that anyone can see your secret keys or hashing stuff in frontend.&lt;/p&gt;

&lt;p&gt;That's why in this article we are going to learn how to connect your React frontend with express backend. Sometimes this task get really overwhelming, you might get stuck with CORS issue, we will be handling all of them in this one article.&lt;/p&gt;

&lt;p&gt;Our motive is to create a server that host an API and then we make a GET request from React frontend and display the data on screen.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites-"&gt;
  &lt;/a&gt;
  Prerequisites :
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/TGvHZanK0Y8poe2lnA/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/TGvHZanK0Y8poe2lnA/giphy.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic React knowledge and comfortability with environment.&lt;/li&gt;
&lt;li&gt;Basic Express knowledge.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#lets-get-going"&gt;
  &lt;/a&gt;
  Let's get going üëç
&lt;/h2&gt;

&lt;p&gt;First of all create a folder and call it anything, we are naming it as &lt;code&gt;app&lt;/code&gt;. This folder will contain all our frontend + backend code.&lt;/p&gt;

&lt;p&gt;Now we will start with creating backend first, &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-server"&gt;
  &lt;/a&gt;
  Setting up Server
&lt;/h2&gt;

&lt;p&gt;Open the terminal and locate to your &lt;code&gt;app&lt;/code&gt; folder. Now inside this folder we will create &lt;code&gt;server.js&lt;/code&gt; file. Yeah exactly this file will contain code responsible for server running and API hosting.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RskE4brB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619868185288/Roiq4kTz0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RskE4brB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619868185288/Roiq4kTz0.png" alt="Screenshot 2021-05-01 at 8.26.58 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;now we are going to initialize &lt;code&gt;npm&lt;/code&gt; in this folder to handle external packages and dependencies.&lt;br&gt;
In the terminal type &lt;code&gt;npm init -y&lt;/code&gt; it will initialized the npm with default values.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VwokZMyF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619868607424/Kt0s6rWhe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VwokZMyF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619868607424/Kt0s6rWhe.png" alt="Screenshot 2021-05-01 at 8.28.16 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a result you will see a file with name &lt;code&gt;package.json&lt;/code&gt; will automatically get created.&lt;/p&gt;

&lt;p&gt;From this step we are going to handle rest of the things on your favourite code editor. I am using VSCode in this article.&lt;br&gt;
Open &lt;code&gt;app&lt;/code&gt; folder on VSCode.&lt;/p&gt;

&lt;p&gt;Now we have to install some packages, these are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;express&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cors&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you are familiar with &lt;code&gt;express&lt;/code&gt; it's a widely used module for maintaining backend. Now what is the use of &lt;code&gt;cors&lt;/code&gt; library, okay so for this first we need to understand what CORS really is.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/SvRuvlSEa67wNNHuHy/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/SvRuvlSEa67wNNHuHy/giphy.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CORS is shorthand for Cross-Origin Resource Sharing. It is a mechanism to allow or restrict requested resources on a web server depend on where the HTTP request was initiated.&lt;br&gt;
Whenever we make request to a server we send a header called &lt;code&gt;origin&lt;/code&gt;. It contain the information about from where the request is originated and using this header a web server can restrict or allow the resource sharing between client and server.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By default requests from any other origins will be restricted by the browser.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you want to read more about CORS, here's the link you can refer to &lt;a href="https://stackabuse.com/handling-cors-with-node-js/"&gt;More on CORS&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now with the use &lt;code&gt;cors&lt;/code&gt; middleware we can allow CORS for all routes or to some specific routes, in this article we will allow for all routes but if you want to read more then refer to  &lt;a href="https://www.npmjs.com/package/cors"&gt;cors documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For installing above packages open terminal in your VSCode and type following &lt;code&gt;npm install express cors&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ac7tsy_l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619869832446/x3vqaVeP4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ac7tsy_l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619869832446/x3vqaVeP4.png" alt="Screenshot 2021-05-01 at 8.34.42 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now all left is to setup our backend server, &lt;strong&gt;&lt;em&gt;coding time&lt;/em&gt;&lt;/strong&gt;  ü•≥&lt;/p&gt;

&lt;p&gt;Let's start with creating a file &lt;code&gt;data.js&lt;/code&gt;. This file will contain our API data that we are going to host and then we &lt;code&gt;export&lt;/code&gt; the API data so that we can use it inside our &lt;code&gt;server.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PHMzYeVW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619870377567/p-Uc9Xomv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PHMzYeVW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619870377567/p-Uc9Xomv.png" alt="Screenshot 2021-05-01 at 8.50.32 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Okay now let's setup our server, open the &lt;code&gt;server.js&lt;/code&gt; and follow the below image&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nahYhYvZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619870409477/IALSsR5zp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nahYhYvZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619870409477/IALSsR5zp.png" alt="Screenshot 2021-05-01 at 8.50.07 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see that the code is self explanatory but still I want to highlight a point that is &lt;strong&gt;&lt;em&gt;port number on which our server is listening&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Take any free port number you want &lt;em&gt;except&lt;/em&gt; &lt;code&gt;3000&lt;/code&gt; why? because &lt;code&gt;port 3000&lt;/code&gt; is used by react frontend and if you use same for your backend then it might gonna crash. Here you can see I used &lt;code&gt;port 5000&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now let's test if our server is working or not. Open the terminal again and type following &lt;code&gt;node server.js&lt;/code&gt; and in the console you can see it'll be printing &lt;code&gt;server is running on port 5000&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--87NvWA91--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619870764377/ZSKBoWnuSl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--87NvWA91--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619870764377/ZSKBoWnuSl.png" alt="Screenshot 2021-05-01 at 8.51.02 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open your browser and go to the following URL &lt;code&gt;http://localhost:5000/api&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can see your API data there in JSON format. For better visualization you can use extensions like &lt;strong&gt;&lt;em&gt;JSON viewer pro&lt;/em&gt;&lt;/strong&gt; here's the link for  &lt;a href="https://chrome.google.com/webstore/detail/json-viewer-pro/eifflpmocdbdmepbjaopkkhbfmdgijcc"&gt;download&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XCUg0zuP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619870961195/iSlHycNd7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XCUg0zuP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619870961195/iSlHycNd7.png" alt="Screenshot 2021-05-01 at 8.53.35 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;YAYYYY üéâ...  Our server is up and running.&lt;/p&gt;

&lt;p&gt;Time to move to frontend and start building it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-react-frontend"&gt;
  &lt;/a&gt;
  Setting up React frontend
&lt;/h2&gt;

&lt;p&gt;First of all make a folder &lt;code&gt;client&lt;/code&gt;, this will contain our frontend stuff.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hiwwxULq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619871668711/3ufxPI7br.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hiwwxULq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619871668711/3ufxPI7br.png" alt="1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now go inside the &lt;code&gt;client&lt;/code&gt; folder and type the following on terminal &lt;code&gt;npx create-react-app my_app&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SHRo_cML--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619872012141/nGJSw6BK_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SHRo_cML--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619872012141/nGJSw6BK_.png" alt="2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It'll take some time to process and when it done you'll see a folder named &lt;code&gt;my_app&lt;/code&gt; created, see below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z1PfJq4S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619872220355/9CIFW2sIm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z1PfJq4S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619872220355/9CIFW2sIm.png" alt="3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now inside the VSCode you can see that &lt;code&gt;client/my_app&lt;/code&gt; will contain some pre-build files they all are the initial setup for React frontend. You can modify them as the way you want, but in this article we just modify &lt;code&gt;package.json&lt;/code&gt; and &lt;code&gt;App.js&lt;/code&gt; to our need.&lt;/p&gt;

&lt;p&gt;Now open the &lt;code&gt;package.json&lt;/code&gt; from the &lt;code&gt;client/my_app&lt;/code&gt; folder on VSCode and add the following property below &lt;code&gt;private: true&lt;/code&gt; property. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;proxy: "http://localhost:5000"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;see below for reference&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BwlGM71z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619872462547/rZa9r4Bah.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BwlGM71z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619872462547/rZa9r4Bah.png" alt="5.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now adding this property makes React to use &lt;code&gt;http://localhost:5000&lt;/code&gt; as default URL for making requests.&lt;/p&gt;

&lt;p&gt;It's time to setup &lt;code&gt;App.js&lt;/code&gt; to make request to our server and render data on client's screen.&lt;br&gt;
Open &lt;code&gt;App.js&lt;/code&gt; on VSCode and in the function &lt;code&gt;App&lt;/code&gt; delete everything inside the &lt;code&gt;div having class  'App'&lt;/code&gt; and do the following.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3SWcxayN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619872833443/w4OlDZQhx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3SWcxayN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619872833443/w4OlDZQhx.png" alt="6.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see the code is self explanatory but still I again want to highlight a point that, just take a look at the &lt;code&gt;fetch("/api")&lt;/code&gt;. You can notice we are not providing complete endpoint like &lt;code&gt;http://localhost:5000/api&lt;/code&gt; and the reason is &lt;strong&gt;&lt;em&gt;we don't need to&lt;/em&gt;&lt;/strong&gt; remember the &lt;code&gt;proxy&lt;/code&gt; property we set earlier. All credit goes to it, now we can create as many routes we want inside your server and can access them in React with similar manner.&lt;/p&gt;

&lt;p&gt;Now open terminal inside VSCode and select a new &lt;code&gt;zsh&lt;/code&gt; or &lt;code&gt;bash&lt;/code&gt; whatever you prefer and make sure you are inside the&lt;code&gt;my_app&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SHH8ghvJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619873125531/sl8dVP0Th.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SHH8ghvJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619873125531/sl8dVP0Th.png" alt="7.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and when you are in, type following in terminal to start the React frontend server. &lt;code&gt;npm start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A3-RJyM9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619873533809/quItnVM8I.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A3-RJyM9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619873533809/quItnVM8I.png" alt="9.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ignore all the warnings for now&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This command will basically compile your React code and start the server at &lt;code&gt;port 3000&lt;/code&gt;. It will also automatically open your web browser and get located to &lt;code&gt;http://localhost:3000&lt;/code&gt; and what you can see is a big *&lt;em&gt;" Hello World " *&lt;/em&gt; on screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CeYLCF5_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619873614437/FtfxvMoNZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CeYLCF5_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619873614437/FtfxvMoNZ.png" alt="10.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open the &lt;code&gt;Developers tools&lt;/code&gt; inside brower and in console you can see that our API data is logged there successfully.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KjZWKYjM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619873706248/TxmWBHA7p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KjZWKYjM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619873706248/TxmWBHA7p.png" alt="11.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we are sure that our frontend is working properly and data is also fetched without any problem, so it's time to render the data on screen. Open &lt;code&gt;App.js&lt;/code&gt; on VSCode and replace the already written code with the highlighted part of code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nLP-7JqO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619878646161/rsjtTAwfT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nLP-7JqO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619878646161/rsjtTAwfT.png" alt="Screenshot 2021-05-01 at 7.46.46 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can notice we just replaced the &lt;strong&gt;&lt;em&gt;console logging&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;Hello World&lt;/em&gt;&lt;/strong&gt; to the other code so that it can set the &lt;code&gt;state&lt;/code&gt; value to &lt;strong&gt;&lt;em&gt;data&lt;/em&gt;&lt;/strong&gt; array and render it on screen with some styling. &lt;/p&gt;

&lt;p&gt;Now just save it and open your browser again to see the final result.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6NhlaW9z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619878726691/3zjGdH6HF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6NhlaW9z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619878726691/3zjGdH6HF.png" alt="Screenshot 2021-05-01 at 7.48.38 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to re-check just modify the data inside &lt;code&gt;data.js&lt;/code&gt; from backend and save it, the modified result will also be displayed on your screen.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;YAYYYYYY...... üéâ ü•≥&lt;/em&gt;&lt;/strong&gt; our backend and frontend are now perfectly connected, now you can use your backend for integrating database or authentication without any worries of exposing private data on frontend.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/WueGYCBT6OPsjUMj1J/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/WueGYCBT6OPsjUMj1J/giphy.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next-"&gt;
  &lt;/a&gt;
  What's next !
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;If you are still reading, make sure to follow me on  &lt;a href="https://twitter.com/_s_w_a_y_a_m_"&gt;Twitter&lt;/a&gt;  and subscribe to my newsletter for more as I have some exciting stuff coming up every weekend. See Y'all next time and stay safe ^^ üåª&lt;/strong&gt; &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>node</category>
      <category>express</category>
    </item>
    <item>
      <title>Generating a Zoom Meeting Url Using Firebase Cloud-Functions</title>
      <author>lonewolf_zlife</author>
      <pubDate>Sun, 02 May 2021 03:53:14 +0000</pubDate>
      <link>https://dev.to/lonewolf_zlife/generating-a-zoom-meeting-url-using-firebase-cloud-functions-2lh4</link>
      <guid>https://dev.to/lonewolf_zlife/generating-a-zoom-meeting-url-using-firebase-cloud-functions-2lh4</guid>
      <description>&lt;h2&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Hello, everyone! I hope you all are doing well. In this blog, I will share and demonstrate how to generate the Zoom meeting url using the Cloud-Functions in the fastest way. This is my very first blog writing about what I have just learned or completed in order to leave it as an example for those who might come later having same requirements or problem as me.&lt;/p&gt;

&lt;h2&gt;Let's get started&lt;/h2&gt;

&lt;p&gt;Firstly, you should go and create the Zoom for developer account in (&lt;a href="https://marketplace.zoom.us/"&gt;https://marketplace.zoom.us/&lt;/a&gt;).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vwSeIBeC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mdt3xnm8u8dlkgrvenay.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vwSeIBeC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mdt3xnm8u8dlkgrvenay.png" alt="Screen Shot 2564-05-02 at 09.33.54"&gt;&lt;/a&gt;&lt;br&gt;
 You should see this above image after you signed up successfully. Then, go create the app in the Zoom marketplace for JWT as the following image.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--amcTCLST--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qd5h8sd3yue4bda2al81.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--amcTCLST--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qd5h8sd3yue4bda2al81.png" alt="Screen Shot 2564-05-02 at 09.33.30"&gt;&lt;/a&gt;&lt;br&gt;
&lt;b&gt;JWT&lt;b&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R07QQQI7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n9depza8usj61bgag9u1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R07QQQI7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n9depza8usj61bgag9u1.png" alt="Screen Shot 2564-05-02 at 09.45.05"&gt;&lt;/a&gt;&lt;/b&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;After you created successfully, you will be redirected to this scene and try to fill out all the required informations. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PH8GluIy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ctzadsdc29v2wtqhr49o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PH8GluIy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ctzadsdc29v2wtqhr49o.png" alt="Screen Shot 2564-05-02 at 09.46.57"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_fZ749SA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgu4vxngifzvgrr6s5bl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_fZ749SA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgu4vxngifzvgrr6s5bl.png" alt="Screen Shot 2564-05-02 at 09.47.09"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, you have to set the expiration time of the JWT token and for me I set it to expire in one year for the token. It might not be a good practice but it's the fastest way to generate the Zoom meeting url.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Calling to the Zoom Api endpoint&lt;b&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--33kmeMYh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e47n4z1t8r98x3vtz7qp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--33kmeMYh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e47n4z1t8r98x3vtz7qp.png" alt="Screen Shot 2564-05-02 at 10.02.17"&gt;&lt;/a&gt;&lt;/b&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Now, let's try to call to the endpoint to generate the Zoom meeting url via Postman.&lt;br&gt;
&lt;b&gt;Zoom endpoint&lt;/b&gt;: &lt;a&gt;&lt;/a&gt;&lt;a href="https://api.zoom.us/v2/users/me/meetings"&gt;https://api.zoom.us/v2/users/me/meetings&lt;/a&gt;&lt;br&gt;
&lt;b&gt;Token&lt;/b&gt;: for the token here is the JWT token of the JWT app we just created in the Zoom developer. So, you can just copy and paste it here.&lt;br&gt;
&lt;b&gt;Post Request Body&lt;/b&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GnznPwHU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/elcz4el47r24e0i3sohh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GnznPwHU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/elcz4el47r24e0i3sohh.png" alt="Screen Shot 2564-05-02 at 10.12.19"&gt;&lt;/a&gt;&lt;br&gt;
For the settings of the body request, you can set it to control over the attendees like allowing screen sharing or not ...&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Response&lt;/b&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S3whRoL4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xoaxpayrc60buor5kvxv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S3whRoL4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xoaxpayrc60buor5kvxv.png" alt="Screen Shot 2564-05-02 at 10.31.38"&gt;&lt;/a&gt;&lt;br&gt;
 You will receive this as the response if the post request is successful. And for the join_url is the url which you can spread to the attendee for attending the Zoom meeting.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Making request using Axios&lt;b&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8seJj_F_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ykgrri0dbe8px63rzs10.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8seJj_F_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ykgrri0dbe8px63rzs10.png" alt="Screen Shot 2564-05-02 at 10.38.25"&gt;&lt;/a&gt;&lt;/b&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Everything here is pretty much the same as in the Postman. In the header of the request, you just have to pass the JWT token there and if the request is successful, the same response will be returned as in the Postman. &lt;br&gt;
You can make it as onCall, onRequest or pubsub is as your need for Firebase Cloud-functions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--imG-cNjk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vlf9hhi08s61n4ktbpni.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--imG-cNjk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vlf9hhi08s61n4ktbpni.png" alt="Screen Shot 2564-05-02 at 10.44.28"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope it might be helpful and any constructive comments are always welcomed.&lt;br&gt;
Thank you!&lt;/p&gt;

&lt;p&gt;&lt;b&gt;References&lt;/b&gt;&lt;br&gt;
&lt;a href="https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meetingcreate"&gt;https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meetingcreate&lt;/a&gt;&lt;br&gt;
&lt;a href="https://marketplace.zoom.us/docs/guides"&gt;https://marketplace.zoom.us/docs/guides&lt;/a&gt;&lt;/p&gt;

</description>
      <category>zoomapi</category>
      <category>node</category>
      <category>react</category>
      <category>firebase</category>
    </item>
    <item>
      <title>Web Apps from scratch: Forms</title>
      <author>Nicholas Mendez</author>
      <pubDate>Sun, 02 May 2021 03:39:14 +0000</pubDate>
      <link>https://dev.to/snickdx/web-apps-from-scratch-forms-3oo5</link>
      <guid>https://dev.to/snickdx/web-apps-from-scratch-forms-3oo5</guid>
      <description>&lt;h1&gt;
  &lt;a href="#getting-into-form-%E2%98%91"&gt;
  &lt;/a&gt;
  Getting into form ‚òë
&lt;/h1&gt;

&lt;p&gt;Forms are a fundamental component of web applications. They allow us to validate and take input from users which become structured data in our databases. This post will go through some of the basics of forms.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-form-element-amp-attributes"&gt;
  &lt;/a&gt;
  The Form element &amp;amp; attributes
&lt;/h1&gt;

&lt;p&gt;The form element is created with the form tab and has the following attributes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;autocomplete: can disable the browser's autocomplete, values "on" or "off"&lt;/li&gt;
&lt;li&gt;method: specified the HTTP method, values "GET" or "POST"&lt;/li&gt;
&lt;li&gt;enctype: affects the &lt;a href="https://www.iana.org/assignments/media-types/media-types.xhtml"&gt;MIME Type&lt;/a&gt; of the data submitted. Values:

&lt;ul&gt;
&lt;li&gt;application/x-www-firn-urlencoded&lt;/li&gt;
&lt;li&gt;text.plain&lt;/li&gt;
&lt;li&gt;mutlitpart/form-data&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#form-input-elements"&gt;
  &lt;/a&gt;
  Form input elements
&lt;/h1&gt;

&lt;p&gt;It's important to use the appropriate input elements for the data needed. Some elements have a dedicated tag while others are attributes on the input tag.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Selecting a single value from a list

&lt;ul&gt;
&lt;li&gt;input[type="radio"]&lt;/li&gt;
&lt;li&gt;select&lt;/li&gt;
&lt;li&gt;datalist&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Selecting multiple values from a list

&lt;ul&gt;
&lt;li&gt;select (with "multiple" attribute)&lt;/li&gt;
&lt;li&gt;input[type="checkbox"] multiple boxes with the same name&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Boolean Values: single checkbox&lt;/li&gt;
&lt;li&gt;Time : input[type= "week|time|datetime|date|week|month|datetime-local"]&lt;/li&gt;
&lt;li&gt;Numeric

&lt;ul&gt;
&lt;li&gt;input[type="text" inputmode="numeric|decimal"]&lt;/li&gt;
&lt;li&gt;input[type="number"]&lt;/li&gt;
&lt;li&gt;input[type="range"], gives a slider (best used for small ranges)&lt;/li&gt;
&lt;li&gt;Files : input[type="file"]&lt;/li&gt;
&lt;li&gt;password : input[type="password"]&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Email : input[type="email"]&lt;/li&gt;
&lt;li&gt;Telephone : input[type="telephone"]&lt;/li&gt;
&lt;li&gt;URL : input[type="URL"]&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#form-validation"&gt;
  &lt;/a&gt;
  Form validation
&lt;/h1&gt;

&lt;p&gt;We can add simple validation to our forms to prevent them from submitting unless certain conditions are met.&lt;/p&gt;

&lt;p&gt;This is done via validation attributes such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;required: field must contain a value&lt;/li&gt;
&lt;li&gt;minlength: specifies the minimum length of valid input&lt;/li&gt;
&lt;li&gt;pattern: field must match with the specified &lt;a href="https://www.thepolyglotdeveloper.com/2015/05/use-regex-to-test-password-strength-in-javascript/"&gt;Regular Expression&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Inputs with type=email/url/telephone will also validate input appropriately.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#form-submission"&gt;
  &lt;/a&gt;
  Form Submission
&lt;/h1&gt;

&lt;p&gt;By default, an HTML form element will make a GET request to the current URL and append the form data as a &lt;a href="https://en.wikipedia.org/wiki/Query_string"&gt;query string&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For Example the following form:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"myform"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;submit&amp;gt;&lt;/span&gt;Send&lt;span class="nt"&gt;&amp;lt;/submit&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Would redirect the browser to /?username=bob&amp;amp;password=pass when the form is submitted with the values 'bob' and 'pass'. Normally there would be code on the backend that will receive the data from the URL.&lt;/p&gt;

&lt;p&gt;We can override these defaults with the method and action attributes mentioned earlier.&lt;/p&gt;

&lt;p&gt;Alternatively, for &lt;a href="https://en.wikipedia.org/wiki/Single-page_application"&gt;single-page applications&lt;/a&gt; we can use javascript to prevent the page redirect and submit the form.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#myform&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onsubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="c1"&gt;//prevent the form submission&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;//pull out all the data from the form&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromEntries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
         &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/myserver&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
         &lt;span class="p"&gt;{&lt;/span&gt; 
           &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
           &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)},&lt;/span&gt;
           &lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//send data to the server&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;reponse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//alerts the server's reponse&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The snippet above prevents the page redirect and sends the form data as JSON to the URL provided.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#going-deeper"&gt;
  &lt;/a&gt;
  Going Deeper
&lt;/h1&gt;

&lt;p&gt;You can see a more in-depth example at this &lt;br&gt;
 &lt;a href="https://replit.com/@Snickdx/forms-demo#index.html"&gt;Repl&lt;/a&gt; that will allow you to change the content types and see the response from the server.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This concludes the basics of HTML forms as you can see, there's much you can accomplish with standard HTML and Javascript. &lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>vanilla</category>
    </item>
    <item>
      <title>8 Unique and Secret tricks Front-end Developers don't know</title>
      <author>Dev Write Ups</author>
      <pubDate>Sun, 02 May 2021 03:38:52 +0000</pubDate>
      <link>https://dev.to/devwriteups/8-unique-and-secret-tricks-front-end-developers-don-t-know-27f7</link>
      <guid>https://dev.to/devwriteups/8-unique-and-secret-tricks-front-end-developers-don-t-know-27f7</guid>
      <description>&lt;p&gt;This post comes with some of the unique and secrets(ü§ê) tricks developer don't know. Some tricks will help you in your career and will make you productive, take you to next level in development.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#datalist-tag"&gt;
  &lt;/a&gt;
  Datalist Tag
&lt;/h3&gt;

&lt;p&gt;You can create an "autocomplete" feature for &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements by using the &lt;code&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; tag. With this feature you will create a drop-down list of pre-defined options as you type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;list=&lt;/span&gt;&lt;span class="s"&gt;"cars"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"car"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"car"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;datalist&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"cars"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"BMW"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;   
     &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Mustang"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;    
     &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Sienna"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;      
     &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Avalon"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;   
     &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Fortuner"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;   
&lt;span class="nt"&gt;&amp;lt;/datalist&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OU5XdCRg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619585906350/rAQdyb0UY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OU5XdCRg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619585906350/rAQdyb0UY.png" alt="111.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-calc-function"&gt;
  &lt;/a&gt;
  CSS calc() function
&lt;/h3&gt;

&lt;p&gt;This function allows you to perform calculations when specifying CSS property values. The most useful ability of &lt;code&gt;calc()&lt;/code&gt; is that it mixed units, like percentages and pixels.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;calc&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nt"&gt;width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;calc&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;6&lt;/span&gt;&lt;span class="nt"&gt;em&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="err"&gt;8&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nt"&gt;width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;calc&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;-&lt;/span&gt; &lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#in-operator"&gt;
  &lt;/a&gt;
  in operator
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;in&lt;/code&gt; operator can check if an index exists in an array and will return true or false.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;cars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tesla&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bentley&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mustang&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fortuner&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Audi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;BMW&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; 

&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;cars&lt;/span&gt; &lt;span class="c1"&gt;// returns true&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;cars&lt;/span&gt; &lt;span class="c1"&gt;// returns true&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;cars&lt;/span&gt; &lt;span class="c1"&gt;// returns false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#consoletable"&gt;
  &lt;/a&gt;
  console.table()
&lt;/h3&gt;

&lt;p&gt;This tools allows you to display a table in a console view in a very neat way by taking in an array object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;actor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Leonardo Di Caprio&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Titanic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;actor2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Shah Rukh Khan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DDLJ&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;actor3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Robert Downey JR&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Iron Man 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;actor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;actor2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;actor3&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xi9ltk3j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619586563012/F1xv0hgub.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xi9ltk3j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619586563012/F1xv0hgub.png" alt="233.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#writing-mode"&gt;
  &lt;/a&gt;
  Writing mode
&lt;/h3&gt;

&lt;p&gt;This trick allows text to run vertically. This property has five possible options.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nlt"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Subscribe to DevWriteUps&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
 &lt;span class="nc"&gt;.nlt&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;writing-mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;vertical-rl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--obd6r08S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619588782341/GlUT-bTVm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--obd6r08S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619588782341/GlUT-bTVm.png" alt="rtl.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#legals-or-tnc"&gt;
  &lt;/a&gt;
  Legals or TnC
&lt;/h3&gt;

&lt;p&gt;You can add legal docs, citations, terms and conditions or other prints in the bottom of your page with &lt;code&gt;&amp;lt;small&amp;gt;&lt;/code&gt; tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;small&amp;gt;&lt;/span&gt;* Please read Terms and Conditions&lt;span class="nt"&gt;&amp;lt;/small&lt;/span&gt;
&lt;span class="err"&gt;&amp;lt;/p&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#math-equations"&gt;
  &lt;/a&gt;
  Math equations
&lt;/h3&gt;

&lt;p&gt;Embeddings numerical problems, utilizing the MathML language is really basic in HTML5. You can put all your equations between the &lt;code&gt;&amp;lt;math&amp;gt;&lt;/code&gt; tags.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;math&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;mrow&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;mrow&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;msup&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;mi&amp;gt;&lt;/span&gt;a&lt;span class="nt"&gt;&amp;lt;/mi&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;mn&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/mn&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;/msup&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;mo&amp;gt;&lt;/span&gt;+&lt;span class="nt"&gt;&amp;lt;/mo&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;msup&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;mi&amp;gt;&lt;/span&gt;b&lt;span class="nt"&gt;&amp;lt;/mi&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;mn&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/mn&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;/msup&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/mrow&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;mo&amp;gt;&lt;/span&gt;=&lt;span class="nt"&gt;&amp;lt;/mo&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;msup&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;mi&amp;gt;&lt;/span&gt;c&lt;span class="nt"&gt;&amp;lt;/mi&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;mn&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/mn&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/msup&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/mrow&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/math&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F3PbafY7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619589648567/SVzYaf4ru.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F3PbafY7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619589648567/SVzYaf4ru.png" alt="s2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#direct-children"&gt;
  &lt;/a&gt;
  Direct children
&lt;/h3&gt;

&lt;p&gt;Utilizing &amp;gt; to choose the immediate offspring of a component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#footer&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will choose and style the entirety of the dynamic connection components that are quickly under the Footer ID. It will not choose anything past the dynamic component, or whatever else contained in the footer, similar to plain content. This works extraordinary with high level route components, as well.&lt;/p&gt;




&lt;p&gt;Thank you For Readingü§© Subscribe to our  &lt;a href="https://www.devintro.com"&gt;newsletter&lt;/a&gt; , we send it occasionally with amazing news, resources and many thing.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Hooray!</title>
      <author>Issa Jean Marie</author>
      <pubDate>Sun, 02 May 2021 03:30:23 +0000</pubDate>
      <link>https://dev.to/issajeanmarie/hooray-17a3</link>
      <guid>https://dev.to/issajeanmarie/hooray-17a3</guid>
      <description>&lt;p&gt;Determined to support, motivated by helping, and proud of other‚Äôs improvement and growth. Friendly, caring, understanding and empathic, that‚Äôs how I saw &lt;strong&gt;Awesomity Lab&lt;/strong&gt; and &lt;strong&gt;Code of Africa&lt;/strong&gt; teams!  &lt;/p&gt;

&lt;p&gt;Building one‚Äôs career and experience isn‚Äôt that easy, is it?&lt;br&gt;
And we won‚Äôt get experience without experiencing things, will we? &lt;/p&gt;

&lt;p&gt;Most of the people don‚Äôt care about what someone is capable of but care about what the experience that person has!&lt;/p&gt;

&lt;p&gt;Different story when it comes to &lt;strong&gt;Code of Africa&lt;/strong&gt; and &lt;strong&gt;Awesomity Lab&lt;/strong&gt;!&lt;br&gt;
It all begins with a simple challenge, and they rise a &lt;strong&gt;dead phoenix from ashes&lt;/strong&gt;!  &lt;/p&gt;

&lt;p&gt;From basic skills like understanding your values to communication skills and then to building a massive web/mobile app!  &lt;/p&gt;

&lt;p&gt;I had no experience in working with teams and integrating my frontend with secure APIs, I had no idea of how to manage huge data and track the process of the data procession!&lt;/p&gt;

&lt;p&gt;But two months changed me! Took me from count-down and to-do app to the level where I can build and manage data of medium social media app! Two months took me from one level to another!  &lt;/p&gt;

&lt;p&gt;My heart is full of thanks! I wish I could do the same to others, &lt;strong&gt;InshAllah&lt;/strong&gt;!  &lt;/p&gt;

&lt;p&gt;I highly thank &lt;strong&gt;Awesomity Lab&lt;/strong&gt; and &lt;strong&gt;Code of Africa&lt;/strong&gt;, everyone from their team and my intern mates who were there when I messed things up!  &lt;/p&gt;

&lt;p&gt;I really take those two companies as a great motivation and example to other companies out there!  &lt;/p&gt;

&lt;p&gt;I take &lt;strong&gt;Awesomity Lab&lt;/strong&gt;, specifically, as an inspiration to all of Rwandan youth!  &lt;/p&gt;

&lt;p&gt;Words can‚Äôt explain things the way there are, but at least express our inner feelings and happiness, mine at this point is &lt;strong&gt;gratitude&lt;/strong&gt;, &lt;strong&gt;inspired&lt;/strong&gt;, and &lt;strong&gt;surprised&lt;/strong&gt;!  &lt;/p&gt;

&lt;p&gt;Thank you again, &lt;a href="https://awesomity.rw/"&gt;Awesomity Lab&lt;/a&gt; and &lt;a href="https://www.codeofafrica.com/EN"&gt;Code of Africa&lt;/a&gt;, You are my heroes now and always!  &lt;/p&gt;

&lt;p&gt;&lt;code&gt;God bless you!&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;

</description>
      <category>reason</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
