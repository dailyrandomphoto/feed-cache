<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Best keyboards for programming in 2021</title>
      <author>Dev.to</author>
      <pubDate>Sat, 01 May 2021 08:17:54 +0000</pubDate>
      <link>https://dev.to/devto4/best-keyboards-for-programming-in-2021-48bo</link>
      <guid>https://dev.to/devto4/best-keyboards-for-programming-in-2021-48bo</guid>
      <description>&lt;p&gt;Some links may be affiliate links. This means if you click on the link and purchase an item we may receive commission at no extra cost to you.&lt;/p&gt;

&lt;p&gt;As developers we don’t need many tools to work, many would say that we just need a laptop or computer, and even though that’s true, there’s a difference between having the minimum required to work to have the tools that you need to work comfortably, productive and healthy.&lt;/p&gt;

&lt;p&gt;Today we are going to discuss keyboards that you would love as a developer. The list I present is in no particular order, and I’m giving you my personal opinion on the keyboards and some facts.&lt;/p&gt;

&lt;p&gt;What’s the best keyboard? The one that works best for you!&lt;/p&gt;

&lt;p&gt;With that said, let’s jump right into the list.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#steelseries-hp-omen-x7z97aaacj-gaming-keyboard-black"&gt;
  &lt;/a&gt;
  SteelSeries HP Omen X7Z97AA#ACJ Gaming Keyboard (Black)
&lt;/h1&gt;

&lt;p&gt;A gaming keypad is a small, auxiliary keyboard designed only for gaming. It has a limited number of the original keys from a standard keyboard, and they are arranged in a more ergonomic fashion to facilitate quick and efficient gaming key presses. The commonly used keys for gaming on a computer are the 'W', 'A', 'S', 'D', and the keys close and adjacent to these keys.&lt;/p&gt;

&lt;p&gt;This item SteelSeries HP Omen X7Z97AA#ACJ Gaming Keyboard (Black).Zebronics Zeb-Transformer Gaming Keyboard and Mouse Combo (USB, Braided Cable).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#get-all-keyboard"&gt;
  &lt;/a&gt;
  &lt;a href="https://cmsinstallation.blogspot.com/2021/04/best-keyboards-for-programming-in-2021.html"&gt;Get All Keyboard&lt;/a&gt;
&lt;/h1&gt;

</description>
      <category>programming</category>
      <category>python</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Grokking the Reader Monad</title>
      <author>Matt Thornton</author>
      <pubDate>Sat, 01 May 2021 08:10:34 +0000</pubDate>
      <link>https://dev.to/choc13/grokking-the-reader-monad-4f45</link>
      <guid>https://dev.to/choc13/grokking-the-reader-monad-4f45</guid>
      <description>&lt;p&gt;From its name the reader monad doesn’t give too many clues about where it would be useful. In this post we’ll grok it by inventing it ourselves in order to solve a real software problem. From this we’ll see that it’s actually one way of doing dependency injection in functional programming.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;There won’t really be any theory here, but it’ll be easier if you’ve already grokked monads. If you haven’t then check out &lt;a href="https://dev.to/choc13/grokking-monads-in-f-3j7f"&gt;Grokking Monads&lt;/a&gt; from earlier in this series and then head back over here.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-scenario"&gt;
  &lt;/a&gt;
  The scenario
&lt;/h1&gt;

&lt;p&gt;Let’s imagine we’ve been asked to write some code that charges a user’s credit card. To do this we’re going to need to lookup some information from a database and also call a payment provider. &lt;/p&gt;

&lt;p&gt;Our domain model will look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
     &lt;span class="nc"&gt;Expiry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
     &lt;span class="nc"&gt;Cvv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;EmailAddress&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;EmailAddress&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; 
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;UserId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;UserId&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;UserId&lt;/span&gt;
      &lt;span class="nc"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt;
      &lt;span class="nc"&gt;EmailAddress&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;EmailAdress&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll also start with a &lt;code&gt;Database&lt;/code&gt; module containing a function that can read a User and a &lt;code&gt;PaymentProvider&lt;/code&gt; module that contains a function that can charge a &lt;code&gt;CreditCard&lt;/code&gt;. They look something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;ISqlConnection&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="nc"&gt;Query&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Database&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;getUser&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;UserId&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;SqlConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"my-connection-string"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Query&lt;/span&gt;&lt;span class="o"&gt;($&lt;/span&gt;&lt;span class="s2"&gt;"SELECT * FROM User AS u WHERE u.Id = {id}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;IPaymentClient&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="nc"&gt;Charge&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;PaymentId&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;PaymentProvider&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PaymentClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"my-payment-api-secret"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Charge&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#our-first-implementation"&gt;
  &lt;/a&gt;
  Our first implementation
&lt;/h1&gt;

&lt;p&gt;Let’s start off with the easiest solution we can think of. We’ll call the database to lookup the user, get the credit card from their profile and call the payment provider to charge it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;
    &lt;span class="nn"&gt;PaymentProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Super easy, given that we already had &lt;code&gt;Database.getUser&lt;/code&gt; and &lt;code&gt;PaymentProvider.chargeCard&lt;/code&gt; ready to use. &lt;/p&gt;

&lt;p&gt;The amount of coupling here is probably making you feel a bit queasy though. Invoking &lt;code&gt;getUser&lt;/code&gt; and &lt;code&gt;chargeCard&lt;/code&gt; functions directly isn't itself a problem. The problem really lies further down with how those functions themselves are implemented. In both cases they're instantiating new clients like &lt;code&gt;SqlConnection&lt;/code&gt; and &lt;code&gt;PaymentClient&lt;/code&gt; which creates a few problems:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Hard coded connection strings mean we're stuck talking to the same database instance in all environments.&lt;/li&gt;
&lt;li&gt;Connection strings usually contain secrets which are now checked into source control. &lt;/li&gt;
&lt;li&gt;Writing unit tests isn't possible because it's going to be calling the production database and payment provider. I suppose that's one way to foot the CI bill when running all of those unit tests 😜&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#inversion-of-control"&gt;
  &lt;/a&gt;
  Inversion of Control 🔄
&lt;/h1&gt;

&lt;p&gt;You’re probably not surprised to learn that the solution to this is to invert those dependencies. Inversion of Control (IoC) transcends paradigms, it’s a useful technique in both OOP and FP. It’s just that whereas OOP tends to utilise constructor injection via reflection in FP we'll see there are other solutions available to us.&lt;/p&gt;

&lt;p&gt;What’s the easiest IoC technique for a function then? Just pass those dependencies in as parameters. It's like OOP class dependencies, but at the function level.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Database&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;getUser&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ISqlConnection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;UserId&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Query&lt;/span&gt;&lt;span class="o"&gt;($&lt;/span&gt;&lt;span class="s2"&gt;"SELECT * FROM User AS u WHERE u.Id = {id}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;PaymentProvider&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;IPaymentClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
        &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Charge&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeUser&lt;/span&gt; &lt;span class="n"&gt;sqlConnection&lt;/span&gt; &lt;span class="n"&gt;paymentClient&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getUser&lt;/span&gt; &lt;span class="n"&gt;sqlConnection&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;
    &lt;span class="nn"&gt;PaymentProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="n"&gt;paymentClient&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No surprises there. We’ve just supplied the necessary clients as parameters and passed them along to the function calls that need them. This solution does have it downsides though. The primary one being that as the number of dependencies grows the number of function parameters can become unruly.&lt;/p&gt;

&lt;p&gt;On top of this most applications have some degree of layering to them. As we introduce more layers, to break down and isolate the responsibilities of individual functions, we start needing to pass some dependencies down through many layers. This is typical of any IoC solution, once you flip those dependencies it cascades right through all the layers of your application. &lt;a href="https://en.wikipedia.org/wiki/Turtles_all_the_way_down"&gt;It’s &lt;del&gt;turtles&lt;/del&gt; inverted dependencies all the way down&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#a-partial-solution"&gt;
  &lt;/a&gt;
  A &lt;em&gt;partial&lt;/em&gt; solution
&lt;/h1&gt;

&lt;p&gt;What we’d like to avoid is having to explicitly pass those transitive dependencies into functions like &lt;code&gt;chargeUser&lt;/code&gt; where they’re not being used directly. On the other hand we don’t want to lose compile time checking by falling back to reflection based dependency injection. &lt;/p&gt;

&lt;p&gt;What if we moved those dependency parameters to the end of the function signature? That way we can use partial application to defer supplying them until the last minute, when we're ready to "wire up the application". Let's try with those service modules first.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Database&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;getUser&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;UserId&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ISqlConnection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Query&lt;/span&gt;&lt;span class="o"&gt;($&lt;/span&gt;&lt;span class="s2"&gt;"SELECT * FROM User AS u  WHERE u.Id = {id}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;PaymentProvider&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;IPaymentClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
        &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Charge&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that we can create a new function that gets the user when passed a connection by simply writing the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;userFromConnection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ISqlConnection&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we can do a similar thing when charging the card.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeCard&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;IPaymentClient&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;PaymentId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;PaymentProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alright, let's stick it together and re-write our &lt;code&gt;chargeUser&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;
    &lt;span class="c1"&gt;// Problem, we haven’t got the user now, but a function that needs a ISqlConnection to get it&lt;/span&gt;
    &lt;span class="nn"&gt;PaymentProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;
    &lt;span class="c1"&gt;// So the last line can’t access the CreditCard property &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's good, but it's not quite right! We've eliminated the two dependency parameters from the &lt;code&gt;chargeUser&lt;/code&gt; function, but it won't compile. As the comment points out we don’t have a &lt;code&gt;User&lt;/code&gt; like we need to, but rather a function that has the type &lt;code&gt;ISqlConnection -&amp;gt; User&lt;/code&gt;. That's because we've only partially applied &lt;code&gt;Database.getUser&lt;/code&gt; and to finish that call off and actually resolve a &lt;code&gt;User&lt;/code&gt;, we still need to supply it with a &lt;code&gt;ISqlConnection&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Does that mean we're going to need to pass in the &lt;code&gt;ISqlConnection&lt;/code&gt; to &lt;code&gt;chargeUser&lt;/code&gt; again? Well if we could find a way to lift up &lt;code&gt;PaymentProvider.chargeCard&lt;/code&gt; so that it could work with &lt;code&gt;ISqlConnection -&amp;gt; User&lt;/code&gt; instead of just &lt;code&gt;User&lt;/code&gt; then we could get it to compile. In order to do this we need to create a new function that takes a &lt;code&gt;ISqlConnection&lt;/code&gt; as well as the function to create a &lt;code&gt;User&lt;/code&gt; given a &lt;code&gt;ISqlConnection&lt;/code&gt; and the amount we want to charge the user. &lt;/p&gt;

&lt;p&gt;We don't really have a good name for this function because outside of this context it doesn't really make sense to have a &lt;code&gt;chargeCard&lt;/code&gt; function that depends on a &lt;code&gt;ISqlConnection&lt;/code&gt;. So what we can do instead is create an anonymous function, a lambda, inside of &lt;code&gt;chargeUser&lt;/code&gt; that does this lifting for us.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ISqlConnection&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;IPaymentClient&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;PaymentId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;userFromConnection&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;userFromConnection&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;
        &lt;span class="nn"&gt;PaymentProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've annotated the return type of &lt;code&gt;chargeUser&lt;/code&gt; to highlight the fact that it's now returning a new function, that when supplied with both dependencies of &lt;code&gt;ISqlConnection&lt;/code&gt; and &lt;code&gt;IPaymentClient&lt;/code&gt;, will charge the user.&lt;/p&gt;

&lt;p&gt;At this point, we've managed to defer the application of any dependencies, but the solution is a bit cumbersome still. If, at a later date, we need to do more computations in &lt;code&gt;chargeUser&lt;/code&gt; that require yet more dependencies, then we're going to be faced with even more lambda writing. For instance imagine we wanted to email the user a receipt with the &lt;code&gt;PaymentId&lt;/code&gt;. Then we'd have to write something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;userFromConnection&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;userFromConnection&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;paymentIdFromClient&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;PaymentProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;

        &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;paymentClient&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;PaymentId&lt;/span&gt; &lt;span class="n"&gt;paymentId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;paymentIdFromClient&lt;/span&gt; &lt;span class="n"&gt;paymentClient&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;EmailBody&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Your payment id is {paymentId}"&lt;/span&gt;
            &lt;span class="nn"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendMail&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;EmailAddress&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;😱&lt;/p&gt;

&lt;p&gt;The nesting is getting out of hand, the code is becoming tiring to write and the number of dependencies we eventually need to supply to this function is getting unwieldy too. We're in a bit of a bind here.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#binding-our-way-out-of-a-bind"&gt;
  &lt;/a&gt;
  Binding our way out of a bind
&lt;/h1&gt;

&lt;p&gt;Let's see if we can write a function called &lt;code&gt;injectSqlConnection&lt;/code&gt; that will allow us to simplify &lt;code&gt;chargeUser&lt;/code&gt; by removing the need for us to write the lambda that supplies the &lt;code&gt;ISqlConnection&lt;/code&gt;. The goal of this is to allow us to write &lt;code&gt;chargeUser&lt;/code&gt; like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="nn"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;injectSqlConnection&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;PaymentProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So &lt;code&gt;injectSqlConnection&lt;/code&gt; needs to take a function that requires a &lt;code&gt;User&lt;/code&gt; as the first parameter and a function that can create a &lt;code&gt;User&lt;/code&gt; given a &lt;code&gt;ISqlConnection&lt;/code&gt; as the second parameter. Let's implement it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;injectSqlConnection&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;valueFromConnection&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;valueFromConnection&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In fact, that function doesn't depend on the &lt;code&gt;ISqlConnection&lt;/code&gt; in anyway. It works for any function &lt;code&gt;f&lt;/code&gt; that needs a value &lt;code&gt;a&lt;/code&gt; which can be created when passed some dependency. So let's just call it &lt;code&gt;inject&lt;/code&gt; from now on to acknowledge that it works for any type of dependency.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#you-just-discovered-the-reader-monad"&gt;
  &lt;/a&gt;
  You just discovered the reader monad 🤓
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;inject&lt;/code&gt; function is letting us sequence computations that each depend on a wrapped value returned from the last computation. In this case the value is wrapped in a function that requires a dependency. That pattern should look familiar because we discovered it when &lt;a href="https://dev.to/choc13/grokking-monads-in-f-3j7f"&gt;Grokking Monads&lt;/a&gt;. It turns out that we've in fact discovered &lt;code&gt;bind&lt;/code&gt; again, but this time for a new monad.&lt;/p&gt;

&lt;p&gt;This new monad is normally called &lt;code&gt;Reader&lt;/code&gt; because it can be thought of as reading some value from an environment. In our case we could call it &lt;code&gt;DependencyInjector&lt;/code&gt; because it's applying some dependency to a function in order to return the value we want. The way to bridge the mental gap here it to just think of dependency injection as a way to read a value from some environment that contains the dependencies.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#a-little-lie"&gt;
  &lt;/a&gt;
  A little lie 🤥
&lt;/h1&gt;

&lt;p&gt;Actually, the implementation of &lt;code&gt;inject&lt;/code&gt; above isn't &lt;em&gt;quite&lt;/em&gt; right. If we rewrite the more complex &lt;code&gt;chargeUser&lt;/code&gt;, the one that also sends an email, using &lt;code&gt;inject&lt;/code&gt; Then we’ll see how it breaks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="nn"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;inject&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;PaymentProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;inject&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;PaymentId&lt;/span&gt; &lt;span class="n"&gt;paymentId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; 
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="nc"&gt;EmailBody&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Your payment id is {paymentId}"&lt;/span&gt;

        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;EmailAddress&lt;/span&gt; &lt;span class="s2"&gt;"a.customer@example.com"&lt;/span&gt;
        &lt;span class="nn"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendMail&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This actually fails on the second &lt;code&gt;inject&lt;/code&gt;. That's because after the first call to &lt;code&gt;inject&lt;/code&gt; it returns the following type &lt;code&gt;ISqlConnection -&amp;gt; IPaymentClient -&amp;gt; PaymentId&lt;/code&gt;. Now on the second call to &lt;code&gt;inject&lt;/code&gt; we have two dependencies to deal with, but our &lt;code&gt;inject&lt;/code&gt; function has only been designed to supply one, so it all falls down. &lt;/p&gt;

&lt;p&gt;The solution to this is to create a single type that can represent all of the dependencies. Basically we want the &lt;code&gt;chargeUser&lt;/code&gt; function to have the signature &lt;code&gt;UserId -&amp;gt; float -&amp;gt; Dependencies -&amp;gt; TransactionId&lt;/code&gt; rather than &lt;code&gt;UserId -&amp;gt; float -&amp;gt; ISqlConnection -&amp;gt; IPaymentClient -&amp;gt; TransactionId&lt;/code&gt;. If we can do that then we just need to make one small adjustment to &lt;code&gt;inject&lt;/code&gt; to make things work again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;inject&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;valueThatNeedsDep&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;deps&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;valueThatNeedsDep&lt;/span&gt; &lt;span class="n"&gt;deps&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;deps&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how this time we also supply &lt;code&gt;deps&lt;/code&gt; to &lt;code&gt;f&lt;/code&gt; on the final line? It's subtle but it changes the return type of &lt;code&gt;inject&lt;/code&gt; to be &lt;code&gt;('deps -&amp;gt; 'c)&lt;/code&gt;, where &lt;code&gt;'deps&lt;/code&gt; is the type of dependencies also required by &lt;code&gt;valueThatNeedsDep&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So what's happened here is that we've now constrained the output of &lt;code&gt;inject&lt;/code&gt; to be a new function that requires the same type of &lt;code&gt;'deps&lt;/code&gt; as the original function. That's important because it means our dependencies are now unified to a single type and we can happily keep chaining computations that require those dependencies together.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#uniting-dependencies"&gt;
  &lt;/a&gt;
  Uniting dependencies 👭
&lt;/h1&gt;

&lt;p&gt;There are several ways to unite all of the dependencies together in a single type, such as explicitly creating a type with fields to represent each one. One of the neatest with F# though is to use inferred inheritance. Inferred inheritance means we let the compiler infer a type that implements all of the dependency interfaces we require. &lt;/p&gt;

&lt;p&gt;In order to use inferred inheritance we need to add a &lt;code&gt;#&lt;/code&gt; to the front of the type annotations for each dependency. Let's make that change in the &lt;code&gt;Database&lt;/code&gt; and &lt;code&gt;PaymentProvider&lt;/code&gt; modules to see what that looks like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Database&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;getUser&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;UserId&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nc"&gt;ISqlConnection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;PaymentProvider&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nc"&gt;IPaymentClient&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;TransactionId&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All we've changed is to write &lt;code&gt;#ISqlConnection&lt;/code&gt; instead of &lt;code&gt;ISqlConnection&lt;/code&gt; and &lt;code&gt;#IPaymentClient&lt;/code&gt; instead of &lt;code&gt;IPaymentClient&lt;/code&gt;. From this F# can union these types together for us when it encounters something that needs to satisfy both constraints. Then at the root of the application we just have to create an object that implements both interfaces in order to satisfy the constraint.&lt;/p&gt;

&lt;p&gt;The upshot of this is that F# infers the type signature of &lt;code&gt;chargeUser&lt;/code&gt; to be &lt;code&gt;UserId -&amp;gt; float ('deps -&amp;gt; unit)&lt;/code&gt; and it requires that &lt;code&gt;'deps&lt;/code&gt; inherit from both &lt;code&gt;ISqlConnection&lt;/code&gt; and &lt;code&gt;IPaymentProvider&lt;/code&gt;. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#a-final-improvement"&gt;
  &lt;/a&gt;
  A final improvement
&lt;/h1&gt;

&lt;p&gt;We've pretty much reached our stated goal now of eliminating all of the explicit dependency passing between functions. However, I think it's still a bit annoying that we have to keep creating lambdas to access the values like &lt;code&gt;user&lt;/code&gt; and &lt;code&gt;paymentId&lt;/code&gt; when calling &lt;code&gt;inject&lt;/code&gt; to compose the operations. We've seen before, in &lt;a href="https://dev.to/choc13/grokking-monads-imperatively-394a"&gt;Grokking Monads, Imperatively&lt;/a&gt;, that it's possible to write monadic code in an imperative style by using computation expressions. &lt;/p&gt;

&lt;p&gt;All we have to do is create the computation expression builder using the &lt;code&gt;inject&lt;/code&gt; function we wrote earlier, as that's our monadic &lt;code&gt;bind&lt;/code&gt;. We'll call this computation expression &lt;code&gt;injector&lt;/code&gt; because that's more relevant to our use case here, but typically it would be called &lt;code&gt;reader&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;InjectorBuilder&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="o"&gt;_.&lt;/span&gt;&lt;span class="nc"&gt;Return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="o"&gt;_.&lt;/span&gt;&lt;span class="nc"&gt;Bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inject&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="o"&gt;_.&lt;/span&gt;&lt;span class="nc"&gt;Zero&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="o"&gt;_.&lt;/span&gt;&lt;span class="nc"&gt;ReturnFrom&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;injector&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;InjectorBuilder&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;injector&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;paymentId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;PaymentProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="nc"&gt;EmailBody&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Your payment id is {paymentId}"&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nn"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendMail&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Email&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;😍&lt;br&gt;
By simply wrapping the implementation in &lt;code&gt;reader { }&lt;/code&gt; we’re basically back to our very first naïve implementation, except this time all of the control is properly inverted. Whilst the transitive dependencies are nicely hidden from sight they’re still being type checked. In fact if we added more operations to this later that required new dependencies then F# would automatically add them to the list of required interfaces that must be implemented for the &lt;code&gt;'deps&lt;/code&gt; type in order to finally invoke this function.&lt;/p&gt;

&lt;p&gt;When we're finally ready to call this function, say at the application root where we have all of the config to hand in order to create the dependencies, then we can do it like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;IDeps&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;inherit&lt;/span&gt; &lt;span class="nc"&gt;IPaymentClient&lt;/span&gt;
    &lt;span class="k"&gt;inherit&lt;/span&gt; &lt;span class="nc"&gt;ISqlConnection&lt;/span&gt;
    &lt;span class="k"&gt;inherit&lt;/span&gt; &lt;span class="nc"&gt;IEmailClient&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;deps&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;IDeps&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
        &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="o"&gt;_.&lt;/span&gt;&lt;span class="nc"&gt;Charge&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="c1"&gt;// create PaymentClient and call it&lt;/span&gt;

        &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="o"&gt;_.&lt;/span&gt;&lt;span class="nc"&gt;SendMail&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="c1"&gt;// create SMTP client and call it&lt;/span&gt;

        &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="o"&gt;_.&lt;/span&gt;&lt;span class="nc"&gt;Query&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="c1"&gt;// create sql connection and invoke it &lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;paymentId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;chargeUser&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;UserId&lt;/span&gt; &lt;span class="s2"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="n"&gt;deps&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where we use an object expression to implement our new &lt;code&gt;IDeps&lt;/code&gt; interface on the fly so that it satisfies all of the inferred types required by &lt;code&gt;chargeUser&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#quick-recap"&gt;
  &lt;/a&gt;
  Quick recap 🧑‍🎓
&lt;/h1&gt;

&lt;p&gt;We started off by trying to achieve inversion of control to remove hardcoded dependencies and config. We saw that doing this naïvely can lead to an explosion in the number of function parameters and that it can cascade right through the application. In order to solve this we started out with partial application to defer supplying those parameters until we were at the application root where we had the necessary config to hand. However, this solution meant that we couldn't easily compose functions that required dependencies and it was even more tricky when they required different types of dependencies.&lt;/p&gt;

&lt;p&gt;So we invented an &lt;code&gt;inject&lt;/code&gt; function that took care of this plumbing for us and realised that we'd actually discovered a new version of &lt;code&gt;bind&lt;/code&gt; and hence a new type of monad. This new monad is commonly known as &lt;code&gt;Reader&lt;/code&gt; and it's useful when you need to compose several functions that all require values (or dependencies) that can be supplied by some common environment type.&lt;/p&gt;

&lt;p&gt;If you want to use the reader monad in practice then you can find an implementation that's ready to roll in the &lt;a href="https://fsprojects.github.io/FSharpPlus/reference/fsharpplus-data-reader.html"&gt;FSharpPlus&lt;/a&gt; library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#appendix"&gt;
  &lt;/a&gt;
  Appendix
&lt;/h2&gt;

&lt;p&gt;The format of the reader monad is often a little different in practice to how it was presented here. Expand the section below if you want more details.&lt;/p&gt;

&lt;p&gt;
  
  &lt;p&gt;Usually when implementing the reader monad we create a new type to signify it, called &lt;code&gt;Reader&lt;/code&gt;, in order to distinguish it from a regular function type. I left it out above because it's not an important detail when it comes to grokking the concept, but if you're looking to use the technique then you'll likely encounter it in this wrapped form. It's a trivial change and the code would just look like this instead.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Reader&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Reader&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Reader&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Reader&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Reader&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="nc"&gt;Reader&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
                &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;
                &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;newReader&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
                &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;newReader&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;ask&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Reader&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;ReaderBuilder&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="o"&gt;_.&lt;/span&gt;&lt;span class="nc"&gt;Return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Reader&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="o"&gt;_.&lt;/span&gt;&lt;span class="nc"&gt;Bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="o"&gt;_.&lt;/span&gt;&lt;span class="nc"&gt;Zero&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Reader&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="o"&gt;_.&lt;/span&gt;&lt;span class="nc"&gt;ReturnFrom&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;ReaderBuilder&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
    &lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sqlConnection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nc"&gt;ISqlConnection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ask&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;paymentClient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nc"&gt;IPaymentClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ask&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;emailClient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nc"&gt;IEmailClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ask&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt; &lt;span class="n"&gt;sqlConnection&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;paymentId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;PaymentProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="n"&gt;paymentClient&lt;/span&gt;

        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="nc"&gt;EmailBody&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Your payment id is {paymentId}"&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nn"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendMail&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Email&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="n"&gt;emailClient&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The return type of &lt;code&gt;chargeUser&lt;/code&gt; is now &lt;code&gt;Reader&amp;lt;'deps, unit&amp;gt;&lt;/code&gt; where &lt;code&gt;'deps&lt;/code&gt; will have to satisfy all of those interfaces marked with &lt;code&gt;#&lt;/code&gt; as before. &lt;/p&gt;

&lt;p&gt;I've also had to use &lt;code&gt;Reader.ask&lt;/code&gt; to actually get dependencies out of the environment in this case. The reason for this is because functions like &lt;code&gt;Database.getUser&lt;/code&gt; do not return a &lt;code&gt;Reader&lt;/code&gt; in their current form. We could create a &lt;code&gt;Reader&lt;/code&gt; on the fly by doing &lt;code&gt;Reader (Database.getUser userId)&lt;/code&gt; but sometimes that can also be cumbersome, especially if we're working with client classes rather than functions, which is often the case. So having &lt;code&gt;ask&lt;/code&gt; in our toolkit can be a nice way to just get hold of the dependency and use it explicitly in the current scope.&lt;/p&gt;



&lt;br&gt;
&lt;/p&gt;

</description>
      <category>fsharp</category>
      <category>functional</category>
      <category>programming</category>
      <category>grokking</category>
    </item>
    <item>
      <title>Python Automate the task of creating a file and run it from any directory.</title>
      <author>Hritik Pawar</author>
      <pubDate>Sat, 01 May 2021 07:21:47 +0000</pubDate>
      <link>https://dev.to/iamhritikpawar/python-automate-the-task-of-creating-a-file-and-run-it-from-any-directory-33cl</link>
      <guid>https://dev.to/iamhritikpawar/python-automate-the-task-of-creating-a-file-and-run-it-from-any-directory-33cl</guid>
      <description>&lt;p&gt;If you are a Coder? We have to create a file with a basic syntax on regular basis.&lt;/p&gt;

&lt;p&gt;In the last blog as I told you, I am learning some Competitive programming I have to create a new python file every time I learning and solving a new algorithm.&lt;/p&gt;

&lt;p&gt;Also, each file has a main() function which I have to write every time, and also I have to update my readme.md file as I push it on GitHub and keep track of problems I solve.&lt;/p&gt;

&lt;p&gt;So I created a simple template file using python which I can run from any directory. I just have to type "template" in cmd &amp;gt; enter new filename &amp;gt; enter the text I have to append to the readme.md file &amp;gt; and Enter.&lt;br&gt;
It's that simple!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#code-of-my-templatepy-file"&gt;
  &lt;/a&gt;
  Code of my template.py file.
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#imports
import os
from datetime import date, datetime
today = date.today()
now = datetime.now()
d1 = today.strftime("%B %d, %Y")
current_time = now.strftime("%H:%M:%S")

#file creation locations and file name input
Newfilename = input("Enter filename:")
readmefileinput = input("Enter readme input:")
Newfilelocation = Newfilename
ReadmeFileLocation = "readme.md"

#open file to read, write or append 
f = open(Newfilelocation, "a")
g = open(ReadmeFileLocation, "a")


#Declaration of the lines to write
comments = "#Date: " + d1 + '   ' + "Time: " + current_time + "\n" 
imports = "from sys import stdin, stdout\nimport collections\nimport time\n\n\n\n"
line1 = "def main():\n\n\n\n"
line2 = "if __name__ == '__main__:'\n "
line3 = "   main()"


#Writelines in the file created
f.writelines ([comments, imports, line1, line2, line3])
g.write("\n" + readmefileinput)
f.close()
g.close()

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To make Python scripts runnable from any location under Windows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0K33yEsC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ts8qz03oudyc3io2hau.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0K33yEsC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ts8qz03oudyc3io2hau.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D8gIlkSY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmenkp46dm0nup9y9zpm.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D8gIlkSY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmenkp46dm0nup9y9zpm.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To call python script directly from the command prompt, e.g., to invoke the script “template.py” simply typing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;gt; template
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;instead of needing to type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; python path\to\template.py 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Steps to add template.py to Environment Variables:&lt;br&gt;
Go to your python directory. E.g. Mine is "C:\Python39\Scripts"&lt;br&gt;
Copy template.py file into this directory&lt;br&gt;
It's more likely you already have a Python script folder in your Environment Variable but if not&lt;br&gt;
Add the path to this script directory in Windows "PATH" system variable:&lt;/p&gt;

&lt;p&gt;You should be able to run any of your python template files from any directory now.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Protect Your Source code  from public access - its easy just follow simple steps.</title>
      <author>Dev.to</author>
      <pubDate>Sat, 01 May 2021 07:06:10 +0000</pubDate>
      <link>https://dev.to/devto4/protect-your-source-code-from-public-access-its-easy-just-follow-simple-steps-393d</link>
      <guid>https://dev.to/devto4/protect-your-source-code-from-public-access-its-easy-just-follow-simple-steps-393d</guid>
      <description>&lt;h1&gt;
  &lt;a href="#source-code-and-map"&gt;
  &lt;/a&gt;
  Source code and map
&lt;/h1&gt;

&lt;p&gt;When you build your project, the process generates a folder called “build” or any other as per framework policy. Just go to the build folder, and you will find some .jsextension files, and some are .map extension files. The js &amp;amp; map files are the source and map files. The map files are also important while developing. The map helps to debug.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#your-source-is-public"&gt;
  &lt;/a&gt;
  Your Source Is Public
&lt;/h1&gt;

&lt;p&gt;When a web is published, then you only publish the build folder. Now from the previous section, we know that the map file is only needed to debug. If we publish the build folder with the map files, then your source code is considered.&lt;/p&gt;

&lt;p&gt;Where to find source code&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Inspect the web page from a browser.&lt;/li&gt;
&lt;li&gt;Go to the Source tab.&lt;/li&gt;
&lt;li&gt;There you will find the whole path of the source&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Solution&lt;br&gt;
There are two simple solutions to solve the problem. The ultimate target is to remove map files before deployment. Here is a simple way you can use it. Add GENERATE_SOURCEMAP = false at your package.json script section.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cmsinstallation.blogspot.com/2021/04/protect-your-source-code-from-public.html"&gt;Get More Solutions here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>python</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Useful tools, libraries and resources for developer to speed up the development</title>
      <author>Dev.to</author>
      <pubDate>Sat, 01 May 2021 07:00:57 +0000</pubDate>
      <link>https://dev.to/devto4/useful-tools-libraries-and-resources-for-developer-to-speed-up-the-development-3idf</link>
      <guid>https://dev.to/devto4/useful-tools-libraries-and-resources-for-developer-to-speed-up-the-development-3idf</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7ChceTga--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zuzaj1vz4bkjs654nflg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7ChceTga--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zuzaj1vz4bkjs654nflg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
In this article we are not going to talk about big and already popular framework and tools, we simply  wants to share a list of tools which we  found useful for speeding up a developer’s workflow.&lt;/p&gt;

&lt;p&gt;So here is the list &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#javascript-libraries"&gt;
  &lt;/a&gt;
  Javascript libraries
&lt;/h1&gt;

&lt;p&gt;Particles.js — A library for creating beautiful floating particles on a web page&lt;/p&gt;

&lt;p&gt;Three.js — A library for creating 3d objects and spaces on a web page&lt;/p&gt;

&lt;p&gt;Fullpage.js — Easy to implement full page scroll feature&lt;/p&gt;

&lt;p&gt;Typed.js — Typewriter effect&lt;/p&gt;

&lt;p&gt;Waypoints.js — Trigger a function when you scroll to an element&lt;/p&gt;

&lt;p&gt;Highlight.js — Syntax highlighting for the web&lt;/p&gt;

&lt;p&gt;Chart.js — Make beautiful charts using only javascript&lt;/p&gt;

&lt;p&gt;Instantclick — Dramatically speed up your website load time, preloading resources on mouse hover&lt;/p&gt;

&lt;p&gt;Chartist — Another chart library&lt;/p&gt;

&lt;p&gt;Motio — A library for sprite based animations and panning&lt;/p&gt;

&lt;p&gt;Animstion — Jquery plugin for css animated page transitions&lt;/p&gt;

&lt;p&gt;Barba.js — Fluid page transitions&lt;/p&gt;

&lt;p&gt;TwentyTwenty — A visual diff tool to spot differences&lt;/p&gt;

&lt;p&gt;Vivus.js — A library for making drawing animation on SVG&lt;/p&gt;

&lt;p&gt;Wow.js — Reveal animations when you scroll&lt;/p&gt;

&lt;p&gt;Scrolline.js — See how much you have scrolled untill the end of the page&lt;/p&gt;

&lt;p&gt;Velocity.js — Very fast and smooth javascript animations&lt;/p&gt;

&lt;p&gt;Animate on scroll — Pretty straightforward&lt;/p&gt;

&lt;p&gt;Handlebars.js — Javascript templating&lt;/p&gt;

&lt;p&gt;jInvertScroll — Parallax scrolling&lt;/p&gt;

&lt;p&gt;One page scroll — And again a one page scrolling library&lt;/p&gt;

&lt;p&gt;Parallax.js — Parallax Engine that reacts to the orientation of a smart device&lt;/p&gt;

&lt;p&gt;Typeahead.js — Search completion&lt;/p&gt;

&lt;p&gt;Dragdealer.js — Pretty cool dragging library&lt;/p&gt;

&lt;p&gt;Bounce.js — Create cool CSS3 animations&lt;/p&gt;

&lt;p&gt;Pagepiling.js — One page scroll&lt;/p&gt;

&lt;p&gt;Multiscroll.js — Multi scroll a website into two vertical scrolling panels&lt;/p&gt;

&lt;p&gt;Favico.js — Dynamic favicons&lt;/p&gt;

&lt;p&gt;Midnight.js — Switch fixed headers on the fly&lt;/p&gt;

&lt;p&gt;Anime.js — Animation library&lt;/p&gt;

&lt;p&gt;Keycode — Get javascript keycode for a button that is pressed&lt;/p&gt;

&lt;p&gt;Sortable — Drag &amp;amp; drop&lt;/p&gt;

&lt;p&gt;Flexdatalist — Autocomplete&lt;/p&gt;

&lt;p&gt;Slideout.js — Slideout navigation menu for mobile apps&lt;/p&gt;

&lt;p&gt;Jquerymy — Two way data bindings using jquery&lt;/p&gt;

&lt;p&gt;Cleave.js — Format content while typing&lt;/p&gt;

&lt;p&gt;Page — Client side routing for single page applications&lt;/p&gt;

&lt;p&gt;Selectize.js — Hybrid select box for adding tags&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cmsinstallation.blogspot.com/2021/04/useful-tools-libraries-and-resources.html"&gt;Get some more from here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>webdev</category>
      <category>python</category>
      <category>php</category>
    </item>
    <item>
      <title>Fun facts about programming – Enjoy Programing</title>
      <author>Dev.to</author>
      <pubDate>Sat, 01 May 2021 06:53:19 +0000</pubDate>
      <link>https://dev.to/devto4/fun-facts-about-programming-enjoy-programing-f5a</link>
      <guid>https://dev.to/devto4/fun-facts-about-programming-enjoy-programing-f5a</guid>
      <description>&lt;h1&gt;
  &lt;a href="#real-programmers"&gt;
  &lt;/a&gt;
  Real programmers
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Real programmers’ favourite line is “It works on my machine!"&lt;/li&gt;
&lt;li&gt;Real programmers only test their code in production.&lt;/li&gt;
&lt;li&gt;Real programmers hate to write specs. (But if they have to…)&lt;/li&gt;
&lt;li&gt;Real programmers debug code on the production environment.&lt;/li&gt;
&lt;li&gt;Real programmers…fix one bug and get 100 new ones&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#you-know-youre-a-programmer"&gt;
  &lt;/a&gt;
  You know you’re a programmer.
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;when you spill coffee on your laptop and aggressively press Ctrl+Z to undo the error.&lt;/li&gt;
&lt;li&gt;when you try to Ctrl+F in a printed book.&lt;/li&gt;
&lt;li&gt;when you spend a day to find the problem and you fix it with one line of code.&lt;/li&gt;
&lt;li&gt;when your code works and you have no idea why.
when you tell a programmer joke and nobody understands it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#most-programmers-struggle-with-two-thing"&gt;
  &lt;/a&gt;
  Most programmers struggle with two thing
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;naming things and cache invalidation.&lt;/li&gt;
&lt;li&gt;the right amount of curses mixed with just enough coffee.&lt;/li&gt;
&lt;li&gt;other programmers and other programmers’ code.&lt;/li&gt;
&lt;li&gt;debugging and more debugging.&lt;/li&gt;
&lt;li&gt;coffee and bugs.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#the-first-rule-of-programming"&gt;
  &lt;/a&gt;
  The first rule of programming
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;never ask “why?” Just be grateful it works!&lt;/li&gt;
&lt;li&gt;if something looks easy, it’s hard; if it looks hard, it’s almost impossible.&lt;/li&gt;
&lt;li&gt;if it works, don’t touch it.&lt;/li&gt;
&lt;li&gt;never write standardized code, so no one will want to steal it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://cmsinstallation.blogspot.com/2021/04/fun-facts-about-programming-happy.html"&gt;Get some more funny facts about programing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cmsinstallation.blogspot.com/2021/04/12-interesting-facts-about-coding-you.html"&gt;Get some interesting facts about programing&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>webdev</category>
      <category>programming</category>
      <category>python</category>
    </item>
    <item>
      <title>How To Upload Multiple files to Cloudinary in Nodejs using Promise.all</title>
      <author>Olanrewaju A. Olaboye</author>
      <pubDate>Sat, 01 May 2021 06:52:01 +0000</pubDate>
      <link>https://dev.to/boyepanthera/how-to-upload-multiple-files-to-cloudinary-in-nodejs-using-promise-all-2mk7</link>
      <guid>https://dev.to/boyepanthera/how-to-upload-multiple-files-to-cloudinary-in-nodejs-using-promise-all-2mk7</guid>
      <description>&lt;p&gt;It has remained something confusing while perusing cloudinary documentation on how exactly do you upload multiple images, for most developers what they tend to do is to call the single file upload method on the SDK in a loop, while this seems to work at times it gets buggy when one of the files has to take more time than the other because of the size. To follow along the tutorial you can download the starter boilerplate nodejs with express code from &lt;a href="https://github.com/wonderfulolanrewaju/multi-file-uploader"&gt;Github &lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We need to add multer configuration to our server.js file, then use this to create an. upload middleware function.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First Acts&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//clone the repo
git clone https://github.com/wonderfulolanrewaju/multi-file-uploader/blob/master/package.json

//cd into the project
cd multi-file-uploader

//install all dependencies
yarn install

//install nodemon for server restart on save
yarn add -D nodemon

//install new dependencies
yarn add dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Second Acts&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//Add the following object to your package.json
//What this does is allow us to make our server restart on save and run our js file with Esm module so we can use import syntax

 "scripts": {
    "start": "node -r esm server.js",
    "dev: "nodemon -r esm server.js"
  },
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Third Acts: Change the top part of server.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import express from "express";
import cloudinary from "cloudinary";
import multer from "multer";
import dotenv from "dotenv";
dotenv.config();
const app = express();
app.use(express.urlencoded({ extended: true }));
app.use(express.json());
const {
  NODE_ENV,
  PORT: productionPort,
  IP: productionIP,
  cloudinaryName,
  cloudinaryApiKey,
  cloudinaryApiSecret,
} = process.env;
const storage = multer.diskStorage({
  filename: function (req, file, cb) {
    cb(null, file.fieldname + "-" + Date.now());
  },
});

cloudinary.v2.config({
  cloud_name: cloudinaryName,
  api_key: cloudinaryApiKey,
  api_secret: cloudinaryApiSecret,
});

const upload = multer({ storage });

app.get("/", (req, res) =&amp;gt; {
  return res.status(200).json({
    message: "Multiple uploader api",
  });
});

...
if (NODE_ENV === "production") {
...

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Acts Four&lt;/strong&gt;&lt;br&gt;
What we do next is used the upload middleware function created from multer, this middleware's array method :  "upload.array(nameOfFilesFields, maxCount)" takes the name we want to call the file field and the maximum number of images it should allow for upload.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.post("/images", upload.array("pictures", 10), async (req, res) =&amp;gt; {
  try {
    let pictureFiles = req.files;
    //Check if files exist
    if (!pictureFiles)
      return res.status(400).json({ message: "No picture attached!" });
    //map through images and create a promise array using cloudinary upload function
    let multiplePicturePromise = pictureFiles.map((picture) =&amp;gt;
      cloudinary.v2.uploader.upload(picture.path)
    );
    // await all the cloudinary upload functions in promise.all, exactly where the magic happens
    **let imageResponses = await Promise.all(multiplePicturePromise);**
    res.status(200).json({ images: imageResponses });
  } catch (err) {
    res.status(500).json({
      message: err.message,
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;You can run yarn dev. your app should be running on localhost:9000&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can make a request to &lt;a href="http://localhost9000/images"&gt;http://localhost9000/images&lt;/a&gt; with the form-data request body type using pictures as field name a sample screenshot is shown below&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jckOJMYS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqf37yeqbjo0ophnuj4e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jckOJMYS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqf37yeqbjo0ophnuj4e.png" alt="Response screenshot"&gt;&lt;/a&gt;&lt;br&gt;
You can also view the sample response json on a &lt;a href="https://multi-file-uploader.herokuapp.com/sampleresponse.json"&gt;Public directory&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The completed version of the code is available on &lt;a href="https://github.com/wonderfulolanrewaju/multi-file-uploader/tree/completed"&gt;Completed branch on Github&lt;/a&gt; and live version available on &lt;a href="https://multi-file-uploader.herokuapp.com/"&gt;Heroku&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>cloudinary</category>
      <category>multer</category>
    </item>
    <item>
      <title>Best Practices for Writing Super Readable Code</title>
      <author>Dev.to</author>
      <pubDate>Sat, 01 May 2021 06:46:46 +0000</pubDate>
      <link>https://dev.to/devto4/best-practices-for-writing-super-readable-code-37hm</link>
      <guid>https://dev.to/devto4/best-practices-for-writing-super-readable-code-37hm</guid>
      <description>&lt;h1&gt;
  &lt;a href="#1-commenting-amp-documentation"&gt;
  &lt;/a&gt;
  1. Commenting &amp;amp; Documentation
&lt;/h1&gt;

&lt;p&gt;IDE's (Integrated Development Environment) have come a long way in the past few years. This made commenting your code more useful than ever. Following certain standards in your comments allows IDE's and other tools to utilize them in different ways.  &lt;/p&gt;

&lt;p&gt;The comments I added at the function definition can be previewed whenever I use that function, even from other files.Here is another example where I call a function from a third party library : In these particular examples, the type of commenting (or documentation) used is based on PHPDoc, and the IDE is Aptana.&lt;/p&gt;

&lt;p&gt;2 Million+ WordPress Themes &amp;amp; Plugins, Web &amp;amp; Email Templates, UI Kits and More&lt;/p&gt;

&lt;p&gt;Download thousands of WordPress themes and plugins, web templates, UI elements, and much more with an Envato Elements membership. Get unlimited access to a growing library to millions of creative and code assets.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-consistent-indentation"&gt;
  &lt;/a&gt;
  2. Consistent Indentation
&lt;/h1&gt;

&lt;p&gt;I assume you already know that you should indent your code. However, it's also worth noting that it is a good idea to keep your indentation style consistent.&lt;/p&gt;

&lt;p&gt;There are more than one way of indenting code.&lt;/p&gt;

&lt;p&gt;Style 1:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function foo()
{
    if ($maybe)
    {
        do_it_now();
        again();
    }
    else
    {
        abort_mission();
    }
    finalize();
}
Style 2:

function foo() {
    if ($maybe) {
        do_it_now();
        again();
    } else {
        abort_mission();
    }
    finalize();
}
Style 3:

function foo()
{   if ($maybe)
    {   do_it_now();
        again();
    }
    else
    {   abort_mission();
    }
    finalize();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I used to code in style #2 but recently switched to #1. But that is only a matter of preference. There is no "best" style that everyone should be following. Actually, the best style, is a consistent style. If you are part of a team or if you are contributing code to a project, you should follow the existing style that is being used in that project.&lt;/p&gt;

&lt;p&gt;The indentation styles are not always completely distinct from one another. Sometimes, they mix different rules. For example, in PEAR Coding Standards, the opening bracket "{" goes on the same line as control structures, but they go to the next line after function definitions.&lt;/p&gt;

&lt;p&gt;PEAR Style:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function foo()
{                     // placed on the next line
    if ($maybe) {     // placed on the same line
        do_it_now();
        again();
    } else {
        abort_mission();
    }
    finalize();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also note that they are using four spaces instead of tabs for indentations. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-avoid-obvious-comments"&gt;
  &lt;/a&gt;
  3. Avoid Obvious Comments
&lt;/h1&gt;

&lt;p&gt;Commenting your code is fantastic; however, it can be overdone or just be plain redundant. Take this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// get the country code
$country_code = get_country_code($_SERVER['REMOTE_ADDR']);

// if country code is US
if ($country_code == 'US') {

    // display the form input for state
    echo form_input_state();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the text is that obvious, it's really not productive to repeat it within comments.&lt;/p&gt;

&lt;p&gt;If you must comment on that code, you can simply combine it to a single line instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// display state selection for US users
$country_code = get_country_code($_SERVER['REMOTE_ADDR']);
if ($country_code == 'US') {
    echo form_input_state();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://cmsinstallation.blogspot.com/2021/04/top-15-best-practices-for-writing-super.html"&gt;Get some more from here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>showdev</category>
      <category>programming</category>
      <category>python</category>
    </item>
    <item>
      <title>6 Ways To Make Money With Your Code</title>
      <author>Dev.to</author>
      <pubDate>Sat, 01 May 2021 06:41:34 +0000</pubDate>
      <link>https://dev.to/devto4/6-ways-to-make-money-with-your-code-k61</link>
      <guid>https://dev.to/devto4/6-ways-to-make-money-with-your-code-k61</guid>
      <description>&lt;p&gt;Many of us know what “Coding” is and maybe some of you’ve built really cool projects and have many years of practice, however, not everybody knows how to really make money from your code. I tried to find the best ways how to do it, some of them I used myself and some of them not, but actually, everybody can highlight something from this top.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-freelancing"&gt;
  &lt;/a&gt;
  1. Freelancing
&lt;/h1&gt;

&lt;p&gt;Freelancing is one of the most popular ways of doing money, if you know something well enough (Coding, Photoshoping, or Editing) then you can easily present your services. It is directly proportional to how much effort you put into this. There are many platforms to start accepting orders from other people, for instance: Upwork, Fiverr and etc.&lt;/p&gt;

&lt;p&gt;Minuses: &lt;br&gt;
Competitive Environment, you need to put really much effort to be better than other&lt;br&gt;
If you’re new at this niche most likely that customers just won’t notice you&lt;br&gt;
Pluses:&lt;br&gt;
As I said earlier, is it directly proportional to how much effort you put into this&lt;br&gt;
The more positive feedback you have the more you be popular and earn more&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-creating-courses"&gt;
  &lt;/a&gt;
  2. Creating Courses
&lt;/h1&gt;

&lt;p&gt;I’ll show you how profitable can it be, there’s a course of Python — “2021 Complete Python Bootcamp From Zero to Hero in Python” and it has over 1.2 million students, which means that even with the lowest price (11.99$) the founder with of this course will earn more than 14 million dollars. You can tutor other 1 to 1 or create a course on Udemy as I’ve shown earlier. I think you get the idea, now let’s look at the minuses and pluses.&lt;/p&gt;

&lt;p&gt;Minuses: &lt;br&gt;
You need to know something really good to teach others&lt;br&gt;
Maybe it will require any attachments &lt;br&gt;
Pluses:&lt;br&gt;
As you saw only in one example, you can make a really big sum of money&lt;br&gt;
It’s really useful because when you teach someone you understand it better yourself&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cmsinstallation.blogspot.com/2021/04/6-ways-to-make-money-with-your-code.html"&gt;Get Some More HERE&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>showdev</category>
      <category>programming</category>
      <category>python</category>
    </item>
    <item>
      <title>Free APIs That Nobody Is Talking About</title>
      <author>Dev.to</author>
      <pubDate>Sat, 01 May 2021 06:40:11 +0000</pubDate>
      <link>https://dev.to/devto4/free-apis-that-nobody-is-talking-about-1kal</link>
      <guid>https://dev.to/devto4/free-apis-that-nobody-is-talking-about-1kal</guid>
      <description>&lt;p&gt;Nothing excites me more than finding an out of the ordinary API.Many times we just want to focus on the frontend but also need interesting, dynamic data to display.This is where public APIs come into play. API is an acronym for Application Programming Interface.The core benefit of using it is that it allows one program to interact with other programs.Using public APIs allows you to focus on the frontend and things that matter without worrying so much about the database and the backend.Below are 7 less-talked about public and free APIs.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-evil-insult-generator"&gt;
  &lt;/a&gt;
  1. Evil Insult Generator
&lt;/h1&gt;

&lt;p&gt;How many times have you tried to insult your best friend? Now you have got a helping hand!&lt;/p&gt;

&lt;p&gt;As the API name suggests, the goal is to offer some of the evilest insults.&lt;/p&gt;

&lt;p&gt;You can create an app centered around this API or combine this API with other excellent APIs provided below like implementing the generated insults in meme templates.&lt;/p&gt;

&lt;p&gt;The API is extremely simple to use. You just need to visit a URL and you get the desired JSON output without even signing up for a key.&lt;/p&gt;

&lt;p&gt;Sample output of the API is provided below:&lt;/p&gt;

&lt;p&gt;{&lt;br&gt;
"number":"117",&lt;br&gt;
"language":"en",&lt;br&gt;
"insult":"Some cause happiness wherever they go; others, whenever they go.",&lt;br&gt;
"created":"2020-11-22 23:00:15",&lt;br&gt;
"shown":"45712",&lt;br&gt;
"createdby":"",&lt;br&gt;
"active":"1",&lt;br&gt;
"comment":"http:\/\/&lt;a href="http://www.mirror.co.uk%5C/news%5C/weird-news%5C/worlds-20-most-bizarre-insults-7171396"&gt;www.mirror.co.uk\/news\/weird-news\/worlds-20-most-bizarre-insults-7171396&lt;/a&gt;"&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;You get the other properties as well such as the time it was created, the language, any comment as well as the views. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-movies-and-tv-api"&gt;
  &lt;/a&gt;
  2. Movies and TV API
&lt;/h1&gt;

&lt;p&gt;TMDb is a famous API, but do you know there are other API that provides insights from specific shows and movies?&lt;/p&gt;

&lt;p&gt;Below are some of the APIs you can use to develop apps featuring your favorite show:&lt;br&gt;
Breaking Bad API&lt;br&gt;
API of Ice And Fire &lt;br&gt;
Harry Potter API&lt;br&gt;
YouTube API (for embedding YouTube functionalities)&lt;br&gt;
The Lord of the Rings API&lt;br&gt;&lt;br&gt;
Like the API above, you can get started with some of the APIs without even signing up for a key.&lt;/p&gt;

&lt;p&gt;Not only this, using non-copyright images, you can truly create a great fan app for your beloved shows.&lt;/p&gt;

&lt;p&gt;Below is a sample output from the Breaking Bad API which you can get here.&lt;/p&gt;

&lt;p&gt;It doesn’t require a key however has a rate limit of 10,000 requests per day.&lt;/p&gt;

&lt;p&gt;{&lt;br&gt;
   [&lt;br&gt;
      {&lt;br&gt;
         "quote_id":1,&lt;br&gt;
         "quote":"I am not in danger, Skyler. I am the danger!",&lt;br&gt;
         "author":"Walter White",&lt;br&gt;
         "series":"Breaking Bad"&lt;br&gt;
      },&lt;br&gt;
      {&lt;br&gt;
         "quote_id":2,&lt;br&gt;
         "quote":"Stay out of my territory.",&lt;br&gt;
         "author":"Walter White",&lt;br&gt;
         "series":"Breaking Bad"&lt;br&gt;
      },&lt;br&gt;
      {&lt;br&gt;
         "quote_id":3,&lt;br&gt;
         "quote":"IFT",&lt;br&gt;
         "author":"Skyler White",&lt;br&gt;
         "series":"Breaking Bad"&lt;br&gt;
      }&lt;br&gt;
      .....&lt;br&gt;
   ]&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;It returns a JSON containing an array of objects with quotes, the author of the quotes, and an ID.&lt;/p&gt;

&lt;p&gt;You can mix these dedicated APIs with YouTube API to create an ultimate app for the fans of these shows.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-mapbox"&gt;
  &lt;/a&gt;
  3. Mapbox
&lt;/h1&gt;

&lt;p&gt;Mapbox provides precise location information and fully-fledged tools to developers.&lt;/p&gt;

&lt;p&gt;You get instant access to dynamic, live-updating maps which you can even further customize!&lt;/p&gt;

&lt;p&gt;If you have a project geared towards location and maps, this is a must-know API.&lt;/p&gt;

&lt;p&gt;However, it is worth mentioning that you have to sign up for free to get a unique access token.&lt;/p&gt;

&lt;p&gt;Using this token you can use the amazing services offered by this API.&lt;/p&gt;

&lt;p&gt;Not only this, you can use Mapbox with libraries such as the Leaflet.js library and create beautiful, mobile-friendly maps.&lt;/p&gt;

&lt;p&gt;I have discussed this and much more in my recent article covering the basics of Mapbox and Leaflet.js.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cmsinstallation.blogspot.com/2021/04/7-free-apis-that-nobody-is-talking-about.html"&gt;Get some more APIs&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>showdev</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Signs of an Inexperienced Programmer</title>
      <author>Dev.to</author>
      <pubDate>Sat, 01 May 2021 06:33:00 +0000</pubDate>
      <link>https://dev.to/devto4/signs-of-an-inexperienced-programmer-3i29</link>
      <guid>https://dev.to/devto4/signs-of-an-inexperienced-programmer-3i29</guid>
      <description>&lt;p&gt;Experience in software engineering comes with the number of years you are in the profession. The statement is true to a certain extent. However, the number of years in a job does not make you gain the right experience by default.&lt;/p&gt;

&lt;p&gt;I have seen people behave amateur like, even after working in their job for a good number of years. They hardly learn the basics of software development. Their growth stagnates after an initial couple of years, but they do not understand what they are doing wrong.&lt;/p&gt;

&lt;p&gt;At the same time, I have worked with developers with just a couple of years of experience who show an incredible amount of growth potential. They possess the right attitude and know-how to avoid incompetent behavior.&lt;/p&gt;

&lt;p&gt;Based on certain traits developers exhibit, you can easily find out who is experienced and who is not. Let’s dive into seven signs of an inexperienced programmer that every software engineer should be aware of to avoid making similar mistakes that can hinder their career progression.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-creates-large-pull-requests"&gt;
  &lt;/a&gt;
  1. Creates large pull requests
&lt;/h1&gt;

&lt;p&gt;Have you ever got a code review request with so many changes in it that you don’t feel like reviewing it? Yes, that’s precisely what inexperienced developers do. They will bunch together a lot of changes in one single pull request. On top of that, they will expect you to prioritize their code review.&lt;/p&gt;

&lt;p&gt;I have seen this habit of creating big pull requests with many senior developers too. They will code for days without feedback. When you finally review their code, they would have already built the whole functionality around it. Thus any review comment you give necessitates significant changes.&lt;/p&gt;

&lt;p&gt;When I get such pull requests, my first reaction is to return it to the developer to break it down into smaller, logically divided PRs. I often just put comments in the first issue I find and send it back to the developer. If I feel incredibly generous, I will ask them to set up a call and review the code live.&lt;br&gt;
What you can do:&lt;br&gt;
 Create smaller pull requests. As a good practice, never leave a day's work without checking it in.&lt;br&gt;
Never check-in code that does not compile or breaks the build.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-writes-spaghetti-code"&gt;
  &lt;/a&gt;
  2. Writes spaghetti code
&lt;/h1&gt;

&lt;p&gt;Inexperienced developers write the exact opposite of beautiful code. Their code will be all tangled and scattered across all over the place in the codebase.&lt;/p&gt;

&lt;p&gt;If you ever try to read the spaghetti code, you will constantly get lost in it. You will forget where you started, what you are looking for, and what exactly the code is trying to do.&lt;/p&gt;

&lt;p&gt;With experience, the developer should know how to plan their coding. Unless it is a straightforward functionality, put your understanding and the flow on a paper first. Do a dry run to visualize it end to end. Once you are crystal clear about the changes, then start on the implementation part.&lt;/p&gt;

&lt;p&gt;If you do not follow the above process, you will have pain reading your own code. It will be hard for yourself and the whole team to troubleshoot or enhance the piece of the puzzle you wrote as code.&lt;br&gt;
What you can do:&lt;br&gt;
Have a clear understanding of the feature before you start to implement it. You can ask as many questions as you want to have a clear idea of the requirement.&lt;br&gt;
Keep your code simple and well structured. Your teammates should be able to read the code and understand the intended use of it.&lt;/p&gt;

&lt;p&gt;Read More :: &lt;a href="https://cmsinstallation.blogspot.com/2021/04/top-7-signs-of-inexperienced-programmer.html"&gt;https://cmsinstallation.blogspot.com/2021/04/top-7-signs-of-inexperienced-programmer.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>showdev</category>
      <category>devops</category>
      <category>programming</category>
    </item>
    <item>
      <title>Chrome extensions I use to enhance my GITHUB experience</title>
      <author>Dev.to</author>
      <pubDate>Sat, 01 May 2021 06:31:44 +0000</pubDate>
      <link>https://dev.to/devto4/chrome-extensions-i-use-to-enhance-my-github-experience-232h</link>
      <guid>https://dev.to/devto4/chrome-extensions-i-use-to-enhance-my-github-experience-232h</guid>
      <description>&lt;p&gt;As a developer, we use GitHub every day and it is already a great tool, but what if we can make it even better with some chrome extensions!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-octotree"&gt;
  &lt;/a&gt;
  1. Octotree
&lt;/h1&gt;

&lt;p&gt;It enhances GitHub code review and exploration with features like:&lt;br&gt;
IDE-like code tree&lt;br&gt;
Folder and file search&lt;br&gt;
Issues and Pull Request bookmarking&lt;br&gt;
Support for private repositories&lt;br&gt;
I like this extension very much! It lets you explore the files and folders of a repository with a tree like structure.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-open-in-vs-code"&gt;
  &lt;/a&gt;
  2. Open in VS Code
&lt;/h1&gt;

&lt;p&gt;It Opens links to source code for any github repository in VSCode. Also works with Gitlab.&lt;/p&gt;

&lt;p&gt;In case you want to open the whole repository in GitHub directly with VSCode view rather than a single file, Just add 1s after github. Example: github.com/user/somerepository -&amp;gt; github1s.com/user/somerepository.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-refined-github"&gt;
  &lt;/a&gt;
  3. Refined GitHub
&lt;/h1&gt;

&lt;p&gt;It simplifies the GitHub interface and adds useful features too, for instance:&lt;br&gt;
Adds reaction avatars showing who reacted to a comment&lt;br&gt;
Adds one-click merge conflict fixers&lt;br&gt;
Adds a button to revert all the changes to a file in a PR&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cmsinstallation.blogspot.com/2021/04/chrome-extensions-i-use-to-enhance-my.html"&gt;Read more&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>programming</category>
      <category>showdev</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
