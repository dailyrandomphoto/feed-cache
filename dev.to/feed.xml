<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>On decision of embracing utility-first CSS</title>
      <author>üÖ∞Ô∏è GEEK</author>
      <pubDate>Wed, 12 May 2021 01:41:51 +0000</pubDate>
      <link>https://dev.to/ageekdev/on-decision-of-embracing-utility-first-css-k79</link>
      <guid>https://dev.to/ageekdev/on-decision-of-embracing-utility-first-css-k79</guid>
      <description>&lt;p&gt;&lt;strong&gt;Utility-First CSS is trending in 2021&lt;/strong&gt;. If you hate it, you will feel annoyed seeing people promoting it. If you love it, you'll question why people hate it. If you're still skeptical then there's a high chance you've already read all following articles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://adamwathan.me/css-utility-classes-and-separation-of-concerns/"&gt;CSS Utility Classes and "Separation of Concerns"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://frontstuff.io/in-defense-of-utility-first-css"&gt;In Defense of Utility-First CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/lets-define-exactly-atomic-css/"&gt;Let‚Äôs Define Exactly What Atomic CSS is&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mrmrs.io/writing/2016/03/24/scalable-css/"&gt;CSS and Scalability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zeldman.com/2017/01/03/kiss-my-classname/"&gt;Kiss My Classname&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can't ignore it anymore when it's gaining so much attention and potentially becomes something big that you and your team don't want to miss. Same thing happens to Svelte. It's moving in an unpopular direction, it pushes you to make decision at this point ‚Äî ignore it, embrace it, or question your current direction:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Is it worth the learning?&lt;/li&gt;
&lt;li&gt;Is it considered harmful in long term?&lt;/li&gt;
&lt;li&gt;Will it scale well in my team or company?&lt;/li&gt;
&lt;li&gt;Does it have same abstraction as web frameworks (React, Vue, Angular)?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you still couldn't pick a side, then I'm here to help you. This post focuses on the decision of embracing &lt;strong&gt;utility-first CSS&lt;/strong&gt; in general and &lt;a href="https://tailwindcss.com/"&gt;Tailwind&lt;/a&gt; in more specific.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-you-really-care-about"&gt;
  &lt;/a&gt;
  What you really care about
&lt;/h2&gt;

&lt;p&gt;All CSS technologies like &lt;a href="https://ageek.dev/css-frameworks"&gt;CSS frameworks&lt;/a&gt;, &lt;a href="https://ageek.dev/css-methodologies"&gt;CSS methodologies&lt;/a&gt;, or &lt;a href="https://ageek.dev/css-in-js"&gt;CSS-in-JS libraries&lt;/a&gt; try to fix &lt;a href="https://ageek.dev/problems-of-css"&gt;problems of CSS at scale&lt;/a&gt; one way or another. Following are major deciding factors before picking a CSS solution:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Naming classnames&lt;/strong&gt;: Short, scoped, and collision-free.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Output bundle sizes&lt;/strong&gt;: The smaller the better, even better if modular&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Optimization chances&lt;/strong&gt;: Removing unused styles, caching extracted CSS files.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Developer experience&lt;/strong&gt;: Fast development, easy refactoring, linting.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Learning investment&lt;/strong&gt;: fast to learn, works well between tech stacks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Different years of experience and project sizes have different expectations on above factors like beginners care more about &lt;strong&gt;learning investment&lt;/strong&gt; and big projects care more about &lt;strong&gt;optimization chances&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Be aware of learning something backwards, modern developers often stumbled into trending CSS-like, JavaScript-like, HTML-like and find themselves never actually learn vanilla HTML, CSS, JavaScript which considered harmful picking up new web technologies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-idea-behind-utilityfirst-css"&gt;
  &lt;/a&gt;
  The idea behind utility-first CSS
&lt;/h2&gt;

&lt;p&gt;The main idea behind utility-first CSS movement is to style everything based on predefined utility classes ‚Äî developed by yourself or frameworks.&lt;/p&gt;

&lt;p&gt;People love it because it promotes &lt;strong&gt;rapid prototyping&lt;/strong&gt; by reusing tons of &lt;strong&gt;useful ready-to-use CSS classes&lt;/strong&gt; at a &lt;strong&gt;very strict manner&lt;/strong&gt;. People hate it because it produces &lt;strong&gt;ugly HTML markup with long string of classes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tailwindcss.com/"&gt;Tailwind&lt;/a&gt; comes prepacked with a lot of options and styles for users to choose from, and it packs all these variations to reduce the tendency to write your own CSS.&lt;/p&gt;

&lt;p&gt;Majority of time you don't do that much of customization as you expected, there is a chance that you'll never create any custom CSS in small projects, that's why Tailwind has been gaining so much momentum.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-decision-on-utilityfirst-css"&gt;
  &lt;/a&gt;
  The decision on utility-first CSS
&lt;/h2&gt;

&lt;p&gt;I have a background on mobile development where I always styled components programmatically. When I moved to web development, component-based CSS-in-JS seemed so obvious and future-proof. The transition was right and pleasant in the beginning.&lt;/p&gt;

&lt;p&gt;I already experienced &lt;strong&gt;utmost dynamic component-based architecture&lt;/strong&gt; when writing styles, layouts, and logics in one file using general-purpose programming languages. I resist all technologies go against my principles, I may try them, but not going to embrace any of them!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I don't like Angular because it uses HTML templates.&lt;/li&gt;
&lt;li&gt;I don't like Vue because it uses template structures in &lt;code&gt;.vue&lt;/code&gt; files.&lt;/li&gt;
&lt;li&gt;I don't like Svelte because it uses template structures in &lt;code&gt;.svelte&lt;/code&gt; files and ugly template APIs.&lt;/li&gt;
&lt;li&gt;I don't like utility-first CSS because it promotes heavy uses of predefined classes instead of well-known CSS properties, and obviously ugly classnames in HTML.&lt;/li&gt;
&lt;li&gt;I like React and &lt;a href="https://styled-components.com/"&gt;styled-components&lt;/a&gt; when it translates very well to mobile apps and desktop apps, I prefer reusable fully-functional components than reusable CSS or HTML alone.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You see the point here, it's not about right or wrong decision. It's all about define principles in your developer career and technologies will fall into the right bucket for you and only you.&lt;/p&gt;




&lt;p&gt;Originally published at &lt;a href="https://ageek.dev"&gt;ageek.dev&lt;/a&gt; as part of online book &lt;a href="https://ageek.dev/css"&gt;Advanced CSS&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>
Create an NLP model without code</title>
      <author>Byeongal</author>
      <pubDate>Wed, 12 May 2021 01:11:47 +0000</pubDate>
      <link>https://dev.to/byeongal/create-an-nlp-model-without-code-7hd</link>
      <guid>https://dev.to/byeongal/create-an-nlp-model-without-code-7hd</guid>
      <description>&lt;p&gt;Hi all,&lt;/p&gt;

&lt;p&gt;Today I will introduce a service that creates an NLP model without code. Its name is "Teachable-NLP". To use Teachable-nlp, you only need to prepare the data(txt). &lt;/p&gt;

&lt;p&gt;And if you have a good idea, try the "Teachable NLP Challenge"&lt;/p&gt;

&lt;p&gt;Teachable NLP Challenge is free and open to everyone interested in training their own AI. All you need to be prepared for is good ideas and datasets.&lt;/p&gt;

&lt;p&gt;When: 05/05/2021 ‚Äì 05/18/2021 11:59 EDT&lt;/p&gt;

&lt;p&gt;How: You just need to submit your AI model link and explanations on your AI (Good example: &lt;a href="https://forum.ainetwork.ai/c/ai-showcase/11"&gt;https://forum.ainetwork.ai/c/ai-showcase/11&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Prizes: Apple Store gift cards, Winners‚Äô interviews will be broadcasted through AI Network Youtube Channel(1.48K subscribers)&lt;/p&gt;

&lt;p&gt;To participate, submit your info via &lt;a href="https://forms.gle/XfUuNSS2heAn7JtH7"&gt;https://forms.gle/XfUuNSS2heAn7JtH7&lt;/a&gt;. You will receive an invitation email!&lt;/p&gt;

&lt;p&gt;Check how Teachable NLP works: &lt;a href="https://forum.ainetwork.ai/t/teachable-nlp-how-to-use-teachable-nlp/65Or"&gt;https://forum.ainetwork.ai/t/teachable-nlp-how-to-use-teachable-nlp/65Or&lt;/a&gt; watch a 1-minute tutorial video: &lt;a href="https://youtu.be/hzujZOT1qz8"&gt;https://youtu.be/hzujZOT1qz8&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Mock Intl and Date globals in Jest (easily!)</title>
      <author>Jeff Sheets</author>
      <pubDate>Wed, 12 May 2021 01:01:45 +0000</pubDate>
      <link>https://dev.to/jeffsheets/mock-intl-and-date-globals-in-jest-easily-1co5</link>
      <guid>https://dev.to/jeffsheets/mock-intl-and-date-globals-in-jest-easily-1co5</guid>
      <description>&lt;p&gt;In Javascript land, mocking the browser global objects can be a bit of a pain for tests. Searching StackOverflow gives plenty of complicated answers. Some suggesting using 3rd party mock libraries. Some that overwrite the global object itself.... But Jest already has this capability built-in and it isn't so bad:&lt;/p&gt;

&lt;p&gt;So let's say you have a method that gets the user's timezone or the timezone offset. (the timezone offset is used sometimes since &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/resolvedOptions#browser_compatibility"&gt;IE11 doesn't support easily reading the timezone&lt;/a&gt;, but I digress)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * Useful when passing the browser timezone to a backend Java API that reads a timezone in using ZoneId.of(tz),
 *  as both 'America/Chicago' and '-0600' are valid values when passed to the Java API.
 *  The Offset is used to handle IE11 and other older browsers.
 */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getUserTimeZoneOrOffset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;timeZone&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;timeZone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Intl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DateTimeFormat&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;resolvedOptions&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;timeZone&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Ignore if this happens, and just use the fallback&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;timeZone&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//Could not get a browser timezone, maybe IE11, so instead use timezoneOffset formatted for Java&lt;/span&gt;
    &lt;span class="c1"&gt;// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/ZoneOffset.html#of(java.lang.String)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getTimezoneOffset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;//Yeah this offset +/- seems backwards,&lt;/span&gt;
    &lt;span class="c1"&gt;// but JS actually returns a positive when local tz is behind UTC (like for US tzs)&lt;/span&gt;
    &lt;span class="c1"&gt;// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset&lt;/span&gt;
    &lt;span class="c1"&gt;// e.g. offset = 300, timeZone='-0500'&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;plusMinus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;//leftpad a 0 when needed for two digits&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hours&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;minutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;timeZone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;plusMinus&lt;/span&gt;&lt;span class="p"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;hours&lt;/span&gt;&lt;span class="p"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;timeZone&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now to test this, we'll need to mock out both the Intl and Date Javascript globals. We can do this using &lt;a href="https://jestjs.io/docs/jest-object#jestspyonobject-methodname"&gt;Jest's spyOn&lt;/a&gt; method to temporarily replace the global method with our own implementation. Notice that we setup the spy in the &lt;strong&gt;beforeEach&lt;/strong&gt; and reset everything in the &lt;strong&gt;afterEach&lt;/strong&gt;. The setup works something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getUserTimeZoneOrOffset&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./timeZoneUtils.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;getUserTimeZoneOrOffset&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mockOffset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mockTimezone&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;beforeEach&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;mockTimezone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;jest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spyOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Intl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DateTimeFormat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;mockImplementation&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;resolvedOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;timeZone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mockTimezone&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;}));&lt;/span&gt;

      &lt;span class="nx"&gt;mockOffset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;jest&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spyOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;getTimezoneOffset&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mockImplementation&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;mockOffset&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;afterEach&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;jest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;restoreAllMocks&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;returns timezone name when found&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;mockTimezone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;America/Chicago&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getUserTimeZoneOrOffset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;America/Chicago&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-0500&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-0230&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+0100&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;330&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+0530&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+0000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;765&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+1245&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;])(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;timezoneOffset for %i is %s&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;mockOffset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getUserTimeZoneOrOffset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But that's it! No need to import an extra library. This is all supplied directly in Jest itself!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>testing</category>
      <category>jest</category>
    </item>
    <item>
      <title>I Made a Free-to-Play Games Database API</title>
      <author>Luis Paulo Dobreira</author>
      <pubDate>Tue, 11 May 2021 23:14:33 +0000</pubDate>
      <link>https://dev.to/ldobreira/i-made-a-free-to-play-games-database-api-5cif</link>
      <guid>https://dev.to/ldobreira/i-made-a-free-to-play-games-database-api-5cif</guid>
      <description>&lt;p&gt;Hello everyone, I'm excited to share my Free-To-Play Games Database API (aka &lt;a href="https://www.freetogame.com/"&gt;FreeToGame&lt;/a&gt; API)! Everyone can access the API directly for free at &lt;a href="https://www.freetogame.com/api-doc"&gt;https://www.freetogame.com/api-doc&lt;/a&gt; (no keys required).&lt;/p&gt;

&lt;p&gt;Still work in progress but I hope to improve the API over time. What do you guys think? Feedback is welcome!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#about"&gt;
  &lt;/a&gt;
  About
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.freetogame.com/"&gt;FreeToGame&lt;/a&gt; is a gaming platform that brings all the best Free-to-Play Multiplayer Games and MMO Games into one place while rewarding gamers with free premium loot and exclusive perks.&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>api</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Instagram RESTful API Clone</title>
      <author>Said Mounaim</author>
      <pubDate>Tue, 11 May 2021 23:12:01 +0000</pubDate>
      <link>https://dev.to/said_mounaim/instagram-restful-api-clone-3nf2</link>
      <guid>https://dev.to/said_mounaim/instagram-restful-api-clone-3nf2</guid>
      <description>&lt;p&gt;Instagram RESTful API clone made with Node Js &amp;amp; Express Js&lt;/p&gt;

&lt;p&gt;REST API with all basic features real Instagram has.&lt;/p&gt;

&lt;p&gt;Repo : &lt;a href="https://github.com/saidMounaim/instagram-api"&gt;https://github.com/saidMounaim/instagram-api&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check My #100DaysOfCode Challenge&lt;br&gt;
&lt;a href="https://github.com/saidMounaim/100DaysOfCode"&gt;https://github.com/saidMounaim/100DaysOfCode&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>100daysofcode</category>
      <category>expressjs</category>
    </item>
    <item>
      <title>Salada de frutas dos modelos de dados</title>
      <author>Willian Frantz</author>
      <pubDate>Tue, 11 May 2021 21:46:46 +0000</pubDate>
      <link>https://dev.to/wlsf/salada-de-frutas-dos-modelos-de-dados-2in7</link>
      <guid>https://dev.to/wlsf/salada-de-frutas-dos-modelos-de-dados-2in7</guid>
      <description>&lt;p&gt;Voc√™ sabia que existem diversos modelos de dados al√©m do padr√£o relacional (ex PostgreSQL) e o baseado em documentos (ex MongoDB)?&lt;/p&gt;

&lt;p&gt;Acredito que esse detalhe passe despercebido por muitas pessoas desenvolvedoras, n√£o que isso seja um problema. Na maioria dos casos √© poss√≠vel atender a sua necessidade com Postgres, e as vezes utilizaremos modelos diferentes de forma impl√≠cita, como em uma ferramenta de Cache.&lt;/p&gt;

&lt;p&gt;Portanto, gostaria de enfatizar que estou escrevendo este texto apenas para saciar a curiosidade de voc√™s, e meu pr√≥prio interesse por modelos de dados. üòÖ &lt;/p&gt;

&lt;p&gt;Vamos come√ßar dissecando alguns dos diferentes modelos existentes? Na nossa lista temos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;armazenamento por chave-valor&lt;/li&gt;
&lt;li&gt;armazenamento em triplas&lt;/li&gt;
&lt;li&gt;armazenamento em documentos&lt;/li&gt;
&lt;li&gt;armazenamento relacional&lt;/li&gt;
&lt;li&gt;armazenamento em grafos&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#modelo-chavevalor"&gt;
  &lt;/a&gt;
  Modelo Chave-Valor
&lt;/h2&gt;

&lt;p&gt;Um dos modelos mais simples de armazenamento de dados, ele utiliza apenas &lt;code&gt;chave=valor&lt;/code&gt;, √© um dado altamente desacoplado e sem conex√µes, n√£o possui relacionamentos. &lt;/p&gt;

&lt;p&gt;Se f√¥ssemos representar esse modelo com um Map em Elixir seria algo mais ou menos assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="p"&gt;%{&lt;/span&gt;
  &lt;span class="ss"&gt;key:&lt;/span&gt; &lt;span class="s2"&gt;"value"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ex:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="p"&gt;%{&lt;/span&gt;
  &lt;span class="ss"&gt;name:&lt;/span&gt; &lt;span class="s2"&gt;"John Doe"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;age:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O que representaria uma estrutura map in-memory, semelhante a um JSON.&lt;/p&gt;

&lt;p&gt;Este modelo √© amplamente utilizado em ferramentas de &lt;em&gt;Cache&lt;/em&gt; hoje em dia, como por exemplo: &lt;strong&gt;Redis&lt;/strong&gt; e &lt;strong&gt;Memcached&lt;/strong&gt;. Digamos que voc√™ possui um dado que √© usado com frequ√™ncia pela sua aplica√ß√£o, e esse dado n√£o costuma sofrer altera√ß√£o. Nesses cen√°rios espec√≠ficos n√≥s aplicamos um &lt;em&gt;cache&lt;/em&gt; para garantir que esse dado fique armazenado de forma simples e r√°pida de buscar, assim evitamos chamadas desnecess√°rias ao banco de dados &lt;em&gt;(round trips)&lt;/em&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#modelo-de-triplas"&gt;
  &lt;/a&gt;
  Modelo de triplas
&lt;/h1&gt;

&lt;p&gt;Tamb√©m √© um modelo extremamente simples. Possui uma forma homog√™nea de armazenar o dado, onde todas entradas s√£o estruturas da seguinte forma: &lt;code&gt;(sujeito, predicado, objeto)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Podemos ter uma entrada que represente a nossa idade, nosso nome, etc. &lt;br&gt;
Por exemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(john_doe, idade, 30)
(john_doe, nome, "John Doe")
(john_doe, gosta, "macarronada")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No final das contas, a ideia por tr√°s desse esquema √© que possamos representar uma senten√ßa, como por exemplo &lt;em&gt;"John Doe tem 30"&lt;/em&gt; ou &lt;em&gt;"John Doe gosta de ma√ß√£s"&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;O pr√≥prio triple store ou tamb√©m conhecido como RDF, utiliza queries sem√¢nticas atrav√©s do &lt;strong&gt;SPARQL&lt;/strong&gt; &lt;em&gt;(Protocol and RDF Query Language)&lt;/em&gt; para conseguir manipular ou buscar suas triplas.&lt;/p&gt;

&lt;p&gt;Normalmente uma Query de busca se baseia no predicado, ex com &lt;strong&gt;SPARQL&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT ?person :nome "John Doe"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Aqui buscamos a pessoa cujo nome √© John Doe. √â poss√≠vel ter relacionamentos neste modelo, por√©m, sempre seguindo o padr√£o proposto de sujeito-predicado-objeto.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Curiosidade:&lt;/strong&gt; Este esquema √© muito utilizado em uma linguagem de programa√ß√£o declarativa, que tamb√©m serve como linguagem de &lt;em&gt;Query&lt;/em&gt; chamada &lt;strong&gt;Datalog&lt;/strong&gt;, ele cria entradas com um padr√£o bem semelhante, seguindo o formato: &lt;code&gt;predicado(sujeito, objeto)&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;idade(john_doe, 30)
nome(john_doe, "John Doe")
gosta(john_doe, "ma√ß√£s")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E inclusive, o &lt;strong&gt;Datomic&lt;/strong&gt; √© uma implementa√ß√£o do Datalog. O Datomic, para quem n√£o conhece, √© um banco de dados distribu√≠do, ACID, que √© muito utilizado com o Clojure na JVM. (Inclusive √© o banco que o Nubank usa!)&lt;/p&gt;

&lt;p&gt;O modelo de triplas ou RDF, tamb√©m √© mencionado em artigos sobre Semantic Web, que prega a transforma√ß√£o da Internet num lugar onde a camada sem√¢ntica seja mais acess√≠vel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modelo-de-documentos"&gt;
  &lt;/a&gt;
  Modelo de Documentos
&lt;/h2&gt;

&lt;p&gt;Aqui j√° percebemos uma forma mais rebuscada de armazenar o nosso dado; normalmente os bancos baseados em documentos trabalham com collections e documents (que s√£o objetos JSON-like).&lt;/p&gt;

&lt;p&gt;Esse padr√£o de armazenamento √© muito conhecido por se assemelhar a um objeto JSON.&lt;br&gt;
Exemplo de um objeto:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "name": "notebook",
  "qty": 50,
  "rating": [ { "score": 8 }, { "score": 9 } ],
  "size": { "height": 11, "width": 8.5, "unit": "in" },
  "status": "A",
  "tags": [ "college-ruled", "perforated"]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(ex retirado da documenta√ß√£o do pr√≥prio MongoDB)&lt;/p&gt;

&lt;p&gt;A partir daqui j√° come√ßamos a enxergar dados que se conectam, que se relacionam diretamente. Como podemos ver no exemplo acima: temos um notebook com 50 unidades em estoque, onde as avalia√ß√µes impostas a ele foram nota 8 e nota 9, fora demais detalhes sobre tamanho, status, tags, etc.&lt;/p&gt;

&lt;p&gt;√â interessante frisar aqui, que apesar desses dados se relacionarem, estamos falando de um documento (muito semelhante a uma estrutura JSON), portanto, este documento √© salvo exatamente desta forma, com todas as rela√ß√µes e conex√µes no mesmo objeto, √© como se estiv√©ssemos compactando um JSON numa String. Pelo dado ser salvo todo junto, √© muito mais simples buscar esse dado do banco, tendo em vista que ele s√≥ precisa carregar o que foi salvo no documento. Por√©m por outro lado, por mais que voc√™ s√≥ deseje acessar uma pequena parte do documento (ex dados como &lt;code&gt;name&lt;/code&gt; e &lt;code&gt;qty&lt;/code&gt;), todo o documento precisa ser carregado da mesma forma.&lt;/p&gt;

&lt;p&gt;Um banco muito utilizado atualmente que implementa este formato de modelo baseado em documentos √© o MongoDB!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modelo-relacional"&gt;
  &lt;/a&gt;
  Modelo Relacional
&lt;/h2&gt;

&lt;p&gt;Se no modelo anterior falamos um pouco sobre relacionamentos entre dados, agora vamos entrar com for√ßa nesse assunto. O modelo relacional √© conhecido por nos permitir mapear o mundo usando esquemas e rela√ß√µes.&lt;/p&gt;

&lt;p&gt;Nele n√£o falamos mais apenas sobre chave=valor, muito menos sobre documentos. Nele utilizamos os termos banco, esquema, tabela, relacionamentos, e por a√≠ vai...&lt;/p&gt;

&lt;p&gt;Digamos que estamos mapeando estruturas para o site do nosso restaurante, ter√≠amos algo semelhante a:&lt;/p&gt;

&lt;p&gt;Tabela &lt;strong&gt;Menu&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;hour&lt;/th&gt;
&lt;th&gt;status&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Almo√ßo&lt;/td&gt;
&lt;td&gt;11h~13h&lt;/td&gt;
&lt;td&gt;on&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Janta&lt;/td&gt;
&lt;td&gt;18h~22h&lt;/td&gt;
&lt;td&gt;on&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Sobremesa&lt;/td&gt;
&lt;td&gt;all-day&lt;/td&gt;
&lt;td&gt;on&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Tabela &lt;strong&gt;Prato&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;price&lt;/th&gt;
&lt;th&gt;menu_id&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Strognoff&lt;/td&gt;
&lt;td&gt;R$49&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Sopa&lt;/td&gt;
&lt;td&gt;R$35&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Sorvete&lt;/td&gt;
&lt;td&gt;R$12&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Mousse&lt;/td&gt;
&lt;td&gt;R$20&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Olha que interessante, acabamos de ilustrar 2 tabelas que ser√£o utilizadas para representar os dados do nosso restaurante, nele teremos menus que ser√£o divididos entre [Almo√ßo: 1, Janta: 2, Sobremesa: 3], e definimos tamb√©m 3 pratos diferentes para cada um dos menus, sendo eles [Strognoff: Almo√ßo, Sopa: Janta, Sorvete: Sobremesa]&lt;/p&gt;

&lt;p&gt;Apesar desses dados estarem separados por tabelas, eles est√£o relacionados pelo menu_id, o que chamamos de foreign key em bancos relacionais. Com isso, conseguimos afirmar que um prato pertence a um Menu, e um Menu pode possuir diversos pratos diferentes! Isso simboliza um relacionamento 1..n de menus para pratos.&lt;/p&gt;

&lt;p&gt;E conseguimos validar/testar esses relacionamentos atrav√©s de um join feito por uma linguagem de Query chamada SQL (Structured Query Language).&lt;/p&gt;

&lt;p&gt;Ex:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * FROM menus m
INNER JOIN pratos p ON p.menu_id=m.id
WHERE m.name = 'Almo√ßo'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Traduzindo o resultado disso para um objeto JSON, teremos algo mais ou menos assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  'name': 'Almo√ßo',
  'hour': '11h~13h',
  'status': 'on',
  'pratos': [
    {
      'name': 'Strognoff',
      'price': 'R$49'
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;√â, meus amigos, a coisa t√° ficando mais abstrata e complexa comparada ao primeiro modelo discutido aqui, n√£o √© mesmo? Mas imaginem a infinidade de coisas que podemos modelar utilizando um banco relacional...&lt;/p&gt;

&lt;p&gt;Ele nos d√° um universo de op√ß√µes, como por exemplo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;mapear os nossos dados utilizando diferentes tipos (entre valores inteiros, string, at√© estruturas JSON)&lt;/li&gt;
&lt;li&gt;buscar esses dados de forma fragmentada (somente alguns dados de uma tabela)&lt;/li&gt;
&lt;li&gt;buscar dados de 2 ou mais tabelas que se relacionam, atrav√©s de joins&lt;/li&gt;
&lt;li&gt;criar indexes para os dados que mais se relacionam, isso faz com que o banco consiga encontrar aqueles dados de forma mais f√°cil, isso pode melhorar a performance de nossas buscas (dependendo do tamanho do seu banco)&lt;/li&gt;
&lt;li&gt;criar views ou views materializadas, que s√£o bem semelhantes a uma tabela, por√©m com dados modelados de uma forma mais madura para que a aplica√ß√£o final possa utilizar isso em funcionalidades espec√≠ficas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Al√©m disso, bancos de dados relacionais s√£o muito conhecidos por serem ACID.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;At√¥mico - Garante que cada transa√ß√£o √© tratada como uma unidade separada, e que ou roda tudo com sucesso, ou n√£o roda nada e nenhuma altera√ß√£o √© aplicada ao estado do banco.&lt;/li&gt;
&lt;li&gt;Consistente - Garante que o banco de dados n√£o ser√° corrompido de forma alguma. Sem falhas, seguindo as regras, constraints, cascades e triggers definidos. Mantendo sempre um estado consistente.&lt;/li&gt;
&lt;li&gt;Isolado - A ideia de grandes bancos relacionais √© garantir que as execu√ß√µes possam rodar de forma concorrente ao m√°ximo poss√≠vel, ter um ambiente isolado ajuda no controle de concorr√™ncia, pois estamos sempre garantindo que o estado do banco estar√° da mesma forma que ele estaria se as execu√ß√µes estivessem sendo feitas de forma sequencial.&lt;/li&gt;
&lt;li&gt;Durabilidade - Garante que seus dados estar√£o salvos independente de uma falha na aplica√ß√£o, queda de energia ou qualquer outra coisa que possa afetar o processo do banco.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Um bom exemplo de um banco de dados relacional que √© muito utilizado atualmente √© o Postgres!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modelo-de-grafos"&gt;
  &lt;/a&gt;
  Modelo de Grafos
&lt;/h2&gt;

&lt;p&gt;U√©, grafos? Sim, aqueles grafos que voc√™ provavelmente viu na faculdade! Bolinha e tracinho pra todo lado, onde as bolinhas representam os n√≥s e os tracinhos as arestas que conectam os n√≥s.&lt;/p&gt;

&lt;p&gt;Mas o que isso tem a ver com modelo de dados? Bom, isso significa um modelo de dados altamente conectado, que se relacionam m√∫ltiplas vezes.&lt;/p&gt;

&lt;p&gt;Neste modelo podemos ter n√≥s com propriedades espec√≠ficas, como por exemplo, digamos que o n√≥ representa uma pessoa, o mesmo n√≥ pode ter as seguintes propriedades:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nome
idade
altura
peso
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E esse n√≥ pode se relacionar com outro n√≥, atrav√©s de uma aresta, que indica um relacionamento.&lt;/p&gt;

&lt;p&gt;Por sua vez, relacionamentos podem ser indicados de duas maneiras, sendo elas: [sa√≠da: outgoing, entrada: incoming]. E esse mesmo relacionamento pode possuir uma propriedade que esclarece qual o prop√≥sito do relacionamento.&lt;/p&gt;

&lt;p&gt;Ex:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8Nl2016u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4eho9zy8sdkrlqj5zs86.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Nl2016u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4eho9zy8sdkrlqj5zs86.png" alt="Screen Shot 2021-05-11 at 17.15.47"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nesse cen√°rio, temos um n√≥ que representa um usu√°rio chamado John Doe, ele se relaciona com outro n√≥ que representa um pa√≠s chamado Canad√°, e o prop√≥sito do relacionamento √© indicar que John Doe mora/reside no Canad√°.&lt;/p&gt;

&lt;p&gt;Representando isso usando Cypher (Query Language do Neo4j):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(u:User {name: 'John Doe'}),
(c:Country {name: 'Canad√°'}),
(u)-[:LIVES_IN]-&amp;gt;(c)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voc√™ n√£o precisa necessariamente possuir um esquema pr√©-definido para poder criar n√≥s e relacionamentos, eles podem ser criados com as propriedades e prop√≥sitos que melhor satisfazer a sua necessidade.&lt;/p&gt;

&lt;p&gt;Um bom exemplo de banco de dados atual que utiliza esse modelo √© o Neo4j.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclus√£o
&lt;/h1&gt;

&lt;p&gt;O que podemos deduzir ap√≥s olhar esses modelos? Claramente eles possuem uma certa afinidade, j√° que todos modelam dados para serem armazenados. Por√©m, eles s√£o extremamente diferentes na modelagem, abordagens de relacionamentos, armazenamento, etc. E isso impacta diretamente no prop√≥sito deles.&lt;/p&gt;

&lt;p&gt;Pode ser que um dia voc√™ esbarre na necessidade de utilizar um banco key-value como Cache para a sua aplica√ß√£o, um banco de documentos como uma estrat√©gia de armazenar dados fragmentados que se relacionam mas que n√£o possuem conex√µes externas. Ou at√© mesmo um banco de grafos para conseguir modelar a sua solu√ß√£o, tendo em vista que seus dados possuem muitos relacionamentos many-to-many.&lt;/p&gt;

&lt;p&gt;Se voc√™ se interessou por esse texto e ainda n√£o leu o livro &lt;em&gt;Design Data-Intensive Applications&lt;/em&gt; do &lt;strong&gt;Martin Kleppmann&lt;/strong&gt;, eu super recomendo que voc√™ v√° atr√°s dessa leitura! Inclusive, no livro, ele plota uma linha muito interessante entre dados que n√£o se relacionam at√© dados que possuem muitas conex√µes.&lt;/p&gt;

&lt;p&gt;Ref:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sdwfmyQ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwx47cq1trbgpddceiwz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sdwfmyQ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwx47cq1trbgpddceiwz.png" alt="Screen Shot 2021-05-11 at 17.28.17"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Voc√™ tem alguma sugest√£o, complemento ou cr√≠tica? Gostaria de saber mais sobre, deixa nos coment√°rios pra eu poder ler üíú&lt;/p&gt;

</description>
      <category>database</category>
      <category>elixir</category>
    </item>
    <item>
      <title>Instagram Clone with Vue.js 1/3</title>
      <author>Cihat Salik</author>
      <pubDate>Tue, 11 May 2021 21:42:04 +0000</pubDate>
      <link>https://dev.to/cihat/instagram-clone-with-vue-js-1-3-3n51</link>
      <guid>https://dev.to/cihat/instagram-clone-with-vue-js-1-3-3n51</guid>
      <description>&lt;h2&gt;
  &lt;a href="#todos"&gt;
  &lt;/a&gt;
  TODOS
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;[x] The difference between Vue and React. Project setup with vue-cli&lt;/li&gt;
&lt;li&gt;[x] CSS infrastructure and typography. preparing the icons in the project (svg)&lt;/li&gt;
&lt;li&gt;Let's create [x] pages. Let's create a Master-Page&lt;/li&gt;
&lt;li&gt;[x] Let's create layout for Header design and Homepage&lt;/li&gt;
&lt;li&gt;[x] Vercel.com deploy configuration for hosting projects&lt;/li&gt;
&lt;li&gt;[x] Post component in Homepage&lt;/li&gt;
&lt;li&gt;[ ] Api and infinite-scroll for homepage&lt;/li&gt;
&lt;li&gt;[ ] Stories area on homepage&lt;/li&gt;
&lt;li&gt;[ ] API and implementation for Post Comment&lt;/li&gt;
&lt;li&gt;[ ] Options modal component and animation usage&lt;/li&gt;
&lt;li&gt;[ ] Api and layout design for Discover page&lt;/li&gt;
&lt;li&gt;Implementing [] post modal component and discover page&lt;/li&gt;
&lt;li&gt;[ ] Route setting for profile page and tabs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/cihat/instagram-clone#readme"&gt;Source Code&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cihat.github.io/instagram-clone/"&gt;Live&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>scss</category>
    </item>
    <item>
      <title>Nav in Native</title>
      <author>Sebastian Spiegel</author>
      <pubDate>Tue, 11 May 2021 21:21:46 +0000</pubDate>
      <link>https://dev.to/sebastianspiegel/nav-in-native-47nm</link>
      <guid>https://dev.to/sebastianspiegel/nav-in-native-47nm</guid>
      <description>&lt;p&gt;This week I have been building my first React Native application. I started off with just changing the  and styles, making sure I understood how ‚Äòflex‚Äô works and the different core components. To do this I made several component files and took turns returning them as I played with them. But in a real mobile app, which I intended to build, there is navigation, just like in a web app. &lt;/p&gt;

&lt;p&gt;So clearly, this wasn‚Äôt going to cut it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return (
    &amp;lt;Welcome /&amp;gt;
    // &amp;lt;Index /&amp;gt;
  );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: If you already have an app and want to incorporate React Native, it‚Äôs recommending to use the react-native-navigation library &lt;a href="https://wix.github.io/react-native-navigation/docs/basic-navigation"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are many libraries to install to use React Navigation. I‚Äôm using expo, so I installed using the following, but you can check out the &lt;a href="https://reactnavigation.org/docs/getting-started"&gt;documentation&lt;/a&gt; if you have a different setup for your app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install @react-navigation/native
expo install react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context @react-native-community/masked-view
npm install @react-navigation/stack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are familiar with vanilla React (which you really should be first), then the setup for navigation looks very similar to routes, just different words! The setup should happen at the top level of your app (usually App.js). You start off importing these two libraries:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside of your App function, you then need to have a way to call upon the createStackNavigator function, using this line: &lt;code&gt;const Stack = createStackNavigator();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That‚Äôs the setup! Now you have everything you need to use to wrap up the screens that you want to render. So now my App.js is looking like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return (
   &amp;lt;NavigationContainer&amp;gt;
     &amp;lt;Stack.Navigator&amp;gt;
       &amp;lt;Stack.Screen name="Welcome" component={Welcome}/&amp;gt;
     &amp;lt;/Stack.Navigator&amp;gt;
   &amp;lt;/NavigationContainer&amp;gt;

 );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next time I had to figure out was using props, so I coud also get my Index component working. For the purposes of testing, I had all my data in the top level of my app (later I plan to replace that with a quick fetch to an API I‚Äôve already picked out). &lt;/p&gt;

&lt;p&gt;For React Native navigation, you can‚Äôt pass an inline function like: &lt;code&gt;component={() =&amp;gt; &amp;lt;HomeScreen /&amp;gt;}&lt;/code&gt;&lt;br&gt;
Instead, much like you would see for a Route in vanilla React, you wrap the component like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Stack.Screen name="Index"&amp;gt;
         {props =&amp;gt; &amp;lt;Index {...props} cards={cards} /&amp;gt;}
&amp;lt;/Stack.Screen&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order for my function to properly receive the props, I used memo (there are a few other options, but this worked well for me!)&lt;br&gt;
So I changed this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Index = (props) =&amp;gt; {
   return(
      // render here
   )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Index = React.memo(function Index(props) {
   return(
      // render here
   )
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;My Index is using FlatList, so I was getting a warning on my simulator, which I believe is the Native version of the warning you get when you don‚Äôt give child components individual keys in vanilla React. So if you get this error: &lt;/p&gt;

&lt;p&gt;Warning: Failed child context type: Invalid child context &lt;code&gt;virtualizedCell.cellKey&lt;/code&gt; of type &lt;code&gt;number&lt;/code&gt; supplied to &lt;code&gt;CellRenderer&lt;/code&gt;, expected &lt;code&gt;string&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Add this where you are rendering the components: &lt;code&gt;keyExtractor={item =&amp;gt; item.index_id.toString()}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now I successfully had two different components, but only the top one will render when the app starts, and unlike a webpage, you don‚Äôt have the option of just putting in the URL to get to a different route. So I added a button to my Welcome screen, to navigate to my Index.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Button color="white"
         onPress={() =&amp;gt; {
           navigation.navigate('Index')
         }}
         title="Start"
       /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: for functional components, it‚Äôs a good idea to destructure props, but if you don‚Äôt want to do that remember to put &lt;code&gt;props.navigation.navigate(‚ÄòComponent‚Äô)&lt;/code&gt; instead. &lt;/p&gt;

&lt;p&gt;If you want to navigate one page back you can use an easy back button like so: &lt;code&gt;&amp;lt;Button title="Go back" onPress={() =&amp;gt; navigation.goBack()} /&amp;gt;&lt;/code&gt;&lt;br&gt;
Though with native-gesture-handler the user can also swipe to move a page back. &lt;/p&gt;

&lt;p&gt;So that‚Äôs the basics of how I set up navigation in my current React Native application! This is definitely the easiest way to get started, and there is so much more to learn further down the line. &lt;/p&gt;

</description>
    </item>
    <item>
      <title>GitHub stars matter! Here is why</title>
      <author>Ali Khajeh-Hosseini</author>
      <pubDate>Tue, 11 May 2021 20:59:11 +0000</pubDate>
      <link>https://dev.to/infracost/github-stars-matter-here-is-why-n8c</link>
      <guid>https://dev.to/infracost/github-stars-matter-here-is-why-n8c</guid>
      <description>&lt;p&gt;As &lt;a href="https://infracost.io"&gt;Infracost&lt;/a&gt; has hit 3,000 GitHub stars üéâ, I wanted to share some thoughts as to why GitHub stars matter.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-do-people-star-repos"&gt;
  &lt;/a&gt;
  Why do people star repos?
&lt;/h3&gt;

&lt;p&gt;There are two main reasons why people star GitHub projects:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Bookmarks&lt;/strong&gt;: some people star GitHub repos to bookmark them for later use. For example I can see the repos I've starred[1] and search within them for a keyword or sort them by how recently I starred them, or how active the project has been recently.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Show support or appreciation&lt;/strong&gt;: others star repos to show support or appreciation, similar to how "likes" are used in social media sites. This is a social signal, and it's very important in the very early stages of open source projects, acting as a feedback loop for project creators. Knowing that other people have seen the project and cared enough to click on the Star button can create motivation for the creators to continue working on the project initially.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The latter is why I personally star projects. Regardless of whether I've used the project in the past, using it just now, plan to use it, or think it's a cool idea, I want the project creator to know that I like what they're doing. Terraform and Pulumi are projects that I recently starred to show support.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#benefits-of-repo-stars"&gt;
  &lt;/a&gt;
  Benefits of repo stars
&lt;/h3&gt;

&lt;p&gt;The main benefit of repo stars is creating confidence and a good first impression of the project. That in turn helps with the project &lt;strong&gt;getting users&lt;/strong&gt;, and to a lesser extent contributors.&lt;/p&gt;

&lt;p&gt;A 2018 academic research survey of over 700 developers found that "three out of four developers consider the number of stars before using or contributing to GitHub projects"[2]. GitHub stars are not the only metric that matters though. A project's activity level, for example its last release or commit, and its ease of use, for example the quality of its documentation, are also important factors in helping projects get users.&lt;/p&gt;

&lt;p&gt;I say to a lesser extent as contributing, by creating a GitHub issue or submitting a pull request, requires significantly more effort than starring a repo. People who only star a repo are probably not yet active community members but they might become active in the future. This is why the Orbit Model classifies them as Observers[3], as they can act as the top-of-funnel for growing users and contributors.  hugely popular &lt;/p&gt;

&lt;p&gt;In addition to helping projects get users, GitHub stars can help the project creators &lt;strong&gt;meet investors&lt;/strong&gt; who are familiar with open source. Early on in Infracost's journey, we were surprised to get cold emails from VCs congratulating us on our star count. After speaking with a few, it became clear that they either had systems in place to monitor stars[4], or had analysts who reviewed Trending Repos on GitHub for potential investment opportunities[5]. Some have gone even further. For example, the VC firm Runa Capital, who invested in Nginx and MariaDB, has started to track the fastest growing open source startups using GitHub stars and forks. Infracost was recently placed 5th on the ROSS Index[6].&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jDQRPH7w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8cxn7mh20h87r3d6rsq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jDQRPH7w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8cxn7mh20h87r3d6rsq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#future-of-github-stars"&gt;
  &lt;/a&gt;
  Future of GitHub stars
&lt;/h3&gt;

&lt;p&gt;A16Z's Martin Casado thinks that there is a big trend towards bottom-up strategies in business-to-business (B2B) software that will shape the entire B2B landscape in the next 10 years[7]. I wonder if in the same way that social media influencers are changing how products are marketed and sold, GitHub influencers (someone with many GitHub followers) will change how enterprise software is marketed and sold? Developer Advocates are currently using Twitter and LinkedIn, but GitHub has a "follow" and a "status update" feature too. Will those remain as a simple way to get updates on code-related activities? Or could they be extended to enable GitHub influencers to post their demos, talks and blogs into the GitHub activity feed? Will companies be able to buy ads on GitHub and promote their open source projects?&lt;/p&gt;

&lt;p&gt;Over to you - what have you learnt about GitHub stars, and how do you think they'll change in the future? I hang out on &lt;a href="https://twitter.com/AliKhajeh"&gt;Twitter&lt;/a&gt;...&lt;/p&gt;




&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/alikhajeh1?tab=stars"&gt;https://github.com/alikhajeh1?tab=stars&lt;/a&gt;, this is a public page, so you can see the repos that any GitHub user has starred.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;H. Borges and M. Tulio Valente, "What's in a GitHub Star? Understanding Repository Starring Practices in a Social Coding Platform," Journal of Systems and Software, vol. 146, pp. 112‚Äì129, 2018. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;a href="https://github.com/orbit-love/orbit-model"&gt;Orbit Model&lt;/a&gt; is implemented via the Orbit product, which can be used to measure and grow open source communities.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://openbase.com"&gt;Openbase&lt;/a&gt; helps developers choose the right JavaScript package with more languages coming soon. See the &lt;a href="https://openbase.com/js/react"&gt;React&lt;/a&gt; page to get an idea of the kinds of metrics they collect.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/trending"&gt;https://github.com/trending&lt;/a&gt;, Infracost has hit the Go trending page a few times.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://runacap.com/ross-index/"&gt;https://runacap.com/ross-index/&lt;/a&gt;, Infracost was placed 5th in the fastest-growing open-source startups in Q4 2020.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=fK5YUIS86SY"&gt;Growth, Sales, and a New Era of B2B&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>github</category>
      <category>startup</category>
      <category>opensource</category>
    </item>
    <item>
      <title>String similarity search and fast LIKE operator using pg_trgm</title>
      <author>Muhammad Azeez</author>
      <pubDate>Tue, 11 May 2021 20:58:37 +0000</pubDate>
      <link>https://dev.to/mhmd_azeez/string-similarity-search-and-fast-like-operator-using-pgtrgm-24k2</link>
      <guid>https://dev.to/mhmd_azeez/string-similarity-search-and-fast-like-operator-using-pgtrgm-24k2</guid>
      <description>&lt;p&gt;SQL supports wildcard search on strings using &lt;code&gt;LIKE&lt;/code&gt; operator which accepts &lt;code&gt;%&lt;/code&gt; and &lt;code&gt;_&lt;/code&gt; wildcards. The problem with &lt;code&gt;LIKE&lt;/code&gt; is it's not very fast if you have a lot of rows and the query is &lt;a href="https://en.wikipedia.org/wiki/Sargable"&gt;non-sargable&lt;/a&gt;. And in some cases you need to provide fuzzy search capabilities where the results don't have to exactly match the query.&lt;/p&gt;

&lt;p&gt;PostgreSQL has the &lt;a href="https://www.postgresql.org/docs/9.6/pgtrgm.html"&gt;&lt;code&gt;pg_trgm&lt;/code&gt; extension&lt;/a&gt; that solves both problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It has &lt;code&gt;gin&lt;/code&gt; and &lt;code&gt;gist&lt;/code&gt; indexes for speeding up &lt;code&gt;LIKE&lt;/code&gt; and other string operators&lt;/li&gt;
&lt;li&gt;It has &lt;code&gt;similarity&lt;/code&gt; function and &lt;code&gt;%&lt;/code&gt; operator for string similarity search using trigrams.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's assume we have this table:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;persons&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="n"&gt;int4&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; &lt;span class="k"&gt;GENERATED&lt;/span&gt; &lt;span class="n"&gt;ALWAYS&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="k"&gt;IDENTITY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;forenames&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;surname&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;forenames_normalized&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;surname_normalized&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;CONSTRAINT&lt;/span&gt; &lt;span class="n"&gt;persons_pk&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Normalized columns are lowercase versions of the normal columns and special characters are removed. You can also remove character accents. This is to make the search experience better for the user as they don't have to type in the exact case and punctuations.&lt;/p&gt;

&lt;p&gt;I inserted 10M rows of fake data generated by &lt;a href="https://github.com/bchavez/Bogus"&gt;Bogus&lt;/a&gt; into the table. You can &lt;a href="http://github.com/mhmd-azeez/PgTrgm"&gt;download the dump here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;If we run a &lt;code&gt;LIKE&lt;/code&gt; query on it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;persons&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; 
&lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;surname_normalized&lt;/span&gt; &lt;span class="k"&gt;like&lt;/span&gt; &lt;span class="s1"&gt;'%tche%'&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;forenames_normalized&lt;/span&gt; &lt;span class="k"&gt;like&lt;/span&gt; &lt;span class="s1"&gt;'%nde%'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On my laptop it takes PostgreSQL about a second to return the results:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="n"&gt;Gather&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;142174&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;719&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;639&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;460&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;Workers&lt;/span&gt; &lt;span class="n"&gt;Planned&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="n"&gt;Workers&lt;/span&gt; &lt;span class="n"&gt;Launched&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;Parallel&lt;/span&gt; &lt;span class="n"&gt;Seq&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;persons&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;141173&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;425&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;605&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;240&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="n"&gt;surname_normalized&lt;/span&gt;&lt;span class="p"&gt;)::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="o"&gt;~~&lt;/span&gt; &lt;span class="s1"&gt;'%tche%'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;forenames_normalized&lt;/span&gt;&lt;span class="p"&gt;)::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="o"&gt;~~&lt;/span&gt; &lt;span class="s1"&gt;'%nde%'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;Rows&lt;/span&gt; &lt;span class="n"&gt;Removed&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3333308&lt;/span&gt;
&lt;span class="n"&gt;Planning&lt;/span&gt; &lt;span class="nb"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;097&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;span class="n"&gt;Execution&lt;/span&gt; &lt;span class="nb"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;639&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;494&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It seems like all of rows rows are scanned in the table. To speed things up, first we need to enable the &lt;code&gt;pg_trgm&lt;/code&gt; extension on the database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="n"&gt;extension&lt;/span&gt; &lt;span class="n"&gt;if&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;exists&lt;/span&gt; &lt;span class="n"&gt;pg_trgm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can use the &lt;code&gt;gin&lt;/code&gt; index on the normalized columns:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="k"&gt;index&lt;/span&gt; &lt;span class="n"&gt;if&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;exists&lt;/span&gt; &lt;span class="n"&gt;idx_gin_persons_on_names&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;persons&lt;/span&gt; &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forenames_normalized&lt;/span&gt; &lt;span class="n"&gt;gin_trgm_ops&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;surname_normalized&lt;/span&gt; &lt;span class="n"&gt;gin_trgm_ops&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;gin&lt;/code&gt; index and &lt;code&gt;gin_trgm_ops&lt;/code&gt; operator are part of &lt;code&gt;pg_trgm&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Adding the &lt;code&gt;gin&lt;/code&gt; index took about a minute on my laptop for 10M rows.&lt;/p&gt;

&lt;p&gt;Now let's see if the results have improved:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="n"&gt;Bitmap&lt;/span&gt; &lt;span class="n"&gt;Heap&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;persons&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;3692&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;46&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;995&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;011&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;066&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;Recheck&lt;/span&gt; &lt;span class="n"&gt;Cond&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="n"&gt;forenames_normalized&lt;/span&gt;&lt;span class="p"&gt;)::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="o"&gt;~~&lt;/span&gt; &lt;span class="s1"&gt;'%nde%'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;surname_normalized&lt;/span&gt;&lt;span class="p"&gt;)::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="o"&gt;~~&lt;/span&gt; &lt;span class="s1"&gt;'%tche%'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="n"&gt;Heap&lt;/span&gt; &lt;span class="n"&gt;Blocks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;exact&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;
  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;Bitmap&lt;/span&gt; &lt;span class="k"&gt;Index&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;idx_gin_persons_on_names&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;95&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;995&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;999&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;999&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;Index&lt;/span&gt; &lt;span class="n"&gt;Cond&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="n"&gt;forenames_normalized&lt;/span&gt;&lt;span class="p"&gt;)::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="o"&gt;~~&lt;/span&gt; &lt;span class="s1"&gt;'%nde%'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;surname_normalized&lt;/span&gt;&lt;span class="p"&gt;)::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="o"&gt;~~&lt;/span&gt; &lt;span class="s1"&gt;'%tche%'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;Planning&lt;/span&gt; &lt;span class="nb"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;092&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;span class="n"&gt;Execution&lt;/span&gt; &lt;span class="nb"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of &lt;code&gt;639.494 ms&lt;/code&gt; for execution time, now it only takes &lt;code&gt;4.1 ms&lt;/code&gt;! That's because instead of sequentially scanning all of the rows in the document, it scanned the &lt;code&gt;gin&lt;/code&gt; index.&lt;/p&gt;

&lt;p&gt;Great, now let's take a look at how to do fuzzy search:&lt;/p&gt;

&lt;p&gt;Let's say we are trying to find someone with forename(s) of &lt;code&gt;anderson&lt;/code&gt; and surname of &lt;code&gt;mitchell&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;forenames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;similarity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'mitchel'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;surname_normalized&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;similarity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'andersen'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;forenames_normalized&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;persons&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;
&lt;span class="k"&gt;order&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="k"&gt;desc&lt;/span&gt;
&lt;span class="k"&gt;limit&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This query takes about 58 seconds to complete. The &lt;code&gt;similarity&lt;/code&gt; function is expensive, so we have to try not to use it as much as possible. For that, we can use the similarity operator (&lt;code&gt;%&lt;/code&gt;) to filter out the rows that are below a certain threshold. By default the threshold is 70% similarity (&lt;code&gt;0.3&lt;/code&gt;) but you can change that using &lt;code&gt;set_limit&lt;/code&gt;. Now let's use it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;forenames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;similarity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'mitchel'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;surname_normalized&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;similarity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'andersen'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;forenames_normalized&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;persons&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;
&lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;forenames_normalized&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="s1"&gt;'andersen'&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;surname_normalized&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="s1"&gt;'mitchel'&lt;/span&gt;
&lt;span class="k"&gt;order&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="k"&gt;desc&lt;/span&gt;
&lt;span class="k"&gt;limit&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now it takes about &lt;code&gt;100ms&lt;/code&gt; on my laptop. A huge improvement over 58 seconds :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#edge-cases"&gt;
  &lt;/a&gt;
  Edge Cases
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;pg_trgm&lt;/code&gt; uses tri-grams for indexing. It means that each string is broken into all possible 3 letter components. For example &lt;code&gt;mitchel&lt;/code&gt;'s trigrams are: &lt;code&gt;mit&lt;/code&gt;,&lt;code&gt;itc&lt;/code&gt;,&lt;code&gt;tch&lt;/code&gt;,&lt;code&gt;che&lt;/code&gt;,&lt;code&gt;hel&lt;/code&gt; and &lt;code&gt;michelle&lt;/code&gt;'s trigrams are: &lt;code&gt;mic&lt;/code&gt;,&lt;code&gt;ich&lt;/code&gt;,&lt;code&gt;che&lt;/code&gt;,&lt;code&gt;hel&lt;/code&gt;,&lt;code&gt;ell&lt;/code&gt;,&lt;code&gt;lle&lt;/code&gt;. They share 2 trigrams so the similarity of &lt;code&gt;mitchel&lt;/code&gt; with &lt;code&gt;michelle&lt;/code&gt; is 30%.&lt;/p&gt;

&lt;p&gt;This approach is not useful for words that are less than 3 letters. As you can't form any trigrams. So this query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;persons&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; 
&lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;surname_normalized&lt;/span&gt; &lt;span class="k"&gt;like&lt;/span&gt; &lt;span class="s1"&gt;'%he%'&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;forenames_normalized&lt;/span&gt; &lt;span class="k"&gt;like&lt;/span&gt; &lt;span class="s1"&gt;'%de%'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Takes the same amount of time on both the indexed table and the non-indexed table because PostgreSQL does sequential scan for both of them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="n"&gt;Gather&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;147095&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;49229&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;169&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;655&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;329&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;21216&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;Workers&lt;/span&gt; &lt;span class="n"&gt;Planned&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="n"&gt;Workers&lt;/span&gt; &lt;span class="n"&gt;Launched&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;Parallel&lt;/span&gt; &lt;span class="n"&gt;Seq&lt;/span&gt; &lt;span class="n"&gt;Scan&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;persons&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;141173&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20512&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;397&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;583&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;521&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;7072&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="n"&gt;surname_normalized&lt;/span&gt;&lt;span class="p"&gt;)::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="o"&gt;~~&lt;/span&gt; &lt;span class="s1"&gt;'%he%'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;forenames_normalized&lt;/span&gt;&lt;span class="p"&gt;)::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="o"&gt;~~&lt;/span&gt; &lt;span class="s1"&gt;'%de%'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;Rows&lt;/span&gt; &lt;span class="n"&gt;Removed&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3326261&lt;/span&gt;
&lt;span class="n"&gt;Planning&lt;/span&gt; &lt;span class="nb"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;105&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;span class="n"&gt;Execution&lt;/span&gt; &lt;span class="nb"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;655&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;974&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There can be cases where the index makes things slower. So please test it for your own use case and weight the trade-offs. Also keep in mind that inserts and updates take longer with the index.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benchmarks"&gt;
  &lt;/a&gt;
  Benchmarks
&lt;/h2&gt;

&lt;p&gt;I wrote some very simple benchmarks using &lt;a href="https://github.com/dotnet/BenchmarkDotNet"&gt;BenchmarkDotNet&lt;/a&gt; and here is the results:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// * Summary *

BenchmarkDotNet=v0.12.1, OS=Windows 10.0.19041.928 (2004/?/20H1)
Intel Core i7-8550U CPU 1.80GHz (Kaby Lake R), 1 CPU, 8 logical and 4 physical cores
.NET Core SDK=5.0.201
  [Host]     : .NET Core 5.0.4 (CoreCLR 5.0.421.11614, CoreFX 5.0.421.11614), X64 RyuJIT
  DefaultJob : .NET Core 5.0.4 (CoreCLR 5.0.421.11614, CoreFX 5.0.421.11614), X64 RyuJIT


|            Method    |         Mean |      Error |     StdDev |     Median |
|---------------------:|-------------:|-----------:|-----------:|-----------:|
|    LikeOnGinIndex    |     5.398 ms |  0.7167 ms |   2.113 ms |   4.170 ms |
|              Like    | 1,035.140 ms | 55.0098 ms | 158.716 ms | 991.495 ms |
| SimilarityOnGinIndex |   137.339 ms | 14.7610 ms |  43.523 ms | 114.342 ms |
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Please download the database dump and code on &lt;a href="http://github.com/mhmd-azeez/PgTrgm"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>postgres</category>
      <category>pgtrgm</category>
      <category>search</category>
    </item>
    <item>
      <title>Setting up a .NET service on Linux</title>
      <author>Jakub Rumpel</author>
      <pubDate>Tue, 11 May 2021 20:58:23 +0000</pubDate>
      <link>https://dev.to/hanewali/setting-up-a-net-service-on-linux-3hc0</link>
      <guid>https://dev.to/hanewali/setting-up-a-net-service-on-linux-3hc0</guid>
      <description>&lt;p&gt;This is another "I don't want to have to google this anymore" kind of post.&lt;/p&gt;

&lt;p&gt;Quick sidenotes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I use .NET 5&lt;/li&gt;
&lt;li&gt;I didn't create the example &lt;em&gt;.service&lt;/em&gt; file; I couldn't find the original author, as it probably was from Stack Overflow, but this is the file I use on my VPS.&lt;/li&gt;
&lt;li&gt;This completely doesn't cover setting up nginx or writing actual code - just creates a service which runs your .NET app&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#create-service-file"&gt;
  &lt;/a&gt;
  Create .service file
&lt;/h3&gt;

&lt;p&gt;My &lt;em&gt;.service&lt;/em&gt; files are stored in &lt;strong&gt;/etc/systemd/system/&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sample &lt;em&gt;.service&lt;/em&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;Unit]
&lt;span class="nv"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Sample Description

&lt;span class="o"&gt;[&lt;/span&gt;Service]
&lt;span class="c"&gt;# systemd will run this executable to start the service, has to be specific file&lt;/span&gt;
&lt;span class="nv"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/srv/AppDir/AppExecutable

&lt;span class="c"&gt;# to query logs using journalctl, set a logical name here&lt;/span&gt;
&lt;span class="nv"&gt;SysLogIdentifier&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;SampleName

&lt;span class="c"&gt;# use your username to keep things simple&lt;/span&gt;
&lt;span class="c"&gt;#make use user you chose has the correct permissions to run the app&lt;/span&gt;
&lt;span class="nv"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;username

&lt;span class="c"&gt;#this environment variable is neccessary when dotnet isn't loadeed for the specified user. &lt;/span&gt;
&lt;span class="c"&gt;#to figure out this variable, run 'env | grep DOTNET_ROOT' when dotnet has been loaded into your shell&lt;/span&gt;
&lt;span class="c"&gt;#Environment="DOTNET_ROOT=/opt/rh/rh-dotnet31/root/usr/lib64/dotnet"&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;Install]
&lt;span class="nv"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;multi-user.target
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Description - this will be shown as a description when you run systemctl status ServiceName.service, useful in order to identify the service&lt;/li&gt;
&lt;li&gt;ExecStart - This has to be a direct path to the executable file of your app. Make sure you made it executable using &lt;strong&gt;chmod +x&lt;/strong&gt;!&lt;/li&gt;
&lt;li&gt;SysLogIdentifier - Name of the app used in syslog - again, useful to identify your app later&lt;/li&gt;
&lt;li&gt;User - Username of the user who "runs" the app. Preferably use your own, but you can use any as long as specified user has the correct permissions&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#register-the-service"&gt;
  &lt;/a&gt;
  Register the service
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First, check if systemctl command properly sees your .service file:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl status ServiceName.service
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If results seems okay (Description is shown, and it seems like everything is okay), start your service&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl start ServiceName.service
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Aaand that's it! From this point on, you just have to make sure your code is good, and test if your app works!&lt;/p&gt;

&lt;p&gt;Have a great day ;)&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>linux</category>
    </item>
    <item>
      <title>Meet zx: A Better Way to Write Scripts with Node.js</title>
      <author>Alex Lakatos ü•ë</author>
      <pubDate>Tue, 11 May 2021 20:55:10 +0000</pubDate>
      <link>https://dev.to/lakatos88/meet-zx-a-better-way-to-write-scripts-with-node-js-4mkb</link>
      <guid>https://dev.to/lakatos88/meet-zx-a-better-way-to-write-scripts-with-node-js-4mkb</guid>
      <description>&lt;p&gt;Bash is great and all, but it‚Äôs not something I‚Äôll pick up in a day. I was looking for something a little bit more convenient to write scripts in. While looking, I‚Äôve stumbled upon this little &lt;a href="https://github.com/google/zx"&gt;utility from Google&lt;/a&gt; called &lt;code&gt;zx&lt;/code&gt;. And it‚Äôs a better way to write scripts using JavaScript.&lt;/p&gt;

&lt;p&gt;I thought I‚Äôd give &lt;code&gt;zx&lt;/code&gt; a try. It comes with a bunch of things out of the box, like &lt;code&gt;chalk&lt;/code&gt; and &lt;code&gt;fetch&lt;/code&gt;. I know, Node.js already lets me write scripts, but dealing with a bunch of the crap around escaping and sanitizing inputs was painful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-script-way"&gt;
  &lt;/a&gt;
  The Script Way
&lt;/h2&gt;

&lt;p&gt;Before I talk about all the great things &lt;code&gt;zx&lt;/code&gt; promised, let‚Äôs talk about the basics of writing and using scripts first.&lt;/p&gt;

&lt;p&gt;Scripts are all text files and need to start with a shebang at the top (also known as sha-bang, hashbang, pound-bang or hash-pling). The shebang tells the operating system to interpret the rest of the file using that interpreter directive, effectively starting the interpreter and passing the text file along as a parameter.&lt;/p&gt;

&lt;p&gt;So, when scripts start with &lt;code&gt;#!/bin/bash&lt;/code&gt; or &lt;code&gt;#!/bin/sh&lt;/code&gt;, the OS actually runs &lt;code&gt;$ /bin/bash /path/to/script&lt;/code&gt; behind the scenes every time you execute the script.&lt;/p&gt;

&lt;p&gt;Before you can execute the script, you need to declare it in the system as executable. On Unix systems (macOS included), running &lt;code&gt;$ chmod +x ./script.sh&lt;/code&gt; or &lt;code&gt;$ chmod 775 ./script.sh&lt;/code&gt; will do the trick.&lt;/p&gt;

&lt;p&gt;After you‚Äôve given permissions to your script to be executed, you can run it with &lt;code&gt;$ ./script.sh&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bash-scripts"&gt;
  &lt;/a&gt;
  Bash Scripts
&lt;/h2&gt;

&lt;p&gt;A Bash script starts with the bash shebang, followed by a lot of black magic. üòÖ For example, to add two numbers that are given as command-line arguments, a script looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt; + &lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="s2"&gt; = &lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To run it, save it as &lt;code&gt;add.sh&lt;/code&gt; and then run the following commands in your Terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;chmod&lt;/span&gt; +x ./add.sh
&lt;span class="nv"&gt;$ &lt;/span&gt;./add.sh 5 7
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output is going to be &lt;code&gt;5 + 7 = 12&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It looks pretty simple if you‚Äôve figured out that &lt;code&gt;$index&lt;/code&gt; is the command-line argument. I‚Äôve had to look that up while learning shell scripting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-zx-endraw-scripts"&gt;
  &lt;/a&gt;
  &lt;code&gt;zx&lt;/code&gt; Scripts
&lt;/h2&gt;

&lt;p&gt;Before you can use &lt;code&gt;zx&lt;/code&gt; to run scripts, you‚Äôll need to install it globally via npm, with &lt;code&gt;$ npm i -g zx&lt;/code&gt;. Why didn‚Äôt you need to install &lt;code&gt;bash&lt;/code&gt;? Because &lt;code&gt;bash&lt;/code&gt; comes installed by default with Unix systems.&lt;/p&gt;

&lt;p&gt;Similarly to all other scripts, a &lt;code&gt;zx&lt;/code&gt; script will start with a shebang. This time, a little more complicated, the &lt;code&gt;zx&lt;/code&gt; shebang. Followed by a lot of JavaScript. Let‚Äôs try to recreate the above shell script that adds two numbers given as command-line arguments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cp"&gt;#!/usr/bin/env zx
&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt; + &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt; = &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To run it, save it as &lt;code&gt;add.mjs&lt;/code&gt; and then run the following commands in your Terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;chmod&lt;/span&gt; +x ./add.mjs
&lt;span class="nv"&gt;$ &lt;/span&gt;./add.mjs 5 7
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output is going to be &lt;code&gt;/Users/laka/.nvm/versions/node/v16.1.0/bin/node + /usr/local/bin/zx = /Users/laka/.nvm/versions/node/v16.1.0/bin/node/usr/local/bin/zx&lt;/code&gt; üòÖ. And that‚Äôs because &lt;code&gt;process.argv&lt;/code&gt;, another Node.js wonder, gets called with three extra arguments before you get to 5 and 7. Let‚Äôs re-write the script to account for that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cp"&gt;#!/usr/bin/env zx
&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt; + &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt; = &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run the script now with &lt;code&gt;$ ./add.mjs 5 7&lt;/code&gt;, the output is going to be &lt;code&gt;5 + 7 = 57&lt;/code&gt;. Because JavaScript ü§¶. And JavaScript thinks those are strings and concatenates them instead of doing math. Re-writing the script again to deal with numbers instead of strings, it looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cp"&gt;#!/usr/bin/env zx
&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt; + &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt; = &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Bash script looked a lot cleaner, right? I agree. And if I ever need to add two numbers from the command line, a Bash script would be a way better option! Bash doesn‚Äôt shine in a lot of other areas, though. Like parsing JSON files. I gave up trying to figure how to parse JSON files halfway through &lt;a href="https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools"&gt;the StackOverflow post explaining it&lt;/a&gt;. But this is where &lt;code&gt;zx&lt;/code&gt; shines.&lt;/p&gt;

&lt;p&gt;I already know how to parse JSON in JavaScript. And here is what the &lt;code&gt;zx&lt;/code&gt; script for it looks like, using the built-in &lt;code&gt;fetch&lt;/code&gt; module:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cp"&gt;#!/usr/bin/env zx
&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://raw.githubusercontent.com/AlexLakatos/computer-puns/main/puns.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;puns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;randomPun&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;puns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chalk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;red&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;puns&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;randomPun&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;pun&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chalk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;green&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;puns&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;randomPun&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;punchline&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because I was fancy and used the built-in &lt;code&gt;chalk&lt;/code&gt; module, this &lt;code&gt;zx&lt;/code&gt; script outputs a random pun from &lt;a href="https://puns.dev"&gt;https://puns.dev&lt;/a&gt; in the command-line.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5ydDhGLR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://alexlakatos.com/img/posts/node/node-json-zx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5ydDhGLR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://alexlakatos.com/img/posts/node/node-json-zx.png" alt="Computer Pun in Terminal via zx"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Building something similar in &lt;code&gt;shell&lt;/code&gt; had me rage-quit halfway through the process. And that‚Äôs OK. Finding the right tool for the job is what this post was all about.&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
