<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Simple Text Revealer</title>
      <author>lemmin</author>
      <pubDate>Thu, 29 Apr 2021 01:21:13 +0000</pubDate>
      <link>https://dev.to/lemmin/simple-text-revealer-kfj</link>
      <guid>https://dev.to/lemmin/simple-text-revealer-kfj</guid>
      <description>&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/lemmin/embed/xxgNOVO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;All text nodes in the provided container will be parsed and added back into the DOM with a wrapping span (by letter or word) including classes that describe the hidden and revealed styles (and transition).&lt;/p&gt;

&lt;p&gt;Any transition you can think of can be used to animate each individual letter or word in sequence (doesn't even need to be a reveal).&lt;/p&gt;

&lt;p&gt;The reveal() method returns a promise that resolves when all the text has transitioned. This demo uses the promises to chain the reveal animations together.&lt;/p&gt;

&lt;p&gt;You can use reset() or replay() to run the animation again. The transitions will apply when resetting as well (all at once).&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>animation</category>
      <category>reveal</category>
    </item>
    <item>
      <title>Best Supported Serverless Languages</title>
      <author>Dylan Anthony</author>
      <pubDate>Thu, 29 Apr 2021 00:56:33 +0000</pubDate>
      <link>https://dev.to/dbanty/best-supported-serverless-languages-l5</link>
      <guid>https://dev.to/dbanty/best-supported-serverless-languages-l5</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Cover image created by me using the &lt;a href="https://github.com/remojansen/logo.ts"&gt;Community TypeScript Logo&lt;/a&gt;, the &lt;a href="https://blog.golang.org/go-brand"&gt;Go logo&lt;/a&gt;, the &lt;a href="https://github.com/dotnet/brand"&gt;.NET logo&lt;/a&gt;, and &lt;a href="https://www.rustacean.net"&gt;Ferris the Crab&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;I'm a big fan of serverless functions, but my perspective is usually limited to what will run on AWS Lambda. So I took a tally of the supported languages on the serverless platforms that I've heard of.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#caveats"&gt;
  &lt;/a&gt;
  Caveats
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;I didn't go searching for new serverless providers, these are the ones I already knew about.&lt;/li&gt;
&lt;li&gt;These are only the languages prominently listed with tutorials or examples on the provider's website. You'll notice, for example, that Rust on AWS Lambda is not included here even though I've written several blog posts about it!&lt;/li&gt;
&lt;li&gt;This is not an endorsement or review of any languages or providers, merely a count of official support. If you have specific questions you want answered (or a slightly different list ranking related things) &lt;a href="https://github.com/dbanty/dylananthony.com/discussions/71"&gt;let me know&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Some of these entries have their own specific caveats, they are indicated with a number at the end of the entry. Details on that number are at the bottom of the post.&lt;/li&gt;
&lt;li&gt;I have not used all of these language/provider combos, I'm assuming if they are displayed prominently on the site then they are possible to use effectively.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#big-takeaways"&gt;
  &lt;/a&gt;
  Big Takeaways
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;The best supported language is JavaScript, followed closely by TypeScript. No shock there.&lt;/li&gt;
&lt;li&gt;Python and Go are tied for third place in availability.&lt;/li&gt;
&lt;li&gt;Cloudflare Workers are &lt;em&gt;by far&lt;/em&gt; the most flexible in way of supported / documented languages with 12‚Äîthough many of those rely on cross-compiling the language to JavaScript.&lt;/li&gt;
&lt;li&gt;AWS, Azure, and GCP are all tied for second at 8 supported languages. Realistically, these are the most flexible platforms as those 8 languages don't require transpilation (except for TypeScript but... you know...).&lt;/li&gt;
&lt;li&gt;Rust has an explicit tutorial on the Azure website! ü•∞ I'm suddenly more likely to use Azure than AWS in my next big project.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#the-list"&gt;
  &lt;/a&gt;
  The List
&lt;/h2&gt;

&lt;p&gt;Here is the list of all the supported languages with the platforms that support them. Reminder, a number in {} after the language means there's a caveat, check the bottom of the post for it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; Netlify&lt;/li&gt;
&lt;li&gt; AWS&lt;/li&gt;
&lt;li&gt; GCP&lt;/li&gt;
&lt;li&gt; Azure&lt;/li&gt;
&lt;li&gt; Vercel&lt;/li&gt;
&lt;li&gt; Cloudflare&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#typescript"&gt;
  &lt;/a&gt;
  TypeScript
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; Netlify&lt;/li&gt;
&lt;li&gt; Azure&lt;/li&gt;
&lt;li&gt; Vercel&lt;/li&gt;
&lt;li&gt; Cloudflare&lt;/li&gt;
&lt;li&gt; AWS {1}&lt;/li&gt;
&lt;li&gt; GCP {1}&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#go"&gt;
  &lt;/a&gt;
  Go
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; Netlify&lt;/li&gt;
&lt;li&gt; AWS&lt;/li&gt;
&lt;li&gt; GCP&lt;/li&gt;
&lt;li&gt; Azure {2}&lt;/li&gt;
&lt;li&gt; Vercel&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  Python
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; AWS&lt;/li&gt;
&lt;li&gt; GCP&lt;/li&gt;
&lt;li&gt; Azure&lt;/li&gt;
&lt;li&gt; Vercel&lt;/li&gt;
&lt;li&gt; Cloudflare {3}&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#ruby"&gt;
  &lt;/a&gt;
  Ruby
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; AWS&lt;/li&gt;
&lt;li&gt; GCP&lt;/li&gt;
&lt;li&gt; Vercel&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#java"&gt;
  &lt;/a&gt;
  Java
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; AWS&lt;/li&gt;
&lt;li&gt; GCP&lt;/li&gt;
&lt;li&gt; Azure&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#c"&gt;
  &lt;/a&gt;
  C
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; AWS&lt;/li&gt;
&lt;li&gt; GCP&lt;/li&gt;
&lt;li&gt; Azure&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#php"&gt;
  &lt;/a&gt;
  PHP
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; GCP&lt;/li&gt;
&lt;li&gt; Cloudflare {3}&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#powershell"&gt;
  &lt;/a&gt;
  Powershell
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; AWS&lt;/li&gt;
&lt;li&gt; Azure&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#rust"&gt;
  &lt;/a&gt;
  Rust
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Azure {2}&lt;/li&gt;
&lt;li&gt;Cloudflare {4}&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#c-and-cobol"&gt;
  &lt;/a&gt;
  C and Cobol
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Cloudflare {4}&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#kotlin-dart-scala-reason-ocaml-perl-and-f"&gt;
  &lt;/a&gt;
  Kotlin, Dart, Scala, Reason / OCaml, Perl, and F
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Cloudflare {3}&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#languagespecific-caveats"&gt;
  &lt;/a&gt;
  Language-Specific Caveats
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;The runtime is for Node.js and there is no TypeScript example, but TypeScript is fairly easy to compile to JavaScript.&lt;/li&gt;
&lt;li&gt;There is a tutorial for using this language, but not an official runtime.&lt;/li&gt;
&lt;li&gt;Supported by compiling to JavaScript, some language features / libraries may not work.&lt;/li&gt;
&lt;li&gt;Supported by compiling to WebAssembly, your mileage may vary.&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;&lt;em&gt;Was this post super helpful to you? &lt;a href="https://github.com/sponsors/dbanty?frequency=one-time&amp;amp;sponsor=dbanty"&gt;Tip me on GitHub&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Have a question or comment about this post? Leave it in the &lt;a href="https://github.com/dbanty/dylananthony.com/discussions/71"&gt;discussion&lt;/a&gt; thread on GitHub!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Want to be notified of future posts? Watch releases in &lt;a href="https://github.com/dbanty/dylananthony.com"&gt;the GitHub repo&lt;/a&gt; or &lt;a href="https://twitter.com/TBDylan"&gt;follow me on Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Have an idea or request for a future blog topic? Drop it in the GitHub discussions under &lt;a href="https://github.com/dbanty/dylananthony.com/discussions/categories/ideas"&gt;ideas&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>serverless</category>
    </item>
    <item>
      <title>Why Are We Still Having ‚ÄòWorks on My Machine‚Äô Problems?</title>
      <author>rishiyadav</author>
      <pubDate>Thu, 29 Apr 2021 00:50:22 +0000</pubDate>
      <link>https://dev.to/roost/why-are-we-still-having-works-on-my-machine-problems-31m3</link>
      <guid>https://dev.to/roost/why-are-we-still-having-works-on-my-machine-problems-31m3</guid>
      <description>&lt;p&gt;As much as computer programming has advanced over the past two decades, developers and operators are still dealing with ‚Äúworks on my machine‚Äù problems ‚Äî an application that works great on the laptop but is completely non-functional in production or on a colleague‚Äôs laptop. Why are we still having this problem?&lt;/p&gt;

&lt;p&gt;I think of ‚Äúworks on my machine‚Äù as a function of how much control developers have over the production environments and how identical the development and production environments are. Over the short history of computer science the pendulum has swung a couple of times, leading to more or less ‚Äúworks on my machine‚Äù problems.&lt;/p&gt;

&lt;p&gt;Let‚Äôs think back to the early days of computer programming, when programming a computer involved punch cards. Any mistake on the punch card meant you had to punch those cards again. Developers were coding in production, and the cost of each mistake was high. But mistakes were immediately apparent and developers were working as close to production as possible. Everyone was working on the same machine, so there were no ‚Äúworks on my machine‚Äù issue.&lt;/p&gt;

&lt;p&gt;As developers started using client servers and then programming on their own machines, the distance between the production environment and the development environment started increasing. This is when ‚Äúworks on my machine‚Äù started becoming a serious issue for software engineering teams.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The shorthand ‚ÄúWorks on my machine‚Äù is a function of how much control developers have over the production environments and how identical the development and production environments are.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then came the cloud. At first, cloud was really Shadow IT, used and configured by developers to run non-critical applications. At that stage, developers had control over the cloud and ‚Äúworks on my machine‚Äù problems decreased.&lt;/p&gt;

&lt;p&gt;Now, though, as cloud has moved from Shadow IT to mainstream and more layers of control have been put on how cloud environments are set up, the distance between what developers are doing in their IDEs and what the production environment looks like is increasing.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#seeing-what-sticks"&gt;
  &lt;/a&gt;
  Seeing What Sticks
&lt;/h1&gt;

&lt;p&gt;You can‚Äôt really work directly in the cloud ‚Äî and there are good reasons that we don‚Äôt have developers working in the production environment like in the mainframe era. Now we have isolated systems for developers so that they can safely make mistakes while developing. At the same time, developers are being woken up at two in the morning because their code doesn‚Äôt work in production ‚Äî they don‚Äôt have the tools to easily debug the problem if everything worked perfectly on the laptop. Bugs coming home to Roost, someone may say.&lt;/p&gt;

&lt;p&gt;At the moment, most companies are addressing the ‚Äúworks on my machine‚Äù problem with a mixture of the following techniques:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Reducing velocity. More robust testing is one strategy for catching potential problems before they reach production. We would like to think that all testing is 100% automated and instantaneous, but that is not true. A more robust testing procedure will slow down development velocity and still not ensure that all ‚Äúworks on my machine‚Äù problems are caught before production.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Trial and error. Organizations talk about getting through issues in production by deploying more frequently or by using advanced deployment techniques like canary deployments. This is a euphemistic way of saying that they are using trial and error to solve ‚Äúworks on my machine‚Äù problems.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Establishing more stringent deployment procedures. Organizations also try to address ‚Äúworks on my machine‚Äù problems by establishing increasingly rigid deployment procedures and putting in both guardrails and roadblocks on the deployment pipeline, hoping that problems will be caught before production.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The problem with these approaches is that neither of them are actually solving the problem or giving the developer a better way to proactively ensure that the service will work correctly in production before it even enters the integration process.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#empowering-developers"&gt;
  &lt;/a&gt;
  Empowering Developers
&lt;/h1&gt;

&lt;p&gt;After all these years and all these late nights of frustration, you‚Äôd think that the software engineering as an industry would have figured out a better way to prevent ‚Äúworks on my machine‚Äù problems. The real solution, though, has to involve decreasing the distance between the development environment and the production environment so that developers are automatically able to develop in an environment that‚Äôs identical to production, including having access to the latest versions of upstream and downstream dependencies and running with the same configurations. As an industry, we talk a lot about shortening the feedback loop. Developers should be alerted that there might be a service compatibility issue or that an update won‚Äôt work in production before it leaves their machine, not after a failed canary deployment. That‚Äôs the only way we‚Äôll end up eliminating the ‚Äúworks on my machine‚Äù problem for good.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>docker</category>
      <category>devops</category>
      <category>cloudnative</category>
    </item>
    <item>
      <title>Conocer el tipo de Variable en JS!</title>
      <author>Lenin Felix</author>
      <pubDate>Wed, 28 Apr 2021 23:40:33 +0000</pubDate>
      <link>https://dev.to/soyleninjs/conocer-el-tipo-de-variable-en-js-jne</link>
      <guid>https://dev.to/soyleninjs/conocer-el-tipo-de-variable-en-js-jne</guid>
      <description>&lt;p&gt;&lt;a href="https://rollercoin.com/?r=kl3gfn3b"&gt;&lt;img src="//rollercoin.com/static/img/referral/banners/ref_72890.gif" alt="promo"&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Muchas veces (...supongo) has querido o intentado querer saber de qu√© tipo es una variable, y lo m√°s probable es que lo sepas ya que el 98% de las veces t√∫ eres quien las declara.&lt;/p&gt;

&lt;p&gt;Pero imag√≠nate encontrarte con una API o un c√≥digo de terceros el cual tengas que manipular, eso ya se vuelve mas complejo, ya que tu solo estas ahi para utilizar ese mundillo de variables, funciones, textos y dem√°s...&lt;/p&gt;

&lt;p&gt;Aunque tambi√©n muchas veces es util saber de que tipo son las variables para as√≠ crear condicionales que est√©n preparadas para manipular y mantener tu c√≥digo estable y que no crashee tu c√≥digo de "Hola Mundo".&lt;/p&gt;

&lt;p&gt;Por eso te ofrezco un peque√±o ejemplo de funciones que puedes utilizar para esas ocasiones (se que es poco, pero es trabajo honesto).&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/soyleninjs/embed/yLgjLWg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;B√°sicamente, se trata de funciones a la cual le pasas tu variable para indicar si es de cierto tipo o no.&lt;/p&gt;

&lt;p&gt;Puede funcionar, por ejemplo, en alguna funci√≥n en la que le pases par√°metros, pero tengas que hacer diferentes cosas dado el caso si el par√°metro recibe un Objeto o un Array.&lt;/p&gt;

&lt;p&gt;A simple vista no podr√≠a parecer muy util, pero por lo menos a m√≠, con cierto c√≥digo que tuve que hacer, me ayudo.&lt;/p&gt;


&lt;center&gt;
&lt;br&gt;
Si te gusto el contenido puedes seguirme en mis redes sociales como &lt;a class="mentioned-user" href="https://dev.to/soyleninjs"&gt;@soyleninjs&lt;/a&gt;
 &lt;br&gt;
&lt;/center&gt;

&lt;p&gt;&lt;a href="https://ko-fi.com/G2G42SCZF"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RDsLyh75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.ko-fi.com/img/githubbutton_sm.svg" alt="ko-fi"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rollercoin.com/?r=kl3gfn3b"&gt;&lt;img src="//rollercoin.com/static/img/referral/banners/ref_72890.gif" alt="promo"&gt; &lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>showdev</category>
      <category>webdev</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Sport With AI</title>
      <author>Furkan G√ºl≈üen</author>
      <pubDate>Wed, 28 Apr 2021 23:25:31 +0000</pubDate>
      <link>https://dev.to/codeblogger/sport-with-ai-4fi5</link>
      <guid>https://dev.to/codeblogger/sport-with-ai-4fi5</guid>
      <description>&lt;p&gt;Github Repo: &lt;a href="https://github.com/Furkan-Gulsen/Sport-With-AI"&gt;https://github.com/Furkan-Gulsen/Sport-With-AI&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The human body is detected with the help of the &lt;a href="https://github.com/google/mediapipe"&gt;Mediapipe&lt;/a&gt; library. Then, using the mathematical methods applied, it is determined how much the exercise count is done.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#situp-exercise"&gt;
  &lt;/a&gt;
  Sit-Up Exercise
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ch1KmpQ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2mxjakvbt0ksmmam8t75.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ch1KmpQ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2mxjakvbt0ksmmam8t75.gif" alt="Sit-Up"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Video: &lt;a href="https://www.youtube.com/watch?v=aQh52cRfH-w"&gt;https://www.youtube.com/watch?v=aQh52cRfH-w&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The sit-up is an abdominal endurance training exercise to strengthen, tighten and tone the abdominal muscles. It is similar to a crunch, but sit-ups have a fuller range of motion and condition additional muscles.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python main.py -t sit-up -vs videos/sit-up.mp4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#pullup-exercise"&gt;
  &lt;/a&gt;
  Pull-Up Exercise
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4UtSltQz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h99femdoc3xkcfo9qdxo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4UtSltQz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h99femdoc3xkcfo9qdxo.gif" alt="Pull-Up"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Video: &lt;a href="https://www.youtube.com/watch?v=8hkTMATEuUc"&gt;https://www.youtube.com/watch?v=8hkTMATEuUc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A pull-up is an upper-body strength exercise. The pull-up is a closed-chain movement where the body is suspended by the hands and pulls up. As this happens, the elbows flex and the shoulders adduct and extend to bring the elbows to the torso.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python main.py -t pull-up -vs videos/pull-up.mp4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#pushup-exercise"&gt;
  &lt;/a&gt;
  Push-Up Exercise
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--slKebNOH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w2gimthwr3e3wafnm7jw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--slKebNOH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w2gimthwr3e3wafnm7jw.gif" alt="Push-Up"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Video: &lt;a href="https://www.youtube.com/watch?v=IGjHIXAZAak"&gt;https://www.youtube.com/watch?v=IGjHIXAZAak&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A push-up is a common calisthenics exercise beginning from the prone position. By raising and lowering the body using the arms, push-ups exercise the pectoral muscles, triceps, and anterior deltoids, with ancillary benefits to the rest of the deltoids, serratus anterior, coracobrachialis and the midsection as a whole.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python main.py -t push-up -vs videos/push-up.mp4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#squat-exercise"&gt;
  &lt;/a&gt;
  Squat Exercise
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jaHwsSkD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/afuz6w350soyn6n7o4up.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jaHwsSkD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/afuz6w350soyn6n7o4up.gif" alt="Squat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Video: &lt;a href="https://www.youtube.com/watch?v=iQrXRTk7KE0"&gt;https://www.youtube.com/watch?v=iQrXRTk7KE0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A squat is a strength exercise in which the trainee lowers their hips from a standing position and then stands back up. During the descent of a squat, the hip and knee joints flex while the ankle joint dorsiflexes; conversely the hip and knee joints extend and the ankle joint plantarflexes when standing up.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python main.py -t squat -vs videos/squat.mp4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#walking-exercise"&gt;
  &lt;/a&gt;
  Walking Exercise
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ol8G7pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eblftjv35sh0lobcbqzj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ol8G7pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eblftjv35sh0lobcbqzj.gif" alt="Walking"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Video: &lt;a href="https://www.youtube.com/watch?v=pPTeSd_GXoc"&gt;https://www.youtube.com/watch?v=pPTeSd_GXoc&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python main.py -t walk -vs videos/walk.mp4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;If you want to detect your movements live with your webcam, you can run the code line below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python main.py -t sit-up
# or python main.py -t pull-up
# or python main.py -t push-up
# or python main.py -t squat
# or python main.py -t walk
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>ai</category>
      <category>python</category>
      <category>deeplearning</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>Good coding attracts new jobs  - Code Inspector Talks!</title>
      <author>leslysandra</author>
      <pubDate>Wed, 28 Apr 2021 23:20:41 +0000</pubDate>
      <link>https://dev.to/codeinspector/good-coding-attracts-new-jobs-code-inspector-talks-3o42</link>
      <guid>https://dev.to/codeinspector/good-coding-attracts-new-jobs-code-inspector-talks-3o42</guid>
      <description>&lt;p&gt;In this episode at &lt;strong&gt;Code Inspector Talks&lt;/strong&gt;, we are having &lt;a href="https://www.linkedin.com/in/rodolfoferro/"&gt;Rodolfo Ferro&lt;/a&gt; as a guest with us to learn about his experience in software development and his advice on &lt;em&gt;good coding practices&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=awAfmZ2zv9E"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VoghQIr0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g6sprli804ysjz89rtcz.png" alt="Chatting with Rodolfo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rodolfo, originally from Mexico, and currently working as a Machine Learning Engineer tells us about his background in mathematics and how he discovered that learning how to code will give him new job opportunities and the chance to contribute to different software projects to the world.&lt;/p&gt;

&lt;p&gt;Since he has been coding on &lt;strong&gt;python&lt;/strong&gt;, he has commit himself to learn more about this language, for example: syntax, types of variables, how to write good functions, and how to write good documentation using &lt;em&gt;doc strings&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;He mentioned these as &lt;strong&gt;good coding practices&lt;/strong&gt; in python:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Think about &lt;em&gt;scalability&lt;/em&gt; how your project coded in python could go beyond first expectations&lt;/li&gt;
&lt;li&gt;Write a code to be used by other people. Contribute to the tech community&lt;/li&gt;
&lt;li&gt;Write down good documentation and every time you update your functions update your documentation as well!&lt;/li&gt;
&lt;li&gt;Testing! testing is important! He has been using &lt;a href="https://docs.pytest.org/en/6.2.x/"&gt;pytest&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;He mentioned some &lt;strong&gt;challenges&lt;/strong&gt; that he has faced while coding in python:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When checking old code from someone's, it is really a challenge to understand it or update it if there is no documentation&lt;/li&gt;
&lt;li&gt;Code refactoring and maintenance, both are challenges themselves! Even more, when code is not readable and not documented&lt;/li&gt;
&lt;li&gt;Generalizations! watch out with generalizations in python, and learn more about the different changes that every new version for python brings.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Moreover, Rodolfo highlighted that time when he was working with a Spanish company as software developer and that few years later, this same company asked him to join them because they really liked a lot how Rodolfo writes code! ü§ì&lt;/p&gt;

&lt;p&gt;We had a great time chatting with Rodolfo! Thank you for the advice and for sharing experiences with us to help us be better coders üòÖ&lt;/p&gt;

&lt;p&gt;Thank you, Code Inspector community, to join us in this talk! More other talks coming soon... üéâ &lt;/p&gt;

&lt;p&gt;|&lt;strong&gt;Watch the full interview in our YouTube Channel&lt;/strong&gt;|&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=awAfmZ2zv9E"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eup8rwtx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://img.youtube.com/vi/awAfmZ2zv9E/0.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>interview</category>
      <category>codequality</category>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Modifying the Vue prototype is "evil monkey-patching"</title>
      <author>Brian Boyko</author>
      <pubDate>Wed, 28 Apr 2021 23:16:05 +0000</pubDate>
      <link>https://dev.to/brianboyko/modifying-the-vue-prototype-is-evil-monkey-patching-5dmi</link>
      <guid>https://dev.to/brianboyko/modifying-the-vue-prototype-is-evil-monkey-patching-5dmi</guid>
      <description>&lt;p&gt;If you're not familiar with 'monkey-patching', it's when you modify the prototype of an existing language feature. Like adding a new method to Array.prototype, or redefining Array.prototype.reduce because it's just slightly more efficient to use lodash's version. &lt;/p&gt;

&lt;p&gt;It's a feature in a lot of high-level languages that use some type of inheritance, specifically Ruby, Python, and (naturally) Javascript. &lt;/p&gt;

&lt;p&gt;But just because you &lt;em&gt;can&lt;/em&gt; do something in Javascript &lt;a href="https://en.wikipedia.org/wiki/Monkey_patch#Pitfalls"&gt;doesn't mean you &lt;em&gt;should&lt;/em&gt;&lt;/a&gt;. Monkey-patching can lead to namespace collisions if two developers have their own methods - and you won't really know "which runs first" until runtime in most cases. (It's also really hard to unit test, since both methods will be tested and get correct assertions in isolation.) Additionally they create a discrepancy between the original source code and observed behavior.  &lt;/p&gt;

&lt;p&gt;Most importantly for the purposes of this article, it's a change that isn't immediately visible to those who use the code after you. You &lt;em&gt;think&lt;/em&gt; you're telling the computer to do one thing, but you're &lt;em&gt;actually&lt;/em&gt; telling the computer to do something else.  That, of course, is how you get bugs. &lt;/p&gt;

&lt;p&gt;Let's switch gears for a moment to the Vue framework.  &lt;/p&gt;




&lt;p&gt;First, I think Vue is great. It is well designed, written, documented. I like the way it's going with Vue 3.0 and the Vue Composition API, I like Vue templates, I like .vue files, I like that it's about 1/3rd the size of React. I like a lot of things about it. &lt;/p&gt;

&lt;p&gt;But if Paulie Walnuts held a gun to my head, and asked me what my favorite framework is, I'd say React.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KtPxb21---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/me3umbirkjwxhayaj2yq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KtPxb21---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/me3umbirkjwxhayaj2yq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the reason is quite simple: Vue gives you &lt;em&gt;a lot of ways to do the same thing&lt;/em&gt;, and not all of those ways are good ways. Computed vs. Watch, callbacks vs. emits, mapGetters vs. mapState vs. this.$store... &lt;/p&gt;

&lt;p&gt;All are equally valid. None of these methods are canonically &lt;em&gt;wrong&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt;. They all &lt;em&gt;work&lt;/em&gt;. This is part of the reason Vue is much easier to learn and get going with quickly than React is. But you start to lose out as the program and the team starts to scale. If you give a team of 10 developers 10 different ways to code something, you will end up with 10 different ways to do the same thing in your codebase, and a lot of highly-coupled code with duplicated logic.    &lt;/p&gt;




&lt;p&gt;At Deverus, where I first started working with Vue in 2017, we hired some (good) outside contractors which put configuration information on Vue.prototype.$config, constants on Vue.prototype.$constants, and all our asynchronous API methods on Vue.prototype.$API. They were probably following one of the many blog posts which suggested this pattern, like &lt;a href="https://www.telerik.com/blogs/api-factories-vue-nuxt"&gt;this one from Telerik&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;But this created a problem - and that problem was that now &lt;em&gt;every&lt;/em&gt; Vue component - even presentational ones that really did no logic - now had access to every API call, had access to every configuration setting, had access to every constant, even if they weren't needed. They also had the ability to redefine them at will. &lt;/p&gt;

&lt;p&gt;The most problematic was the &lt;code&gt;this.$API&lt;/code&gt; methods. If there was a problem, you'd have to search through every component to see what components were using this.$API, see where the data was being stored.  More often than not, multiple calls were being made to the same API method when one would do - data was often duplicated (or worse, duplicated, then became &lt;em&gt;out of sync&lt;/em&gt;) in many different &lt;code&gt;data()&lt;/code&gt; observables of components. &lt;/p&gt;

&lt;p&gt;This wasn't &lt;em&gt;wrong&lt;/em&gt;.  It's considered a &lt;em&gt;valid Vue pattern&lt;/em&gt;. And if you're using this pattern, you're not using Vue &lt;em&gt;wrong&lt;/em&gt;, but for us, it led to these problems. We had to create more style rules (in our case, put all the API calls into the Vuex store, not components, and pass down the data via mapped getters,) and refactor the application so that we could create a more testable application that was easier to add features to.  &lt;/p&gt;

&lt;p&gt;So - that's a bit of a long way round to get to the point of this post - which is to say that while there's no &lt;em&gt;official&lt;/em&gt; best practice guide that says you shouldn't modify, or "monkey-patch" the Vue prototype, &lt;em&gt;I'm&lt;/em&gt; saying that &lt;em&gt;from my experience&lt;/em&gt; you're probably going to have a bad time if you do. &lt;/p&gt;

&lt;p&gt;I suppose that vue prototype modification isn't "monkey-patching" the way that modifying the prototype of, say, Array or Object is.  But once you add the Vue framework to an application, it really does become so integral that the Vue prototype takes on a lot of the same importance as a core language feature. React developers expect React to behave like React every React application they work on.  Vue developers... well, in an ideal world they &lt;em&gt;should&lt;/em&gt; be able to rely on Vue, but because prototype modification is a &lt;em&gt;thing&lt;/em&gt;, they can't always. &lt;/p&gt;

&lt;p&gt;This can be further frustrating because monkey-patching the Vue prototype &lt;em&gt;is&lt;/em&gt; how vue-router and vuex (and a lot of other good plugins) work -- and work well. And it is extremely easy, for example, to get your route params from this.$route.params, compared to the hoops you used to have to jump through passing your parameters to your component with React (though the useRouter hook makes it really easy now).&lt;/p&gt;

&lt;p&gt;I'd like to think that they're exceptions. See, one of the things Vue has going for it is that because it doesn't try to stop you from doing &lt;em&gt;stupid things&lt;/em&gt;, it allows you to do very &lt;em&gt;clever&lt;/em&gt; things as well.  And vue-router and vuex are very clever indeed. &lt;/p&gt;

&lt;p&gt;And I'm not saying that you or your team isn't clever.  But if you're using Vue in production for a mission critical app, changes are you're dealing with things that make your team less clever than a decidicated core of open-source developers making sure that they can rigourously test, type, and develop software over many iterations.  &lt;/p&gt;

&lt;p&gt;A team that doesn't have time to pay off technical debt is going to lose "cleverness". A team being pressured to add a new feature before a deadline is going to lose "cleverness."  It's one of the reasons why open source purists like Eric Stallman believe that &lt;em&gt;all&lt;/em&gt; programming should be open source - a view I don't share, but one that has enough of a point that I can't fault him for holding it. &lt;/p&gt;

&lt;p&gt;So in the vein of "real world" programming for commercial applications (as opposed to open-source or academic purposes), monkey-patching the Vue prototype probably isn't something you want to get in the habit of. &lt;/p&gt;

&lt;p&gt;As always, looking to have a discussion in the comments below - I'm sure my experience wasn't universal, and plenty of people have been clever with Vue in their teams. &lt;/p&gt;

&lt;p&gt;In the meantime, if you want to take a look at some other suggestions I have for keeping large Vue projects organized, checkout my &lt;a href="https://gist.github.com/brianboyko/91fdfb492071e743e389d84eee002342"&gt;styleguide for Deverus (based on Vue 1.0)&lt;/a&gt; and my styleguide for the &lt;a href="https://gist.github.com/brianboyko/6e0af86f71da83a82cd4f074363ce046"&gt;Vue Composition API&lt;/a&gt; back when it was in proposal form.  I'll probably update and combine both and put them here on Dev.to soon.  &lt;/p&gt;




&lt;p&gt;&lt;a href="https://www.flickr.com/photos/scragz/132750805/in/photostream/"&gt;Evil monkey image by Jason Scragz&lt;/a&gt;, used under &lt;a href="https://creativecommons.org/licenses/by/2.0/"&gt;CC-2.0-Attribution&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vue</category>
      <category>frontend</category>
      <category>javascript</category>
      <category>prototypes</category>
    </item>
    <item>
      <title>Semantic HTML Elements: Here are 8 elements to use instead of a div element</title>
      <author>Kingsley Ubah</author>
      <pubDate>Wed, 28 Apr 2021 23:10:17 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/semantic-html-elements-here-are-8-elements-to-use-instead-of-a-div-element-2ijm</link>
      <guid>https://dev.to/ubahthebuilder/semantic-html-elements-here-are-8-elements-to-use-instead-of-a-div-element-2ijm</guid>
      <description>&lt;p&gt;&lt;strong&gt;Hello again.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Last time out we did a little  &lt;a href="https://dev.to/ubahthebuilder/learn-react-in-plain-english-3php"&gt;Introduction into React&lt;/a&gt; . Today I am slightly shifting the focus over to HTML.  &lt;/p&gt;

&lt;p&gt;HTML stands for &lt;strong&gt;Hyper Text Markup Language&lt;/strong&gt;. You can represent all elements of a text document with a relevant tag in HTML. However, until the release of the HTML5 standard there were no elements to represent certain areas of a document.&lt;/p&gt;

&lt;p&gt;As a result, you would often find mark-ups such as div class=‚Äùfooter‚Äù or div class=‚Äùnavigation‚Äù used to represent a footer and a navigation respectively. While this worked, it wasn't a &lt;strong&gt;semantically ideal&lt;/strong&gt; use case. When I say &lt;strong&gt;semantic&lt;/strong&gt;, I mean that each HTML element should represent it‚Äôs equivalent in a &lt;strong&gt;meaningful way&lt;/strong&gt;. Thankfully, the coming of the HTML5 standard also brought about &lt;strong&gt;semantic elements&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What is a semantic element?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A document has a footer section. Instead of using:  div class=‚Äùfooter‚Äù to represent the footer in the HTML document, we‚Äôre now able to use a dedicated footer element.&lt;/p&gt;

&lt;p&gt;The coming of semantic elements brought better meaning to our HTML markup and allowed us reason about HTML elements in a more intuitive and sensible way.&lt;/p&gt;

&lt;p&gt;Without further ado, below are 10 elements to use in place of the div element:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#article"&gt;
  &lt;/a&gt;
  Article
&lt;/h3&gt;

&lt;p&gt;An article can represent a blog post or a forum post. Before the tag was introduced, you‚Äôd do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class=‚Äùfirst-article‚Äù&amp;gt;
&amp;lt;h2&amp;gt;1st article&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;This is the first article from Kingsley&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, it‚Äôs all meaningful:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;article&amp;gt;
&amp;lt;h2&amp;gt;1st article&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;This is the first article from Kingsley
&amp;lt;/article&amp;gt;

&amp;lt;article&amp;gt;
&amp;lt;h2&amp;gt;2nd article&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;This is the first article from Kingsley.&amp;lt;/p&amp;gt;
&amp;lt;/article&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#footer"&gt;
  &lt;/a&gt;
  Footer
&lt;/h3&gt;

&lt;p&gt;The footer tag is used to represent the bottom section of the page. &lt;/p&gt;

&lt;p&gt;Before:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt; div class=‚Äùfooter‚Äù&amp;gt;
  &amp;lt;p&amp;gt;Kingsley Ubah&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;&amp;lt;a href="mailto:kingsley@example.com"&amp;gt;kingsley@example.com&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;footer&amp;gt;
  &amp;lt;p&amp;gt;Kingsley Ubah&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;&amp;lt;a href="mailto:kingsley@example.com"&amp;gt;kingsley@example.com&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/footer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#header"&gt;
  &lt;/a&gt;
  Header
&lt;/h3&gt;

&lt;p&gt;Header represents the area for some form of introductory content, such as the title of an article.&lt;/p&gt;

&lt;p&gt;Before:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class=‚Äùarticle‚Äù&amp;gt;
  &amp;lt;div class=‚Äùheader‚Äù&amp;gt;&amp;gt;
    &amp;lt;h1&amp;gt;React Definition&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;What is React?&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;p&amp;gt;React is a JavaScript framework...
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;article&amp;gt;
  &amp;lt;header&amp;gt;
    &amp;lt;h1&amp;gt;React Definition&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;What is React?&amp;lt;/p&amp;gt;
  &amp;lt;/header&amp;gt;
  &amp;lt;p&amp;gt;React is a JavaScript framework...
&amp;lt;/article&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#nav"&gt;
  &lt;/a&gt;
  Nav
&lt;/h3&gt;

&lt;p&gt;Nav is used to hold a set of Navigation links.&lt;/p&gt;

&lt;p&gt;Before:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class=‚Äùnav‚Äù&amp;gt;
  &amp;lt;a href="/html/"&amp;gt;HTML&amp;lt;/a&amp;gt; |
  &amp;lt;a href="/css/"&amp;gt;CSS&amp;lt;/a&amp;gt; |
  &amp;lt;a href="/js/"&amp;gt;JavaScript&amp;lt;/a&amp;gt; |
 &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;nav&amp;gt;
  &amp;lt;a href="/html/"&amp;gt;HTML&amp;lt;/a&amp;gt; |
  &amp;lt;a href="/css/"&amp;gt;CSS&amp;lt;/a&amp;gt; |
  &amp;lt;a href="/js/"&amp;gt;JavaScript&amp;lt;/a&amp;gt; |
  &amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#main"&gt;
  &lt;/a&gt;
  Main
&lt;/h3&gt;

&lt;p&gt;This defines the main content of a document.&lt;/p&gt;

&lt;p&gt;Before:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class=‚Äùmain‚Äù&amp;gt;
  &amp;lt;p&amp;gt; This is the main text &amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;main&amp;gt;
  &amp;lt;p&amp;gt; This is the main text &amp;lt;/p&amp;gt;
&amp;lt;/main&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#section"&gt;
  &lt;/a&gt;
  Section
&lt;/h3&gt;

&lt;p&gt;As it‚Äôs name suggests, it defines a section in a page&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class=‚Äùsection-one‚Äù&amp;gt;
&amp;lt;h1&amp;gt;First Section&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;This is the first section&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div class=‚Äùsection-two‚Äù&amp;gt;
&amp;lt;h1&amp;gt;Second Section&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;This is the second section&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;section&amp;gt;
&amp;lt;h1&amp;gt;First Section&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;This is the first section&amp;lt;/p&amp;gt;
&amp;lt;/section&amp;gt;


&amp;lt;section&amp;gt;
&amp;lt;h1&amp;gt;Second Section&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;This is the second section&amp;lt;/p&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#figure-and-figcaption"&gt;
  &lt;/a&gt;
  Figure and Figcaption
&lt;/h3&gt;

&lt;p&gt;The figure tag specifies self-contained content, such as illustrations, code blocks, diagrams, photos etc.&lt;br&gt;
The figcaption defines a caption for the figure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;figure&amp;gt;
  &amp;lt;img src="ubahthebuilder.jpg" alt="This is my blog"&amp;gt;
  &amp;lt;figcaption&amp;gt;Fig1. ‚Äì Blog Home&amp;lt;/figcaption&amp;gt;
&amp;lt;/figure&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#aside"&gt;
  &lt;/a&gt;
  Aside
&lt;/h3&gt;

&lt;p&gt;The aside element defines some content which will be placed beside another content, kind of like a sidebar,&lt;/p&gt;

&lt;p&gt;Before:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p&amp;gt;This content is the main content which will be placed at the center&amp;lt;/p&amp;gt;

&amp;lt;div class=‚Äùsidebar‚Äù&amp;gt;
&amp;lt;h2&amp;gt;Side Content&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;This content will be aligned to the side&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p&amp;gt;This content is the main content which will be placed at the center&amp;lt;/p&amp;gt;

&amp;lt;aside&amp;gt;
&amp;lt;h2&amp;gt;Side Content&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;This content will be aligned to the side&amp;lt;/p&amp;gt;
&amp;lt;/aside&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;P/S: I recently launched my Beginners Guide to Web development for Absolute Beginners.  &lt;a href="https://gumroad.com/l/WebDevBeginners"&gt;Check it out&lt;/a&gt; .&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These 8 are some of the semantic elements to be used in lieu of the div tag. I hope you found this post enlightening.&lt;/p&gt;

&lt;p&gt;Make sure to follow this blog for more informative posts on web development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;See you soon.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>programming</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Mi experiencia participando en la NgConf 2021</title>
      <author>GabrielOmar</author>
      <pubDate>Wed, 28 Apr 2021 22:36:09 +0000</pubDate>
      <link>https://dev.to/gabrielomarq/mi-experiencia-participando-en-la-ngconf-2021-3m7g</link>
      <guid>https://dev.to/gabrielomarq/mi-experiencia-participando-en-la-ngconf-2021-3m7g</guid>
      <description>&lt;p&gt;La NgConf es la conferencia mundial de Angular que se organiza en Estados Unidos. Este a√±o, por la coyuntura del Covid-19, el evento pas√≥ a ser virtual. Sin duda, esto permiti√≥ que mucha m√°s gente pueda inscribirse como speaker y/o participante.&lt;/p&gt;

&lt;p&gt;En este evento se juntan varios de los mejores desarrolladores del mundo que trabajan en empresas como Google, Amazon, Facebook, Uber, Apple, Microsoft, etc. Y es una gran oportunidad para aprender de ellos.&lt;/p&gt;

&lt;p&gt;Mi experiencia fue bastante buena ya que pude participar en una &lt;strong&gt;lightning  talk&lt;/strong&gt; con un tema que tiene bastante acogida por varios desarrolladores: &lt;strong&gt;Angular and Stencil working together&lt;/strong&gt;. Aqu√≠ pude explicar de como estas tecnolog√≠as trabajan juntas y que beneficios traen a nuestras aplicaciones. La sesi√≥n fue grabada y estar√° en los canales oficiales de la NgConf en unas semanas. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o1Stwn5O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media-exp1.licdn.com/dms/image/C4D22AQFVS5dL3Kd8Tw/feedshare-shrink_800/0/1619119301633%3Fe%3D1622678400%26v%3Dbeta%26t%3DNog7kHD-3wRd9cflm2BNAhHi_RrEeWK5ELZRKtysSJQ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o1Stwn5O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media-exp1.licdn.com/dms/image/C4D22AQFVS5dL3Kd8Tw/feedshare-shrink_800/0/1619119301633%3Fe%3D1622678400%26v%3Dbeta%26t%3DNog7kHD-3wRd9cflm2BNAhHi_RrEeWK5ELZRKtysSJQ" alt="NgConf lightning talks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finalmente, destacar tambi√©n mi experiencia como participante, aprend√≠ mucho de las tendencias emergentes con diferentes herramientas tecnol√≥gicas como Angular, Typescript, etc. Sin duda, una experiencia que volver√≠a a repetir y espero poder volver a ser speaker en la siguiente NgConf üöÄüòé&lt;/p&gt;

</description>
      <category>angular</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>typescript</category>
    </item>
    <item>
      <title>My Experience Building a PWA App with Svelte JS</title>
      <author>Arthur Germano</author>
      <pubDate>Wed, 28 Apr 2021 22:15:30 +0000</pubDate>
      <link>https://dev.to/arthurgermano/my-experience-building-a-pwa-app-with-svelte-js-4pme</link>
      <guid>https://dev.to/arthurgermano/my-experience-building-a-pwa-app-with-svelte-js-4pme</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ts1cylFj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oyc0iza685q4nefbnv8a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ts1cylFj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oyc0iza685q4nefbnv8a.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;small&gt;App built with SvelteJS&lt;/small&gt;&lt;/center&gt;
&lt;br&gt;

&lt;p&gt;Hi, I would like to share a few words of what was my experience building an front-end application with SvelteJS. And a spoiler alert‚Ä¶ was awesome!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;The decision of building the app was smooth, I always wanted to create something that was not related to my work, something only mine. However with our routines and work we not always can.&lt;/p&gt;

&lt;p&gt;My daily routine was go to work, do some workout on the gym, maybe go to the groceries shop and by the time I got home I need to plan and prepare everything for the next day and finally when I stop the day is over and I don‚Äôt want to get near of a screen.&lt;/p&gt;

&lt;p&gt;But since the covid, things have changed, I started to work from home and all of the sudden I had time to do some personal project.&lt;/p&gt;

&lt;p&gt;So what to do? There are so many apps developed that seem that all the ideas in the world are implemented already.&lt;/p&gt;

&lt;p&gt;Since is my first project, by my self ‚Äî for my self, I did an app to help me control and maintain my finances. I confess that I already use one, but I was displeased with some features and I thought.. hey maybe I can do it better =).&lt;/p&gt;

&lt;p&gt;So I have the project, I know what I need and want.. so let‚Äôs start it. So I did. Since I had more time I started to work after my real job, and since I stopped to go to the gym ‚Äî because of covid =( ‚Äî I had a couple of hours in the day to do it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-project-finance-notes-pwa-webapp"&gt;
  &lt;/a&gt;
  The Project ‚Äî Finance Notes PWA ‚Äî WebApp
&lt;/h2&gt;

&lt;p&gt;I started small by choosing which frameworks to use, planning which technologies to pick for the back-end and it took me almost a month to define and choose what to use.&lt;/p&gt;

&lt;p&gt;In this time I did some mock-ups, a little bit of testing, asked for some opinions in this time to make sure I was making the right decisions, not that is the right way but I needed to feel confident enough that my choices would not backfire.&lt;/p&gt;

&lt;p&gt;So I ended up with the following technologies:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eMp_gWdc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9k9q0ps1nxjcddb3i5nn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eMp_gWdc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9k9q0ps1nxjcddb3i5nn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;small&gt;Technologies used in the project&lt;br&gt;
&lt;/small&gt;&lt;/center&gt;
&lt;br&gt;

&lt;p&gt;I will not describe all the technologies but mainly SvelteJS. The other technologies were indeed the right choices.&lt;/p&gt;

&lt;p&gt;I really liked how Fastify worked. My first experience with it was not so great because I tried it in 2019 or 2018 or earlier I don‚Äôt remember but it was not OK.. a lot of issues and some features were complicated to make work. But now I truly recommend it. For monolith projects like this one that not justify microservices it is really fast.&lt;/p&gt;

&lt;p&gt;PWA was a challenge for me. I did an udemy course a long time ago and I confess I didn‚Äôt remember much. I really liked PWA it makes all in one nicelly. Not having to publish in some store is nice. But still understand the concepts it is a little bit challenging.&lt;/p&gt;

&lt;p&gt;There is plenty of documentation on the internet but mostly do not work well at first or it is out of date. If you want to implement PWA it is crucial to understand its flow. Understand that and you will be just fine! Good look with service-workers =).&lt;/p&gt;

&lt;blockquote&gt;
&lt;b&gt;Just a reminder:&lt;/b&gt; to make PWA work we have to go HTTPS!
But nowadays we have Let‚Äôs Encrypt ‚Äî really easy to start using our new generated certificates! ‚Äî It took me a while to figure it out, but seriously it is not that difficult =)
&lt;/blockquote&gt;

&lt;p&gt;All the other technologies are amazing and really fun to work with. All of them delivers what is promised, Jaeger, Docker, MongoDB, Redis and of course NodeJS.&lt;/p&gt;

&lt;p&gt;I had to study and learn a lot for this project to work and I almost gave up. The technology area is overwhelming. To keep up with all of it we have to study in a everyday basis.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sveltejs"&gt;
  &lt;/a&gt;
  SvelteJS
&lt;/h2&gt;

&lt;p&gt;The great star, in my opinion, is SvelteJS. I have worked with VueJS and it is really nice too. I did not worked with AngularJS or React and I didn‚Äôt want to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why not ?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well, first AngularJS remember for me Java. We have a thousand configuration files just to start with it. I don‚Äôt like that. We spend a lot of time to do it.&lt;/p&gt;

&lt;p&gt;React in the other hand seems a little bit nicer but we have to write a lot of code just to get things done to. It is like VueJS. A lot of places repeating myself makes coding a little tiring and boring.&lt;/p&gt;

&lt;blockquote&gt;
Anyway it is just my opinion and my experience with this technologies.
&lt;/blockquote&gt;

&lt;p&gt;Now SvelteJS is easy, fast and coding with it is really really nice. It so well made, its store works wonderfully.&lt;/p&gt;

&lt;p&gt;It is productive, much much more productive than VueJS, I declare it once and reuse in any other place ‚Äî I don‚Äôt have to tell to the file that I want to use and declare it in two thousand different places I just import what I want. With all of its features seems we are just using plain javascript in the end.&lt;/p&gt;

&lt;p&gt;The animations, properties anything you can think of just works! So here it is my applause. Coding with SvelteJS I guarantee it is really nice and fun!&lt;/p&gt;

&lt;p&gt;One last thing the code written is kept organized! Yes. I don‚Äôt have a file with a thousand lines. No. The other technologies are good but SvelteJS is better in that way too.&lt;/p&gt;

&lt;p&gt;If I can say something that I found difficult about SvelteJS is that there is a lot of good frameworks or libraries supporting it. Framework7 came to the rescue for that.&lt;/p&gt;

&lt;p&gt;When I started the project there weren‚Äôt good SPA routers. Because I have chosen to go SPA not using SSR. So I chose to use Framework7 which is a great framework. Anything you need it can provide and help me a lot during the project. I truly recommend it!&lt;/p&gt;

&lt;p&gt;In my experience less is better. Since Framework7 was practically doing a lot things for me it was OK to use it. But I don‚Äôt like to use a whole framework and just focus on the little things using just what I need.&lt;/p&gt;

&lt;p&gt;Since I really liked to work with SvelteJS I decided to create a router for it. I don‚Äôt know if it is perfect to use yet. But it reunites everything I think that a router should have!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scr-svelte-client-router"&gt;
  &lt;/a&gt;
  SCR ‚Äî Svelte Client Router
&lt;/h2&gt;

&lt;p&gt;&lt;b&gt;GIT&lt;/b&gt;: &lt;a href="https://github.com/arthurgermano/svelte-client-router"&gt;https://github.com/arthurgermano/svelte-client-router&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;NPM:&lt;/b&gt; &lt;a href="https://www.npmjs.com/package/svelte-client-router"&gt;https://www.npmjs.com/package/svelte-client-router&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Test it:&lt;/b&gt; &lt;a href="https://arthurgermano.github.io/svelte-client-router/#/svelte-client-router"&gt;https://arthurgermano.github.io/svelte-client-router/#/svelte-client-router&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finance-notes-pwa-app"&gt;
  &lt;/a&gt;
  Finance Notes PWA App
&lt;/h2&gt;

&lt;p&gt;So almost one year later I started and like I said almost giving up. I finished the project. Spend some money hiring a VPN server. Had to learn a lot to configure and secure it.&lt;/p&gt;

&lt;p&gt;If you want to see it visit:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://financenotes.com.br/"&gt;Finance Notes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that is it! Thanks for reading =)&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>pwa</category>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Use Destructuring Assignment to Assign Variables from Nested Objects</title>
      <author>Randy Rivera</author>
      <pubDate>Wed, 28 Apr 2021 22:10:25 +0000</pubDate>
      <link>https://dev.to/rthefounding/use-destructuring-assignment-to-assign-variables-from-nested-objects-28km</link>
      <guid>https://dev.to/rthefounding/use-destructuring-assignment-to-assign-variables-from-nested-objects-28km</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Let's take this for example:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const LOCAL_FORECAST = {
  yesterday: { low: 61, high: 75 },
  today: { low: 64, high: 77 },
  tomorrow: { low: 68, high: 80 }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Here's how to extract the values of object properties and assign them to variables with the same name:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { today: { low, high }} = LOCAL_FORECAST;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;And here's how you can assign an object properties' values to variables with different names:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { today: { low: lowToday, high: highToday }} = LOCAL_FORECAST;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(lowToday); will display 64
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We just replace the two assignments with an equivalent destructuring assignment. It should still assign the variables lowToday and highToday the values of today.low and today.high from the LOCAL_FORECAST object.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>devops</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Array Methods</title>
      <author>James Cox</author>
      <pubDate>Wed, 28 Apr 2021 22:08:56 +0000</pubDate>
      <link>https://dev.to/jamesncox/array-methods-33ii</link>
      <guid>https://dev.to/jamesncox/array-methods-33ii</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Let's discuss a few common JavaScript array methods seen regularly in React.&lt;/p&gt;

&lt;p&gt;But first, who is this post for? If you are new to JavaScript and/or React, and maybe unsure what you need to know to get started. This post is Part II in a series called Essential JavaScript Building Blocks for React, and we will take a look at several array methods, what they do, and how we use them in React.&lt;/p&gt;

&lt;p&gt;JavaScript has A LOT of array methods. This &lt;a href="https://medium.com/@mandeepkaur1/a-list-of-javascript-array-methods-145d09dd19a0"&gt;handy article&lt;/a&gt; by Mandeep Kaur briefly describes 20 different array methods.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EDYXtBjD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lq9zjpxae0nmzs4v717m.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EDYXtBjD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lq9zjpxae0nmzs4v717m.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This post, however, covers four array methods in more detail:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;.map()&lt;/li&gt;
&lt;li&gt;.filter()&lt;/li&gt;
&lt;li&gt;.find()&lt;/li&gt;
&lt;li&gt;.reduce()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And will reference a CodeSandbox that I created specifically for this series, with working examples of each array method.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/fruits-array-methods-9ycxn"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#map"&gt;
  &lt;/a&gt;
  .map()
&lt;/h2&gt;

&lt;p&gt;Others may disagree, but I use the map() array method more frequently than any other. What does map() do? According to the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"&gt;MDN Web Docs&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The map() method creates a new array populated with the results of calling a provided function on every element in the calling array.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ugh. If you are anything like me, "doc language" isn't the easiest to understand, especially when you're a newbie. &lt;/p&gt;

&lt;p&gt;According to me:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;map() takes an existing array, does something to each item in that array, and returns an entirely new array of the EXACT SAME LENGTH, a key attribute of map(). &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's perform a &lt;code&gt;map()&lt;/code&gt; on this &lt;code&gt;coolArray&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;coolArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newerCoolerArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;coolArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newerCoolerArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coolArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that when you &lt;code&gt;console.log(coolArray)&lt;/code&gt; it still holds the original values &lt;code&gt;[1, 2, 3, 4, 5]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It's important to reiterate that map() always returns a new array of the exact same length as the original.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;coolArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;newerCoolerArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#map-in-react"&gt;
  &lt;/a&gt;
  .map() in React
&lt;/h2&gt;

&lt;p&gt;So how does map() pertain to React? A common pattern you will see with React is "mapping" data to various HTML elements, in order to display information to the user.&lt;/p&gt;

&lt;p&gt;Let's check out that &lt;a href="https://codesandbox.io/s/fruits-array-methods-9ycxn?file=/src/App.js"&gt;CodeSandbox&lt;/a&gt;! In &lt;code&gt;App.js&lt;/code&gt; I created an array called &lt;code&gt;fruits&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red apple üçé&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;green apple üçè&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;orange üçä&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;strawberry üçì&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;kiwi ü•ù&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;banana üçå&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pineapple üçç&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;peach üçë&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;watermelon üçâ&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mango ü•≠&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pear üçê&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;grapes üçá&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cherries üçí&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lemon üçã&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;melon üçà&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;coconut ü••&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which I pass down to my array method components, including &lt;code&gt;Map.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;method-header&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;FRUITS&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="nx"&gt;has&lt;/span&gt; &lt;span class="nx"&gt;been&lt;/span&gt; &lt;span class="nx"&gt;mapped&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;paragraph&lt;/span&gt; &lt;span class="nx"&gt;tags&lt;/span&gt; &lt;span class="nx"&gt;below&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;method-description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="nx"&gt;iterates&lt;/span&gt; &lt;span class="nx"&gt;over&lt;/span&gt; &lt;span class="nx"&gt;each&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fruits&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;applies&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;same&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="sr"&gt;/logic to each item. Here we are creating a new paragraph with the p tag for each fruit in our array&lt;/span&gt;&lt;span class="err"&gt;.
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;list-card&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;))}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The key part of this component is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;list-card&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;))}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's break it down: inside a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; we grab the &lt;code&gt;fruits&lt;/code&gt; array passed down as props from &lt;code&gt;App.js&lt;/code&gt;, and perform our map() to iterate over each &lt;code&gt;fruit&lt;/code&gt; in the array, creating a new &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; for each item. Remember that map() accepts a function that it applies to each item in the array. In this case the function is simply us returning a &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag. &lt;/p&gt;

&lt;p&gt;If you navigate to the &lt;a href="https://9ycxn.csb.app/"&gt;CodeSandbox link&lt;/a&gt; and select the ".map()" button, you will see our &lt;code&gt;&amp;lt;div className="list-card"&amp;gt;&lt;/code&gt; populated with a new line for each fruit! Cool, huh?&lt;/p&gt;

&lt;p&gt;With map() you can easily render similarly grouped data to your user. If the array updates somewhere else, it will update in your component! Mapping gives you a handy way to display information without having to manually add a new HTML element for each entry.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#filter"&gt;
  &lt;/a&gt;
  .filter()
&lt;/h2&gt;

&lt;p&gt;What if you want to display specific items in your array, and not the whole kit and caboodle?&lt;/p&gt;

&lt;p&gt;Enter the filter() method, a very powerful JavaScript function that you will see quite a lot. &lt;/p&gt;

&lt;p&gt;From the MDN Web Docs (yayyyy):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The filter() method creates a new array with all elements that pass the test implemented by the provided function.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And my definition:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;filter() operates on an existing array, evaluates each item in the array, and whichever items meet the criteria that you define, adds those items to a new array. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Welcome back, &lt;code&gt;coolArray&lt;/code&gt;!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;coolArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filteredCoolArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;coolArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filteredCoolArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coolArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So what is happening here? filter() takes a function &lt;code&gt;(number) =&amp;gt; number &amp;gt; 3&lt;/code&gt; and uses that function to check against each item (number) in the array. Our function asks is the current item in the array greater than 3?&lt;/p&gt;

&lt;p&gt;If you were to &lt;code&gt;console.log&lt;/code&gt; inside the filter() you would see that each item is being evaluated to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. Any item that evaluates to &lt;code&gt;true&lt;/code&gt; is added to the new array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;coolArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="c1"&gt;// 1 is not greater than 3&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="c1"&gt;// 2 is not greater than 3&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="c1"&gt;// 3 is not greater than 3&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;// 4 is greater than 4&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;// 5 is greater than 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And it's pretty obvious here, but we still want to highlight that the main difference between map() and filter() is that almost always filter() returns a new, SHORTER array than the orginal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;coolArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

&lt;span class="nx"&gt;filteredCoolArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="nx"&gt;coolArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;filteredCoolArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#filter-in-react"&gt;
  &lt;/a&gt;
  .filter() in React
&lt;/h2&gt;

&lt;p&gt;Take a look at &lt;a href="https://codesandbox.io/s/fruits-array-methods-9ycxn?file=/src/Filter.js"&gt;Filter.js&lt;/a&gt;. There is a lot going on here, especially if you're new to React. But let's focus on line 20:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filteredByLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside &lt;code&gt;props.fruits.filter()&lt;/code&gt; we pass the function &lt;code&gt;(fruit) =&amp;gt; fruit.length &amp;gt; 10&lt;/code&gt; which asks, "Is the current fruit greater than 10 characters long?"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filteredByLength&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red apple üçé&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;green apple üçè&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;strawberry üçì&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pineapple üçç&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;watermelon üçâ&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cherries üçí&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;filteredByLength&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="c1"&gt;// six fruits evaluate to "true" and make it into the new array&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From there we can use our favorite map() method on the &lt;code&gt;filteredByLength&lt;/code&gt; array to render only the 6 fruits that are longer than 10 characters:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;list-card&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;filteredByLength&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;  &lt;span class="p"&gt;})}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next I demonstrate how to combine filter() and includes().&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;appleFilter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which gives us three fruits:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;red&lt;/span&gt; &lt;span class="nx"&gt;apple&lt;/span&gt; &lt;span class="err"&gt;üçé&lt;/span&gt;
&lt;span class="nx"&gt;green&lt;/span&gt; &lt;span class="nx"&gt;apple&lt;/span&gt; &lt;span class="err"&gt;üçè&lt;/span&gt;
&lt;span class="nx"&gt;pineapple&lt;/span&gt; &lt;span class="err"&gt;üçç&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And similarly mapped to &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags like the &lt;code&gt;filteredByLength&lt;/code&gt; array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;list-card&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;appleFilter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;  &lt;span class="p"&gt;})}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly, I wired up a simple form that stores a user's input into local state named &lt;code&gt;query&lt;/code&gt;, and calls a function &lt;code&gt;findFruit()&lt;/code&gt; on submit, which contains a call to &lt;code&gt;setFilteredFruits&lt;/code&gt; that holds a filter() with &lt;code&gt;query&lt;/code&gt; dynamically updating the includes() method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;findFruit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setFilteredFruits&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setFilteredFruits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can see in &lt;a href="https://9ycxn.csb.app/"&gt;real time&lt;/a&gt; that when you select the filter() tab, there is an input at the bottom. Type in a character or two and hit submit. This is essentially how a search function works!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#find"&gt;
  &lt;/a&gt;
  .find()
&lt;/h2&gt;

&lt;p&gt;Sometimes when you are working with an array, you want only one matching item. &lt;/p&gt;

&lt;p&gt;From &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find"&gt;MDN Web Docs&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The find() method returns the value of the first element in the provided array that satisfies the provided testing function. If no values satisfy the testing function, undefined is returned.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And my defintion:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;find() searches through an existing array, checking each item in the array against a function that you provide, and the FIRST item that returns &lt;code&gt;true&lt;/code&gt; is returned. At this point find() stops checking for any more matches.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's view an example with &lt;code&gt;coolArray&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;coolArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;greaterThanTwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;coolArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;greaterThanTwo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;3&lt;/code&gt; is the first item in the array that satisfies the logic &lt;code&gt;number =&amp;gt; number &amp;gt; 2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And confirming that find() returns the first item that satisfies &lt;code&gt;true&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;coolArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="c1"&gt;// 1 is not greater than 2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="c1"&gt;// 2 is not greater than 2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;// 3 is greater than 2 &amp;lt;-- RETURNED&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;// 4 is greater than 2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;// 5 is greater than 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#find-in-react"&gt;
  &lt;/a&gt;
  .find() in React
&lt;/h2&gt;

&lt;p&gt;When working with React, you often render specific data based on specific needs/requirements. Like we saw with filter(), we rendered &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags of fruits that met a certain requirement.&lt;/p&gt;

&lt;p&gt;Similarly, you may want to show only the first matching item from an array. &lt;/p&gt;

&lt;p&gt;In the Codesandbox, under the ".find()" tab, I copy/paste the input form and functions from &lt;code&gt;Filter.js&lt;/code&gt; into &lt;code&gt;Find.js&lt;/code&gt; and change the filter() method to find().&lt;/p&gt;

&lt;p&gt;Now when a user types in a single character, a few, or the entire matching phrase, only one fruit will ever be returned. The first match will always be whatever comes first in the array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red apple üçé&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;green apple üçè&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;orange üçä&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;strawberry üçì&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;kiwi ü•ù&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;banana üçå&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pineapple üçç&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;peach üçë&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;watermelon üçâ&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mango ü•≠&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pear üçê&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;grapes üçá&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cherries üçí&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lemon üçã&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;melon üçà&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;coconut ü••&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;findAFruit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fruit&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;findAFruit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red apple üçé&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even though three of our fruits contain the characters "apple", &lt;code&gt;"red apple üçé"&lt;/code&gt; is the first matching item in our &lt;code&gt;fruits&lt;/code&gt; array.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mental-break-time"&gt;
  &lt;/a&gt;
  mental break time
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3U4TcpRq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdyg5jljrn663tadye3a.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3U4TcpRq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdyg5jljrn663tadye3a.gif" alt="Relaxing gif of ocean waves under a pier at sunset"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's take a moment to enjoy this relaxing gif of a sunset over an ocean pier. We're about to take a look at our final array method, &lt;code&gt;.reduce()&lt;/code&gt; and it's a doozy. Take as long as you need. When you are feeling thoroughly relaxed, we'll dive in...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reduce"&gt;
  &lt;/a&gt;
  .reduce()
&lt;/h2&gt;

&lt;p&gt;The reduce() method is incredibly powerful, but can be intimidating to beginners. I am STILL intimidated sometimes! The most important thing to remember about reduce() is it operates on every single item in an array, and returns a single value. In other words, it takes all the items in your array and REDUCES them down to one single item. reduce() gives you a lot of control on how you can do achieve the desired end result.&lt;/p&gt;

&lt;p&gt;From the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce"&gt;MDN Web Docs&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The reduce() method executes a reducer function (that you provide) on each element of the array, resulting in a single output value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Check out this example with &lt;code&gt;coolArray&lt;/code&gt; to reduce all the numbers to a single value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;coolArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reduceCoolArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;coolArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;accumulator&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;currentValue&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reduceCoolArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;

&lt;span class="c1"&gt;// Each argument's current value as it steps through the array:&lt;/span&gt;
&lt;span class="c1"&gt;// Pass 1. accumulator = 0, currentValue = 1, return value = 1. &lt;/span&gt;
&lt;span class="c1"&gt;// Pass 2. accumulator = 1, currentValue = 2, return value = 3. &lt;/span&gt;
&lt;span class="c1"&gt;// Pass 3. accumulator = 3, currentValue = 3, return value = 6.&lt;/span&gt;
&lt;span class="c1"&gt;// Pass 4. accumulator = 6, currentValue = 4, return value = 10.&lt;/span&gt;
&lt;span class="c1"&gt;// Pass 5. accumulator = 10, currentValue = 5 final return value = 15.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whew. A lot to unpack here. According to the MDN docs:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The reducer function takes four arguments&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Accumulator&lt;/li&gt;
&lt;li&gt;Current Value&lt;/li&gt;
&lt;li&gt;Current Index&lt;/li&gt;
&lt;li&gt;Source Array&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Your reducer function's returned value is assigned to the accumulator, whose value is remembered across each iteration throughout the array, and ultimately becomes the final, single resulting value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For now, we will just focus on the Accumulator and Current Value arguments.&lt;/p&gt;

&lt;p&gt;Let's break down the above code snippet:&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;0&lt;/code&gt; at the end of the provided function is the initial value at which the accumulator begins. If we change the &lt;code&gt;initialValue&lt;/code&gt; to something else, the accumulator begins at that value and we will receive a different final output value.&lt;/p&gt;

&lt;p&gt;(If there is no &lt;code&gt;initialValue&lt;/code&gt;, the accumulator initializes as the first item in the array).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;coolArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;startAt100&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;coolArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;accumulator&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;currentValue&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;startAt100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt;

&lt;span class="c1"&gt;// The value of each argument during the iteration process:&lt;/span&gt;
&lt;span class="c1"&gt;// Pass 1. accumulator = 100, currentValue = 1, return value = 101. &lt;/span&gt;
&lt;span class="c1"&gt;// Pass 2. accumulator = 101, currentValue = 2, return value = 103. &lt;/span&gt;
&lt;span class="c1"&gt;// Pass 3. accumulator = 103, currentValue = 3, return value = 106.&lt;/span&gt;
&lt;span class="c1"&gt;// Pass 4. accumulator = 106, currentValue = 4, return value = 110.&lt;/span&gt;
&lt;span class="c1"&gt;// Pass 5. accumulator = 110, currentValue = 5 final return value = 115.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that the return value from the previous iteration/call becomes the new &lt;code&gt;accumulator&lt;/code&gt; value.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reduce-in-react"&gt;
  &lt;/a&gt;
  .reduce() in React
&lt;/h2&gt;

&lt;p&gt;Okay, time to be honest with y'all. I had a difficult time thinking of a good use case for the reduce() method on our &lt;code&gt;fruits&lt;/code&gt; array. &lt;/p&gt;

&lt;p&gt;Thankfully my friend &lt;a href="https://twitter.com/katherinecodes"&gt;Katherine Peterson&lt;/a&gt; gave me the idea to transform the array of fruits into a single object with the fruit name as the &lt;code&gt;key&lt;/code&gt; and its corresponding emoji as the &lt;code&gt;value&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Kind of like this &lt;code&gt;cuteAnimals&lt;/code&gt; object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;cuteAnimals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;hedgehog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;ü¶î&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;chipmunk&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;üêøÔ∏è&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;hamster&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;üêπ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Navigate to the &lt;a href="https://codesandbox.io/s/fruits-array-methods-9ycxn?file=/src/Reduce.js"&gt;Reduce.js&lt;/a&gt; file and look at lines &lt;code&gt;6-12&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruitsObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruitName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruitEmoji&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fruitName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fruitEmoji&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the &lt;code&gt;initialValue&lt;/code&gt; is set to an object, &lt;code&gt;{}&lt;/code&gt;. If you recall, reduce() returns a single value. While an object can contain an infinite amount of information, it is still considered a single object/value.&lt;/p&gt;

&lt;p&gt;Let's break it down:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// remove the emoji, keeping only the fruit name&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruitName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// similarly, remove the fruit name, keeping only the emoji&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruitEmoji&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// create an object that updates with each pass of the accumulator&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// set the object's key to fruitName and value to fruitEmoji&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fruitName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fruitEmoji&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// finally return the obj&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can &lt;code&gt;console.log&lt;/code&gt; our &lt;code&gt;fruitsObj&lt;/code&gt; object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;red apple: &lt;span class="s2"&gt;"üçé"&lt;/span&gt;, green apple: &lt;span class="s2"&gt;"üçè"&lt;/span&gt;, orange: &lt;span class="s2"&gt;"üçä"&lt;/span&gt;, strawberry: &lt;span class="s2"&gt;"üçì"&lt;/span&gt;, kiwi: &lt;span class="s2"&gt;"ü•ù"&lt;/span&gt;‚Ä¶&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="go"&gt;red apple: "üçé"
green apple: "üçè"
orange: "üçä"
strawberry: "üçì"
kiwi: "ü•ù"
banana: "üçå"
pineapple: "üçç"
peach: "üçë"
watermelon: "üçâ"
mango: "ü•≠"
pear: "üçê"
grapes: "üçá"
cherries: "üçí"
lemon: "üçã"
melon: "üçà"
coconut: "ü••"
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Woohoo! A single object with fruit names as the properties/keys and their corresponding emojis as the value!&lt;/p&gt;

&lt;p&gt;In React you can't just render an object, or you get:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;Error&lt;/span&gt;
&lt;span class="nt"&gt;Objects&lt;/span&gt; &lt;span class="nt"&gt;are&lt;/span&gt; &lt;span class="nt"&gt;not&lt;/span&gt; &lt;span class="nt"&gt;valid&lt;/span&gt; &lt;span class="nt"&gt;as&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="nt"&gt;React&lt;/span&gt; &lt;span class="nt"&gt;child&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So you have to get fancy with Object.entries() and map().&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`fruitsObj = {`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruitsObj&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{val}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;))}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`}`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Giving us:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vs4hxkOh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xahzlip05fs7bgld9sed.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vs4hxkOh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xahzlip05fs7bgld9sed.jpg" alt="Screen shot of fruitsObj object"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cool! But, not very useful on its own.&lt;/p&gt;

&lt;p&gt;What if we used &lt;code&gt;fruitsObj&lt;/code&gt; to create a "search for emoji" feature? We can search by name, and if there are any matches, we get the corresponding emoji. &lt;/p&gt;

&lt;p&gt;I use the same form from both the filter() and find() sections to grab the user's input, &lt;code&gt;query&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I decided to show the keys and values separated by columns in a table. &lt;/p&gt;

&lt;p&gt;Check it out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;table-card&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;tbody&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;tr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;FRUIT&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/th&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;EMOJI&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/th&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/tr&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;atLeastOneTrueQuery&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruitsObj&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;tr&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;td&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/td&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;td&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/td&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/tr&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;       &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;tr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;No&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/td&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Matches&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/td&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/tr&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/tbody&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/table&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(I know, I know! Nested ternaries! üò±üò±üò± Not the prettiest, or easiest to read. If you have a better idea how to refactor this, let me know! But it does the job for now.)&lt;/p&gt;

&lt;p&gt;Essentially, if the user has typed in the search bar, &lt;code&gt;query&lt;/code&gt; updates with the user's input. If &lt;code&gt;atLeastOneTrueQuery&lt;/code&gt; holds at least one matching fruit, then map() and render the fruit(s) and its emoji in the table. Otherwise, render a table section that tells the user "No Matches".&lt;/p&gt;

&lt;p&gt;Hopefully this contrived example shows you how useful reduce() can be. There are probably a million better use cases for it. Let me know in the comments below if you've ever worked with reduce() and if you've done anything interesting with it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;If you've made it this far, GREAT JOB. And thank you! My hope is you now better understand the array methods we covered, and how you can use them in React.&lt;/p&gt;

&lt;p&gt;I learned so much creating these examples and writing this post. The reduce() method was the hardest for me to wrap my brain around, but I feel as though I have a much better understanding when and why to use it, and how it works.&lt;/p&gt;

&lt;p&gt;If you enjoyed this article, please like it, save it, share it! Whatever you want to do with it! &lt;/p&gt;

&lt;p&gt;Also, follow me on &lt;a href="https://twitter.com/memrook"&gt;Twitter&lt;/a&gt;, where I talk about my development journey, share anything I am working on,  highlight other developers and their projects, and sometimes tweet silly memes!&lt;/p&gt;

&lt;p&gt;When Part III in the Essential JavaScript Building Blocks for React series is released, come back and check that out!&lt;/p&gt;

&lt;p&gt;I welcome your feedback, insight, criticism, ideas, etc! Let me know in the comments what you think!&lt;/p&gt;

&lt;p&gt;Thank you again and BE GOOD!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
