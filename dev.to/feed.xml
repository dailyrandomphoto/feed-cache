<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Use these expert-verified tips to enhance your technical writeups!</title>
      <author>Saharsh Laud</author>
      <pubDate>Mon, 11 Oct 2021 13:15:33 +0000</pubDate>
      <link>https://dev.to/saharshlaud/use-these-tips-to-enhance-your-technical-writeups-3239</link>
      <guid>https://dev.to/saharshlaud/use-these-tips-to-enhance-your-technical-writeups-3239</guid>
      <description>&lt;p&gt;There is no better feeling in this world than having your thoughts transformed into words and those words being helpful to other people. The entire essence of Technical writing is to convert complex technical terminologies into a clear, concise, and easily understandable format for your audience. &lt;/p&gt;

&lt;p&gt;While the result of technical writing seems to be quite clear, the process of reaching that goal is definitely not a piece of cake. The main point here is to keep things simple for the audience which a lot of writers struggle to incorporate in their write ups. &lt;/p&gt;

&lt;p&gt;I recently had the chance to be a part of the Hashnode Technical Writing Bootcamp where I met some of the most outstanding personalities in the technical writing community ( &lt;a href="https://hashnode.com/@quincy"&gt;Quincy Larson&lt;/a&gt; ,  &lt;a href="https://hashnode.com/@tanoaksam"&gt;Sam Sycamore&lt;/a&gt; ,  &lt;a href="https://hashnode.com/@didicodes"&gt;Edidiong Asikpo&lt;/a&gt; ,  &lt;a href="https://hashnode.com/@dailydevtips"&gt;Chris Bongers&lt;/a&gt;  and many others) and the tips and suggestions shared by them surely helped me to shape my thoughts and actions as a technical writer.&lt;/p&gt;

&lt;p&gt;Here are some tips that I think are useful for any technical writer despite the experience level or background:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#beginners-mindset-is-an-asset"&gt;
  &lt;/a&gt;
  Beginners Mindset is an Asset
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dc5xt7cA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632461080945/hJrhuqmRD.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dc5xt7cA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632461080945/hJrhuqmRD.jpeg" alt="Beginners-Mindset.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Being a beginner at technical writing might be quite intimidating at times but this lack of expertise can be your biggest advantage also. There are millions of beginners out there just like you who are trying to figure out different technologies. Writing articles with a beginner's mindset makes it easier for the other beginners to relate to your content since they might also have gone through the same steps and encountered the same problems that you did. &lt;/p&gt;

&lt;p&gt;So every time you're learning something new just write about it, the steps that you followed, and any issues that you encountered. This way you'll not only connect with other beginners like yourself but also get your issues resolved by someone who had the same problems and has resolved them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#let-your-personality-shine-through-your-articles"&gt;
  &lt;/a&gt;
  Let your personality shine through your articles
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z0K-0MvZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632462633100/kigTT_rp0.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z0K-0MvZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632462633100/kigTT_rp0.jpeg" alt="Standing-out-from-others-cartoon.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Always try to provide a personal tone to your articles instead of copying the theme of an existing article. Being yourself is the best way for your articles to be interesting and unique from the other articles. Nowadays many writers plagiarize technical content and don't even provide proper credits. Just be yourself and try to find your own voice because even if one of your articles blows up, you'll be able to build an audience for yourself and those people will start to notice you for your personality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-your-audience"&gt;
  &lt;/a&gt;
  Understanding your audience
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nma_c1bo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632461279898/GeVAnV27B.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nma_c1bo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632461279898/GeVAnV27B.jpeg" alt="albert-eistein1.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the greatest mistakes technical writers make is an improper perception of their audience. An article on advanced React concepts is of no use if a majority of your readers are beginners in React. So, before writing an article always ask yourself some basic questions such as - What does the audience need? Where will they be reading it? When will they read it? ,etc.&lt;/p&gt;

&lt;p&gt;Through this, you shall have a clear idea of whether your audience requires an in-depth article or a short and simple post, whether the article will pertain to beginners, intermediate or expert audiences, and many other aspects that'll help you to frame your entire article. All your articles should convey proper technical facts but more importantly to the proper audience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#research"&gt;
  &lt;/a&gt;
  Research
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bI-HAJFD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632462367337/-bMgzHx26.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bI-HAJFD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632462367337/-bMgzHx26.jpeg" alt="research.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The backbone of technical writing lies in the research around the topic that you are writing on. Try to understand every minute detail of the topic clearly and before writing an article to explain it to your audience. Lack of proper research and correct technical information is what stops an ordinary writer from becoming extraordinary. &lt;/p&gt;

&lt;p&gt;If you have sound knowledge about the concepts that you want to write on, you can easily break them down into simpler ideas to better explain them to your audience and the only way to do so is through rigorous research. In short, &lt;strong&gt;Google the hell out of things that you want to write about.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-okay-to-not-know"&gt;
  &lt;/a&gt;
  It's okay to not know
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XCtCnZUx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632462333248/UKQQ0jsbi.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XCtCnZUx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632462333248/UKQQ0jsbi.jpeg" alt="clueless.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sometimes you might not have all the desired skills required for technical writing and that is totally fine. The most important aspect of technical writing is to start writing even if you might not know certain things. Just start writing because you can always learn other skills on the way. There are a lot of resources that can help you such as technical writing courses, style guides, technical communities, etc. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#proper-reviews"&gt;
  &lt;/a&gt;
  Proper Reviews
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--roRw7ah4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632462698585/7u3EyPbY8.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--roRw7ah4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632462698585/7u3EyPbY8.jpeg" alt="review.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reviewing and proofreading are essential tasks that should be performed multiple times before publishing an article online. Don't be in a rush to publish your article after the first draft. If possible take some time off from the article after finishing the first draft and then try to come back for a second look at it. This way you will have a fresh start for your review and you might even notice certain pointers that you didn't notice before. &lt;/p&gt;

&lt;p&gt;Try to fine-tune your article to perfection. However perfect your first draft might seem there are always some changes that you can do. You can even take help from your friends, colleagues, community members to review your draft and provide suggestions. It is always better to publish a properly reviewed article than the first draft.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#grammar"&gt;
  &lt;/a&gt;
  Grammar
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nEYecHtX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632462784136/xRg7kXzf2.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nEYecHtX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632462784136/xRg7kXzf2.jpeg" alt="grammar.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Believe it or not but all great technical articles have one thing in common, "&lt;strong&gt;proper grammar&lt;/strong&gt;". Grammar is the base of an article and improper grammar might lead to falling interest from the readers. However great your technical knowledge and skills might be, if you can't follow basic grammar rules in your write ups, this knowledge is of no use to your audience. Articles with grammatical errors often detract from the message or image the writer is trying to portray. So always pay attention to the grammar in your article and you can even use tools such as Grammarly for your assistance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#try-to-be-consistent"&gt;
  &lt;/a&gt;
  Try to be consistent
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N0lWr73P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632463031949/_Gca02fsp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N0lWr73P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632463031949/_Gca02fsp.png" alt="consitent.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://h.daily-dev-tips.com/learn-how-to-come-up-with-article-ideas-and-stay-consistent-cktmign6f042onss1h377cwpd"&gt;Chris Bongers&lt;/a&gt; during his session at Hashnode Bootcamp said that there can be two meanings to being consistent according to him: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Consistency of Time&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Consistency of efforts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Consistency of time simply means that you are consistent in the time that you spend on writing and publishing articles. Consistency of efforts means that you put in a constant effort in all your articles no matter how the article performs online. Both of these standards correspond to consistent writing. &lt;/p&gt;

&lt;p&gt;Being consistent is a key factor because many writers start with huge excitement and might even publish several articles in the initial phases but then as time passes several factors such as personal problems, work schedule, content not getting traction, etc. might lead to fading away of the excitement and efforts.&lt;/p&gt;

&lt;p&gt;Always try to keep writing despite all other things in your path and try to set some weekly or monthly writing goals to help you remain consistent because readers love to get fresh content and writing might even help you to de-stress yourself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tooling"&gt;
  &lt;/a&gt;
  Tooling
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JM_ob5Iw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632463151136/nvJIZICm2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JM_ob5Iw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632463151136/nvJIZICm2.png" alt="tooling-removebg-preview.png"&gt;&lt;/a&gt;&lt;br&gt;
You might be giving your best efforts but with proper tooling, you can enhance your productivity even further. There is a huge array of tools available for each and every requirement whether it be publishing, authoring, scheduling, image editing, spell-checking, or anything else.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.grammarly.com/"&gt;Grammarly &lt;/a&gt; is probably the most used spell-check tool in the world and you can use its features to ensure proper grammar in your articles.  &lt;a href="https://www.notion.so/"&gt;Notion &lt;/a&gt; is another great tool that can be used to keep a list of article ideas, schedules, and even drafts for reviewing. &lt;/p&gt;

&lt;p&gt;The word tooling is not specifically restricted to software tools or apps. Any resource that can assist you in your technical writing journey can be considered a tool. &lt;strong&gt;Writer's groups, blogging communities, discord channels, events, social media&lt;/strong&gt;, etc. are all such tools that might not have a specific set of features for you but they will surely help you enhance your content.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#graphics-and-stats"&gt;
  &lt;/a&gt;
  Graphics and Stats
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v7E_oNPK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632463250418/aXYUqmv8l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v7E_oNPK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632463250418/aXYUqmv8l.png" alt="Screenshot 2021-09-23 133333.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Graphics and visual aids can help your readers to better understand a particular concept. Always try to include proper graphics such as images, illustrations, or videos that are related to the idea that you are focusing on. Visuals appeal more to the audience than written content and if you can have a perfect blend between the two, then you'll surely have better audience retention for your articles. &lt;/p&gt;

&lt;p&gt;While graphics and images enhance the look and feel of your draft, statistics help in building trust and credibility around your technical content. Including properly researched statistics along with the reference to the source is generally considered a good practice especially for technical articles.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#last-words"&gt;
  &lt;/a&gt;
  Last Words…..
&lt;/h2&gt;

&lt;p&gt;So there you have it! These were some of the tips that will surely help in your technical writing journey.&lt;/p&gt;

&lt;p&gt;Many people think technical writing to be too complex as a profession or even a part-time hobby but the reality is that the complexity of technical writing lies in the writer's mind. Presenting information in a simple and easy to grasp manner is the main focus of technical writing which if followed correctly will automatically drive the audience towards your writeups. So what are you waiting for grab a cup of coffee and get started on that blog post!&lt;/p&gt;

&lt;p&gt;Hope you enjoyed my blog. Thanks for reading!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Feel free to comment, share and reach out to me on &lt;a href="https://dev.to/saharshlaud"&gt;Dev.to&lt;/a&gt;,  &lt;a href="https://twitter.com/saharshlaud"&gt;Twitter&lt;/a&gt; , or  &lt;a href="https://in.linkedin.com/in/saharsh-laud"&gt;LinkedIn&lt;/a&gt; .&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>tips</category>
      <category>beginners</category>
      <category>writing</category>
      <category>community</category>
    </item>
    <item>
      <title>How to make a parser and a filter?</title>
      <author>Bruno Noriller</author>
      <pubDate>Mon, 11 Oct 2021 13:13:44 +0000</pubDate>
      <link>https://dev.to/noriller/how-to-make-a-parser-and-a-filter-4g98</link>
      <guid>https://dev.to/noriller/how-to-make-a-parser-and-a-filter-4g98</guid>
      <description>&lt;p&gt;I've waited to post this on Monday morning because... well, even if you don't like coffee, more than any morning, the start of the week is certainly for "Coffee and Contemplation". &lt;/p&gt;

&lt;p&gt;(I prefer tea, but unfortunately, "Tea and Contemplation" doesn't roll of the tongue.)&lt;/p&gt;

&lt;p&gt;Now that you're &lt;a href="https://en.wikipedia.org/wiki/Priming_(psychology)"&gt;primed&lt;/a&gt;, what am I talking about?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#parser"&gt;
  &lt;/a&gt;
  Parser
&lt;/h2&gt;

&lt;p&gt;Parser takes a input (generally text) and transforms it in a data structure that can be used in the following steps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#filter"&gt;
  &lt;/a&gt;
  Filter
&lt;/h2&gt;

&lt;p&gt;Filter is a... filter... that filter things. More enter and less get out. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Anyway...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What can you do if you combine then?&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-search-engine"&gt;
  &lt;/a&gt;
  A search engine!
&lt;/h2&gt;

&lt;p&gt;Of course there's a lot more behind the biggest ones you can think, but in essence it's that it.&lt;/p&gt;

&lt;p&gt;From the query you create a structure that the filter consumes, and at the end of the pipeline you have the results you want.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#have-you-ever-tried-making-one"&gt;
  &lt;/a&gt;
  Have you ever tried making one?
&lt;/h2&gt;

&lt;p&gt;The easiest thing you can make, and here I'll be using Javascript is something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sourceArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`your array with data`&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;probably from a input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filteredDataToReturn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sourceArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queryString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I did say the easiest right?&lt;/p&gt;

&lt;p&gt;The "more right" way to do it would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queryString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which is still really simple.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But far from any search engine&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enters-easyfilter"&gt;
  &lt;/a&gt;
  Enters &lt;a href="https://www.npmjs.com/package/@noriller/easy-filter"&gt;EasyFilter&lt;/a&gt;!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IJJH01Vr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4clsuczsh9865g5bquou.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IJJH01Vr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4clsuczsh9865g5bquou.png" alt="EasyFilter print from NPM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yes, as you might be realizing now... this is a shamelessly self promotion post... but please, I will teach you how to make your own "EasyFilter"!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/@noriller/easy-filter"&gt;https://www.npmjs.com/package/@noriller/easy-filter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you wanted to get even close to a "real" search engine you have to put in the work, and when you're busy doing other things, you just don't have the time to give your users what they &lt;em&gt;expect&lt;/em&gt; a search input to be: "Google".&lt;/p&gt;

&lt;p&gt;More than just random words, you use quotes and even tag:value pairs... my inspirations were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Google / Gmail&lt;/li&gt;
&lt;li&gt;Stackoverflow&lt;/li&gt;
&lt;li&gt;Github&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Seriously... check their advanced search... there's so much you can filter!&lt;/p&gt;

&lt;p&gt;And with EasyFilter you can simply:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`search for something "this between quotes" and then here:"you search for this"`&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;EasyFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sourceArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filteredResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queryString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And it will filter just like you expect! It works for single values, quoted values and even values nested inside keys. AND MORE! (Check the documentation!)&lt;/p&gt;

&lt;p&gt;You don't need to settle for the &lt;em&gt;easy&lt;/em&gt;, you can have it be &lt;em&gt;easy&lt;/em&gt; for you and powerful for the users.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-make-one"&gt;
  &lt;/a&gt;
  How do I make one?
&lt;/h2&gt;

&lt;p&gt;For now... check the docs or the source code. 😋&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Noriller/easy-filter"&gt;https://github.com/Noriller/easy-filter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Noriller/easy-filter-parser"&gt;https://github.com/Noriller/easy-filter-parser&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And next week, we start at earnest.&lt;/p&gt;




&lt;p&gt;Also... EasyFilter ended with as just a &lt;em&gt;warming&lt;/em&gt;... &lt;/p&gt;

&lt;p&gt;Let's just say you can wait for the... &lt;em&gt;Sequel&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;(If you read the docs, you will understand.)&lt;/p&gt;




&lt;p&gt;&lt;a href="https://buymeacoffee.com/noriller"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yCnrDwn4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4mb4rl84w85pw4n6v9wt.png" alt="buy me a coffee"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Cover Photo by &lt;a href="%5Bhttps://unsplash.com/@nate_dumlao?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText%5D(https://unsplash.com/@nate_dumlao?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText)"&gt;Nathan Dumlao&lt;/a&gt; on &lt;a href="%5Bhttps://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText%5D(https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText)"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>7 javaScript Array methods you should know</title>
      <author>Muhammad Muhktar Musa</author>
      <pubDate>Mon, 11 Oct 2021 13:11:17 +0000</pubDate>
      <link>https://dev.to/mcube25/7-javascript-array-methods-you-should-know-7mf</link>
      <guid>https://dev.to/mcube25/7-javascript-array-methods-you-should-know-7mf</guid>
      <description>&lt;p&gt;Arrays are one of the most common things a programmer uses or is likely to come across in a project. In this regard the array method we are going to look into should come in handy.&lt;br&gt;
 We are going to use a single array for our examples&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const clubs = [
  { name: "All-stars", fans: 20000 },
  { name: "Bay", fans: 30000 },
  { name: "C-stars", fans: 25000 },
  { name: "D-pillars", fans: 40000 },
  { name: "Clos", fans: 60000 },
  { name: "Magic", fans: 45000 }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let us take a look at this methods and what they do to an array&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#filter"&gt;
  &lt;/a&gt;
  filter
&lt;/h5&gt;

&lt;p&gt;The filter method is used to filter out or remove all elements from an array that affirms the subject in the proposition logic and they are returned in a new array without altering the original array&lt;br&gt;
for example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const filterClub = clubs.filter((item) =&amp;gt; {
  return item.fans &amp;lt;= 30000;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All the clubs having fans of less than or equal to 30000 fans are going to be returned to a new array.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rODDNLeM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/136793752-642ffd60-6877-4de0-9f95-655106c33168.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rODDNLeM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/136793752-642ffd60-6877-4de0-9f95-655106c33168.png" alt="Screenshot (91)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The filter method is a simple method to use.  It returns true or false for each item. If the item is true, it is included in the new array and if it is false it is not included. The filter method does not change the array or object it is being filtered over. This method is convenient because we do not have to worry about the old array being changed when using it subsequently.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#map"&gt;
  &lt;/a&gt;
  map
&lt;/h5&gt;

&lt;p&gt;This method allows the taking of an array and converting it to a new array so that all items in the array are going to look slightly different. Let us say we want to get the names of every clubs in the array sample. We can use the map method for this.&lt;br&gt;
Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const clubNames = clubs.map((item) =&amp;gt; {
  return item.name
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cfieuKcu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/136794128-9061b13f-9b3b-4f23-ad42-5312a846758e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cfieuKcu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/136794128-9061b13f-9b3b-4f23-ad42-5312a846758e.png" alt="Screenshot (92)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We get a new array that prints out the names of the club in the original array without altering the original array. This is super convenient when you want to get the items in an object or the keys of an object or convert an array from one form to another. It has millions of uses.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#find"&gt;
  &lt;/a&gt;
  find
&lt;/h4&gt;

&lt;p&gt;This method allows a single object to be found in an array of objects. The method takes a single item as a parameter and returns the first item that returns true for the statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const findClub = clubs.find((item) =&amp;gt; {
  return item.name === "All-stars"
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yo2PsTZu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/136794411-39d02d01-230d-4e89-bf1e-fac9de361276.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yo2PsTZu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/136794411-39d02d01-230d-4e89-bf1e-fac9de361276.png" alt="Screenshot (93)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#foreach"&gt;
  &lt;/a&gt;
  forEach
&lt;/h5&gt;

&lt;p&gt;This method does not return anything unlike the methods we covered previously. It works very similarly to a forLoop but it takes a function instead and takes a single parameter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;clubs.forEach((item) =&amp;gt; {
  console.log(item.name);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For every single element inside the array, it prints out the names. The method makes working with an array where you have to loop through them much easier so that you don't have to write clunky, long forLoop syntax.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#some"&gt;
  &lt;/a&gt;
  some
&lt;/h5&gt;

&lt;p&gt;This function does not return a brand new array. Instead what it does is to return true or false. We can check if some items in the array affirms or denies the subject in the proposition logic. example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const highestFans = clubs.some((item) =&amp;gt; {
  return item.fans &amp;lt;= 30000
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S6i7vWnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/136794833-9c90bc54-f70f-403d-aecd-629ad492cf30.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S6i7vWnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/136794833-9c90bc54-f70f-403d-aecd-629ad492cf30.png" alt="Screenshot (94)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It checks if any item value returns true and returns the first item that matches the criteria.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#every"&gt;
  &lt;/a&gt;
  every
&lt;/h5&gt;

&lt;p&gt;This method checks if every single item in the array affirms the subject proposition logic and returns true or false&lt;br&gt;
example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const highestFans = clubs.every((item) =&amp;gt; {
  return item.fans &amp;lt;= 30000
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a0ENZJYm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/136795110-f3d3b6d8-2c96-4034-9e56-eb550e1e461f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a0ENZJYm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/136795110-f3d3b6d8-2c96-4034-9e56-eb550e1e461f.png" alt="Screenshot (95)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#reduce"&gt;
  &lt;/a&gt;
  reduce
&lt;/h5&gt;

&lt;p&gt;This method performs an operation on the array and returns a combination of all the different operations. To get the total of all the fans in our clubs array we use the reduce method in the following way&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const totalFans = clubs.reduce((x, item) =&amp;gt; {
  return item.fans + x;
}, 0);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8A_0K8DC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/136795286-40a8f964-e2b1-4e90-81e7-58e12bdecc42.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8A_0K8DC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/136795286-40a8f964-e2b1-4e90-81e7-58e12bdecc42.png" alt="Screenshot (96)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It takes a property and an item we want the property to be reduced to. It also takes a second parameter which is where we want to start the reduce from. In our case it starts from 0.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>5 reasons why Frontend Developers love GraphQL</title>
      <author>Luka Kukina</author>
      <pubDate>Mon, 11 Oct 2021 13:09:39 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/5-reasons-why-frontend-developers-love-graphql-16h8</link>
      <guid>https://dev.to/bornfightcompany/5-reasons-why-frontend-developers-love-graphql-16h8</guid>
      <description>&lt;p&gt;Besides creating those beautiful UIs our beloved designers give us, handling complex application logic and component architecture, we as frontend developers work with a lot of data manipulating in the process. In this post I will talk about how can a frontend developer be more productive and have a better developer experience by simply using GraphQL.&lt;/p&gt;

&lt;p&gt;Probably like most developers out there, I used to work with REST APIs and mostly enjoyed it, but recently I've got an opportunity to work with GraphQL and instantly fell in love with it.&lt;br&gt;
Here are the reasons why:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-graphql-has-only-one-endpoint"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1) GraphQL has only one endpoint&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;When working with REST APIs, you are surrounded with a lot of endpoints, as their configuration is based on the names of the application’s entities they represent. On top of that, each entity has different methods to manipulate its data (POST, GET, DELETE, PUT, PATCH). All that taken into consideration, &lt;br&gt;
basic REST API will look something like the image below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TtMxlut1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d7yb3nsrklpv8emel9dk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TtMxlut1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d7yb3nsrklpv8emel9dk.png" alt="REST endpoints"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With greater complexity there will be more entities and more specific endpoints/queries...&lt;/p&gt;

&lt;p&gt;&lt;em&gt;GraphQL to the rescue&lt;/em&gt; 🎉  &lt;strong&gt;GraphQL uses only one endpoint!&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;GraphQL server operates on a single URL/endpoint, usually /graphql, and all GraphQL requests for a given service should be directed at this endpoint.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#2-graphql-is-self-documenting"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2) GraphQL is self documenting&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Developing big applications, having deadlines, difficult or indecisive clients is a developer's everyday experience and to be honest, sometimes, documenting the APIs isn't the highest priority task. Because of that, developer’s productivity and developer experience (DX) may decrease as more time will be needed to understand what exactly a developer needs, it gets harder to onboard other developers on the project and so on...&lt;/p&gt;

&lt;p&gt;&lt;em&gt;GraphQL to the rescue&lt;/em&gt; (again) 🎉  &lt;strong&gt;GraphQL is self documenting!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xH0RLSv7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56x4scqtwz1yfs46mb5k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xH0RLSv7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56x4scqtwz1yfs46mb5k.png" alt="Self documenting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GraphQL documentation will keep frontend developers up to date with all the changes that might happen.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-no-more-underfetchingoverfetching"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3) No more underfetching/overfetching&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;RESTful APIs assume for us which entity's information should be coupled together as a whole. They don't look at the design of the application. &lt;br&gt;
With that said, frontend developers usually get more information than what they need to display on the screen. This is called overfetching. &lt;br&gt;
On the other hand, some screens need a little extra information that we don’t get with only one GET request. This is called underfetching. To overcome this problem, we will make another request to fetch the data we need. &lt;br&gt;
OK, now we overcame that underfetching problem, but remember that we only needed a little more information, so we are now overfetching again (I can smell an infinite loop here 😅).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;GraphQL to the rescue&lt;/em&gt; (and again) 🎉  &lt;strong&gt;GraphQL lets us query for the data that we actually need!&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Send a GraphQL query to your API and get exactly what you need, nothing more and nothing less.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;GraphQL is actually a query language (&lt;strong&gt;Graph&lt;/strong&gt; &lt;strong&gt;Q&lt;/strong&gt;uery &lt;strong&gt;L&lt;/strong&gt;anguage) and it lets us write our own queries. This way we can look at the given design and decide what information we need to fetch. And it is simple too: queries are written in an object-like syntax where you specify the keys and get back the key-value pairs like on image below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--drT4_vcv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/crhjswbnu4914mn5nex5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--drT4_vcv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/crhjswbnu4914mn5nex5.png" alt="GraphQL query"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#4-graphql-playground"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4) GraphQL playground&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;That brings us to GraphQL playground - GraphiQL. GraphiQL is a powerful tool that lets you test your queries, see the response, check out the documentation, schema and types for the needed fields. Everything is typed and it even helps you with autocomplete as a nice finishing touch.&lt;br&gt;
All you need to do is enable GraphiQL in your backend (BE developer will do that) and enter your only endpoint into URL.&lt;/p&gt;

&lt;p&gt;Example of a free-to-use Rick and Morty API below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d66RGcoE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkcv67yncnxtndye04x9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d66RGcoE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkcv67yncnxtndye04x9.png" alt="Rick and Morty GraphiQL"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#5-apollo-client"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5) Apollo Client&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Even though Apollo Client is not the part of GraphQL out of the box, it makes the DX much nicer (...and post title: &lt;em&gt;4 reasons why Frontend Developers love GraphQL&lt;/em&gt; wouldn't be as catchy). Apollo Client most importantly provides us with three easy-to-use custom hooks for manipulating the data: &lt;strong&gt;useQuery&lt;/strong&gt;, &lt;strong&gt;useLazyQuery&lt;/strong&gt; and &lt;strong&gt;useMutation&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;useQuery&lt;/em&gt; - we use it when we need to fetch the data when the component mounts. It returns an object containing &lt;strong&gt;data&lt;/strong&gt;, &lt;strong&gt;error&lt;/strong&gt; if any and &lt;strong&gt;loading&lt;/strong&gt; state.&lt;br&gt;
All you need to pass is a query and options object (if there are variables, anything that needs to be done onCompleted etc.)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { loading, error, data } = useQuery(SOME_QUERY, options)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;useLazyQuery&lt;/em&gt; - we use it when we need to fetch the data on some event (for example on search button click). It returns an array containing a function to use on some event and an object with &lt;strong&gt;data&lt;/strong&gt;, &lt;strong&gt;error&lt;/strong&gt; if any, &lt;strong&gt;loading&lt;/strong&gt; state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [fetchOnSearch, { error, loading, data }] = useLazyQuery(SOME_QUERY, options)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;useMutation&lt;/em&gt; - we use it when we need to mutate the data. It returns an array containing a function to which mutates the data and an object with &lt;strong&gt;data&lt;/strong&gt;, &lt;strong&gt;error&lt;/strong&gt; if any, &lt;strong&gt;loading&lt;/strong&gt; state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [fetchOnSearch, { error, loading, data }] = useMutation(MUTATION_QUERY, options)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;GraphQL was created by Facebook developers and it is used by many big companies which means it is not going anywhere. So, if you are a frontend developer and looking for something new to try out - start with GraphQL, you might fall in love with it! 🥰&lt;/p&gt;

&lt;p&gt;...For more in detail information please check the official &lt;a href="https://graphql.org/"&gt;GraphQL&lt;/a&gt; and &lt;a href="https://www.apollographql.com/docs/"&gt;Apollo Client&lt;/a&gt; documentations...&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>react</category>
      <category>programming</category>
      <category>engineeringmonday</category>
    </item>
    <item>
      <title>Jaeger vs Tempo - key features, differences, and alternatives</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Mon, 11 Oct 2021 13:02:20 +0000</pubDate>
      <link>https://dev.to/signoz/jaeger-vs-tempo-key-features-differences-and-alternatives-1amg</link>
      <guid>https://dev.to/signoz/jaeger-vs-tempo-key-features-differences-and-alternatives-1amg</guid>
      <description>&lt;p&gt;Both Grafana Tempo and Jaeger are tools aimed at distributed tracing for microservice architecture. Jaeger was released as an open-source project by Uber in 2015, while Tempo is a newer product announced in October 2020.&lt;/p&gt;

&lt;p&gt;Jaeger is a popular open-source tool that graduated as a project from Cloud Native Computing Foundation. Grafana Tempo is a high-volume distributed tracing tool deeply integrated with other open-source tools like Prometheus and Loki.&lt;/p&gt;

&lt;p&gt;But before we dive into the details of Jaeger and Grafana Tempo, let's take a short detour to understand distributed tracing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-distributed-tracing"&gt;
  &lt;/a&gt;
  What is distributed tracing?
&lt;/h2&gt;

&lt;p&gt;In the world of microservices, a user request travels through hundreds of services before serving a user what they need. To make a business scalable, engineering teams are responsible for particular services with no insight into how the system performs as a whole. And that's where distributed tracing comes into the picture.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G8Vee_gt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/jaeger_vs_zipkin_microservices_architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G8Vee_gt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/jaeger_vs_zipkin_microservices_architecture.png" alt="Microservices architecture"&gt;&lt;/a&gt;Microservice architecture of a fictional e-commerce application&lt;/p&gt;

&lt;p&gt;Distributed tracing gives you insight into how a particular service is performing as part of the whole in a distributed software system. There are two essential concepts involved in distributed tracing: &lt;strong&gt;Spans&lt;/strong&gt; and &lt;strong&gt;trace context&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;User requests are broken down into spans.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What are spans?&lt;br&gt;&lt;br&gt;
Spans represent a single operation within a trace. Thus, it represents work done by a single service which can be broken down further depending on the use case.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A &lt;strong&gt;trace context&lt;/strong&gt; is passed along when requests travel between services, which tracks a user request across services. Thus, you can see how a user request performs across services and identify what exactly needs your attention without manually shifting through multiple dashboards.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZXTMH1wS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/opentelemetry_distributed_tracing-min.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZXTMH1wS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/opentelemetry_distributed_tracing-min.png" alt="Trace context is passed to track user requests across services"&gt;&lt;/a&gt;A trace context is passed when user requests pass from one service to another&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#architecture-of-jaeger-and-grafana-tempo"&gt;
  &lt;/a&gt;
  Architecture of Jaeger and Grafana Tempo
&lt;/h2&gt;

&lt;p&gt;Jaeger and Grafana Tempo are somewhat similar, with the only difference being in their backend storage.&lt;/p&gt;

&lt;p&gt;Jaeger supports two popular open-source NoSQL databases as trace storage backends:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cassandra&lt;/li&gt;
&lt;li&gt;ElasticSearch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sPD4rjIu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/Jaeger_architecture-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sPD4rjIu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/Jaeger_architecture-min.jpg" alt="Architecture of Jaeger"&gt;&lt;/a&gt;Architecture of Jaeger&lt;/p&gt;

&lt;p&gt;Grafana Tempo was built to avoid the maintenance that is required to run databases like Cassandra and ElasticSearch. It has the following components in its architecture:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Distributor&lt;/strong&gt;&lt;br&gt;
It is used to accept spans in multiple formats.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ingestor&lt;/strong&gt;&lt;br&gt;
The Ingester batches trace into blocks and then flushes it all to the backend.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Query frontend&lt;/strong&gt;&lt;br&gt;
Tempo uses Grafana for its visualization layer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Querier&lt;/strong&gt;&lt;br&gt;
It is responsible for finding the requested trace ID from the backend storage.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Compactor&lt;/strong&gt;&lt;br&gt;
The Compactors stream blocks to and from the backend storage to reduce the total number of blocks.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9cMik-ju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/grafana_tempo_architecture-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9cMik-ju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/grafana_tempo_architecture-min.jpg" alt="Architecture of Grafana Tempo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comparing-jaeger-and-grafana-tempo"&gt;
  &lt;/a&gt;
  Comparing Jaeger and Grafana Tempo
&lt;/h2&gt;

&lt;p&gt;There are four major components to a distributed tracing tool:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Instrumentation&lt;/li&gt;
&lt;li&gt;Pipeline&lt;/li&gt;
&lt;li&gt;Backend&lt;/li&gt;
&lt;li&gt;Visualization&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's see in detail what these components are and how Jaeger and Grafana Tempo handle these components.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#instrumentation"&gt;
  &lt;/a&gt;
  Instrumentation
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;What is instrumentation?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Instrumentation is the process of generating telemetry data(logs, metrics, and traces) from your application code. It is essentially writing code that enables your application code to emit telemetry data, which can be used later to investigate issues.&lt;/p&gt;

&lt;p&gt;Most distributed tracing tools offer clients libraries, agents, and SDKs to instrument application code. There are some popular open-source instrumentation frameworks too, which provide vendor-agnostic instrumentation libraries.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Instrumentation with Jaeger&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Jaeger's client libraries for instrumentation are based on &lt;a href="https://opentracing.io/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;OpenTracing APIs&lt;/b&gt;&lt;/a&gt;. OpenTracing was an open-source project aimed at providing vendor-neutral APIs and instrumentation for distributed tracing. It later got merged into &lt;a href="https://opentelemetry.io/"&gt;OpenTelemetry&lt;/a&gt;.&lt;br&gt;
Jaeger has official client libraries in following languages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;Node.js&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;C++&lt;/li&gt;
&lt;li&gt;C#&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Instrumentation with Grafana Tempo&lt;/strong&gt;&lt;br&gt;
Grafana Tempo supports multiple open-source instrumentation standards. It offers more flexibility to engineering teams to choose instrumentation libraries of their choice. Below is the list of popular frameworks used for client instrumentation and supported by Grafana Tempo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OpenTracing/Jaeger&lt;/li&gt;
&lt;li&gt;Zipkin&lt;/li&gt;
&lt;li&gt;OpenTelemetry&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#pipeline"&gt;
  &lt;/a&gt;
  Pipeline
&lt;/h3&gt;

&lt;p&gt;Once the trace data is collected with the help of client libraries, it can be directly sent to the storage backends for storage and visualization. But it's a good practice to have a tracing pipeline for data buffering as the application scales. The pipeline enables receiving data in multiple formats, manipulation, batching, indexing, and queueing.&lt;/p&gt;

&lt;p&gt;Jaeger provides Jaeger collectors, as seen in the architecture diagram. The collectors validate traces, index them and perform any transformation before storing the trace data.&lt;/p&gt;

&lt;p&gt;Grafana Tempo has Grafana agents, which are deployed close to the application. It quickly offloads traces from the application and performs functions like trace batching and backend routing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#backend-storage"&gt;
  &lt;/a&gt;
  Backend storage
&lt;/h3&gt;

&lt;p&gt;Jaeger ships with simple in-memory storage for testing setups.Jaeger supports two popular open-source NoSQL databases as trace storage backends:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cassandra&lt;/li&gt;
&lt;li&gt;ElasticSearch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Grafana Tempo has its own custom TempoDB for storing trace data. TempoDB supports S3, GCS, Azure, local file systems, and optionally can use Memcached or Redis for increased query performance.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#visualization-layer"&gt;
  &lt;/a&gt;
  Visualization layer
&lt;/h3&gt;

&lt;p&gt;In terms of the visualization layer, Grafana Tempo has the edge over Jaeger. Grafana Tempo is distributed tracing tool by Grafana - an open-source data visualization layer. You can connect different data sources to Grafana for visualization. Grafana has a built-in Tempo data source that can be used to query Tempo and visualize traces.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tD8JDrHm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/grafana_tempo_trace_query-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tD8JDrHm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/grafana_tempo_trace_query-min.jpg" alt="Querying a trace on Grafana Tempo using a Trace ID"&gt;&lt;/a&gt;Querying a trace on Grafana Tempo using a Trace ID&lt;/p&gt;

&lt;p&gt;Jaeger's UI is basic but comprehensive when it comes to distributed tracing. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PBiBbLYG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/jaeger_ui-min.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PBiBbLYG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/jaeger_ui-min.png" alt="Jaeger UI"&gt;&lt;/a&gt;Jaeger UI showing services and corresponding traces&lt;/p&gt;

&lt;p&gt;Both Jaeger and Grafana Tempo are strong contenders when it comes to a distributed tracing tool. But are traces enough to solve all performance issues of a modern distributed application? The answer is no. You also need metrics and a way to correlate metrics with traces within a single dashboard. You also need out-of-the-box data visualization that will enable engineering teams to resolve issues faster.&lt;/p&gt;

&lt;p&gt;That's where &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt; comes into the picture.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alternative-to-jaeger-and-grafana-tempo-signoz"&gt;
  &lt;/a&gt;
  Alternative to Jaeger and Grafana Tempo - SigNoz
&lt;/h2&gt;

&lt;p&gt;SigNoz is a full-stack open-source application performance monitoring and observability tool which can be used in place of Grafana Tempo and Jaeger. It provides advanced distributed tracing capabilities along with metrics under a single dashboard.&lt;/p&gt;

&lt;p&gt;SigNoz is built to support OpenTelemetry natively. &lt;a href="https://opentelemetry.io/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;OpenTelemetry&lt;/b&gt;&lt;/a&gt;  is becoming the world standard for generating and managing telemetry data (Logs, metrics, and traces). It also provides users flexibility in terms of storage. You can choose between ClickHouse or Kafka + Druid as your backend storage while installing SigNoz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6BdjoEB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/SigNoz_architecture_clickhouse.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6BdjoEB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/SigNoz_architecture_clickhouse.png" alt="Architecture of SigNoz with OpenTelemetry and ClickHouse"&gt;&lt;/a&gt;Architecture of SigNoz with ClickHouse as storage backend and OpenTelemetry for code instrumentatiion&lt;/p&gt;

&lt;p&gt;SigNoz comes with out of box visualization of things like RED metrics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OKFqZ_PP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_charts_application_metrics.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OKFqZ_PP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_charts_application_metrics.png" alt="SigNoz UI showing the popular RED metrics"&gt;&lt;/a&gt;SigNoz UI showing application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/p&gt;

&lt;p&gt;You can also use flamegraphs to visualize spans from your trace data. All of this comes out of the box with SigNoz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FOoIlefK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_flamegraphs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FOoIlefK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_flamegraphs.png" alt="Flamegraphs used to visualize spans of distributed tracing in SigNoz UI"&gt;&lt;/a&gt;Flamegraphs showing exact duration taken by each spans - a concept of distributed tracing&lt;/p&gt;

&lt;p&gt;Some of the things SigNoz can help you track:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/li&gt;
&lt;li&gt;Slowest endpoints in your application&lt;/li&gt;
&lt;li&gt;See exact request trace to figure out issues in downstream services, slow DB queries, call to 3rd party services like payment gateways, etc&lt;/li&gt;
&lt;li&gt;Filter traces by service name, operation, latency, error, tags/annotations.&lt;/li&gt;
&lt;li&gt;Run aggregates on trace data&lt;/li&gt;
&lt;li&gt;Unified UI for both metrics and traces&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can check out SigNoz's GitHub repo here 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>microservices</category>
      <category>monitoring</category>
      <category>jaeger</category>
      <category>tracing</category>
    </item>
    <item>
      <title>Serverless and blockchain: check NFT supply with AWS Lambda</title>
      <author>K</author>
      <pubDate>Mon, 11 Oct 2021 12:43:21 +0000</pubDate>
      <link>https://dev.to/dashbird/serverless-and-blockchain-check-nft-supply-with-aws-lambda-5d0f</link>
      <guid>https://dev.to/dashbird/serverless-and-blockchain-check-nft-supply-with-aws-lambda-5d0f</guid>
      <description>&lt;p&gt;Non-Fungible Tokens, or short NFTs, are all the rage right now. Everyone and their pets are starting an NFT project. Some people got rich from using NFTs; others did not. Some say it's the savior that will rip the power away from big corporations and give it back to the creators; others say it's just a giant pyramid scheme.&lt;/p&gt;

&lt;p&gt;I don't know how things will play out, if blockchains will be the next big thing, fueled by the NFT hype, or if it will fizzle out like so many other technologies before it. But a question I got asked lately was, &lt;strong&gt;how does this precisely fit in with AWS and serverless technology&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;That's why I thought, let's ride the hype train and write an article about NFTs and serverless technology!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For the copyable code snippets, see the &lt;a href="https://dashbird.io/blog/nft-aws-lambda-serverless-blockchain/"&gt;original artcle&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blockchain-related-aws-services"&gt;
  &lt;/a&gt;
  Blockchain Related AWS Services
&lt;/h2&gt;

&lt;p&gt;My first thought when thinking about AWS and blockchain was, of course, the AWS service with blockchain in its name: &lt;strong&gt;Amazon Managed Blockchain&lt;/strong&gt; (AMB).&lt;/p&gt;

&lt;p&gt;With AMB, you get &lt;strong&gt;Ethereum nodes hosted on an EC2 machine of your choice&lt;/strong&gt;, managed by AWS. You can think of it as RDS, but with blockchains instead of SQL databases.&lt;/p&gt;

&lt;p&gt;You will need such a service if you don't want to rely on nodes of third parties, like Infura or Alchemy. These nodes can be seen as the bridge between on-chain services and off-chain services. &lt;/p&gt;

&lt;p&gt;ABM is neither serverless nor cheap; you pay per hour and can end up with a bill that's over $300, no problem. So you should use it to make it safe that your nodes don't go down when the third party gets bankrupt or if you managed to get exorbitant bills from a third party service.&lt;/p&gt;

&lt;p&gt;Another related service is &lt;strong&gt;Amazon Quantum Ledger Database&lt;/strong&gt; (QLDB), a managed immutable blockchain/ledger. It's used if you need the immutability of a blockchain, but without everything decentralized, that comes with it. It has on-demand payment and is quite a bit cheaper than AMB, so if you just need an immutable database, go for QLDB.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#node-or-client"&gt;
  &lt;/a&gt;
  Node or Client?
&lt;/h2&gt;

&lt;p&gt;The nodes that make up the decentralized system Ethereum can be seen as servers in a classical setup or the databases and functions in a serverless design. They mine new blocks or validate transactions; they also execute the software that is known as a smart contract. This means you need to connect to a node to access the Ethereum blockchain.&lt;/p&gt;

&lt;p&gt;In this article we aren't focusing on nodes, so AMB doesn't interest us here. We want to implement a client that asks a node for data that's stored on the blockchain. So, our example will be located off-chain.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-will-we-build"&gt;
  &lt;/a&gt;
  What Will We Build?
&lt;/h2&gt;

&lt;p&gt;We will build a serverless system with the AWS CDK. It will consist of a Lambda function called every hour and an S3 bucket to store data off-chain. We will use JavaScript and the Ethers.js library to connect from AWS Lambda to Ethereum.&lt;/p&gt;

&lt;p&gt;The data we will check is the supply of NFTs a smart contract has issued. Since many of the smart contracts on the Ethererum blockchain have well-defined interfaces, we can write a function that just needs a contract address to do its work.&lt;/p&gt;

&lt;p&gt;Usually, AWS is seen as a competition to Ethereum because "Ethereum is just another way to build backends," but I think they can work together. Transactions on the blockchain are expensive, so some data and calculations could be outsourced to an off-chain system like AWS Lambda.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-interact-with-ethereum"&gt;
  &lt;/a&gt;
  How to Interact with Ethereum?
&lt;/h2&gt;

&lt;p&gt;To connect a non-Ethereum (off-chain) system with an Etherum smart contract (on-chain), it must connect to a node. We already learned that AWS offers rather expensive nodes we could use, but there are many services out there that can be used for free. These services have harsh limits, but for this example, they should suffice.&lt;/p&gt;

&lt;p&gt;Usually, transactions on the blockchain cost gas, but we will only call a function marked as view. This way, the node we connect to can simply read the data from its local blockchain copy, no transactions, and in turn, neither a wallet nor gas is needed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-infrastructure"&gt;
  &lt;/a&gt;
  The Infrastructure
&lt;/h2&gt;

&lt;p&gt;Let's look at the example CDK stack that defines our infrastructure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--elJlyABI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hyq3p3g8ym5amn6v80mv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--elJlyABI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hyq3p3g8ym5amn6v80mv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A bucket and a Lambda function. The bucket name and the address of the smart contract are passed to the Lambda function via environment variables. &lt;/p&gt;

&lt;p&gt;In this example, I used the NFT smart contract of &lt;a href="https://www.developerdao.com/"&gt;the Developer DAO&lt;/a&gt; because &lt;a href="https://github.com/Developer-DAO/developer-dao-nft-contract"&gt;its code is open source&lt;/a&gt;, so I know what interfaces they implemented.&lt;/p&gt;

&lt;p&gt;At the end of the stack, the schedule is set up with CloudWatch events.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-lambda-function"&gt;
  &lt;/a&gt;
  The Lambda Function
&lt;/h2&gt;

&lt;p&gt;Now, let us look at the code that will interact with Ethereum.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PYAA--F1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chw996frylrvyy8fq1j5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PYAA--F1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chw996frylrvyy8fq1j5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first line defines the Application Binary Interface of the smart contract we want to call. It's just an array of strings that make up the method signatures of that contract. I didn't define all the contract methods because I will just call one of them anyway.&lt;/p&gt;

&lt;p&gt;Next, I get the environment variables to know where to get the data from and where to save it.&lt;/p&gt;

&lt;p&gt;In the function body, I get the default provider from Ethers.js. In this example, the function is only executed once an hour, so it won't hit the limits. Still, in a production system that might access a node provider more often, you should sign up for an Ethereum gateway service like Infura or Alchemy.&lt;/p&gt;

&lt;p&gt;Then I set up the contract with the correct ABI, address, and provider. The provider makes sure we are connected to the proper chain (there are test chains for Ethereum, we don't want to communicate to those). The ABI tells Ethers.js which methods the contract provides. And finally, the contract's address so Ethers.js knows where to find the contract on the chain.&lt;/p&gt;

&lt;p&gt;Finally, we call the method that gives us the number of NFTs already minted and save it to our S3 bucket as a JSON file. The file name is the current date and time as ISO-string; we will know how many NFTs were minted every hour.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#monitoring-with-dashbird"&gt;
  &lt;/a&gt;
  Monitoring with Dashbird
&lt;/h2&gt;

&lt;p&gt;If you moved some of your calculations off-chain and into AWS Lambda, you can monitor them with &lt;a href="https://dashbird.io/"&gt;Dashbird&lt;/a&gt; like every other serverless system you build on AWS. No additional setup is needed. We can set up alarms for our NFT checker and get notified if things fail. &lt;/p&gt;

&lt;p&gt;In Figure 1, we see the general information Dashbird gives us about a Lambda function. This just resembles a few test invocations, but we can already see some interesting things.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JQ3Hq1Ul--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/vxQwr1u1Zpi_74_rnqBu4166cfGy6bT_M4r7SSDw7rtWDccY3ioMps6JjHzQ5RjMxxTKW0ONxRp9bdy9Z8HtphFutS4g-RO4AWLn68lgM-zEHPalGd42VYZx9moEFD96I6SSHIdo%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JQ3Hq1Ul--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/vxQwr1u1Zpi_74_rnqBu4166cfGy6bT_M4r7SSDw7rtWDccY3ioMps6JjHzQ5RjMxxTKW0ONxRp9bdy9Z8HtphFutS4g-RO4AWLn68lgM-zEHPalGd42VYZx9moEFD96I6SSHIdo%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Figure 1: Dashbird Lambda function details&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The executions were all free of charge and they fit snuggly into the smallest memory configuration. That's good to know. But if we look at the Duration tab in Figure 2, we see that our function has varying runtimes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Icc3iH4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/En8bkp_BPlEpz1yP_K7pRg-5DKkiiOG7aODkzAUQnkJWsTi4ZYG25ZscRshSee21GJH-6veHKkiDQDW0i6NQnsTkE1XBj4GU5rsGSAOhz6_cPxW0v4NkKvlbGxEVg2_YaHp9jrmD%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Icc3iH4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/En8bkp_BPlEpz1yP_K7pRg-5DKkiiOG7aODkzAUQnkJWsTi4ZYG25ZscRshSee21GJH-6veHKkiDQDW0i6NQnsTkE1XBj4GU5rsGSAOhz6_cPxW0v4NkKvlbGxEVg2_YaHp9jrmD%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Figure 2: Dashbird Lambda duration tab&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The function took anything from under 1 second to up to 3 seconds to do its work. With the default Lambda invocation timeout of 3,000 milliseconds, our function is at high risk to be shut down prematurely. Especially, since it's only called once every hour, it will have a cold-start every time.&lt;/p&gt;

&lt;p&gt;We can use the insight gathered by Dashbird to update our Lambda function definition with a more generous timeout, so it won't accidentally crash in the future.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--12GTc_8z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fl1j6zooc26j3tu5c9rc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--12GTc_8z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fl1j6zooc26j3tu5c9rc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This small example application outlined how serverless technology can be used in tandem with blockchains. Lambda functions are cheaper and faster than blockchain transactions, so they lend themselves for non-critical calculations that don't have to be tracked by a blockchain.&lt;/p&gt;

&lt;p&gt;This example was straightforward and somewhat contrived, but doing automated work that depends on the state of a blockchain is an actual use case. The Lambda function could render statistics on an HTML site or notify the NFT creator of changes to their supply.&lt;/p&gt;

&lt;p&gt;With Dashbird you can keep track of your NFT checker as you would with any other Lambda function and use the insights to optimize the execution even more. You can find &lt;a href="https://github.com/kay-is/serverless-nft-checker"&gt;the complete example on GitHub&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Further reading:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/serverless-hot-stock-checker/"&gt;How we built a serverless "stonks" checker API for Wall Street Bets&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/how-to-save-hundreds-hours-debugging-lambda/"&gt;How to save hundreds of hours on Lambda debugging?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/failure-and-threat-detection-serverless/"&gt;Bulletproofing serverless applications with failure and threat detection&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Spiral lifecycle model Part 1</title>
      <author>Aatmaj</author>
      <pubDate>Mon, 11 Oct 2021 12:39:34 +0000</pubDate>
      <link>https://dev.to/aatmaj/spiral-lifecycle-model-part-1-4cjh</link>
      <guid>https://dev.to/aatmaj/spiral-lifecycle-model-part-1-4cjh</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;The spiral model of development is a really good model that helps you develop faster. In the spiral model, you start small and expand the scope of the project in increments. You expand the scope only after you have reduced the risks for the next increment to an acceptable level. Today let us learn more about this model&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;The spiral model is a risk oriented model that breaks a software project up into mini projects. Each mini-project addresses one or more major risks until al the major risks have been addressed. &lt;br&gt;
Risks refers to factors like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Poorly understood requirements&lt;/li&gt;
&lt;li&gt;Poorly understood architecture&lt;/li&gt;
&lt;li&gt;Potential requirement problems&lt;/li&gt;
&lt;li&gt;Problems in underlying technology.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After all the risks have been addressed, the waterfall model terminates as a waterfall lifecycle would.&lt;/p&gt;

&lt;p&gt;The spiral model is also called as the 'cinnamon roll' model.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S0ZVdCVH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p504di87sbh4wv9k8yzu.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S0ZVdCVH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p504di87sbh4wv9k8yzu.jpeg" alt="Cinnamon roll"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;the basic idea about the diagram is that you start on a small scale in the middle of the spine, explore the risks make a plan to handle the risks, and then commit to an approach for the next iteration.&lt;/p&gt;

&lt;p&gt;Each iteration moves the project into a larger scale. You roll up one layer of the cinnamon roll, check to be sure that it's what's  you wanted., and then you begin work for the next layer.&lt;/p&gt;

&lt;p&gt;Each iteration involves the six steps below&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Determine objectives, alternatives, and constraints. &lt;/li&gt;
&lt;li&gt;identify and resolve risks&lt;/li&gt;
&lt;li&gt;Evaluate alternatives&lt;/li&gt;
&lt;li&gt;Plan the next iteration. &lt;/li&gt;
&lt;li&gt;Commit to an approach for the next iteration.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the spiral model, the early decisions are the cheapest. You spend less developing the concept of operation  than you do developing the requirements than you do developing the design, implementing the product, and testing it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can tailor the iterations of the model as per your requirements and the needs of the project.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>programming</category>
    </item>
    <item>
      <title>SpreadArray CSharp</title>
      <author>Alexandre Freire</author>
      <pubDate>Mon, 11 Oct 2021 12:39:22 +0000</pubDate>
      <link>https://dev.to/alexandrefreire/spreadarray-csharp-5136</link>
      <guid>https://dev.to/alexandrefreire/spreadarray-csharp-5136</guid>
      <description>&lt;p&gt;I decided to publish an extension that simulates a javascript spread function. &lt;/p&gt;

&lt;p&gt;When I started using c # I missed some features that I used in javascript, I know they are different things and that c # is a strongly typed language. &lt;/p&gt;

&lt;p&gt;But I'll leave the link to the package that I created and use in some projects, and that solves some problems.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#spread-array-csharp"&gt;
  &lt;/a&gt;
  Spread Array CSharp
&lt;/h2&gt;

&lt;p&gt;The spread operator is denoted by three dots (…)(popular in javascript). · The spread operator unpacks elements of iterable objects such as arrays, sets, and maps into a list.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Alexandre"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;userAddress&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;UserAddress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Porto Velho"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Brasil"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;contact&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Contact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"my@mail.com"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;dynamic&lt;/span&gt; &lt;span class="n"&gt;dynamicUserProfile&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ExpandoObject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;dynamicUserProfile&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Spread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userAddress&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;Spread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contact&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;/// Example 1: preparing to json response&lt;/span&gt;
&lt;span class="n"&gt;JObject&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FromObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;dynamicUserProfile&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;/// Example 2: setting value on richTextBox from windows application&lt;/span&gt;
&lt;span class="n"&gt;richTextBox1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SelectToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"dynamicUserProfile"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserAddress&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;UserAddress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;City&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;Country&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;City&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Country&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Contact&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Contact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Email&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>csharp</category>
    </item>
    <item>
      <title>Some of the Best Open-Source Projects to make your life easier.</title>
      <author>Sachin Chaurasiya</author>
      <pubDate>Mon, 11 Oct 2021 12:28:47 +0000</pubDate>
      <link>https://dev.to/sachinchaurasiya/some-of-the-best-open-source-projects-to-make-your-life-easier-1lia</link>
      <guid>https://dev.to/sachinchaurasiya/some-of-the-best-open-source-projects-to-make-your-life-easier-1lia</guid>
      <description>&lt;p&gt;We all know javascript is the language using which we can build any type of application whether it is the web, mobile or desktop. from its birth javascript has evolved so much to make developer life easier. especially in the frontend world javascript is king. there are so many projects built on top of javascript some of them are closed source and some of them are open source. &lt;a href="https://reactjs.org/"&gt;Reactjs&lt;/a&gt; is one of them. so in this article will be sharing some of the best open-source projects which you can use in your next Reactjs project.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://mui.com/"&gt;Material UI&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Material UI is Based on Google material design and it comes with components for faster and easier web development.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://react-select.com/home"&gt;React-Select&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There might be multiple use cases where we would need this library as it comes with A flexible and beautiful Select Input control for ReactJS with multiselect, autocomplete, async and creatable support.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/haoxins/react-flatpickr"&gt;React Flatpickr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Useful library for building Select date Picker.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://betterstack.dev/projects/react-tag-input/"&gt;React Tag Input&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are building an application with a tag system then this library will be definitely useful. React Tag Input is a robust, minimal and performant input field for creating multiple tags.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/glennreyes/react-countup"&gt;React Countup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This library Provide a Configurable React Component wrapper around Countupjs. it's lightweight and can be used to quickly create animations that display numerical data in a more interesting way.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://fullcalendar.io/"&gt;FullCalendar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you are building an application that involves events management then this library would be got fit for that. you can integrate this library with any javascript framework.&lt;/p&gt;

&lt;p&gt;I hope you all find this helpful. Let me know in the comment section which are the other libraries that makes your life easier.&lt;/p&gt;

&lt;p&gt;Thank you for reading.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Being girly doesn't mean you can't be serious or professional</title>
      <author>whatminjacodes [she/they]</author>
      <pubDate>Mon, 11 Oct 2021 12:26:40 +0000</pubDate>
      <link>https://dev.to/whatminjacodes/being-girly-doesn-t-mean-you-can-t-be-serious-or-professional-59a3</link>
      <guid>https://dev.to/whatminjacodes/being-girly-doesn-t-mean-you-can-t-be-serious-or-professional-59a3</guid>
      <description>&lt;p&gt;It's okay for girls to like pink, wear a dress and want a family. But it's also okay to not want any of that.&lt;/p&gt;

&lt;p&gt;Let's not assume what girls want and let them do whatever they want without pressuring them to fit a predefined mold! It took me a long time to be okay with my girly side after hearing for so long that being girly meant you can't be taken seriously and that girly girls are annoying.&lt;/p&gt;

&lt;p&gt;I have always been a girly girl and liked cute and pink things. But for example at one point I was too insecure to be myself and I stopped wearing a gorgeous pink jacket that I loved a lot. I got my self-confidence back too late and I had already overgrown that jacket and wasn't able to wear it anymore. At that point I decided it's not worth missing something you like just because of someone's opinion. But it's easier to say that than actually live like that.&lt;/p&gt;

&lt;p&gt;There's still people who bully others for being too girly. Luckily I haven't really encountered that as much now that I'm an adult but I still have heard people talking behind my back how fake I am or that I have some secret motive for behaving like I do.&lt;/p&gt;

&lt;p&gt;All this because I am a joyous, kind and caring person and I'm not afraid to show it. This is a constant inner fight for me to be able to continue being truly myself. On days when I feel insecure, I also hide this bubbly personality of mine and try to blend in with others.&lt;/p&gt;

&lt;p&gt;But I'm trying my best to show my girly side more often and help change the image of a girl to be seen as something positive. Because that's what it is.&lt;/p&gt;

&lt;p&gt;Happy international day of the girls!&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>womenintech</category>
    </item>
    <item>
      <title>How to square numbers in Python?</title>
      <author>hrishikesh1990</author>
      <pubDate>Mon, 11 Oct 2021 12:11:42 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/how-to-square-numbers-in-python-1k53</link>
      <guid>https://dev.to/hrishikesh1990/how-to-square-numbers-in-python-1k53</guid>
      <description>&lt;p&gt;In this short tutorial, we look at how we can use Python to square a number. We look at all the various methods and break them down for you.&lt;/p&gt;

&lt;p&gt;This tutorial is a part of our initiative at &lt;a href="https://flexiple.com/"&gt;Flexiple&lt;/a&gt;, to write short curated tutorials around often used or interesting concepts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents-python-square"&gt;
  &lt;/a&gt;
  Table of Contents- Python Square
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#squaring-numbers-in-python"&gt;Squaring numbers in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python-square-using-"&gt;Python Square using **&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#squaring-using-the-pow-method"&gt;Squaring using the pow() method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#multiplying-the-number-by-itself"&gt;Multiplying the number by itself&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#closing-thoughts-python-square"&gt;Closing thoughts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#squaring-numbers-in-python"&gt;
  &lt;/a&gt;
  Squaring numbers in Python:
&lt;/h2&gt;

&lt;p&gt;The square of a number is the result of multiplying the number by itself. In Python, we deal with a lot of square numbers - Data, Financial Analysis use them the most. Because of this high usage Python provides three methods to square a number: they are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using the Exponent Operator&lt;/li&gt;
&lt;li&gt;Multiplying the number by itself (n*n)&lt;/li&gt;
&lt;li&gt;Using pow()
The last method can also be used with the math module which has a lot of other handy mathematical functions as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#python-square-using-"&gt;
  &lt;/a&gt;
  Python Square using **:
&lt;/h2&gt;

&lt;p&gt;The Python exponent operator ** is used to perform an exponential calculation. It takes in 2 real numbers. The syntax is as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;power&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here “N” is the number and “power” is the number of times you would like to exponent the number. Since we are looking to square the number, we can pass 2 as the power. Similarly, If we were looking to cube the value we would pass 3.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-and-explanation"&gt;
  &lt;/a&gt;
  Code and Explanation:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;n2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code snippet returns the following values which are the square of the entered values. This is how you use exponents to calculate the square of a number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#squaring-using-the-pow-method"&gt;
  &lt;/a&gt;
  Squaring using the pow() method:
&lt;/h2&gt;

&lt;p&gt;The pow() method is another method in Python that can be used to square a number. This method also takes in two arguments in the following syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method is equivalent to the exponent methods and you can choose which method you would like to use. The pow() method supports a third argument which I would recommend reading about once you have practiced using it with two arguments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-and-explanation"&gt;
  &lt;/a&gt;
  Code and Explanation:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;n2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similar to the method above, the square values of the argument are returned. This is how you use the pow() method to calculate the square of a number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As mentioned above the pow() method can also be used in the math module, however, it needs to be imported before it is used. Hence I would not recommend using it unless you are intending to use other methods from the module as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#multiplying-the-number-by-itself"&gt;
  &lt;/a&gt;
  Multiplying the number by itself:
&lt;/h2&gt;

&lt;p&gt;This is the most fundamental method of calculating the square of a number. Here we square the number by multiplying the number by itself.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-and-explanation"&gt;
  &lt;/a&gt;
  Code and Explanation:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;n2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code returns the square of the number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#closing-thoughts-python-square"&gt;
  &lt;/a&gt;
  Closing thoughts - Python Square
&lt;/h2&gt;

&lt;p&gt;All the method methods above can be used to calculate the Python square of a number. Although 3 works well, I personally prefer using methods 1 or 2.&lt;/p&gt;

&lt;p&gt;Once you are done with the tutorial I would recommend that you check out the Python square root method that is used to find the square root of a number.&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>🌈 Wonderful tools for creating secondary visual elements for your website</title>
      <author>Vic Shóstak</author>
      <pubDate>Mon, 11 Oct 2021 12:00:59 +0000</pubDate>
      <link>https://dev.to/koddr/wonderful-tools-for-creating-secondary-visual-elements-for-your-website-3bj0</link>
      <guid>https://dev.to/koddr/wonderful-tools-for-creating-secondary-visual-elements-for-your-website-3bj0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hey, DEV people! 👋&lt;/p&gt;

&lt;p&gt;Here's a small selection of time-tested online tools that can seriously reduce the time it takes to develop a visual concept for your next website (and beyond). All tools will be aimed at creating secondary visual additions to the UI, such as &lt;strong&gt;waves&lt;/strong&gt;, &lt;strong&gt;blobs&lt;/strong&gt;, &lt;strong&gt;patterns&lt;/strong&gt; and animated &lt;strong&gt;backgrounds&lt;/strong&gt; &amp;amp; &lt;strong&gt;gradients&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;👌 &lt;strong&gt;Disclamer:&lt;/strong&gt; I usually don't care for articles in this style, but there are too many of these tools accumulated to do separate articles on each. So don't worry, I will continue to delight you with in-depth articles and not go off to “Top X”-like articles!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OK, here we go! 👇&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  📝 Table of contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#blobbb"&gt;Blobbb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#animated-gradient-background-generator"&gt;Animated Gradient Background Generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#svg-shape-dividers-creator"&gt;SVG Shape Dividers Creator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#wicked-backgrounds"&gt;Wicked Backgrounds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#basic-pattern-repository"&gt;Basic Pattern Repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#figen"&gt;Figen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blobbb"&gt;
  &lt;/a&gt;
  Blobbb
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://www.blobbb.fun/?utm_source=dev.to/koddr"&gt;Blobbb&lt;/a&gt; project is an excellent example of the most convenient tool for creating random blobs with comprehensive settings.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2g6Q124x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dx6140ljb3okhipydl8e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2g6Q124x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dx6140ljb3okhipydl8e.png" alt="blobbb"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There aren't many options, but that's really all you need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fill color;&lt;/li&gt;
&lt;li&gt;Stroke color;&lt;/li&gt;
&lt;li&gt;Gradient color;&lt;/li&gt;
&lt;li&gt;Presets of patterns;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example “copy-paste” output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 200 200"&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"#673ab7"&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M71.3,-23.4C80.9,6.4,69.3,42.9,44.3,61.1C19.4,79.2,-19,79,-36.2,63.3C-53.4,47.6,-49.4,16.4,-39.9,-13.4C-30.3,-43.1,-15.2,-71.5,7.8,-74C30.8,-76.6,61.7,-53.3,71.3,-23.4Z"&lt;/span&gt;  &lt;span class="na"&gt;transform=&lt;/span&gt;&lt;span class="s"&gt;"translate(100 100)"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#animated-gradient-background-generator"&gt;
  &lt;/a&gt;
  Animated Gradient Background Generator
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://animated-gradient-background-generator.netlify.app/?utm_source=dev.to/koddr"&gt;Animated Gradient Background Generator&lt;/a&gt;. The name of this tool speaks for itself. Completely based on CSS features, no JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DDJgmXbj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k07p3rk37xsy8hxi4o13.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DDJgmXbj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k07p3rk37xsy8hxi4o13.png" alt="animated gradient background generator"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Few options, but it's even good, as this animated background is much easier to implement in an existing website:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set of colors;&lt;/li&gt;
&lt;li&gt;Angle of color movement;&lt;/li&gt;
&lt;li&gt;Speed of animation;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example “copy-paste” output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.gradient-background&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;300deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;deepskyblue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;darkviolet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;180%&lt;/span&gt; &lt;span class="m"&gt;180%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gradient-animation&lt;/span&gt; &lt;span class="m"&gt;18s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;gradient-animation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#svg-shape-dividers-creator"&gt;
  &lt;/a&gt;
  SVG Shape Dividers Creator
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://shapedividers.com/?utm_source=dev.to/koddr"&gt;SVG Shape Dividers Creator&lt;/a&gt; is a really useful tool for generating content splitter waves (and more) for your website. It's based on plain CSS and can easily be built into any project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fLWBYRlY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fckoi4lb2ufecfiu3kjv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fLWBYRlY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fckoi4lb2ufecfiu3kjv.png" alt="svg shape dividers creator"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A huge number of options for you to choose from:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wave position &amp;amp; color;&lt;/li&gt;
&lt;li&gt;Short &amp;amp; Long axis;&lt;/li&gt;
&lt;li&gt;Animation duration;&lt;/li&gt;
&lt;li&gt;Support mobile and tablet in-app views;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And my favorite feature is over 35 free wave patterns like this one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_GMeMdMX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7sjyl0vzje8p2qhgag5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_GMeMdMX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7sjyl0vzje8p2qhgag5.png" alt="wave patterns"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example “copy-paste” output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.shapedividers_com-9933&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.shapedividers_com-9933&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'shape divider from ShapeDividers.com'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;pointer-events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;no-repeat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-0.1vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-0.1vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-0.1vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-0.1vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;90px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;'data:image/svg+xml;
    charset=utf8, &amp;lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 35.28 2.17" preserveAspectRatio="none"&amp;gt;&amp;lt;path d="M0 .5c3.07.55 9.27-.42 16.14 0 6.88.4 13.75.57 19.14-.11V0H0z" fill="%23fbd8c2"/&amp;gt;&amp;lt;path d="M0 1c3.17.8 7.29-.38 10.04-.55 2.75-.17 9.25 1.47 12.67 1.3 3.43-.17 4.65-.84 7.05-.87 2.4-.02 5.52.88 5.52.88V0H0z" opacity=".5" fill="%23fbd8c2"/&amp;gt;&amp;lt;path d="M0 1.85c2.56-.83 7.68-.3 11.79-.42 4.1-.12 6.86-.61 9.58-.28 2.73.33 5.61 1.17 8.61 1 3-.19 4.73-.82 5.3-.84V.1H0z" opacity=".5" fill="%23fbd8c2"/&amp;gt;&amp;lt;/svg&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;2100px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.shapedividers_com-9933&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2vw&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;90px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wicked-backgrounds"&gt;
  &lt;/a&gt;
  Wicked Backgrounds
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://wickedbackgrounds.com/?utm_source=dev.to/koddr"&gt;Wicked Backgrounds&lt;/a&gt; is a tool for creating beautiful and fully customizable wavy SVG backgrounds. The authors did an impressive job on this online tool, so it has a nice design and UX.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MGmGE1YK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/riaglx6ccd91mooayfkj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MGmGE1YK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/riaglx6ccd91mooayfkj.png" alt="wicked backgrounds"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are not as many options as I would have liked (for example, &lt;em&gt;I would still like to control the curvature of each of the waves&lt;/em&gt;), but for most tasks this is enough:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wave count;&lt;/li&gt;
&lt;li&gt;Color with color mode;&lt;/li&gt;
&lt;li&gt;Angle of wave rotation;&lt;/li&gt;
&lt;li&gt;Randomize wave's shape;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example “copy-paste” output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;"1.1"&lt;/span&gt; &lt;span class="na"&gt;xmlns:xlink=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/1999/xlink"&lt;/span&gt; &lt;span class="na"&gt;xmlns:svgjs=&lt;/span&gt;&lt;span class="s"&gt;"http://svgjs.dev/svgjs"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 1920 1080"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;rect&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"1920"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"1080"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"#000000"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/rect&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;g&lt;/span&gt; &lt;span class="na"&gt;transform=&lt;/span&gt;&lt;span class="s"&gt;"matrix(1.15,0,0,1.15,-133.8815414428709,-81)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M0,-1080C-16.109467690272208,-987.3534782755676,-76.3233648777778,-696.694101273433,-96.65680614163324,-524.1208696534056C-116.99024740548867,-351.54763803337823,-154.87768348144857,-186.2317926518452,-122.0006475831326,-44.56061027983549C-89.12361168481664,97.11057209217424,79.74857135483008,205.34394482433856,100.6054092482625,325.9062245786526C121.46224714169493,446.46850433296663,9.837258542218564,527.7054581855967,3.1403797774619306,678.8130682460487C-3.5564989872947024,829.9206783065007,62.322865374741006,1081.166449881082,60.424136659722706,1232.5518849413647C58.525407944704405,1383.9373200016475,1.8186969306392573,1432.5509927646397,-8.25199251264786,1587.1256786077456C-18.322681955934975,1741.7003644508516,-1.37533208544131,2064.5209464346244,0,2160L 1920 2160 L 1920 -1080 Z"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"url(&amp;amp;quot;#SvgjsLinearGradient1000&amp;amp;quot;)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M320,-1080C316.5479274166343,-988.0283947909271,306.52547890189555,-735.2750389899924,299.28756449980597,-528.1703687455629C292.0496500977164,-321.0656985011334,261.21331693651325,-72.3552689085293,276.57251358746254,162.62802146657714C291.9317102384118,397.6113118416836,400.5251410555341,654.6011081064328,391.44274440550174,881.7293735050758C382.3603477554694,1108.857638903719,233.98525775485209,1312.352509442615,222.07813368726846,1525.3976138584358C210.17100961968484,1738.4427182742565,303.67968894787805,2054.232935643073,320,2160L 1920 2160 L 1920 -1080 Z"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"url(&amp;amp;quot;#SvgjsLinearGradient1001&amp;amp;quot;)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M640,-1080C649.4269886515594,-936.4225056950557,686.3731109342367,-488.6591163963009,696.5619319093564,-218.53503417033437C706.7507528844761,51.589048055632134,720.4152486002066,295.2526065023857,701.1329258507185,540.7444933557989C681.8506031012304,786.2363802092121,591.0568163875477,984.5403691761117,580.867995412428,1254.4162869501451C570.6791744373082,1524.2922047241786,630.1446659020713,2009.0693811583576,640,2160L 1920 2160 L 1920 -1080 Z"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"url(&amp;amp;quot;#SvgjsLinearGradient1002&amp;amp;quot;)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M960,-1080C972.2722028771731,-999.3689936463607,1044.1924579458341,-778.7088223996913,1033.6332172630384,-596.2139618781637C1023.0739765802426,-413.7191013566361,918.9245023444137,-189.21592185427187,896.6445559032254,14.96916312916585C874.3646094620372,219.15424811260357,899.6643029716962,467.86234802809037,899.9535386159089,628.8965480224628C900.2427742601216,789.9307480168352,904.6358103185602,827.5961407572682,898.3799697685013,981.1743630954002C892.1241292184424,1134.7525854335322,852.1484902769726,1353.8949425671544,862.4184953155557,1550.3658820512544C872.6885003541388,1746.8368215353544,943.7364158859259,2058.394313675209,960,2160L 1920 2160 L 1920 -1080 Z"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"url(&amp;amp;quot;#SvgjsLinearGradient1003&amp;amp;quot;)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M1280,-1080C1294.0939719360897,-1011.9782300101334,1355.3563163190304,-811.9909292764734,1364.5638316165382,-671.8693800608005C1373.771346914046,-531.7478308451276,1328.2045657020783,-382.7469685563632,1335.2450917850465,-239.27070470596277C1342.2856178680147,-95.79444085556233,1406.6454171746414,37.69214417447009,1406.8069881143476,188.98820304160216C1406.968559054054,340.28426190873427,1348.3747769475092,507.82694083248896,1336.2145174232842,668.5056484968296C1324.0542578990592,829.1843561611703,1361.84281542639,971.2505198492404,1333.8454309689978,1153.0604490276464C1305.8480465116056,1334.8703782060525,1177.2044491737645,1591.5419650718736,1168.2302106789316,1759.365223567266C1159.2559721840987,1927.1884820626583,1261.371701779822,2093.227537261211,1280,2160L 1920 2160 L 1920 -1080 Z"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"url(&amp;amp;quot;#SvgjsLinearGradient1004&amp;amp;quot;)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M1600,-1080C1613.673863873465,-1017.7817217047276,1698.5138879669723,-846.6548339269276,1682.0431832407908,-706.6903302283656C1665.5724785146092,-566.7258265298036,1511.9988180998816,-370.06959119239764,1501.1757716429108,-240.21297780862784C1490.35272518594,-110.35636442485807,1599.144792699853,-59.34818674406321,1617.1049044989652,72.449350074253C1635.0650162980774,204.24688689256922,1603.7020308745543,417.14525790809193,1608.9364424375835,550.5722431012696C1614.1708540006127,683.9992282944472,1648.9919203907264,718.8597923126912,1648.5113738771402,873.0112612333191C1648.030827363554,1027.1627301539472,1629.3649936216461,1340.8009575005751,1606.0531633560663,1475.4810566250376C1582.7413330904865,1610.1611557495,1509.6492528430053,1567.0053654176002,1508.640392283661,1681.091855980094C1507.6315317243166,1795.1783465425876,1584.7733987139436,2080.1819759966825,1600,2160L 1920 2160 L 1920 -1080 Z"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"url(&amp;amp;quot;#SvgjsLinearGradient1005&amp;amp;quot;)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/g&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;defs&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;linearGradient&lt;/span&gt; &lt;span class="na"&gt;x1=&lt;/span&gt;&lt;span class="s"&gt;"0.1"&lt;/span&gt; &lt;span class="na"&gt;y1=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;x2=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;y2=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"SvgjsLinearGradient1000"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;stop&lt;/span&gt; &lt;span class="na"&gt;stop-color=&lt;/span&gt;&lt;span class="s"&gt;"#000000"&lt;/span&gt; &lt;span class="na"&gt;offset=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/stop&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;stop&lt;/span&gt; &lt;span class="na"&gt;stop-color=&lt;/span&gt;&lt;span class="s"&gt;"#000000"&lt;/span&gt; &lt;span class="na"&gt;offset=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/stop&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/linearGradient&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;linearGradient&lt;/span&gt; &lt;span class="na"&gt;x1=&lt;/span&gt;&lt;span class="s"&gt;"0.1"&lt;/span&gt; &lt;span class="na"&gt;y1=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;x2=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;y2=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"SvgjsLinearGradient1001"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;stop&lt;/span&gt; &lt;span class="na"&gt;stop-color=&lt;/span&gt;&lt;span class="s"&gt;"#2a2a2a"&lt;/span&gt; &lt;span class="na"&gt;offset=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/stop&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;stop&lt;/span&gt; &lt;span class="na"&gt;stop-color=&lt;/span&gt;&lt;span class="s"&gt;"#2a2a2a"&lt;/span&gt; &lt;span class="na"&gt;offset=&lt;/span&gt;&lt;span class="s"&gt;"0.16666666666666666"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/stop&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/linearGradient&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;linearGradient&lt;/span&gt; &lt;span class="na"&gt;x1=&lt;/span&gt;&lt;span class="s"&gt;"0.1"&lt;/span&gt; &lt;span class="na"&gt;y1=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;x2=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;y2=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"SvgjsLinearGradient1002"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;stop&lt;/span&gt; &lt;span class="na"&gt;stop-color=&lt;/span&gt;&lt;span class="s"&gt;"#555555"&lt;/span&gt; &lt;span class="na"&gt;offset=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/stop&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;stop&lt;/span&gt; &lt;span class="na"&gt;stop-color=&lt;/span&gt;&lt;span class="s"&gt;"#555555"&lt;/span&gt; &lt;span class="na"&gt;offset=&lt;/span&gt;&lt;span class="s"&gt;"0.3333333333333333"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/stop&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/linearGradient&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;linearGradient&lt;/span&gt; &lt;span class="na"&gt;x1=&lt;/span&gt;&lt;span class="s"&gt;"0.1"&lt;/span&gt; &lt;span class="na"&gt;y1=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;x2=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;y2=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"SvgjsLinearGradient1003"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;stop&lt;/span&gt; &lt;span class="na"&gt;stop-color=&lt;/span&gt;&lt;span class="s"&gt;"#7f7f7f"&lt;/span&gt; &lt;span class="na"&gt;offset=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/stop&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;stop&lt;/span&gt; &lt;span class="na"&gt;stop-color=&lt;/span&gt;&lt;span class="s"&gt;"#7f7f7f"&lt;/span&gt; &lt;span class="na"&gt;offset=&lt;/span&gt;&lt;span class="s"&gt;"0.5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/stop&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/linearGradient&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;linearGradient&lt;/span&gt; &lt;span class="na"&gt;x1=&lt;/span&gt;&lt;span class="s"&gt;"0.1"&lt;/span&gt; &lt;span class="na"&gt;y1=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;x2=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;y2=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"SvgjsLinearGradient1004"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;stop&lt;/span&gt; &lt;span class="na"&gt;stop-color=&lt;/span&gt;&lt;span class="s"&gt;"#aaaaaa"&lt;/span&gt; &lt;span class="na"&gt;offset=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/stop&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;stop&lt;/span&gt; &lt;span class="na"&gt;stop-color=&lt;/span&gt;&lt;span class="s"&gt;"#aaaaaa"&lt;/span&gt; &lt;span class="na"&gt;offset=&lt;/span&gt;&lt;span class="s"&gt;"0.6666666666666666"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/stop&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/linearGradient&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;linearGradient&lt;/span&gt; &lt;span class="na"&gt;x1=&lt;/span&gt;&lt;span class="s"&gt;"0.1"&lt;/span&gt; &lt;span class="na"&gt;y1=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;x2=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;y2=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"SvgjsLinearGradient1005"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;stop&lt;/span&gt; &lt;span class="na"&gt;stop-color=&lt;/span&gt;&lt;span class="s"&gt;"#d4d4d4"&lt;/span&gt; &lt;span class="na"&gt;offset=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/stop&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;stop&lt;/span&gt; &lt;span class="na"&gt;stop-color=&lt;/span&gt;&lt;span class="s"&gt;"#d4d4d4"&lt;/span&gt; &lt;span class="na"&gt;offset=&lt;/span&gt;&lt;span class="s"&gt;"0.8333333333333334"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/stop&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/linearGradient&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/defs&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-pattern-repository"&gt;
  &lt;/a&gt;
  Basic Pattern Repository
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://patterns.helloyes.dev/?utm_source=dev.to/koddr"&gt;Basic Pattern Repository&lt;/a&gt; is a just SVG for your delight! A distinctive feature of the project is the ability to load the necessary pattern through the API. This approach not only saves development time, but also keeps your CSS code untouched.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b7td0gS0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/totcfvxqxlzx1w6i6pj9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b7td0gS0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/totcfvxqxlzx1w6i6pj9.png" alt="basic pattern repository"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To get a JSON response containing all available patterns as entries:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;https://patterns.helloyes.dev/api/patterns.json
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To get a JSON response for a specific pattern:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;https://patterns.helloyes.dev/api/pattern/&amp;lt;PATTERN NUMBER&amp;gt;&lt;/span&gt;.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#figen"&gt;
  &lt;/a&gt;
  Figen
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://figen.cc/?utm_source=dev.to/koddr"&gt;Figen&lt;/a&gt; is a free online post cover and background generator tool for social media, like Twitter, Facebook, Instagram, LinkedIn and so on. &lt;/p&gt;

&lt;p&gt;Saves a lot of time, and it looks perfect! I, personally, use it for some of my Twitter posts and placeholders for projects.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;😉 &lt;strong&gt;Note:&lt;/strong&gt; By the way, &lt;a href="https://twitter.com/true_koddr"&gt;follow me&lt;/a&gt; to keep up to date with new articles!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2beqPUu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sa0l1m7uvg9z4ccv6pd8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2beqPUu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sa0l1m7uvg9z4ccv6pd8.png" alt="figen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The settings are wealthy and include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Image size with presets;&lt;/li&gt;
&lt;li&gt;Shapes support;&lt;/li&gt;
&lt;li&gt;Background and gradient colors;&lt;/li&gt;
&lt;li&gt;Upload photo for background;&lt;/li&gt;
&lt;li&gt;Text editor;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unfortunately, the format of the tool suggests using it immediately in applications, so the output will be an optimized PNG file rather than SVG code. For example, this one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ICdhJ-ud--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h60gdxd9ff8l9rbzx1c9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ICdhJ-ud--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h60gdxd9ff8l9rbzx1c9.png" alt="figen output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#photos-and-videos-by"&gt;
  &lt;/a&gt;
  Photos and videos by
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Tools authors and Vic Shóstak&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ps"&gt;
  &lt;/a&gt;
  P.S.
&lt;/h2&gt;

&lt;p&gt;If you want more articles like this on this blog, then post a comment below and subscribe to me. Thanks! 😘&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>opensource</category>
      <category>uiweekly</category>
    </item>
  </channel>
</rss>
