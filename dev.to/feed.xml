<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Fun with Micro-frontend in a single-spa wayüí°</title>
      <author>Nitin Reddy</author>
      <pubDate>Sun, 11 Jul 2021 13:52:02 +0000</pubDate>
      <link>https://dev.to/nitinreddy3/fun-with-micro-frontend-in-a-single-spa-way-1iok</link>
      <guid>https://dev.to/nitinreddy3/fun-with-micro-frontend-in-a-single-spa-way-1iok</guid>
      <description>&lt;p&gt;üèÉ‚Äç‚ôÇÔ∏è&lt;br&gt;
To give everyone the context this post will be based on the experiments which I used to run the multiple front-end applications under a vanilla js container app.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-a-microfrontend-application"&gt;
  &lt;/a&gt;
  What is a Micro-frontend application?
&lt;/h2&gt;

&lt;p&gt;This application is based on a &lt;a href="https://single-spa.js.org/"&gt;single-spa&lt;/a&gt; framework that allows you to run multiple front-end applications under the same route. Things to notice related to the Micro-frontend app&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deploy the micro front-end applications independently.&lt;/li&gt;
&lt;li&gt;Without re-writing the existing application, you can create a new application with the new framework.&lt;/li&gt;
&lt;li&gt;Lazy loading the code base for improved performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-requisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Knowledge of any JavaScript framework&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://single-spa.js.org/docs/create-single-spa"&gt;single-spa&lt;/a&gt; should be globally installed in your machine&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#build-the-application"&gt;
  &lt;/a&gt;
  Build the application
&lt;/h2&gt;

&lt;p&gt;We will create three applications using the &lt;a href="https://single-spa.js.org/"&gt;single-spa&lt;/a&gt; framework that are as follow:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;root-config&lt;/li&gt;
&lt;li&gt;react-app&lt;/li&gt;
&lt;li&gt;angular-app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will render the react and angular apps based on the routes.&lt;br&gt;
So if the route is&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;/react&lt;/strong&gt; then react app will load&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;/angular&lt;/strong&gt; then the angular app will load&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1:
&lt;/h3&gt;

&lt;p&gt;Create a folder where you want to put all three applications together.&lt;br&gt;
Navigate to the root of the folder and run the following command and follow the instructions as provided in the image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;single&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;spa&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kPg_VX4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lx31qtibhcdfpf9gkc9g.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kPg_VX4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lx31qtibhcdfpf9gkc9g.PNG" alt="rootConfig"&gt;&lt;/a&gt;&lt;br&gt;
The root-config setup will complete in sometime.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2:
&lt;/h3&gt;

&lt;p&gt;Now we will create a react application using the single-spa. So in the same root folder run the following command and follow the instructions as provided in the image:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;single&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;spa&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LO_Ey110--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4g81c3xyctowwcses5m.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LO_Ey110--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4g81c3xyctowwcses5m.PNG" alt="reactApplication"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3:
&lt;/h3&gt;

&lt;p&gt;Now we will create a angular application using the single-spa. So in the same root folder run the following command and follow the instructions as provided in the image:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;single&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;spa&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bl-tTE85--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdwlc3r9skiau169kkvp.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bl-tTE85--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdwlc3r9skiau169kkvp.PNG" alt="angularApplication"&gt;&lt;/a&gt;&lt;br&gt;
Few more agreements for the angular app üòÄ&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EdJRgksj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aj8opzsl26inbr7avbo2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EdJRgksj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aj8opzsl26inbr7avbo2.PNG" alt="angularApp2"&gt;&lt;/a&gt;&lt;br&gt;
You need to additionally install few dependencies for the angular project&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;D&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;angular&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;builders&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;custom&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;webpack&lt;/span&gt; &lt;span class="nx"&gt;single&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;spa&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  Step 4:
&lt;/h3&gt;

&lt;p&gt;Now we will add few minor tweaks in the files present in our newly created projects :-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;root-config&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Update the imports in the index.ejs
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;imports&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@orgname/root-config&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;//localhost:9000/orgname-root-config.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@orgname/react-app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;//localhost:8080/orgname-react-app.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;angular-app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;//localhost:4200/main.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0JF7K1eE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/of3fydm8ubixf0tbd9q6.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0JF7K1eE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/of3fydm8ubixf0tbd9q6.PNG" alt="indexJS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Update the configuration file named as orgname-root-config.ts
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kpwndchZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pnpor0a8xsvp599xz448.PNG" alt="configRoot"&gt;
&lt;/li&gt;
&lt;li&gt;Add the navigation bar in index.ejs inside the body
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navbar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;111&lt;/span&gt;&lt;span class="nx"&gt;D4A&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;align&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navbar&lt;/span&gt; &lt;span class="nx"&gt;ul&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;align&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navbar&lt;/span&gt; &lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navbar&lt;/span&gt; &lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navbar&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/style&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;navbar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;singleSpaNavigate('/react')&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;React&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;singleSpaNavigate('/angular')&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;Angular&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;react-app&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Update the root.component.tsx as below
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uESbC2QY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3d12eomu1qrnv7ljskv.PNG" alt="reactApp"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;angular-app&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the zonejs as a dependency in main.single-spa.ts
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kVF_CZ9u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ke3qnf31d0rpf93fhu1i.PNG" alt="zone"&gt;
&lt;/li&gt;
&lt;li&gt;Add { provide: APP_BASE_HREF, useValue: '/angular' } to the providers array in the app.module.ts and import APP_BASE_HREF from @angular/common module
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6AuROqYB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dn0a2rkszgwee9c2dxz.PNG" alt="appHref"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#step-5"&gt;
  &lt;/a&gt;
  Step 5:
&lt;/h3&gt;

&lt;p&gt;Run the applications &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;root-config
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The root-config app will be running on &lt;a href="http://localhost:9000"&gt;http://localhost:9000&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;react-app
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The react-app will be running on &lt;a href="http://locahost:8080"&gt;http://locahost:8080&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;angular-app
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="nx"&gt;serve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;single&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;spa&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;angular&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The angular-app will be running on &lt;a href="http://localhost:4200"&gt;http://localhost:4200&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now when you navigate to &lt;a href="http://localhost:9000"&gt;http://localhost:9000&lt;/a&gt; you should see&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zVvUA8Kx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2i0rf6agkmy88usybohh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zVvUA8Kx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2i0rf6agkmy88usybohh.PNG" alt="root"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you click on React you should see&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cqCCDhdG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2nkug5xo68aqwwnvship.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cqCCDhdG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2nkug5xo68aqwwnvship.PNG" alt="react"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you click on Angular you should see&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J8vFJ6qX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/emq8t4ybg43viboo1aoh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J8vFJ6qX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/emq8t4ybg43viboo1aoh.PNG" alt="Angular"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When the route changes the new application mounts and the previously loaded application unmounts.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#github-repositories-for-different-applications"&gt;
  &lt;/a&gt;
  GitHub Repositories for different applications
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/nitinreddy3/root-config"&gt;root-config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nitinreddy3/react-app"&gt;react-app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nitinreddy3/angular-app"&gt;angular-app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nitinreddy3/react-ng-spa-app"&gt;react-ng-spa-app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#resources-to-catch-up-with-singlespa"&gt;
  &lt;/a&gt;
  Resources to catch up with single-spa
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://single-spa.js.org/"&gt;single-spa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLLUD8RtHvsAOhtHnyGx57EYXoaNsxGrTU"&gt;YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do let me know about your experience with single-spa, till then keep on learning new stuffs and enjoy!!!&lt;br&gt;
üìñ&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__user ltag__user__id__116606"&gt;
  
    .ltag__user__id__116606 .follow-action-button {
      background-color: #000000 !important;
      color: #00ffff !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/nitinreddy3" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j4L0-m8F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--CZ9LZr7_--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/116606/56e1ac95-0db3-4127-9071-102d90126001.jpg" alt="nitinreddy3 image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/nitinreddy3"&gt;Nitin Reddy&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/nitinreddy3"&gt;üí°Developer with eager to learn new tech, mainly into JavaScript, Dart, and Python. Loves to create tools for devs.üë®‚Äçüíª &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>microfrontend</category>
      <category>angular</category>
      <category>react</category>
    </item>
    <item>
      <title>Why Functional Programmers Avoid Exceptions </title>
      <author>Jesse Warden</author>
      <pubDate>Sun, 11 Jul 2021 12:56:25 +0000</pubDate>
      <link>https://dev.to/jesterxl/why-functional-programmers-avoid-exceptions-8oe</link>
      <guid>https://dev.to/jesterxl/why-functional-programmers-avoid-exceptions-8oe</guid>
      <description>&lt;p&gt;If you‚Äôre in a hurry, here is the 60 second version:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Fn0nWij8VEU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;My &lt;a href="https://jessewarden.com/2021/06/why-i-dont-use-async-await.html"&gt;previous article&lt;/a&gt; caused a variety of consternation, imperative patriotism, and lots of nuanced follow up. It reminded me of when &lt;a href="https://www.youtube.com/watch?v=36GT2zI8lVA"&gt;Richard Feynman was asked to define how magnets work and he refused&lt;/a&gt;. The perturbed interviewer postulated it was a reasonable question in hopes to understand why Mr. Feynman wouldn‚Äôt answer it. Richard Feynman covered a variety reasons, 2 of which were:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;you have to know the deeper reasons first before I can explain it&lt;/li&gt;
&lt;li&gt;I can‚Äôt cheat by using analogies that they themselves require deeper meanings to explain how _they_ work.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the case of avoiding async/await keywords in JavaScript, this makes a huge assumption you know about Functional Programming, Imperative, exception handling, how various languages approach it or don‚Äôt, the challenges between dynamic and strongly typed languages, and on and on.&lt;/p&gt;

&lt;p&gt;In this article, I wanted to remedy that and focus on the deeper reasons why, specifically being programmatic around how Functional Programmers get things done vs. the theory or why‚Äôs. This means understanding:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;why pure functions are preferred&lt;/li&gt;
&lt;li&gt;how they‚Äôre easier to test&lt;/li&gt;
&lt;li&gt;why you return errors as values using Result/Either types&lt;/li&gt;
&lt;li&gt;how you compose software using them&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pedantic-or-mathematical-answer"&gt;
  &lt;/a&gt;
  Pedantic or Mathematical Answer
&lt;/h2&gt;

&lt;p&gt;In investigating specifically why exceptions aren‚Äôt preferred in Functional Programming, I found out, they aren‚Äôt actually anti-functional programming. Worse, I found out many argue they do not violate pure functions or referential transparency with a lot of fascinating supporting evidence. A few argue they aren‚Äôt even side effects. It gets more confusing when you start comparing strictly typed functional languages vs. dynamic ones, or practicing FP in non-FP languages.&lt;/p&gt;

&lt;p&gt;In practice, exceptions, like side effects, seem to violate all the reasons why you use pure functions: Your code is predictable, easier to test, and results in better software. Exceptions ensure your code is unpredictable, reduces the value of the tests, and &lt;a href="https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare/"&gt;results in worse software&lt;/a&gt;. Yet that‚Äôs not &lt;a href="https://stackoverflow.com/questions/10703232/why-is-the-raising-of-an-exception-a-side-effect"&gt;what the mathematical definitions say&lt;/a&gt;. They don‚Äôt agree, nor disagree with my assertions; rather they just say that known exceptions do not violate referential transparency. Yes, there are detractors. Regardless, this really shook my faith.&lt;/p&gt;

&lt;p&gt;One could say these are pedantic; citing the true definition of referential transparency the mechanisms behind how Exceptions can or cannot negatively affect it, and thus possibly not violate pure function rules. However, this is the common problem between scientists and engineers: while scientists will give you the &lt;a href="https://tvtropes.org/pmwiki/pmwiki.php/Main/MathematiciansAnswer"&gt;Mathematicians Answer&lt;/a&gt;, they won‚Äôt help you do your actual job.&lt;/p&gt;

&lt;p&gt;And that‚Äôs what brought me back to reality. I‚Äôm not here to debate semantics, I‚Äôm here to deliver working software. However, I will cede to nuance if someone wishes to delve into the relationships between the mathematics behind these constructs. So far, preferring mathematical style programming over Imperative or Object Oriented seems to be going much better in delivering better results even if I don‚Äôt have a 100% iron clad understanding of all the nuances of the rules.&lt;/p&gt;

&lt;p&gt;The good news, despite finding deep nuance around exceptions and their complicated relationship with the mathematical purity of FP the industry, both FP and others (i.e. Go, Rust, Lua) has basically accepted the pragmatic truth: exceptions aren‚Äôt pure, act like side effects, and aren‚Äôt helpful when writing software. We already have a solution: returning the errors as values from functions, using Result (or Either) types.&lt;/p&gt;

&lt;p&gt;Keep in mind, the above has a Haskell bias. I encourage you to google ‚Äú&lt;a href="https://www.google.com/search?client=firefox-b-1-d&amp;amp;q=Exceptions+Considered+Harmful"&gt;Exceptions Considered Harmful&lt;/a&gt;‚Äù and see some of the horrors that can arise when exceptions put your stateful code (Java/C#/Python/JavaScript) into a bad state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prefer-pure-functions"&gt;
  &lt;/a&gt;
  Prefer Pure Functions
&lt;/h2&gt;

&lt;p&gt;When people say prefer pure functions it‚Äôs because of the following reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;more predictable&lt;/li&gt;
&lt;li&gt;easier to test&lt;/li&gt;
&lt;li&gt;easier to maintain&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What does that &lt;em&gt;mean,&lt;/em&gt; though?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#predictable"&gt;
  &lt;/a&gt;
  Predictable
&lt;/h3&gt;

&lt;p&gt;We say predictable because you call it and it returns a value. That‚Äôs it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isAnOk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;safeParseJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;{"foo": "bar"}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isAnError&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;safeParseJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you bring exceptions into it, you now have 2 possibilities: it either returns a value, or blows up.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// result is never used/set&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you combine functions together into programs, the program takes a value and returns a value. That‚Äôs it.&lt;/p&gt;

&lt;p&gt;When you bring exceptions into it, you now have X * Y possibilities: the program either returns a value, or X number of functions possibly explode in Y number of ways; it depends on how you wire the functions together.&lt;/p&gt;

&lt;p&gt;This exponential complexity shows just how unpredictable code can be with exceptions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#easier-to-test"&gt;
  &lt;/a&gt;
  Easier To Test
&lt;/h3&gt;

&lt;p&gt;Easier compared to &lt;em&gt;what?&lt;/em&gt; How?&lt;/p&gt;

&lt;p&gt;Pure functions don‚Äôt have side effects, so you don‚Äôt have to setup and tear down stubs or mocks. There is no initial state to setup, nor state to reset afterwards. There is no spy that you have to assert on after you call your code.&lt;/p&gt;

&lt;p&gt;Instead, you give your function an input, and assert the output is what you expect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;safeParseJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;{"foo": "bar"}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;safeParseJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#easier-to-maintain"&gt;
  &lt;/a&gt;
  Easier to Maintain
&lt;/h2&gt;

&lt;p&gt;Compared to what? What does ‚Äúeasier‚Äù mean? Easy for someone familiar with the code? This statement is too nebulous and full of feelings.&lt;/p&gt;

&lt;p&gt;Still, many would agree, regardless of language, that code that doesn‚Äôt have any side effects is a lot easier to deal with and change and unit test over 6 months of the code growing compared to one that has a lot of side effects that you have to account for, test, and learn about their possible exponential changes in the code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-resulteither"&gt;
  &lt;/a&gt;
  Use Result/Either
&lt;/h2&gt;

&lt;p&gt;If you prefer pure functions, that means very little side effects, or they‚Äôre on the fringes of your code. But then how do you handle things that go wrong? You return if the function worked or not. If it worked, it‚Äôll have the data inside. If it failed, it‚Äôll have a reason why it failed. In FP languages they have a Result or Either type. In languages that don‚Äôt have this kind of type, you can emulate in a variety of ways. If the code works, you return an &lt;code&gt;Ok&lt;/code&gt; with the value in it. If the function failed, you return an &lt;code&gt;Error&lt;/code&gt; with the reason why as a string clearly written in it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;safeParseJSON&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Many languages have embraced the Promise, also called a Future, way of doing things. Some languages have used this to also handle asynchronous operations because they can fail in 2 ways that mean the same thing: it broke or it timed out. For example, most people aren‚Äôt going to wait 10 minutes for their email to come up, so you typically will see failures within 10 to 30 seconds even though technically nothing went wrong; we just stopped trying after a set amount of time. JavaScript and Python‚Äôs versions don‚Äôt have this timing built in, but there are &lt;a href="https://folktale.origamitower.com/api/v2.3.0/en/folktale.concurrency.task.html"&gt;libraries that allow to use this behavior&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This results in pure functions that always return a value: a &lt;code&gt;Result&lt;/code&gt;. That can either be a success or failure, but it‚Äôs always a Result. If it‚Äôs a failure it won‚Äôt break your entire program, nor cause you to have to write try/catch. While &lt;code&gt;Promise&lt;/code&gt;s can substitute in for a Result in JavaScript for example, ensure you are using the Promise itself, and not the value it returns via async/await. That completely bypasses the built-in exception handling, and forces you to use try/catch again.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#composing-programs"&gt;
  &lt;/a&gt;
  Composing Programs
&lt;/h2&gt;

&lt;p&gt;The way you build FP programs is through combining all these pure functions together. Some can be done imperatively, sure, but most are done via some type of &lt;a href="https://fsharpforfunandprofit.com/rop/"&gt;railway oriented programming&lt;/a&gt;. There are variety of ways to do this in FP and non-FP languages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(non-FP) JavaScript: The &lt;a href="https://lodash.com/docs/4.17.15#flow"&gt;flow&lt;/a&gt; function in Lodash or the Promise or even the &lt;a href="https://github.com/tc39/proposal-pipeline-operator"&gt;pipe&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;(non-FP) Python: &lt;a href="https://pypi.org/project/PyMonad/#new-then-method"&gt;then in PyMonad&lt;/a&gt; or various &lt;a href="https://returns.readthedocs.io/en/latest/pages/railway.html"&gt;map/binds in returns&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;ReScript: the &lt;a href="https://rescript-lang.org/docs/manual/latest/pipe"&gt;pipe&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;F#: the &lt;a href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/symbol-and-operator-reference/"&gt;pipe&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This means, in ReScript and F#, you‚Äôll have a function, and a Result will come out. You can then see if your program worked or not.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rescript"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;parsePeople&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;parsePeopleString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- this function could be an Ok or Error&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;filterHumans&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;formatNames&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;startCaseNames&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For JavaScript/Python, it‚Äôs a bit more nuanced around the types. For Python, we‚Äôll assume you‚Äôre returning a Result in PyMonad or Returns.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_people&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;parse_people_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filter_humans&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;format_names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start_case_names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#composing-javascript-via-promises"&gt;
  &lt;/a&gt;
  Composing JavaScript via Promises
&lt;/h2&gt;

&lt;p&gt;For JavaScript, unless you‚Äôre all-in on some kind of library, natively you can do this using Promise. Promise is already a type of Result: it holds a value, and if it worked, you can get it out using then, else the failure via catch. They‚Äôre also composable by default so you can create Promise chains that automatically unwrap &lt;code&gt;Promise&lt;/code&gt; values, use regular values as is, or abort to the &lt;code&gt;catch&lt;/code&gt; in case of an error. You lose that ability once you start using async await because now you‚Äôre responsible for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;exception handling&lt;/li&gt;
&lt;li&gt;pulling the value out&lt;/li&gt;
&lt;li&gt;if it‚Äôs a Promise, async/awaiting it&lt;/li&gt;
&lt;li&gt;if it‚Äôs a value, using it&lt;/li&gt;
&lt;li&gt;putting into the next function down the line&lt;/li&gt;
&lt;li&gt;handling what to do if you get an exception at each section of the code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For Promises, you just return a value or another Promise and it just comes out the other end ready to go. If not, you‚Äôre catch will handle any errors. This ensures whatever function calls your Promise chain itself is pure because it always returns a Promise value.&lt;/p&gt;

&lt;p&gt;2 huge assumptions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;you‚Äôre always defining a catch&lt;/li&gt;
&lt;li&gt;you‚Äôre not using a Result&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#mixing-in-result"&gt;
  &lt;/a&gt;
  Mixing in Result
&lt;/h2&gt;

&lt;p&gt;If some functions aren‚Äôt asynchronous, most JavaScript programmers would think they can just return a Result type instead to keep it synchronous. There isn‚Äôt a huge penalty in speed/memory to using a Promise, but some would prefer to use a Result instead. I‚Äôd suggest to 2 things if you‚Äôre not using a library: favor a Promise over a Result. A Promise is native and basically acts like a result already.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parseJSONSafe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If, however, you‚Äôd prefer to make a clear delineation between an async operation and a possible failure scenario, then you‚Äôll have to unwrap it at the end of the promise chain, similar to Rust or Python‚Äôs dry/returns. There are many helper methods on how to do this based on what Result library you‚Äôre using. We‚Äôll use &lt;a href="https://folktale.origamitower.com/api/v2.3.0/en/folktale.result.html"&gt;Folktale&lt;/a&gt; below. Here we‚Äôve defined a safe wrapper around &lt;code&gt;JSON.parse&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parseJSONSafe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When using it, it‚Äôll come out the next Promise‚Äô then and we can pattern match to get the error or value out and convert to a normal Promise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;fetchJSON&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parseJSONSafe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchWith&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;Failure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
        &lt;span class="na"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;Functional Programmers avoid exceptions because they basically act like side effects, tend to feel like they‚Äôre violating pure function rules in regards to having no return value and possibly crashing our program. If you instead favor pure functions, return a Result type when things can possibly fail. You can then use your language‚Äôs preferred way of composing functions together. Then you have pure programs that have an input and an output. This means both the functions, and the program itself, are much easier to unit test. You no longer have to write &lt;code&gt;expect(thisThing).throws(SomeExceptionType)&lt;/code&gt;. You don‚Äôt have to write try/catch/throw in your code. You just give your functions or program and input, and assert on that output.&lt;/p&gt;

&lt;p&gt;For side effects, if you can‚Äôt force them to return a meaningful value, then you can just assert they were called with your expected inputs via Sinon‚Äôs spy methods or TestDouble‚Äôs assert method. There is no longer indirection, no longer a need to use to try/catch in multiple places for &lt;em&gt;your&lt;/em&gt; code. This makes your functions and program much more predictable, especially when you combine many functions together.&lt;/p&gt;

&lt;p&gt;For native functionality in non-functional languages like JavaScript and Python, you wrap the unsafe code. In the above examples, we wrapped JSON.parse with a try/catch and have it either return a Result or Promise. In FP languages, that would already return a Result. If you‚Äôre programmatic, languages like ReScript and F# support both Result types AND pattern matching on exceptions (which I think is blasphemy).&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>python</category>
      <category>functional</category>
      <category>exceptions</category>
    </item>
    <item>
      <title>30days30submits (HTML, CSS, JS)</title>
      <author>Shaif Arfan</author>
      <pubDate>Sun, 11 Jul 2021 12:51:21 +0000</pubDate>
      <link>https://dev.to/shaifarfan08/30days30submits-html-css-js-39cn</link>
      <guid>https://dev.to/shaifarfan08/30days30submits-html-css-js-39cn</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--exwW8820--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/github/stars/shaifarfan/30days30submits%3Fstyle%3Dsocial" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--exwW8820--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/github/stars/shaifarfan/30days30submits%3Fstyle%3Dsocial" alt="GitHub Repo stars"&gt;&lt;/a&gt;  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7uMllJK0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/youtube/channel/subscribers/UCdxaLo9ALJgXgOUDURRPGiQ%3Fstyle%3Dsocial" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7uMllJK0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/youtube/channel/subscribers/UCdxaLo9ALJgXgOUDURRPGiQ%3Fstyle%3Dsocial" alt="YouTube Channel Subscribers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#30days30submits"&gt;
  &lt;/a&gt;
  30days30submits
&lt;/h2&gt;

&lt;p&gt;Boost your HTML, CSS, JS Skills with these small to medium projects.&lt;/p&gt;

&lt;p&gt;In this challenge, I submitted 30 little to medium size projects. Sometimes I made a little website component or sometimes some JavaScript app as a submit. I did it to boost my HTML, CSS &amp;amp; JS skills. Down here you will find all the live previews and YouTube videos (how I made it). Also here is the full playlist for this #30days30submits challenge =&amp;gt; &lt;a href="https://www.youtube.com/playlist?list=PLRv_Gd5w9e7m7wokXmB9fGtGYw100UKc0"&gt;playlist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;ü§ô Follow Me : &lt;a href="http://facebook.com/fb.shaifarfan08"&gt;FB&lt;/a&gt; - &lt;a href="http://instagram.com/shaifarfan08"&gt;IG&lt;/a&gt; - &lt;a href="http://twitter.com/shaifarfan08"&gt;TW&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üè¶ Web Cifar : &lt;a href="https://www.youtube.com/channel/UCdxaLo9ALJgXgOUDURRPGiQ"&gt;YT&lt;/a&gt; - &lt;a href="http://facebook.com/webcifar"&gt;FB&lt;/a&gt; - &lt;a href="http://instagram.com/web_cifar"&gt;IG&lt;/a&gt; - &lt;a href="http://twitter.com/webcifar"&gt;TW&lt;/a&gt; - &lt;a href="http://webcifar.com"&gt;WEBSITE&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;day&lt;/th&gt;
&lt;th&gt;Project Name&lt;/th&gt;
&lt;th&gt;source Code/preview&lt;/th&gt;
&lt;th&gt;YouTube Video&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;day-1&lt;/td&gt;
&lt;td&gt;Custom Cursor&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/OJMrzaB"&gt;https://codepen.io/Web_Cifar/pen/OJMrzaB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/de4W0EHMuUs"&gt;https://youtu.be/de4W0EHMuUs&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-2&lt;/td&gt;
&lt;td&gt;Theme Switcher&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/OJMrdbq"&gt;https://codepen.io/Web_Cifar/pen/OJMrdbq&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/D1yg4T37qYo"&gt;https://youtu.be/D1yg4T37qYo&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-3&lt;/td&gt;
&lt;td&gt;Random Dad Jokes Generator&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/XWXOZWX"&gt;https://codepen.io/Web_Cifar/pen/XWXOZWX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/UDIfuvLEkjU"&gt;https://youtu.be/UDIfuvLEkjU&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-4&lt;/td&gt;
&lt;td&gt;Numbers API&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/PoZLpoG"&gt;https://codepen.io/Web_Cifar/pen/PoZLpoG&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/s3LFCErzmHI"&gt;https://youtu.be/s3LFCErzmHI&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-5&lt;/td&gt;
&lt;td&gt;Countdown Timer&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/OJMGPbb"&gt;https://codepen.io/Web_Cifar/pen/OJMGPbb&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/_a4XCarxwr8"&gt;https://youtu.be/_a4XCarxwr8&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-6&lt;/td&gt;
&lt;td&gt;Featured Section&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/WNrWxYG"&gt;https://codepen.io/Web_Cifar/pen/WNrWxYG&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/L4k3_elYm2U"&gt;https://youtu.be/L4k3_elYm2U&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-7&lt;/td&gt;
&lt;td&gt;Photo gallery p-1&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/wvMbwdj"&gt;https://codepen.io/Web_Cifar/pen/wvMbwdj&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/URymtcPO11A"&gt;https://youtu.be/URymtcPO11A&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-8&lt;/td&gt;
&lt;td&gt;Photo gallery p-2 [Pexels API]&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/ShaifArfan/30days30submits/tree/master/day-8"&gt;https://github.com/ShaifArfan/30days30submits/tree/master/day-8&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/gGBpmzLN1Hw"&gt;https://youtu.be/gGBpmzLN1Hw&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-9&lt;/td&gt;
&lt;td&gt;Read More Button&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/OJMeVxx"&gt;https://codepen.io/Web_Cifar/pen/OJMeVxx&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/TvVY8c1uvG8"&gt;https://youtu.be/TvVY8c1uvG8&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-10&lt;/td&gt;
&lt;td&gt;key Code Generator App&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/eYJwvKV"&gt;https://codepen.io/Web_Cifar/pen/eYJwvKV&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/jOLwRV6xSwA"&gt;https://youtu.be/jOLwRV6xSwA&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-11&lt;/td&gt;
&lt;td&gt;CSS animated Menu&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/eYJqdxy"&gt;https://codepen.io/Web_Cifar/pen/eYJqdxy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/q8vmz-R_3Ck"&gt;https://youtu.be/q8vmz-R_3Ck&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-12&lt;/td&gt;
&lt;td&gt;CSS Flex Gallery&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/wvMVmZN"&gt;https://codepen.io/Web_Cifar/pen/wvMVmZN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/Z6IZ2NOEzmw"&gt;https://youtu.be/Z6IZ2NOEzmw&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-13&lt;/td&gt;
&lt;td&gt;Analog Clock&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/LYNYmpb"&gt;https://codepen.io/Web_Cifar/pen/LYNYmpb&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/6xEQ_jA5V2Y"&gt;https://youtu.be/6xEQ_jA5V2Y&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-14&lt;/td&gt;
&lt;td&gt;Digital Clock&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/MWyYaBP"&gt;https://codepen.io/Web_Cifar/pen/MWyYaBP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/gmNhRyxAPpw"&gt;https://youtu.be/gmNhRyxAPpw&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-15&lt;/td&gt;
&lt;td&gt;BG Color Changer&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/dyMPmwY"&gt;https://codepen.io/Web_Cifar/pen/dyMPmwY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/Yem8T8azZko"&gt;https://youtu.be/Yem8T8azZko&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-16&lt;/td&gt;
&lt;td&gt;Basic Tooltips&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/PoNqwNJ"&gt;https://codepen.io/Web_Cifar/pen/PoNqwNJ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/MXRxahbJX3A"&gt;https://youtu.be/MXRxahbJX3A&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-17&lt;/td&gt;
&lt;td&gt;Scroll Down Button&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/WNwvOaE"&gt;https://codepen.io/Web_Cifar/pen/WNwvOaE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/LY1jeQGUiAI"&gt;https://youtu.be/LY1jeQGUiAI&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-18&lt;/td&gt;
&lt;td&gt;Advance Tooltips&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/yLOYoPR"&gt;https://codepen.io/Web_Cifar/pen/yLOYoPR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/e_jEquJo7y8"&gt;https://youtu.be/e_jEquJo7y8&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-19&lt;/td&gt;
&lt;td&gt;Full Functional Html Form&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/gOrrPpO"&gt;https://codepen.io/Web_Cifar/pen/gOrrPpO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/vc9rgFHr098"&gt;https://youtu.be/vc9rgFHr098&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-20&lt;/td&gt;
&lt;td&gt;Multi Step Form&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/PoNNEYY"&gt;https://codepen.io/Web_Cifar/pen/PoNNEYY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/cKTgIDkRsGc"&gt;https://youtu.be/cKTgIDkRsGc&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-21&lt;/td&gt;
&lt;td&gt;CSS Loading animation&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/jOqqRPM"&gt;https://codepen.io/Web_Cifar/pen/jOqqRPM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/E_jOrp4t0N4"&gt;https://youtu.be/E_jOrp4t0N4&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-22&lt;/td&gt;
&lt;td&gt;Food Recipe App&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/oNxLYRY"&gt;https://codepen.io/Web_Cifar/pen/oNxLYRY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/x8EY0BlhPGk"&gt;https://youtu.be/x8EY0BlhPGk&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-23&lt;/td&gt;
&lt;td&gt;Neon Light Effect&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/MWyJENV"&gt;https://codepen.io/Web_Cifar/pen/MWyJENV&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/NLtUycloTnc"&gt;https://youtu.be/NLtUycloTnc&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-24&lt;/td&gt;
&lt;td&gt;Speech Recognition App&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/jOqBEjE"&gt;https://codepen.io/Web_Cifar/pen/jOqBEjE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/-k-PgvbktX4"&gt;https://youtu.be/-k-PgvbktX4&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-25&lt;/td&gt;
&lt;td&gt;Custom Slider&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/bGpRwEr"&gt;https://codepen.io/Web_Cifar/pen/bGpRwEr&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/V9TCxMMpGhI"&gt;https://youtu.be/V9TCxMMpGhI&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-26&lt;/td&gt;
&lt;td&gt;Bouncing DVD logo&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/JjXrLRJ"&gt;https://codepen.io/Web_Cifar/pen/JjXrLRJ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/wMIARRCox9k"&gt;https://youtu.be/wMIARRCox9k&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-27&lt;/td&gt;
&lt;td&gt;Quiz APP&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/dyMZxNg"&gt;https://codepen.io/Web_Cifar/pen/dyMZxNg&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/qXXM9nVxLWk"&gt;https://youtu.be/qXXM9nVxLWk&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-28&lt;/td&gt;
&lt;td&gt;Simple Calculator&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/XWdVgXr"&gt;https://codepen.io/Web_Cifar/pen/XWdVgXr&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/0Vg4EiYPCUc"&gt;https://youtu.be/0Vg4EiYPCUc&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-29&lt;/td&gt;
&lt;td&gt;Weather APP&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/gOrvMpR"&gt;https://codepen.io/Web_Cifar/pen/gOrvMpR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/y0iCeKUsYMk"&gt;https://youtu.be/y0iCeKUsYMk&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;day-30&lt;/td&gt;
&lt;td&gt;CSS Dot Loaders&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codepen.io/Web_Cifar/pen/rNevXPx"&gt;https://codepen.io/Web_Cifar/pen/rNevXPx&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/ENa4y_-fJAs"&gt;https://youtu.be/ENa4y_-fJAs&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>My Dev Journey: Week 10</title>
      <author>Harry York</author>
      <pubDate>Sun, 11 Jul 2021 12:45:34 +0000</pubDate>
      <link>https://dev.to/harryyork97/my-dev-journey-week-10-39n2</link>
      <guid>https://dev.to/harryyork97/my-dev-journey-week-10-39n2</guid>
      <description>&lt;p&gt;This week was the second week in the front end block of the course, and this week we spent a lot of time going further in depth with React.&lt;/p&gt;

&lt;p&gt;If you've enjoyed any of my blog series, then maybe consider following me on &lt;a href="https://twitter.com/grand_oldduke"&gt;Twitter&lt;/a&gt; and &lt;a href="https://github.com/harryyork97"&gt;GitHub&lt;/a&gt; üòÅ and I'd also really appreciate if you all could check out my new &lt;a href="https://harryyork.dev/"&gt;portfolio site&lt;/a&gt; üôèüèº and maybe leave a few beginner project ideas in the comments to give me some inspiration!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-ive-learnt-this-week"&gt;
  &lt;/a&gt;
  What I've learnt this week
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#data-fetching"&gt;
  &lt;/a&gt;
  Data fetching
&lt;/h3&gt;

&lt;p&gt;For the start of this week we used the Fetch API to make requests to endpoints to get the data back that we were going to be using in our apps. The fetch API was a good start but I prefered it when we started to use Axios, as I think it reads a lot clearer that fetch.&lt;/p&gt;

&lt;p&gt;I spent most of this first day getting base functionality added in to my app that retrieves NASA Astronomy Pictures of the Day, for specified dates in input fields.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#styling-with-react"&gt;
  &lt;/a&gt;
  Styling with React
&lt;/h3&gt;

&lt;p&gt;Building on top of the base functionality I added a couple of extra features in like beign able to search by a date range, and then got going on styling. I wanted it to be a fairly minimal site, but to use similar tones to the NASA logo, so that it all ties in, and was pretty happy with adjusting to styling with React.&lt;/p&gt;

&lt;p&gt;One of the key principles from this lecture was on Mobile first design, and using media queries to display certain components styled in different ways because of screen sizes.&lt;/p&gt;

&lt;p&gt;Another thing we learnt but I didn't have chance to apply was the use of CSS modules, something that I'd like to apply on a side project or by refactoring the code from this two-day sprint.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-routing"&gt;
  &lt;/a&gt;
  React Routing
&lt;/h3&gt;

&lt;p&gt;Routing in React was a blessing after having spent the last week with really long App files. The routing makes sense, especially after creating our own backends, it made processes much more alike.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#context"&gt;
  &lt;/a&gt;
  Context
&lt;/h3&gt;

&lt;p&gt;Another issue I had with React at the start of the week was I felt like I was passing props through all over the place, which is where using Context allows me to have certain states to be seen globally across all components. This came in handy when wanting to tidy a lot of my prop chains up.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources-ive-found-useful-this-week"&gt;
  &lt;/a&gt;
  Resources I've found useful this week
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#css-tricks"&gt;
  &lt;/a&gt;
  CSS Tricks
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com"&gt;CSS Tricks&lt;/a&gt; has been a great cheat-sheet style site, that has helped especially with &lt;a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/"&gt;flex-box&lt;/a&gt; bits.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-router"&gt;
  &lt;/a&gt;
  React Router
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://reactrouter.com/web/guides/quick-start"&gt;React Router&lt;/a&gt; has also been great for seeing examples of setting up React Apps with Routing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#figma"&gt;
  &lt;/a&gt;
  Figma
&lt;/h3&gt;

&lt;p&gt;What's Figma? &lt;a href="https://www.figma.com/"&gt;Figma&lt;/a&gt; is a pretty good way to quickly and collaboratively mock up the wireframes for an app and definitely helped us to start planning out what actually needed to be done first, rather than start aimlessly coding.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>bootcamp</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>What is the difference between SQL and SQL Server (and similar tools)? üòáüéâ</title>
      <author>Aashish Chaubey üí•‚ö°Ô∏è</author>
      <pubDate>Sun, 11 Jul 2021 12:39:30 +0000</pubDate>
      <link>https://dev.to/aashish/what-is-the-difference-between-sql-and-sql-server-and-similar-tools-3n3o</link>
      <guid>https://dev.to/aashish/what-is-the-difference-between-sql-and-sql-server-and-similar-tools-3n3o</guid>
      <description>&lt;p&gt;Hey people,&lt;/p&gt;

&lt;p&gt;I am a programmer and have been one since last 3 years. I completed my B.Tech degree back in 2018 and I must admit, I was not particularly a big fan of DBMS, somehow I managed to complete the course and secure passing grades. I know it is an important subject but it never appealed me as much and therefore I never took as much interest (I always felt guilty of it). &lt;/p&gt;

&lt;p&gt;As established, it is not an epiphany for me that it is an important subject and I must get my hand dirty with it, so I decided to pursue it and complete at least 2 projects in the next couple of weeks. This way sans Big Data (I am slowly working on that too), I will have all my grounds covered as a full stack data scientist. &lt;/p&gt;

&lt;p&gt;Thats enough about me, now lets literally get to the title of this blog post. I know many beginning with SQL will have this question in mind. So here I am, explaining the basics as I learn. Please feel free to point out anything you feel should be corrected, I'll appreciate the feedback.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T2mku-Ss--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zgu0twslt9hude25vops.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T2mku-Ss--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zgu0twslt9hude25vops.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lets first get to know what SQL is, in brief!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;üìù Definition: SQL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By definition, SQL (Structured Query Language) is a query language. It is generally used with Structured Databases, or for processing data streams in real-time in relational data stream management system to query, manipulate the relational database data. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;üí° Gotcha&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So basically, SQL is a language. As this is a language, and a quite popular one, there are various dialects of this language. And anyone familiar with computers or even remotely acquainted with how computer works will know a language needs some kind of environment to be executed in. &lt;/p&gt;

&lt;p&gt;It is environment that interprets the commands of the language, identifies different dialect and executes the command particular to the dialect. Let's park this environment concept for now and we will come back to it later in this post. Let's talk about SQL a little more.&lt;/p&gt;

&lt;p&gt;SQL comprises of 3 major sub-languages:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Data Definition Language (DDL): to create and modify the structure of the database&lt;/li&gt;
&lt;li&gt;Data Manipulation Language (DML): to perform read, insert, update, and delete operations on the data of the database&lt;/li&gt;
&lt;li&gt;Data Control Language (DCL): to control the access of the data stored in the database&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;&lt;strong&gt;üìù Definition: SQL Server&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SQL Server is proprietary software or an RDBMS tool that executes the SQL statements. It also provides some additional features and functionalities, so that the user can properly interact with the database and can perform all the database operations efficiently.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;üí° Gotcha&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So basically, it is a database software. It uses SQL as a language to query the database.&lt;/p&gt;

&lt;p&gt;The popular ones include MySQL, SQL Server, Oracle, Informix, Postgres etc. They are mix of open source and proprietary software available to use.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JcFNo4bD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pmvo4zbpjfyv76adzuui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JcFNo4bD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pmvo4zbpjfyv76adzuui.png" alt="Source: SPLessons"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;I hope that clarifies your doubt and you are good to go ahead and understand which to use where. It should also make you clear with what you are using and what are different softwares you can compare (I know I haven't been quite comprehensive with the list, but then which softwares we use actually depends on the requirement which concerns security, control features, compatibility with the server, or the source of distribution. &lt;/p&gt;

&lt;p&gt;People who know more about it, please share your opinion through the comments.&lt;/p&gt;

&lt;p&gt;Thanks - until next time!&lt;/p&gt;

</description>
      <category>sql</category>
      <category>mustknow</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>useLocal: the useState hook for a properly-synced state</title>
      <author>Lukas Klinzing</author>
      <pubDate>Sun, 11 Jul 2021 12:28:56 +0000</pubDate>
      <link>https://dev.to/theluk/uselocal-the-usestate-hook-for-a-properly-synced-state-32kp</link>
      <guid>https://dev.to/theluk/uselocal-the-usestate-hook-for-a-properly-synced-state-32kp</guid>
      <description>&lt;p&gt;As you might know, the React hook &lt;code&gt;useState&lt;/code&gt; takes one argument, which will initialize its internal state to that given value. When React 16 with Hooks got released, I found it a little bit confusing, but it perfectly makes sense.&lt;/p&gt;

&lt;p&gt;No matter what, there are still situations, where you need to update the state based on the incoming props. Usually that is done using a &lt;code&gt;useEffect&lt;/code&gt; hook, where you listen on the incoming prop to change, and then update your local state. &lt;/p&gt;

&lt;p&gt;This is a great way of handling it, because you, as the owner of the component can perfectly control, if the parent prop change is actually what you want. It could even break your component if the parent decides to update a prop during a critical state of your component. &lt;/p&gt;

&lt;p&gt;But there are also situations, where not much can happen. There are simple scenarios where you basically want to hold a local version and not propagate it up the tree until a certain condition happen. During that time, you still want to allow the parent controlling component to update the local value, if that is what it wants. &lt;/p&gt;

&lt;p&gt;Here is an example how to allow the parent controlling component set (and update, if necessary) the from and to values. It can happen that for example for whatever reason, there is another component, that can set a date range, for that, we would want that from and to can be updated.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;RangeDatepicker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFrom&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLocal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLocal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MyCalendarRangePicker&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onChangeFrom&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setFrom&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onChangeTo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setTo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;the easiest implementation of such a hook (in Typscript) looks like this&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;One further improvement would be, to pass in some conditional function that checks, if it is allowed to update the local state. &lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;You can visit the gist here&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/theluk/13b7a17455b599699b7d34775cbf8273"&gt;https://gist.github.com/theluk/13b7a17455b599699b7d34775cbf8273&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>hooks</category>
      <category>usestate</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Master Git in 7 minutes</title>
      <author>Valeria</author>
      <pubDate>Sun, 11 Jul 2021 12:27:30 +0000</pubDate>
      <link>https://dev.to/valeriavg/master-git-in-7-minutes-gai</link>
      <guid>https://dev.to/valeriavg/master-git-in-7-minutes-gai</guid>
      <description>&lt;p&gt;Essentially, Git keeps tabs on text changes, but the definition is a version control system. Chances are you've already used git one way or another: it is a de-facto standard for code versioning due to it's distributed nature, as opposed to centralised Apache Subversion (SVN).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-git"&gt;
  &lt;/a&gt;
  Installing Git
&lt;/h2&gt;

&lt;p&gt;To check if you have Git installed run in your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git version
&lt;span class="c"&gt;# git version 2.30.1 (Apple Git-130)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you don't have it, follow instructions on &lt;a href="https://git-scm.com/downloads"&gt;https://git-scm.com/downloads&lt;/a&gt;. Mac users can install it with brew: &lt;code&gt;brew install git&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-git"&gt;
  &lt;/a&gt;
  Configuring Git
&lt;/h2&gt;

&lt;p&gt;There are just a few things we want to configure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; user.name &lt;span class="s2"&gt;"John Doe"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="c"&gt;# your name&lt;/span&gt;
git config &lt;span class="nt"&gt;--global&lt;/span&gt; user.email johndoe@example.com &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="c"&gt;# your email&lt;/span&gt;
git config &lt;span class="nt"&gt;--global&lt;/span&gt; init.defaultbranch&lt;span class="o"&gt;=&lt;/span&gt;main &lt;span class="c"&gt;# default branch name, to be compatible with GitHub&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see current global configuration with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; &lt;span class="nt"&gt;--list&lt;/span&gt;
&lt;span class="c"&gt;# Type ":q" to close&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Git stores configuration in plain text and, if you prefer, you can edit global configuration directly in &lt;code&gt;~/.gitconfig&lt;/code&gt; or &lt;code&gt;~/.config/git/config&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As the command suggests, removing &lt;code&gt;--global&lt;/code&gt; would make these commands scoped to the current folder. But to test that out we need a repository.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-new-repository"&gt;
  &lt;/a&gt;
  Creating new repository
&lt;/h2&gt;

&lt;p&gt;A repository is just a folder with all the stuff you want to track. To create one run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;gitexample &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; 
&lt;span class="nb"&gt;cd &lt;/span&gt;gitexample &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; 
git init
&lt;span class="c"&gt;# gitexample git:(main)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command creates a folder &lt;code&gt;.git&lt;/code&gt; inside &lt;code&gt;gitexample&lt;/code&gt; folder. That hidden &lt;code&gt;.git&lt;/code&gt; folder is what makes a repository: all local configuration and changes are stored there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-changes"&gt;
  &lt;/a&gt;
  Making changes
&lt;/h2&gt;

&lt;p&gt;Let's create something in the repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Hello, Git"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; hello.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we ran &lt;code&gt;git status&lt;/code&gt;, we'll see the newly created untracked file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git status
&lt;span class="c"&gt;# On branch main&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;
&lt;span class="c"&gt;# No commits yet&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;
&lt;span class="c"&gt;# Untracked files:&lt;/span&gt;
&lt;span class="c"&gt;#  (use "git add &amp;lt;file&amp;gt;..." to include in what will be committed)&lt;/span&gt;
&lt;span class="c"&gt;#   hello.txt&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# nothing added to commit but untracked files present (use "git add" to track)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As the output suggests, let add the file. It can be done directly with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="c"&gt;# Or `git add hello.txt`, if we don't want all files&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you check on the repository status now, you'll see that the file is added (aka &lt;em&gt;staged&lt;/em&gt;), but not yet committed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git status
&lt;span class="c"&gt;# On branch main&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;
&lt;span class="c"&gt;# No commits yet&lt;/span&gt;
&lt;span class="c"&gt;# &lt;/span&gt;
&lt;span class="c"&gt;# Changes to be committed:&lt;/span&gt;
&lt;span class="c"&gt;#  (use "git rm --cached &amp;lt;file&amp;gt;..." to unstage)&lt;/span&gt;
&lt;span class="c"&gt;#   new file:   hello.txt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To record the changes, let's commit them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Add hello.txt"&lt;/span&gt;
&lt;span class="c"&gt;# [main (root-commit) a07ee27] Adds hello.txt&lt;/span&gt;
&lt;span class="c"&gt;# 1 file changed, 2 insertions(+)&lt;/span&gt;
&lt;span class="c"&gt;# create mode 100644 hello.txt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pro tip:  &lt;code&gt;git commit -m &amp;lt;MESSAGE&amp;gt;&lt;/code&gt; is a short hand command, you can use &lt;code&gt;git commit&lt;/code&gt; to open editor (mostly vim) and provide a detailed commit description instead.&lt;/p&gt;

&lt;p&gt;Let's check the changes with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git log
&lt;span class="c"&gt;# type :q to close&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will show something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;commit a07ee270d6bd0419a50d1936ad89b9de0332f375 &lt;span class="o"&gt;(&lt;/span&gt;HEAD -&amp;gt; main&lt;span class="o"&gt;)&lt;/span&gt;
Author: Your Name &amp;lt;your@email.address&amp;gt;
Date:   Sun Jul 11 11:47:16 2021 +0200

    Adds hello.txt
&lt;span class="o"&gt;(&lt;/span&gt;END&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-branches"&gt;
  &lt;/a&gt;
  Creating branches
&lt;/h2&gt;

&lt;p&gt;Having a separate version of the initial code can be useful in a lot of situation: e.g. when testing out a feature you're unsure about or to avoid code conflicts when working together. That's exactly what a git branch is: it grows from a particular point in history.&lt;/p&gt;

&lt;p&gt;To create a branch run &lt;code&gt;git branch NAME&lt;/code&gt; and to switch branch run &lt;code&gt;git checkout NAME&lt;/code&gt;. Or simply:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout &lt;span class="nt"&gt;-b&lt;/span&gt; dev &lt;span class="c"&gt;# switches to a new branch called "dev"&lt;/span&gt;
&lt;span class="c"&gt;# Switched to a new branch 'dev'&lt;/span&gt;
&lt;span class="c"&gt;# gitexample git:(dev)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's change something in the &lt;code&gt;hello.txt&lt;/code&gt; file and commit the changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Hello, Git Branch"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; hello.txt &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
git commit &lt;span class="nt"&gt;-am&lt;/span&gt; &lt;span class="s2"&gt;"Change hello.txt"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's switch back to main version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout main &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class="nb"&gt;cat &lt;/span&gt;hello.txt
&lt;span class="c"&gt;# Switched to branch 'main'&lt;/span&gt;
&lt;span class="c"&gt;# Hello, Git&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the file contents are still the same as they were. To compare branches we can run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git diff dev
&lt;span class="c"&gt;# diff --git a/hello.txt b/hello.txt&lt;/span&gt;
&lt;span class="c"&gt;# index 360c923..b7aec52 100644&lt;/span&gt;
&lt;span class="c"&gt;# --- a/hello.txt&lt;/span&gt;
&lt;span class="c"&gt;# +++ b/hello.txt&lt;/span&gt;
&lt;span class="c"&gt;# @@ -1,3 +1 @@&lt;/span&gt;
&lt;span class="c"&gt;# Hello, Git&lt;/span&gt;
&lt;span class="c"&gt;# -&lt;/span&gt;
&lt;span class="c"&gt;# -Hello, Git Branch&lt;/span&gt;
&lt;span class="c"&gt;# (END)&lt;/span&gt;
&lt;span class="c"&gt;# type ":q" to close&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's make changes in main branch as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Hi from Main Branch"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; hello.txt &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
git commit &lt;span class="nt"&gt;-am&lt;/span&gt; &lt;span class="s2"&gt;"Change hello.txt from main"&lt;/span&gt;
&lt;span class="c"&gt;# [main 9b60c4b] Change hello.txt from main&lt;/span&gt;
&lt;span class="c"&gt;# 1 file changed, 2 insertions(+)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's try to combine the changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git merge dev
&lt;span class="c"&gt;# Auto-merging hello.txt&lt;/span&gt;
&lt;span class="c"&gt;# CONFLICT (content): Merge conflict in hello.txt&lt;/span&gt;
&lt;span class="c"&gt;# Automatic merge failed; fix conflicts and then commit the result.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because the file was changed in the same place twice we got a conflict. Look at the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;hello.txt
&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&amp;lt; HEAD
Hello, Git

Hi from Main Branch
&lt;span class="o"&gt;=======&lt;/span&gt;
Hello, Git
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is also a tool to see changes separately:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git diff &lt;span class="nt"&gt;--ours&lt;/span&gt; &lt;span class="c"&gt;# :q to close &lt;/span&gt;
git diff &lt;span class="nt"&gt;--theirs&lt;/span&gt; &lt;span class="c"&gt;#:q to close&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can manually edit the file and commit the changes, but let's imagine we only want one of the versions. We'll start with aborting merge:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git merge &lt;span class="nt"&gt;--abort&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And restarting merge with "theirs" strategy, meaning that in case of conflict we'll use whatever incoming branch insists on:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git merge &lt;span class="nt"&gt;-X&lt;/span&gt; theirs hello.txt
&lt;span class="c"&gt;# Auto-merging hello.txt&lt;/span&gt;
&lt;span class="c"&gt;# Merge made by the 'recursive' strategy.&lt;/span&gt;
&lt;span class="c"&gt;# hello.txt | 5 +----&lt;/span&gt;
&lt;span class="c"&gt;# 1 file changed, 1 insertion(+), 4 deletions(-)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The opposite to this strategy is "ours". Merging both changes together will require manual editing (or use of &lt;code&gt;git mergetool&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;To see list of all branches run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git branch &lt;span class="c"&gt;# type :q to close&lt;/span&gt;
&lt;span class="c"&gt;#  dev&lt;/span&gt;
&lt;span class="c"&gt;# * main&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, to delete the branch run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git branch &lt;span class="nt"&gt;-d&lt;/span&gt; dev
&lt;span class="c"&gt;# Deleted branch dev (was 6259828).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#rebasing-branches"&gt;
  &lt;/a&gt;
  Rebasing branches
&lt;/h2&gt;

&lt;p&gt;Branches "grow" from a particular point in git history, &lt;em&gt;rebase&lt;/em&gt; allows to change that point. Let's create another branch and add some changes to hello.txt once more time:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout &lt;span class="nt"&gt;-b&lt;/span&gt; story &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Once upon a time there was a file"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;story.txt &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
git add story.txt &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Add story.txt"&lt;/span&gt;
&lt;span class="c"&gt;# Switched to a new branch 'story'&lt;/span&gt;
&lt;span class="c"&gt;# [story eb996b8] Add story.txt&lt;/span&gt;
&lt;span class="c"&gt;# 1 file changed, 1 insertion(+)&lt;/span&gt;
&lt;span class="c"&gt;# create mode 100644 story.txt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's come back to the main branch and add changes there:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout main &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Other changes"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; changes.txt &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
git add changes.txt &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Add changes.txt"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To replay the changes we made in &lt;code&gt;main&lt;/code&gt; to &lt;code&gt;story&lt;/code&gt; branch run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout story &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
git rebase main
&lt;span class="c"&gt;# Successfully rebased and updated refs/heads/story.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see new file created in &lt;code&gt;main&lt;/code&gt; branch being added to &lt;code&gt;story&lt;/code&gt; branch:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;ls&lt;/span&gt;
&lt;span class="c"&gt;# changes.txt hello.txt   story.txt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Word of caution: do not rebase branches that someone else might have used, e.g. the main branch. Also, keep in mind that every history manipulation on a remote repository will require forcing these changes to take effect.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#remote-repository"&gt;
  &lt;/a&gt;
  Remote repository
&lt;/h2&gt;

&lt;p&gt;If you haven't yet, create a &lt;a href="https://github.com/signup"&gt;GitHub&lt;/a&gt; account, login and create a &lt;a href="https://github.com/new"&gt;new empty repository&lt;/a&gt; (private or public).&lt;/p&gt;

&lt;p&gt;Assuming the repository name was "example" run the following command (change to your username):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git remote add origin git@github.com:USERNAME/example.git &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
git push &lt;span class="nt"&gt;-u&lt;/span&gt; origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can refresh the page and see files in main branch. To push all local branches to remote repository run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git push &lt;span class="nt"&gt;--all&lt;/span&gt; origin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's edit something on GitHub: just click any file and the pencil icon. Add a line with any text you want and press "Commit changes".&lt;/p&gt;

&lt;p&gt;Now run this command locally to get the remote changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout main &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
git pull
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#managing-uncommitted-changes"&gt;
  &lt;/a&gt;
  Managing uncommitted changes
&lt;/h2&gt;

&lt;p&gt;If you want to save your local changes for later you can use &lt;code&gt;git stash&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Changes"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; hello.txt &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
git stash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can use following command to check, apply or discard these changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git stash list
&lt;span class="c"&gt;# stash@{0}: WIP on main: 92354c8 Update changes.txt&lt;/span&gt;
git stash pop &lt;span class="c"&gt;# to apply changes&lt;/span&gt;
git stash drop &lt;span class="c"&gt;# to drop changes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pro tip: you can use stash number, i.e. &lt;code&gt;git stash pop 0&lt;/code&gt; to apply a particular stash or &lt;code&gt;git stash drop 0&lt;/code&gt; to drop it.&lt;/p&gt;

&lt;p&gt;If you want to discard all local changes and simply restore repository to last committed changes run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git restore &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#managing-committed-changes"&gt;
  &lt;/a&gt;
  Managing committed changes
&lt;/h2&gt;

&lt;p&gt;Once you create a commit, this change is saved in local git history. As mentioned before, all changes affecting remote history would require a &lt;code&gt;git push --force&lt;/code&gt;. Keep it in mind for all following commands.&lt;/p&gt;

&lt;p&gt;Let's start with editing the last commit message :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git commit &lt;span class="nt"&gt;--amend&lt;/span&gt; &lt;span class="c"&gt;# type :wq to save and close&lt;/span&gt;
&lt;span class="c"&gt;# Press "i" to edit, "Esc" to stop editing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How about we reset everything to the very beginning?&lt;br&gt;
To find the ID of the very first commit run this command and scroll (with arrow down) to the very end:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git log &lt;span class="nt"&gt;--abbrev-commit&lt;/span&gt;
&lt;span class="c"&gt;# commit a07ee27&lt;/span&gt;
&lt;span class="c"&gt;# Author: Your Name &amp;lt;your@email.address&amp;gt;&lt;/span&gt;
Date:   Sun Jul 11 11:47:16 2021 +0200

    Adds hello.txt
&lt;span class="o"&gt;(&lt;/span&gt;END&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# type ":q" to close&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now run this to reset the repository, but keep all changes unstaged:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git reset &lt;span class="nt"&gt;--soft&lt;/span&gt; COMMIT &lt;span class="c"&gt;# e.g. a07ee27&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As opposite to it, you can also make a hard reset and get rid of all the changes with &lt;code&gt;git reset --hard COMMIT&lt;/code&gt;. There are several other types of reset that you can learn from &lt;a href="https://git-scm.com/docs/git-reset"&gt;git documentation&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aliases"&gt;
  &lt;/a&gt;
  Aliases
&lt;/h2&gt;

&lt;p&gt;Most of the times you'll be using just a handful of command (checkout, add ,commit, pull, push and merge mostly), but are some things you might want to have around for "just in case".&lt;/p&gt;

&lt;p&gt;One way to store those are git aliases. To configure an alias just set it in a config. For example, one alias I use a lot is &lt;code&gt;git tree&lt;/code&gt;, it prints a nice history log in a form of a tree:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; alias.tree &lt;span class="s1"&gt;'log --graph --decorate --pretty=oneline --abbrev-commit'&lt;/span&gt;
&lt;span class="c"&gt;# Try it with `git tree`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another useful alias deletes all merged branches:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; alias.clbr &lt;span class="s1"&gt;'!git branch --merged | grep -v \* | xargs git branch -D'&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see it's prefixed with "!", which allows us to use any command, not only git commands.&lt;/p&gt;

&lt;p&gt;That's all for today, hope it helps in your developer journey. As always, feel free to share your thoughts and feedback in the comments. Till the next time!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>git</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The Four Stages Of Full Software Testing</title>
      <author>Abdulcelil Cercenazi</author>
      <pubDate>Sun, 11 Jul 2021 12:21:27 +0000</pubDate>
      <link>https://dev.to/jarjanazy/the-four-stages-of-full-software-testing-2fgp</link>
      <guid>https://dev.to/jarjanazy/the-four-stages-of-full-software-testing-2fgp</guid>
      <description>&lt;p&gt;üëâTesting software is crucial to assure that it does what we expect it to do, and to catch problems as early as possible to speed up the development process.&lt;/p&gt;

&lt;p&gt;üëâThe process of testing can be divided into 4 stages, starting from writing code and ending with deploying to production.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#commit-stage"&gt;
  &lt;/a&gt;
  1Ô∏è‚É£ Commit Stage
&lt;/h2&gt;

&lt;p&gt;This includes tests that fail fast&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A total run time of 5 minutes or less is preferred.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-kind-of-tests"&gt;
  &lt;/a&gt;
  What kind of tests?ü§î
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Unit tests

&lt;ul&gt;
&lt;li&gt;Testing isolated units of behavior.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Controller tests

&lt;ul&gt;
&lt;li&gt;For example, Given that we send a POST request to this endpoint, it should fail because the parameters are invalid.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Database tests

&lt;ul&gt;
&lt;li&gt;For example, Given those records in the DB, this method should get them.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Coding standards tests

&lt;ul&gt;
&lt;li&gt;This test fails because at file X you have 5 empty lines.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#acceptance-stage"&gt;
  &lt;/a&gt;
  2Ô∏è‚É£ Acceptance Stage
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-kind-of-tests"&gt;
  &lt;/a&gt;
  What kind of tests?üßê
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Acceptance tests&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For example, When user X logs in and orders a new book, we should create a new order request and send an email.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Performance tests.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configuration tests.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Any other tests that we want to run prior to release.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#release-stage"&gt;
  &lt;/a&gt;
  3Ô∏è‚É£ Release Stage
&lt;/h2&gt;

&lt;p&gt;This stage comes after building the software and attaching all its components together.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-kind-of-tests"&gt;
  &lt;/a&gt;
  What kind of tests?üëÄ
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Smoke test

&lt;ul&gt;
&lt;li&gt;Test the system's most important features.

&lt;ul&gt;
&lt;li&gt;Sign-in, book purchase, etc...&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Canary release testingüê§

&lt;ul&gt;
&lt;li&gt;Releasing the new version of the system to places of low impact.&lt;/li&gt;
&lt;li&gt;For example, Netflix uses Canary releasing by releasing new updates to geographic locations in the world where it's 1 AM so if any failure happens, only few people experience it.ü§´&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Exception tracking.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#product-stage"&gt;
  &lt;/a&gt;
  4Ô∏è‚É£ Product Stage
&lt;/h2&gt;

&lt;p&gt;This stage is executed after the system is deployed to production and is under use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-kind-of-tests"&gt;
  &lt;/a&gt;
  What kind of tests?‚ùî
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Can it scale up/down?&lt;/li&gt;
&lt;li&gt;Is it using a lot of memory/disk/CPU?&lt;/li&gt;
&lt;li&gt;What is the request response time?&lt;/li&gt;
&lt;li&gt;Do performance metrics match predications?&lt;/li&gt;
&lt;li&gt;Security.&lt;/li&gt;
&lt;li&gt;For example Netflix has teams to test those aspects and try to break the system.

&lt;ul&gt;
&lt;li&gt;Chaos monkeys, Latency monkeys, Security monkeysüêí&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#this-material-in-this-post-is-mainly-derived-from-dave-farley-amazing-video-on-testing"&gt;
  &lt;/a&gt;
  This material in this post is mainly derived from Dave Farley amazing &lt;a href="https://www.youtube.com/watch?v=z-3aSVfoyBY&amp;amp;t=761s"&gt;video&lt;/a&gt; on testing.
&lt;/h3&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>A wild handleEvent appeared üòÆ !!!</title>
      <author>Lakshya Thakur</author>
      <pubDate>Sun, 11 Jul 2021 12:18:39 +0000</pubDate>
      <link>https://dev.to/lapstjup/a-wild-handleevent-appeared-1f48</link>
      <guid>https://dev.to/lapstjup/a-wild-handleevent-appeared-1f48</guid>
      <description>&lt;p&gt;Let's say, we have a DOM element by the name of &lt;code&gt;element&lt;/code&gt; and we want to add event listeners to it. How would you do so ?&lt;/p&gt;

&lt;p&gt;Here are two ways which can come into mind :-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;You can remove me later safely&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Try and remove me noob&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when it comes to removing these event listeners, it's not possible to remove the second one since it's anonymous and for first one we can just do &lt;code&gt;element.removeEventListener('click',handleClick);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;What if I told you there is a way and a syntax you might not be familiar with when it comes to event listeners ?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J13AYYsS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.gifer.com/D5UY.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J13AYYsS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.gifer.com/D5UY.gif" alt="you're lying"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well here it is :-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;someObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;handleEvent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`I am &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; event`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;someObj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And :-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qnEYKIMp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media2.giphy.com/media/eIfYQTaK3148kmMCxT/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qnEYKIMp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media2.giphy.com/media/eIfYQTaK3148kmMCxT/giphy.gif" alt="this is fine"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Jokes aside, it's &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/EventListener/handleEvent"&gt;always&lt;/a&gt; been there. It's just less spoken about. And I came across this when I solved &lt;a href="https://stackoverflow.com/questions/67671873/typescript-handleevent-definition/67672217#67672217"&gt;this&lt;/a&gt; StackOverflow question and my mind was blowwwwnn !!! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c10rv4wr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.icegif.com/wp-content/uploads/mind-blown-icegif-3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c10rv4wr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.icegif.com/wp-content/uploads/mind-blown-icegif-3.gif" alt="mind blown"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, You can just remove the event listener like so &lt;code&gt;element.removeEventListener('click',someObj);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After finding this, I thought to myself that what if I make a bare minimum &lt;code&gt;Handler&lt;/code&gt; class which can abstract the &lt;strong&gt;registration&lt;/strong&gt; and &lt;strong&gt;unregistration&lt;/strong&gt; bit and work on the same principle ? &lt;/p&gt;

&lt;p&gt;And this is how it looks :-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Handler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;eventMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;eventMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;handleEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;eventMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;eventMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;eventMap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;eventMap&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;eventMap&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;unregister&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;unregisterAll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;eventMap&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But what made me go for a class implementation ? Well now we know that we can pass an &lt;strong&gt;object&lt;/strong&gt; to &lt;code&gt;add/removeEventListener&lt;/code&gt;, we can have a custom &lt;code&gt;Handler&lt;/code&gt; class inside which &lt;code&gt;this&lt;/code&gt; will point to the &lt;strong&gt;object instance&lt;/strong&gt; and come into use. &lt;/p&gt;

&lt;p&gt;Let's look at a usage sample of this code :-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;click&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Yo I am clicky&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;FOCUS!!!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What the above does it that for &lt;code&gt;element&lt;/code&gt;, it registers both the anonymous functions for respective events. And if you go further to register another function for &lt;code&gt;click&lt;/code&gt; like so :-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;click&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Well I am new clicky&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will override the existing &lt;code&gt;click&lt;/code&gt; function that we had without any worry of handling its removal and add this new anonymous function. &lt;/p&gt;

&lt;p&gt;Now if you want to explicitly &lt;code&gt;unregister&lt;/code&gt; the &lt;code&gt;click&lt;/code&gt; function, how would you do so ?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unregister&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CGQGzbwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.pinimg.com/originals/f5/8e/b2/f58eb2e7e1f40e78a36bd9a8bb1ba4e1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CGQGzbwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.pinimg.com/originals/f5/8e/b2/f58eb2e7e1f40e78a36bd9a8bb1ba4e1.gif" alt="that's it"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So &lt;strong&gt;anonymous&lt;/strong&gt; or &lt;strong&gt;non-anonymous&lt;/strong&gt;, the &lt;code&gt;Handler&lt;/code&gt; class will ensure that for each &lt;strong&gt;event type&lt;/strong&gt;, only one function is registered for the same element. But what if I want to register multiple functions for same &lt;strong&gt;event type&lt;/strong&gt; for the same element ?&lt;/p&gt;

&lt;p&gt;Well in that case, you can create another instance of &lt;code&gt;Handler&lt;/code&gt; class with same &lt;code&gt;element&lt;/code&gt; and let it be responsible for it. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zgHnCgay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encrypted-tbn0.gstatic.com/images%3Fq%3Dtbn:ANd9GcS2iOSIwsdMSZUSbtjbL-Z5QHtgKsCMqLyr0g%26usqp%3DCAU" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zgHnCgay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encrypted-tbn0.gstatic.com/images%3Fq%3Dtbn:ANd9GcS2iOSIwsdMSZUSbtjbL-Z5QHtgKsCMqLyr0g%26usqp%3DCAU" alt="single responsibility"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's still a new concept to me and maybe I might have derived some wrong conclusions. But I will be more than happy to know more about it. Did you know this ? If so, have you used this ? Do you not prefer it ? Any bottlenecks ? Feel free to bash that comment section üí™.&lt;/p&gt;

&lt;p&gt;You can go through &lt;a href="https://webreflection.medium.com/dom-handleevent-a-cross-platform-standard-since-year-2000-5bf17287fd38"&gt;this&lt;/a&gt; article for more insights into &lt;code&gt;handleEvent&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Here is a codepen where you can play with this implementation :-&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/lapstjup/embed/ExWmBVX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-your-time-d"&gt;
  &lt;/a&gt;
  Thank you for your time :D
&lt;/h3&gt;

</description>
      <category>javascript</category>
      <category>uiweekly</category>
      <category>webdev</category>
      <category>codepen</category>
    </item>
    <item>
      <title>üì¶ How is C++ Compiled?</title>
      <author>Sahil Bondre</author>
      <pubDate>Sun, 11 Jul 2021 12:16:25 +0000</pubDate>
      <link>https://dev.to/godcrampy/how-is-c-compiled-4668</link>
      <guid>https://dev.to/godcrampy/how-is-c-compiled-4668</guid>
      <description>&lt;p&gt;I've been using C++ for quite a while now. This got me into thinking, how does C++ work under the hood? So I came up with this short video in which I explain the whole C++ compilation process.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/rUtprDA0bgc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;And that is it, folks. Let me know your takeaways from the video. If you have any other video or article ideas, comment on them too. Oh, BTW, do you want to learn Bash? Here's my crash-course post on Shell Scripting:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/godcrampy" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EmTQ5oXB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--DjAO4fT3--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/205514/c3ddf55e-e4f9-463e-816a-87d085f9e963.png" alt="godcrampy"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/godcrampy/the-missing-shell-scripting-crash-course-37mk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;üöÄ The Missing Shell Scripting Crash Course&lt;/h2&gt;
      &lt;h3&gt;Sahil Bondre „Éª Apr 21 '20 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#bash&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#linux&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;üåü I made some &lt;a href="https://github.com/godcrampy/cheat-sheets"&gt;Cheat-Sheets&lt;/a&gt;&lt;br&gt;
üöÄ Stalk me on &lt;a href="https://www.youtube.com/c/SahilBondre"&gt;Youtube&lt;/a&gt; | &lt;a href="//github.com/godcrampy"&gt;Github&lt;/a&gt; | &lt;a href="//twitter.com/godcrampy"&gt;Twitter&lt;/a&gt; | &lt;a href="//sahil.surge.sh"&gt;Website&lt;/a&gt;&lt;br&gt;
üòÑ Have a wonderful day!&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>c</category>
      <category>tutorial</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Visual Studio Code Tutorial for Beginners in 30 Minutes | Video</title>
      <author>Chaoo Charles</author>
      <pubDate>Sun, 11 Jul 2021 12:05:13 +0000</pubDate>
      <link>https://dev.to/chaoocharles/visual-studio-code-tutorial-for-beginners-in-30-minutes-video-1md3</link>
      <guid>https://dev.to/chaoocharles/visual-studio-code-tutorial-for-beginners-in-30-minutes-video-1md3</guid>
      <description>&lt;p&gt;Hey Devs, I have prepared for you a complete guide on visual studios code. In the following tutorial we will take a look at the various features of VS Code and how you can set up your development environment while working with VS Code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#video-tutorial"&gt;
  &lt;/a&gt;
  Video Tutorial
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/euktKH2iHsY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>vscode</category>
    </item>
    <item>
      <title>C# For Beginners - Introduction</title>
      <author>Coding Mama</author>
      <pubDate>Sun, 11 Jul 2021 11:59:31 +0000</pubDate>
      <link>https://dev.to/coding_mama/c-for-beginners-introduction-5ami</link>
      <guid>https://dev.to/coding_mama/c-for-beginners-introduction-5ami</guid>
      <description>&lt;p&gt;Hi there! This tutorial is a gentle introduction to the C# programming language. &lt;/p&gt;

&lt;p&gt;You'll be learning the basics of C# and programming by following along with the tutorial.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-programming"&gt;
  &lt;/a&gt;
  What is programming?
&lt;/h2&gt;

&lt;p&gt;Programming is a way to tell computers to do things. &lt;/p&gt;

&lt;p&gt;Computers are very fast at doing things - whether it's calculating complex formulas or finding duplicates in a list with a thousand entries. &lt;/p&gt;

&lt;p&gt;But a computer can't do these things by itself. To instruct it to solve a problem, someone else needs to come in, tell the computer to solve the problem and also, &lt;strong&gt;how&lt;/strong&gt; to solve it.&lt;/p&gt;

&lt;p&gt;This "someone" is called a &lt;em&gt;programmer&lt;/em&gt;. A programmer writes instructions for a computer so that it can solve the problem. But a computer - a machine - can't understand human language. In fact, a computer can only understand &lt;em&gt;machine language&lt;/em&gt; - a language that uses only 1s and 0s.&lt;/p&gt;

&lt;p&gt;It's possible to write a set of instructions in 1s and 0s, but as humans, this will get really complicated quickly. Not to mention, doing it this way would probably take a human programmer a very long time.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;High-level&lt;/em&gt; &lt;em&gt;programming languages&lt;/em&gt; were created to solve this issue. These programming languages use human-readable elements, but these elements have special meaning as well. They can be translated, either by an &lt;em&gt;interpreter&lt;/em&gt; or a &lt;em&gt;compiler&lt;/em&gt; into machine code, which the computer can now understand.&lt;/p&gt;

&lt;p&gt;C# is one example of a &lt;em&gt;high-level programming language&lt;/em&gt;. It was created by Microsoft in 2000 and is one of the top 5 programming languages in use today.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-c"&gt;
  &lt;/a&gt;
  Why C#?
&lt;/h2&gt;

&lt;p&gt;C# is a modern, general-purpose programming language. It's a versatile language that is used to build different types of applications.&lt;/p&gt;

&lt;p&gt;Desktop apps, mobile apps, websites, and games are some of the things that are currently being built using C#. Once you've learnt the basics of C#, you can move on to building all kinds of programs!&lt;/p&gt;

&lt;p&gt;C# syntax (the structure of the language) is easy to read. It's part of the C family of languages, so learning it will mean you can easily pick up languages like C, Java, JavaScript, and Swift.&lt;/p&gt;

&lt;p&gt;C# is a powerful language and allows you to build both simple and complex programs.&lt;/p&gt;

&lt;p&gt;Lastly, C# is a popular language, especially in the enterprise sector. Learning C# means you've got a skill that is highly sought by many industries.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;p&gt;This tutorial was heavily inspired by the &lt;a href="https://node-girls.gitbook.io/beginners-javascript/tutorial/step-1-hello-world"&gt;Beginners JavaScript&lt;/a&gt; tutorial from &lt;a href="https://www.nodegirls.com/"&gt;NodeGirls&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
