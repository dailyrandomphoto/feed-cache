<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>15  Browser Extensions for Developers - They Can't Live Without It</title>
      <author>JavaScript Hacker</author>
      <pubDate>Wed, 15 Sep 2021 06:57:03 +0000</pubDate>
      <link>https://dev.to/codinghacker/15-browser-extensions-for-developers-they-can-t-live-without-it-1me0</link>
      <guid>https://dev.to/codinghacker/15-browser-extensions-for-developers-they-can-t-live-without-it-1me0</guid>
      <description>&lt;p&gt;Browsers are increasingly incorporating more &lt;span&gt;&lt;a href="#"&gt;extensions, plugins and add-ons&lt;/a&gt;&lt;/span&gt;, which are often developed by their users, making the browser more powerful, and helping us increase our productivity. Here at Awwwards, our mission is to share with you the best resources and tools on the web, so we're writing a series of blog articles on &lt;span&gt;the best extensions and plugins for major browsers&lt;/span&gt;. To kick-off, we're focusing on extensions that are offered in the Chrome Web Store, available for free and easy to install.&lt;/p&gt;
&lt;p&gt;Among the tools, we'll highlight those that are&lt;span&gt; most useful for web designers and developers&lt;/span&gt;. We hope you find them useful and get you better results. &lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/chrome-extensions-for-web-developers/&amp;amp;ved=2ahUKEwjNobWsr-fyAhX_yzgGHYoACLUQFnoECAMQBQ&amp;amp;usg=AOvVaw3LrSRSp_yMsQU7StlCW8qG"&gt;15 Must-Have Browser Extensions for Web Developers&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Learning Python- Intermediate course: Day 26, Password Manager-Tkinter</title>
      <author>Aatmaj</author>
      <pubDate>Wed, 15 Sep 2021 06:49:29 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-intermediate-course-day-26-password-manager-tkinter-17p9</link>
      <guid>https://dev.to/aatmaj/learning-python-intermediate-course-day-26-password-manager-tkinter-17p9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#today-let-us-build-a-login-application-which-gets-the-passwords-and-usernames-from-users"&gt;
  &lt;/a&gt;
  Today let us build a login application which gets the passwords and usernames from users.
&lt;/h2&gt;




&lt;h4&gt;
  &lt;a href="#todays-application-specs-are-as-follows"&gt;
  &lt;/a&gt;
  Today's application specs are as follows
&lt;/h4&gt;

&lt;p&gt;1) There are four widgets- two Entry (single line textboxes), one button, one label in the program.&lt;br&gt;
2) The user enters username in the first textbox. Password in the second textbox. But the password is encrypted (not shown) &lt;br&gt;
3) After user hits the sign up button, the username is displayed on the label and the password is stored. &lt;br&gt;
&lt;em&gt;We will not store the password now, just make a dummy password entry function stub. The password can be stored in files in encrypted format or by other methods once we cover file handling in Python. Till that time, assume that the &lt;code&gt;storepassword()&lt;/code&gt; function stores the passwords and username automatically&lt;/em&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#encrypting-the-entry-widget"&gt;
  &lt;/a&gt;
  Encrypting the entry widget.
&lt;/h3&gt;

&lt;p&gt;We don't want others to see our passwords while we type them right? This can be achieved using the &lt;code&gt;show="*"&lt;/code&gt; attribute.&lt;br&gt;
&lt;code&gt;TB1=tk.Entry(form,width = 20,show="*")&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tkinter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;tk&lt;/span&gt;

&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Example of Entry widget"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'400x200'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;TB1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Entry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;TB1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TB1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mainloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let us now revisit yesterday's program and hide the entry widget.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BTwSscvW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u7fnlzgtlvi6j4u68wlm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BTwSscvW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u7fnlzgtlvi6j4u68wlm.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KF6gmBIW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3jro1sgx61nxlamrp3eb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KF6gmBIW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3jro1sgx61nxlamrp3eb.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#building-the-login-screen"&gt;
  &lt;/a&gt;
  Building the login screen.
&lt;/h3&gt;

&lt;p&gt;We already have got the specifications of the program, so now let us start building it. Here is the code for the program, commented for explaination. Be sure to give it a try first before seeing the solution.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tkinter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;tk&lt;/span&gt; &lt;span class="c1"&gt;# import the Tkinter module
&lt;/span&gt;
&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# create the blank window.
&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"password manager"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# set the title as password manager
&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'400x200'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# set the default geometry of the window.
&lt;/span&gt;
&lt;span class="n"&gt;TB1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Entry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;# make an entry widget with 20 spaces for the username
&lt;/span&gt;
&lt;span class="n"&gt;TB2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Entry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;# entry widget for password and hide the keys whenever pressed.
&lt;/span&gt;
&lt;span class="c1"&gt;# TB1 is for username, TB2 is for password
&lt;/span&gt;&lt;span class="n"&gt;TB1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;TB2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# pack the widgets into 'form'
&lt;/span&gt;
&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# make a label to display the username
&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="c1"&gt;#function to be executed once the button is pressed.
&lt;/span&gt;    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TB1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# get username
&lt;/span&gt;    &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TB2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# get password
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Welcome "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;" to python GUI"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;fg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Green"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# display the label
&lt;/span&gt;     &lt;span class="n"&gt;storepassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# store password and username
&lt;/span&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Please enter a valid username and password."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;fg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Red"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# blank screens
&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;storepassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;#//Some mechanism to store password//
&lt;/span&gt;    &lt;span class="k"&gt;pass&lt;/span&gt; &lt;span class="c1"&gt;#stubbed
&lt;/span&gt;
&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Sign Up"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# setup the button
&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mainloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kaQB7LEv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bj1exu1iyw0euab3zccb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kaQB7LEv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bj1exu1iyw0euab3zccb.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M-X_3tdT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqkz4sr1yi5xj5x85l4z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M-X_3tdT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqkz4sr1yi5xj5x85l4z.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RyHpIhVR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y9fp3rzsh17lniyahevu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RyHpIhVR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y9fp3rzsh17lniyahevu.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Homework&lt;/strong&gt; Run the above application &lt;em&gt;(without seeing)&lt;/em&gt; debug and test it. Store the application in a file passwordmanager.pyw. and send me a pic on the comments below.&lt;/p&gt;




&lt;p&gt;Well today's password manager is very secure....But tomorrow we will see a mechanism to steal the passwords by a spyware😈&lt;br&gt;
So stay tuned for updates by following me.&lt;/p&gt;

</description>
      <category>learningpython</category>
      <category>python</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>40+ JavaScript Projects for Beginners – Easy Ideas to Get Started Coding JS</title>
      <author>JavaScript Hacker</author>
      <pubDate>Wed, 15 Sep 2021 06:24:03 +0000</pubDate>
      <link>https://dev.to/codinghacker/40-javascript-projects-for-beginners-40i4</link>
      <guid>https://dev.to/codinghacker/40-javascript-projects-for-beginners-40i4</guid>
      <description>&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;The best way to learn a new programming language is to build projects.

I have created a list of 40 beginner friendly project tutorials in Vanilla JavaScript, React, and TypeScript.

My advice for tutorials would be to watch the video, build the project, break it apart and rebuild it your own way. Experiment with adding new features or using different methods.

That will test if you have really learned the concepts or not.

You can click on any of the projects listed below to jump to that section of the article.

&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/40-javascript-projects-for-beginners/&amp;amp;ved=2ahUKEwiB9tj0rPjyAhUMX30KHZQ5CG0QFnoECAgQAQ&amp;amp;usg=AOvVaw26RDQjHugdhbATVS83LI83"&gt;40 JavaScript Projects for Beginners – Easy Ideas to Get Started Coding JS

&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>#update My experience in creating Css with Pubg UC online store
</title>
      <author>Saudi UC</author>
      <pubDate>Wed, 15 Sep 2021 06:13:33 +0000</pubDate>
      <link>https://dev.to/saudiuc/update-my-experience-in-creating-css-with-pubg-uc-online-store-1gi2</link>
      <guid>https://dev.to/saudiuc/update-my-experience-in-creating-css-with-pubg-uc-online-store-1gi2</guid>
      <description>&lt;p&gt;Update My Pubg UC sell store. All the website’s images were designed by photoshop. The web page was built by CSS code.&lt;br&gt;
&lt;a href="https://saudi-uc.com/"&gt;متجر شدات&lt;/a&gt;&lt;br&gt;
What do you think about it? If you have any further recommendations, please let me know.&lt;/p&gt;

&lt;p&gt;Site Sections :&lt;br&gt;
&lt;a href="https://saudi-uc.com/%D8%B4%D8%AF%D8%A7%D8%AA-%D8%A8%D8%A8%D8%AC%D9%8A/c1676374952"&gt;شدات ببجي&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;thank u&lt;/p&gt;

</description>
      <category>css</category>
      <category>design</category>
    </item>
    <item>
      <title>🚀#3 JavaScript Project Series.</title>
      <author>Chetan Atrawalkar👉CA.</author>
      <pubDate>Wed, 15 Sep 2021 05:55:52 +0000</pubDate>
      <link>https://dev.to/chetan_atrawalkar/3-javascript-project-series-3gfj</link>
      <guid>https://dev.to/chetan_atrawalkar/3-javascript-project-series-3gfj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hello-coders"&gt;
  &lt;/a&gt;
  Hello Coders!👋
&lt;/h2&gt;

&lt;p&gt;Welcome back to the Javascript project series. Today i'm share another amazing project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#save-this-series-for-upcoming-projects"&gt;
  &lt;/a&gt;
  💟 Save This Series For Upcoming Projects.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WmVSNJzk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uwe6tfibcylath1kobw6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WmVSNJzk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uwe6tfibcylath1kobw6.gif" alt="thumbs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;💥 Let's get started....🚀&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-animated-menu-indicator-using-javascript"&gt;
  &lt;/a&gt;
  📜 3. Animated Menu Indicator using JavaScript.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;In this, we're going to see how you can create an animated Menu Navbar using JavaScript. Navbar is an essential part of any website. It gives the user a functionality to navigate through the website efficiently and easily. It guides the user accordingly so the user will not get lost or loose interest. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#heres-a-preview"&gt;
  &lt;/a&gt;
  Here's a preview:-
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A6JkzwnJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/og9v86aa2thqnxosbiu2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A6JkzwnJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/og9v86aa2thqnxosbiu2.jpg" alt="view"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#codepen-link-for-result"&gt;
  &lt;/a&gt;
  🔸 &lt;a href="https://codepen.io/codev_land/pen/LYLjrpM"&gt;CodePen Link For Result&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;That being said, let us get started.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Step - 1:-&lt;/strong&gt; Like always, create 3 files - Index.html, Style.css and Script.js.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Step - 2:-&lt;/strong&gt; Copy the below HTML code and paste it into your code editor.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#indexhtml"&gt;
  &lt;/a&gt;
  Index.html
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Animated menu indicator&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;nav&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-item is-active"&lt;/span&gt; &lt;span class="na"&gt;active-color=&lt;/span&gt;&lt;span class="s"&gt;"orange"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-item"&lt;/span&gt; &lt;span class="na"&gt;active-color=&lt;/span&gt;&lt;span class="s"&gt;"green"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-item"&lt;/span&gt; &lt;span class="na"&gt;active-color=&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Project&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-item"&lt;/span&gt; &lt;span class="na"&gt;active-color=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Blog&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-item"&lt;/span&gt; &lt;span class="na"&gt;active-color=&lt;/span&gt;&lt;span class="s"&gt;"rebeccapurple"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Contact&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-indicator"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script  &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"script.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Step - 3:-&lt;/strong&gt; Below is the CSS code for styling.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#stylecss"&gt;
  &lt;/a&gt;
  Style.css
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url("https://fonts.googleapis.com/css?family=DM+Sans:500,700&amp;amp;display=swap")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f6f7fc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.nav&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;159&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;162&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;177&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.nav-item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#83818c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.3s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;6px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"DM Sans"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.nav-item&lt;/span&gt;&lt;span class="nd"&gt;:before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-6px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#dfe2ea&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.3s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.nav-item&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;.is-active&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nd"&gt;:hover:before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.nav-item&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;.is-active&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.nav-indicator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.4s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Step - 4:-&lt;/strong&gt; Below is the JavaScript code which is the most important part in this Animation. Here, we're creating two constants - &lt;strong&gt;indicator and items&lt;/strong&gt;. &lt;strong&gt;&lt;code&gt;"indicator"&lt;/code&gt;&lt;/strong&gt; will store the information of the class &lt;strong&gt;&lt;code&gt;".nav-indicator"&lt;/code&gt;&lt;/strong&gt;, that is the line below. And &lt;strong&gt;&lt;code&gt;"items"&lt;/code&gt;&lt;/strong&gt; will store the information of the class &lt;strong&gt;&lt;code&gt;".nav-items"&lt;/code&gt;&lt;/strong&gt;, that is the menu-items. &lt;/li&gt;
&lt;li&gt;Next define function &lt;strong&gt;&lt;code&gt;handleIndicator&lt;/code&gt;&lt;/strong&gt; that's check the which item is clicked by used as per click perform particular task.&lt;/li&gt;
&lt;li&gt;In this function used &lt;strong&gt;&lt;code&gt;forEach&lt;/code&gt;&lt;/strong&gt; loop is an Array method that executes a custom callback function on each item in an array.&lt;/li&gt;
&lt;li&gt;Read the code and you will understand how things really works.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#scriptjs"&gt;
  &lt;/a&gt;
  Script.js
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;indicator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.nav-indicator&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.nav-item&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleIndicator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;is-active&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;style&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;indicator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offsetWidth&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;indicator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offsetLeft&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;indicator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;active-color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;is-active&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;active-color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleIndicator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;);});&lt;/span&gt;
  &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;is-active&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;handleIndicator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it. You're done.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#save-this-series-for-upcoming-projects"&gt;
  &lt;/a&gt;
  💟 Save This Series For Upcoming Projects.
&lt;/h3&gt;

&lt;p&gt;🛑 And If you need more content like this follow &lt;strong&gt;@codev_land&lt;/strong&gt; on instagram.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keep-claim-and-just-code-it"&gt;
  &lt;/a&gt;
  Keep Claim And Just Code It 😎
&lt;/h3&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>7 Best Tools For Developers - They Can't Live Without It</title>
      <author>JavaScript Hacker</author>
      <pubDate>Wed, 15 Sep 2021 05:55:09 +0000</pubDate>
      <link>https://dev.to/codinghacker/7-best-tools-for-developers-they-can-t-live-without-it-k8k</link>
      <guid>https://dev.to/codinghacker/7-best-tools-for-developers-they-can-t-live-without-it-k8k</guid>
      <description>&lt;p&gt; &lt;span&gt;The&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;b&gt;best tools for developers &lt;/b&gt;&lt;span&gt;are a priority for them to work. As a developer, he always works with code editors, browsers, terminals, etc. to improve his productivity. VS Code is one of the best editors, every developer would like to work with it. I've also listed the&lt;/span&gt;&lt;span&gt; &lt;/span&gt;VS Code extensions for JS &lt;span&gt;that are useful for a developer. And browser extensions are also a great way to improve productivity and I've also listed&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;b&gt;Chrome extensions for a developer&lt;/b&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;If you are a junior programmer, this will give you an idea the improve your coding skills, and if you are a senior developer, you are still learn something new from it. Extensions are one the &lt;b&gt;best tools for developers.&lt;/b&gt;&lt;/span&gt;&lt;span&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/span&gt;&lt;span&gt;Let's see the best tools for developers.&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/7-best-tools-for-developers-they-cant-live-without-it/&amp;amp;ved=2ahUKEwjQg9arpYDzAhVFgOYKHdJuB5YQFnoECAUQAQ&amp;amp;usg=AOvVaw1L8LdsK7AZhqLDllCtK7lz"&gt;7 Best Tools For Developers - They Can't Live Without It&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;

</description>
    </item>
    <item>
      <title>11 วิธีประหยัดค่า Data Transfer บน AWS</title>
      <author>Apichet Chayabejara</author>
      <pubDate>Wed, 15 Sep 2021 05:39:18 +0000</pubDate>
      <link>https://dev.to/awscommunity-asean/11-data-transfer-aws-4685</link>
      <guid>https://dev.to/awscommunity-asean/11-data-transfer-aws-4685</guid>
      <description>&lt;p&gt;การใช้งานบริการต่างๆ บน AWS​ นั้นเป็นลักษณะที่เราจ่ายตามการใช้งานจริง (pay per use) ซึ่งรวมไปถึงเรื่องของการส่งข้อมูลด้วย ปกติแล้วค่าใช้จ่ายส่วนนี้มักจะเป็นส่วนน้อยเมื่อเทียบกับค่า Compute, Storage, RDS หรือบริการอื่นๆ แต่หากเราไม่ระวังตอนออกแบบและจัดการกับ flow ของข้อมูลไม่ดี ค่าใช้จ่ายส่วนนี้อาจจะสูงขึ้นโดยไม่คาดคิดได้  ในโพสต์นี้เราจะมาดูเทคนิคต่าง ๆ ที่สามารถช่วยประหยัดค่า Data Transfer ได้&lt;/p&gt;

&lt;p&gt;ก่อนอื่นเรามาดูกันก่อนว่า ค่าใช้จ่ายหลักๆ ของการใช้งานเครือข่ายบน AWS มีอะไรบ้าง ราคาที่ใช้จะเป็นราคาใน AWS Region สิงคโปร์ขณะที่เขียนบทความ&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%E0%B8%81%E0%B8%B2%E0%B8%A3%E0%B8%AA%E0%B9%88%E0%B8%87%E0%B8%82%E0%B9%89%E0%B8%AD%E0%B8%A1%E0%B8%B9%E0%B8%A5%E0%B9%80%E0%B8%82%E0%B9%89%E0%B8%B2%E0%B8%AD%E0%B8%AD%E0%B8%81%E0%B8%88%E0%B8%B2%E0%B8%81-aws"&gt;
  &lt;/a&gt;
  การส่งข้อมูลเข้าออกจาก AWS
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;การนำข้อมูลเข้าจาก Internet มายัง AWS (inbound) โดยปกติจะไม่มีค่าใช้จ่าย แต่จะมีบางกรณี ที่ใช้งานร่วมกับบริการอื่นที่อาจจะมีค่าใช้บางส่วน ยกตัวอย่างเช่นเช่น

&lt;ul&gt;
&lt;li&gt;การ POST/PUT ข้อมูลจากผ่าน CloudFront มายัง Origin จะมีค่าบริการของ CloudFront อยู่ที่ $0.01/GB&lt;/li&gt;
&lt;li&gt;การโหลดข้อมูลจาก Internet ผ่านทาง NAT Gateway สำหรับเครื่องที่อยู่ภายใน private subnet จะมีค่าบริการของ NAT Gatewayที่ $0.059/GB&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;ค่าส่งข้อมูลออกจาก AWS ทาง Public Internet จะมีค่าใช้งานอยู่ที่ $0.12/GB สำหรับการส่งจาก EC2 และบริการส่วนใหญ่&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#%E0%B8%81%E0%B8%B2%E0%B8%A3%E0%B8%AA%E0%B9%88%E0%B8%87%E0%B8%82%E0%B9%89%E0%B8%AD%E0%B8%A1%E0%B8%B9%E0%B8%A5%E0%B8%AD%E0%B8%A2%E0%B8%B9%E0%B9%88%E0%B8%A0%E0%B8%B2%E0%B8%A2%E0%B9%83%E0%B8%99-aws"&gt;
  &lt;/a&gt;
  การส่งข้อมูลอยู่ภายใน AWS
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;การส่งข้อมูลภายใน Availability Zone (AZ) เดียวกัน ฟรีไม่มีค่าใช้&lt;/li&gt;
&lt;li&gt;การส่งข้อมูลข้าม AZ ภายใน Region เดียวกัน คิดที่ $0.01/GB ทั้งขาเข้าและออก นั่นหมายถึงจะมีค่าใช้จ่ายรวม $0.02/GB สำหรับการส่งข้อมูลข้าม AZ&lt;/li&gt;
&lt;li&gt;การส่งข้อมูลข้าม AWS Region จะคิดค่าบริการต่างกันไปตามต้นทางและปลายทาง ยกตัวอย่างเช่น จาก Singapore ไป Tokyo มีค่าบริการที่ $0.09/GB&lt;/li&gt;
&lt;li&gt;ถ้ามีการใช้  Transit Gateway (TGW) ในการเชื่อมต่อระหว่าง VPC หรือ On-premise จะมีค่าประมวลผลข้อมูลอยู่ที่ $0.02/GB &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;รายละเอียดอื่นๆ สามารถดูเพิ่มเติมได้ที่ &lt;a href="https://aws.amazon.com/blogs/architecture/overview-of-data-transfer-costs-for-common-architectures/"&gt;blog&lt;/a&gt; นี้ครับ มีทำสรุปไว้อ่านง่ายดี &lt;/p&gt;

&lt;p&gt;เราพอเข้าใจคร่าวๆ แล้วว่ามีค่าใช้จ่ายจากในการรับส่งและประมวลผลข้อมูลส่วนไหนบ้าง ทีนี้ลองมาดูวิธีการต่างๆ ที่จะช่วยประหยัดค่าใช้จ่ายกันเลย&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-%E0%B9%80%E0%B8%A5%E0%B8%B7%E0%B8%AD%E0%B8%81%E0%B8%A7%E0%B8%B2%E0%B8%87-resource-%E0%B8%A0%E0%B8%B2%E0%B8%A2%E0%B9%83%E0%B8%99-az-%E0%B9%80%E0%B8%94%E0%B8%B5%E0%B8%A2%E0%B8%A7%E0%B8%81%E0%B8%B1%E0%B8%99"&gt;
  &lt;/a&gt;
  1. เลือกวาง Resource ภายใน AZ เดียวกัน
&lt;/h2&gt;

&lt;p&gt;การวาง Architecture ของระบบ เราอาจจะต้องเลือกใช้งานมากกว่า 1 AZ เพื่อให้ได้ Fault Tolerant ที่ต้องการ แต่ขณะเดียวกันควรคำนึงถึงเส้นทางของข้อมูลด้วย อย่างที่ทราบว่าการส่งข้อมูลภายใน AZ นั้นไม่มีค่าใช้จ่าย ดังนั้นเราควรจะเลือกวาง resource โดยเฉพาะที่ต้องส่งข้อมูลหากันในปริมาณมากๆ ให้อยู่บน AZ เดียวกันเท่าที่จะเป็นไปได้ &lt;/p&gt;

&lt;p&gt;ในกรณีที่มีการใช้งานหลายๆ AWS Account เราควรเลือกใช้ AZ ให้สอดคล้องกันระหว่าง Account ด้วย เช่นกำหนด AZ หลักหรือ AZ รอง เพื่อที่เราจะได้ Availability อย่างที่ต้องการและได้ optimize cost ด้วย มีข้อควรรู้อย่างนึงคือชื่อ AZ เช่น ap-southeast-1a, ap-southeast-1b ที่เราเห็นบน AWS แต่ละ  Account นั้น มีโอกาสที่จะ map ไปยัง AZ คนละที่กันได้ วิธีที่จะตรวจสอบให้แน่ชัด เราต้องเช็คจาก &lt;a href="https://docs.aws.amazon.com/ram/latest/userguide/working-with-az-ids.html"&gt;AZ ID&lt;/a&gt; ซึ่งจะเป็นที่เดียวกันในทุกๆ AWS Account&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-%E0%B9%83%E0%B8%8A%E0%B9%89-private-ip-%E0%B9%83%E0%B8%99%E0%B8%81%E0%B8%B2%E0%B8%A3%E0%B8%95%E0%B8%B4%E0%B8%94%E0%B8%95%E0%B9%88%E0%B8%AD%E0%B8%A0%E0%B8%B2%E0%B8%A2%E0%B9%83%E0%B8%99-vpc"&gt;
  &lt;/a&gt;
  2. ใช้ Private IP ในการติดต่อภายใน VPC
&lt;/h2&gt;

&lt;p&gt;การส่งข้อมูลภายใน AZ นั้นไม่มีค่าใช้จ่ายเมื่อเรียกหากันด้วย Private IP Address หากเราไปเรียกใช้ด้วย Elastic IP address หรือ Public IP Address ของ Instance เราจะถูกคิดค่าใช้จ่าย $0.01/GB ทั้งเข้าและออกแม้ว่าจะอยู่ภายใน AZ เดียวกัน &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-%E0%B9%83%E0%B8%8A%E0%B9%89-s3-vpc-endpoint-%E0%B9%81%E0%B8%97%E0%B8%99%E0%B8%81%E0%B8%B2%E0%B8%A3%E0%B8%AA%E0%B9%88%E0%B8%87%E0%B8%9C%E0%B9%88%E0%B8%B2%E0%B8%99-nat-gateway"&gt;
  &lt;/a&gt;
  3. ใช้ S3 VPC Endpoint แทนการส่งผ่าน NAT Gateway
&lt;/h2&gt;

&lt;p&gt;การเรียกใช้ ​S3 จากเครื่องที่อยู่ใน private subnet ผ่าน NAT Gateway นั้น อาจโดนค่าบริการท่ี่สูง หากมีการรับส่งข้อมูลในปริมาณมากๆ (NAT Gateway มีค่าบริการอยู่ที่ประมาณ $59 ต่อข้อมูล 1TB)&lt;br&gt;
ในกรณีแบบนี้เราสามารถใช้ &lt;a href="https://docs.aws.amazon.com/vpc/latest/privatelink/vpc-endpoints-s3.html"&gt;S3 Gateway VPC Endpoint&lt;/a&gt; ซึ่งจะทำให้เราเชื่อมต่อไปยัง S3 จากภายใน VPC แบบ Private ได้โดยที่ไม่มีค่าใช้เลย!! ฟรีทั้งค่าตัว VPC Endpoint และค่าประมวลผลข้อมูล &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P3o6-DPU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1j447nwgig3d286hx732.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P3o6-DPU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1j447nwgig3d286hx732.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;นอกจาก S3 แล้ว VPC Gateway Endpoint ยังมีให้สำหรับอีกบริการหนึ่งก็คือ DynamoDB ซึ่งก็ไม่มีค่าใช้จ่ายเช่นเดียวกัน แบบนี้ไม่ใช้ไม่ได้แล้ว&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-%E0%B9%83%E0%B8%8A%E0%B9%89-interface-endpoint-%E0%B8%81%E0%B8%B1%E0%B8%9A%E0%B8%9A%E0%B8%A3%E0%B8%B4%E0%B8%81%E0%B8%B2%E0%B8%A3%E0%B8%97%E0%B8%B5%E0%B9%88%E0%B8%A3%E0%B8%B1%E0%B8%9A%E0%B8%AA%E0%B9%88%E0%B8%87%E0%B8%82%E0%B9%89%E0%B8%AD%E0%B8%A1%E0%B8%B9%E0%B8%A5%E0%B8%AA%E0%B8%B9%E0%B8%87"&gt;
  &lt;/a&gt;
  4. ใช้ Interface Endpoint กับบริการที่รับส่งข้อมูลสูง
&lt;/h2&gt;

&lt;p&gt;นอกจาก S3 และ DynomoDB เรายังสามารถเชื่อมต่อไปยังบริการ AWS อื่นๆ แบบ private ด้วยการใช้ VPC Endpoint ได้เช่นเดียวกัน แต่​จะเป็นแบบ &lt;a href="https://docs.aws.amazon.com/vpc/latest/privatelink/vpce-interface.html"&gt;Interface Endpoint&lt;/a&gt; &lt;br&gt;
แม้ว่า Interface Endpoint จะมีคิดค่าบริการรายชั่วโมงและค่าประมวลผลข้อมูล แต่ถ้าใช้กับบริการที่ต้องส่งข้อมูลเยอะๆ เรายังลดค่าใช้จ่ายโดยรวมได้อยู่ดี&lt;br&gt;
ยกตัวอย่างเช่น ถ้าใช้ Amazon Redshift API ด้วยปริมาณข้อมูลเดือนละ 2TB การวิ่งผ่าน NAT Gateway จะมีค่าประมวลผลข้อมูล $118 ต่อเดือน ในขณะที่ถ้าใช้ VPC Interface Endpoint จะมีค่า Endpoint $19 ต่อเดือน (สำหรับ 2 AZ) และค่าประมวลผลข้อมูล $20 เท่านั้น&lt;/p&gt;

&lt;p&gt;ปัจจุบันมี&lt;a href="https://docs.aws.amazon.com/vpc/latest/privatelink/integrated-services-vpce-list.html"&gt;บริการของ AWS มากกว่า 90 บริการ&lt;/a&gt; ที่สามารถใช้งานร่วมกับ VPC Interface Endpoint ได้ &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-%E0%B9%83%E0%B8%8A%E0%B9%89-selfmanage-nat-instance"&gt;
  &lt;/a&gt;
  5. ใช้ self-manage NAT instance
&lt;/h2&gt;

&lt;p&gt;NAT Gateway เป็น service ที่บริหารจัดการโดย AWS ที่ highly available และมี bandwidth สูงสุดถึง 45Gbps แต่ก็ต้องแลกมาด้วยค่าใช้จ่ายรายชั่วโมงของทั้งตัว NAT Gateway และค่าประมวลผลข้อมูล&lt;br&gt;
เราอาจจะเลือกใช้งาน &lt;a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_NAT_Instance.html"&gt;Nat Instance&lt;/a&gt; แทนการใช้ Nat Gateway เพื่อลดค่าใช้จ่ายได้&lt;br&gt;
Nat Instance จะเสียเฉพาะค่าใช้งาน EC2 และปกติแล้วก็ไม่ได้ต้องการ spec เครื่องสูงในการทำงาน เช่น ถ้าเราเลือกใช้ t4g.micro ซึ่งเพียงพอสำหรับการใช้งานทั่วๆ ไป จะมีค่าใช้จ่ายเพียง $7.74 ต่อเดือน อย่างไรก็ดี ก็อย่าลืมว่าถ้าเลือกใช้ Nat Instance เราต้องเป็นคนจัดการเรื่อง Availability การ Patch และอื่นๆ ด้วยตัวเอง&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-%E0%B9%83%E0%B8%8A%E0%B9%89-cloudfront-%E0%B8%AA%E0%B8%B3%E0%B8%AB%E0%B8%A3%E0%B8%B1%E0%B8%9A-deliver-content"&gt;
  &lt;/a&gt;
  6. ใช้ CloudFront สำหรับ Deliver Content
&lt;/h2&gt;

&lt;p&gt;ถ้าเรามี web application ที่ต้อง deliver content ไปให้ผู้ใช้งานปริมาณมากๆ แล้วการใช้ CloudFront สามารถช่วยลดค่าจ่ายตรงได้&lt;br&gt;
Cloudfront เป็นบริการ CDN ที่ช่วยเพิ่มความเร็วและความปลอดภัยในการ deliver ผ่าน Amazon edge location มีการคิดราคาเป็น Tier ตามปริมาณข้อมูลที่ใช้ในแต่ละเดือน และถ้ามีการ commit การใช้งานขั้นต่ำตั้งแต่ 10TB/เดือน จะมีสิทธิได้รับส่วนลดเพิ่มขึ้นอีกด้วย&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-%E0%B9%83%E0%B8%8A%E0%B9%89-direct-connect-%E0%B9%83%E0%B8%99%E0%B8%81%E0%B8%B2%E0%B8%A3%E0%B8%AA%E0%B9%88%E0%B8%87%E0%B8%82%E0%B9%89%E0%B8%AD%E0%B8%A1%E0%B8%B9%E0%B8%A5%E0%B9%84%E0%B8%9B%E0%B8%A2%E0%B8%B1%E0%B8%87-onpremise"&gt;
  &lt;/a&gt;
  7. ใช้ Direct Connect ในการส่งข้อมูลไปยัง On-premise
&lt;/h2&gt;

&lt;p&gt;Direct connect เป็นบริการเชื่อมเครือข่ายตรงระหว่างศูนย์ข้อมูลลูกค้ากับ AWS Data center ที่เสถียรและให้ความเร็วสูงและคงที่กว่าการใช้งาน ​Internet ที่เราควบคุมไม่ได้ การจะใช้ Direct Connect นั้นมี fix cost ส่วนของการเชื่อมต่อและค่าโครงข่ายของผู้ให้บริการในประเทศ แต่จะมีค่าบริการส่งข้อมูลต่ำกว่าการส่งผ่าน Site-to-Site VPN ด้วย Internet ถึงกว่าครึ่ง (Direct Connect คิดที่ $0.041/GB  ในขณะที่ Internet อยู่ที่ $0.12/GB)&lt;br&gt;
ดังนั้นหากองค์กรต้องส่งข้อมูลปริมาณมากมายัง on-premise ทุกเดือน การใช้ Direct Connect อาจเป็นทางเลือกที่คุ้มค่ากว่า&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-%E0%B9%80%E0%B8%A5%E0%B8%B7%E0%B8%AD%E0%B8%81%E0%B9%83%E0%B8%8A%E0%B9%89-vpc-peering"&gt;
  &lt;/a&gt;
  8. เลือกใช้ VPC Peering
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/transit-gateway"&gt;Transit Gateway&lt;/a&gt; (TGW) เป็นบริการที่ช่วยลดความซับซ่้อนในเชื่อมต่อระหว่าง VPCs และเครือข่ายบน On-premise ซึ่งปกติเราจะใช้เป็นท่ามาตรฐานในการเชื่่อมต่อ ต่อก็มีบางกรณีที่การใช้ &lt;a href="https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html"&gt;VPC Peering&lt;/a&gt; อาจเป็นทางเลือกที่ดีกว่าเพราะไม่มีค่าใช้จ่ายในการเชื่อมต่อและคิดค่าข้อมูลเฉพาะกรณีข้าม AZ เท่านั้น นอกจากนี้การใช้ VPC Peering มี Latency ต่ำกว่าการวิ่งผ่าน TGW ด้วย&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-%E0%B8%97%E0%B8%B3-distributed-inspection-%E0%B8%94%E0%B9%89%E0%B8%A7%E0%B8%A2-gwlb"&gt;
  &lt;/a&gt;
  9. ทำ Distributed inspection ด้วย GWLB
&lt;/h2&gt;

&lt;p&gt;สำหรับองค์กรที่มีการทำ centralized inspection ด้วย TGW ไปยัง VPC กลางที่มี security appliance วางอยู่ ทุกครั้งที่ข้อมูลวิ่งผ่าน TGW จะมีค่าใช้จ่ายการประมวลผลข้อมูล ด้วย Architecture ลักษณะนี้อาจมีค่าใช้จ่ายถึง $0.04/GB เพราะ traffic ต้องวิ่งผ่าน TGW สองรอบในการ ในการทำ Inspection ด้วยความสามารถของ Gateway Load Balance ที่ออกมาเมื่อปลายปี 2020 เราสามารถเลือกที่จะทำ distributed inspection โดยการวาง GWLB endpoint ใน VPC ที่มีการรับส่งข้อมูลมากๆ เพื่อลดค่าใช้จ่ายในส่วนนี้ได้&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-%E0%B9%80%E0%B8%A5%E0%B8%B7%E0%B8%AD%E0%B8%81%E0%B9%83%E0%B8%8A%E0%B9%89-shared-vpc"&gt;
  &lt;/a&gt;
  10. เลือกใช้ Shared VPC
&lt;/h2&gt;

&lt;p&gt;อีกแนวทางนึงที่สามารถช่วยลดค่าใช้จ่าย คือการใช้ &lt;a href="https://aws.amazon.com/blogs/networking-and-content-delivery/vpc-sharing-a-new-approach-to-multiple-accounts-and-vpc-management/"&gt;VPC Sharing&lt;/a&gt; ด้วยวิธีการนี้เราสามารถใช้งานแบบ Multi Account เพื่อแยกค่าใช้จ่ายและการบริหารจัดการ โดยที่เราสามารถแชร์ VPC Subnet ร่วมกันระหว่างหลายๆ Account ได้ วิธีนี้เราจะประหยัดทั้ง ​resource พวก ​Nat Gateway และ ​VPC Endpoints รวมถึงค่า Data Transfer ภายใน AZ เดียวกันด้วย&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-%E0%B8%AB%E0%B8%A1%E0%B8%B1%E0%B9%88%E0%B8%99%E0%B8%95%E0%B8%A3%E0%B8%A7%E0%B8%88%E0%B8%AA%E0%B8%AD%E0%B8%9A%E0%B8%84%E0%B9%88%E0%B8%B2%E0%B9%83%E0%B8%8A%E0%B9%89%E0%B8%88%E0%B9%88%E0%B8%B2%E0%B8%A2%E0%B9%81%E0%B8%A5%E0%B8%B0%E0%B8%81%E0%B8%B2%E0%B8%A3%E0%B9%83%E0%B8%8A%E0%B9%89%E0%B8%87%E0%B8%B2%E0%B8%99"&gt;
  &lt;/a&gt;
  11. หมั่นตรวจสอบค่าใช้จ่ายและการใช้งาน
&lt;/h2&gt;

&lt;p&gt;ใช้ &lt;a href="https://aws.amazon.com/blogs/mt/using-aws-cost-explorer-to-analyze-data-transfer-costs/"&gt;Cost Explorer ในการตรวจสอบค่าใช้บริการ Data Transfer&lt;/a&gt; เพื่อทำความเข้าใจว่ามาจากการรับส่งลักษณะไหนบ้าง&lt;br&gt;
เรายังสามารถเปิดใช้งาน &lt;a href="https://aws.amazon.com/blogs/mt/analyzing-vpc-flow-logs-got-easier-with-support-for-s3-as-a-destination/"&gt;​VPC Flow Log&lt;/a&gt; ให้บันทึก traffic flow ระหว่างภายใน VPC มาตรวจสอบรายละเอียดของการรับส่งข้อมูลในระดับ network interface ได้ด้วย&lt;/p&gt;

&lt;p&gt;หวังว่าทุกท่านสามารถนำแนวทางเหล่านี้ไปประยุกต์ใช้เพื่อลดค่าใช้จ่ายในส่วน network ได้บ้างนะครับ&lt;/p&gt;

</description>
      <category>awsthai</category>
      <category>architecture</category>
      <category>vpc</category>
      <category>datatransfer</category>
    </item>
    <item>
      <title>Creating a Twitter Bot with JavaScript </title>
      <author>Abhinav Pandey</author>
      <pubDate>Wed, 15 Sep 2021 04:54:05 +0000</pubDate>
      <link>https://dev.to/abh1navv/creating-a-twitter-bot-with-javascript-and-repl-it-1gbf</link>
      <guid>https://dev.to/abh1navv/creating-a-twitter-bot-with-javascript-and-repl-it-1gbf</guid>
      <description>&lt;p&gt;I got back into using Twitter 2 months ago when I started my 100DaysOfCode journey. While posting my progress each day, I got curious about the bots that like and retweet my posts. Finally decided to create my own and experiment with the Twitter APIs.&lt;/p&gt;

&lt;p&gt;Let's go through the whole process step by step. Before getting started, lets have a look at the Twitter APIs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#twitter-apis"&gt;
  &lt;/a&gt;
  Twitter APIs
&lt;/h2&gt;

&lt;p&gt;There are a number of things Twitter allows you to do programmatically from your bot account.&lt;/p&gt;

&lt;p&gt;It has different versions and tiers of APIs&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Twitter API v2&lt;/li&gt;
&lt;li&gt;Twitter API - Enterprise&lt;/li&gt;
&lt;li&gt;Twitter API - Premium v1.1&lt;/li&gt;
&lt;li&gt;Twitter API - Standard v1.1&lt;/li&gt;
&lt;li&gt;Twitter Ads API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What we get for free and will use in this tutorial are &lt;strong&gt;Standard v1.1&lt;/strong&gt; and &lt;strong&gt;v2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;v1.1 is the Standard API and v2 is a few additional methods on top of it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#popular-methods-and-uses"&gt;
  &lt;/a&gt;
  Popular methods and uses
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Search for tweets &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.twitter.com/en/docs/twitter-api/tweets/search/api-reference/get-tweets-search-recent"&gt;GET /2/tweets/search/recent&lt;/a&gt; - Searches and returns a specified number of results only in recent tweets.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Status Update &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-update"&gt;POST /1.1/statuses/update&lt;/a&gt; - accepts a status text and tweets it from the Bot account.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Retweets&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-retweet-id"&gt;POST /1.1/statuses/retweet/:id&lt;/a&gt; - retweets the tweet with the provided id from the Bot account.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We will use these 3 APIs but there are many other possibilities. For example, the bot can search through its own tweets, it un-retweet, delete an old tweet, create favorites, etc.&lt;/p&gt;

&lt;p&gt;Check out the entire &lt;a href="https://developer.twitter.com/en/docs/api-reference-index"&gt;API reference&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;Once you have an idea about what you are going to build and what APIs you are going to use, its time to move onto building things. First of all, we are going to apply for a developer account.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#applying-for-a-developer-account"&gt;
  &lt;/a&gt;
  Applying for a developer account
&lt;/h2&gt;

&lt;p&gt;Prerequisite - You need to have a twitter account. You can either use your own account or create a new twitter account for your bot. Whichever account you use will require you to have a verified email id and phone number attached to it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#steps-to-follow"&gt;
  &lt;/a&gt;
  Steps to follow
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Sign in into the twitter account&lt;/li&gt;
&lt;li&gt;Apply for developer access - Use the link to the &lt;a href="https://developer.twitter.com/en/apply-for-access"&gt;application process&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Fill out the application - It will ask you questions regarding the purpose of your app, verify your phone number and email if not already verified and answer a few questions about how you are going to use the developer account.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once you are done with the process, you will have a &lt;a href="https://developer.twitter.com/en/portal/projects-and-apps"&gt;Dashboard&lt;/a&gt; when approved. Generally, approval is instantaneous.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-an-app-and-getting-security-tokens"&gt;
  &lt;/a&gt;
  Creating an App and getting security tokens
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;On the Dashboard, we first need to create a project if we want to use API v2. Click on &lt;strong&gt;Create a project&lt;/strong&gt; and give it a name.&lt;/li&gt;
&lt;li&gt;Once the project is created, you will find a *Create an app"*button. Click on it to start creating your first app. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--krGgSC0R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4zwqh0spv2r6bf6fxga.png" alt="image"&gt;
&lt;/li&gt;
&lt;li&gt;Enter App name and click next. You will land on the Keys and Tokens section which will display &lt;strong&gt;API Key, API Key Secret and Bearer Token&lt;/strong&gt;. Copy these values and keep them safe with you.&lt;/li&gt;
&lt;li&gt;Click on next to create the app.&lt;/li&gt;
&lt;li&gt;After creating the app, you will land on the Dashboard. You will find you App displayed. Click on the Settings Icon next to it.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Edit the App Permissions section. By default, your app has only read permissions, we will allow it read and write permissions which will enable it to make tweets. If you have to use the Direct Messages feature as well, you can enable that as well.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IMfo0Ayd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vccs0xwgdwzycho8bzwb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IMfo0Ayd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vccs0xwgdwzycho8bzwb.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Take a look at the &lt;strong&gt;Keys and tokens&lt;/strong&gt; tab&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ek_yZcIv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4qj2su64fvf6qno7vd4v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ek_yZcIv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4qj2su64fvf6qno7vd4v.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
We are going to need all these keys&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Consumer Keys - Click on regenerate. Copy the key and secret that appear. You cannot view them again, you can only regenerate them if you forget them.&lt;/li&gt;
&lt;li&gt;Authentication Tokens - These are used to interact with the linked user account. Regenerate both sections. Copy and save the values that are created.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So our configuration is all set. We have saved a bunch of keys and tokens. Now let's have a look at how the authentication works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#authentication"&gt;
  &lt;/a&gt;
  Authentication
&lt;/h2&gt;

&lt;p&gt;Without going too deep into OAuth, I will explain which kind of keys and tokens needs to be used in which scenario. You will not need to understand more than that. So if you are new to authentication headers, you can ignore the confusing terminology for now. It will be clearer when we write the code.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;App authentication&lt;/strong&gt; - You are authenticating your app to make requests to the Twitter APIs. We need to follow one of the two ways below. &lt;strong&gt;Both will use the Keys/Tokens we created while creating the App.&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Option 1: API Key and API Key Secret - Using OAuth1.0, add API Key and API Secret into the authorization headers&lt;/li&gt;
&lt;li&gt;Option 2: Bearer Token - Using OAuth2.0, add the Bearer token in the authorization headers.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;User authentication&lt;/strong&gt; - Authorize your application to make tweets/changes from the connected user account. Here we will use the below 4 values we generated while giving our app permission to write for the account.

&lt;ul&gt;
&lt;li&gt;Consumer Key&lt;/li&gt;
&lt;li&gt;Consumer Secret&lt;/li&gt;
&lt;li&gt;Access Token&lt;/li&gt;
&lt;li&gt;Access Token Secret&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For example,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;While searching for tweets, only the app authentication is required, so we will just use the Bearer Token.&lt;/li&gt;
&lt;li&gt;While performing a status update, the user authentication is required, so we will use the 4 values mentioned above.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#the-development-environment"&gt;
  &lt;/a&gt;
  The development environment
&lt;/h2&gt;

&lt;p&gt;I will host the repo on Github and use Repl as my IDE and my runtime environment.&lt;/p&gt;

&lt;p&gt;If you are new to Repl, here's a &lt;a href="https://docs.replit.com/getting-started/intro-replit"&gt;quickstart guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Repl is not mandatory for your bot, you can also use an offline IDE/ VS Code in browser and other deployment environments like Heroku, Netlify, AWS, Azure, etc. So choose whichever you are comfortable with. &lt;/p&gt;

&lt;p&gt;I will demonstrate this with Repl and even after working with Azure for years, I found Repl as a perfect fit for this little project. It's completely free, provides easy ways to store environment variables, runs the app in your browser.&lt;/p&gt;

&lt;p&gt;Get started by doing the below steps&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a repo.&lt;/li&gt;
&lt;li&gt;Import the repo in your IDE.&lt;/li&gt;
&lt;li&gt;Initialize a new Node project - I use &lt;code&gt;npm init&lt;/code&gt;. Fill in the required values.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#twitterlite-library"&gt;
  &lt;/a&gt;
  Twitter-Lite library
&lt;/h2&gt;

&lt;p&gt;Although the library is not important and all API calls can be made with generic GET and POST requests, it takes care of all the boilerplate code and authorization headers for you and helps to focus on the app logic.&lt;/p&gt;

&lt;p&gt;The library and its documentation can be found on &lt;a href="https://github.com/draftbit/twitter-lite"&gt;Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's install the library as a dependency&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;twitter&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;lite&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lets-write-the-code"&gt;
  &lt;/a&gt;
  Let's write the code
&lt;/h2&gt;

&lt;p&gt;What are we going to make?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Get recent tweets from a list of users.&lt;/li&gt;
&lt;li&gt;Find the most happening tweet from that list.&lt;/li&gt;
&lt;li&gt;Retweet or quote tweet it to share it with others.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#creating-api-clients"&gt;
  &lt;/a&gt;
  Creating API Clients
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;An authenticated client for the app&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TwitterLite&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;extension&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="na"&gt;bearer_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BEARER_TOKEN&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Defining the parameters:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;version - default is 1.1. I have set it to 2 because I am going to user API v2 methods.&lt;/li&gt;
&lt;li&gt;extension - false for v2. true by default for v1.1&lt;/li&gt;
&lt;li&gt;bearer_token - Bearer token we saved above for the app.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With this client, the app can call all endpoints of the v2 API that do not make changes from a user account.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Authenticated client for the user&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TwitterLite&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;  
  &lt;span class="na"&gt;access_token_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ACCESS_TOKEN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;access_token_secret&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ACCESS_SECRET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;consumer_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CONS_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;consumer_secret&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CONS_SECRET&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Parameters:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Auth parameters we saved above for user authentication.&lt;/li&gt;
&lt;li&gt;Note that there are no version, extension parameters required as we will be tweeting using v1.1 Standard API.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#search-recent-tweets"&gt;
  &lt;/a&gt;
  Search recent tweets
&lt;/h3&gt;

&lt;p&gt;An example of a search query will be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;username1&lt;/span&gt; &lt;span class="nx"&gt;OR&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;username2&lt;/span&gt; &lt;span class="nx"&gt;OR&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;username3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;is&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;is&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;retweet&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This query gets the tweets from any of the three users excluding those which are replies or retweets.&lt;/p&gt;

&lt;p&gt;For exact steps to create the query, refer to the github repo. (Find link below)&lt;/p&gt;

&lt;p&gt;Params:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;start_time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2021-09-15T03:10:41.161Z&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;max_results&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tweet.fields&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;public_metrics&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;expansions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;author_id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user.fields&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id,username&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(from:username1 OR from:username2 OR from:username3) -is:reply -is:retweet&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Parameters:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Start time - the timestamp from with the recent tweets need to be fetched&lt;/li&gt;
&lt;li&gt;Max results - number of results to be returned. 10-100 is default. There is a monthly limit on the number of tweets you can retrieve, so choose the number accordingly.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;tweet.fields: 'public_metrics'&lt;/code&gt; - will return metrics like likes, comments, retweets along with the text of the tweet.&lt;/li&gt;
&lt;li&gt;user.fields - &lt;code&gt;user.fields&lt;/code&gt; will return a User object of the user who tweeted it - I have only specified id and username. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;expansions: author_id&lt;/code&gt;. User array and Tweet array will be separate. &lt;code&gt;author_id&lt;/code&gt; in the Tweet object works like a foreign key to link with &lt;code&gt;id&lt;/code&gt; field of the User object.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Calling the API&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tweets/search/recent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Uses the app client.&lt;/p&gt;

&lt;p&gt;The call returns the three objects&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;meta - metadata such as number of results returned.&lt;/li&gt;
&lt;li&gt;data - array of Tweets&lt;/li&gt;
&lt;li&gt;includes - related objects like the User array.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Next step will be to find the best tweet among these tweets based on public metrics. Simple math and comparisons. Refer to the code for the same.&lt;/p&gt;

&lt;p&gt;What we need at the end is the &lt;code&gt;tweet id&lt;/code&gt; and the &lt;code&gt;username&lt;/code&gt; of the best tweet&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#retweetingquote-tweeting"&gt;
  &lt;/a&gt;
  Retweeting/Quote tweeting
&lt;/h3&gt;

&lt;p&gt;Based on switch or probability, the bot randomly chooses between retweeting and quote tweeting. Simple &lt;code&gt;Math.random()&lt;/code&gt; logic.&lt;/p&gt;

&lt;p&gt;Let's look at the API calls.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quote tweet&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;statuses/update&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here status is the text that will be tweeted. It will also contain a link to the quoted tweet. Another point to figure out with the codebase.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Retweet&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;statuses/retweet/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As simple as that - &lt;code&gt;id&lt;/code&gt; here is the best tweet id we figured out before.&lt;/p&gt;

&lt;p&gt;And that's it. Now every time our code runs, it will find 10 recent tweets from certain users and will share the best of them.&lt;/p&gt;

&lt;p&gt;Now let's look at some supporting details.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#environment-variables"&gt;
  &lt;/a&gt;
  Environment variables
&lt;/h3&gt;

&lt;p&gt;All tokens and the user list are saved as environment variables. They should not be put into the code for the sake of security.&lt;/p&gt;

&lt;p&gt;I have used Repl Secrets for the task. You can choose whatever way your environment provides.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deploying-your-bot-and-keeping-it-running"&gt;
  &lt;/a&gt;
  Deploying your bot and keeping it running
&lt;/h3&gt;

&lt;p&gt;There are multiple ways to do this. One popular way bot makers follow is to put it on Heroku and make it run on scheduled timestamps. Same can be achieved with AWS Lambda and Azure Functions.&lt;/p&gt;

&lt;p&gt;My way was to keep it on Repl itself. Not sure how popular this is but let me share the steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Keep the code on Repl.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure the Run button - &lt;a href="https://docs.replit.com/programming-ide/configuring-run-button"&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add a .replit file to your Repl&lt;/li&gt;
&lt;li&gt;Add language and command to it
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="s"&gt;language = "bash"&lt;/span&gt;
    &lt;span class="s"&gt;run = "node index.js"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run it periodically - This is the interesting part. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An easy way to trigger a Repl is to hit its url &lt;a href="https://repl-name.username.repl.co/"&gt;https://repl-name.username.repl.co/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;I'm going to put this url in a monitor which will hit the url for health checks at the defined interval. &lt;/li&gt;
&lt;li&gt;UptimeRobot was the recommended solution but it did not work smoothly for me for small intervals. &lt;/li&gt;
&lt;li&gt;Eventually chose a freemium tool - &lt;a href="https://www.easycron.com/"&gt;https://www.easycron.com/&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Still using it in the free tier. Might switch over eventually.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's it. Now the bot runs every hour and finds a new tweet to share. Provided the users have tweeted in that hour. Rarely misses because my user list is long.&lt;/p&gt;




&lt;p&gt;Thanks for reading the article. &lt;/p&gt;

&lt;p&gt;The code is on &lt;a href="https://github.com/abh1navv/quote-tweet-bot"&gt;Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And I'm on &lt;a href="https://twitter.com/abh1navv"&gt;Twitter&lt;/a&gt; in case you want to reach out and say hello. &lt;/p&gt;

&lt;p&gt;Oh wait! The &lt;a href="https://twitter.com/quotinder"&gt;bot&lt;/a&gt; is on Twitter too. Come see how its doing.&lt;/p&gt;

</description>
      <category>replit</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>node</category>
    </item>
    <item>
      <title>How To Install TinyMCE Editor In Laravel</title>
      <author>Techsolutionstuff</author>
      <pubDate>Wed, 15 Sep 2021 03:26:28 +0000</pubDate>
      <link>https://dev.to/techsolutionstuff/how-to-install-tinymce-editor-in-laravel-594f</link>
      <guid>https://dev.to/techsolutionstuff/how-to-install-tinymce-editor-in-laravel-594f</guid>
      <description>&lt;p&gt;In this artical we will give you example how to Install tinymce editor in laravel, Tinymce editor is rich-text opensource editor, It has the ability to convert HTML textarea fields or other HTML elements to editor instances, here we will see how to use tinymce editor in laravel.&lt;/p&gt;

&lt;p&gt;Tinymce provides many features like PowerPaste, Spell Checker Pro, Image Upload, Accessibility Checker, Link Checker, Format Painter, Premium Skins &amp;amp; Icons and many more.&lt;/p&gt;

&lt;p&gt;So, let's see how to implement tinymce editor in laravel.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;title&amp;gt;How To Install TinyMCE Editor In Laravel - techsolutionstuff.com&amp;lt;/title&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;script src="https://cdn.tiny.cloud/1/no-api-key/tinymce/5/tinymce.min.js" referrerpolicy="origin"&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h1 style="text-align: center;"&amp;gt;How To Install TinyMCE Editor in Laravel - techsolutionstuff.com&amp;lt;/h1&amp;gt;
  &amp;lt;textarea id="texteditor"&amp;gt; &amp;lt;/textarea&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&amp;lt;script&amp;gt;
tinymce.init({
    selector: '#texteditor',
    height:350,
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ATayA2vI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dzzm81y5nuhbrdt0yfcf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ATayA2vI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dzzm81y5nuhbrdt0yfcf.png" alt="How To Install TinyMCE Editor In Laravel&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;You might also like :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="https://www.techsolutionstuff.com/post/how-to-generate-qrcode-in-laravel"&gt;Read More : How To Generate QRcode In Laravel&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="https://techsolutionstuff.com/post/how-to-generate-barcode-in-laravel"&gt;Read More : How To Generate Barcode In Laravel&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="https://www.techsolutionstuff.com/post/how-to-delete-multiple-records-using-checkbox-in-laravel"&gt;Read More : How To Delete Multiple Records Using Checkbox In Laravel&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>laravel</category>
      <category>tinymce</category>
      <category>texteditor</category>
      <category>javascript</category>
    </item>
    <item>
      <title>CSS - Video Inside A Computer</title>
      <author>CoderZ90</author>
      <pubDate>Wed, 15 Sep 2021 03:14:57 +0000</pubDate>
      <link>https://dev.to/official_fire/css-video-inside-a-computer-5ghp</link>
      <guid>https://dev.to/official_fire/css-video-inside-a-computer-5ghp</guid>
      <description>&lt;h1&gt;
  &lt;a href="#create-a-pure-css-video-inside-a-computer"&gt;
  &lt;/a&gt;
  Create a pure css video inside a computer 🔥
&lt;/h1&gt;



&lt;p&gt;Guys Before we begin i want to tell you guys that 😊 Please subscribe to my channel - &lt;a href="https://youtube.com/codingfire?sub_confrimation=1"&gt;https://youtube.com/codingfire?sub_confrimation=1&lt;/a&gt; please.. But More than that hope you are safe and happy 💖🔥&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-one"&gt;
  &lt;/a&gt;
  Step One
&lt;/h2&gt;

&lt;p&gt;So the first step is to download the necessary image and video, in this project we will need 1 image and 1 video. image is for the frame of the computer and video which will be inside the computer. Guys the tutorial video is also there so if you want to check feel free to do it 😊🙏&lt;/p&gt;

&lt;p&gt;See this image -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gtn1AgWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dpokhp4jlh9do39gz2ox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gtn1AgWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dpokhp4jlh9do39gz2ox.png" alt="One image used is the frame and the video inside the computer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#here-are-the-links-to-download-the-image-and-the-video"&gt;
  &lt;/a&gt;
  Here are the links to download the image and the video 😊
&lt;/h3&gt;

&lt;p&gt;Image Link - &lt;a href="https://raw.githubusercontent.com/CoderZ90/Video-Inside-Computer-Using-CSS/main/computer.png"&gt;https://raw.githubusercontent.com/CoderZ90/Video-Inside-Computer-Using-CSS/main/computer.png&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Video Link - &lt;a href="https://github.com/CoderZ90/Video-Inside-Computer-Using-CSS/blob/main/video.mp4"&gt;https://github.com/CoderZ90/Video-Inside-Computer-Using-CSS/blob/main/video.mp4&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-02"&gt;
  &lt;/a&gt;
  Step 02
&lt;/h3&gt;

&lt;p&gt;So in this step we will start from html and the step 03 will be the css, the html is very small and basic&lt;/p&gt;

&lt;p&gt;Here we are creating a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with the class of computer and then we are inserting our image and then our video&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- Coding by CodingFire - youtube.com/CodingFire --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;CSS - Video Inside a Computer | CodingFire&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"computer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="c"&gt;&amp;lt;!-- Computer Image --&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"computerBorder"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./computer.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="c"&gt;&amp;lt;!-- video --&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;video&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"video.mp4"&lt;/span&gt; &lt;span class="na"&gt;muted&lt;/span&gt; &lt;span class="na"&gt;loop&lt;/span&gt; &lt;span class="na"&gt;autoplay&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/video&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-03"&gt;
  &lt;/a&gt;
  Step 03
&lt;/h1&gt;

&lt;p&gt;So the last step is css&lt;/p&gt;

&lt;p&gt;here the main part is we are fitting the video and computer frame image in such a way that it look like the video is inside the computer. We are using position absolute and relative to do it. check the css code below btw source code is also providing and video also&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f1f1f1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.computer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;450px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;450px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.computerBorder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;450px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;350px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;drop-shadow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;video&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;14%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;94%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c"&gt;/* Put this value too  */&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope you like the blog and it helped you 💖😊&lt;br&gt;
as i said the source code and the video is also available so here it is &lt;/p&gt;

&lt;p&gt;Source Code Link - &lt;a href="https://github.com/CoderZ90/Video-Inside-Computer-Using-CSS"&gt;https://github.com/CoderZ90/Video-Inside-Computer-Using-CSS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Video Link - this video is made by me and please subscribe to my channel it really motivates me to do more &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=IWiYWezOqm8"&gt;https://www.youtube.com/watch?v=IWiYWezOqm8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy Coding 💖&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Octo: The Open Source Static Site Generator</title>
      <author>Luigi Zaccagnini</author>
      <pubDate>Wed, 15 Sep 2021 02:56:52 +0000</pubDate>
      <link>https://dev.to/luigizaccagnini/open-source-static-site-generator-3953</link>
      <guid>https://dev.to/luigizaccagnini/open-source-static-site-generator-3953</guid>
      <description>&lt;p&gt;After my &lt;a href="https://dev.to/luigizaccagnini/starting-my-journey-in-opensource-1m4n"&gt;first blog post&lt;/a&gt; I decided what was a better way to start into open source then building my own open source project! I then built a static site generator in Javascript called &lt;a href="https://github.com/LuigiZaccagnini/octo"&gt;Octo&lt;/a&gt;. The project was created with the idea of shipping a finished product is better than shipping when the product is perfect. This is important because if I shipped a perfect product, I would not be writing this post and most likely would still be writing code for an infinite amount of time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-static-site-generator"&gt;
  &lt;/a&gt;
  What is a Static Site Generator?
&lt;/h2&gt;

&lt;p&gt;A SSG(static site generator) is a tool that creates static HTML pages based off of a template or some raw data provided. Octo is designed to only accept .txt files and create static html documents based off of the content within the text files. Octo will read the text data and make paragraph elements every time there is a space between content. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tool-setup"&gt;
  &lt;/a&gt;
  Tool Setup
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;This builds Octo so you can access it anywhere on your computer using the &lt;code&gt;octo&lt;/code&gt; command. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clone the repository &lt;/li&gt;
&lt;li&gt;cd into the folder &lt;/li&gt;
&lt;li&gt;run npm i to install all dependencies &lt;/li&gt;
&lt;li&gt;run npm install -g .&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#input"&gt;
  &lt;/a&gt;
  Input
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;-i or --input&lt;/code&gt; flag means the input path. This will look for all texts files with the given path. You can give a .txt file as input or a directory. This is a required field for the program to work. Any files/directories with spaces should be entered with quotes: &lt;/p&gt;

&lt;pre&gt;octo -i "Sherlock Holmes Selected Stories/test.txt"&lt;/pre&gt;


&lt;center&gt;&lt;strong&gt;Only text files work with this program.&lt;/strong&gt;&lt;/center&gt;
&lt;br&gt;

&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h4&gt;
&lt;h5&gt;
  &lt;a href="#file-input"&gt;
  &lt;/a&gt;
  File Input
&lt;/h5&gt;

&lt;p&gt;This will take the content from the text file and output a HTML file.&lt;/p&gt;

&lt;pre&gt;
    octo -i test.txt
&lt;/pre&gt;

&lt;h5&gt;
  &lt;a href="#directory-input"&gt;
  &lt;/a&gt;
  Directory Input
&lt;/h5&gt;

&lt;p&gt;This will go though a directory named test and look for all nested .txt files.&lt;/p&gt;

&lt;pre&gt;
    octo -i test
&lt;/pre&gt;

&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h3&gt;

&lt;p&gt;The output allows the user to specify the path where the files/directories can be exported. &lt;br&gt;
This is not a required field and will default to './dist' if no option is given.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;-o or --output&lt;/code&gt; flag means the output path. This will create a folder called htmlFiles outside of the current directory.&lt;/p&gt;

&lt;pre&gt;
    octo -i test.txt -o ../hmtlFiles
&lt;/pre&gt;

&lt;h3&gt;
  &lt;a href="#recursive-file-searching"&gt;
  &lt;/a&gt;
  Recursive File Searching
&lt;/h3&gt;

&lt;p&gt;If a input is a directory, Octo will recursively go through all the child directories and convert all the text files into HTML.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;After creating my own open source project, I was able to grow as a software developer! Although it may seem to be not as difficult of a task, the few things that were difficult for me were: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Publishing my code online for everyone to see&lt;/li&gt;
&lt;li&gt;Submitting code that could possibly be buggy&lt;/li&gt;
&lt;li&gt;Not having a 100% completed software&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those thoughts might have made it difficult at first but, I was able to move past this and understand that &lt;strong&gt;these things are okay!&lt;/strong&gt; Comment some features that you would like to see with this project, I would love to add them to the Github repository. I am also excited to get pull requests from people in the community to help make this tool better! If you want to contribute to the project or check out the link to the sample site, the links will be under here!&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Source&lt;/th&gt;
&lt;th&gt;Link&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Github Repository&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/LuigiZaccagnini/octo"&gt;https://github.com/LuigiZaccagnini/octo&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sample Site&lt;/td&gt;
&lt;td&gt;&lt;a href="https://luigizaccagnini.github.io/octo/"&gt;https://luigizaccagnini.github.io/octo/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>javascript</category>
      <category>opensource</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Go/Golang Basics</title>
      <author>Tarun Kumar J</author>
      <pubDate>Wed, 15 Sep 2021 02:51:01 +0000</pubDate>
      <link>https://dev.to/tarunj096/go-golang-basics-246c</link>
      <guid>https://dev.to/tarunj096/go-golang-basics-246c</guid>
      <description>&lt;p&gt;&lt;strong&gt;Go&lt;/strong&gt; is Open Source Programming language that is  &lt;code&gt;statically typed&lt;/code&gt; . Although it is statically typed, It's so fast that it feels like it's an Interpreted language. &lt;/p&gt;

&lt;p&gt;So let's start with the basics. As Go is a Compiled language, Its Code has to be converted to an executable/binary file. Go has a compiler that translates the code into a binary file.&lt;/p&gt;

&lt;p&gt;If your file's name was helloworld.go then to compile it on the terminal, The command would look like this :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go build helloworld.go

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command would create a "helloworld" file. To execute that, call &lt;code&gt;./helloworld&lt;/code&gt;  in the terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./helloworld

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's a run command that both compiles and executes the code. Although the run command will not create a binary file.&lt;/p&gt;

&lt;p&gt;For example to run the command on helloworld.go file, It would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go run helloworld.go

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A Go program should have a package declaration. After the package declaration, We have import statement right below it. It looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import "fmt"

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the package name has to be enclosed in &lt;code&gt;double quotes&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;The functions in Go are declared with &lt;code&gt;func&lt;/code&gt; keyword and that is followed by name of the function.&lt;br&gt;
Let's see a basic program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import "fmt"

func main() {

        fmt.Println(" Hello World! ")

}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above program in function main we have used the &lt;code&gt;fmt&lt;/code&gt; package which helps us call Println to print.&lt;/p&gt;

&lt;p&gt;To run the command we use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go run main.go

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This would print the message "Hello World!".&lt;/p&gt;

&lt;p&gt;In Go language, the main package is a special package which is used with the programs that are executable and this package contains main() function. Go automatically calls the main function and there is no need to explicitly call it.&lt;/p&gt;

&lt;p&gt;You can use &lt;strong&gt;go doc&lt;/strong&gt; on the command line for more information about the packages.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go doc fmt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above command gives us information about fmt package. &lt;br&gt;
For more specific information you could use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go doc fmt.Println
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And Lastly, For more information about Go lang ,You can always check the documentation.   &lt;a href="https://golang.org"&gt;&lt;strong&gt;&lt;em&gt;This&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; is the official site 💯.&lt;/p&gt;

&lt;p&gt;If you are learning Go language and would want to know more, Below are some resources 🔥.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Watch a video course on &lt;a href="https://www.youtube.com/watch?v=YS4e4q9oBaU"&gt; &lt;strong&gt;freecodecamp&lt;/strong&gt;&lt;/a&gt; .&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There's a free course on Codecademy too. You can check it out  &lt;a href="https://www.codecademy.com/learn/learn-go"&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>go</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
