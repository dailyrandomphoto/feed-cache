<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Awesome macOS Libraries List</title>
      <author>Anton Paliakou</author>
      <pubDate>Fri, 21 Jan 2022 09:58:35 +0000</pubDate>
      <link>https://dev.to/toni777772/awesome-macos-libraries-list-3556</link>
      <guid>https://dev.to/toni777772/awesome-macos-libraries-list-3556</guid>
      <description>&lt;p&gt;Do you like the list? Press ‚≠êÔ∏è on GitHub too! Thanks!&lt;br&gt;
&lt;a href="https://github.com/Toni77777/awesome-macos-libraries"&gt;https://github.com/Toni77777/awesome-macos-libraries&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dependency-manager"&gt;
  &lt;/a&gt;
  Dependency Manager
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/apple/swift-package-manager"&gt;Swift Package Manager&lt;/a&gt; - The Package Manager for the Swift Programming Language. Created and maintained by Apple. Language: Swift. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/CocoaPods/CocoaPods"&gt;CocoaPods&lt;/a&gt; - The Cocoa Dependency Manager. CocoaPods manages dependencies for your Xcode projects. (de facto standard/most used Dependency Manager) Language: Ruby.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Carthage/Carthage"&gt;Carthage&lt;/a&gt; - A simple, decentralized dependency manager for Cocoa. Language: Swift.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#animation"&gt;
  &lt;/a&gt;
  Animation
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/timdonnelly/Advance"&gt;Advance&lt;/a&gt; - Physics-based animations. Language: Swift.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#audio"&gt;
  &lt;/a&gt;
  Audio
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/AudioKit/AudioKit"&gt;AudioKit&lt;/a&gt; - Swift audio synthesis, processing, &amp;amp; analysis platform. Language: Swift.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#database"&gt;
  &lt;/a&gt;
  Database
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/realm/realm-cocoa"&gt;Realm&lt;/a&gt; - Realm is a mobile database: a replacement for Core Data &amp;amp; SQLite. Language: Objective-C.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/yapstudios/YapDatabase"&gt;YapDatabase&lt;/a&gt; - YapDB is a collection/key/value store with a plugin architecture. It's built atop sqlite, for Swift &amp;amp; objective-c developers. Language: Objective-C.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ccgus/fmdb"&gt;FMDB&lt;/a&gt; - A Cocoa / Objective-C wrapper around SQLite. Language: Objective-C.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/modo-studio/SugarRecord"&gt;SugarRecord&lt;/a&gt; - CoreData/Realm sweet wrapper written in Swift. Language: Swift. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/stephencelis/SQLite.swift"&gt;SQLite.swift&lt;/a&gt; - A type-safe, Swift-language layer over SQLite3. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/groue/GRDB.swift"&gt;GRDB&lt;/a&gt; - A toolkit for SQLite databases, with a focus on application development. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/realm/realm-cocoa-converter"&gt;Realm Converter&lt;/a&gt; - A library that provides the ability to import/export Realm files from a variety of data container formats. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Tencent/wcdb"&gt;WCDB&lt;/a&gt; - WCDB is a cross-platform database framework developed by WeChat. Language: C. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/caiyue1993/IceCream"&gt;IceCream&lt;/a&gt; - Sync Realm Database with CloudKit. Language: Swift. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/OpenKitten/MongoKitten"&gt;MongoKitten&lt;/a&gt; - Native MongoDB driver for Swift, written in Swift. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/arturdev/Unrealm"&gt;Unrealm&lt;/a&gt; - Unrealm is an extension on RealmCocoa, which enables Swift native types to be saved in Realm. Language: Swift.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#dependency-injection"&gt;
  &lt;/a&gt;
  Dependency Injection
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/Swinject/Swinject"&gt;Swinject&lt;/a&gt; - Dependency injection framework for Swift. Language: Swift.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#device"&gt;
  &lt;/a&gt;
  Device
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/Ekhoo/Device"&gt;Device&lt;/a&gt; - Light weight tool for detecting the current device and screen size written in swift. Language: Swift.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#extensions"&gt;
  &lt;/a&gt;
  Extensions
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/SwifterSwift/SwifterSwift"&gt;SwifterSwift&lt;/a&gt; - A handy collection of more than 500 native Swift extensions to boost your productivity. Language: Swift.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#files"&gt;
  &lt;/a&gt;
  Files
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/nvzqz/FileKit"&gt;FileKit&lt;/a&gt; - Simple and expressive file management in Swift. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pixelglow/ZipZap"&gt;ZipZap&lt;/a&gt; - zip file I/O library. Language: Objective-C.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/weichsel/ZIPFoundation"&gt;ZIPFoundation&lt;/a&gt; - Effortless ZIP Handling in Swift. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ZipArchive/ZipArchive"&gt;SSZipArchive&lt;/a&gt; - ZipArchive is a simple utility class for zipping and unzipping files. Language: C.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/krzysztofzablocki/KZFileWatchers"&gt;KZFileWatchers&lt;/a&gt; - A micro-framework for observing file changes, both local and remote. Helpful in building developer tools. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/amosavian/FileProvider"&gt;FilesProvider&lt;/a&gt; - FileManager replacement for Local, iCloud and Remote. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/marmelroy/Zip"&gt;Zip&lt;/a&gt; - Swift framework for zipping and unzipping files. Language: Swift.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#image"&gt;
  &lt;/a&gt;
  Image
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/onevcat/Kingfisher"&gt;Kingfisher&lt;/a&gt; - A lightweight, pure-Swift library for downloading and caching images from the web. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kean/Nuke"&gt;Nuke&lt;/a&gt; - Image loading system. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Alamofire/AlamofireImage"&gt;AlamofireImage&lt;/a&gt; - AlamofireImage is an image component library for Alamofire. Language: Swift.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#in-app-purchases-and-subscription"&gt;
  &lt;/a&gt;
  In App Purchases and Subscription
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/bizz84/SwiftyStoreKit"&gt;SwiftyStoreKit&lt;/a&gt; - Lightweight In App Purchases Swift framework. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/RevenueCat/purchases-ios"&gt;purchases-ios&lt;/a&gt; - In-app purchases and subscriptions made easy.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#json"&gt;
  &lt;/a&gt;
  JSON
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types"&gt;Codable&lt;/a&gt; - Out of box üì¶  solution from Apple for Encode/Decode JSON. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/SwiftyJSON/SwiftyJSON"&gt;SwiftyJSON&lt;/a&gt; - The better way to deal with JSON data in Swift. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/SBJson/SBJson"&gt;SBJson&lt;/a&gt; - This framework implements a strict JSON parser and generator in Objective-C. Language: Objective-C. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Mantle/Mantle"&gt;Mantle&lt;/a&gt; - Model framework for Cocoa and Cocoa Touch. Language: Objective-C.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jsonmodel/jsonmodel"&gt;JSONModel&lt;/a&gt; - Magical Data Modeling Framework for JSON - allows rapid creation of smart data models. Language: Objective-C.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ikesyo/Himotoki"&gt;Himotoki&lt;/a&gt; - A type-safe JSON decoding library purely written in Swift. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tristanhimmelman/AlamofireObjectMapper"&gt;AlamofireObjectMapper&lt;/a&gt; - An Alamofire extension which converts JSON response data into swift objects using ObjectMapper. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/CoderMJLee/MJExtension"&gt;MJExtension&lt;/a&gt; - A fast, convenient and nonintrusive conversion framework between JSON and model. Your model class doesn't need to extend any base class. You don't need to modify any model file. Language: Objective-C.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tristanhimmelman/ObjectMapper"&gt;ObjectMapper&lt;/a&gt; - Simple JSON Object mapping written in Swift. Language: Swift.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#keychain"&gt;
  &lt;/a&gt;
  Keychain
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/kishikawakatsumi/KeychainAccess"&gt;KeychainAccess&lt;/a&gt; - Simple Swift wrapper for Keychain. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/matthewpalmer/Locksmith"&gt;Locksmith&lt;/a&gt; - A powerful, protocol-oriented library for working with the keychain in Swift. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/square/Valet"&gt;Valet&lt;/a&gt; - Valet lets you securely store data in the macOS Keychain without knowing a thing about how the Keychain works. It‚Äôs easy. We promise. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kishikawakatsumi/UICKeyChainStore"&gt;UICKeyChainStore&lt;/a&gt; - UICKeyChainStore is a simple wrapper for Keychain on macOS. Makes using Keychain APIs as easy as NSUserDefaults. Language: Objective-C.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#linter"&gt;
  &lt;/a&gt;
  Linter
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/realm/SwiftLint"&gt;SwiftLint&lt;/a&gt; - A tool to enforce Swift style and conventions. Language: Swift.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#logging"&gt;
  &lt;/a&gt;
  Logging
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/CocoaLumberjack/CocoaLumberjack"&gt;CocoaLumberjack&lt;/a&gt; - A fast &amp;amp; simple, yet powerful &amp;amp; flexible logging framework. Language: Objective-C.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/fpillet/NSLogger"&gt;NSLogger&lt;/a&gt; - A modern, flexible logging tool. Language: Objective-C.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/atereshkov/EXPLogger"&gt;EXPLogger&lt;/a&gt; - A lightweight and simple logger for Swift projects. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/DaveWoodCom/XCGLogger"&gt;XCGLogger&lt;/a&gt; - A debug log framework for use in Swift projects. Allows you to log details to the console (and optionally a file), just like you would have with NSLog() or print(), but with additional information, such as the date, function name, filename and line number. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/SwiftyBeaver/SwiftyBeaver"&gt;SwiftyBeaver&lt;/a&gt; - Convenient &amp;amp; secure logging during development &amp;amp; release. Language: Swift.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#layout"&gt;
  &lt;/a&gt;
  Layout
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/PureLayout/PureLayout"&gt;PureLayout&lt;/a&gt; - The ultimate API for iOS &amp;amp; OS X Auto Layout ‚Äî impressively simple, immensely powerful. Language: Objective-C.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/SnapKit/SnapKit"&gt;SnapKit&lt;/a&gt; - A Swift Autolayout DSL. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/exyte/Grid"&gt;Grid&lt;/a&gt; - The most powerful Grid container missed in SwiftUI. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kean/Align"&gt;Align&lt;/a&gt; - Intuitive and powerful Auto Layout library. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/layoutBox/PinLayout"&gt;PinLayout&lt;/a&gt; - Fast Swift Views layouting without auto layout. No magic, pure code, full control and blazing fast. Concise syntax, intuitive, readable &amp;amp; chainable. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/onmyway133/EasyAnchor"&gt;EasyAnchor&lt;/a&gt; - Declarative, extensible, powerful Auto Layout. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/roberthein/TinyConstraints"&gt;TinyConstraints&lt;/a&gt; - Nothing but sugar. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Rightpoint/Anchorage"&gt;Anchorage&lt;/a&gt; - A collection of operators and utilities that simplify layout code. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nakiostudio/EasyPeasy"&gt;EasyPeasy&lt;/a&gt; - Auto Layout made easy. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mamaral/Neon"&gt;Neon&lt;/a&gt; - A powerful Swift programmatic UI layout framework. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/robb/Cartography"&gt;Cartography&lt;/a&gt; -  A declarative Auto Layout DSL for Swift. Language: Swift.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#network"&gt;
  &lt;/a&gt;
  Network
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/Alamofire/Alamofire"&gt;Alamofire&lt;/a&gt; - Alamofire is an HTTP networking library written in Swift. (de facto standard library for network) Language: Swift.
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/apollographql/apollo-ios"&gt;apollo-ios&lt;/a&gt; - A strongly-typed, caching GraphQL client. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/AFNetworking/AFNetworking"&gt;AFNetworking&lt;/a&gt; - A delightful networking framework. Language: Objective-C. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ashleymills/Reachability.swift"&gt;Reachability&lt;/a&gt; - Replacement for Apple's Reachability re-written in Swift with closures. Language: Swift. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Moya/Moya"&gt;Moya&lt;/a&gt; - Network abstraction layer written in Swift. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ishkawa/APIKit"&gt;APIKit&lt;/a&gt; - Type-safe networking abstraction layer that associates request type with response type. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/daltoniam/SwiftHTTP"&gt;SwiftHTTP&lt;/a&gt; - Thin wrapper around NSURLSession in swift. Simplifies HTTP requests. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/dduan/Just"&gt;Just&lt;/a&gt; - Swift HTTP for Humans. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bustoutsolutions/siesta"&gt;siesta&lt;/a&gt; - The civilized way to write REST API clients. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/RestKit/RestKit"&gt;RestKit&lt;/a&gt; - RestKit is a framework for consuming and modeling RESTful web resources. Language: Objective-C.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/apple/swift-protobuf"&gt;Swift Protobuf&lt;/a&gt; - Plugin and runtime library for using protobuf with Swift. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/alexeyxo/protobuf-swift"&gt;protobuf-swift&lt;/a&gt; - Google ProtocolBuffers for Apple Swift. Language: Swift.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#reactive-programming"&gt;
  &lt;/a&gt;
  Reactive Programming
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/ReactiveX/RxSwift"&gt;RxSwift&lt;/a&gt; - Reactive Programming in Swift. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ReactiveCocoa/ReactiveCocoa"&gt;ReactiveCocoa&lt;/a&gt; - Cocoa framework and Obj-C dynamism bindings for ReactiveSwift. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ReactiveCocoa/ReactiveSwift"&gt;ReactiveSwift&lt;/a&gt; - Streams of values over time by ReactiveCocoa group. Language: Swift.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#socket"&gt;
  &lt;/a&gt;
  Socket
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#readme"&gt;scroll to top&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/socketio/socket.io-client-swift"&gt;Socket.IO&lt;/a&gt; - Socket.IO client written on Swift. Language: Swift.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/facebookincubator/SocketRocket"&gt;SocketRocket&lt;/a&gt; - A conforming Objective-C WebSocket client library. Language: Objective-C. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/robbiehanson/CocoaAsyncSocket"&gt;CocoaAsyncSocket&lt;/a&gt; - Asynchronous socket networking library. Language: Objective-C. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do you know a cool macOS library? Welcome to contribute!&lt;br&gt;
&lt;a href="https://github.com/Toni77777/awesome-macos-libraries"&gt;https://github.com/Toni77777/awesome-macos-libraries&lt;/a&gt;&lt;/p&gt;

</description>
      <category>swift</category>
      <category>macos</category>
      <category>github</category>
      <category>osx</category>
    </item>
    <item>
      <title>Detecting Fake News Project</title>
      <author>Lians </author>
      <pubDate>Fri, 21 Jan 2022 09:55:01 +0000</pubDate>
      <link>https://dev.to/lians/detecting-fake-news-project-1n8d</link>
      <guid>https://dev.to/lians/detecting-fake-news-project-1n8d</guid>
      <description>&lt;p&gt;I always had Python debates with my friends; there was always something about me and the language that didn't match up. Who'd have guessed that two years later, I'd be considering a career in Data Science centered on Python? This is a step-by-step guide to completing a data science project that detects fake news. I gathered a set of data from. For this project,  I collected a Data Set from (&lt;a href="https://drive.google.com/file/d/1er9NJTLUA3qnRuyhfzuN0XUsoIC4a-_q/view"&gt;https://drive.google.com/file/d/1er9NJTLUA3qnRuyhfzuN0XUsoIC4a-_q/view&lt;/a&gt;)&lt;br&gt;
To begin you will need the following installed in your computer;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Jupyter Notebook that can be installed using Anaconda&lt;/li&gt;
&lt;li&gt; Python 3&lt;/li&gt;
&lt;li&gt; Download the csv file of the data set from the link shared above.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Let's get started&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;We'll design a TfidfVectorizer with sklearn and then establish a PassiveAgressorClassiffer to help fit the model.&lt;br&gt;
You'll need to install the following prerequisites before you can use your Jupyter library. To begin, we'll use the code below to install numpy sklearn.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install numpy pandas sklearn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your application will install the required tools and create a fresh input space for you to type your next code.&lt;br&gt;
You'll need to use the codes below to make the appropriate imports for this project;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import pandas as pd
import numpy as np
import itertools
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import PassiveAggressiveClassifier
from sklearn.metrics import accuracy_score, confusion_matrix
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After executing the application, the screen will show no output, indicating that the data set is ready to be read into your notebook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#news is just a variable name we assigned to the project to simply our access to the dataset, you are free to select another name.
news = pd.read_csv(r'C:\Users\lian.s\Desktop\Sign Recognition\news.csv')
#We print out the number of rows and columns
news.shape
#Prints out the top 5 rows in a dataframe or series
news.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run the program, you'll notice something like this. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6e9G-3DB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8crnz6turnmgk3nqxaot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6e9G-3DB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8crnz6turnmgk3nqxaot.png" alt="If you run the program, you'll notice something like this." width="880" height="335"&gt;&lt;/a&gt;&lt;br&gt;
That means we successfully read the dataset to our notebook and described the top 5 rows and columns. Now we can call the labels from the data set;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;labels= news.label
labels.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Congratulations, your project is off to a solid start&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TlNuCRI2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8a8m6kxnsz5ka4dlfl8i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TlNuCRI2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8a8m6kxnsz5ka4dlfl8i.png" alt="Congratulations, your project is off to a solid start" width="880" height="132"&gt;&lt;/a&gt;&lt;br&gt;
You've undoubtedly dealt with training and testing as a young data scientist. This will be the next phase in the development of our project.&lt;br&gt;
We utilize data to construct a training set, which is a subset used to fit the model, and then we use the trainset to test it. As a result, we must first establish a training set and then test it to convert it to a test set. The models developed are used to predict an unknown outcome.&lt;br&gt;
To accomplish this, we employ;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x_train,x_test,y_train,y_test=train_test_split(news['text'], labels, test_size=0.2, random_state=7)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's start by creating a TfidfVectorizer;&lt;br&gt;
Term Frequency (TF) is the number of times a word appears in a document, whereas Inverse Document Frequency (IDF) is the number of times a word appears in one document relative to others. The function creates its own matrix from raw data sets. We first generate the matrix, then fit and transform the vectorizer on the train set, as well as transform the vectorizer on the test set.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tfidf_vectorizer=TfidfVectorizer(stop_words='english', max_df=0.7)
tfidf_train=tfidf_vectorizer.fit_transform(x_train) 
tfidf_test=tfidf_vectorizer.transform(x_test)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the help of sklearn PassiveAggressiveClassifier, which operates by reacting passively to accurate classifications and aggressively to any misclassifications, we'll be able to calculate the accuracy of our test set.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#Initialize a PassiveAggressiveClassifier
pac=PassiveAggressiveClassifier(max_iter=50)
pac.fit(tfidf_train,y_train)
#Predict on the test set and calculate accuracy
y_pred=pac.predict(tfidf_test)
score=accuracy_score(y_test,y_pred)
print(f'Accuracy: {round(score*100,2)}%')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we have an accuracy result of 92.9%&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AW8WCis9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o4trcnypn4l24c77qmao.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AW8WCis9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o4trcnypn4l24c77qmao.png" alt="an accuracy result of 92.9%" width="880" height="217"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, we print out the matrix of how many fake and true news exist amongst our set. This is what we call a confusion matrix.&lt;/p&gt;

&lt;p&gt;confusion_matrix(y_test,y_pred, labels=['FAKE','REAL'])&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RlJpcsjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ll095rzirm07ax3b3471.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RlJpcsjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ll095rzirm07ax3b3471.png" alt="Results" width="880" height="153"&gt;&lt;/a&gt;&lt;br&gt;
From our test, we have 588 true positives, 40 false positives , 589 true negatives and 50 false negatives.&lt;/p&gt;

&lt;p&gt;There you have it, for more practice you can use the set to calculate over and underfitting. I hope you found this post useful; please share your thoughts in the comments section below.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to build a toast (notification) component with Tailwind CSS and Flowbite</title>
      <author>Zolt√°n Sz≈ëgy√©nyi</author>
      <pubDate>Fri, 21 Jan 2022 09:49:42 +0000</pubDate>
      <link>https://dev.to/themesberg/how-to-build-a-toast-notification-component-with-tailwind-css-and-flowbite-47nb</link>
      <guid>https://dev.to/themesberg/how-to-build-a-toast-notification-component-with-tailwind-css-and-flowbite-47nb</guid>
      <description>&lt;p&gt;Tailwind CSS is one of the most popular open-source CSS frameworks based on the utility-first approach and it is estimated that this year it will reach more weekly downloads on NPM than Bootstrap.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://flowbite.com"&gt;Flowbite&lt;/a&gt; is an open-source component library based on Tailwind CSS featuring dark mode support, a Figma design system, components like buttons, dropdowns, modals, navbars, and more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kpVuoewp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1f5wzbxp7sd3ezsi2mn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kpVuoewp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1f5wzbxp7sd3ezsi2mn.png" alt="Tailwind CSS Toast" width="880" height="612"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this article I want to show you how you can build a toast/notification component for your Tailwind CSS project using Flowbite.&lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css-toast-component"&gt;
  &lt;/a&gt;
  Tailwind CSS toast component
&lt;/h2&gt;

&lt;p&gt;First of all, we should set up the semantic HTML5 markup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div id="toast-default" role="alert"&amp;gt;
    &amp;lt;div&amp;gt;Set yourself free.&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's now add the close use some stylings for the toast wrapper and the text inside:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div id="toast-default" class="flex items-center w-full max-w-xs p-4 text-gray-500 bg-white rounded-lg shadow dark:text-gray-400 dark:bg-gray-800" role="alert"&amp;gt;
    &amp;lt;div class="ml-3 text-sm font-normal"&amp;gt;Set yourself free.&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A toast and notification pop-up should always have a close icon. Let's use a SVG X icon:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div id="toast-default" class="flex items-center w-full max-w-xs p-4 text-gray-500 bg-white rounded-lg shadow dark:text-gray-400 dark:bg-gray-800" role="alert"&amp;gt;
    &amp;lt;div class="ml-3 text-sm font-normal"&amp;gt;Set yourself free.&amp;lt;/div&amp;gt;
    &amp;lt;button type="button" class="ml-auto -mx-1.5 -my-1.5 bg-white text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex h-8 w-8 dark:text-gray-500 dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700" aria-label="Close"&amp;gt;
        &amp;lt;span class="sr-only"&amp;gt;Close&amp;lt;/span&amp;gt;
        &amp;lt;svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"&amp;gt;&amp;lt;path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;/svg&amp;gt;
    &amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's also add a descriptive icon before the text:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div id="toast-default" class="flex items-center w-full max-w-xs p-4 text-gray-500 bg-white rounded-lg shadow dark:text-gray-400 dark:bg-gray-800" role="alert"&amp;gt;
    &amp;lt;div class="inline-flex items-center justify-center flex-shrink-0 w-8 h-8 text-blue-500 bg-blue-100 rounded-lg dark:bg-blue-800 dark:text-blue-200"&amp;gt;
        &amp;lt;svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"&amp;gt;&amp;lt;path fill-rule="evenodd" d="M12.395 2.553a1 1 0 00-1.45-.385c-.345.23-.614.558-.822.88-.214.33-.403.713-.57 1.116-.334.804-.614 1.768-.84 2.734a31.365 31.365 0 00-.613 3.58 2.64 2.64 0 01-.945-1.067c-.328-.68-.398-1.534-.398-2.654A1 1 0 005.05 6.05 6.981 6.981 0 003 11a7 7 0 1011.95-4.95c-.592-.591-.98-.985-1.348-1.467-.363-.476-.724-1.063-1.207-2.03zM12.12 15.12A3 3 0 017 13s.879.5 2.5.5c0-1 .5-4 1.25-4.5.5 1 .786 1.293 1.371 1.879A2.99 2.99 0 0113 13a2.99 2.99 0 01-.879 2.121z" clip-rule="evenodd"&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;/svg&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="ml-3 text-sm font-normal"&amp;gt;Set yourself free.&amp;lt;/div&amp;gt;
    &amp;lt;button type="button" class="ml-auto -mx-1.5 -my-1.5 bg-white text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex h-8 w-8 dark:text-gray-500 dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700" aria-label="Close"&amp;gt;
        &amp;lt;span class="sr-only"&amp;gt;Close&amp;lt;/span&amp;gt;
        &amp;lt;svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"&amp;gt;&amp;lt;path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;/svg&amp;gt;
    &amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to make add the feature of the close icon to actually hide the toast component, I recommend you to &lt;a href="https://flowbite.com/docs/getting-started/quickstart/"&gt;install Flowbite&lt;/a&gt; as a plugin inside your Tailwind CSS project and also include the JS script.&lt;/p&gt;

&lt;p&gt;Make sure that you have &lt;a href="https://nodejs.org/en/" rel="nofollow"&gt;Node.js&lt;/a&gt; and &lt;a href="https://tailwindcss.com/" rel="nofollow"&gt;Tailwind CSS&lt;/a&gt; installed. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install Flowbite as a dependency using NPM by running the following command:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i @themesberg/flowbite
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Require Flowbite as a plugin inside the &lt;code&gt;tailwind.config.js&lt;/code&gt; file:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@themesberg/flowbite/plugin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Include the main JavaScript file to make interactive elements work:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"../path/to/@themesberg/flowbite/dist/flowbite.bundle.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Additionally to your own &lt;code&gt;content&lt;/code&gt; data you should add &lt;code&gt;@themesberg/flowbite&lt;/code&gt; to apply the classes from the interactive elements in the &lt;code&gt;tailwind.config.js&lt;/code&gt; file:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./node_modules/@themesberg/flowbite/**/*.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now add the &lt;code&gt;data-collapse-toggle="toast-default"&lt;/code&gt; data attribute to close the toast component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div id="toast-default" class="flex items-center w-full max-w-xs p-4 text-gray-500 bg-white rounded-lg shadow dark:text-gray-400 dark:bg-gray-800" role="alert"&amp;gt;
    &amp;lt;div class="inline-flex items-center justify-center flex-shrink-0 w-8 h-8 text-blue-500 bg-blue-100 rounded-lg dark:bg-blue-800 dark:text-blue-200"&amp;gt;
        &amp;lt;svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"&amp;gt;&amp;lt;path fill-rule="evenodd" d="M12.395 2.553a1 1 0 00-1.45-.385c-.345.23-.614.558-.822.88-.214.33-.403.713-.57 1.116-.334.804-.614 1.768-.84 2.734a31.365 31.365 0 00-.613 3.58 2.64 2.64 0 01-.945-1.067c-.328-.68-.398-1.534-.398-2.654A1 1 0 005.05 6.05 6.981 6.981 0 003 11a7 7 0 1011.95-4.95c-.592-.591-.98-.985-1.348-1.467-.363-.476-.724-1.063-1.207-2.03zM12.12 15.12A3 3 0 017 13s.879.5 2.5.5c0-1 .5-4 1.25-4.5.5 1 .786 1.293 1.371 1.879A2.99 2.99 0 0113 13a2.99 2.99 0 01-.879 2.121z" clip-rule="evenodd"&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;/svg&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="ml-3 text-sm font-normal"&amp;gt;Set yourself free.&amp;lt;/div&amp;gt;
    &amp;lt;button type="button" class="ml-auto -mx-1.5 -my-1.5 bg-white text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex h-8 w-8 dark:text-gray-500 dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700" data-collapse-toggle="toast-default" aria-label="Close"&amp;gt;
        &amp;lt;span class="sr-only"&amp;gt;Close&amp;lt;/span&amp;gt;
        &amp;lt;svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"&amp;gt;&amp;lt;path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;/svg&amp;gt;
    &amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dark-mode"&gt;
  &lt;/a&gt;
  Dark mode
&lt;/h2&gt;

&lt;p&gt;If you noticed I also showed you how to add the &lt;code&gt;dark:x&lt;/code&gt; variant classes for dark mode. Check out this &lt;a href="https://flowbite.com/docs/customize/dark-mode/"&gt;Tailwind CSS dark mode tutorial&lt;/a&gt; to learn how to set up a dark mode switcher with Flowbite and Tailwind CSS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_efOvmPQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lprb1d6450ebtwroi00.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_efOvmPQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lprb1d6450ebtwroi00.png" alt="Tailwind CSS toast dark mode" width="880" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flowbite-tailwind-css-components"&gt;
  &lt;/a&gt;
  Flowbite - Tailwind CSS components
&lt;/h2&gt;

&lt;p&gt;This toast component built with Tailwind is part of a larger and open source component library called Flowbite.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KHEtzhV4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hldt1t2on5mqy9yxq7dx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KHEtzhV4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hldt1t2on5mqy9yxq7dx.png" alt="Tailwind CSS Toast" width="880" height="407"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can check out the following links to view more toast component styles, sizes, and variations and also other components like buttons, modals, navbars, and more.&lt;/p&gt;

&lt;p&gt;üëâ &lt;a href="https://flowbite.com/docs/components/toast/"&gt;Tailwind CSS toast component&lt;/a&gt;&lt;br&gt;
üìö &lt;a href="https://flowbite.com/docs/getting-started/introduction/"&gt;Flowbite - Tailwind CSS components&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>webdev</category>
      <category>opensource</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Moonly - Discover Upcoming NFT Update #2</title>
      <author>Stefan Smiljkovic</author>
      <pubDate>Fri, 21 Jan 2022 09:29:57 +0000</pubDate>
      <link>https://dev.to/shtefcs/moonly-discover-upcoming-nft-update-2-2o9f</link>
      <guid>https://dev.to/shtefcs/moonly-discover-upcoming-nft-update-2-2o9f</guid>
      <description>&lt;p&gt;Hello people üëã, how is your week? Hope you did at least half of what you wanted.&lt;/p&gt;

&lt;p&gt;Last week I introduced my new project called &lt;a href="https://moon.ly"&gt;https://moon.ly&lt;/a&gt; which discovers upcoming NFT's, currently on Solana blockchain only. In the near future, It will also offer a set of tools based on analyzing the various data source to help people in the NFT space make better decisions when minting or trading.&lt;/p&gt;

&lt;p&gt;The initial version of Moonly was built using no-code tools like &lt;a href="https://automatio.co"&gt;https://automatio.co&lt;/a&gt; which collected a bunch of data, Webflow to put a website together, and Integromat, to automate some processes. Of course, there is a lot of manual work involved done by me and my VA (virtual assistant) Nikola.&lt;/p&gt;

&lt;p&gt;As I write, Moonly is getting rebuilt from the scratch using tech like Next.js, Express, GraphQL, etc. We are building custom solutions because of more flexibility and scalability. For example, Webflow has a very annoying limit of 10k items in the CMS database, and a lot of people complain about it for years, but they don't listen. To be honest, that is one of the main reasons I decided to build a custom solution from scratch, but ofc there are other reasons which I will talk about in the next update.&lt;/p&gt;

&lt;p&gt;In the last 7-8 days we did:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Designed UI for NFT details page with all kinds of metrics &lt;a href="https://i.imgur.com/JBcxOAv.png"&gt;https://i.imgur.com/JBcxOAv.png&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Converted Ui to a Next.js frontend &lt;a href="https://i.imgur.com/gfzxim1.png"&gt;https://i.imgur.com/gfzxim1.png&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Built backend and database structure&lt;/li&gt;
&lt;li&gt;Started connecting with external data sources and API's&lt;/li&gt;
&lt;li&gt;Started building administration panel&lt;/li&gt;
&lt;li&gt;Added 200+ NFT projects&lt;/li&gt;
&lt;li&gt;Moonly generated ~1600 visitors in the last 7 days &lt;a href="https://i.imgur.com/WyI5LmX.png"&gt;https://i.imgur.com/WyI5LmX.png&lt;/a&gt;. Needed to exclude Direct traffic, because there is a bunch of bot attack there.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are also preparing our own NFT, but more on that when we have some progress updates.&lt;/p&gt;

&lt;p&gt;Currently, the team consists of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Two developers, one backend/DevOps, and another full-stack&lt;/li&gt;
&lt;li&gt;One virtual Assistant&lt;/li&gt;
&lt;li&gt;Writer&lt;/li&gt;
&lt;li&gt;UI Designer &amp;amp; Webflow developer (my wife Jelena)&lt;/li&gt;
&lt;li&gt;UI/UX designer (me)&lt;/li&gt;
&lt;li&gt;Growth hacker (me)&lt;/li&gt;
&lt;li&gt;Pixel Art designer for NFT&lt;/li&gt;
&lt;li&gt;Everything else of course me, since I need to glue, manage and decide on most of the things.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Last week I shared the top 30 Solana NFT projects by volume. Today I am sharing the next 30 projects also by volume.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/solsnatchers"&gt;https://moon.ly/nft/solsnatchers&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/metabaes"&gt;https://moon.ly/nft/metabaes&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/grim-syndicate"&gt;https://moon.ly/nft/grim-syndicate&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/quantum-traders"&gt;https://moon.ly/nft/quantum-traders&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/solana-monkette-business"&gt;https://moon.ly/nft/solana-monkette-business&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/solyetis"&gt;https://moon.ly/nft/solyetis&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/space-runners"&gt;https://moon.ly/nft/space-runners&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/eternal-beings"&gt;https://moon.ly/nft/eternal-beings&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/doge-capital"&gt;https://moon.ly/nft/doge-capital&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/enviro"&gt;https://moon.ly/nft/enviro&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/nyan-heroes"&gt;https://moon.ly/nft/nyan-heroes&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/tower"&gt;https://moon.ly/nft/tower&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/frakt"&gt;https://moon.ly/nft/frakt&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/unirexcity"&gt;https://moon.ly/nft/unirexcity&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/taiyo-robotics"&gt;https://moon.ly/nft/taiyo-robotics&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/solanadogenfts"&gt;https://moon.ly/nft/solanadogenfts&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/lifinity-flares"&gt;https://moon.ly/nft/lifinity-flares&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/rox-collective"&gt;https://moon.ly/nft/rox-collective&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/solana-bananas"&gt;https://moon.ly/nft/solana-bananas&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/boss-bulls-tm-club"&gt;https://moon.ly/nft/boss-bulls-tm-club&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/dazedducks-metagalactic-club"&gt;https://moon.ly/nft/dazedducks-metagalactic-club&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/the-sneks"&gt;https://moon.ly/nft/the-sneks&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/the-sneks"&gt;https://moon.ly/nft/the-sneks&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/solcities"&gt;https://moon.ly/nft/solcities&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/goblin-laboratory"&gt;https://moon.ly/nft/goblin-laboratory&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/solana-birbs"&gt;https://moon.ly/nft/solana-birbs&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/mini-royale-nations-2"&gt;https://moon.ly/nft/mini-royale-nations-2&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/high-roller-hippo-clique"&gt;https://moon.ly/nft/high-roller-hippo-clique&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/danuki-dojo"&gt;https://moon.ly/nft/danuki-dojo&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://moon.ly/nft/chainmyth"&gt;https://moon.ly/nft/chainmyth&lt;/a&gt;&lt;br&gt;&lt;/p&gt;

</description>
      <category>nft</category>
      <category>blockchain</category>
      <category>crypto</category>
    </item>
    <item>
      <title>Build GitHub star history tracker in 10 minutes using low-code</title>
      <author>Shubhendra Singh Chauhan</author>
      <pubDate>Fri, 21 Jan 2022 08:59:14 +0000</pubDate>
      <link>https://dev.to/tooljet/build-github-star-history-tracker-in-10-minutes-using-low-code-1ge7</link>
      <guid>https://dev.to/tooljet/build-github-star-history-tracker-in-10-minutes-using-low-code-1ge7</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;In this tutorial, we‚Äôre going to build an app that can be used to track the stars count of public GitHub repositories over time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HVeewpLZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ei6zmbw571tenwk17he.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HVeewpLZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ei6zmbw571tenwk17he.png" alt="demo" width="880" height="572"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;If you‚Äôre a developer who owns/maintains a project on GitHub and wants to track the growth of GitHub stars of your repository then this app is going to be very useful for you. You can either build this app or you can use the live demo that we built here - &lt;a href="https://apps.tooljet.com/github-star-history"&gt;https://apps.tooljet.com/github-star-history&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;For building this application we will use &lt;strong&gt;ToolJet&lt;/strong&gt; (&lt;a href="https://github.com/tooljet/tooljet"&gt;https://github.com/tooljet/tooljet&lt;/a&gt;) which is a free and¬†open-source, low-code platform that allows you to quickly build tools, &lt;strong&gt;GitHub APIs&lt;/strong&gt; for getting the repository information like stars count and date, &lt;strong&gt;GitHub personal access token&lt;/strong&gt; only if the stars count of a repository is higher than 5000.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üí° ToolJet provides an option to import and export applications. You can download the exported source code of this app from &lt;a href="https://gist.github.com/akshaysasidrn/09dc7a0456dddc20759c2f41b18caf8e"&gt;here&lt;/a&gt; and import it to your personal ToolJet account.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Building this application using ToolJet is super easy and I have broken down the whole tutorial into the following parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Build the UI&lt;/li&gt;
&lt;li&gt;Create the queries&lt;/li&gt;
&lt;li&gt;Add properties to widgets&lt;/li&gt;
&lt;li&gt;Make app live&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#build-the-ui"&gt;
  &lt;/a&gt;
  Build the UI
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs start with building the user interface of our application first. To build the user interface, we will be using widgets like containers, text, text-input, button, and chart. Here‚Äôs my version of user-interface built using the following widgets:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;container&lt;/strong&gt; that includes a &lt;strong&gt;text&lt;/strong&gt; widget inside it to build the header including the title of application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KiCvOq-s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hb2xznf0j3jsrqjhk3k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KiCvOq-s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hb2xznf0j3jsrqjhk3k.png" alt="heading" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;text-input&lt;/strong&gt; and a &lt;strong&gt;button&lt;/strong&gt; next to it. The text-input will be used to get the repository name in this format: &lt;code&gt;account/repo-name&lt;/code&gt; and the button will be used to perform the action to run the query.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--crcERC4R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5u98oixrhuryrm3mqaup.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--crcERC4R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5u98oixrhuryrm3mqaup.png" alt="text-input" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;chart&lt;/strong&gt; widget (line graph) to display the changes in stars count over time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--alBu2KNu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/he0bqwlwah7ig85npedp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--alBu2KNu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/he0bqwlwah7ig85npedp.png" alt="chart" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;password-input&lt;/strong&gt; widget and a &lt;strong&gt;text&lt;/strong&gt; widget below it. Password-input widget to hold the GitHub personal access token and the text widget to add the display the message.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SnyR9sem--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uuwtq8onrpyflj2jfkjf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SnyR9sem--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uuwtq8onrpyflj2jfkjf.png" alt="password" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;And finally a &lt;strong&gt;container&lt;/strong&gt; that includes &lt;strong&gt;two text widgets&lt;/strong&gt;, one to display the total stars count of the repository and the other to display the time when the repository was created.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---bOlmOsc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ysns6k5d7rlu79r4483.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---bOlmOsc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ysns6k5d7rlu79r4483.png" alt="two" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üí° You can always make use of more widgets to build a better UI and customize or style widgets by changing their property from the inspect panel.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#create-the-queries"&gt;
  &lt;/a&gt;
  Create the queries
&lt;/h2&gt;

&lt;p&gt;Now, we will create the queries that will get the repository information like stars count and date. &lt;/p&gt;

&lt;p&gt;We will be creating two queries - one using REST API datasource and the other using custom JavaScript code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-query-using-rest-api"&gt;
  &lt;/a&gt;
  First query using REST API
&lt;/h3&gt;

&lt;p&gt;This query will get the data from GitHub like &lt;code&gt;stargazers_count&lt;/code&gt; and the the time when the repository was &lt;code&gt;created_at&lt;/code&gt; . Let‚Äôs create the query:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to the query editor at the bottom and click on the &lt;code&gt;+&lt;/code&gt; button to create a new query&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;REST API&lt;/strong&gt; from the datasource dropdown&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;General&lt;/strong&gt; tab, Select &lt;code&gt;GET&lt;/code&gt; method and enter the GitHub‚Äôs API endpoint &lt;code&gt;https://api.github.com/repos/{{components.textinput1.value}}&lt;/code&gt; - at the end of URL we have used JavaScript inside double curly brackets. This will use the value from the text-input widget.&lt;/li&gt;
&lt;li&gt;We will use &lt;strong&gt;Transformation&lt;/strong&gt; to convert the data received from the response of API into JSON format. Enter &lt;code&gt;return { starGazers: data.stargazers_count };&lt;/code&gt; - this will get the &lt;code&gt;stargazers_count&lt;/code&gt; from the response received using API and will create a key value pair. (You can check the &lt;a href="https://docs.tooljet.com/docs/tutorial/transformations"&gt;documentation&lt;/a&gt; to know more about the Transformation)&lt;/li&gt;
&lt;li&gt;Now you can click on &lt;strong&gt;Preview&lt;/strong&gt; button to check result of the query in preview section and then click on &lt;strong&gt;Save&lt;/strong&gt; to create the query.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mFhszbrB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pf75ko148ggtwxsqptdd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mFhszbrB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pf75ko148ggtwxsqptdd.png" alt="query1" width="880" height="445"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perfect! we have created our first query that will get the repository data like total stargazers at the moment and the date when the repository was created. Let‚Äôs move on to build another query.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#second-query-using-custom-javascript-code"&gt;
  &lt;/a&gt;
  Second query using custom JavaScript code
&lt;/h3&gt;

&lt;p&gt;To build this query we will be writing some JavaScript code to get the data specifically of stargazers. We will be fetching the data like the number of stargazers on a particular date and then we will use this data to create &lt;code&gt;key: value&lt;/code&gt; pairs of &lt;code&gt;date&lt;/code&gt; and &lt;code&gt;number of stargazers&lt;/code&gt; on that particular date. This will be used to build the line chart for graphical representation of change in stargazers over time. Let‚Äôs create the query:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to the query editor and click on the &lt;code&gt;+&lt;/code&gt; button to create a new query&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;Run JavaScript code&lt;/strong&gt; from the datasource dropdown&lt;/li&gt;
&lt;li&gt;Write the JavaScript code in the editor:

&lt;ul&gt;
&lt;li&gt;Let‚Äôs define a variable starsgazerURL and assign the GitHub API to it - const stargazersURL = &lt;code&gt;https://api.github.com/repos/${components.textinput1.value}/stargazers?per_page=100&amp;amp;page={page}&lt;/code&gt;; .&lt;/li&gt;
&lt;li&gt;totalPages variable that will store the parsed integer value of total number of pages - const totalPages = parseInt(queries.restapi1.data.starGazers/100); &lt;/li&gt;
&lt;li&gt;pages variable that will create an array from total number of pages - let pages = [...Array(totalPages).keys()]; &lt;/li&gt;
&lt;li&gt;Create an empty object dates - let dates = {};&lt;/li&gt;
&lt;li&gt;Create an empty array results - let results = []; &lt;/li&gt;
&lt;li&gt;For headers we will assign the media type supported by GitHub‚Äôs REST API - let headers = {'Accept': 'application/vnd.github.v3.star+json'} &lt;/li&gt;
&lt;li&gt;If condition to accept the GitHub personal access token from the text-input -  if(components.passwordinput1.value !== '') { headers['Authorization'] = &lt;code&gt;token ${components.passwordinput1.value}&lt;/code&gt;} &lt;/li&gt;
&lt;li&gt;A for-loop that will replace the page number in the starGazersURL and then iterating through all the stars to get a list of all stars and the time at which they starred:
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stargazersURL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;{page}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="p"&gt;})).&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;star&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;starredAt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;moment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;starred_at&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;endOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;day&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yyyy-MM-DD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;dates&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;starredAt&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dates&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;starredAt&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;And at last the assigning total to 0 and iterating through every date in dates object. Then creating array of objects and pushing to results array:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dates&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;dates&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt; Once done writing the code, &lt;strong&gt;Save&lt;/strong&gt; this query.
&lt;strong&gt;Here‚Äôs the complete code:&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stargazersURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://api.github.com/repos/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;components&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textinput1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/stargazers?per_page=100&amp;amp;page={page}`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;totalPages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;restapi1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;starGazers&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;totalPages&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Accept&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/vnd.github.v3.star+json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;components&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;passwordinput1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Authorization&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`token &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;components&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;passwordinput1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stargazersURL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;{page}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="p"&gt;})).&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;star&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;starredAt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;moment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;star&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;starred_at&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;endOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;day&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yyyy-MM-DD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;dates&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;starredAt&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dates&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;starredAt&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dates&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;dates&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will also &lt;strong&gt;add an event handler&lt;/strong&gt; to our first query to run the second query every time the first query is successful. To do that we need to go to the &lt;strong&gt;Advanced&lt;/strong&gt; tab of our first query and then create a new handler. Select the &lt;strong&gt;On Success&lt;/strong&gt; Event and in Action dropdown select &lt;strong&gt;Run Query&lt;/strong&gt;, then select the second query and save it.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#adding-properties-to-widgets"&gt;
  &lt;/a&gt;
  Adding properties to widgets
&lt;/h2&gt;

&lt;p&gt;So now that we have successfully built the user interface and created the queries, all we need to do now is configure the widgets to function correctly. Let‚Äôs configure the widgets:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#textinput"&gt;
  &lt;/a&gt;
  Text-input
&lt;/h3&gt;

&lt;p&gt;We don‚Äôt need to configure anything specific in this widget. It is used to get the input from user. Once the user has entered the repository name in the correct form then the queries will automatically fetch the value from the widget. We can add a placeholder for the users to understand the correct format to enter. Just click any where on the widget to open the inspect-panel on the right and in the Placeholder box enter &lt;code&gt;account-name/repo-name&lt;/code&gt; . &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#button"&gt;
  &lt;/a&gt;
  Button
&lt;/h3&gt;

&lt;p&gt;We will need to make several changes in the property of the button widget. It is the widget that will be used to trigger the queries and make our whole application work.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first thing that we can do is add a text to our button like &lt;code&gt;Fetch data&lt;/code&gt; and change the colour of button from the &lt;strong&gt;Style&lt;/strong&gt; tab. This will improve the UI of button.&lt;/li&gt;
&lt;li&gt;Let‚Äôs add functionality, we can add the &lt;strong&gt;Loading state&lt;/strong&gt; to our button so that it shows a loader until the a query has done getting the results. To do this, just add &lt;code&gt;{{queries.runjs2.isLoading || queries.restapi1.isLoading}}&lt;/code&gt; this will display a loading state to the button while either of the queries run.&lt;/li&gt;
&lt;li&gt;Now finally, add an event handler to the button so that whenever the button is clicked an action is performed. In this case, we will create &lt;code&gt;On Click&lt;/code&gt; event, add &lt;code&gt;Run Query&lt;/code&gt; action to it, and will select the first query. When the button will be clicked it will run the first query in the backend.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GpJaCN_W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4cziauakkkboma16wsz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GpJaCN_W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4cziauakkkboma16wsz.png" alt="button" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#passwordinput"&gt;
  &lt;/a&gt;
  Password-input
&lt;/h3&gt;

&lt;p&gt;Just like the text-input widget, all we need to do is add a &lt;strong&gt;Placeholder&lt;/strong&gt; to this widget - &lt;code&gt;GitHub token&lt;/code&gt; so that the user knows to input the GitHub token. Learn how to get GitHub personal access token &lt;a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#text-widget-below-passwordinput"&gt;
  &lt;/a&gt;
  Text widget below password-input
&lt;/h3&gt;

&lt;p&gt;We will use this text to display it as a message for the password input field. Just click on the widget and add the text - &lt;code&gt;&amp;lt;small&amp;gt;Required if more than 5000 stars. Token is not stored or sent to backend.&amp;lt;/small&amp;gt;&lt;/code&gt; and from &lt;strong&gt;Style&lt;/strong&gt; tab use the color picker to change the font color to red.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üí° You can use HTML to customize the text.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#text-widgets-inside-containers"&gt;
  &lt;/a&gt;
  Text widgets inside containers
&lt;/h3&gt;

&lt;p&gt;We will use two text widgets inside the container. The first one is to display the number of total stars. Click on the widget to edit its property and add the following text: &lt;code&gt;This repository has {{queries.restapi1.data.starGazers}} stars üåü&lt;/code&gt;¬†this uses JavaScript inside double curly brackets to get the number of &lt;code&gt;starGazers&lt;/code&gt; from the &lt;code&gt;data&lt;/code&gt; fetched by the &lt;code&gt;restapi1&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fLSPHWCE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wwhwtt2b1bpz7z5gq5lb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fLSPHWCE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wwhwtt2b1bpz7z5gq5lb.png" alt="text1" width="725" height="308"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the second text displays the time when the repository was first created. Click on the widget to edit its property and add the following text: &lt;code&gt;Repository was created {{moment(queries.restapi1.rawData.created_at).fromNow()}} ago&lt;/code&gt; this will use JS functions to &lt;code&gt;moment&lt;/code&gt; and &lt;code&gt;fromNow&lt;/code&gt; to convert the &lt;code&gt;created_at&lt;/code&gt; date received in &lt;code&gt;data&lt;/code&gt; fetched by the &lt;code&gt;restapi1&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h2yR5Hpj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipql5cra09s1jrdtz6bz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h2yR5Hpj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipql5cra09s1jrdtz6bz.png" alt="text2" width="713" height="294"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#chart"&gt;
  &lt;/a&gt;
  Chart
&lt;/h3&gt;

&lt;p&gt;We will edit 4 properties of the Chart:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Title:&lt;/strong&gt; This title will display at the top-center of the chart &lt;code&gt;Stars over time&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Chart type:&lt;/strong&gt; ToolJet support different chart types including line, bar, and pie. We will use &lt;strong&gt;line chart&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Chart data:&lt;/strong&gt; We will use the data fetched and converted into array of objects by the query &lt;code&gt;runjs2&lt;/code&gt; - &lt;code&gt;{{queries.runjs2.data}}&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Loading state:&lt;/strong&gt; The chart will display a loading state until the query has successfully fetched and converted the results - &lt;code&gt;{{queries.runjs2.isLoading || queries.restapi1.isLoading}}&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Zgk3M3P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mxvv3l2qrabzqh9tcewa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Zgk3M3P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mxvv3l2qrabzqh9tcewa.png" alt="chart" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great! we are almost done with our app, now we will see how to deploy it and share it with our friends and community.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#make-app-live"&gt;
  &lt;/a&gt;
  Make app live
&lt;/h2&gt;

&lt;p&gt;To do this just click on the¬†&lt;strong&gt;Deploy&lt;/strong&gt;¬†button on the top-right corner. On the dialog box:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click on the¬†&lt;strong&gt;+Version&lt;/strong&gt;¬†button to create a version of the app&lt;/li&gt;
&lt;li&gt;Click on the¬†&lt;strong&gt;Save&lt;/strong&gt;¬†button to save the progress and then click on the¬†&lt;strong&gt;Deploy&lt;/strong&gt;¬†button to deploy on the server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Making app shareable:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click on the Share button on the top-right&lt;/li&gt;
&lt;li&gt;In the dialog box, click on the toggle switch to¬†&lt;strong&gt;make the application public&lt;/strong&gt;¬†and¬†&lt;strong&gt;shareable&lt;/strong&gt;¬†through the link in the box&lt;/li&gt;
&lt;li&gt;You can also edit the URL according to your choice&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rcpHyAxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.tooljet.com/content/images/2021/12/deploy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rcpHyAxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.tooljet.com/content/images/2021/12/deploy.gif" alt="https://blog.tooljet.com/content/images/2021/12/deploy.gif" width="880" height="430"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Congrats&lt;/strong&gt; üéâ **** : You‚Äôve successfully built an app that lets you track the GitHub stars history just by entering the repository name and get the details like Total stargazer over time and time when it was created. If you run into any problems, always feel free to reach out to us on our &lt;a href="https://join.slack.com/t/tooljet/shared_invite/zt-r2neyfcw-KD1COL6t2kgVTlTtAV5rtg"&gt;slack community&lt;/a&gt; or email us at &lt;a href="//mailto:hello@tooljet.com"&gt;hello@tooljet.com&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Making Jamstack &amp; Figma Templates for Landing Pages</title>
      <author>Fajar Siddiq</author>
      <pubDate>Fri, 21 Jan 2022 08:12:45 +0000</pubDate>
      <link>https://dev.to/euphorya/making-jamstack-figma-templates-for-landing-pages-249p</link>
      <guid>https://dev.to/euphorya/making-jamstack-figma-templates-for-landing-pages-249p</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kCm2s_s0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qji6vk8lxdel3etxbah.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kCm2s_s0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qji6vk8lxdel3etxbah.png" alt="Image description" width="880" height="382"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I spent time building designs in 2021 on Figma &amp;amp; also Jamstack templates for landing pages, button toggle &amp;amp; resume design and now is available in year 2022. I hope this will help others like finding a job with the resume &amp;amp; landing pages to create a productized services.&lt;/p&gt;

&lt;p&gt;Products to help you:&lt;br&gt;
‚úÖ Productized Yours&lt;br&gt;
‚úÖ Create a Modern Resume&lt;br&gt;
‚úÖ Create a Landing Page&lt;br&gt;
üî• Available now for &lt;a href="https://fajarsiddiq.gumroad.com/"&gt;download&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r-lZ8ekV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7t77pgsupd02xi6bc6pk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r-lZ8ekV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7t77pgsupd02xi6bc6pk.png" alt="Image description" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bcfhlsSt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmoqboa49v5h162py7zm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bcfhlsSt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmoqboa49v5h162py7zm.png" alt="Image description" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U3z7ukZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbucqz1ulsq9pldg10qo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U3z7ukZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbucqz1ulsq9pldg10qo.png" alt="Image description" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iVPBg3yB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eb60yusi606xouz87gd6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iVPBg3yB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eb60yusi606xouz87gd6.png" alt="Image description" width="880" height="437"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aa8L-avZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lvw83bb34isofdqhzr3a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aa8L-avZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lvw83bb34isofdqhzr3a.png" alt="Image description" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hHb0pGD1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e81wqfd7wuncbb13jk0e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hHb0pGD1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e81wqfd7wuncbb13jk0e.png" alt="Image description" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üî• Available now for &lt;a href="https://fajarsiddiq.gumroad.com/"&gt;download&lt;/a&gt;&lt;/p&gt;

</description>
      <category>jamstack</category>
      <category>figma</category>
      <category>templates</category>
      <category>gumroad</category>
    </item>
    <item>
      <title>Why chatbots are used in many websites?</title>
      <author>Raman Bansal</author>
      <pubDate>Fri, 21 Jan 2022 07:41:12 +0000</pubDate>
      <link>https://dev.to/ramanbansal/why-chatbots-are-used-in-many-websites-3klg</link>
      <guid>https://dev.to/ramanbansal/why-chatbots-are-used-in-many-websites-3klg</guid>
      <description>&lt;p&gt;Recently,  many websites are using chatbots for solving customers queries about their products, services etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-chatbots"&gt;
  &lt;/a&gt;
  What are chatbots?
&lt;/h2&gt;

&lt;p&gt;Chatbots are computer software designed to simulate human conversation through text or voice. Nicely, the primary use of chatbots is to answer basic questions from internet site traffic the use of artificial intelligence (AI).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#types-of-chatbots"&gt;
  &lt;/a&gt;
  Types of Chatbots
&lt;/h2&gt;

&lt;p&gt;There are two types of chatbots:-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Linguistic Chatbots&lt;/li&gt;
&lt;li&gt;AI Chatbots&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#1-linguistic-chatbot"&gt;
  &lt;/a&gt;
  1. Linguistic Chatbot
&lt;/h3&gt;

&lt;p&gt;Linguistic Chatbots are also known as Rule-based chatbots. Facebook messenger is an example of Linguistic Chatbot. These chatbots are can be used to answer some simple questions and also helps in booking tickets, opening mobile apps etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-ai-chatbots"&gt;
  &lt;/a&gt;
  2. AI Chatbots
&lt;/h3&gt;

&lt;p&gt;AI Chatbots uses machine learning and uses technology like natural language processing (NLP) to understand user queries. With NLP these bots can understand the human problem without any human assistance. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-chatbots-are-used-in-websites"&gt;
  &lt;/a&gt;
  Why chatbots are used in websites?
&lt;/h2&gt;

&lt;p&gt;Following are reasons why chatbots and used in websites:-&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-provides-valuable-info-at-less-time"&gt;
  &lt;/a&gt;
  1. Provides valuable info at less time
&lt;/h3&gt;

&lt;p&gt;If any visitor want to find any information about the site or have any query about the site, then rather then filling the form he will press the magic button. With Chatbots they can find the valuable information at very less period of time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-cost-effective"&gt;
  &lt;/a&gt;
  2. Cost Effective
&lt;/h3&gt;

&lt;p&gt;Rather having a call center you will create a chatbot which is less expensive and solve customer's problem within in a second and you  don't pay salary to chatbot. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-available-any-time"&gt;
  &lt;/a&gt;
  3. Available any time
&lt;/h3&gt;

&lt;p&gt;Call centre will not open 24 hours but chatbot does. Chatbots run on internet which is available 24 hours. You many visit it at any time. Night or day it will work properly. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-build-brand-trust"&gt;
  &lt;/a&gt;
  4. Build Brand trust
&lt;/h3&gt;

&lt;p&gt;As Chatbots are available 24 hours for solving customers' problems, you may also tells your customer about your products/services. Bots create a perfect bond between customer and business. &lt;/p&gt;

&lt;p&gt;For more:-&lt;br&gt;
&lt;a href="https://techwithpie.blogspot.com/2021/10/why-chatbots-are-used-in-many-websites.html"&gt;Read the full article&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>webdev</category>
      <category>discuss</category>
      <category>career</category>
    </item>
    <item>
      <title>JS Coding Question #11: Are Two Object Equal (üí•3 Solutionsüí•)</title>
      <author>Let's Code</author>
      <pubDate>Fri, 21 Jan 2022 06:59:54 +0000</pubDate>
      <link>https://dev.to/frontendengineer/js-coding-question-11-are-two-object-equal-3-solutions-56g4</link>
      <guid>https://dev.to/frontendengineer/js-coding-question-11-are-two-object-equal-3-solutions-56g4</guid>
      <description>&lt;p&gt;...And the series continues after couple of React Interview Questions and Coding articles. üëç &lt;/p&gt;

&lt;p&gt;Now, this interview question can be tricky as you would need to know how to recurse in order to solve this problem/challenge. Even seasoned engineers often stumble to answer this question so better not to underestimate this problem but be ready. Video format is available below if you don't feel like reading. Here is a &lt;a href="https://codepen.io/angelo_jin/pen/abLKKaX"&gt;Codepen&lt;/a&gt; if you want to edit/play around the code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interview-question-11"&gt;
  &lt;/a&gt;
  Interview Question #11:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Write a function or program that checks if two objects are equal.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There can be many solutions to problems/challenges that are efficient and less efficient, elegant and less elegant. If you have any other than the 3 solutions I have, please share so others may benefit. Below is my 3 solutions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution-1"&gt;
  &lt;/a&gt;
  Solution #1:
&lt;/h3&gt;

&lt;p&gt;JSON.stringify&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sortString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// sort so it will handle object properties that are not in order&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;sortString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;sortString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;This is an approach that looks very dirty/hacky but may still be useful if one is comparing smaller objects. It is easy and fast to write and do not need any libraries which adds overhead to the final js bundle. Since this is fast to write, it may also be useful for quick sanity check or verifying if two objects are equal.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#solution-2"&gt;
  &lt;/a&gt;
  Solution #2:
&lt;/h3&gt;

&lt;p&gt;Using a lib&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;lodashEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Most codebases have js utility already. What I like about libraries are that they solve common problems effectively and are well-tested to cover edge cases. I love open source libs and I am firm believer not to reinvent the wheel for problems that are already been solved.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#solution-3"&gt;
  &lt;/a&gt;
  Solution #3:
&lt;/h3&gt;

&lt;p&gt;Custom Approach&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;deepEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ensure that arguments are objects&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="c1"&gt;// return false right away if objects properties length are not equal&lt;/span&gt;
      &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="c1"&gt;// use reduce setting the initial value to equal which is true&lt;/span&gt;
        &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// then recurse as deep as possible and keep recursing if values are objects&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;deepEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;// just do normal compare if not an object&lt;/span&gt;
      &lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;This custom approach requires recursion to be able to compare nested, deep objects. Many interviewers would want to see interviewees show/draft their own solution as they want to see how they communicate, think and code at the same time. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts:
&lt;/h2&gt;

&lt;p&gt;If I am interviewing someone and they can tell me that solution maybe using a libraries AND sudo code a custom solution trying to recurse through it, I would be satisfied with those answer. How about you? What are your thoughts?&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2j8L8RsHQpM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>challenge</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>career</category>
    </item>
    <item>
      <title>Front-End Developer Roadmap</title>
      <author>itgitnit</author>
      <pubDate>Fri, 21 Jan 2022 06:08:54 +0000</pubDate>
      <link>https://dev.to/itgitnit/front-end-developer-roadmap-302i</link>
      <guid>https://dev.to/itgitnit/front-end-developer-roadmap-302i</guid>
      <description>&lt;p&gt;So you are an absolute beginner who is trying to learn web development and more interested in the front-end part of it and you are looking forward to having an absolute guided path or a roadmap so that you can learn front-end development. Let me give it to you in the very easiest and the cleanest manner. HTML, CSS, and Javascript and that‚Äôs it, that is your front-end developer guide. But hey, you have also heard that XYZ YouTuber was saying that you should also be learning react, is he wrong? No, absolutely not. We have also heard about Chakra UI, Tailwind CSS, Bootstrap, So you shouldn't be learning that, no it‚Äôs not like that. So there is a lot more context here that you should understand. So, let me explain it in a little bit more in-depth. See the ultimate guide of front-end development is still the basic HTML, CSS, and Javascript, but it is a lot more information that is exposed to you without understanding the context of that information. So, in this blog, I‚Äôll give you not only the roadmap, but actually the understandable, contextual roadmap so that you can figure out which tech stack you should pick up and which you can leave. &lt;/p&gt;

&lt;p&gt;Let‚Äôs start with not everybody's favorite which is HTML. Now I understand the context of HTML, everybody knows it but nobody knows it, this is the ultimate reality of HTML, you know enough that you can figure out what this tag is going to do, but sometimes beginner faces a really challenging situation that they don‚Äôt want to write this much of HTML for designing the page. But the ultimate reality is that the page is going to be no matter what, is going to build with HTML, and this is exactly the point when you have to do something but you don‚Äôt want to do something, this is where exactly more tools come into the front-end development. See, when you build a web application let's just say there is a product on the web page, somebody needs to actually write HTML for that product. Now surely we have programming languages that help us to give us loops and conditional so that we can either conditionally replace those products with something else, or maybe can repeat that product probably a hundred times with different values. Now, this is all a little bit of an advanced side we don‚Äôt want to go there, first, we want to capture the front-end part of it. But something you must really understand is that no matter what happens, somebody needs to write HTML for those buttons, for those images, and something else. Now, this something else can be buttons, unlisted elements, listed elements, and a whole bunch of other things. So in order to make sure that you write faster HTML, Emmet comes into the picture which gives you a lot of shortcuts so that you don‚Äôt really feel tiresome to write those HTML, yet somebody actually writes them. So this is the first introduction to the additional tool in the front-end journey, Emmet.&lt;/p&gt;

&lt;p&gt;Now, moving on to our second part of the front-end development which is CSS. Now it‚Äôs not just about structuring the web page it should look also decently beautiful. And that‚Äôs where CSS comes into the picture. But writing the CSS with position absolute or position relative and providing all these elements to be arranged at the exact place where you want is not the easiest task of all and hence since again, the picture comes in, we want to do something but we really don‚Äôt want to do it, that‚Äôs exactly when the same things come in. Some of the helper tools, now writing CSS you can absolutely write that, you don‚Äôt need to use any tools, libraries, frameworks, anything at all, you can use plain vanilla CSS to write everything. But since we don‚Äôt want to and that‚Äôs where the new libraries, frameworks of CSS come into the picture. These libraries and frameworks help you to actually arrange things nicely and beautifully, some provide a really powerful grid so that you can arrange your web pages into the easiest format. Some even give you more things to make things beautiful like buttons and navigation bar and a whole lot of other things. And trust me there is no shortage of these CSS frameworks, some people love one, some people love others. Bootstrap, Material CSS, MD Bootstrap, Chakra, Tailwind CSS, and there is so much of them. Now my personal recommendation is to go ahead and get started with bootstrap and eventually explore others. You may fall in love with Tailwind CSS or the Chakra CSS or something else, but again one thing is sure, these are all helper libraries if you don‚Äôt want to use them, you absolutely can avoid them and, hence comes into the picture that CSS is the foundation of the front-end development. And also the reason why I‚Äôm recommending to get started with Bootstrap is because it gives you the ultimate knowledge and the sense of, how things should be arranged on the web page. Once you understand the bootstrap understanding Material or the Chakra or the Tailwind is relatively easier but it‚Äôs not true for everyone. So, again, if you are getting started with Material that‚Äôs also totally fine.&lt;/p&gt;

&lt;p&gt;Now, finally moving into the third part of the front-end development guide which is Javascript. Now Javascript is really one of the most powerful and proving to be more powerful than we expected it to be. Now the question is can we build everything in Vanilla Javascript? Absolutely yes, there is no one who is stopping you to do so. Javascript can actually make server calls and can bring up some of the JSON data and then you can actually place these JSON data nicely and there is nothing that is stopping you. But is it tiresome? Yes, Of Course, writing a Web application that is governed entirely by Javascript without imposing some of the rules that what you should do? What you should not do? Can become an absolute nightmare, adding more team members to this and this actually gets out of hand pretty quickly and pretty easily and this is exactly where some of the rules are imposed on the entire team or the entire project, that hey, if you are going to change this object in the javascript so this is the way how you are going to do it, if you need to render some condition this is how you are going to do it. Previously, people used to do this kind of rules and regulations on the project basis or the company basis, but eventually, somebody realizes that hey, we need to just roll out these standards to everyone and thus a lot of libraries and frameworks in the Javascript came into the picture, but one thing you need to absolutely understand that the final output of these all things React, Vue or whatever we learning is HTML, CSS, and Javascript. So, ultimately your code is compiled into these three things only. So the more we are going to understand the Javascript paradigm more easily, it‚Äôs going to be easier for you to switch between React or angular or Vue. So, ultimately it boils down to the basic javascript. &lt;/p&gt;

&lt;p&gt;Now in order to make sure that your web applications follow some of the standard practices and these same practices are being followed by your team members also, we pick up some of the libraries or the frameworks, and famous ones are React, Angular, Vue and there is a lot more other than that. A whole lot of companies are using even those frameworks as well, some due to legacy reasons, some due to other conditional reasoning that this is the best fit for us, so, there is no shortage of them. Now in this vast world where Javascript frameworks are dropping every next day, my personal recommendation is to get started with React because React standards are being utilized by a whole lot of other frameworks and libraries too. Once you understand, how to write these codes into React you will be able to quickly migrate into Vue, Meteor, and tonnes of other frameworks. Now, once you understand React, obviously your project is going to go more complex and that‚Äôs where you start exploring more of these libraries and frameworks may be Vue is much more suitable for your project, or maybe you need something more complex may be NextJS but again this is all can go like really crazy. But again, my recommendation is to get started with React, understand this as basic, and explore things later on.&lt;/p&gt;

&lt;p&gt;Now let me give you an additional tip to you that is going to make you even a better front-end developer. Now, as things are getting more complex, there are things something known as State Management. So, what basically happens, let's just say this is your name and you want to display this name onto 10 different places on the website, and what happens if one place changes that name how you are going to make sure that 9 different places get to know about this change. And that‚Äôs where the State Management Library comes in. The State Management Library can be a little bit intimidating at first, but they are not, it is just a centralized place from which all the data goes in and goes out, and thus State Management Library is also an essential part if you want to become a front-end developer. Now, since this is also a common problem there is no shortage of such State Management Library my personal recommendation is to get started with Redux. I know this is a little bit tough compared to others, but this is going to give you the ultimate knowledge of why we are doing and what we are doing once you understand the Redux rest of the things are gonna fine and are gonna seem like absolutely easy. So, I told you that ultimately it is just HTML, CSS, and Javascript rest of all the libraries, and all the front-end roadmaps which are including all these extra things, yes they are helpful but not too much necessary. But is it going to be necessary if you are looking for a job? Or want to become a modern front-end developer? Yes, it‚Äôs going to be. But the most important thing is, now you know the context of why this is happening and why there are so many things to learn. So, I think you can make a better decision now to pick what‚Äôs library I can choose and what I can learn later on in life.&lt;/p&gt;

&lt;p&gt;I hope you have enjoyed this demystifying the front-end developer roadmap!!!!!!......&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Fetch GitHub Markdown and Show on Blog Post or Website ft. showdownjs
</title>
      <author>Shaswat Raj</author>
      <pubDate>Fri, 21 Jan 2022 05:52:40 +0000</pubDate>
      <link>https://dev.to/sh20raj/fetch-github-markdown-and-show-on-blog-post-or-website-ft-showdownjs-4dm3</link>
      <guid>https://dev.to/sh20raj/fetch-github-markdown-and-show-on-blog-post-or-website-ft-showdownjs-4dm3</guid>
      <description>&lt;p&gt;Previous Post :- &lt;a href="https://dev.to/sh20raj/convert-markdown-or-md-url-to-html-markdowntohtml-using-javascript-ft-showdownjs-1med"&gt;https://dev.to/sh20raj/convert-markdown-or-md-url-to-html-markdowntohtml-using-javascript-ft-showdownjs-1med&lt;/a&gt;&lt;br&gt;
Video Documentation :- &lt;a href="https://youtu.be/omtgsLp9hOI"&gt;https://youtu.be/omtgsLp9hOI&lt;/a&gt;&lt;br&gt;
Article Source :- &lt;a href="https://codexdindia.blogspot.com/2022/01/convert-markdown-or-md-url-to-html-using-javascript.html"&gt;https://codexdindia.blogspot.com/2022/01/convert-markdown-or-md-url-to-html-using-javascript.html&lt;/a&gt;&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#convert-a-markdown-containing-url-to-html-and-show-it"&gt;
  &lt;/a&gt;
  Convert a Markdown Containing URL to HTML and Show it.
&lt;/h1&gt;

&lt;p&gt;For this we will Use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch"&gt;fetch Api&lt;/a&gt;.&lt;br&gt;
Here is the raw URL of &lt;a href="http://showdownjs.com/"&gt;showdownjs&lt;/a&gt; readme.md :- &lt;a href="https://github.com/showdownjs/showdown/raw/master/README.md"&gt;https://github.com/showdownjs/showdown/raw/master/README.md&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;We will fetch content of this URL then convert it to HTML and show on our website. See Demo on &lt;a href="https://codepen.io/SH20RAJ/pen/bGoyJqJ?editors=1010"&gt;Codepen&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/showdown/dist/showdown.min.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;div id="mypost"&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script&amp;gt;
fetch('https://raw.githubusercontent.com/showdownjs/showdown/master/README.md').then(response =&amp;gt; response.text())
  .then(data =&amp;gt; {
  console.log(data);
  var converter = new showdown.Converter();
var md = data;
var html = converter.makeHtml(md);
  document.querySelector('#mypost').innerHTML = html;
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See the result on Codepen :- &lt;a href="https://codepen.io/SH20RAJ/pen/bGoyJqJ?editors=1010"&gt;https://codepen.io/SH20RAJ/pen/bGoyJqJ?editors=1010&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>sh20raj</category>
      <category>showdownjs</category>
      <category>markdown</category>
    </item>
    <item>
      <title>Top 17 web scraping tools for data extraction in 2022</title>
      <author>Rajat Thakur</author>
      <pubDate>Fri, 21 Jan 2022 05:48:12 +0000</pubDate>
      <link>https://dev.to/digitallyrajat/top-17-web-scraping-tools-for-data-extraction-in-2022-1p5h</link>
      <guid>https://dev.to/digitallyrajat/top-17-web-scraping-tools-for-data-extraction-in-2022-1p5h</guid>
      <description>&lt;p&gt;Web scraping tools are software specially developed to extract useful information from websites. These tools are useful for anyone looking to collect any form of data from the Internet.&lt;br&gt;
Here is a curated list of the best web scraping tools This list includes commercial and open source tools with popular features and the latest download link.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-bright-data"&gt;
  &lt;/a&gt;
  1. Bright Data
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Bright Data&lt;/strong&gt; is number one. 1 in the world, which provides a cost-effective way to perform large-scale, fast, and stable public web data collection, effortlessly convert unstructured data into structured data and deliver a superior customer experience, all while being completely transparent and compliant.&lt;/p&gt;

&lt;p&gt;Bright Data‚Äôs Nextgen Data Collector provides automated, personalized data flow in a single dashboard, regardless of collection size. From eCom trends and social media data to competitive intelligence and market research, datasets are tailored to business needs. Focus on your core business by accessing reliable industry data on autopilot.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Most efficient&lt;/li&gt;
&lt;li&gt;Most reliable&lt;/li&gt;
&lt;li&gt;Most flexible&lt;/li&gt;
&lt;li&gt;Fully Compliant&lt;/li&gt;
&lt;li&gt;24/7 Customer Support&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-scrapingbee"&gt;
  &lt;/a&gt;
  2) Scrapingbee
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Scrapingbee&lt;/strong&gt; is a web scraping API that handles headless browsers and proxy management. It can run Javascript on pages and rotate proxies for every request so you get the raw HTML page without being blocked. They also have a dedicated API for Google search scraping&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Supports JavaScript rendering&lt;/li&gt;
&lt;li&gt;It provides automatic proxy rotation.&lt;/li&gt;
&lt;li&gt;You can directly use this application on Google Sheet.&lt;/li&gt;
&lt;li&gt;The application can be used with a chrome web browser.&lt;/li&gt;
&lt;li&gt;Great for scraping Amazon&lt;/li&gt;
&lt;li&gt;Support Google search scraping&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-scrapingbot"&gt;
  &lt;/a&gt;
  3) Scraping-Bot
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;ScrapingBot.io&lt;/strong&gt; is an effective tool for extracting data from a URL. Provides APIs tailored to your scraping needs: a generic API for fetching raw HTML from a page, a specialized API for scraping retail websites, and an API for scraping property listings from websites real estate.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JS rendering (Headless Chrome)&lt;/li&gt;
&lt;li&gt;High-quality proxies&lt;/li&gt;
&lt;li&gt;Full Page HTML&lt;/li&gt;
&lt;li&gt;Up to 20 concurrent requests&lt;/li&gt;
&lt;li&gt;Geotargeting&lt;/li&gt;
&lt;li&gt;Allows for large bulk scraping needs&lt;/li&gt;
&lt;li&gt;Free basic usage monthly plan&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-newsdataio"&gt;
  &lt;/a&gt;
  4) Newsdata.io
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Newsdata.io&lt;/strong&gt; is a great tool if you want to extract news data from the web, as it is a news API, it crawls and stores huge amounts of news data in their database that you can access through Newsdata.io‚Äôs &lt;a href="https://newsdata.io/"&gt;news API&lt;/a&gt;. It provides access to structured news data in JSON format and allows access to its historical news database.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get the latest news data with their news API&lt;/li&gt;
&lt;li&gt;The best alternative for Google news API.&lt;/li&gt;
&lt;li&gt;Advanced filters to get the most relevant data.&lt;/li&gt;
&lt;li&gt;Has massive news database to access.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5-scraper-api"&gt;
  &lt;/a&gt;
  5) Scraper API
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Scraper API&lt;/strong&gt; tool helps you manage proxy, browser, and CAPTCHA. This allows you to get HTML from any web page with a simple API call. It‚Äôs easy to integrate as you just need to send a GET request to the API endpoint with your API key and URL.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Helps you to render JavaScript&lt;/li&gt;
&lt;li&gt;It allows you to customize the headers of each request as well as the request type&lt;/li&gt;
&lt;li&gt;The tool offers unparalleled speed and reliability which allows building scalable web scrapers&lt;/li&gt;
&lt;li&gt;Geolocated Rotating Proxies&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#6-scrapestack"&gt;
  &lt;/a&gt;
  6) Scrapestack
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Scrapestack&lt;/strong&gt; is a REST API for real-time web scraping. More than 2,000 companies use scrapestack and trust this dedicated API supported by apilayer. The scrapestack API allows businesses to scrape web pages in milliseconds, managing millions of proxy IPs, browsers, and CAPTCHAs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Uses a pool of 35+ million data centers and global IP addresses.&lt;/li&gt;
&lt;li&gt;Access to 100+ global locations to originate web scraping requests.&lt;/li&gt;
&lt;li&gt;Allows for simultaneous API requests.&lt;/li&gt;
&lt;li&gt;Supports CAPTCHA solving and JavaScript rendering.&lt;/li&gt;
&lt;li&gt;Free &amp;amp; premium options.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#7-agenty"&gt;
  &lt;/a&gt;
  7) Agenty
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Agenty&lt;/strong&gt; is a robotic process automation software for data scraping, text mining, and OCR.&lt;/p&gt;

&lt;p&gt;Creates an agent with just a few mouse clicks. This app helps you reuse all your processed data for your analytics.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It enables you to integrate with Dropbox and secure FTP.&lt;/li&gt;
&lt;li&gt;Provides you with automatic email updates when your job is completed.&lt;/li&gt;
&lt;li&gt;You can view all activity logs for all events.&lt;/li&gt;
&lt;li&gt;Helps you to boost your business performance.&lt;/li&gt;
&lt;li&gt;Enables you to add business rules and custom logic with ease.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#8-importio"&gt;
  &lt;/a&gt;
  8) Import.io
&lt;/h2&gt;

&lt;p&gt;This web scraping tool helps you train your datasets by importing data from a specific webpage and exporting the data in CSV format. It is one of the best data scraper tools that allows you to integrate data into applications using APIs and webhooks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Easy interaction with webforms/logins&lt;/li&gt;
&lt;li&gt;Schedule data extraction&lt;/li&gt;
&lt;li&gt;You can store and access data by using Import.io cloud&lt;/li&gt;
&lt;li&gt;Gain insights with reports, charts, and visualizations&lt;/li&gt;
&lt;li&gt;Automate web interaction and workflows&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#9-dexi-intelligent"&gt;
  &lt;/a&gt;
  9) Dexi Intelligent
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Dexi intelligent&lt;/strong&gt; is a web scraping tool that allows you to convert an unlimited amount of web data into immediate business value. This web scraping tool allows you to save money and time for your company.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Increased efficiency, accuracy, and quality&lt;/li&gt;
&lt;li&gt;Ultimate scale and speed for data intelligence&lt;/li&gt;
&lt;li&gt;Fast, efficient data extraction&lt;/li&gt;
&lt;li&gt;High scale knowledge capture&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#10-outwit"&gt;
  &lt;/a&gt;
  10) Outwit
&lt;/h2&gt;

&lt;p&gt;It‚Äôs a Firefox extension that you can get from the Firefox add-ons store. To purchase this product, you will have three distinct options based on your needs. 1. Professional edition, 2. Expert edition, and 3. Enterprise edition&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This data scraper tool allows you to grab contacts from the web and email source simply&lt;/li&gt;
&lt;li&gt;No programming skill is needed to exact data from sites using Outwit hub&lt;/li&gt;
&lt;li&gt;With just a single click on the exploration button, you can launch the scraping on hundreds of web pages&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#11-paresehub"&gt;
  &lt;/a&gt;
  11) PareseHub
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;ParseHub&lt;/strong&gt; is a free web scraping application. This advanced web scraper makes data extraction as simple as clicking the data you require. It is one of the best data scraping tools, allowing you to save your scraped data in any format for further analysis.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clean text &amp;amp; HTML before downloading data&lt;/li&gt;
&lt;li&gt;The easy to use graphical interface&lt;/li&gt;
&lt;li&gt;This website scraping tool helps you to collect and store data on servers automatically&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#12-diffbot"&gt;
  &lt;/a&gt;
  12) Diffbot
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Diffbot&lt;/strong&gt; enables you to easily obtain various types of useful data from the web. You don‚Äôt have to pay for expensive web scraping or manual research. With AI extractors, the tool will allow you to extract structured data from any URL.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Offers multiple sources of data form a complete, accurate picture of every entity&lt;/li&gt;
&lt;li&gt;Provide support to extract structured data from any URL with AI Extractors&lt;/li&gt;
&lt;li&gt;Helps you to scale up your extraction to 10,000s domains with &lt;/li&gt;
&lt;li&gt;Crawlbot&lt;/li&gt;
&lt;li&gt;Knowledge Graph feature offers accurate, complete, and deep data from the web that BI needs to produce meaningful insights.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#13-data-streamer"&gt;
  &lt;/a&gt;
  13) Data streamer
&lt;/h2&gt;

&lt;p&gt;The Data Stermer tool allows you to retrieve social media content from all over the internet. It is one of the best web scrapers for extracting critical metadata via natural language processing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Integrated full-text search powered by Kibana and Elasticsearch&lt;/li&gt;
&lt;li&gt;Integrated boilerplate removal and content extraction based on information retrieval techniques&lt;/li&gt;
&lt;li&gt;Built on a fault-tolerant infrastructure and ensure high availability of information&lt;/li&gt;
&lt;li&gt;Easy to use and comprehensive admin console&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#14-fminer"&gt;
  &lt;/a&gt;
  14) FMiner
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;FMiner&lt;/strong&gt; is another popular web scraping, data extraction, crawling screen scraping, macro, and web support tool for Windows and Mac OS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Allows you to design a data extraction project by using an easy to use the visual editor&lt;/li&gt;
&lt;li&gt;Helps you to drill l through site pages using a combination of link structures, drop-down selections, or url pattern matching&lt;/li&gt;
&lt;li&gt;You can extract data from hard to crawl Web 2.0 dynamic websites&lt;/li&gt;
&lt;li&gt;Allows you to target website CAPTCHA protection with the help of third-party automated decaptcha services or manual entry&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#15-sequentum"&gt;
  &lt;/a&gt;
  15) Sequentum
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;Sequentum&lt;/strong&gt; is a robust big data solution for dependable web data extraction. It is one of the best web scrapers for scaling your organization. It includes user-friendly features such as a visual point-and-click editor.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Extract web data faster and faster way compares to other solution&lt;/li&gt;
&lt;li&gt;Help you to build web apps with the dedicated web API that allow you to execute web data directly from your website&lt;/li&gt;
&lt;li&gt;Helps you move between various platforms&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#16-mozenda"&gt;
  &lt;/a&gt;
  16) Mozenda
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Mozenda&lt;/strong&gt; extracts text, images, and PDF content from web pages. It is one of the best web scraping tools for organizing and preparing data files for publication.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can collect and publish your web data to your preferred Bl tool or database&lt;/li&gt;
&lt;li&gt;Offers point-and-click interface to create web scraping agents in minutes&lt;/li&gt;
&lt;li&gt;Job Sequencer and Request Blocking features to harvest web data in a real-time&lt;/li&gt;
&lt;li&gt;Best in class account management and customer support&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#17-data-miner-chrome-extension"&gt;
  &lt;/a&gt;
  17) Data Miner Chrome Extension
&lt;/h2&gt;

&lt;p&gt;This &lt;strong&gt;Data Miner chrome extension&lt;/strong&gt; aids in web scraping and data acquisition. It allows you to scrape multiple pages and provides dynamic data extraction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scraped data is stored in local storage&lt;/li&gt;
&lt;li&gt;Multiple data selection types&lt;/li&gt;
&lt;li&gt;Web Scraper Chrome extension extracts data from dynamic pages&lt;/li&gt;
&lt;li&gt;Browse scraped data&lt;/li&gt;
&lt;li&gt;Export scraped data as CSV&lt;/li&gt;
&lt;li&gt;Import, Export sitemaps&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Original Post:&lt;/strong&gt; &lt;a href="https://www.guru99.com/web-scraping-tools.html"&gt;https://www.guru99.com/web-scraping-tools.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>saas</category>
      <category>python</category>
    </item>
    <item>
      <title>Convert Markdown or md URL to HTML - MarkdownToHTML - Using JavaScript ft. showdownjs</title>
      <author>Shaswat Raj</author>
      <pubDate>Fri, 21 Jan 2022 05:47:12 +0000</pubDate>
      <link>https://dev.to/sh20raj/convert-markdown-or-md-url-to-html-markdowntohtml-using-javascript-ft-showdownjs-1med</link>
      <guid>https://dev.to/sh20raj/convert-markdown-or-md-url-to-html-markdowntohtml-using-javascript-ft-showdownjs-1med</guid>
      <description>&lt;p&gt;Markdown is a lightweight markup language for creating formatted text using a plain-text editor. John Gruber and Aaron Swartz created Markdown in 2004 as a markup language that is appealing to human readers in its source code form. &lt;a href="https://en.wikipedia.org/wiki/Markdown"&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Video Documentation :- &lt;a href="https://youtu.be/omtgsLp9hOI"&gt;https://youtu.be/omtgsLp9hOI&lt;/a&gt;&lt;br&gt;
Article Source :- &lt;a href="https://codexdindia.blogspot.com/2022/01/convert-markdown-or-md-url-to-html-using-javascript.html"&gt;https://codexdindia.blogspot.com/2022/01/convert-markdown-or-md-url-to-html-using-javascript.html&lt;/a&gt;&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;Using Markdown you will write(code) less and get more(static content).&lt;br&gt;
Code given below are basic JavaScript Codes. Easy to Understand you can modify it and make the functions more dynamic.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We will Use - &lt;a href="http://showdownjs.com/"&gt;showdownjs&lt;/a&gt; to do so :- &lt;a href="https://github.com/SH20RAJ/markdowntohtml"&gt;https://github.com/SH20RAJ/markdowntohtml&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Here is the code you can use to change your markdown to HTML and show the html on your Website.&lt;/p&gt;




&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/showdown/dist/showdown.min.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;div id="mycontent"&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script&amp;gt;

var converter = new showdown.Converter();
var md = '[**Showdown**](http://www.showdownjs.com) is *great*\n' +
         'because:\n\n' +
         ' - it\'s easy to use\n' +
         ' - it\'s extensible\n' +
         ' - works in the server and in the browser';
var html = converter.makeHtml(md);
  document.querySelector('#mycontent').innerHTML = html;

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;See the Result Here :-&lt;/p&gt;



&lt;p&gt;&lt;a href="http://www.showdownjs.com/"&gt;Showdown&lt;/a&gt; is great because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it's easy to use&lt;/li&gt;
&lt;li&gt;it's extensible&lt;/li&gt;
&lt;li&gt;works in the server and in the browser&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;To Know more about showdownjs functions Visit &lt;a href="https://github.com/showdownjs/showdown/"&gt;GitHub&lt;/a&gt; or I will embed the markdown of GitHub here using the following code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pro Tip :- Instead of Writing Code of MD in Js or Js Variable.&lt;br&gt;
-&amp;gt; write the Markdown Inside a div&lt;br&gt;
-&amp;gt; Make a variable and get the inner text of the div into it.&lt;br&gt;
-&amp;gt; Convert the md to html using showdown and&lt;br&gt;
change the innerHTML of that div to the new generated HTML&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;
  &lt;a href="#convert-a-markdown-containing-url-to-html-and-show-it"&gt;
  &lt;/a&gt;
  Convert a Markdown Containing URL to HTML and Show it.
&lt;/h1&gt;

&lt;p&gt;For this we will Use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch"&gt;fetch Api&lt;/a&gt;.&lt;br&gt;
Here is the raw URL of showdownjs readme.md :- &lt;a href="https://github.com/showdownjs/showdown/raw/master/README.md"&gt;https://github.com/showdownjs/showdown/raw/master/README.md&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;We will fetch content of this URL then convert it to HTML and show on our website. See Demo on &lt;a href="https://codepen.io/SH20RAJ/pen/bGoyJqJ?editors=1010"&gt;Codepen&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/showdown/dist/showdown.min.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;div id="mypost"&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script&amp;gt;
fetch('https://raw.githubusercontent.com/showdownjs/showdown/master/README.md').then(response =&amp;gt; response.text())
  .then(data =&amp;gt; {
  console.log(data);
  var converter = new showdown.Converter();
var md = data;
var html = converter.makeHtml(md);
  document.querySelector('#mypost').innerHTML = html;
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See the result on Codepen :- &lt;a href="https://codepen.io/SH20RAJ/pen/bGoyJqJ?editors=1010"&gt;https://codepen.io/SH20RAJ/pen/bGoyJqJ?editors=1010&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>sh20raj</category>
      <category>showdownjs</category>
      <category>markdown</category>
    </item>
  </channel>
</rss>
