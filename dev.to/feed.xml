<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>7 GitHub projects to make you a better Go Developerüí•</title>
      <author>Ankit Anand ‚ú®</author>
      <pubDate>Tue, 13 Jul 2021 14:18:52 +0000</pubDate>
      <link>https://dev.to/ankit01oss/7-github-projects-to-make-you-a-better-go-developer-2nmh</link>
      <guid>https://dev.to/ankit01oss/7-github-projects-to-make-you-a-better-go-developer-2nmh</guid>
      <description>&lt;p&gt;Go is a compiled, concurrent, garbage-collected, statically typed language developed at Google. Go was designed to be an excellent tool for writing large software projects.&lt;/p&gt;

&lt;p&gt;According to 2020 stackoverflow developer survey, Go was the 3rd most wanted programming language to learn.&lt;/p&gt;

&lt;p&gt;So today, I want to share 7 amazing GitHub projects that will help you become a better Go developer. While some repos can help you have a self-learning path for Go, others can be useful for your workflows.ü§ì&lt;/p&gt;

&lt;p&gt;So let's get started. üëä&lt;/p&gt;




&lt;p&gt;Currently building &lt;a href="https://bit.ly/3h2Ky4V"&gt;SigNoz&lt;/a&gt; - an open-source application performance monitoring tool. Backend of SigNoz is built in Go.&lt;/p&gt;

&lt;p&gt;Check out our GitHub repoüëá&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/SigNoz"&gt;
        SigNoz
      &lt;/a&gt; / &lt;a href="https://github.com/SigNoz/signoz"&gt;
        signoz
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      SigNoz helps developers monitor their applications &amp;amp; troubleshoot problems, an open-source alternative to DataDog, NewRelic, etc. üî• üñ•
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/de24bcecd48c187d949b173f240555967f58a5cd424760a73f7c06f791b892ec/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343435302f7369676e6f7a2d696d616765732f4c6f676f4769746875625f7369676662752e737667"&gt;&lt;img src="https://camo.githubusercontent.com/de24bcecd48c187d949b173f240555967f58a5cd424760a73f7c06f791b892ec/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343435302f7369676e6f7a2d696d616765732f4c6f676f4769746875625f7369676662752e737667" alt="SigNoz-logo" width="240"&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;p&gt;Monitor your applications and troubleshoot problems in your deployed applications, an open-source alternative to DataDog, New Relic, etc.&lt;/p&gt;
&lt;p&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/8bb1977f745ee8c8107f711ecfa901421a9b929f308fd431f7211508f8ddbd87/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e"&gt;&lt;img alt="License" src="https://camo.githubusercontent.com/8bb1977f745ee8c8107f711ecfa901421a9b929f308fd431f7211508f8ddbd87/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/4d7505d3f801c171da56fe726501ab9411207d82358bf10341021397fa3fe48e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f7369676e6f7a2f66726f6e74656e643f6c6162656c3d446f776e6c6f616473"&gt;&lt;img alt="Downloads" src="https://camo.githubusercontent.com/4d7505d3f801c171da56fe726501ab9411207d82358bf10341021397fa3fe48e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f7369676e6f7a2f66726f6e74656e643f6c6162656c3d446f776e6c6f616473"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/cd33e47de8e2feb970abdef5de51f59e6c007958faf6c188c56dd4c4208e58a2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f7369676e6f7a2f7369676e6f7a"&gt;&lt;img alt="GitHub issues" src="https://camo.githubusercontent.com/cd33e47de8e2feb970abdef5de51f59e6c007958faf6c188c56dd4c4208e58a2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f7369676e6f7a2f7369676e6f7a"&gt;&lt;/a&gt; 
    &lt;a href="https://twitter.com/intent/tweet?text=Monitor%20your%20applications%20and%20troubleshoot%20problems%20with%20SigNoz,%20an%20open-source%20alternative%20to%20DataDog,%20NewRelic.&amp;amp;url=https://signoz.io/&amp;amp;via=SigNozHQ&amp;amp;hashtags=opensource,signoz,observability" rel="nofollow"&gt; 
        &lt;img alt="tweet" src="https://camo.githubusercontent.com/90bc908826728c0e4261acfff5619fd732c7be2b2a00624fce6363c9a3623c90/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f687474702f736869656c64732e696f2e7376673f7374796c653d736f6369616c"&gt; &lt;/a&gt; 
&lt;/p&gt;

&lt;p&gt;SigNoz helps developers monitor applications and troubleshoot problems in their deployed applications. SigNoz uses distributed tracing to gain visibility into your software stack.&lt;/p&gt;

&lt;p&gt;üëâ You can see metrics like p99 latency, error rates for your services, external API calls and individual end points.&lt;/p&gt;

&lt;p&gt;üëâ You can find the root cause of the problem by going to the exact traces which are causing the problem and see detailed flamegraphs of individual request traces.&lt;/p&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/863718997bae95953d22cbd6c1001d4ec23695aad4244d7de596660f33833496/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343033322f7369676e6f7a2d696d616765732f73637265656e7a792d313631383930343031333732395f636c737376792e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/863718997bae95953d22cbd6c1001d4ec23695aad4244d7de596660f33833496/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343033322f7369676e6f7a2d696d616765732f73637265656e7a792d313631383930343031333732395f636c737376792e706e67" alt="SigNoz Feature"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
üëá Features:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/li&gt;
&lt;li&gt;Slowest endpoints in your application&lt;/li&gt;
&lt;li&gt;See exact request trace to figure out issues in downstream services, slow DB queries, call to 3rd party services like payment gateways, etc&lt;/li&gt;
&lt;li&gt;Filter traces by service name, operation, latency, error, tags/annotations.&lt;/li&gt;
&lt;li&gt;Aggregate metrics on filtered traces. Eg, you can get error‚Ä¶&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/SigNoz/signoz"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#1-awesome-go"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://github.com/avelino/awesome-go"&gt;Awesome Go&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;‚≠ê Github stars: 65.4k&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can call it the encyclopedia of Go programming language. Just bookmark it to come back to whenever you need something in Go. It is a massive curated list of awesome Go frameworks, libraries and software&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/avelino"&gt;
        avelino
      &lt;/a&gt; / &lt;a href="https://github.com/avelino/awesome-go"&gt;
        awesome-go
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A curated list of awesome Go frameworks, libraries and software
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
&lt;a rel="noopener noreferrer" href="https://github.com/avelino/awesome-go/raw/master/tmpl/assets/logo.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sDprQZtq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/avelino/awesome-go/raw/master/tmpl/assets/logo.png" alt="awesome-go" title="awesome-go"&gt;&lt;/a&gt; Awesome Go&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.com/avelino/awesome-go" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5e9e9b3df118887a7c39908d4bf4b2034694d111f0be12d90e3415d7f4e882b2/68747470733a2f2f7472617669732d63692e636f6d2f6176656c696e6f2f617765736f6d652d676f2e7376673f6272616e63683d6d6173746572" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://github.com/sindresorhus/awesome"&gt;&lt;img src="https://camo.githubusercontent.com/abb97269de2982c379cbc128bba93ba724d8822bfbe082737772bd4feb59cb54/68747470733a2f2f63646e2e7261776769742e636f6d2f73696e647265736f726875732f617765736f6d652f643733303566333864323966656437386661383536353265336136336531353464643865383832392f6d656469612f62616467652e737667" alt="Awesome"&gt;&lt;/a&gt;
&lt;a href="http://gophers.slack.com/messages/awesome" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b6f0a177b8a98ed13425a0b9dd119f24983c735e5d5c5b5ef6dbefacf16b6b84/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6a6f696e2d75732532306f6e253230736c61636b2d677261792e7376673f6c6f6e6743616368653d74727565266c6f676f3d736c61636b26636f6c6f72423d726564" alt="Slack Widget"&gt;&lt;/a&gt;
&lt;a href="https://app.netlify.com/sites/awesome-go/deploys" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9550a643d86ace967dba246113078ec50ffdbf03ac16d71684786ef81d9e5225/68747470733a2f2f6170692e6e65746c6966792e636f6d2f6170692f76312f6261646765732f38336136646362652d306461362d343333652d623538362d6636383130393238366264352f6465706c6f792d737461747573" alt="Netlify Status"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.producthunt.com/posts/awesome-go?utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-awesome-go" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ecd51497915779e2875cd5267606b26f5acbfc07154cd536c8735babdbeb581b/68747470733a2f2f6170692e70726f6475637468756e742e636f6d2f776964676574732f656d6265642d696d6167652f76312f66656174757265642e7376673f706f73745f69643d323931353335267468656d653d6c69676874" alt="awesome-go - Curated list awesome Go frameworks, libraries and software | Product Hunt" width="250" height="54"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Sponsorships&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://m.do.co/c/bd3b723c0a36?utm_medium=opensource&amp;amp;utm_source=awesome-go" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8b91494fce850c947b7c122a0b1211283e48b787c94ec3d19479673544d5dfb7/68747470733a2f2f6176656c696e6f2e72756e2f73706f6e736f72732f646f5f6c6f676f5f686f72697a6f6e74616c5f626c75652d3231302e706e67" alt="Digital Ocean"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;We have no monthly cost&lt;/strong&gt;&lt;em&gt;, but we have employees &lt;strong&gt;working hard&lt;/strong&gt; to maintain the Awesome Go, with money raised we can repay the effort of each person involved! All billing and distribution will be open to the entire community.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A curated list of awesome Go frameworks, libraries and software. Inspired by &lt;a href="https://github.com/vinta/awesome-python"&gt;awesome-python&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
Contributing&lt;/h3&gt;
&lt;p&gt;Please take a quick gander at the &lt;a href="https://github.com/avelino/awesome-go/blob/master/CONTRIBUTING.md"&gt;contribution guidelines&lt;/a&gt; first. Thanks to all &lt;a href="https://github.com/avelino/awesome-go/graphs/contributors"&gt;contributors&lt;/a&gt;; you rock!&lt;/p&gt;
&lt;h4&gt;
&lt;em&gt;If you see a package or project here that is no longer maintained or is not a good fit, please submit a pull request to improve this file. Thank you!&lt;/em&gt;
&lt;/h4&gt;
&lt;h3&gt;
Contents&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#awesome-go"&gt;Awesome Go&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#audio-and-music"&gt;Audio and Music&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#authentication-and-oauth"&gt;Authentication and OAuth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#bot-building"&gt;Bot Building&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#build-automation"&gt;Build Automation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#command-line"&gt;Command Line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#configuration"&gt;Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#continuous-integration"&gt;Continuous Integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#css-preprocessors"&gt;CSS Preprocessors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#data-structures"&gt;Data Structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#database"&gt;Database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#database-drivers"&gt;Database Drivers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#date-and-time"&gt;Date and Time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#distributed-systems"&gt;Distributed Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#dynamic-dns"&gt;Dynamic DNS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#email"&gt;Email&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#embeddable-scripting-languages"&gt;Embeddable Scripting Languages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#error-handling"&gt;Error Handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#file-handling"&gt;File Handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#financial"&gt;Financial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#forms"&gt;Forms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#functional"&gt;Functional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/avelino/awesome-go/master/#game-development"&gt;Game Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;‚Ä¶&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;br&gt;
  &lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/avelino/awesome-go"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h2&gt;
  &lt;a href="#2-standard-go-project-layout"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://github.com/golang-standards/project-layout"&gt;Standard Go Project Layout&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;‚≠ê Github stars: 24.6k&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This repo contains a basic layout for Go application projects. Although it's not an official standard defined by the core Go dev team, it is a set of common historical and emerging project layout patterns in the Go ecosystem.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/golang-standards"&gt;
        golang-standards
      &lt;/a&gt; / &lt;a href="https://github.com/golang-standards/project-layout"&gt;
        project-layout
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Standard Go Project Layout
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Standard Go Project Layout&lt;/h1&gt;
&lt;p&gt;Translations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/golang-standards/project-layout/master/README_ko.md"&gt;ÌïúÍµ≠Ïñ¥ Î¨∏ÏÑú&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/golang-standards/project-layout/master/README_zh.md"&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/golang-standards/project-layout/master/README_zh-TW.md"&gt;Ê≠£È´î‰∏≠Êñá&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/golang-standards/project-layout/master/README_zh-CN.md"&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/a&gt; - ???&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/golang-standards/project-layout/master/README_fr.md"&gt;Fran√ßais&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/golang-standards/project-layout/master/README_ja.md"&gt;Êó•Êú¨Ë™û&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/golang-standards/project-layout/master/README_ptBR.md"&gt;Portuguese&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/golang-standards/project-layout/master/README_es.md"&gt;Espa√±ol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/golang-standards/project-layout/master/README_ro.md"&gt;Rom√¢nƒÉ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/golang-standards/project-layout/master/README_ru.md"&gt;–†—É—Å—Å–∫–∏–π&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/golang-standards/project-layout/master/README_tr.md"&gt;T√ºrk√ße&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Overview&lt;/h2&gt;
&lt;p&gt;This is a basic layout for Go application projects. It's &lt;strong&gt;&lt;code&gt;not an official standard defined by the core Go dev team&lt;/code&gt;&lt;/strong&gt;; however, it is a set of common historical and emerging project layout patterns in the Go ecosystem. Some of these patterns are more popular than others. It also has a number of small enhancements along with several supporting directories common to any large enough real world application.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;If you are trying to learn Go or if you are building a PoC or a simple project for yourself this project layout is an overkill. Start with something really simple instead (a single &lt;/code&gt;main.go&lt;code&gt;file and&lt;/code&gt;go.mod&lt;code&gt; is more than enough).&lt;/code&gt;&lt;/strong&gt; As your project grows keep in mind that it'll be important to make sure your code is well structured‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/golang-standards/project-layout"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#3-go-kit"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://github.com/go-kit/kit"&gt;Go kit&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;‚≠ê Github stars: 20.5k&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Go kit is a programming toolkit for building microservices in Go. Go kit solves common problems in distributed systems and application architecture so you can focus on delivering business value.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/go-kit"&gt;
        go-kit
      &lt;/a&gt; / &lt;a href="https://github.com/go-kit/kit"&gt;
        kit
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A standard library for microservices.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Go kit&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/go-kit/kit/workflows/CI/badge.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ungTBiHx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/go-kit/kit/workflows/CI/badge.svg" alt="GitHub Workflow Status"&gt;&lt;/a&gt;
&lt;a href="https://pkg.go.dev/github.com/go-kit/kit?tab=doc" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f275f3caa8e17b8198d808fbbeedfcfb710368633d8109e75c456663d0cb4f5d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f676f2e6465762d7265666572656e63652d3030376439633f6c6f676f3d676f266c6f676f436f6c6f723d7768697465267374796c653d666c61742d737175617265" alt="GoDev"&gt;&lt;/a&gt;
&lt;a href="https://codecov.io/gh/go-kit/kit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b0fd8c978a9e20977dcfa2ab1f2ee17e7b00ba4f629c537828046c96183efa9d/68747470733a2f2f636f6465636f762e696f2f67682f676f2d6b69742f6b69742f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov"&gt;&lt;/a&gt;
&lt;a href="https://goreportcard.com/report/go-kit/kit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/87320c26cc42c3a21a86f8f5189b45e50288df57011694ff9b11bf5011015833/68747470733a2f2f676f7265706f7274636172642e636f6d2f62616467652f676f2d6b69742f6b6974" alt="Go Report Card"&gt;&lt;/a&gt;
&lt;a href="https://sourcegraph.com/github.com/go-kit/kit?badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d064f392236e444e1c6b43e0be16ab301e85ec0a7e643c037f1f073d7280c68b/68747470733a2f2f736f7572636567726170682e636f6d2f6769746875622e636f6d2f676f2d6b69742f6b69742f2d2f62616467652e737667" alt="Sourcegraph"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Go kit&lt;/strong&gt; is a &lt;strong&gt;programming toolkit&lt;/strong&gt; for building microservices
(or elegant monoliths) in Go. We solve common problems in distributed
systems and application architecture so you can focus on delivering
business value.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Website: &lt;a href="https://gokit.io" rel="nofollow"&gt;gokit.io&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Mailing list: &lt;a href="https://groups.google.com/forum/#!forum/go-kit" rel="nofollow"&gt;go-kit&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Slack: &lt;a href="https://gophers.slack.com" rel="nofollow"&gt;gophers.slack.com&lt;/a&gt; &lt;strong&gt;#go-kit&lt;/strong&gt; (&lt;a href="https://gophersinvite.herokuapp.com/" rel="nofollow"&gt;invite&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Sponsors&lt;/h2&gt;
&lt;p&gt;Click on Sponsor, above, for more information on sponsorship.&lt;/p&gt;
&lt;h2&gt;
Motivation&lt;/h2&gt;
&lt;p&gt;Go has emerged as the language of the server, but it remains underrepresented
in so-called "modern enterprise" companies like Facebook, Twitter, Netflix, and
SoundCloud. Many of these organizations have turned to JVM-based stacks for
their business logic, owing in large part to libraries and ecosystems that
directly support their microservice architectures.&lt;/p&gt;
&lt;p&gt;To reach its next level of success, Go needs more than simple primitives and
idioms. It needs a comprehensive toolkit, for coherent distributed programming
in the large. Go kit is a set of packages and best practices, which provide a
comprehensive, robust, and‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/go-kit/kit"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#4-go-design-patterns"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://github.com/tmrts/go-patterns"&gt;Go Design patterns&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;‚≠ê Github stars: 15.4k&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This repo contains a curated collection of idiomatic design &amp;amp; application patterns for Go language. You can find patterns like: creational patterns, structural patterns, behavioral patterns, concurrency patterns, messaging patterns.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/tmrts"&gt;
        tmrts
      &lt;/a&gt; / &lt;a href="https://github.com/tmrts/go-patterns"&gt;
        go-patterns
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Curated list of Go design patterns, recipes and idioms
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/tmrts/go-patterns/master//gopher.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9SWrCNNh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/tmrts/go-patterns/master/gopher.png" height="400"&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;h1&gt;
    Go Patterns
    &lt;br&gt;
    &lt;a href="http://travis-ci.org/tmrts/go-patterns" rel="nofollow"&gt;&lt;img alt="build-status" src="https://camo.githubusercontent.com/519be221a7bba8e367452b4d550decb3b284535377ac8a2956ad2fe959218c96/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6275696c642d70617373696e672d627269676874677265656e2e7376673f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt;
    &lt;a href="https://github.com/sindresorhus/awesome"&gt;&lt;img alt="awesome" src="https://camo.githubusercontent.com/575717fa64059cfa6ef0b7322a3b33c5432f7afb02cfb6fe9fb4165e2b9d04ad/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f617765736f6d652d2545322539432539332d6666363962342e7376673f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt;
    &lt;a href="https://github.com/tmrts/go-patterns/blob/master/LICENSE"&gt;&lt;img alt="license" src="https://camo.githubusercontent.com/51f2e325174be9e5d12300714e720630a3baa1f6877422276c9a108e8da37ffc/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4170616368652532304c6963656e7365253230322e302d4539314536332e7376673f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt;
  &lt;/h1&gt;
&lt;p&gt;A curated collection of idiomatic design &amp;amp; application patterns for Go language.&lt;/p&gt;
&lt;h2&gt;
Creational Patterns&lt;/h2&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pattern&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Status&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/tmrts/go-patterns/master//creational/abstract_factory.md"&gt;Abstract Factory&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Provides an interface for creating families of releated objects&lt;/td&gt;
&lt;td&gt;‚úò&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/tmrts/go-patterns/master//creational/builder.md"&gt;Builder&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Builds a complex object using simple objects&lt;/td&gt;
&lt;td&gt;‚úî&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/tmrts/go-patterns/master//creational/factory.md"&gt;Factory Method&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Defers instantiation of an object to a specialized function for creating instances&lt;/td&gt;
&lt;td&gt;‚úî&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/tmrts/go-patterns/master//creational/object-pool.md"&gt;Object Pool&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Instantiates and maintains a group of objects instances of the same type&lt;/td&gt;
&lt;td&gt;‚úî&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/tmrts/go-patterns/master//creational/singleton.md"&gt;Singleton&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Restricts instantiation of a type to one object&lt;/td&gt;
&lt;td&gt;‚úî&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
Structural Patterns&lt;/h2&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pattern&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Status&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/tmrts/go-patterns/master//structural/bridge.md"&gt;Bridge&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Decouples an interface from its implementation so that the two can vary independently&lt;/td&gt;
&lt;td&gt;‚úò&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/tmrts/go-patterns/master//structural/composite.md"&gt;Composite&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Encapsulates and provides access to a number of different objects&lt;/td&gt;
&lt;td&gt;‚úò&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/tmrts/go-patterns/master//structural/decorator.md"&gt;Decorator&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Adds behavior to an object, statically or dynamically&lt;/td&gt;
&lt;td&gt;‚úî&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/tmrts/go-patterns/master//structural/facade.md"&gt;Facade&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Uses one type as an API to a number of others&lt;/td&gt;
&lt;td&gt;‚úò&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/tmrts/go-patterns/master//structural/flyweight.md"&gt;Flyweight&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Reuses existing instances of objects with similar/identical state to minimize resource usage&lt;/td&gt;
&lt;td&gt;‚úò&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/tmrts/go-patterns/master//structural/proxy.md"&gt;Proxy&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;‚Ä¶&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/tmrts/go-patterns"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#5-learn-go-with-testdriven-development"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://github.com/quii/learn-go-with-tests"&gt;Learn Go with test-driven development&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;‚≠ê Github stars: 14.6k&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Go is a good language for learning test-driven development as Go's standard library provides a built-in testing package. This repo has a list of Go fundamentals with examples of test-driven code implementations.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/quii"&gt;
        quii
      &lt;/a&gt; / &lt;a href="https://github.com/quii/learn-go-with-tests"&gt;
        learn-go-with-tests
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Learn Go with test-driven development
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Learn Go with Tests&lt;/h1&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/quii/learn-go-with-tests/main/red-green-blue-gophers-smaller.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AXyqadgr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/quii/learn-go-with-tests/main/red-green-blue-gophers-smaller.png"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/deniseyu21" rel="nofollow"&gt;Art by Denise&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://travis-ci.org/quii/learn-go-with-tests" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/724b73cf0a39a6e651e0b4a0430b76bf505c2c90ac01b42a9ffcddba150d79db/68747470733a2f2f7472617669732d63692e6f72672f717569692f6c6561726e2d676f2d776974682d74657374732e7376673f6272616e63683d6d61696e" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://goreportcard.com/report/github.com/quii/learn-go-with-tests" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/69cf45f9477d56e6674a3543386ce4c452d4367414d97c63500353f713bc8050/68747470733a2f2f676f7265706f7274636172642e636f6d2f62616467652f6769746875622e636f6d2f717569692f6c6561726e2d676f2d776974682d7465737473" alt="Go Report Card"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Formats&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://quii.gitbook.io/learn-go-with-tests" rel="nofollow"&gt;Gitbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/quii/learn-go-with-tests/releases"&gt;EPUB or PDF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Translations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://studygolang.gitbook.io/learn-go-with-tests" rel="nofollow"&gt;‰∏≠Êñá&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://larien.gitbook.io/aprenda-go-com-testes/" rel="nofollow"&gt;Portugu√™s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://andmorefine.gitbook.io/learn-go-with-tests/" rel="nofollow"&gt;Êó•Êú¨Ë™û&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://miryang.gitbook.io/learn-go-with-tests/" rel="nofollow"&gt;ÌïúÍµ≠Ïñ¥&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Support me&lt;/h2&gt;
&lt;p&gt;I am proud to offer this resource for free, but if you wish to give some appreciation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/quii" rel="nofollow"&gt;Tweet me @quii&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.buymeacoffee.com/quii" rel="nofollow"&gt;Buy me a coffee ‚òï&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sponsors/quii"&gt;Sponsor me on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Why&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Explore the Go language by writing tests&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Get a grounding with TDD&lt;/strong&gt;. Go is a good language for learning TDD because it is a simple language to learn and testing is built-in&lt;/li&gt;
&lt;li&gt;Be confident that you'll be able to start writing robust, well-tested systems in Go&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/quii/learn-go-with-tests/main/why.md"&gt;Watch a video, or read about why unit testing and TDD is important&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Table of contents&lt;/h2&gt;
&lt;h3&gt;
Go fundamentals&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/quii/learn-go-with-tests/main/install-go.md"&gt;Install Go&lt;/a&gt; - Set up environment for productivity.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/quii/learn-go-with-tests/main/hello-world.md"&gt;Hello, world&lt;/a&gt; - Declaring variables, constants, if/else statements, switch, write your first go program and write your first test. Sub-test syntax and closures.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/quii/learn-go-with-tests/main/integers.md"&gt;Integers&lt;/a&gt; - Further Explore function‚Ä¶&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/quii/learn-go-with-tests"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#6-the-ultimate-go-study-guide"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://github.com/ardanlabs/gotraining"&gt;The Ultimate Go Study Guide&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;‚≠ê Github stars: 14.3k&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The Ultimate Go Study Guide is a collection of notes for students taking the Ultimate Go class. It is compiled of sample programs with line-by-line comments to help students follow the code better. You will find the link to the repo's content in readme.md file.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/hoanhan101"&gt;
        hoanhan101
      &lt;/a&gt; / &lt;a href="https://github.com/hoanhan101/ultimate-go"&gt;
        ultimate-go
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The Ultimate Go Study Guide
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
The Ultimate Go Study Guide&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/ardanlabs/gotraining-studyguide"&gt;This material has been acquired and actively maintained by Ardan Labs ‚Üí&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stargazers over time&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://starchart.cc/hoanhan101/ultimate-go" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/11cb354f44bac3d265569d45dbf9ba17a5f6bfc2194acc941f6d60f9a78fe1c8/68747470733a2f2f7374617263686172742e63632f686f616e68616e3130312f756c74696d6174652d676f2e737667" alt="Stargazers over time"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/hoanhan101/ultimate-go"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h2&gt;
  &lt;a href="#7-1000-handcrafted-go-examples-exercises-and-quizzes"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://github.com/inancgumus/learngo"&gt;1000+ Hand-crafted Go examples, exercises and quizzes&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;‚≠ê Github stars: 9.8k&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Inside this repository, you will find thousands of Go examples, exercises and quizzes.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/inancgumus"&gt;
        inancgumus
      &lt;/a&gt; / &lt;a href="https://github.com/inancgumus/learngo"&gt;
        learngo
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      1000+ Hand-Crafted Go Examples, Exercises, and Quizzes
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
A Huge Number of Go Examples, Exercises and Quizzes&lt;/h1&gt;
&lt;p&gt;Best way of learning is doing. Inside this repository, you will find thousands of Go examples, exercises and quizzes. I initially created this repository for my &lt;strong&gt;&lt;a href="https://www.udemy.com/course/learn-go-the-complete-bootcamp-course-golang/?referralCode=5CE6EB34E2B1EF4A7D37" rel="nofollow"&gt;Go: Bootcamp Course&lt;/a&gt;&lt;/strong&gt;. Later on, I added a lot of exercises, and I wanted every programmer who is not yet enrolled in the course to learn for free as well. So here it is. Enjoy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Available in the following languages:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/inancgumus/learngo"&gt;English&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/inancgumus/learngo/master/translation/spanish"&gt;Spanish&lt;/a&gt;&lt;/strong&gt; &lt;em&gt;(WIP: Please Contribute)&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
‚ù§Ô∏è Help other fellow developers&lt;/h2&gt;
&lt;p&gt;Sharing is free but caring is priceless. &lt;a href="https://twitter.com/intent/tweet?text=I%27m%20learning%20%23golang%20with%201000%2B%20hand-crafted%20examples%2C%20exercises%2C%20and%20quizzes.&amp;amp;url=https://github.com/inancgumus/learngo&amp;amp;via=inancgumus" rel="nofollow"&gt;So, now please click here&lt;/a&gt; and share this repository on Twitter.&lt;/p&gt;
&lt;h2&gt;
Stay in touch&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://twitter.com/inancgumus" rel="nofollow"&gt;Follow me on Twitter&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I usually tweet Go tips and tricks.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/inancgumus" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8aba8b84e477d1962d203f9867ce54c8394d08ee93c9880e749f43aa425d355a/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f696e616e6367756d75732e7376673f7374796c653d736f6369616c266c6162656c3d40696e616e6367756d7573" alt="@inancgumus"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://eepurl.com/c4DMNX" rel="nofollow"&gt;Subscribe to my newsletter&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Get updates from me.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://blog.learngoprogramming.com" rel="nofollow"&gt;Read my blog&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Followed by 5K+ developers, and contains dozens of illustrated articles about Go.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.youtube.com/channel/UCYxepZhtnFIVRh8t5H_QAdg?view_as=subscriber" rel="nofollow"&gt;Watch my Youtube channel&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
License&lt;/h2&gt;
&lt;p&gt;Whole materials are licensed‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/inancgumus/learngo"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;p&gt;I hope you enjoyed this list. I will be coming up with more such amazing resources soon. So, stay tuned! üôÇ&lt;/p&gt;

</description>
      <category>go</category>
      <category>webdev</category>
      <category>github</category>
      <category>devops</category>
    </item>
    <item>
      <title>Improving Visibility Without Being Annoying w/ Anders Wallgren</title>
      <author>Conor Bronsdon</author>
      <pubDate>Tue, 13 Jul 2021 14:10:15 +0000</pubDate>
      <link>https://dev.to/linearb/improving-visibility-without-being-annoying-w-anders-wallgren-23ji</link>
      <guid>https://dev.to/linearb/improving-visibility-without-being-annoying-w-anders-wallgren-23ji</guid>
      <description>&lt;p&gt;It‚Äôs safe to say that everyone wants more visibility into their software delivery process.&lt;/p&gt;

&lt;p&gt;When project management and git systems don‚Äôt talk to each other, we have only small islands of visibility and no way to connect them. Anders Wallgren, the VP of Technology Strategy at Cloudbees, joins the &lt;a href="https://devinterrupted.com/podcast/improving-visibility-without-being-annoying/"&gt;Dev Interrupted podcast&lt;/a&gt; to help us connect these islands, and discuss the outcome-based metrics we should all be using to make the software development process more visible.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/22fh3bcXA3qVIjoyulxC71"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Episode Highlights include:&lt;/strong&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;How to increase development visibility without &lt;a href="https://linearb.io/blog/data-driven-dev-team/"&gt;micromanaging&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Which team-based metrics are best for pipeline visibility&lt;/li&gt;
&lt;li&gt;Why it‚Äôs important to look at your software at the feature level&lt;/li&gt;
&lt;li&gt;What the future holds for software delivery pipeline visibility&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#join-the-dev-interrupted-discord-server"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Join the Dev Interrupted Discord Server&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;With over 1200 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.gg/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" alt="Join the Dev Interrupted Discord Community!"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>management</category>
      <category>devops</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to add a sparkline to your Vue.js app</title>
      <author>Corentin</author>
      <pubDate>Tue, 13 Jul 2021 14:02:31 +0000</pubDate>
      <link>https://dev.to/frenchcooc/how-to-add-a-sparkline-for-your-vue-js-app-1c4h</link>
      <guid>https://dev.to/frenchcooc/how-to-add-a-sparkline-for-your-vue-js-app-1c4h</guid>
      <description>&lt;p&gt;Very recently, I was looking to add a neat sparkline to a Vue.js application of my own. &lt;/p&gt;

&lt;p&gt;As always, I googled just that, looking for &lt;a href="https://www.google.com/search?q=sparkline+vue.js"&gt;sparkline vue.js&lt;/a&gt; or &lt;a href="https://www.google.com/search?q=sparkline+npm"&gt;sparkline npm&lt;/a&gt;. But I couldn't find something that was easy, with a small footprint and yet customizable.&lt;/p&gt;

&lt;p&gt;After playing a bit with &lt;a href="https://www.chartjs.org/"&gt;Chart.js&lt;/a&gt;, I just stopped and considered how I could build a decent, yet very simple, sparkline component (i.e. without any dependency).&lt;/p&gt;

&lt;p&gt;If you look at how npm's sparkline works as well as the ones from Stripe's dashboard, you will quickly realize that it's just a SVG element that you customize with JavaScript.&lt;/p&gt;

&lt;p&gt;So bear with me, I'll show you how to do just that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/sparkline-ex2dn"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#behind-the-scene"&gt;
  &lt;/a&gt;
  Behind the scene
&lt;/h2&gt;

&lt;p&gt;The sparkline is just a Vue.js component where you provide the coordinates of the sparkline as an array. Here's how I've rendered the sparkline in the example above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;sparkline&lt;/span&gt; &lt;span class="na"&gt;v-bind:data=&lt;/span&gt;&lt;span class="s"&gt;"[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/sparkline&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The source code of the component is the following:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;As you might have noticed, the code renders an &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; HTML element by computing the coordinates of the different &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;There are two &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt;. One for the blue line. And another one for the blue background. I've used the color &lt;code&gt;#1f8ceb&lt;/code&gt; but of course this is totally customizable, just like the width/height of the sparkline.&lt;/p&gt;

&lt;p&gt;That component is pretty basic and contrary to NPM or Stripe, it doesn't handle when a mouse hovers the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;. I didn't need that for my use case, but if ever you implement it, feel free to edit the &lt;a href="https://gist.github.com/Frenchcooc/e4748ad6275984a01868153e3c0d8a1e"&gt;gist&lt;/a&gt; and share it with the community.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>chart</category>
    </item>
    <item>
      <title>So what *is* privacy? (In the context of privacy tech)</title>
      <author>Jack F.</author>
      <pubDate>Tue, 13 Jul 2021 13:41:11 +0000</pubDate>
      <link>https://dev.to/oblivious/so-what-is-privacy-in-the-context-of-privacy-tech-e4g</link>
      <guid>https://dev.to/oblivious/so-what-is-privacy-in-the-context-of-privacy-tech-e4g</guid>
      <description>&lt;p&gt;&lt;strong&gt;Privacy, as a concept, often lacks a clear definition. However, privacy-enhancing technologies can be generally categorised into two broad desiderata. The purpose of this post is to lay these goals out clearly in accessible terms.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When someone talks about privacy, what on earth do they mean? If you consult a dictionary, you'll likely get a definition based on not being observed by others and free from public or third-party attention. This could lead to many definitions in the context of technology. The term can range in context from preventing browser tracking through cookies, to limiting your digital footprint from being shared by data holders. At Oblivious, we focus on the latter, allowing organizations who collect information to use and manipulate it in a safe and secure manner, such that you (a data subject) can rest assured that no superfluous data sharing is performed.&lt;/p&gt;

&lt;p&gt;Indeed the definition of privacy can cause a lot of confusion. Lawyers, politicians, security experts, and technologists all talk about privacy but often mean quite different things. If you reading this you are maybe aware of privacy-enhancing technologies (PETs) which are technological ways of dealing with privacy problems that, frankly speaking, often arise due to the exploitation of other data technologies that no legal frameworks can sufficiently deal with. Federated learning, homomorphic encryption, differential privacy, secure enclaves are all examples of PETs, which come in handy when you want to ensure privacy.&lt;/p&gt;

&lt;p&gt;In short, the two major groups of privacy technology are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Input privacy allows multiple parties to input sensitive data to be combined for some pre-agreed purpose.&lt;/li&gt;
&lt;li&gt;Output privacy prevents the reverse engineering of inputs given the outputs of a function.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#input-privacy"&gt;
  &lt;/a&gt;
  Input Privacy
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs start with the first scenario wherein two millionaires want to determine who is richer but do not want to reveal each others' wealth. This is a classic 40-year old problem in computer science called Yao‚Äôs millionaire‚Äôs problem. It forms the basis of so-called multi-party computation or input privacy. It describes situations when two or more parties wish to evaluate a joint function depended on everyone's sensitive inputs, however, they do not want to reveal those inputs to each other. &lt;/p&gt;

&lt;p&gt;Here, a range of solutions may be employed. All the parties can simply give their inputs to a trusted friend, lawyer or consulting company as often happens in real life. However, if they want to employ cryptography they have even more options - they can use secure multi-party computation protocols (SMPC), which evaluate a function directly on encrypted data. It is based on a range of cryptographic primitives, which are still heavily researched - from garbled circuits to homomorphic encryption. A caveat here is that using these approaches severely slows down the computation and as always with new cryptographic protocols one has to be very careful with the threat models employed and how different subprotocols are combined. If you make a mistake at this step, it could have the consequence of not encrypting the data in the first place!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RPtj6qR0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9pr3eosihh5hyokvzpm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RPtj6qR0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9pr3eosihh5hyokvzpm.png" alt="Multiple inputs coming in and out of a function from different parties."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another option is to refer to hardware-based approaches called trusted execution environments or secure enclaves, whereby the parties send their encrypted data to a chip or a virtual machine (VM) with additional security layers. This chip or the cloud provider hosting the VM cryptographically sign and hash the software that is run that combines the data, attesting to the data providers that it is safe for the data to be decrypted. Major chip and cloud providers have moved towards this direction under the umbrella of confidential computing in recent years. As an example, AWS has recently launched its Nitro Enclaves and you can read more about this in our previous blog post.‚Äå&lt;/p&gt;

&lt;p&gt;All three options have their pros and cons, you are either trusting in humans, cryptography, or the chip/cloud providers cryptographic attestation and consequently they are bottlenecked by human (bureaucracy and human processing), cryptographic (often large packet sizes with many rounds of communication) or hardware-based (RAM) limitations. Nevertheless, all three tackle this challenge of data collaboration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#output-privacy"&gt;
  &lt;/a&gt;
  Output Privacy
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs say we have chosen our favourite approach to input privacy and each party is happy that nobody else can see their sensitive inputs. They might even use it multiple times with slightly different inputs and parties. Can they safely announce the end of their ‚Äúprivacy problem‚Äù? Well, not really as we have not looked carefully at the output of this function!&lt;/p&gt;

&lt;p&gt;If one or more parties receive the output, there surely is some information about each others' input in it. It may well be that by running it multiple times with different inputs the others can work out our inputs from the outputs. To prevent this in many cases output privacy techniques can be employed.&lt;br&gt;
Output privacy challenges are very well-known to statistics bureaus. Wherever you live, it is quite likely that within the last 10 years you have taken part in a census. When the census data is aggregated and shared, statistics bureaus employ statistical disclosure control techniques to ensure that no individual or house can be identified from the published data.&lt;br&gt;
How do you do that? One technique that helps in this is the so-called k-anonymity. It is very intuitive and you have probably used or thought about it already without being aware of it. When releasing data you group people together and publish data for that group. For example, you group people under the age brackets, districts, etc, and ensure that in the smallest identifiable group there is at least k number of people.&lt;/p&gt;

&lt;p&gt;Another option, which is very often used in data science, is synthetic data. Large corporates that work with external parties such as data science consultants do not usually give away their proprietary data during the pilot phases of joint projects or for testing purposes but instead often give them fake data that resemble and share statistical properties of the underlying data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---33V61w6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxsatqbzo73y4dhj9a86.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---33V61w6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxsatqbzo73y4dhj9a86.png" alt="Outputs of a function being perturbed by noise to prevent reverse-engineering."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The US census bureau has decided to use another cryptographic technique called differential privacy for its 2020 census. Differential privacy is gaining usage and popularity due to its mathematical guarantees and widespread applicability. It works by adding appropriate noise to the output of a function. The challenge here is to add such amount of noise that the output still provides useful information but prevents anyone who has access to that output from reverse-engineering the original data - in particular information about individuals. The rule of thumb is that the larger the dataset, the smaller noise needs to be added to the aggregated output to ensure privacy. Hence, the large-scale data published by the census bureau are equal to what the true underlying value that they would normally publish is. However, at the township or district level, the noise kicks in and the values differ slightly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comparing-and-contrasting"&gt;
  &lt;/a&gt;
  Comparing and Contrasting
&lt;/h2&gt;

&lt;p&gt;Reading the above, you might be thinking that these sound very different and, well, you are kind of right! Input privacy really takes into account each known party and their interactions in a calculation. It prevents each party from learning something they shouldn't be able to about other parties' inputs. Output privacy does the same for the party who receives the output of a calculation - typically limiting their ability to learn about individuals rather than aggregates.‚Äå&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#putting-everything-together"&gt;
  &lt;/a&gt;
  Putting everything together
&lt;/h2&gt;

&lt;p&gt;‚Äå&lt;br&gt;
Now that we are pros when speaking about input privacy and output privacy techniques, it becomes natural to combine them together to ensure privacy in a larger set of use cases. We can evaluate join queries over data coming from multiple sources both without seeing the data in plaintext and giving guarantees about the output privacy. Such end-to-end privacy systems are something that we at Oblivious are very much focused on. If you want to have a run at playing with how secure enclaves can be used in conjunction with differentially private output guarantees, give us a shout!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hWJUf289--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rj8f9xyeadt9xyxwmgzb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hWJUf289--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rj8f9xyeadt9xyxwmgzb.png" alt="Placing systems with differential privacy inside trusted execution environments."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-buzzword-mapper"&gt;
  &lt;/a&gt;
  Bonus: Buzzword Mapper
&lt;/h2&gt;

&lt;p&gt;As a bonus for making it to the end of the article, we thought we'd map some privacy-tech buzzwords to the type of privacy they enforce. Hopefully, at the next (socially distanced) cocktail party you go to when the cryptographer starts spouting on about one of these you'll at least have a bearing on what they are trying to achieve:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--90oS-fBU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vb48im735fb2fry71oih.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--90oS-fBU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vb48im735fb2fry71oih.png" alt="Buzzwords, what they endeavour to do and how."&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>privacy</category>
      <category>security</category>
      <category>datascience</category>
      <category>cryptography</category>
    </item>
    <item>
      <title>The Scrum master shuffle</title>
      <author>Jelle Smeets</author>
      <pubDate>Tue, 13 Jul 2021 13:28:08 +0000</pubDate>
      <link>https://dev.to/smeetsmeister/the-scrum-master-shuffle-2ome</link>
      <guid>https://dev.to/smeetsmeister/the-scrum-master-shuffle-2ome</guid>
      <description>&lt;p&gt;When you have been scrum master for the same team for a longer period, it can become more difficult to find areas of improvement for the team. If you are unsure of what the next step in the development of your team should be, the Scrum master shuffle might be interesting for you.&lt;/p&gt;

&lt;p&gt;In this blogpost we will dive into the Scrum master shuffle, I'll explain what it is, how to use it, and the lessons I learned from it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-scrum-master-shuffle"&gt;
  &lt;/a&gt;
  The Scrum master shuffle
&lt;/h2&gt;

&lt;p&gt;The goal of the Scrum master shuffle is to switch teams with another Scrum master in your organization for a short time, usually, we do one or two sprints. During this shuffle, you will effectively become a Scrum master for a different team.&lt;/p&gt;

&lt;p&gt;If you are a Scrum master in one team for a longer period of time, it is normal to get blind spots. There are things you don't notice anymore but will catch the eye of a fresh Scrum master.&lt;/p&gt;

&lt;p&gt;The other benefit besides having a fresh pair of eyes on your blind spots, is to get the team outside of their normal routine. A new Scrum master will probably shake up things, and it might get some of team members that have settled down to the situation to get that spark again.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h2&gt;

&lt;p&gt;The steps for a successful Scrum master shuffle are the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pick a Scrum master to shuffle with.&lt;/li&gt;
&lt;li&gt;Inform your team that this is for gathering insights, and the goal is to improve. It is in no way a punishment for underperforming.&lt;/li&gt;
&lt;li&gt;Do a short 1 on 1 with the product owner and stakeholder of your new team, and inform them that the idea behind the shuffle is to improve the team.&lt;/li&gt;
&lt;li&gt;During the shuffle write down things that catch your attention. This will be input for the bullet point below.&lt;/li&gt;
&lt;li&gt;Do a weekly or biweekly meeting with the Scrum master you are shuffling with. The main goal of the meeting: "Is there anything that caught your eye?"&lt;/li&gt;
&lt;li&gt;At the end of the shuffle plan a small retrospective with the team, "is there anything I did differently than your Scrum master?", try to get input on the team what they liked, and what they liked less.&lt;/li&gt;
&lt;li&gt;Evaluate all findings, and pick which ones you or the team wants to implement.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#takeaways"&gt;
  &lt;/a&gt;
  Takeaways
&lt;/h2&gt;

&lt;p&gt;In the past I have done the Scrum master shuffle a couple of times now, my main takeaways and tips for the best result are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pick a Scrum master that has a different "style" than you have, this will usually result in better results than if you pick a Scrum master with the same style, as they will probably notice the same things.&lt;/li&gt;
&lt;li&gt;Make sure the team trusts the situation and doesn't feel like they have a temporary Scrum master to get them back on track.&lt;/li&gt;
&lt;li&gt;At the start of shuffling you want to be in an observing mode, try to observe what is happening before you try to correct behavior.&lt;/li&gt;
&lt;li&gt;Keep an open mind, and try not to judge the team for their behaviour, its a result of working together.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see in the takeaways above, the key to a successful Scrum master shuffle is to keep an open mind, try not to judge the team you are in and get them to trust you.&lt;/p&gt;

&lt;p&gt;If you are interested in other lessons I learned as a starting Scrum master? Check out &lt;a href="https://blog.jellesmeets.nl/lists/4-lessons-i-learned-as-a-starting-scrum-master/"&gt;The 4 lessons I learned as a starting scrum master&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>agile</category>
      <category>career</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Magic Link Authentication and Route Controls with Supabase and Next.js</title>
      <author>Nader Dabit</author>
      <pubDate>Tue, 13 Jul 2021 13:15:36 +0000</pubDate>
      <link>https://dev.to/dabit3/magic-link-authentication-and-route-controls-with-supabase-and-next-js-leo</link>
      <guid>https://dev.to/dabit3/magic-link-authentication-and-route-controls-with-supabase-and-next-js-leo</guid>
      <description>&lt;p&gt;While &lt;a href="https://supabase.io/"&gt;Supabase&lt;/a&gt; is widely known for their real-time database and API layer, one of the things I like about it is the number of easy to set up &lt;a href="https://supabase.io/docs/guides/auth"&gt;authentication mechanisms&lt;/a&gt; it offers out of the box.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0klkAzRc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzcg7ckpfmra2y3yezdf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0klkAzRc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzcg7ckpfmra2y3yezdf.png" alt="Supabase Auth"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#magic-link"&gt;
  &lt;/a&gt;
  Magic Link
&lt;/h3&gt;

&lt;p&gt;One of my favorites is Magic Link. You've probably used magic link in the past. Magic link sends a link to the user via email containing a link to authenticate with the service via a custom URL and access token.&lt;/p&gt;

&lt;p&gt;When the user visits the URL, a session is set in their browser storage and the user is redirected back to the app, authenticating the user in the process.&lt;/p&gt;

&lt;p&gt;This is becoming a very popular way to authenticate users as they do not have to keep up with another password, it provides a really great user experience.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nextjs"&gt;
  &lt;/a&gt;
  Next.js
&lt;/h3&gt;

&lt;p&gt;With Next.js, you have the ability to not only protect routes with client-side authorization, but for added security you can do server-side authorization and redirects in &lt;a href="https://nextjs.org/docs/basic-features/data-fetching#getserversideprops-server-side-rendering"&gt;&lt;code&gt;getServerSideProps&lt;/code&gt;&lt;/a&gt; if a cookie has been set and is available in the request context.&lt;/p&gt;

&lt;p&gt;This is also where Supabase comes in handy. There is built-in functionality for setting and getting the cookie for the signed in user in SSR and API routes:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#setting-the-user-in-an-api-route"&gt;
  &lt;/a&gt;
  Setting the user in an API route
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;supabase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAuthCookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#getting-the-user-in-an-ssr-or-api-route"&gt;
  &lt;/a&gt;
  Getting the user in an SSR or API route
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUserByCookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="cm"&gt;/* if user is present, do something with the user data here */&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Server-side redirects are typically preferred over client-side redirects from an SEO perspective - it's harder for search engines to understand how client-side redirects should be treated.&lt;/p&gt;

&lt;p&gt;You are also able to access the user profile from an API route using the &lt;code&gt;getUserByCookie&lt;/code&gt; function, opening up an entirely new set of use cases and functionality.&lt;/p&gt;

&lt;p&gt;With Next.js and Supabase you can easily implement a wide variety of applications using this combination of SSG, SSR, and client-side data fetching and user authorization, making the combination (and any framework that offers this combination of capabilities) extremely useful and powerful.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-well-be-building"&gt;
  &lt;/a&gt;
  What we'll be building
&lt;/h3&gt;

&lt;p&gt;In this post, we'll build out a Next.js app that enables navigation, authentication, authorization, redirects (client and server-side), and a profile view.&lt;/p&gt;

&lt;p&gt;The project that we'll be building is a great starting point for any application that needs to deal with user identity, and is a good way to understand how user identity works and flows throughout all of the different places in a project using a modern hybrid framework like Next.js.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The final code for this project is located &lt;a href="https://github.com/dabit3/supabase-nextjs-auth"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#building-the-app"&gt;
  &lt;/a&gt;
  Building the app
&lt;/h2&gt;

&lt;p&gt;To get started, you first need to create a Supabase account and project.&lt;/p&gt;

&lt;p&gt;To do so, head over to &lt;a href="//Supabase.io"&gt;Supabase.io&lt;/a&gt; and click &lt;strong&gt;Start Your Project&lt;/strong&gt;. Authenticate with GitHub and then create a new project under the organization that is provided to you in your account.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i9j6RgBg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d068rhoheuboefej4o70.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i9j6RgBg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d068rhoheuboefej4o70.jpeg" alt="Creating Supabase account"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Give the project a Name and Password and click Create new project.&lt;/p&gt;

&lt;p&gt;It will take approximately 2 minutes for your project to be created.&lt;/p&gt;

&lt;p&gt;Next, open your terminal and create a new Next.js app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-next-app supabase-next-auth

&lt;span class="nb"&gt;cd &lt;/span&gt;supabase-next-auth
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only dependency we'll need is the &lt;a href="https://github.com/supabase/supabase-js"&gt;&lt;code&gt;@supabase/supabase-js&lt;/code&gt;&lt;/a&gt; package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @supabase/supabase-js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#configuring-the-supabase-credentials"&gt;
  &lt;/a&gt;
  Configuring the Supabase credentials
&lt;/h3&gt;

&lt;p&gt;Now that the Next.js app is created, it needs a to know about the Supabase project in order to interact with it.&lt;/p&gt;

&lt;p&gt;The best way to do this is using environment variables. Next.js allows environment variables to be set by creating a file called &lt;strong&gt;.env.local&lt;/strong&gt; in the root of the project and storing them there.&lt;/p&gt;

&lt;p&gt;In order to expose a variable to the browser you have to prefix the variable with &lt;strong&gt;NEXT_PUBLIC&lt;/strong&gt;_.&lt;/p&gt;

&lt;p&gt;Create a file called &lt;strong&gt;.env.local&lt;/strong&gt; at the root of the project, and add the following configuration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;NEXT_PUBLIC_SUPABASE_URL=https://app-id.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-public-api-key
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find the values of your API URL and API Key in the Supabase dashboard settings:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NaUDHjRf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbrp6pj3m5pj1vf6l9rd.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NaUDHjRf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbrp6pj3m5pj1vf6l9rd.jpeg" alt="Supabase config"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-the-supabase-client"&gt;
  &lt;/a&gt;
  Creating the Supabase client
&lt;/h3&gt;

&lt;p&gt;Now that the environment variables have been set, we can create a Supabase instance that can be imported whenever we need it.&lt;/p&gt;

&lt;p&gt;Create a file named &lt;strong&gt;client.js&lt;/strong&gt; in the root of the project with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* client.js */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@supabase/supabase-js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_SUPABASE_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_SUPABASE_ANON_KEY&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#updating-the-index-page"&gt;
  &lt;/a&gt;
  Updating the &lt;strong&gt;index&lt;/strong&gt; page
&lt;/h3&gt;

&lt;p&gt;Next, let's update &lt;strong&gt;pages/index.js&lt;/strong&gt; to be something more simple than what is provided out of the box. This is just meant to serve as a basic landing page&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* pages/index.js */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles/Home.module.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;World&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/main&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-the-sign-in-screen"&gt;
  &lt;/a&gt;
  Creating the sign in screen
&lt;/h3&gt;

&lt;p&gt;Next, let's create the Sign In screen. This will serve a form input for the user to provide their email address.&lt;/p&gt;

&lt;p&gt;When the user submits the form, they will receive a magic link to sign in. This will work for both new as well as existing users!&lt;/p&gt;

&lt;p&gt;Create a new file in the &lt;strong&gt;pages&lt;/strong&gt; directory named &lt;strong&gt;sign-in.js&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* pages/sign-in.js */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles/Home.module.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;submitted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSubmitted&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;signIn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signIn&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="nx"&gt;email&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setSubmitted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;submitted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Please&lt;/span&gt; &lt;span class="nx"&gt;check&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;sign&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Sign&lt;/span&gt; &lt;span class="nx"&gt;In&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
          &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
          &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;signIn&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Sign&lt;/span&gt; &lt;span class="nx"&gt;In&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/main&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The main thing in this file is this line of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signIn&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;email&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By only providing the email address of the user, magic link authentication will happen automatically.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#profile-view"&gt;
  &lt;/a&gt;
  Profile view
&lt;/h3&gt;

&lt;p&gt;Next, let's create the profile view. Create a new file in the &lt;strong&gt;pages&lt;/strong&gt; directory named &lt;strong&gt;profile.js&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* pages/profile.js */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setProfile&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetchProfile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchProfile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;profileData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;profileData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/sign-in&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setProfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;profileData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;signOut&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signOut&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/sign-in&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;maxWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;420px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;96px auto&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="nx"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;signOut&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Sign&lt;/span&gt; &lt;span class="nx"&gt;Out&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To check for the currently signed in user we call &lt;code&gt;supabase.auth.user()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If the user is signed in, we set the user information using the &lt;code&gt;setProfile&lt;/code&gt; function set up using the &lt;code&gt;useState&lt;/code&gt; hook.&lt;/p&gt;

&lt;p&gt;If the user is not signed in, we client-side redirect using the &lt;code&gt;useRouter&lt;/code&gt; hook.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#api-route"&gt;
  &lt;/a&gt;
  API Route
&lt;/h3&gt;

&lt;p&gt;In &lt;strong&gt;pages/_app.js&lt;/strong&gt; we'll be needing to call a function to set the cookie for retrieval later in the SSR route.&lt;/p&gt;

&lt;p&gt;Let's go ahead and create that API route and function. This will be calling the &lt;code&gt;setAuthCookie&lt;/code&gt; API given to us by the Supabase client.&lt;/p&gt;

&lt;p&gt;Create a new file named &lt;strong&gt;auth.js&lt;/strong&gt; in the &lt;strong&gt;pages/api&lt;/strong&gt; folder and add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* pages/api/auth.js */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;supabase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAuthCookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#nav-auth-listener-and-setting-the-session-cookie"&gt;
  &lt;/a&gt;
  Nav, auth listener, and setting the session cookie
&lt;/h3&gt;

&lt;p&gt;The largest chunk of code we'll need to write will be in &lt;strong&gt;pages/app.js&lt;/strong&gt;. Here are the things we need to implement here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Navigation&lt;/li&gt;
&lt;li&gt;A listener to fire when authentication state changes (provided by Supabase)&lt;/li&gt;
&lt;li&gt;A function that will set the cookie with the user session&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In addition to this, we'll also need to keep up with the authenticated state of the user. We do this so we can toggle links, showing or hiding certain links based on if the user is or isn't signed in.&lt;/p&gt;

&lt;p&gt;We'll demonstrate this here by only showing the &lt;strong&gt;Sign In&lt;/strong&gt; link to users who are not signed in, and hiding it when they are.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* pages/_app.js */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles/globals.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;authenticatedState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setAuthenticatedState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;not-authenticated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* fires when a user signs in or out */&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;authListener&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onAuthStateChange&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;handleAuthChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SIGNED_IN&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setAuthenticatedState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;authenticated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/profile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SIGNED_OUT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setAuthenticatedState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;not-authenticated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="nx"&gt;checkUser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;authListener&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;checkUser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* when the component loads, checks user to show or hide Sign In link */&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setAuthenticatedState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;authenticated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleAuthChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* sets and removes the Supabase cookie */&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Headers&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
      &lt;span class="na"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;same-origin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;nav&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;navStyle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;linkStyle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/profile&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;linkStyle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Profile&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;authenticatedState&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;not-authenticated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/sign-in&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;linkStyle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Sign&lt;/span&gt; &lt;span class="nx"&gt;In&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/protected&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;linkStyle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Protected&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/nav&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;navStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;linkStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;marginRight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last page we need to implement is the route that will demonstrate server-side protection and redirects.&lt;/p&gt;

&lt;p&gt;Since we have already implemented setting the cookie, we should now be able to read the cookie on the server if the user is signed in.&lt;/p&gt;

&lt;p&gt;Like I mentioned previously, we can do this with the &lt;code&gt;getUserByCookie&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Create a new file in the &lt;strong&gt;pages&lt;/strong&gt; directory named &lt;strong&gt;protected.js&lt;/strong&gt; and add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;maxWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;420px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;96px auto&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="kr"&gt;protected&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* check to see if a user is set */&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUserByCookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="cm"&gt;/* if no user is set, redirect to the sign-in page */&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="na"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;destination&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/sign-in&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="cm"&gt;/* if a user is set, pass it to the page via props */&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testing-it-out"&gt;
  &lt;/a&gt;
  Testing it out
&lt;/h2&gt;

&lt;p&gt;Now the app is built and we can test it out!&lt;/p&gt;

&lt;p&gt;To run the app, open your terminal and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the app loads, you should be able to sign up, and sign in using the magic link. Once signed in, you should be able to view the profile page and see your user id as well as your email address.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-metadata-and-attributes"&gt;
  &lt;/a&gt;
  Setting metadata and attributes
&lt;/h3&gt;

&lt;p&gt;If you want to continue building out the user's profile, you can do so easily using the &lt;code&gt;update&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;For example, let's say we wanted to allow the user's to set their location. We can do so with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; 
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;city&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;New York&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, when we fetch the user's data, we should be able to view their metadata:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3XCKPecQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3l0m3ie9r7ohtmnsu4nf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3XCKPecQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3l0m3ie9r7ohtmnsu4nf.png" alt="User Metadata"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The final code for this project is located &lt;a href="https://github.com/dabit3/supabase-nextjs-auth"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>Python UNIT Testing</title>
      <author>Ramu Ummadishetty</author>
      <pubDate>Tue, 13 Jul 2021 12:53:56 +0000</pubDate>
      <link>https://dev.to/ramushetty/python-unit-testing-2b3p</link>
      <guid>https://dev.to/ramushetty/python-unit-testing-2b3p</guid>
      <description>&lt;h1&gt;
  &lt;a href="#unit-testing"&gt;
  &lt;/a&gt;
  UNIT Testing
&lt;/h1&gt;

&lt;p&gt;It is the processing of testing whether a particular unit is working properly or not is called unit testing&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#test-scenario-vs-test-case-vs-test-suite"&gt;
  &lt;/a&gt;
  Test Scenario vs Test Case vs Test Suite
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Test Scenario consists of multiple test case for single scenario&lt;/li&gt;
&lt;li&gt;So there will be different scenarios consists of test cases for a given application example of one scenario is testing login functionality.&lt;/li&gt;
&lt;li&gt;Test Suite is something like grouping of test cases and executing them at a time&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#implementing-python-unit-testing"&gt;
  &lt;/a&gt;
  Implementing Python Unit testing
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;We will use Python in-built module &lt;strong&gt;unittest&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;We will  use &lt;strong&gt;TestCase&lt;/strong&gt; class to implement&lt;/li&gt;
&lt;li&gt;We also use 3 instance methods &lt;strong&gt;setUp(), test(), tearDown()&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Here is the simple test class&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wDccXfUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obnzxr2vrxyila0t4b63.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wDccXfUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obnzxr2vrxyila0t4b63.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Output of above code is &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SHce8rZI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dowo3gufp6a3isitzvmj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SHce8rZI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dowo3gufp6a3isitzvmj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Here we need to be careful that setUp and tearDown method names are fixed but we can change the test method name as we like bit it need to be prefix with "test" example test_sample(), test1().&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can include as many test methods we want into the class&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  Note
&lt;/h2&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For every test method setUp(),tearDown() methods will be executed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To avoid this repeated call of setUp and tearDown methods we can use &lt;strong&gt;setUpClass(), tearDownClass()&lt;/strong&gt; methods, now only one time setup and teardown methods are called regardless of how many number of testcases.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hf4B1NkD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4ea5me8gwpc7jkml8mv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hf4B1NkD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4ea5me8gwpc7jkml8mv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O/P&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kusOQc29--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3e60n9pg3v9e6bb454a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kusOQc29--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3e60n9pg3v9e6bb454a.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also use assert functions in test method &lt;/p&gt;

&lt;p&gt;Hope you learned something!!!&lt;br&gt;
Happy coding!!!&lt;/p&gt;

</description>
      <category>python</category>
      <category>testing</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>7 Github repos based on JavaScript</title>
      <author>Pasca Vlad</author>
      <pubDate>Tue, 13 Jul 2021 12:50:44 +0000</pubDate>
      <link>https://dev.to/pascavld/7-github-repos-based-on-javascript-3k14</link>
      <guid>https://dev.to/pascavld/7-github-repos-based-on-javascript-3k14</guid>
      <description>&lt;p&gt;&lt;em&gt;If you found value in this thread you will most likely enjoy my tweets too so make sure you follow me on &lt;a href="https://twitter.com/VladPasca5"&gt;Twitter&lt;/a&gt;  for more information about web development and how to improve as a developer. This article was first published on my &lt;a href="https://vladpasca.hashnode.dev/"&gt;Blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-javascript30"&gt;
  &lt;/a&gt;
  1. JavaScript30
&lt;/h3&gt;

&lt;p&gt;A list of 30 projects built with HTML, CSS and JavaScript&lt;/p&gt;

&lt;p&gt;üîó&lt;a href="https://github.com/wesbos/JavaScript30"&gt;https://github.com/wesbos/JavaScript30&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-30-seconds-of-code"&gt;
  &lt;/a&gt;
  2. 30 seconds of code
&lt;/h3&gt;

&lt;p&gt;Short JavaScript code snippets for all your development needs&lt;/p&gt;

&lt;p&gt;üîó&lt;a href="https://github.com/30-seconds/30-seconds-of-code"&gt;https://github.com/30-seconds/30-seconds-of-code&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-clean-code-javascript"&gt;
  &lt;/a&gt;
  3. Clean code JavaScript
&lt;/h3&gt;

&lt;p&gt;Clean Code concepts adapted for JavaScript&lt;/p&gt;

&lt;p&gt;üîó&lt;a href="https://github.com/ryanmcdermott/clean-code-javascript"&gt;https://github.com/ryanmcdermott/clean-code-javascript&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-33-javascript-concepts"&gt;
  &lt;/a&gt;
  4. 33 JavaScript Concepts
&lt;/h3&gt;

&lt;p&gt;33 JavaScript concepts every developer should know&lt;/p&gt;

&lt;p&gt;üîó&lt;a href="https://github.com/leonardomso/33-js-concepts"&gt;https://github.com/leonardomso/33-js-concepts&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-javascript-questions"&gt;
  &lt;/a&gt;
  5. JavaScript questions
&lt;/h3&gt;

&lt;p&gt;A long list of (advanced) JavaScript questions, and their explanations&lt;/p&gt;

&lt;p&gt;üîó&lt;a href="https://github.com/lydiahallie/javascript-questions"&gt;https://github.com/lydiahallie/javascript-questions&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-javascript"&gt;
  &lt;/a&gt;
  6. JavaScript
&lt;/h3&gt;

&lt;p&gt;JavaScript Style Guide&lt;/p&gt;

&lt;p&gt;üîó&lt;a href="https://github.com/airbnb/javascript"&gt;https://github.com/airbnb/javascript&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-javascript"&gt;
  &lt;/a&gt;
  7. JavaScript
&lt;/h3&gt;

&lt;p&gt;A repository for All algorithms implemented in Javascript (for educational purposes only)&lt;/p&gt;

&lt;p&gt;üîó&lt;a href="https://github.com/TheAlgorithms/Javascript"&gt;https://github.com/TheAlgorithms/Javascript&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The end
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;I hope found this useful and if you did please let me know. If you have any question feel free to DM me on  &lt;a href="https://twitter.com/VladPasca5"&gt;Twitter&lt;/a&gt; .&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Coding Standards and Best Practices for Python Code Quality</title>
      <author>Jay Baer</author>
      <pubDate>Tue, 13 Jul 2021 12:33:44 +0000</pubDate>
      <link>https://dev.to/h32239897jay/coding-standards-and-best-practices-for-python-code-quality-4n0l</link>
      <guid>https://dev.to/h32239897jay/coding-standards-and-best-practices-for-python-code-quality-4n0l</guid>
      <description>&lt;p&gt;In this testing tutorial, you‚Äôll read about the best &lt;a href="https://www.zenesys.com/blog/coding-standards-and-best-practices-for-python-code-quality"&gt;Python&lt;/a&gt; unit test frameworks to test and correct individual units of code thus helping in overall test automation.&lt;/p&gt;

&lt;p&gt;As the name indicates, Unit testing is a software testing method meant for testing small units of code. These are typically small, automated pieces of code written by software developers to check and ensure that the particular piece of code only behaves the way it was intended to. In python, there are several frameworks available for this purpose and here we will discuss the major ‚Äúpython test automation frameworks‚Äù.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#best-python-unit-test-frameworks"&gt;
  &lt;/a&gt;
  Best Python Unit Test Frameworks:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-unittest"&gt;
  &lt;/a&gt;
  1. Unittest:
&lt;/h3&gt;

&lt;p&gt;It was inspired by the Junit, a Unit Testing framework of Java programming language and if you are coming from the java background, you get hold of it easily. It is a default testing framework of &lt;a href="https://www.zenesys.com/web-development-services/python-web-development"&gt;Python&lt;/a&gt;, and that‚Äôs why most developers use it for python test automation.&lt;/p&gt;

&lt;p&gt;An example of code with this framework is as follows:&lt;/p&gt;

&lt;p&gt;import unittest2 standard_library_import_a&lt;br&gt;
text =  ‚Äòunit testing in python&lt;/p&gt;

&lt;p&gt;class TestString(unittest2.TestCase):&lt;br&gt;
def test_string_uppercase(self):&lt;br&gt;
self.assertEqual(text.upper(),‚ÄòUNIT TESTING IN PYTHON‚Äô)&lt;br&gt;
import third_party_import_c&lt;/p&gt;

&lt;p&gt;def test_string_isupper(self):&lt;br&gt;
self.assertTrue(‚ÄòUNIT TESTING IN PYTHON‚Äô.isupper())&lt;br&gt;
self.assertFalse(‚Äòunit testing in python‚Äô.isupper())&lt;/p&gt;

&lt;p&gt;def test_string_split(self):&lt;br&gt;
self.assertEqual(text.split(),[‚Äòunit‚Äô, ‚Äòtesting‚Äô, ‚Äòin‚Äô, ‚Äòpython‚Äô])&lt;/p&gt;

&lt;p&gt;How to Discover Tests:&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;cd project_folder&lt;br&gt;
python -m unittest discover&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#skipping-test-cases"&gt;
  &lt;/a&gt;
  Skipping test cases:
&lt;/h4&gt;

&lt;p&gt;Unittest allows test cases to be skipped if certain conditions are not met by using the skip() decorator.&lt;/p&gt;

&lt;p&gt;For Example:-&lt;/p&gt;

&lt;p&gt;@unittest2.skip(‚ÄúAn example of Skipping‚Äù)&lt;/p&gt;

&lt;p&gt;def test_nothing(self):&lt;br&gt;
pass&lt;/p&gt;

&lt;p&gt;@unittest2.skipUnless(sys.platform.startswith(‚Äúwin‚Äù), ‚ÄúWindows Platform needed‚Äù)&lt;br&gt;
def test_windows_support(self):&lt;br&gt;
A specific windows only code&lt;br&gt;
pass&lt;/p&gt;

&lt;p&gt;Unittest offers simple test execution and faster report generation. One more important plus point for this module is that it is a part of the Python standard library and hence no extra efforts needed to install it. There are also certain drawbacks like it uses camelCase convention instead of snake case convention of Python&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-pytest"&gt;
  &lt;/a&gt;
  2. PyTest:
&lt;/h3&gt;

&lt;p&gt;Pytest is an open-source library and pip is needed to install this. In comparison to unittest, PyTest makes the testing simple and easy with less coding. It is a general-purpose python unit test framework but used especially for functional and API testing.&lt;/p&gt;

&lt;p&gt;Instead of several assert statements, a simple assert method is used in Pytest to reduce confusion and keep the text easy.&lt;/p&gt;

&lt;p&gt;Here is an example:&lt;/p&gt;

&lt;p&gt;def test_uppercase():&lt;br&gt;
assert ‚Äúpytest example‚Äù.upper() == ‚ÄúPYTEST EXAMPLE‚Äù&lt;/p&gt;

&lt;p&gt;def test_reversed_list():&lt;br&gt;
assert list(reversed([‚Äòa‚Äô, ‚Äòb‚Äô, ‚Äòc‚Äô, ‚Äòd‚Äô]))== [‚Äòd‚Äô, ‚Äòc‚Äô, ‚Äòb‚Äô, ‚Äòa‚Äô]&lt;/p&gt;

&lt;p&gt;def test_odd_number():&lt;br&gt;
assert 13 in{&lt;br&gt;
num&lt;br&gt;
for num in range(1, 100)&lt;br&gt;
if num % 2 == 1&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;Upon running the above code, the output looks like:&lt;/p&gt;

&lt;p&gt;$ pytest&lt;br&gt;
================= test session starts ==================&lt;br&gt;
platform linux‚Ää‚Äî‚ÄäPython 3.8.5, pytest-6.2.4, py-1.10.0, pluggy-0.13.1&lt;br&gt;
rootdir: /home/abhinav/PycharmProjects/python_testing_framework/test_code&lt;br&gt;
collected 3 items &lt;br&gt;
test_code.py ‚Ä¶ [100%]&lt;/p&gt;

&lt;p&gt;================== 3 passed in 0.02s =====================&lt;/p&gt;

&lt;p&gt;Fixtures in Pytest:&lt;br&gt;
Fixtures are used when to provide a consistent reliable input context for the tests. In Pytests, fixtures are made by a function syntax by a decorator usually, as shown in the example below.&lt;/p&gt;

&lt;p&gt;For Example:-&lt;/p&gt;

&lt;p&gt;@pytest.fixture&lt;br&gt;
def number():&lt;br&gt;
a = 10&lt;br&gt;
b = 20&lt;br&gt;
c = 30&lt;br&gt;
return [a, b, c]&lt;/p&gt;

&lt;p&gt;def test_method1(number):&lt;br&gt;
x = 10&lt;br&gt;
assert number[0] == x&lt;/p&gt;

&lt;p&gt;def test_method2(number):&lt;br&gt;
y = 15&lt;br&gt;
assert number[1] == y&lt;/p&gt;

&lt;p&gt;def test_method3(number):&lt;br&gt;
z = 30&lt;br&gt;
assert number[2] == z&lt;/p&gt;

&lt;p&gt;Pytest has several plugins and is able to run tests in parallel. If you work with the Django framework for building APIs, there is a special plugin named pytest-Django for this purpose.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-doctest"&gt;
  &lt;/a&gt;
  3. Doctest:
&lt;/h3&gt;

&lt;p&gt;The Doctest module searches for docstrings to verify that all the examples work as documented in the code. It checks if all the interactive python shell examples still work as documented.&lt;/p&gt;

&lt;p&gt;For Example:-&lt;/p&gt;

&lt;p&gt;from doctest import testmod&lt;/p&gt;

&lt;p&gt;define a function to test&lt;br&gt;
def square_of_number(n):&lt;br&gt;
‚Äò‚Äô‚Äô&lt;br&gt;
This function calculates the square of number a provides output:&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;square_of_number(3)&lt;br&gt;
9&lt;br&gt;
square_of_number(-5)&lt;br&gt;
25&lt;br&gt;
‚Äò‚Äô‚Äô&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;return n * n&lt;/p&gt;

&lt;p&gt;call the testmod function&lt;br&gt;
if &lt;strong&gt;name&lt;/strong&gt; == ‚Äò&lt;strong&gt;main&lt;/strong&gt;‚Äô:&lt;br&gt;
testmod(name=‚Äôsquare_of_number‚Äô, verbose=True)&lt;/p&gt;

&lt;p&gt;When you try the above piece of code running it as a file, you will get the following output.&lt;/p&gt;

&lt;p&gt;Trying:&lt;br&gt;
square_of_number(3)&lt;br&gt;
Expecting:&lt;br&gt;
9&lt;br&gt;
ok&lt;br&gt;
Trying:&lt;br&gt;
square_of_number(-5)&lt;br&gt;
Expecting:&lt;br&gt;
25&lt;br&gt;
ok&lt;br&gt;
1 item had no tests:&lt;br&gt;
square_of_number&lt;/p&gt;

&lt;p&gt;1 item passed all tests:&lt;br&gt;
2 tests in square_of_number.square_of_number&lt;/p&gt;

&lt;p&gt;2 tests in 2 items.&lt;br&gt;
2 passed and 0 failed.&lt;br&gt;
Test passed.&lt;/p&gt;

&lt;p&gt;The doctest has two functions, testfile() and testmod(), we‚Äôve used testmode() in this example which is used for a module. The test file function uses a file as documentation. The problem with doctest is that it only compares the printed output. Any variation from that will result in a test failure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4testify"&gt;
  &lt;/a&gt;
  4.Testify:
&lt;/h3&gt;

&lt;p&gt;It is modelled after unittest in such a way that the tests are written for unittest will run with some minor adjustments. It is a replacement to both unittest and nose2. It has a class level setup and contains class level teardown and fixture methods. Its fixtures take a decorator-based approach thus eliminating the need for the superclass.&lt;/p&gt;

&lt;p&gt;For Example:-&lt;/p&gt;

&lt;p&gt;from testify import *&lt;/p&gt;

&lt;p&gt;class SquareTestCase(TestCase):&lt;br&gt;
@class_setup&lt;br&gt;
def initialise_the_variable(self):&lt;br&gt;
self.variable = 2&lt;/p&gt;

&lt;p&gt;@setup&lt;br&gt;
def square_the_variable(self):&lt;br&gt;
self.variable = self.variable * self.variable&lt;br&gt;
print(self.variable)&lt;/p&gt;

&lt;p&gt;def test_the_variable(self):&lt;br&gt;
assert_equal(self.variable, 4)&lt;/p&gt;

&lt;p&gt;@teardown&lt;br&gt;
def square_root_the_variable(self):&lt;br&gt;
self.variable = self.variable /self.variable&lt;/p&gt;

&lt;p&gt;@class_teardown&lt;br&gt;
def get_rid_of_the_variable(self):&lt;br&gt;
self.variable = None&lt;/p&gt;

&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == ‚Äú&lt;strong&gt;main&lt;/strong&gt;‚Äù:&lt;br&gt;
run()&lt;/p&gt;

&lt;p&gt;The output of the above test is shown below. As you run the tests you will notice that the code seems more Pythonic than unittest. &lt;br&gt;
It has a better pythonic naming convention than unittest, extensible plugin system for additional functionality, and an enhanced &lt;br&gt;
test discovery which can drill down into packages to find the test cases.&lt;/p&gt;

&lt;p&gt;(venv) zenesys@python_testing_framework$ python3 testify_example.py&lt;br&gt;
4&lt;br&gt;
.&lt;br&gt;
PASSED. 1 test / 1 case: 1 passed, 0 failed. (Total test time 0.00s)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-nose2"&gt;
  &lt;/a&gt;
  5. Nose2:
&lt;/h3&gt;

&lt;p&gt;Nose2 can run both doctest and unittests, it is a successor to the Nose regiment. It is also called ‚Äúextended unit test‚Äù pr ‚Äúunittest with a plugin‚Äù because it is based upon most unit modules.&lt;/p&gt;

&lt;p&gt;Nose2 only supports the python versions which are currently supported by python teams officially. While nose loads test lazily, nose2 loads all tests first and then begins test execution. It only supports the same level of fixtures as that of the unittest, which means only class level and module level fixtures are supported and not package level ones.&lt;/p&gt;

&lt;p&gt;An example of unit test and output is as follows:&lt;/p&gt;

&lt;p&gt;For Example:-&lt;/p&gt;

&lt;p&gt;import unit test from nose2.tools import params&lt;/p&gt;

&lt;p&gt;@params(1, 2, 3)&lt;br&gt;
def test_nums(num):&lt;br&gt;
assert num &amp;lt; 4&lt;/p&gt;

&lt;p&gt;class Test(unittest.TestCase):&lt;/p&gt;

&lt;p&gt;@params((1, 2), (2, 3), (4, 5))&lt;br&gt;
def test_less_than(self, a, b):&lt;br&gt;
assert a &amp;lt; b&lt;/p&gt;

&lt;p&gt;nose2&lt;br&gt;
‚Ä¶‚Ä¶‚Ä¶&lt;br&gt;
‚Äî‚Ää‚Äî‚Ää‚Äî‚Ää‚Äî‚Ää‚Äî‚Ää‚Äî‚Ää‚Äî‚Ää‚Äî‚Ää‚Äî‚Ää‚Äî‚Ää‚Äî‚Ää‚Äî‚Ää‚Äî‚Ää‚Äî‚Ää‚Äî‚Ää‚Äî‚Ää‚Äî‚Ää‚Äî‚Ää‚Äî‚Ää‚Äî‚Ää‚Äî‚Ää‚Äî‚Ää‚Äî‚Ää‚Äî‚Ää‚Äî‚Ää‚Äî‚Ää‚Äî‚Ää‚Äî‚Ää‚Äî‚Ää‚Äî‚Ää‚Äî‚Ää‚Äî‚Ää‚Äî‚Ää‚Äî‚Ää‚Äî‚Ää&lt;br&gt;
Ran 9 tests in 0.001s&lt;/p&gt;

&lt;p&gt;OK&lt;/p&gt;

&lt;p&gt;The mp plugin of nose2 enables it to run across multiple processors. This multiprocessing may speed up if the tests are heavily IO bound but it also complicates the text fixtures and can conflict with the plugins which are not designed to work with it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h3&gt;

&lt;p&gt;As python is growing in its popularity, more and more updates are coming to existing libraries making it more simplistic and user-friendly. In my opinion, if you want to continue with python, you should focus on more pythonic libraries, as python has more about easy and well-structured syntax. Slowness in many cases is reduced by C extensions of Python libraries and that works well.&lt;/p&gt;

&lt;p&gt;The Unit Tests provide the code more validity and ensure that the code works the way it was supposed to work. I have cleared all the basics for these 5 major testing frameworks. There is much more to learn in unit testing but I hope that this blog has provided you much the needed introduction and foundation to move forward and choose the framework as per your compatibility and requirement.&lt;/p&gt;

</description>
      <category>python</category>
      <category>codequality</category>
      <category>codingstandards</category>
    </item>
    <item>
      <title>Web Components: uma introdu√ß√£o</title>
      <author>thaisandre</author>
      <pubDate>Tue, 13 Jul 2021 12:27:55 +0000</pubDate>
      <link>https://dev.to/thaisandre/web-components-uma-introducao-2c40</link>
      <guid>https://dev.to/thaisandre/web-components-uma-introducao-2c40</guid>
      <description>&lt;p&gt;Imagine um projeto web que mostre os dados dos usu√°rios em um componente cart√£o que ser√° usado em v√°rias p√°ginas no projeto:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mgqukq5W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ymu8qtffmms3ag7zbps.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mgqukq5W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ymu8qtffmms3ag7zbps.png" alt="Card do usu√°rio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ao inv√©s de copiar e colar este c√≥digo em v√°rios arquivos HTML diferentes, podemos criar nossa pr√≥pria tag que renderiza este cart√£o e encapsula os estilos (CSS) e comportamentos (JavaScript). &lt;/p&gt;

&lt;p&gt;Primeiro, criamos o um arquivo &lt;code&gt;UserCard.js&lt;/code&gt; que conter√° o c√≥digo JavaScript deste componente e criamos uma classe representando este componente:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// arquivo UserCard.js&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UserCard&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At√© aqui, esta √© apenas a declara√ß√£o de uma classe em JavaScript. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#custom-elements"&gt;
  &lt;/a&gt;
  Custom Elements
&lt;/h2&gt;

&lt;p&gt;Como queremos criar uma tag, devemos defin√≠-la como um &lt;strong&gt;elemento HTML&lt;/strong&gt;. Para isto, basta fazer nossa classe implementar a interface &lt;code&gt;HTMLElement&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// arquivo UserCard.js&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UserCard&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://html.spec.whatwg.org/multipage/dom.html#htmlelement"&gt;&lt;code&gt;HTMLElement&lt;/code&gt;&lt;/a&gt; √© uma interface que implementa outra chamada &lt;a href="https://dom.spec.whatwg.org/#interface-element"&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt; - que √© a interface base mais geral da qual todos os objetos em um &lt;em&gt;Document&lt;/em&gt; implementam. De acordo com a documenta√ß√£o, se queremos criar uma tag, o mais indicado √© usar &lt;code&gt;HTMLElement&lt;/code&gt;, j√° que esta prov√™ todos os recursos necess√°rios para constru√ß√£o de uma tag HTML.&lt;/p&gt;

&lt;p&gt;Ap√≥s isso, colocamos o construtor e chamamos o &lt;code&gt;super()&lt;/code&gt; da interface &lt;code&gt;HTMLElement&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// arquivo UserCard.js&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UserCard&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E, por √∫ltimo, precisamos registrar nossa tag no &lt;a href="https://html.spec.whatwg.org/multipage/custom-elements.html#customelementregistry"&gt;&lt;code&gt;CustomElementRegistry&lt;/code&gt;&lt;/a&gt; - que est√° dispon√≠vel globalmente pela vari√°vel &lt;code&gt;customElements&lt;/code&gt; e permite registrar um elemento customizado em uma p√°gina:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// arquivo UserCard.js&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UserCard&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user-card&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UserCard&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O m√©todo &lt;code&gt;define()&lt;/code&gt; de &lt;code&gt;customElements&lt;/code&gt; recebe como par√¢metro o nome da tag a ser definida e o objeto que vai encapsular o c√≥digo necess√°rio para sua constru√ß√£o. O nome da tag exige o caractere "-" (tra√ßo). Caso este padr√£o n√£o seja seguido e o nome da tag seja definido, por exemplo, como &lt;code&gt;usercard&lt;/code&gt;, receberemos um &lt;code&gt;DOMException&lt;/code&gt; no momento de usar a tag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Uncaught&lt;/span&gt; &lt;span class="nx"&gt;DOMException&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Failed&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;execute&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;define&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CustomElementRegistry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;usercard&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;valid&lt;/span&gt; &lt;span class="nx"&gt;custom&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Por este motivo manteremos o nome como &lt;code&gt;user-card&lt;/code&gt;. E para usar nossa nova tag, devemos import√°-la em um arquivo HTML e utilizar com a mesma sintaxe de uma tag comum:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- arquivo index.html --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Web Components&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;user-card&amp;gt;&amp;lt;/user-card&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"UserCard.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Como nossa tag n√£o faz nada at√© o momento, nada vai aparecer no navegador al√©m da frase "Web Components" ao abrir o arquivo &lt;code&gt;index.html&lt;/code&gt;. Todo elemento HTML tem a propriedade &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML"&gt;&lt;code&gt;innerHTML&lt;/code&gt;&lt;/a&gt; que corresponde ao seu conte√∫do. Para vermos algum resultado, vamos sobrescrever esta propriedade com algum conte√∫do - por exemplo, com o nome do usu√°rio do componente cart√£o que estamos desenvolvendo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// arquivo UserCard.js&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UserCard&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;h2&amp;gt;Fulano de Tal&amp;lt;h2&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user-card&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UserCard&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Que vai gerar o resultado:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TWWp9zxI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bly3nkees0x4cu5ivt1v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TWWp9zxI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bly3nkees0x4cu5ivt1v.png" alt="Resultado da p√°gina renderizada"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#templates"&gt;
  &lt;/a&gt;
  Templates
&lt;/h2&gt;

&lt;p&gt;Nossa tag customizada, apesar de simples, j√° funciona como esperado. Agora vamos utilizar e entender um pouco sobre outro recurso bastante utilizado quando trabalhamos com componentes web que s√£o os &lt;code&gt;Templates&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Com templates, √© poss√≠vel definir blocos de c√≥digos reutiliz√°veis. Apesar de j√° conseguirmos isso sem eles, os templates apresentam uma forma mais racional de fazer isso.&lt;/p&gt;

&lt;p&gt;Suponha que queremos repetir o uso de nosso componente v√°rias vezes na p√°gina. Seriam muitas chamadas de &lt;code&gt;this.innerHTML = "&amp;lt;h2&amp;gt;Fulano de Tal&amp;lt;/h2&amp;gt;"&lt;/code&gt;. Ou seja, construiria esse elemento v√°rias vezes, sendo que uma √∫nica vez j√° seria necess√°rio. &lt;/p&gt;

&lt;p&gt;Ao inv√©s de adicionarmos o conte√∫do com &lt;code&gt;innerHTML&lt;/code&gt; toda vez que o objeto √© constru√≠do, podemos usar templates. Como dito na documenta√ß√£o do &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template"&gt;MDN Web Docs&lt;/a&gt;: &lt;em&gt;O  elemento HTML &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; √© um mecanismo para encapsular um conte√∫do do lado do cliente que n√£o √© renderizado quando a p√°gina √© carregada, mas que pode ser instanciado posteriormente em tempo de execu√ß√£o usando JavaScript.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Portanto, ao criarmos algum conte√∫do dentro da tag &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;, este conte√∫do n√£o √© mostrado imediatamente. Mas pode ser clonado para ser posteriormente renderizado:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// arquivo UserCard.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;template&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;h2&amp;gt;Fulano de Tal&amp;lt;/h2&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UserCard&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="c1"&gt;// c√≥digo removido&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user-card&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UserCard&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note que criamos o template fora da classe. Agora ser√° preciso clonar o conte√∫do deste template que est√° dispon√≠vel pelo atributo &lt;code&gt;content&lt;/code&gt;. E para clonar o conte√∫do, utilizamos o m√©todo &lt;code&gt;cloneNode()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloneNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O m√©todo &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/cloneNode"&gt;&lt;code&gt;cloneNode()&lt;/code&gt;&lt;/a&gt; recebe um par√¢metro booleano para indicar se os elementos filhos do n√≥ que est√° sendo clonado devem ser clonados juntos ou n√£o. Vamos definir com o valor &lt;code&gt;true&lt;/code&gt; para clonar os filhos tamb√©m.&lt;/p&gt;

&lt;p&gt;Agora devemos pegar este elemento clonado e adicionar em nosso componente atrav√©s do m√©todo &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild"&gt;&lt;code&gt;appendChild()&lt;/code&gt;&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// arquivo UserCard.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;template&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;h2&amp;gt;Fulano de Tal&amp;lt;/h2&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UserCard&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloneNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user-card&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UserCard&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Esta t√©cnica reduz o custo de an√°lise do HTML porque o conte√∫do do modelo √© analisado apenas uma vez pelo &lt;a href="https://w3c.github.io/DOM-Parsing/#the-domparser-interface"&gt;&lt;code&gt;DOMParser&lt;/code&gt;&lt;/a&gt;, enquanto que chamar &lt;code&gt;innerHTML&lt;/code&gt; dentro do construtor ir√° analisar o HTML para cada inst√¢ncia. Isso garante uma melhoria na performance de nosso componente.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#atributos"&gt;
  &lt;/a&gt;
  Atributos
&lt;/h2&gt;

&lt;p&gt;E se quisermos que cada componente que ser√° renderizado na p√°gina tenha um conte√∫do diferente? Podemos, como qualquer tag HTML, definir atributos. Por exemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- arquivo index.html --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Web Components&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;user-card&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"Fulano de Tal"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/user-card&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;user-card&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"Ciclano de Tal"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/user-card&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"UserCard.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O atributo &lt;code&gt;name&lt;/code&gt; √© definido por n√≥s e pode ter o nome que considerarmos conveniente. Neste momento, nosso template est√° com um conte√∫do fixo e devemos modificar de acordo com atributo &lt;code&gt;name&lt;/code&gt; recebido pela nossa tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// arquivo UserCard.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;template&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;h2&amp;gt;&amp;lt;/h2&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UserCard&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloneNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user-card&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UserCard&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Como nosso componente √© um &lt;code&gt;HTMLElement&lt;/code&gt;, podemos usar e abusar de todos os recursos que uma tag comum do HTML possui, como o m√©todo &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/element/getAttribute"&gt;&lt;code&gt;getAttribute()&lt;/code&gt;&lt;/a&gt; para pegar o valor do atributo &lt;code&gt;name&lt;/code&gt; que definimos anteriormente. E teremos o resultado:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y3cKQaY6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9xehjqqstppc41ncf6xp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y3cKQaY6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9xehjqqstppc41ncf6xp.png" alt="Resultado da p√°gina renderizada"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shadow-dom"&gt;
  &lt;/a&gt;
  Shadow DOM
&lt;/h2&gt;

&lt;p&gt;Agora que aprendemos um pouco sobre templates, vamos adicionar um estilo para nosso componente. Primeiro, vamos adicionar um estilo para a tag &lt;code&gt;h2&lt;/code&gt; diretamente no arquivo &lt;code&gt;index.html&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- arquivo index.html --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;Web&lt;/span&gt; &lt;span class="nt"&gt;Components&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;user-card&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"Fulano de Tal"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;user-card&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;user-card&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"Ciclano de Tal"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;user-card&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="nt"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"UserCard.js"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E vamos obter o seguinte resultado:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YRyzQIfi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kusxluccnucyfel8qwln.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YRyzQIfi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kusxluccnucyfel8qwln.png" alt="Resultado da p√°gina renderizada"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Como todos os elementos da p√°gina, inclusive de nosso componente, est√£o dentro de uma tag &lt;code&gt;h2&lt;/code&gt;, todos receber√£o o estilo global. Mas podemos adicionar um estilo espec√≠fico para nosso componente, modificando a cor para azul, por exemplo. Podemos adicionar a tag &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; em nosso template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// arquivo UserCard.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;template&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
    &amp;lt;style&amp;gt;
        h2 {
            color: blue;
        }
    &amp;lt;/style&amp;gt;
    &amp;lt;h2&amp;gt;&amp;lt;/h2&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UserCard&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloneNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user-card&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UserCard&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora temos dois estilos na p√°gina para tag &lt;code&gt;h2&lt;/code&gt;, o estilo global dentro do arquivo &lt;code&gt;index.html&lt;/code&gt; e o estilo dentro de nosso componente. Qual ser√° que vai ser aplicado em cada caso? Ao renderizar a p√°gina, obtemos:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xTGDFwr0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/msv3z9nq62mze196qo25.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xTGDFwr0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/msv3z9nq62mze196qo25.png" alt="Resultado da p√°gina renderizada"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Repare que o estilo de nosso componente foi aplicado tamb√©m para o conte√∫do da tag &lt;code&gt;h2&lt;/code&gt; fora dele. Isso acontece porque o template com o estilo de nosso componente √© carregado por √∫ltimo e acaba por sobrescrever o estilo da tag &lt;code&gt;h2&lt;/code&gt; externo.&lt;/p&gt;

&lt;p&gt;Voc√™ pode argumentar que podemos evitar isso utilizando classes CSS e voc√™ est√° totalmente correto! Mas imagine o cen√°rio de um projeto grande em que cada desenvolvedor √© respons√°vel por um componente espec√≠fico. H√° grandes chances de nomes iguais de classes CSS serem utilizadas, e isso pode gerar um grande transtorno.&lt;/p&gt;

&lt;p&gt;Para evitar este tipo de conflito que trabalharemos com outro recurso chamado de &lt;code&gt;Shadow DOM&lt;/code&gt;. A ideia √© encapsular c√≥digo HTML, CSS e JavaScript de nosso componente para n√£o provocar e/ou sofrer altera√ß√£o externa.&lt;/p&gt;

&lt;p&gt;O &lt;code&gt;Shadow DOM&lt;/code&gt; √© uma sub √°rvore do DOM que tem seu pr√≥prio escopo e que n√£o faz parte do DOM original, tornando poss√≠vel construir interfaces modulares sem que entrem em conflito uma com a outra.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1UdgC2XG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1emfdfo36wrpt0hkuyme.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1UdgC2XG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1emfdfo36wrpt0hkuyme.png" alt="Shadow DOM"&gt;&lt;/a&gt;&lt;br&gt;fonte da imagem: MDN Web Docs
  &lt;/p&gt;

&lt;p&gt;Como especificado no &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM"&gt;MDN Web Docs&lt;/a&gt;, existem algumas terminologias do &lt;code&gt;Shadow DOM&lt;/code&gt; que devemos conhecer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Shadow host&lt;/strong&gt;: o n√≥ DOM regular ao qual o Shadow DOM est√° anexado.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Shadow tree&lt;/strong&gt;: a √°rvore DOM dentro do Shadow DOM.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Shadow boundary&lt;/strong&gt;: o lugar onde termina o Shadow DOM e come√ßa o DOM regular.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Shadow root&lt;/strong&gt;: o n√≥ raiz da Shadow tree.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dito isto, vamos ver como funciona na pr√°tica. Iremos isolar nosso componente dentro de um &lt;code&gt;Shadow DOM&lt;/code&gt;. Para isso, precisamos criar o n√≥ raiz &lt;code&gt;Shadow Root&lt;/code&gt; dentro de nosso componente - que ser√° o &lt;code&gt;Shadow Host&lt;/code&gt;. A classe &lt;code&gt;HTMLElement&lt;/code&gt; possui o m√©todo &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/attachShadow"&gt;&lt;code&gt;attachShadow()&lt;/code&gt;&lt;/a&gt; que podemos utilizar para abrir e criar uma refer√™ncia para um &lt;code&gt;Shadow Root&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Um &lt;code&gt;Shadow Root&lt;/code&gt; possui dois modos: aberto e fechado. Antes de entrarmos nas diferen√ßas entre esses dois modos, iremos criar nosso &lt;code&gt;Shadow Root&lt;/code&gt; no modo aberto para ver como ele funciona. O m√©todo &lt;code&gt;attachShadow()&lt;/code&gt; exige que passemos o modo como par√¢metro:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// arquivo UserCard.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;template&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
    &amp;lt;style&amp;gt;
        h2 {
            color: blue;
        }
    &amp;lt;/style&amp;gt;
    &amp;lt;h2&amp;gt;&amp;lt;/h2&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UserCard&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShadow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="c1"&gt;// criando o Shadow Root&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloneNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user-card&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UserCard&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ap√≥s esta mudan√ßa, ao renderizar novamente a p√°gina, vemos que nosso componente n√£o √© renderizado e volta a receber o estilo global definido para a tag &lt;code&gt;h2&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xBXA3cO---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5fbv4y69y3f3f3z37oyp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xBXA3cO---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5fbv4y69y3f3f3z37oyp.png" alt="Resultado da p√°gina renderizada"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mas √© poss√≠vel verificar que o &lt;code&gt;Shadow Root&lt;/code&gt; foi criado inspecionando a p√°gina atrav√©s da ferramenta &lt;code&gt;DevTools&lt;/code&gt; do navegador pela aba &lt;code&gt;Elemets&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8i6jiou--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6yn9xtjugolag689m8jz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8i6jiou--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6yn9xtjugolag689m8jz.png" alt="Shadow Root"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note que o conte√∫do do template tamb√©m foi anexado a tag &lt;code&gt;&amp;lt;user-card&amp;gt;&lt;/code&gt; mas n√£o √© mostrado j√° que est√° fora do &lt;code&gt;Shadow Root&lt;/code&gt;. Uma vez aberto o &lt;code&gt;Shadow Root&lt;/code&gt;, devemos anexar os conte√∫dos, como nosso template, dentro dele. Ap√≥s a chamada do m√©todo &lt;code&gt;attachShadow()&lt;/code&gt;, uma refer√™ncia ao objeto &lt;code&gt;Shadow Root&lt;/code&gt; aberto √© disponibilizado atrav√©s do atributo &lt;code&gt;shadowRoot&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// arquivo UserCard.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;template&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
    &amp;lt;style&amp;gt;
        h2 {
            color: blue;
        }
    &amp;lt;/style&amp;gt;
    &amp;lt;h2&amp;gt;&amp;lt;/h2&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UserCard&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShadow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloneNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// c√≥digo modificado&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// c√≥digo modificado&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user-card&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UserCard&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora, nosso componente √© renderizado como antes porque foi anexado ao &lt;code&gt;Shadow Root&lt;/code&gt;, vamos novamente inspecion√°-lo pela ferramenta &lt;code&gt;DevTools&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rT9RWcqv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rptcbiphu6599qolclj0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rT9RWcqv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rptcbiphu6599qolclj0.png" alt="Shadow Root"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note que agora o conte√∫do est√° dentro do &lt;code&gt;Shadow Root&lt;/code&gt;. E como ele est√° dentro de uma &lt;code&gt;Shadow Tree&lt;/code&gt; separada do DOM original, os estilos globais n√£o afetam nosso componente e o resultado da renderiza√ß√£o da p√°gina √© este:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J5xwNSb1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x2wxhjtwcqtbx3k0m102.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J5xwNSb1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x2wxhjtwcqtbx3k0m102.png" alt="Resultado da p√°gina renderizada"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Este foi um exemplo utilizado para encapsular os estilos. Mas o mesmo vale para eventos que possam ser registrados em nosso componente - como um evento de &lt;em&gt;click&lt;/em&gt; que pode afetar muitos elementos de uma p√°gina e o &lt;code&gt;Shadow DOM&lt;/code&gt; vai garantir o encapsulamento. &lt;/p&gt;

&lt;p&gt;Agora que vimos um pouco como o &lt;code&gt;Shadow DOM&lt;/code&gt; funciona, vamos entender a diferen√ßa entre os modos aberto e fechado. O &lt;code&gt;Shadow Root&lt;/code&gt; no modo aberto permite que fa√ßamos modifica√ß√µes em sua estrutura utilizando JavaScript. Se quisermos acessar o &lt;code&gt;Shadow Root&lt;/code&gt; de nosso componente, basta digitar no console:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user-card&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Isso nos permite acessar o &lt;code&gt;shadowRoot&lt;/code&gt; de nosso componente:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xXnqShWZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oj0zeb4j5dkh1pmzejnc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xXnqShWZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oj0zeb4j5dkh1pmzejnc.png" alt="Shadow Root"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;E fazer modifica√ß√µes em seu conte√∫do, como modificar o conte√∫do da tag &lt;code&gt;h2&lt;/code&gt; de nosso componente:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iGwj3PT---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/23c9o0nt171z8lozu2vk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iGwj3PT---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/23c9o0nt171z8lozu2vk.png" alt="Shadow Root"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Repare que o encapsulamento, neste sentido, √© quebrado j√° que podemos modificar sua estrutura atrav√©s do JavaScript. Para que o encapsulamento seja realmente aplicado √© que existe o modo fechado do &lt;code&gt;Shadow DOM&lt;/code&gt;. Vamos modificar nosso componente para o modo fechado:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// arquivo UserCard.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;template&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
    &amp;lt;style&amp;gt;
        h2 {
            color: blue;
        }
    &amp;lt;/style&amp;gt;
    &amp;lt;h2&amp;gt;&amp;lt;/h2&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UserCard&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShadow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;closed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;  &lt;span class="c1"&gt;// modificado para o modo fechado&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloneNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user-card&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UserCard&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Mas, ao fazer isso, nosso componente nem sequer √© renderizado:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xBXA3cO---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5fbv4y69y3f3f3z37oyp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xBXA3cO---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5fbv4y69y3f3f3z37oyp.png" alt="Resultado da p√°gina renderizada"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Isso acontece porque o acesso ao atributo &lt;code&gt;shadowRoot&lt;/code&gt; n√£o √© mais poss√≠vel. &lt;code&gt;this.shadowRoot&lt;/code&gt; agora vai retornar &lt;code&gt;null&lt;/code&gt; e receberemos o seguinte erro no console:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XY5GYPsi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o259rdozk7pi3epxbjck.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XY5GYPsi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o259rdozk7pi3epxbjck.png" alt="Console JavaScript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Portanto, n√£o ser√° mais poss√≠vel acessar o &lt;code&gt;shadowRoot&lt;/code&gt; externamente pelo JavaScript:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l73Qf7NB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cdy1517lgq42homspa9q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l73Qf7NB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cdy1517lgq42homspa9q.png" alt="Shadow Root"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;S√≥ ser√° poss√≠vel faz√™-lo dentro de nosso componente. Para isso, criaremos uma refer√™ncia para ele e assim ser√° poss√≠vel manipul√°-lo e clonar o template para que seja renderizado na p√°gina:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// arquivo UserCard.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;template&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
    &amp;lt;style&amp;gt;
        h2 {
            color: blue;
        }
    &amp;lt;/style&amp;gt;
    &amp;lt;h2&amp;gt;&amp;lt;/h2&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UserCard&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_shadowRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShadow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;closed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_shadowRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloneNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_shadowRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user-card&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UserCard&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Dessa maneira, nosso componente √© renderizado como antes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Y9Uqr_0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l1x2yjzapmwgmcgmcjtz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Y9Uqr_0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l1x2yjzapmwgmcgmcjtz.png" alt="Resultado da p√°gina renderizada"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;E o acesso, via JavaScript, ao &lt;code&gt;shadowRoot&lt;/code&gt; continua retornando &lt;code&gt;null&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fgpGVsUa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bmqp405uzl595q2a0e01.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fgpGVsUa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bmqp405uzl595q2a0e01.png" alt="Console JavaScript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora temos nosso componente encapsulado e fechado para modifica√ß√µes externas com JavaScript. √â evidente que ainda podemos acess√°-lo da seguinte forma: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DSaxz2w4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2s753ehirnsc7ourackv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DSaxz2w4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2s753ehirnsc7ourackv.png" alt="Console JavaScript"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Mas, seguindo as boas pr√°ticas da linguagem, isso deve ser evitado j√° que indica que este atributo √© privado e n√£o deve ser acessado fora da classe &lt;code&gt;UserCard&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#isolando-o-css"&gt;
  &lt;/a&gt;
  Isolando o CSS
&lt;/h2&gt;

&lt;p&gt;Escrever c√≥digo CSS dentro de um &lt;em&gt;template string&lt;/em&gt; n√£o √© o ideal. O melhor seria se o c√≥digo CSS de nosso componente ficasse em um arquivo externo de estilos. &lt;/p&gt;

&lt;p&gt;Primeiro, vamos criar o arquivo &lt;code&gt;UserCard.css&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* arquivo UserCard.css */&lt;/span&gt;

&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Em seguida, modificamos nosso componente para utilizar este arquivo CSS - importando o arquivo atrav√©s da tag &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// arquivo UserCard.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;template&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;` 
    &amp;lt;link type="text/css" rel="stylesheet" href="UserCard.css"&amp;gt;&amp;lt;/link&amp;gt;
    &amp;lt;h2&amp;gt;&amp;lt;/h2&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UserCard&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// c√≥digo omitido&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user-card&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UserCard&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tamb√©m √© poss√≠vel utilizar o recurso de &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@import"&gt;regra atribu√≠da&lt;/a&gt; do CSS atrav√©s do &lt;code&gt;@import&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// arquivo UserCard.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;template&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;` 
    &amp;lt;style&amp;gt;@import url("UserCard.css")&amp;lt;/style&amp;gt;
    &amp;lt;h2&amp;gt;&amp;lt;/h2&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UserCard&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// c√≥digo omitido&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user-card&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UserCard&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Mas como comentado no &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM#internal_versus_external_styles"&gt;MDN Web Docs&lt;/a&gt;, o carregamento de um estilo externo feito dessa maneira dentro do &lt;code&gt;ShadowRoot&lt;/code&gt; pode causar o temido FOUC (&lt;a href="https://en.wikipedia.org/wiki/Flash_of_unstyled_content"&gt;&lt;em&gt;Flash of Unstyled Content&lt;/em&gt;&lt;/a&gt;) - ou seja, pode ocorrer um &lt;em&gt;flash&lt;/em&gt; do conte√∫do n√£o estilizado enquanto o CSS √© carregado. &lt;/p&gt;

&lt;p&gt;Por este motivo, muitos desenvolvedores mant√™m o conte√∫do dos estilos dentro da tag &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; no template &lt;em&gt;string&lt;/em&gt; ao inv√©s de tentar evitar FOUC com c√≥digo adicional - at√© o momento n√£o existe uma maneira f√°cil e r√°pida de evitar isso. &lt;/p&gt;

&lt;p&gt;Por facilidade e para evitar este tipo de problema, optaremos por manter o c√≥digo de estilos dentro do template &lt;em&gt;string&lt;/em&gt;, utilizando a tag &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finalizando-o-componente-do-cart%C3%A3o"&gt;
  &lt;/a&gt;
  Finalizando o componente do cart√£o
&lt;/h2&gt;

&lt;p&gt;Agora que entendemos um pouco sobre componentes, podemos voltar ao nosso objetivo final que era criar o componente de cart√£o de usu√°rios. Basta refatorarmos o c√≥digo modificando o template de nosso componente e fazendo os ajustes em seu construtor. O c√≥digo final ficaria assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- arquivo index.html --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Web Components&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;user-card&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"Fulano de Tal"&lt;/span&gt; &lt;span class="na"&gt;job=&lt;/span&gt;&lt;span class="s"&gt;"Desenvolvedor de Software"&lt;/span&gt; &lt;span class="na"&gt;image=&lt;/span&gt;&lt;span class="s"&gt;"user.png"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/user-card&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"UserCard.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// arquivo UserCard.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;template&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
    &amp;lt;style&amp;gt;
        .card {
            font-family: Arial;
            border: 1px solid #c5c9d1;
            border-radius: 4%;
            width: 150px;
            height: 60px;
            display: flex;
            color: #5b6069;
            font-size: 12px;
            padding: 10px;
        }

        .card:hover {
            background-color: hsl(0, 0%, 97%);
        }

        .card-image,
        .card-content {
            padding: 5px;
        }

        .user-image {
            width: 45px;
            height: 45px;
        }

        .user-name {
            font-weight: bold;
        }

        .user-job {
            font-style: italic;
            font-size: 10px;
            margin-top: 2px;
        }
    &amp;lt;/style&amp;gt;
    &amp;lt;div class="card"&amp;gt;
        &amp;lt;div class="card-image"&amp;gt;
            &amp;lt;img class="user-image" src="user.png"/&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card-content"&amp;gt;
            &amp;lt;div class="user-name"&amp;gt;&amp;lt;/div&amp;gt;
            &amp;lt;div class="user-job"&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;    
    &amp;lt;/div&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UserCard&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_shadowRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShadow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;closed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_shadowRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloneNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_job&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;job&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_shadowRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.user-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_shadowRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.user-job&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_job&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_shadowRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.user-image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E temos como resultado o componente do cart√£o do usu√°rio, podendo ser reutilizado em qualquer outra p√°gina HTML de nosso projeto:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Csp5cpXH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6riys3ir39hw43luwpw8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Csp5cpXH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6riys3ir39hw43luwpw8.png" alt="Resultado da p√°gina renderizada"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclus√£o
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Web Components&lt;/code&gt; (componentes web) possui uma &lt;a href="https://www.w3.org/TR/2013/WD-components-intro-20130606/"&gt;especifica√ß√£o&lt;/a&gt; pr√≥pria. Como descrito no &lt;a href="https://developer.mozilla.org/pt-BR/docs/Web/Web_Components"&gt;MDN Web Docs&lt;/a&gt;, &lt;code&gt;Web Components&lt;/code&gt; &lt;em&gt;√© uma su√≠te de diferentes tecnologias que permite a cria√ß√£o de elementos customizados reutiliz√°veis ‚Äî com a funcionalidade separada do resto do seu c√≥digo ‚Äî e que podem ser utilizados em suas aplica√ß√µes web&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Para utilizar &lt;code&gt;Web Components&lt;/code&gt; n√£o √© necess√°rio nenhuma biblioteca adicional ou &lt;em&gt;framework&lt;/em&gt;, desde que o navegador implemente as seguintes especifica√ß√µes da Web Api:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Custom Elements&lt;/strong&gt; - permite definir tags customizadas&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Templates&lt;/strong&gt; - permite definir blocos de c√≥digos reutiliz√°veis&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Shadow DOM&lt;/strong&gt; - permite encapsular o c√≥digo do componente em uma √°rvore separada do DOM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Segundo a documenta√ß√£o, atualmente &lt;code&gt;Web Componentes&lt;/code&gt; √© suportado por padr√£o no Firefox (vers√£o 63), Chrome, Opera e Edge (vers√£o 79). O Safari j√° suporta boa parte delas mas n√£o todas. De todo modo, √© poss√≠vel usar &lt;code&gt;Web Components&lt;/code&gt; em qualquer navegador atrav√©s do &lt;a href="https://github.com/webcomponents/polyfills/tree/master/packages/webcomponentsjs"&gt;Polyfill&lt;/a&gt; - que nada mais √© do que um peda√ßo de c√≥digo (geralmente JavaScript) utilizado para simular os recursos ausentes do navegador o mais pr√≥ximo poss√≠vel.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Web Components&lt;/code&gt; √© ainda um conceito novo quando utilizado em  JavaScript nativo. Componentes s√£o muito utilizados por bibliotecas e &lt;em&gt;frameworks&lt;/em&gt; como &lt;code&gt;Angular&lt;/code&gt;, &lt;code&gt;React&lt;/code&gt; e &lt;code&gt;Vue&lt;/code&gt; - ferramentas s√≥lidas e muito famosas dentro da comunidade front-end. E &lt;code&gt;Web Components&lt;/code&gt;, por ser nativo, pode ser utilizado juntamente com essas ferramentas.&lt;/p&gt;

&lt;p&gt;Se considerarmos uma equipe grande, separada em v√°rios times, em que cada time utiliza uma ferramenta diferente para cada parte de um projeto, pode acontecer de existir partes em comum entre elas como uma tela de login - com a mesma estrutura para dar unidade ao projeto. Com &lt;code&gt;Web Components&lt;/code&gt;, √© poss√≠vel criar um componente nativo que seja compartilhado entre os times. Ou seja, facilita a interoperabilidade do sistema.&lt;/p&gt;

&lt;p&gt;Um artigo interessante que compara &lt;code&gt;Web Components&lt;/code&gt; com demais ferramentas, levando em considera√ß√£o estilos de c√≥digo, performance e &lt;em&gt;bundle-size&lt;/em&gt;, √© o &lt;a href="https://webcomponents.dev/blog/all-the-ways-to-make-a-web-component/"&gt;All the Ways to Make a Web Component&lt;/a&gt; do pessoal do &lt;a href="https://webcomponents.dev/"&gt;WebComponents.dev&lt;/a&gt;. Vale dar uma conferida!&lt;/p&gt;

&lt;p&gt;No mais, a ideia deste post era apresentar conceitos b√°sicos sobre &lt;code&gt;Web Components&lt;/code&gt; e como construir um simples componente com pouco c√≥digo. &lt;code&gt;Web Components&lt;/code&gt; vai muito al√©m. Em futuros  posts desta s√©rie pretendo mostrar outros recursos como o ciclo de vida de um componente, registro de eventos, componentes compostos e como podemos gerenciar melhor o estado de seus atributos. At√© a pr√≥xima!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Daily Developer Jokes - Tuesday, Jul 13, 2021</title>
      <author>Daily Developer Jokes</author>
      <pubDate>Tue, 13 Jul 2021 12:00:25 +0000</pubDate>
      <link>https://dev.to/dailydeveloperjokes/daily-developer-jokes-tuesday-jul-13-2021-1og7</link>
      <guid>https://dev.to/dailydeveloperjokes/daily-developer-jokes-tuesday-jul-13-2021-1og7</guid>
      <description>&lt;p&gt;Generated by Daily Developer Jokes, a project by &lt;a href="https://xtrp.io/"&gt;Fred Adams&lt;/a&gt; (&lt;a href="https://dev.to/xtrp"&gt;@xtrp&lt;/a&gt; on DEV)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Read about Daily Developer Jokes on &lt;a href="https://xtrp.io/blog/2020/01/12/daily-jokes-bot-release/"&gt;this blog post&lt;/a&gt;, and check out the &lt;a href="https://dailydeveloperjokes.github.io/"&gt;Daily Developer Jokes Website&lt;/a&gt;.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#todays-joke-is"&gt;
  &lt;/a&gt;
  Today's Joke is...
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w8l1NuWn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://private.xtrp.io/projects/DailyDeveloperJokes/public_image_server/images/5e125880f2f70.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w8l1NuWn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://private.xtrp.io/projects/DailyDeveloperJokes/public_image_server/images/5e125880f2f70.png" alt="Joke Image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Have a joke idea for a future post? Email &lt;strong&gt;&lt;em&gt;&lt;a href="//mailto:xtrp@xtrp.io"&gt;xtrp@xtrp.io&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; with your suggestions!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This joke comes from &lt;a href="https://github.com/wesbos/dad-jokes"&gt;Dad-Jokes GitHub Repo by Wes Bos&lt;/a&gt; (thank you!), whose owner has given me permission to use this joke with credit.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>jokes</category>
      <category>dailydeveloperjokes</category>
    </item>
    <item>
      <title>How to architecture state variables in React.</title>
      <author>Saran Chakravarthi</author>
      <pubDate>Tue, 13 Jul 2021 11:57:49 +0000</pubDate>
      <link>https://dev.to/saran_chakravarthi/how-to-architecture-state-variables-in-react-42h2</link>
      <guid>https://dev.to/saran_chakravarthi/how-to-architecture-state-variables-in-react-42h2</guid>
      <description>&lt;p&gt;Hello Devs, in this article, we will see how to architecture the state variables in your react app.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If a state is used by a single component it should be inside that component.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a state is used by multiple components in a tree and they are all direct children of the same parent component, it should be in their parent component.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a state is used by multiple components in a tree but they are not direct children of the same parent component, it should be in context/redux.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a state is used by multiple components in different trees, it should be in context/redux.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you, for reading this far. I hope this article helped you.&lt;/p&gt;

&lt;p&gt;Happy coding.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
