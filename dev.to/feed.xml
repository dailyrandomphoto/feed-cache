<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>This is How [JavaScript] Promises Really Work</title>
      <author>Clean Code Studio</author>
      <pubDate>Mon, 02 Aug 2021 14:20:33 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/this-is-how-javascript-promises-really-work-a-promising-guide-dlg</link>
      <guid>https://dev.to/cleancodestudio/this-is-how-javascript-promises-really-work-a-promising-guide-dlg</guid>
      <description>&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;





&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Promises are one technique to handle asynchronous code, otherwise known as your first class ticket out of callback hell.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5l83yp3D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wit653vmh8e2a7wwteum.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5l83yp3D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wit653vmh8e2a7wwteum.png" alt="JS promise state "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-states-of-a-promise"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3 State's of a Promise&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Pending State&lt;/li&gt;
&lt;li&gt;Resolved State&lt;/li&gt;
&lt;li&gt;Rejected State&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#understanding-javascript-promises"&gt;
  &lt;/a&gt;
  Understanding JavaScript Promises
&lt;/h3&gt;




&lt;p&gt;What is a promise? &lt;/p&gt;

&lt;p&gt;Commonly, a promise is defined as a proxy for a value that will eventually become available. &lt;/p&gt;

&lt;p&gt;Promises have been a part of JavaScript for years (standardized and introduced in ES2015). More recently, the &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; keywords (introduced in ES2017) have more deeply integrated and cleaned up the syntax for promises within JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Async functions&lt;/strong&gt; use promises behind the scenes, thus - especially with todays distributed cloud architectures becoming more common - understanding what promises are and they work is more important than ever. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#how-promises-work-brief-explanation"&gt;
  &lt;/a&gt;
  How Promises Work (Brief Explanation)
&lt;/h3&gt;




&lt;p&gt;Your code calls a promise. This promise will start in what is known as its &lt;strong&gt;pending state&lt;/strong&gt;. What's this mean?&lt;/p&gt;

&lt;p&gt;This means that the calling function will continue executing while the promise is pending. Once the promise is &lt;strong&gt;resolved&lt;/strong&gt; the calling function will get the data that was being requested by the promise. &lt;/p&gt;

&lt;p&gt;A promise starts in a &lt;strong&gt;pending state&lt;/strong&gt; and eventually ends in a &lt;strong&gt;resolved state&lt;/strong&gt; or a &lt;strong&gt;rejected state&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Whether the final outcome be a promise in its &lt;strong&gt;resolved state&lt;/strong&gt; or a promise in its &lt;strong&gt;rejected state&lt;/strong&gt;, a callback will be called.&lt;/p&gt;

&lt;p&gt;We define two separate callbacks. &lt;/p&gt;

&lt;p&gt;One callback handles the data returned from a promise when it ends in a &lt;strong&gt;resolved state&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The other callback handles the data returned from a promise when it ends in a &lt;strong&gt;rejected state&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We define the callback function that handles the promise data that ends in a &lt;strong&gt;resolved state&lt;/strong&gt; by passing our callback function to &lt;strong&gt;then&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We define the callback function that handles the promise data  that ends in a &lt;strong&gt;rejected state&lt;/strong&gt; by passing our callback function to &lt;strong&gt;catch&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example using axios npm library&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;resolvedPromiseCallbackFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
     &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;rejectedPromiseCallbackFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#which-javascript-apis-use-promises"&gt;
  &lt;/a&gt;
  Which JavaScript APIs use promises?
&lt;/h3&gt;



&lt;p&gt;Your own code and libraries will most likely use promises throughout. That being noted, promises are actually used by standard modern web APIS. Here's a couple web APIs that also use promises.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API"&gt;Service Workers API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"&gt;Fetch API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In modern JavaScript, it's pretty unlikely you'll find yourself in a situation where you're not using promises - so let's dive deep and start understanding them. &lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#creating-promises"&gt;
  &lt;/a&gt;
  Creating promises
&lt;/h3&gt;



&lt;p&gt;JavaScript has a Promise API. The Promise API exposes a promise constructor, which you initialize using &lt;code&gt;new Promise()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;complete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hasItCompleted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;completed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Here is the thing I built&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;withReason&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Still doing something else&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
     &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;withReason&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;As shown, we check the &lt;code&gt;complete&lt;/code&gt; global constant. If &lt;code&gt;complete&lt;/code&gt; is true, the promise switched to the &lt;strong&gt;resolved&lt;/strong&gt; state (aka we call the resolve callback which switches the promise to its &lt;strong&gt;resolved&lt;/strong&gt; state). Otherwise, if &lt;code&gt;complete&lt;/code&gt; is false, the &lt;code&gt;reject&lt;/code&gt; callback is executed, putting the promise into a &lt;strong&gt;rejected&lt;/strong&gt; state. &lt;/p&gt;

&lt;p&gt;Okay - easy enough, if we call the &lt;code&gt;resolve&lt;/code&gt; callback then our promise switches to the &lt;strong&gt;resolved&lt;/strong&gt; state where as if we use the &lt;code&gt;reject&lt;/code&gt; callback our promise switches to its &lt;strong&gt;rejected&lt;/strong&gt; state. That leaves us with a question though.&lt;/p&gt;

&lt;p&gt;What if we call neither the &lt;code&gt;resolve&lt;/code&gt; nor the &lt;code&gt;reject&lt;/code&gt; callback? Well, as you might be putting together, then the promise remains in its &lt;strong&gt;pending&lt;/strong&gt; state. &lt;/p&gt;

&lt;p&gt;Simple enough, three states - two callback functions to switch to &lt;strong&gt;Resolved State&lt;/strong&gt; or &lt;strong&gt;Rejected State&lt;/strong&gt;, if we call neither callback then we simply remain in the &lt;strong&gt;Pending State&lt;/strong&gt;.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#promisifying"&gt;
  &lt;/a&gt;
  Promisifying
&lt;/h3&gt;



&lt;p&gt;A more common example that may cross your path is a technique known as &lt;strong&gt;Promisifying&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Promisifying&lt;/strong&gt; is a way to be able to use a classic JavaScript function that takes a callback, and have it return a promise:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fileSystem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fileSystem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
               &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
               &lt;span class="k"&gt;return&lt;/span&gt; 
           &lt;span class="p"&gt;}&lt;/span&gt;  

           &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/etc/passwd&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;getFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;In recent versions of Node.js, you won't have to do this&lt;/em&gt; &lt;br&gt;
&lt;em&gt;manual conversion for a lot of the API. There is a&lt;/em&gt;&lt;br&gt;
&lt;em&gt;promisifying function available in the util module that will&lt;/em&gt; &amp;gt; &lt;em&gt;do this for you, given that the function you're&lt;/em&gt;&lt;br&gt;
&lt;em&gt;promisifying has the correct signature.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h3&gt;
  &lt;a href="#consuming-a-promise"&gt;
  &lt;/a&gt;
  Consuming A Promise
&lt;/h3&gt;



&lt;p&gt;Now that understand how a promise can be created using &lt;code&gt;new Promise()&lt;/code&gt; as well as the &lt;strong&gt;Promisifying&lt;/strong&gt; technique, let's talk about &lt;em&gt;consuming&lt;/em&gt; a promise. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;How do we use a promise (aka how do we consume a promise)&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isItDoneYet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* ... as above ... */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;checkIfItsDone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;isItDoneYet&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Running &lt;code&gt;checkIfItsDone()&lt;/code&gt; will specify functions to execute when the &lt;code&gt;isItDoneYet&lt;/code&gt; promise resolves (in the &lt;code&gt;then&lt;/code&gt; call) or rejects (in the &lt;code&gt;catch&lt;/code&gt; call).&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#fluently-chaining-promises"&gt;
  &lt;/a&gt;
  Fluently Chaining Promises
&lt;/h3&gt;



&lt;p&gt;What if we want to call another promise directly after a previous promise is returned. We can do this, and it's simply called creating a chain of promises.&lt;/p&gt;

&lt;p&gt;An example of chaining promises can be found within the Fetch API, which may be used to get a resource and queue (First in First out line) a chain of promises to execute when the resource is fetched.&lt;/p&gt;

&lt;p&gt;For starters, let's first point out that the &lt;strong&gt;Fetch API&lt;/strong&gt; is a promise-based mechanism. Calling the &lt;code&gt;fetch()&lt;/code&gt; method is equivalent to defining our own promise using &lt;code&gt;new Promise()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here's an example of chaining promises fluently together:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
     &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;
          &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusText&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;   

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/items.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Request success (with json): &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Request failed: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"&lt;a href="https://www.npmjs.com/package/node-fetch"&gt;node-fetch&lt;/a&gt; is minimal code for window.fetch compatible API on Node.js runtime."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, what'd we just do?&lt;/p&gt;

&lt;p&gt;Well, in the example above we call &lt;code&gt;fetch()&lt;/code&gt; to get a list of items from the &lt;code&gt;items.json&lt;/code&gt; file found in the domain root.&lt;/p&gt;

&lt;p&gt;Then we create a chaing of promises.&lt;/p&gt;

&lt;p&gt;Running &lt;code&gt;fetch()&lt;/code&gt; returns a &lt;a href="https://fetch.spec.whatwg.org/#concept-response"&gt;response&lt;/a&gt;. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Response contains &lt;code&gt;status&lt;/code&gt; (numeric HTTP status code)&lt;/li&gt;
&lt;li&gt;Response contains &lt;code&gt;statusText&lt;/code&gt; (string message, which is &lt;code&gt;OK&lt;/code&gt; if everything is successful)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;response&lt;/code&gt; also contains a method callable as &lt;code&gt;json()&lt;/code&gt;. Responses json method returns a promise that will resolve with the content of the body data processed and transformed into &lt;code&gt;JSON&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then we have a final promise in our chain passed in as a anonymous callback function.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Request success (with json): &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This function simply logs that we were successful and console logs the successful requests json data.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;_"What if the first promise was rejected though?"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the first promise would have been rejected, or the second promise, or the third - then, no matter the step, we're automatically going to default to the &lt;code&gt;catch&lt;/code&gt; callback method that is visually shown at the end of our fluent promise chain. &lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#handling-errors"&gt;
  &lt;/a&gt;
  Handling Errors
&lt;/h3&gt;



&lt;p&gt;We have a promise chain, something fails, uh oh - so what happens?&lt;/p&gt;

&lt;p&gt;If anything in the chain of promises fails and raises an error or ultimately sets the promise's state to a &lt;strong&gt;Rejected Promise State&lt;/strong&gt;, the control goes directly to the nearest &lt;code&gt;catch()&lt;/code&gt; statement down our promise chain.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// or&lt;/span&gt;

&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#cascading-errors"&gt;
  &lt;/a&gt;
  Cascading errors
&lt;/h3&gt;



&lt;p&gt;What if we raise an error &lt;strong&gt;inside&lt;/strong&gt; a &lt;code&gt;catch()&lt;/code&gt;? Well, check it - we can simply append a second &lt;code&gt;catch()&lt;/code&gt;. The second &lt;code&gt;catch()&lt;/code&gt; will handle the error (or more specifically error message) and so on.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#promises-orchestration"&gt;
  &lt;/a&gt;
  Promises Orchestration
&lt;/h3&gt;



&lt;p&gt;Okay, so now we're solid when it comes to a single promise and our foundational understanding of promises in general.&lt;/p&gt;

&lt;p&gt;Getting more advanced, let's ask another question. If you need to synchronize different promises - say pull data from multiple endpoints and handle the resolved promise data from all of the promises created and used to retrieve results from these differing endpoints - how would we do it?&lt;/p&gt;

&lt;p&gt;How would we synchronize different promises and execute something when they are all resolved?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; &lt;code&gt;Promise.all()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Promise.all()&lt;/code&gt; helps us define a list of promises and execute something when they are all resolved - it allows us to synchronize promises.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Promise.all()&lt;/code&gt; &lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/one.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;two&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/two.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;one&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;two&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Array of results: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;With destructuring, we can simplify this example to:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;one&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;two&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/one.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/two.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;one&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;two&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;resA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resB&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;results: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resB&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#promiserace"&gt;
  &lt;/a&gt;
  Promise.race()
&lt;/h3&gt;



&lt;p&gt;What if we want to get all of the data from these multiple APIs, but we really only need enough data returned from one endpoint to show on our page?&lt;/p&gt;

&lt;p&gt;That is we need to resolve all of our promises no matter what, however we want to do something with the data from the first resolved promise and we don't care which promise is resolved first. &lt;/p&gt;

&lt;p&gt;To handle the data from the first resolved promise we can use &lt;code&gt;Promise.race()&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;Promise.race()&lt;/code&gt; runs when the first of the promises you pass to it resolves, and it runs the attached callback just once, with the result of the first promise resolved.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;first&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;second&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;race&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// second&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#useful-packages-using-andor-simplifying-promises"&gt;
  &lt;/a&gt;
  Useful Packages Using and/or Simplifying Promises
&lt;/h3&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package//axios"&gt;Axios (wrapper for fetching data via promises)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.promisejs.org/"&gt;Promise (extends promises)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/fs-extra"&gt;FS-Extra (uses promises)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;




&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://cleancode.studio/clean-code"&gt;Clean Code&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cleancode.studio"&gt;Clean Code Studio&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clean Code Studio - Clean Code Clean Life - Simplify!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>coding</category>
      <category>programming</category>
      <category>node</category>
    </item>
    <item>
      <title>How setup the Arduino IDE to use Luos</title>
      <author>Emanuel Allely</author>
      <pubDate>Mon, 02 Aug 2021 13:55:58 +0000</pubDate>
      <link>https://dev.to/emanuel_allely/how-setup-the-arduino-ide-to-use-luos-4p7e</link>
      <guid>https://dev.to/emanuel_allely/how-setup-the-arduino-ide-to-use-luos-4p7e</guid>
      <description>&lt;p&gt;🎥 Here is a "quick and dirty" video &lt;strong&gt;tutorial&lt;/strong&gt; showing how to set up the &lt;strong&gt;Arduino&lt;/strong&gt; IDE to use Luos with your Arduino and Genuino boards. 🎓 Luos is an &lt;strong&gt;open-source&lt;/strong&gt; project for &lt;strong&gt;embedded systems&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;➔ &lt;a href="https://youtu.be/Y-rUEB65EWw"&gt;https://youtu.be/Y-rUEB65EWw&lt;/a&gt;&lt;/p&gt;

</description>
      <category>arduino</category>
      <category>opensource</category>
      <category>embeddedsystems</category>
      <category>luos</category>
    </item>
    <item>
      <title>Web Performance Optimization- I</title>
      <author>Bipul Sharma</author>
      <pubDate>Mon, 02 Aug 2021 13:43:23 +0000</pubDate>
      <link>https://dev.to/bipul/web-performance-optimization-i-5d39</link>
      <guid>https://dev.to/bipul/web-performance-optimization-i-5d39</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Web performance is all about making web sites fast, including making slow processes seem fast. Good or bad website performance correlates powerfully to user experience, as well as the overall effectiveness of most sites. Websites and applications need to be fast and efficient for all users no matter what conditions the users are under. To make that happen we use performance optimizations. The MDN web docs breaks down performance optimization into four major areas. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Reducing overall load time&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Compressing and minifying all files.&lt;/li&gt;
&lt;li&gt;Reducing the number of file and other HTTP requests sent back and forth between the server and the user agent.&lt;/li&gt;
&lt;li&gt;Employing advanced loading and caching techniques and conditionally serving the user with only what they need when they actually need it. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Making the site usable as soon as possible&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is done by loading critical components first to give the user initial content and functionality and then deferring less important features for later using lazy loading to request and display content only when the user gets to or interacts with it. And by pre-loading features, the user is likely to interact with next.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Smoothness and Interactivity&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Improving the perceived performance of a site through skeleton interfaces, visual loaders and clear indication that something is happening and things are going to work soon. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Performance measurements&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tools and metrics to monitor performance and validate up to station efforts. The thing to keep in mind here is that not every performance optimization will fit your solution and needs.&lt;/li&gt;
&lt;li&gt;Browser tools measuring performance include Lighthouse (Chrome), Network monitor, Performance monitor. There are also hosted third-party tools like PageSpeed Insights (Google), WebPage Test, GTMetrics(actually Lighthouse) which help measure performance. &lt;/li&gt;
&lt;li&gt;Key indicators that these tools use ro describe the performance are:

&lt;ul&gt;
&lt;li&gt;First paint- The time it takes before the user sees changes happening in the browser.
Largest Contentful Paint (LCP)- The time it takes before the user sees content, so text images, something else in the browser.&lt;/li&gt;
&lt;li&gt;First Meaningful Paint (FMP)- The time it takes before the user sees content that is actually meaningful. So when above the full content and web fonts are loaded and the user can derive meaning from what they are seeing.&lt;/li&gt;
&lt;li&gt;Time To Interactive- The time it takes before the content has finished loading and the UI can be interacted with so the user can actually click on buttons, fill forms or do whatever else is going to happen on the site. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The longer it takes for a site to hit each of these points, the higher the chance of the user either getting annoyed or abandoning the user experience altogether. So good performance is better for your visitors, better for you because you don't have to pay as much for your hosting, better for your Google rankings, and finally, better for the environment.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#critical-rendering-path-crp"&gt;
  &lt;/a&gt;
  Critical Rendering Path (CRP)
&lt;/h2&gt;

&lt;p&gt;To understand performance optimization, you first need a solid understanding of how typing something into the address bar of a browser results in the page being rendered in the viewport.&lt;/p&gt;

&lt;p&gt;It all starts with the browser sending a request for some site.com to its Internet Service Provider.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f8OUDPAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0whp661zstc0r2in69t5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f8OUDPAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0whp661zstc0r2in69t5.png" alt="Screenshot (137)"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The ISP then sends the request immediately to a DNS domain name service, a phone book for the web which maps the website you're seeking to the address for the website.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JwfMXNu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u58mh7nmte2jxybxj6mb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JwfMXNu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u58mh7nmte2jxybxj6mb.png" alt="Screenshot (170)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This DNS lookup is done for each unique hostname. So if the site you're requesting is using externally hosted fonts, or JavaScript libraries, or images, or videos or other services, this DNS lookup happens for each of those different services. Anytime there's a new domain name, a new DNS lookup have to take effect. This is the first major performance bottleneck. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rZYEIRWM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3hghlx511zhbazn2vlq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rZYEIRWM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3hghlx511zhbazn2vlq.png" alt="Screenshot (171)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To do away with some of this performance overhead, the domain name to IP address association will probably be cached at numerous different steps, your ISP will cached as information, it will also likely be cached in your router and on your computer. That way when you send a request to the same domain you requested before, instead of having to go through the whole DNS lookup again, we're just pulling a cache from somewhere closer to the computer, but that also means if the DNS has changed in the meantime, you'll get an incorrect address pointing and things won't work as expected.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fWAZOeuB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tltlow5w40tulns4p1kk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fWAZOeuB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tltlow5w40tulns4p1kk.png" alt="Screenshot (172)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the IP address is established, the browser and server now perform what's called a TCP handshake, where they exchange identity keys and other information to establish a temporary connection and working relationship. This is also where the type of connection is determined this is there's a regular HTTP connection or is it an encrypted HTTPS connection? If the latter, encryption keys are exchanged and if both the browser and the server support it, the transaction is updated from HTTP 1.1 to HTTP two, which provides substantial performance enhancements.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NtISzt9l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/osi7i9mutvo2m9whsbwn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NtISzt9l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/osi7i9mutvo2m9whsbwn.png" alt="Screenshot (173)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We now have a connection and everything is ready to go. At this point, the browser sends an HTTP GET request for the resource it's looking for. This initial GET request will be for whatever the default file on the server location is, typically index.html or index.php or index.js or something similar to that. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NAejy02n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6h8pwv8h7zdjtcf3r2yg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NAejy02n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6h8pwv8h7zdjtcf3r2yg.png" alt="Screenshot (174)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The time it takes for the browser to finally receive the first byte of the actual page it's looking for, is measured in time to first byte or TTFB. The first piece of data called the packet that the browser receives is always 14 kilobytes, then the packet size doubles with every new transfer. That means if you want something to happen right away, you need to cram it into those first 14 kilobytes.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bBTIAIpY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/odb7h2rwyx1jghfc2w2q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bBTIAIpY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/odb7h2rwyx1jghfc2w2q.png" alt="Screenshot (175)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The browser now gets a file an HTML document, and it starts reading it from top to bottom and then parsing that data. This means the HTML is turned into a DOM tree, the CSS is turned into a CSSOM tree and object model for the CSS of the page, which makes it possible for the browser to render the CSS for JavaScript to interact with it. And as the document is parsed, the browser also loads in any external assets as they are encountered. That means anytime it encounters a new CSS file, or reference to anything else, it'll send a new request, the server responds by sending the request back, then it gets placed into the system, and the browser starts rendering that as well. &lt;/p&gt;

&lt;p&gt;In the case of JavaScript, though, the browser stops everything else and waits for the file to be fully downloaded. Why? Because there's a good chance of JavaScript wants to make changes to either the DOM or the CSSOM or both. This is what's known as render blocking, whatever rendering was happening, stops and is literally blocked for as long as the browser is waiting for the JavaScript to be fully loaded and then fully executed. Once all of this parsing is done, the rendering can begin in earnest and here the browser combines the DOM and CSSOM to style, layout, paint and composite the document in the viewport. &lt;/p&gt;

&lt;p&gt;The metric time to first Contentful paint refers to how long it takes for all of this to happen. What's important for our purposes is to remember what's actually happening, that way we can identify bottlenecks and add performance enhancements to get past them as quickly as possible.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A2MOg_ce--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5h8l0bwdqztg0g6ibcei.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A2MOg_ce--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5h8l0bwdqztg0g6ibcei.png" alt="Screenshot (176)"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#optimizing-the-crp"&gt;
  &lt;/a&gt;
  Optimizing the CRP
&lt;/h2&gt;

&lt;p&gt;When you interact with content on the web today, you're using one of two different versions of the HTTP protocol, either the old HTTP/1.1 or the more modern HTTP/2. Which protocol version is in use has a significant impact on the performance of the site. In HTTP/1.1, all files requested by the browser are loaded synchronously, one after the other. So a typical HTML page with two style sheets, a couple of images, and some JavaScript would require the browser to first load the HTML document, then the CSS files, then the JavaScript files, and finally the image files one after the other. This is slow, inefficient, and a recipe for terrible performance.&lt;/p&gt;

&lt;p&gt;To work around this obvious issue, browsers cheat by opening up to six parallel connections to the server to pull down data. However, this creates what's known as head of line blocking, where the first file, the HTML file, holds back the rest of the files from downloading. It also puts enormous strain on the internet connection and the infrastructure, both the browser and the server, because you're now operating with six connections instead of one single connection. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---AkvJwhH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m6hsxf2tn03kp1ie86yk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---AkvJwhH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m6hsxf2tn03kp1ie86yk.png" alt="Screenshot (182)"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;In HTTP/2, we have what's known as multiplexing. The browser can download many separate files at the same time over one connection, and each download is independent of the others. That means with HTTP/2, the browser can start downloading a new asset as soon as it's encountered, and the whole process happens significantly faster.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YuM_Bcdr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shimn8xvwxqtqhfecccn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YuM_Bcdr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shimn8xvwxqtqhfecccn.png" alt="Screenshot (177)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, for HTTP to work, a few key conditions need to be met. Number one, the server must support HTTP/2. Number two, the browser must also support HTTP/2. And number three, the connection must be encrypted over HTTPS. If any of these conditions are not met, the connection automatically falls back to HTTP/1.1. So bottom line, for instant performance improvements with minimal work, get an SSL certificate for your domain and ensure your server supports HTTP/2. &lt;/p&gt;

&lt;p&gt;Identifying which bottlenecks cause performance issues for you is the key to performance optimization.The server itself can contribute to poor performance.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6VmhW2cr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fl8c6awbw7omopht157c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6VmhW2cr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fl8c6awbw7omopht157c.png" alt="Screenshot (178)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next bottleneck is the connection made between the browser and the servers hosting the files necessary to render the page. For each of these connections, that whole DNS and TCP handshake loop needs to take place, which slows down the whole process.&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8z0pDoGB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gz6u2oj8o29vyhlmguvl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8z0pDoGB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gz6u2oj8o29vyhlmguvl.png" alt="Screenshot (186)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How many files are downloaded and in what order those files are downloaded has an impact on performance.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zk4NvG2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzd5bc3pfe73ehmbu0yf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zk4NvG2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzd5bc3pfe73ehmbu0yf.png" alt="Screenshot (185)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Caching(or storing of assets) is also one of the methods for performance optimization. This can be done on the server, on the CDN or in the browser.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Caching on the Server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you're running a site relying on server-side rendering, meaning each page or view is generated on the fly by the server when it is requested, caching may provide a huge performance boost. By enabling caching, the server no longer has to render the page every time the page is requested. &lt;br&gt;
Instead when the page is rendered, a snapshot of that page is created and then stored in the server cache. The next time a visitor then comes to the site, there'll be handed at this stored cached snapshot instead of a freshly rendered page. This is why static site generators have become so popular: they produce pre-rendered cacheable static pages and bypass the entire CMS service side rendering problem. The challenge with this type of caching is in dynamic features they have. Like every time a new comment is added, the cache needs to be cleared, and then the page has to be regenerated. Even so, caching should be enabled for all sites relying on server-side rendering because performance benefits are so significant.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Caching on the CDN&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CDNs are effectively external caching services for sites. CDNs can also do edge computing. Here, the CDN renders the page when requested and then caches it itself. This edge approach works well with modern static site generators like Gatsby and all JavaScript based site generators and frameworks because they serve up static assets by default, and are built to work in this modern web architecture. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Caching in the browser&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are two main things we can do here. One, store existing assets. So if the visitor returns to the site it already has all the information cached in the browser and two, push files to the browser early so by the time the browser requests the file, the files that are already sitting in the cache. All browsers do some level of caching automatically and also we can then instruct the browser on exactly how we want to handle caching of our assets. For assets that are unlikely to change such as main style sheets, JavaScript, and other images, long caches makes sense. For assets that are likely to change over time, short cache durations, or no cashing at all may make more sense.&lt;/p&gt;

&lt;p&gt;To ensure new and updated assets always make it to the visitor. We can use cache busting strategies like appending automatic hashes to file names or we can rely on the server itself to document the file name on file date for each file, and then do the caching automatically. You can also split up CSS and JavaScript files into smaller modules and when you update something in CSS or JavaScript, instead of having to recache an entire style sheet for an entire site, you're just recaching the module that has that update.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#prpl-and-performance-budget"&gt;
  &lt;/a&gt;
  PRPL and Performance Budget
&lt;/h2&gt;

&lt;p&gt;To achieve the best possible performance for your website or application always keep the &lt;strong&gt;PRPL&lt;/strong&gt; pattern in mind. &lt;br&gt;
This is an acronym that stands for:&lt;br&gt;
&lt;strong&gt;Push or preload&lt;/strong&gt; important resources to the browser using server push for the initial load and service workers in the next round, the application will run faster.&lt;br&gt;
&lt;strong&gt;Render&lt;/strong&gt; the initial route as soon as possible by serving the browser with critical CSS and JavaScript, the perceived performance of the application will be improved. &lt;br&gt;
&lt;strong&gt;Pre-cache&lt;/strong&gt; remaining assets so they are available when the browser needs them.&lt;br&gt;
&lt;strong&gt;Lazy load&lt;/strong&gt; all non-critical assets so they only load when they are actually needed, such that we reduce the time to initial load and save the visitor from wasting their bandwidth on assets they will never use. &lt;/p&gt;

&lt;p&gt;The number one metric that determines the performance of your site or app is its weight. &lt;br&gt;
&lt;strong&gt;Performance budget&lt;/strong&gt; gives you a metric to measure every new feature against and a tool to use when hard decisions need to be made. A performance budget may include limits on the total page weight, total image weight, number of HTTP requests, maximum number of fonts or images or external assets, et cetera.&lt;br&gt;
We now have tools that we can integrate into our build processes like Webpack's performance options, which you can get directly inside Webpack and Lighthouse's light wallet, which gives you the ability to test your builds against the performance budget at any time to get flags anytime your images are too big or your JavaScript is too big or your CSS is too big or anything else.&lt;/p&gt;

&lt;p&gt;Some best practice metrics for Performance budget are:   &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make sure that your site meets a speed index under three seconds. &lt;/li&gt;
&lt;li&gt;Time to interactive is under five seconds.&lt;/li&gt;
&lt;li&gt;The largest contentful paint is under one second&lt;/li&gt;
&lt;li&gt;The max potential first input delay is under 130 microseconds.&lt;/li&gt;
&lt;li&gt;The maximum size of the Gzipped JavaScript bundle is under 170kb.&lt;/li&gt;
&lt;li&gt;The total bundle size is under 250kb and that all of this happens on a low powered feature phone on 3G.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now these performance budget metrics are severe and really difficult to hit. They're also the metrics being used by tools like Lighthouse to test for performance.&lt;/p&gt;

&lt;p&gt;So the question here comes how to create a realistic Performance Budget?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build seperate performance budgets on slow networks and laptop/desktop devices on fast networks.&lt;/li&gt;
&lt;li&gt;Do performance audit.&lt;/li&gt;
&lt;li&gt;Set resonable goals based on audit.&lt;/li&gt;
&lt;li&gt;Test production version against perfomance budget.&lt;/li&gt;
&lt;li&gt;Do a competitor performance audit: make your performance goal better than your competitor.&lt;/li&gt;
&lt;li&gt;Test all work against Performance budget though Performance budget are unique to each project and will change overtime.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>performance</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>optimization</category>
    </item>
    <item>
      <title>📖 Use Kedro Catalog Create to boost your pipeline development productivity.</title>
      <author>Waylon Walker</author>
      <pubDate>Mon, 02 Aug 2021 13:31:10 +0000</pubDate>
      <link>https://dev.to/waylonwalker/use-kedro-catalog-create-to-boost-your-pipeline-development-productivity-3d3f</link>
      <guid>https://dev.to/waylonwalker/use-kedro-catalog-create-to-boost-your-pipeline-development-productivity-3d3f</guid>
      <description>&lt;p&gt;I use &lt;code&gt;kedro catalog create&lt;/code&gt; to boost my productivity by automatically generating yaml catalog entries for me.  It will create new yaml files for each pipeline, fill in missiing catalog entries, and respect already existing&lt;br&gt;
catalog entries.  It will reformat the file, and sort it based on catalog key.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/waylonwalker" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Ukb2PhF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Izxe95PY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/271838/95e313ca-39fc-4ee6-bf57-ad52b4dcf0d2.png" alt="waylonwalker"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/waylonwalker/what-is-kedro-lob" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;🤷‍♀️ What is Kedro (The Parts)&lt;/h2&gt;
      &lt;h3&gt;Waylon Walker ・ Feb 24 '20 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#data&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#dataengineering&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#kedro&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#datascience&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;👆 Unsure what kedro is?  Check out this post.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#running-kedro-catalog-create"&gt;
  &lt;/a&gt;
  Running Kedro Catalog Create
&lt;/h2&gt;

&lt;p&gt;The command to ensure there are catalog entries for every dataset in the passed in pipeline.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kedro catalog create &lt;span class="nt"&gt;--pipeline&lt;/span&gt; history_nodes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Create's new yaml file, if needed&lt;/li&gt;
&lt;li&gt;Fills in new dataset entries with the default dataset&lt;/li&gt;
&lt;li&gt;Keeps existing datasets untouched&lt;/li&gt;
&lt;li&gt;it will reformat your yaml file a bit

&lt;ul&gt;
&lt;li&gt;default sorting will be applied&lt;/li&gt;
&lt;li&gt;empty newlines will be removed&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#confroot"&gt;
  &lt;/a&gt;
  CONF_ROOT
&lt;/h2&gt;

&lt;p&gt;Kedro will respect your &lt;code&gt;CONF_ROOT&lt;/code&gt; settings when it creates a new catalog file, or looks for existing catalog files.  You can change the location of your configuration files by editing your &lt;code&gt;CONF_ROOT&lt;/code&gt; variable in your projects.  &lt;/p&gt;

&lt;p&gt;&lt;code&gt;settings.py&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# settings.py
# default settings
&lt;/span&gt;&lt;span class="n"&gt;CONF_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"conf"&lt;/span&gt;

&lt;span class="c1"&gt;# I like to package my configuration
&lt;/span&gt;&lt;span class="n"&gt;CONF_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s"&gt;"conf"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;I prefer to keep my configuration packaged inside of my project.  This is partly due to how my team operates and deploys pipelines.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#file-location"&gt;
  &lt;/a&gt;
  File Location
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;kedro catalog create&lt;/code&gt; command will look for a &lt;code&gt;yaml&lt;/code&gt; file based on the name of the pipeline (&lt;code&gt;CONF_ROOT/catalog/&amp;lt;pipeline-name&amp;gt;.yml&lt;/code&gt;).  If it does not&lt;br&gt;
find one it will create one and make entries for each dataset in the pipeline. It will not look in all of your existing catalog files for entries, only the one in the exact file for your pipeline.  If you are going to use this command&lt;br&gt;
its important that you follow this pattern or copy what it generates into your own catalog file of choice.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;⚠️ It will not look in all of your existing catalog files for entries, only the one in the exact file for your pipeline.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#memorydatasets"&gt;
  &lt;/a&gt;
  MemoryDataSet's
&lt;/h2&gt;

&lt;p&gt;When you run &lt;code&gt;kedro catalog create&lt;/code&gt; you get &lt;code&gt;MemoryDataSet&lt;/code&gt;, that's it.  As of &lt;code&gt;0.17.4&lt;/code&gt; its hard coded into the library and not configurable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;range12&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MemoryDataSet&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#your-free-to-use-what-you-want-though"&gt;
  &lt;/a&gt;
  Your free to use what you want though
&lt;/h2&gt;

&lt;p&gt;Let's switch this dataset over to a &lt;code&gt;pandas.CSVDataSet&lt;/code&gt; so that the file gets stored and we can pick up  and read the file without re-running the whole pipeline.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;range12&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pandas.CSVDataSet&lt;/span&gt;
  &lt;span class="na"&gt;filepath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;data/range12.csv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#continue-adding-nodes"&gt;
  &lt;/a&gt;
  Continue adding nodes
&lt;/h2&gt;

&lt;p&gt;As we work we will keep adding nodes to our kedro pipeline, in this case we added another node that created a dataset called &lt;code&gt;range13&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kedro catalog create &lt;span class="nt"&gt;--pipeline&lt;/span&gt; history_nodes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After telling kedro to create new catalog entries for us we will see that it left our &lt;code&gt;range12&lt;/code&gt; entry alone and created &lt;code&gt;range13&lt;/code&gt; for us.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;range12&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pandas.CSVDataSet&lt;/span&gt;
  &lt;span class="na"&gt;filepath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;data/range12.csv&lt;/span&gt;
&lt;span class="na"&gt;range13&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MemoryDataSet&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#formatting-is-not-worthwhile"&gt;
  &lt;/a&gt;
  Formatting is not worthwhile
&lt;/h2&gt;

&lt;p&gt;If we decide this is too cramped for us we could add some space between datasets.  The next time we run &lt;code&gt;kedro catalog create&lt;/code&gt; empty lines will be&lt;br&gt;
removed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;range12&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pandas.CSVDataSet&lt;/span&gt;

&lt;span class="na"&gt;range13&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MemoryDataSet&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#continuing-to-work"&gt;
  &lt;/a&gt;
  Continuing to work
&lt;/h2&gt;

&lt;p&gt;If we coninue adding new nodes, and tell kedro to create catalog entries again, all of our effort given to formatting will be lost.  I wouldn't worry about it unless you have an autoformatter that you can run on your yaml files.  The productivity gains in an semi-automated catalog are worth it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;range12&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pandas.CSVDataSet&lt;/span&gt;
  &lt;span class="na"&gt;filepath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;data/range12.csv&lt;/span&gt;
&lt;span class="na"&gt;range121&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MemoryDataSet&lt;/span&gt;
&lt;span class="na"&gt;range13&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MemoryDataSet&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#sorting-order"&gt;
  &lt;/a&gt;
  Sorting Order
&lt;/h2&gt;

&lt;p&gt;Notice the sorting order in the last entry, &lt;code&gt;range121&lt;/code&gt; comes before &lt;code&gt;range13&lt;/code&gt;. This is all based on how pythons &lt;code&gt;yaml.safe_dump&lt;/code&gt; works, kedro has set the &lt;code&gt;default_flow_style&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt;.  You can see where they write your file in the source code currently &lt;a href="https://github.com/quantumblacklabs/kedro/blob/master/kedro/framework/cli/catalog.py#L202"&gt;here&lt;/a&gt; &lt;/p&gt;

</description>
      <category>kedro</category>
      <category>python</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Encrypting And Decrypting PDF Files Using Python...</title>
      <author>Naftal Rainer</author>
      <pubDate>Mon, 02 Aug 2021 13:30:55 +0000</pubDate>
      <link>https://dev.to/seniorcitizen/encrypting-and-decrypting-pdf-files-using-python-24ii</link>
      <guid>https://dev.to/seniorcitizen/encrypting-and-decrypting-pdf-files-using-python-24ii</guid>
      <description>&lt;p&gt;Portable Document Format (PDF) is one of the most widely used file formats by online accessories.&lt;br&gt;
Most of the documents e.g. eBooks, scanned documents e.t.c uses this pdf format for storage and sharing purposes.&lt;/p&gt;

&lt;p&gt;For the purpose of sharing in various platforms and media, a document is exposed to so many threats such as information leakage and access by unauthorized individuals. It is therefore necessary for one to encrypt his/her documents to prevent such avoidable occurrences and exposure.&lt;/p&gt;

&lt;p&gt;Python being a resourceful programming language offers a very awesome module known as &lt;code&gt;PyPDF2&lt;/code&gt; to encrypt and decrypt pdf files hence hence enhancing security of contained information.&lt;/p&gt;

&lt;p&gt;The PyPDF2 library is capable of:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Extracting document information e.g. title, page number e.t.c&lt;/li&gt;
&lt;li&gt;Splitting and merging documents.&lt;/li&gt;
&lt;li&gt;Cropping Pages.&lt;/li&gt;
&lt;li&gt;Encryption and decryption.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;PyPDF2&lt;/code&gt; is not an in-built library therefore it needs to be installed before use by:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip3 install PyPDF2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The files used in the code implementations below are found &lt;a href="https://github.com/Naftal-Rainer/Automation/tree/main/Encrypt_Decrypt_pdf"&gt;here&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Encrypting a PDF file&lt;/strong&gt;&lt;br&gt;
File encryption entails addition of a password to a document thereby allowing access to only authorized people.&lt;/p&gt;

&lt;p&gt;To do this, we'll follow the following steps:&lt;br&gt;
Step 1: Open the pdf using the reader object.&lt;br&gt;
Step 2: Create a copy of the original file by iterating through &lt;br&gt;
         every page and adding it to the new pdf file.&lt;br&gt;
Step 3: Encrypt the new pdf file.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;The Code Implementation&lt;/u&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Import the required module and sub-modules
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyPDF2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PdfFileWriter&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyPDF2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PdfFileReader&lt;/span&gt;

&lt;span class="c1"&gt;# Create a PdfFileWriter object
&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PdfFileWriter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Open the pdf file to encrypt
&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PdfFileReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Magazine.pdf'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Retrieve the number of pages to iterate in the original document
&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numPages&lt;/span&gt;

&lt;span class="c1"&gt;# Iterates through every page and adds it to the new file (a copy of the original)
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;pages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Creates a variable password.
&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'pam&amp;amp;Lab890'&lt;/span&gt;

&lt;span class="c1"&gt;# Encrypt the file using the created password 
&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Open a new file 'Magazines.pdf' and write the encrypted pdf file
&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Magazines.pdf'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'wb'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This creates a  similar copy of the original file (may have a different name as specified) that requires a set password to enable access.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Decrypting a PDF file&lt;/strong&gt;&lt;br&gt;
Decryption unlocks a document with a given password and converts it to a pdf file that does not require a password key to access.&lt;/p&gt;

&lt;p&gt;The file decryption steps are almost analogous to that of encryption.&lt;/p&gt;

&lt;p&gt;Step 1: Open the pdf using the reader object.&lt;br&gt;
Step 2: Encrypt the new pdf file.&lt;br&gt;
Step 3: Create a copy of the original file by iterating through&lt;br&gt;&lt;br&gt;
         every page and adding it to the new pdf file.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;The Code Implementation&lt;/u&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Import the required module and sub-modules
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyPDF2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PdfFileWriter&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyPDF2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PdfFileReader&lt;/span&gt;

&lt;span class="c1"&gt;# Create a PdfFileWriter object
&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PdfFileWriter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Open the password - secured pdf file to decrypt
&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PdfFileReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Magazines.pdf'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Creates a variable password.  
&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'pam&amp;amp;Lab890'&lt;/span&gt;

&lt;span class="c1"&gt;# First, check if the file is encrypted then proceed if encrypted
&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEncrypted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="c1"&gt;# Decrypt the file using the givenpassword 
&lt;/span&gt;    &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

     &lt;span class="c1"&gt;# Iterates through every page and adds it to the new file    
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;pages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Open a new file 'Magazines1.pdf' and write the encrypted 
&lt;/span&gt;        &lt;span class="n"&gt;pdf&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Magazines1.pdf'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'wb'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'File decrypted successfully'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'File is not encrypted'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you guys found this post helpful then save it so you can refer anytime 😊. For those who wanna learn more about PyPDF2 module and functionalities, just give a recommendation of the specific area (whether merging, splitting e.t.c) in the comment section below.&lt;br&gt;
Happy Coding Week! 👨‍💻 👩‍💻&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>7 Slack communities about AI/ML/DS to join in 2021</title>
      <author>ai-jobs.net</author>
      <pubDate>Mon, 02 Aug 2021 13:30:41 +0000</pubDate>
      <link>https://dev.to/ai_jobsnet/7-slack-communities-about-ai-ml-ds-to-join-in-2021-1idk</link>
      <guid>https://dev.to/ai_jobsnet/7-slack-communities-about-ai-ml-ds-to-join-in-2021-1idk</guid>
      <description>&lt;p&gt;If you want some diversion from reading papers and researching new trends in the Big Data space on your own, then joining communities is a nice short-cut and sometimes very productive alternative for you to learn or create new connections with some fellow professionals.&lt;/p&gt;

&lt;p&gt;Here are some additional reasons why it can be beneficial to join these online communities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Collaboration – It allows members to collaborate and to discuss with other professionals in areas in which they want to either clarify or to gather some insights that would help them expand their knowledge. A collaboration channel is available for members to post questions, answer questions or read insights that might be beneficial to them, i.e. articles or websites that can be used for learning or training, new concepts or approaches that are effective and efficient to use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Camaraderie – Sometimes working alone bothers and disrupts our mental health, so another good thing about these communities is that they can promote conversation with other members and foster new relationships with comrades or future co-workers whom we can relate to, not just solely regarding work topics but also our frustrations and other sentiments about our profession, clients, trends, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Feedback – These communities also provide a channel for learning members to get insights and feedbacks about their technological approaches, strategies and ideas. The insights or critique they get from other members can help them improve and enhance their work, projects or even startups.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Career opportunities – They can provide access to job opportunities most especially to those who are actively seeking for jobs in AI/ML or Big Data positions. They usually have a specific channel made for members to post vacancies that other members then can apply for directly.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are 7 free and open Slack communities you join right now:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#watson-developer-community"&gt;
  &lt;/a&gt;
  Watson developer community
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://wdc-community.slack.com/"&gt;https://wdc-community.slack.com/&lt;/a&gt; (&lt;a href="https://wdc-slack-inviter.mybluemix.net/"&gt;https://wdc-slack-inviter.mybluemix.net/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;This community gives you access to detailed developer resources and more to help you getting started with the IBM Watson toolchain. This includes documentation, SDKs on GitHub and other collaborative tools to help you with the integration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ai-researchers-and-enthusiasts"&gt;
  &lt;/a&gt;
  AI Researchers and Enthusiasts
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://ai-researchers.slack.com/"&gt;https://ai-researchers.slack.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This community is a medium for researchers and enthusiast to exchange theories and concepts about Artificial Intelligence. This community is also open for all levels of research.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dsnet-data-science-network"&gt;
  &lt;/a&gt;
  DSNet – Data Science Network
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dsnetorg.slack.com/"&gt;https://dsnetorg.slack.com/&lt;/a&gt; (&lt;a href="http://dsnet.org"&gt;http://dsnet.org&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Data Science Network is of the fastest-growing data science communities that is run and supported by Jovian.ml. This community provides a medium for you to exchange insights and learn from others through events and open channels as well as open resources.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#r-team-for-data-analysis"&gt;
  &lt;/a&gt;
  R- Team for Data Analysis
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://r-data-team.slack.com/"&gt;https://r-data-team.slack.com/&lt;/a&gt; (&lt;a href="https://slofile.com/slack/r-data-team"&gt;https://slofile.com/slack/r-data-team&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;R-Team is a supportive community that promotes both camaraderie and collaboration by learning and exploring the R language for data analysis and statistics. If you are interested in learning about R and its surrounding ecosystem of libraries this community might be perfect for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#papers-with-code"&gt;
  &lt;/a&gt;
  Papers with Code
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://paperswithcode.slack.com/"&gt;https://paperswithcode.slack.com/&lt;/a&gt; (&lt;a href="https://paperswithcode.com/"&gt;https://paperswithcode.com/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Papers with Code from the name itself provides an open resource of Machine Learning papers, code snippets, and evaluations for scholars, scientists or data enthusiast. This is a great community especially for those who are looking for novel research in this area to learn and adapt from for their own studies and/or research projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-developers"&gt;
  &lt;/a&gt;
  Python Developers
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://pythondev.slack.com/"&gt;https://pythondev.slack.com/&lt;/a&gt; (&lt;a href="https://pythondevelopers.herokuapp.com"&gt;https://pythondevelopers.herokuapp.com&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;A community of python developers that collaborate and share insights about python. This is also a good community that could help you if ever you have issues on your py scripts or if you want to know more about python.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#datatalksclub"&gt;
  &lt;/a&gt;
  DataTalks.Club
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://datatalks-club.slack.com/"&gt;https://datatalks-club.slack.com/&lt;/a&gt; (&lt;a href="https://datatalks.club/"&gt;https://datatalks.club/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;DataTalks.Club is an online community that provides a medium for data enthusiast that would want to collaborate and learn more about applied data science, machine learning, data engineering and many more. If you are interested in these topics, then this community is perfect for you. You can also discuss career opportunities and join weekly events.&lt;br&gt;
If you want more&lt;/p&gt;

&lt;p&gt;If the above list isn’t enough for you and you want to join a few more (including smaller and non-free) or slightly different communities, visit Slofile &lt;a href="https://slofile.com/"&gt;https://slofile.com/&lt;/a&gt; to search for more.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post was originally published under &lt;a href="https://insights.ai-jobs.net/7-slack-communities-about-ai-ml-ds-to-join-in-2021/"&gt;https://insights.ai-jobs.net/7-slack-communities-about-ai-ml-ds-to-join-in-2021/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>datascience</category>
      <category>career</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How we built a SaaS with React and AWS</title>
      <author>Luca Restagno</author>
      <pubDate>Mon, 02 Aug 2021 13:24:12 +0000</pubDate>
      <link>https://dev.to/ikoichi/how-we-built-a-saas-with-react-and-aws-leo</link>
      <guid>https://dev.to/ikoichi/how-we-built-a-saas-with-react-and-aws-leo</guid>
      <description>&lt;p&gt;I started &lt;a href="https://iterspace.com"&gt;iterspace&lt;/a&gt; with &lt;a href="https://marco-zani.webflow.io/"&gt;Marco Zani&lt;/a&gt; in the summer of 2018. The plan was to build a tool that would let people share clear feedback with the right context. A bit like Loom, but you get advanced commenting instruments and threads.&lt;/p&gt;

&lt;p&gt;Visual feedback is not an entirely novel idea, of course, but the existing tools were all screenshot-based. So we set out to build a video-based product.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#architecture"&gt;
  &lt;/a&gt;
  Architecture
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---7AXjOM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7ooc5w23by5h50xmhl6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---7AXjOM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7ooc5w23by5h50xmhl6.png" alt="iterspace Cloud Architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;iterspace is a so-called single-page web app (SPA). Most of the logic is implemented in the client-side that runs in the browser and syncs updates to the backend view HTTP requests. The cloud notifies the app about updates made by other users via WebSocket.&lt;/p&gt;

&lt;p&gt;All of the application's data are stored in a DynamoDB database in the Amazon Web Services (AWS) cloud. This gives us a lot of room to scale and keep the price contained.&lt;/p&gt;

&lt;p&gt;All the services and data stores run in Amazon Web Services. We have AWS Amplify to host the client application on the public Internet and put it on edge through the CDN. The CDN routes the requests to either AWS S3 for static resources, such as images or videos.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-and-nodejs"&gt;
  &lt;/a&gt;
  JavaScript and Node.js
&lt;/h2&gt;

&lt;p&gt;One of the most far-reaching tech decisions a startup needs to make is what programming language(s) to use. &lt;/p&gt;

&lt;p&gt;For iterspace, we chose JavaScript and its server-side engine Node.js. Having one language across the whole stack is a significant speed boost, as it reduces the mental overhead of switching between parts of the stack.&lt;/p&gt;

&lt;p&gt;The criticism that JavaScript gets is the lack of static typing. But by using the JavaScript superset TypeScript, we were able to add typings on both the front end and the back end.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frontend"&gt;
  &lt;/a&gt;
  Frontend
&lt;/h2&gt;

&lt;p&gt;For iterspace, we picked React as the UI library of reference.&lt;/p&gt;

&lt;p&gt;React is a small library focused on doing one thing — rendering UI. It does not dictate how to manage the state in a larger application. Therefore we picked Redux for the application state management and Redux Saga for the side effects handling.&lt;/p&gt;

&lt;p&gt;We came from working experiences where we built a design system with a brand identity injected into it.&lt;/p&gt;

&lt;p&gt;For a startup, speed is critical. Therefore we evaluated several component libraries. The prerequisites were React, styled-component, and components written with the functional approach. We picked Zendesk Garden from Zendesk as the base React components library, and I must say that the decision was worth it.&lt;/p&gt;

&lt;p&gt;For startups, development speed is critical. So we started using Storybook to build the components in isolation. Basically, when you need to create a new component, you make a story first. A story is a page that renders one or more components.&lt;br&gt;
As you write the code in the new component file, you see it updated almost immediately in the browser. &lt;/p&gt;

&lt;p&gt;It helps you a lot in thinking about Presentational and Container Components.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backend"&gt;
  &lt;/a&gt;
  Backend
&lt;/h2&gt;

&lt;p&gt;The backend service for iterspace is a lightweight layer between the client and the data store. It is a GraphQL API feed by Lambda Functions (Serverless).&lt;/p&gt;

&lt;p&gt;There is no CPU-intensive processing. Therefore, there was no need for always running servers.&lt;/p&gt;

&lt;p&gt;We used Lerna to manage a monorepo containing all the Lambda Functions code in different packages. In addition, we created common packages to share the core model between the other Lambda Functions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h2&gt;

&lt;p&gt;iterspace stores and serves screen recordings, and therefore we had to understand how to distribute video reliably.&lt;br&gt;
Most of the recordings come from the browser (WebM with the H264 video codec), but a video can be uploaded too, and therefore we had to support multiple formats (Mov, Mp4).&lt;/p&gt;

&lt;p&gt;We use AWS Elemental MediaConvert to encode the video to WebM and Mp4. We had to encode both formats because the WebM playback works on most browsers (Chrome, Edge, Firefox) but not in Safari.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;Building a product is a highly challenging activity. It requires many decisions to be taken rapidly. Nevertheless, we try to deliver value to the customers as soon as possible, even with rough features.&lt;br&gt;
Then we gather feedback, adjust the feature based on that, and iterate the process.&lt;br&gt;
Moreover, we use iterspace while working on iterspace! And we are the first customers of our own product.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed 🙌&lt;/p&gt;

&lt;p&gt;If you are interested in building a SaaS and web development, you might consider subscribing to my &lt;a href="https://www.lucarestagno.com/newsletter?utm_source=dev.to"&gt;newsletter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>cloud</category>
      <category>aws</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Introduction to BASH Scripting: Part-1</title>
      <author>Meet Gor</author>
      <pubDate>Mon, 02 Aug 2021 13:06:02 +0000</pubDate>
      <link>https://dev.to/mr_destructive/introduction-to-shell-scripting-part-1-4akc</link>
      <guid>https://dev.to/mr_destructive/introduction-to-shell-scripting-part-1-4akc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;If you are new to BASH and Linux, don't you worry the community is the driving force here. If someone's stuck somewhere, the platforms, forums, and blogs are ready to help anyone there. BASH is a short term of Bourne-Again Shell, it is a shell interface that has much more capabilities and functions than the simple Bourne shell(sh). It has some quite remarkable features and it is even capable of calling itself a programming language in some sense.&lt;/p&gt;

&lt;p&gt;Without wasting any time on the introduction, let's keep the article rolling.&lt;br&gt;
In this part, I'll try to cover the basics of the following topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Structure of Bash Script.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Variables.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;If-else Conditional Statements.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Loops.&lt;/strong&gt;

&lt;ol&gt;
&lt;li&gt; For loop&lt;/li&gt;
&lt;li&gt;While loop&lt;/li&gt;
&lt;li&gt;Until loop&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Functions.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Firstly, you should have some basic understanding of Linux commands such as listing directories, creating, making editing files, and some tiny little tasks. Bash scripting is the way to do these in a programmatic way, that's why it is called scripting.  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#understanding-a-simple-shell-script"&gt;
  &lt;/a&gt;
  Understanding a Simple Shell script
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash
echo "Hello World"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;That is such a simple elegant script, isn't it? Well, the first command is called the she-bang which tells the Shell to execute or run the file as a Bash script or from a Bash interpreter. The next command is a simple echo which is used for printing text to the screen/console. She-bang is the path to the Bash interpreter. So, it basically redirects the shell to execute the file/script in a Bash environment. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nLur3_kI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624287681383/MP2nc6hGR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nLur3_kI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624287681383/MP2nc6hGR.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To execute the script we have many ways, either use Bash, source, or execute it as a shell-script by making it executable from the path. In this case, I used Bash to run the script, we'll see others as well.&lt;/p&gt;

&lt;p&gt;The core structure of the Bash script is quite simple, we can make the format of the script according to the paradigm used and objective of the script. For basic scripts which has utility functions we normally declare those in the beginning after the she-bang header. After the function, we can have the core main part of the script. It was enough and important here to understand the purpose of the she-bang header and how to execute a shell script.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h2&gt;

&lt;p&gt;Definitely, we need variables to store some value which we are gonna use again and again. Bash has variables but without any specific data types, you can store anything in anything. It becomes a mess in comparing to variables and their values :( Though it might be a feature, not a bug sometimes.&lt;/p&gt;

&lt;p&gt;Let's create some variables in a Bash script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash
x=2
echo $x
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To create a variable, we simply write the variable name and assign it to whatever we want. &lt;strong&gt;DO NOT leave spaces before and after assignment operator(=), it won't work&lt;/strong&gt;. To access the value of the variable we use the $ symbol. That is about the variables, If you want to perform some arithmetic on variables, it is covered in the further sections. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--he6EWUvZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624287785396/GvIdwi0QP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--he6EWUvZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624287785396/GvIdwi0QP.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From the above script, we outputted the value of x to the console. We also executed the script file using the source command. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ifelse-conditional-statements"&gt;
  &lt;/a&gt;
  If-else Conditional statements
&lt;/h2&gt;

&lt;p&gt;If-else conditional statements are quite the fundamentals of any logical operations performed in the programming world, so Bash has them implemented pretty much the same way as other shells do.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash
a=9
if [ $a -lt 10 ];then 
echo "Less than 10"
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--maSQgluP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624290119634/JT6QuRTZe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--maSQgluP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624290119634/JT6QuRTZe.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We use "If", followed by "then" to execute the mentioned commands after that until it hits "fi" or else statement, we'll see else and if-else block after this. That is a basic If statement, here if we are comparing numbers we use -lt for less than, -gt for greater than, -eq for equals to, -ne for not equals to, -le for less than equals to, and -ge for greater than equals to. For string comparison, we use symbols such as &amp;lt; for less than, &amp;gt; for greater than, = for equals to, != for not equals to.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash
a="ERROR"
if [ $a = "ERROR" ]; then
    echo "FAILURE"
else 
    echo "SUCCESS"
fi  

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HP4-8Ee9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624289450947/mrd8lawZD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HP4-8Ee9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624289450947/mrd8lawZD.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above example, we have used the if-else block, comparing a string with other and using the = operator to compare. It's quite interesting that Bash has string comparison built-in, unlike C/C++ where we have to depend on external libraries. We have used chmod to make the script file executable to anyone using the system. And then we simply put in the path to the file to run it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

c=3
if [ $c -eq 0 ];then
    echo "Success"
elif [ $c -eq 1 ];then 
    echo "Failure"
else
    echo "Invalid Input"    
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nOXCmqy_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624290844242/8FQgLjIQT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nOXCmqy_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624290844242/8FQgLjIQT.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
From the above script, we used if-elif-else statements to evaluate different conditions. We hade use -eq to equate the value of the variable to the number we want to compare with. That was self-explanatory logic.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#loops"&gt;
  &lt;/a&gt;
  Loops
&lt;/h2&gt;

&lt;p&gt;We have 3 types of loop statements in Bash, they are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;For loop&lt;/li&gt;
&lt;li&gt;While loop&lt;/li&gt;
&lt;li&gt;Until loop&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#for-loops"&gt;
  &lt;/a&gt;
  For loops
&lt;/h3&gt;

&lt;p&gt;In for loop, we have the freedom to use in range-bound or C-like for loops. Let us take a look at both of them using examples.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

for i in {1..5} 
do  
    echo $i
done    
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dlc7HuT4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624292601491/Rbuyx_T6p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dlc7HuT4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624292601491/Rbuyx_T6p.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above loop was used as a range-based loop, which loops through 1 and 5 inclusive. We use {} to use it as the range. As "then" and "fi" in if conditions, we have "do" and "done" in loops. Between the do and done statements, we can type in the statements we want to loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

read -p "Enter the number : " n
for (( i=0;i&amp;lt;$n;i++ ));
do  
    echo $i
done    


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j5Y8iCS4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624293294293/jPM1so_As.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j5Y8iCS4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624293294293/jPM1so_As.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above for loop is a typical C-style for loop which takes 3 arguments, the initializing iterator, the condition, and the incrementor. We surround the arguments with double braces followed by a semi-colon. The rest of the syntax is identical to the previous for loop style.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#while-loops"&gt;
  &lt;/a&gt;
  While loops
&lt;/h3&gt;

&lt;p&gt;While loops are used quite commonly in Bash and the syntax is quite straightforward.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

read -p "Enter the number : " n
while [ $n -gt 0 ]
do  
    echo $n
    i=$((--n))
done    

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DqYce5bL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624295626909/qLh2y8RPe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DqYce5bL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624295626909/qLh2y8RPe.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above while loop has a condition for the number to be greater than zero. We take in the input from the user using the command read and store it in the variable n, the -p is an argument to prompt the user with text before the input. We use the decrement operator to decrement the iterator. The syntax is quite similar and easy to understand. As usual in loops, we have do and done to start and end the loop. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#until-loops"&gt;
  &lt;/a&gt;
  Until loops.
&lt;/h3&gt;

&lt;p&gt;Until loop is a while loop but with the opposite condition, we loop until a certain criterion is not matched.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

read -p "Enter the number : " n
until [ $n -eq 0 ]
do  
    echo $n
    n=$((--n))
done    

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M0esEYOJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624296796493/SF6-XOEVl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M0esEYOJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624296796493/SF6-XOEVl.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the loop, we iterate over and over again until n becomes 0. Until is simply to exit from the loop until a certain condition is met. The rest of the syntax is again the same as the other loop with do and done statements.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h2&gt;

&lt;p&gt;Functions are the part and parcel of any script, we don't use it necessarily, but they come in handy quite some times and serve the purpose absolutely well. We can customize what we want to return from the function depending on the needs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

function add(){
echo $(($1+$2))
}
add 3 6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CUqy7DKo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624348202842/j0t0LT06q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CUqy7DKo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624348202842/j0t0LT06q.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In Bash functions, we do not pass arguments inside brackets, we have to pass in parameters as space-separated values after the function name in the function call. This also means that we can pass any number of parameters to a function, but only we should handle them properly. Otherwise, there is no use in passing unlimited parameters to a function. This is really powerful but it needs to be used wisely to have its full potential. Also, it not mandatory to use the keyword "function" before the name, So you could also write just the name and the rest of it as it is.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

add(){
echo $(($1+$2))
}
add 3 6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The return statement in functions is also quite an important aspect in logical programs. But it is not like returning values from a function, it is like returning the exit status of a function scope, so it can return inappropriate behavior from the shell depending on the return value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

add(){
return $(($1+$2))
}
add 6 13
echo $?

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z8uc3m38--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624349678664/yDGL3U70C.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z8uc3m38--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624349678664/yDGL3U70C.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Here we return the addition of two numbers and we use the internal variable ? to access the exit status of the function. The ? is an internal variable in Bash, which holds the exit status of the last executed command. In this case, it was the function call and its return statement was stored in it.  As said, it can become quite buggy to exit the function scope with wired return statements, so to avoid those we can make use of global variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

add(){
n=$(($1+$2))
}
add 5 16
echo $n

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fuL1E62x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624349769088/VxnjgqETv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fuL1E62x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624349769088/VxnjgqETv.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
In the above program, we use n as a global variable to access out of the function scope. &lt;br&gt;
Function in Bash can also return multiple values at once but that can be buggy at times, so I don't recommend that.&lt;/p&gt;

&lt;p&gt;So, that is the basics of Bash functions covered. &lt;/p&gt;

&lt;p&gt;This is it from the Bash scripting guide Part-1, I'll cover more topics in the upcoming parts of the series. &lt;/p&gt;

</description>
      <category>bash</category>
      <category>shell</category>
      <category>linux</category>
      <category>terminal</category>
    </item>
    <item>
      <title>vsCode Emmet cheatsheet</title>
      <author>computer_geek77</author>
      <pubDate>Mon, 02 Aug 2021 12:54:09 +0000</pubDate>
      <link>https://dev.to/computergeek/vscode-emmet-cheatsheet-1mmf</link>
      <guid>https://dev.to/computergeek/vscode-emmet-cheatsheet-1mmf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#boilerplate"&gt;
  &lt;/a&gt;
  Boilerplate
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document /title&amp;gt;
/head&amp;gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#basic-elements"&gt;
  &lt;/a&gt;
  basic elements
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#1-section"&gt;
  &lt;/a&gt;
  1) section
&lt;/h4&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#2-example"&gt;
  &lt;/a&gt;
  2) .example
&lt;/h4&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"example"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#3-sectionintro"&gt;
  &lt;/a&gt;
  3) section#intro
&lt;/h4&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"intro"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#4-pgtlorem10"&gt;
  &lt;/a&gt;
  4) p&amp;gt;lorem10
&lt;/h4&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Lorem ipsum dolor sit amet
consectetur adipisicing elit. Neque,
facere? &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#5-sectionintrogtcontainer"&gt;
  &lt;/a&gt;
  5) section#intro&amp;gt;.container
&lt;/h4&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"intro"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#6-pyour-custom-text"&gt;
  &lt;/a&gt;
  6) p{your custom text}
&lt;/h4&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;your custom text &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#7-linkcss"&gt;
  &lt;/a&gt;
  7) link:css
&lt;/h4&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#8-scriptsrc"&gt;
  &lt;/a&gt;
  8) script:src
&lt;/h4&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#9-h3pp"&gt;
  &lt;/a&gt;
  9) h3+p+p
&lt;/h4&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#10-ulgtli3p3"&gt;
  &lt;/a&gt;
  10) ul&amp;gt;li*3^p*3
&lt;/h4&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#11-ulgtli4"&gt;
  &lt;/a&gt;
  11) ul&amp;gt;li*4
&lt;/h4&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#12-h3ulgtli3h3"&gt;
  &lt;/a&gt;
  12) h3+(ul&amp;gt;li*3)+h3
&lt;/h4&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#13-lilistitem3"&gt;
  &lt;/a&gt;
  13) li.list-item-$*3
&lt;/h4&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"list-item-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"list-item-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"list-item-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>JavaScript (Lexical Structure)</title>
      <author>Clean Code Studio</author>
      <pubDate>Mon, 02 Aug 2021 12:52:08 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/javascript-lexical-structure-3g32</link>
      <guid>https://dev.to/cleancodestudio/javascript-lexical-structure-3g32</guid>
      <description>&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;The Lexical Structure of a software language:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Specifies a set of basic rules defining how code should or could be written"&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As one of the world's most misunderstood programming language as well as a software language with some weird oddities, there are many questions that come up about what is best practice when it comes to writing JavaScript. In this blog we're going to dive into the &lt;strong&gt;Lexical structure&lt;/strong&gt; of JavaScript. Lexical Structure simply specifies a set of basic rules defining how code should be written in a given language.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#unicode"&gt;
  &lt;/a&gt;
  Unicode
&lt;/h3&gt;




&lt;p&gt;JavaScript is written in Unicode. What's this mean? Well, one of the cool, lesser used, and generally considered a poor or bad practice is that we can actually use emojis as variable names. We can use emojis as variable names because JavaScript is written in Unicode.  More importantly, you can write identifiers in any language, for example, Japanese or Chinese, with some rules.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#optional-semicolon"&gt;
  &lt;/a&gt;
  Optional Semicolon
&lt;/h3&gt;




&lt;p&gt;In JavaScript (and most other languages) the semicolon is used to separate one given statement from another. What's weird about JavaScript is that this semi-colon is optional. Personally, I opt out of using the semi-colon and just write my statements on two separate lines. Any two statements that are written on the same line will always need to utilize a semi-colon to separate them - but this in itself is considered bad practice. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#whitespaces-and-line-breaks"&gt;
  &lt;/a&gt;
  Whitespaces and Line Breaks
&lt;/h3&gt;




&lt;p&gt;In JavaScript, white space is &lt;strong&gt;NOT&lt;/strong&gt; considered as anything meaningful. Spaces and line breaks can be added as you see fit.&lt;/p&gt;

&lt;p&gt;For example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;can also be written as&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="nx"&gt;axios&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;or as&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;axios&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;JavaScript doesn't care about the white space. Personally, I'll go about the former statement using the following syntax.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
     &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In the real world, you'll definitely want to keep a well-defined style and adhere to that commonly used style. You can and in larger project should enforce this style using a linter or a styling tool like &lt;em&gt;Prettier&lt;/em&gt;.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#case-sensitive"&gt;
  &lt;/a&gt;
  Case Sensitive
&lt;/h3&gt;



&lt;p&gt;JavaScript is case sensitive. What's this mean for a software language? If you have two variables spelling the same word and one is capitalized while the other is not - then these are considered two different variables.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;helloWorld&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;example&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;HelloWorld&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;heyooo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;code&gt;HelloWorld&lt;/code&gt; and &lt;code&gt;helloWorld&lt;/code&gt; are two different variables because JS is case sensitive.&lt;/p&gt;

&lt;p&gt;Keywords, variables, function names, and other identifiers must always be typed with a consistent capitalization of letters to be or mean the same thing.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#comments"&gt;
  &lt;/a&gt;
  Comments
&lt;/h3&gt;



&lt;p&gt;Good old comments. In JavaScript we have two types of comments we can utilize or call upon to add notes that are functionally meaningful within our code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Single Line Comments&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// this is a single line comment&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Multiple Line Comments&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/*
  This is a multiple line
  comment that we can
  use to write a lot 
  of stuff when
  we need to.
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#literals-and-identifiers"&gt;
  &lt;/a&gt;
  Literals and Identifiers
&lt;/h3&gt;



&lt;p&gt;&lt;strong&gt;Literals&lt;/strong&gt; are defined as a value that is written within the source code. &lt;/p&gt;

&lt;p&gt;For example, a string, a number, a Boolean, an object literal, or an array literal are all literals.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="c1"&gt;// a number literal&lt;/span&gt;
&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;// a Boolean literal&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hey&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// a string literal&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// an array literal&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sarah&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// an object literal&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;An &lt;strong&gt;identifier&lt;/strong&gt; is simply a sequence of characters used to identify a variable, function, or an object. An &lt;strong&gt;identifier&lt;/strong&gt; can start with a letter, dollar sign ($), underscore (_), and may also contain digits. Using unicode, a letter can be considered any allowed char - thus we can also use an emoji. Another way to understand what an &lt;strong&gt;identifier&lt;/strong&gt; means is to simply ask yourself what allowed variables names can I use in this language.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;
&lt;span class="nx"&gt;name&lt;/span&gt;
&lt;span class="nx"&gt;NAME&lt;/span&gt;
&lt;span class="nx"&gt;_name&lt;/span&gt;
&lt;span class="nx"&gt;$name&lt;/span&gt;
&lt;span class="err"&gt;😄&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Are all allowed variable names - aka allowed identifiers within JavaScript. &lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#reserved-words"&gt;
  &lt;/a&gt;
  Reserved Words
&lt;/h3&gt;



&lt;p&gt;Most (if not every) software language has a list of &lt;strong&gt;reserved words&lt;/strong&gt;. These &lt;strong&gt;reserved words&lt;/strong&gt; do special things that allow the software language to work properly. In JavaScript we have a list of &lt;strong&gt;Reserved Words&lt;/strong&gt; that are not allowed to be used as identifiers due to the language saving these words to implement special functionality. &lt;/p&gt;

&lt;p&gt;Some &lt;strong&gt;Reserved Words&lt;/strong&gt; in JavaScript include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;abstract&lt;/li&gt;
&lt;li&gt;arguments&lt;/li&gt;
&lt;li&gt;boolean&lt;/li&gt;
&lt;li&gt;break&lt;/li&gt;
&lt;li&gt;byte&lt;/li&gt;
&lt;li&gt;case&lt;/li&gt;
&lt;li&gt;catch&lt;/li&gt;
&lt;li&gt;char&lt;/li&gt;
&lt;li&gt;class&lt;/li&gt;
&lt;li&gt;const&lt;/li&gt;
&lt;li&gt;continue&lt;/li&gt;
&lt;li&gt;debugger&lt;/li&gt;
&lt;li&gt;default&lt;/li&gt;
&lt;li&gt;delete&lt;/li&gt;
&lt;li&gt;do&lt;/li&gt;
&lt;li&gt;double&lt;/li&gt;
&lt;li&gt;else&lt;/li&gt;
&lt;li&gt;enum&lt;/li&gt;
&lt;li&gt;eval&lt;/li&gt;
&lt;li&gt;export&lt;/li&gt;
&lt;li&gt;float&lt;/li&gt;
&lt;li&gt;extends&lt;/li&gt;
&lt;li&gt;false&lt;/li&gt;
&lt;li&gt;function&lt;/li&gt;
&lt;li&gt;final&lt;/li&gt;
&lt;li&gt;goto&lt;/li&gt;
&lt;li&gt;if&lt;/li&gt;
&lt;li&gt;finally&lt;/li&gt;
&lt;li&gt;float&lt;/li&gt;
&lt;li&gt;implements&lt;/li&gt;
&lt;li&gt;yield&lt;/li&gt;
&lt;li&gt;import&lt;/li&gt;
&lt;li&gt;in &lt;/li&gt;
&lt;li&gt;instanceof&lt;/li&gt;
&lt;li&gt;int&lt;/li&gt;
&lt;li&gt;interface&lt;/li&gt;
&lt;li&gt;let&lt;/li&gt;
&lt;li&gt;package&lt;/li&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;lang&lt;/li&gt;
&lt;li&gt;native&lt;/li&gt;
&lt;li&gt;new&lt;/li&gt;
&lt;li&gt;null&lt;/li&gt;
&lt;li&gt;protected&lt;/li&gt;
&lt;li&gt;public&lt;/li&gt;
&lt;li&gt;return&lt;/li&gt;
&lt;li&gt;short&lt;/li&gt;
&lt;li&gt;static&lt;/li&gt;
&lt;li&gt;super&lt;/li&gt;
&lt;li&gt;switch&lt;/li&gt;
&lt;li&gt;synchronized&lt;/li&gt;
&lt;li&gt;this&lt;/li&gt;
&lt;li&gt;throw&lt;/li&gt;
&lt;li&gt;throws&lt;/li&gt;
&lt;li&gt;transient&lt;/li&gt;
&lt;li&gt;true&lt;/li&gt;
&lt;li&gt;try&lt;/li&gt;
&lt;li&gt;typeof&lt;/li&gt;
&lt;li&gt;var
-void&lt;/li&gt;
&lt;li&gt;volatile&lt;/li&gt;
&lt;li&gt;while&lt;/li&gt;
&lt;li&gt;with&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note, that not all reserved words do something within JavaScript currently. Many of these reserved words are simply marked as unusable by the language so that future versions of JavaScript where these reserved words add behavior to JavaScript won't cause legacy applications of JavaScript programs to break or need to be changed because they used the keywords that now do something as identifiers before these keywords were able to do anything within JS.&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>coding</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Don't make these mistakes when applying for a job</title>
      <author>Alvaro Montoro</author>
      <pubDate>Mon, 02 Aug 2021 12:38:11 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/don-t-make-these-mistakes-when-applying-for-a-job-39oc</link>
      <guid>https://dev.to/alvaromontoro/don-t-make-these-mistakes-when-applying-for-a-job-39oc</guid>
      <description>&lt;p&gt;We've had a couple of openings on our team, and I have been reviewing resumes and running pre-screenings and interviews lately. It's one of the first times that I am fully on this side of the interviewing process, and so far, it has been an insightful and rewarding experience.&lt;/p&gt;

&lt;p&gt;I found a series of "common" mistakes that different candidates made during the hiring process. Some were unfortunate human errors, others were attempts to cheat the system... and they raised eyebrows.&lt;/p&gt;

&lt;p&gt;Right now, it's a great job market for developers, and you probably won't have much trouble finding a new position. Still, try to avoid these mistakes when applying for a job:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Don't forget to attach your resume&lt;/li&gt;
&lt;li&gt;Don't send the wrong resume&lt;/li&gt;
&lt;li&gt;Don't have everyone else's resume&lt;/li&gt;
&lt;li&gt;Don't link obsolete/unused social media&lt;/li&gt;
&lt;li&gt;Don't copy-paste your test answers&lt;/li&gt;
&lt;li&gt;Don't sell yourself short&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#1-dont-forget-to-attach-your-resume"&gt;
  &lt;/a&gt;
  1. Don't forget to attach your resume
&lt;/h2&gt;

&lt;p&gt;Sounds ridiculous and far-fetched? Not so much. &lt;strong&gt;Around 5% of the candidates did not attach their resumes to the application&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In some cases, it was not their fault: it was the system they used to apply. Job sites that claim to "submit your profile" may not integrate correctly and send the information, and without a file to review, the only thing we get is a name and/or email.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SoG0Pag6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjfoydbbhk4zkqmhkif9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SoG0Pag6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjfoydbbhk4zkqmhkif9.jpg" alt="Man looks desperately at computer"&gt;&lt;/a&gt;&lt;/p&gt;
No resume = No application (picture by &lt;a href="https://www.pexels.com/photo/man-in-white-shirt-using-macbook-pro-52608/"&gt;Tim Gouw&lt;/a&gt;)&lt;br&gt; 



&lt;p&gt;Initially, I would contact the candidates asking for their resumes... but eventually stopped. Of course, it's not the candidate's fault, but I couldn't be chasing them when I already had many other profiles to review.&lt;/p&gt;

&lt;p&gt;Did I lose great candidates because of that? Maybe. Could I lose great candidates with an attached resume by wasting time chasing other candidates without an attached resume? Probably. It's not fair for anyone.&lt;/p&gt;

&lt;p&gt;When you apply for a job, make sure that the system you use has your resume on file. If not, there's a chance we won't be getting anything at all.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-dont-send-the-wrong-resume"&gt;
  &lt;/a&gt;
  2. Don't send the wrong resume
&lt;/h2&gt;

&lt;p&gt;It is a bit confusing –and suspicious– when John Doe from Tennessee sends the resume of Michael Smith from Texas (names and locations invented).&lt;/p&gt;

&lt;p&gt;I am not talking about people submitting their resumes with nicknames or their "American names" (&lt;a href="https://www.huffpost.com/entry/jose-joe-job-discrimination_n_5753880"&gt;unfortunately, there's still discrimination and using an &lt;em&gt;easier&lt;/em&gt; name opens many doors&lt;/a&gt;), even I have done it in the past. I am talking about attaching the resume of a completely different person from a completely different place and a completely different background.&lt;/p&gt;

&lt;p&gt;I have seen this a couple of times, and it has been awkward. Especially when one of the profiles matched the job perfectly while the other was completely unrelated (still within IT).&lt;/p&gt;

&lt;p&gt;While talking about wrong names, if you add a cover letter (most people don't), reread it before submitting it with your application. It looks kind of bad when you add a cover letter with the wrong company's name.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-dont-have-everyone-elses-resume"&gt;
  &lt;/a&gt;
  3. Don't have everyone else's resume
&lt;/h2&gt;

&lt;p&gt;This point may be more relevant for positions that require a certain level of creativity, but to some extent, it applies to everyone.&lt;/p&gt;

&lt;p&gt;Many resumes have the same template (and almost the same content, too!). As a result, they don't stand out. On the other hand, candidates that have a more original resume are easier to remember.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AkZtUbqi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rbnsv3lc39xe0bjonodu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AkZtUbqi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rbnsv3lc39xe0bjonodu.jpg" alt="A field full of yellow tulips with a single red tulip focused and centered"&gt;&lt;/a&gt;&lt;/p&gt;
These tulips are equally beautiful, but you'll remember only one (picture by &lt;a href="https://unsplash.com/photos/l37N7a1lL6w"&gt;Rupert Britton&lt;/a&gt;)&lt;br&gt; 



&lt;p&gt;After seeing the same resumes repeatedly, most of them with a similar structure, names, and experiences become blurry. It is difficult to tell one apart from the other. Spice your resume up! Add color, use a different template, different fonts and icons...&lt;/p&gt;

&lt;p&gt;In some cases, this is not possible because the company requires a specific format. &lt;strong&gt;This point is not only for presentation; it's about content, too&lt;/strong&gt;. There's always something that you can add to stand out. &lt;/p&gt;

&lt;p&gt;For a long time, I listed on my resume some experience as a cartoonist at a local/university newspaper. Going to interviews, I was often welcomed with "&lt;em&gt;Ah! You are the guy who draws for the newspaper&lt;/em&gt;". My experience was similar to everyone else's, but I had an edge. Something different and quirky that made me stand out and made me memorable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-dont-link-obsoleteunused-social-media"&gt;
  &lt;/a&gt;
  4. Don't link obsolete/unused social media
&lt;/h2&gt;

&lt;p&gt;If you add links to your social media profiles and accounts, chances are we are going to check them. And if they are empty or haven't been updated for 10-15 years, they will leave a sour impression.&lt;/p&gt;

&lt;p&gt;Seriously, why link your Github profile if you only have a repo that hasn't been updated in over a decade? Or your empty LinkedIn? Or a Twitter account with an egg photo and a single tweet from 4 years ago? It won't tell me anything good. &lt;/p&gt;

&lt;p&gt;For developers, Github is an interesting case. They (we) rush to put a la link on their resume, but then the profile is empty or has zero contributions, or (IMHO, even worse) they have way too many contributions.&lt;/p&gt;

&lt;p&gt;One time, we had a candidate who created a script that automatically generated dummy commits and pushes to a repo. That way, their contribution chart looked unrealistically dark green. But, in reality, his unique contribution was... a nicely developed script that generated dummy commits and pushes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XiIMyp9o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6ruhcohoqx1laxs78no.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XiIMyp9o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6ruhcohoqx1laxs78no.jpg" alt="Screenshot of two contribution charts (squares where light color means fewer contributions and dark means lots of contributions). One looks spotty, with more light than dark, many days without contributions. The other looks completely dark. There's a text saying this (arrow pointing to the spotty chart) is better than this (arrow pointing to the full chart)"&gt;&lt;/a&gt;&lt;/p&gt;
One of these contribution charts is fake... I wonder which one?&lt;br&gt; 



&lt;p&gt;I personally love seeing what people develop on Github. It won't affect their eligibility if they don't have anything, but it may make their lives easier. That's because people tend to be more comfortable talking about their passions, and if I see an interesting project, I will likely ask about it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-dont-copypaste-your-test-answers"&gt;
  &lt;/a&gt;
  5. Don't copy-paste your test answers
&lt;/h2&gt;

&lt;p&gt;...or, at least, be smart about it.&lt;/p&gt;

&lt;p&gt;If you get a take-home programming test, don't just copy-paste the answers senselessly from the Internet. &lt;strong&gt;Google-foo is a great skill to have&lt;/strong&gt; (I think knowing how to find information online is essential and don't have any problem with candidates searching online on interviews), but remember: interviewers also have it... and they have anti-plagiarism software that will flag your results, too.&lt;/p&gt;

&lt;p&gt;In our team, we perform small programming tests on &lt;a href="https://www.hackerrank.com/"&gt;HackerRank&lt;/a&gt;, and as part of the results, we get a plagiarism detection report. And it doesn't look too good if the algorithm flagged all the candidate's answers.&lt;/p&gt;

&lt;p&gt;Plus, if/when you get to the next stage, you may be asked to explain the code later. It is ok if you copied it, but at least you should understand it and be able to explain it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-dont-sell-yourself-short"&gt;
  &lt;/a&gt;
  6. Don't sell yourself short
&lt;/h2&gt;

&lt;p&gt;We had some candidates with 15 relevant years of experience applying to positions requiring 2-4 years. Unfortunately, those candidates were almost automatically discarded by the system. This is because their expectations never match the job description, and convincing Human Resources (HR) to upgrade an open position is tough.&lt;/p&gt;

&lt;p&gt;There are cases in which this experience discrepancy may be justified: people changing careers or trying a different field within software development... but outside of those and a little more, hiring candidates with too much experience doesn't normally fly.&lt;/p&gt;

&lt;p&gt;Be realistic, and don't sell yourself short. If you have the knowledge and experience to be at a higher level, don't apply to lower levels.&lt;/p&gt;

&lt;p&gt;In contrast to the point above, &lt;strong&gt;don't be scared to apply if you don't match all the requirements&lt;/strong&gt;; you may still be a perfect match and get the job. Hiring a candidate with less experience but promising skills is an easier sell to HR than the opposite.&lt;/p&gt;

&lt;p&gt;In the end, it all boils down to: don't sell yourself short and aim high. If you are a match, great. If you are not, the company will tell you if there's a lower position that you would fit into.&lt;/p&gt;




&lt;p&gt;Cover image by &lt;a href="https://www.pexels.com/photo/upset-young-black-guy-covering-face-with-hand-while-working-remotely-on-netbook-5699826/"&gt;Alex Green on Pexels&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>career</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Why testing is important?</title>
      <author>Aspiiire</author>
      <pubDate>Mon, 02 Aug 2021 12:36:19 +0000</pubDate>
      <link>https://dev.to/aspiiire/why-testing-is-important-2gdb</link>
      <guid>https://dev.to/aspiiire/why-testing-is-important-2gdb</guid>
      <description>&lt;p&gt;Testing is by far one of the most important things to do during programming, but it as well one of the most overlooked things.  &lt;/p&gt;

&lt;p&gt;Testing ensure that you have a well working Website, Application or Software, let me explain.  &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/enRzQAwP8ko"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-testing-is-important"&gt;
  &lt;/a&gt;
  Why Testing is important?
&lt;/h2&gt;

&lt;p&gt;We are humans, we forget, we make mistakes, we change things, ideas; This if we work solo, imagine when you are in a team!  &lt;/p&gt;

&lt;p&gt;When we add new features or edit previously made code, to be clear, when we touch stuff, sometimes you can create some issues in the other part of your application;  &lt;/p&gt;

&lt;p&gt;Wouldn't be cool if someone could check for you that is everything fine or you have broken 3 modules of x or y class, function, or whatever?  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nah-it-takes-time"&gt;
  &lt;/a&gt;
  Nah, it takes time
&lt;/h2&gt;

&lt;p&gt;Yes, it takes time, following for example TDD takes a little bit of time, but, if you count the time that you will not spend looking for bugs after you find that 50% of you application is broken, it is better.   &lt;/p&gt;

&lt;p&gt;I would say that it will takes a little bit of time at the beginning, but at the end will take less time.  &lt;/p&gt;

&lt;p&gt;Instead if you code without testing when you have a full production application and, for example, you add a new feature breaking parts of you Application, I'm pretty confident that you'll have a harder time.  &lt;/p&gt;

&lt;p&gt;The beautiful thing about testing is that you are able to follow the exact point in which your function has problems.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M91abvGZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y0x4ap4tlmroqrjlupk6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M91abvGZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y0x4ap4tlmroqrjlupk6.png" alt="Process of testing illustration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yes you guessed it, this is the purpose of testing...  &lt;/p&gt;

&lt;p&gt;We are not perfect, testing allows us to check that everything is as it was before nothing has changed and every behavior is exactly how we have coded it before, the function receives the same inputs and gives the same outputs, the overall Application works as intended.  &lt;/p&gt;

&lt;p&gt;If you could catch minor problems before they transform in huge holes in your software in the same moment you create them I think that it's a fantastic news.   &lt;/p&gt;

&lt;p&gt;If you don't, a simple bug after days and days, weeks, months, more people working on the project and you have to solve a huge problem that you could have solved by implementing some tests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-tests-better-quality"&gt;
  &lt;/a&gt;
  More tests, better quality
&lt;/h2&gt;

&lt;p&gt;If you cover a well amount of your Application's modules, you can be pretty confident that you have a well working Software, that means that the quality is better since your double check everything.   &lt;/p&gt;

&lt;p&gt;Another important benefit of testing, is that helps you and other to understand more about x or y function, since you will have a descriptive name that give the reader what are you testing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-i-should-start"&gt;
  &lt;/a&gt;
  How I should start?
&lt;/h2&gt;

&lt;p&gt;I suggest you to follow the Test Driven Development process always abbreviated as TDD;  &lt;/p&gt;

&lt;p&gt;It works like this, first before you write any function that you want to test, you begin by creating the test, yes before even the actual thing that you want to test exist.  &lt;/p&gt;

&lt;p&gt;You write a test for that function with the main goal that you want to achieve in your mind, then you develop the function.  &lt;/p&gt;

&lt;p&gt;Probably you would not expect this point when you follow TDD but it helps you to be more productive!  &lt;/p&gt;

&lt;p&gt;Probably you would not expect this point when you follow TDD but it helps you to be more productive!  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more"&gt;
  &lt;/a&gt;
  More?
&lt;/h2&gt;

&lt;p&gt;There are many types of testing, the one that I've described is defined as Unit Test, there are many types of testing.  &lt;/p&gt;

&lt;p&gt;Unit Testing focuses only on a single unit, as the name suggests, and it doesn't care about the connection of your function with other parts, in which you should follow another type of testing, for example, Integration Testing.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#this-is-it"&gt;
  &lt;/a&gt;
  This is it!
&lt;/h2&gt;

&lt;p&gt;I've learned about testing in many sources that I cannot recall now, but one book that I remember for sure is Clean Code...&lt;/p&gt;

&lt;p&gt;I link a referral here, if you prefer the digital version, I suggest you to get a bundle by the author of Clean Code and Clean Coder at a lower price.&lt;/p&gt;

&lt;p&gt;---- US ----&lt;br&gt;
&lt;a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship-dp-0132350882/dp/0132350882?_encoding=UTF8&amp;amp;me=&amp;amp;qid=&amp;amp;linkCode=li3&amp;amp;tag=903509-20&amp;amp;linkId=b91bff47378c47b9085089009e746245&amp;amp;language=en_US&amp;amp;ref_=as_li_ss_il"&gt;&lt;img src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=0132350882&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=US&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=903509-20&amp;amp;language=en_US"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vi1-cj5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ir-na.amazon-adsystem.com/e/ir%3Ft%3D903509-20%26language%3Den_US%26l%3Dli3%26o%3D1%26a%3D0132350882" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vi1-cj5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ir-na.amazon-adsystem.com/e/ir%3Ft%3D903509-20%26language%3Den_US%26l%3Dli3%26o%3D1%26a%3D0132350882" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.amazon.com/gp/product/B00666M59G?&amp;amp;linkCode=li3&amp;amp;tag=903509-20&amp;amp;linkId=74f8a7c5e57b2adf3fd822bcd8e1ef21&amp;amp;language=en_US&amp;amp;ref_=as_li_ss_il"&gt;&lt;img src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=B00666M59G&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=US&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=903509-20&amp;amp;language=en_US"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--njXEUoi6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ir-na.amazon-adsystem.com/e/ir%3Ft%3D903509-20%26language%3Den_US%26l%3Dli3%26o%3D1%26a%3DB00666M59G" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--njXEUoi6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ir-na.amazon-adsystem.com/e/ir%3Ft%3D903509-20%26language%3Den_US%26l%3Dli3%26o%3D1%26a%3DB00666M59G" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;---- IT ----&lt;br&gt;
&lt;a href="https://amzn.to/3j2kHd4"&gt;&lt;img src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=0132350882&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=US&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=903509-20&amp;amp;language=en_US"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vi1-cj5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ir-na.amazon-adsystem.com/e/ir%3Ft%3D903509-20%26language%3Den_US%26l%3Dli3%26o%3D1%26a%3D0132350882" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vi1-cj5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ir-na.amazon-adsystem.com/e/ir%3Ft%3D903509-20%26language%3Den_US%26l%3Dli3%26o%3D1%26a%3D0132350882" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://amzn.to/3ycw3Sl"&gt;&lt;img src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=B00666M59G&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=US&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=903509-20&amp;amp;language=en_US"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--njXEUoi6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ir-na.amazon-adsystem.com/e/ir%3Ft%3D903509-20%26language%3Den_US%26l%3Dli3%26o%3D1%26a%3DB00666M59G" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--njXEUoi6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ir-na.amazon-adsystem.com/e/ir%3Ft%3D903509-20%26language%3Den_US%26l%3Dli3%26o%3D1%26a%3DB00666M59G" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  Thank you for reading 😀👋
&lt;/h2&gt;

&lt;p&gt;I hope that you enjoyed the content and it was nice to read, inshAllah in the future I want to release a more specific example about testing, with Flutter and Javascript.&lt;/p&gt;

&lt;p&gt;If you want to follow me on other socials here I'have some links...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UC9FtVivCn-y_YFIxffP-qXQ"&gt;Youtube&lt;/a&gt; &lt;br&gt;
&lt;a href="https://twitter.com/Aspiiire1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>testing</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>flutter</category>
    </item>
  </channel>
</rss>
