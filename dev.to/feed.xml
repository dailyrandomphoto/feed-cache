<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Some Useful JavaScript posts on google</title>
      <author>niksin</author>
      <pubDate>Fri, 23 Jul 2021 06:42:40 +0000</pubDate>
      <link>https://dev.to/stuffsuggested/some-useful-javascript-posts-on-google-hj4</link>
      <guid>https://dev.to/stuffsuggested/some-useful-javascript-posts-on-google-hj4</guid>
      <description>&lt;p&gt;Top 5 Results for javascript tips and tricks on google.&lt;/p&gt;

&lt;p&gt;Looking for javascript tips and tricks in 2021 here is the top 5 result of google for it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://morioh.com/p/2a323b4a7909"&gt;16 JavaScript Tricks You Should Know in 2021&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/blessingartcreator/17-javascript-optimization-tips-3gil"&gt;17 Javascript optimization tips to know in 2021&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://morioh.com/p/2a323b4a7909"&gt;16 JavaScript Tricks You Should Know in 2021&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://cmsinstallation.blogspot.com/2021/06/4-tips-for-javascript-2021-to-write.html"&gt;4 Tips for JavaScript 2021&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://apoorvtyagi.tech/javascript-tips-and-best-practices"&gt;JavaScript Tips and Best Practices&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Who Developed What? </title>
      <author>Nishtha Neeraj Kushwah</author>
      <pubDate>Fri, 23 Jul 2021 04:58:09 +0000</pubDate>
      <link>https://dev.to/nishthaneeraj/who-developed-what-4go4</link>
      <guid>https://dev.to/nishthaneeraj/who-developed-what-4go4</guid>
      <description>&lt;p&gt;&lt;strong&gt;GENERAL KNOWLEDGE QUESTIONS&lt;br&gt;
That Every Developer Should Know&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Q.) Who developed HTML?&lt;br&gt;
A.) Tim Berners-Lee&lt;br&gt;
Q.) Who Developed CSS?&lt;br&gt;
A.) Håkon Wium Lie (with Tim Berners-Lee)&lt;br&gt;
Q.) Who Developed PYTHON?&lt;br&gt;
A.) Guido van Rossum &lt;br&gt;
Q.) Who Developed JAVA?&lt;br&gt;
A.) James Gosling&lt;br&gt;
Q.) Who Developed JAVASCRIPT?&lt;br&gt;
A.) Brendan Eich &lt;br&gt;
Q.) Who developed XML?&lt;br&gt;
A.) Charles F. &lt;br&gt;
Q.) Who Developed C?&lt;br&gt;
A.) Dennis Ritchie&lt;br&gt;
Q.) Who Developed C++?&lt;br&gt;
A.) Bjarne Stroustrup&lt;br&gt;
Q.) Who Developed PHP?&lt;br&gt;
A.) Rasmus Lerdorf&lt;br&gt;
Q.) Who Developed CYTHON?&lt;br&gt;
A.) Robert Bradshaw, Stefan Behnel, et al.&lt;br&gt;
Q.) Who Developed NODE .js?&lt;br&gt;
A.) Ryan Dahl &lt;br&gt;
Q.) Who Developed RUBY?&lt;br&gt;
A.) Yukihiro "Matz" Matsumoto&lt;br&gt;
Q.) Who Developed DELPHI?&lt;br&gt;
A.) Anders Hejlsberg&lt;br&gt;
Q.) Who Developed PASCAL?&lt;br&gt;
A.) Niklaus Wirth&lt;br&gt;
Q.) Who Developed VISUAL BASIC?&lt;br&gt;
A.) Alan Cooper (Microsoft)&lt;br&gt;
Q.) Who Developed ANGULAR?&lt;br&gt;
A.) Miško Hevery&lt;br&gt;
Q.) Who Developed SWIFT?&lt;br&gt;
A.) Chris Lattner&lt;br&gt;
Q.) Who Developed C# ?&lt;br&gt;
A.) Anders Hejlsberg (Microsoft)&lt;/p&gt;

&lt;p&gt;That's All for this post &lt;/p&gt;

&lt;p&gt;Happy Coding 😃&lt;/p&gt;

</description>
      <category>coding</category>
      <category>generalknowledge</category>
    </item>
    <item>
      <title>Updates on dev.to clone in Angular July 23</title>
      <author>Ajit Singh</author>
      <pubDate>Fri, 23 Jul 2021 04:29:38 +0000</pubDate>
      <link>https://dev.to/this-is-angular/updates-on-dev-to-clone-in-angular-july-23-1g62</link>
      <guid>https://dev.to/this-is-angular/updates-on-dev-to-clone-in-angular-july-23-1g62</guid>
      <description>&lt;p&gt;Github Repo - &lt;a href="https://github.com/ajitsinghkaler/devto-clone"&gt;https://github.com/ajitsinghkaler/devto-clone&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Deployed on Firebase - &lt;a href="https://dev-toclone.firebaseapp.com/"&gt;https://dev-toclone.firebaseapp.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Last week I added Article store and sidebar in our dev.to clone.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bSwL4xaM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dzl6ndws9g10llhqw0qt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bSwL4xaM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dzl6ndws9g10llhqw0qt.png" alt="Dev.to Clone July 16"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This week I added the articles section. The articles section is divided into three parts the featured article ie the first article in your feed the rest of the articles section and the top header from where I select the time interval of our feed. Right now the feed is generic not based on any tags and user but I will do that later. Most of the time went in setting up the HTML, CSS for our articles section so I was not able to complete the tags store and the articles header section.&lt;/p&gt;

&lt;p&gt;I did some interesting things which you may find interesting. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#content-projection-in-the-articlescards-section"&gt;
  &lt;/a&gt;
  Content projection in the articles-cards section
&lt;/h3&gt;

&lt;p&gt;In normal articles card the font size of title is 24px and in the featured-article section it was 30px. So I thought I should add the title section via content projection but this had one problem that there is no way in Angular to give default content projection the &lt;a href="https://github.com/angular/angular/issues/12530"&gt;issue&lt;/a&gt; is open for a long time but there is a work around you can define a ref on the template and check if has children then render the projected content or render the default content if it does not have any content projected. To see how I implemented it follow this &lt;a href="https://github.com/ajitsinghkaler/devto-clone/blob/fa6062cbaeb758328bef9afa24bfe7c96b6ac1b6/src/app/pages/home/articles/article-card/article-card.component.html#L15-L20"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#changing-styles-of-component"&gt;
  &lt;/a&gt;
  Changing styles of component
&lt;/h3&gt;

&lt;p&gt;So if you put some styles of your component in the :host selector it can be easily changed in other components too. Like the article card-component as some styles but with the featured card I need to change some styles of the card component. Most of the CSS I need to be changed is global so I put it in host of the article-card component and I was easily able to change the styles to see how I implemented this check this &lt;a href="https://github.com/ajitsinghkaler/devto-clone/blob/6fbc74f35b89b3067ab7b42e44fa47b789748940/src/app/pages/home/articles/featured-article/featured-article.component.scss#L15-L22"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Which leads us here&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hjMvNqjC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f5hsg9m6rg2kf53fxo0f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hjMvNqjC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f5hsg9m6rg2kf53fxo0f.png" alt="Updated angular dev-to clone 23-7"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#issues"&gt;
  &lt;/a&gt;
  Issues
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#css-management"&gt;
  &lt;/a&gt;
  CSS management
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/issues/2"&gt;Issue&lt;/a&gt;&lt;br&gt;
CSS is getting out of hand I had to add a new class again and again every time even to add a small padding value. Its obvious that CSS is going to balloon soon and will get out of hand. So, see some CSS management techniques.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#content-projection"&gt;
  &lt;/a&gt;
  Content projection
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/issues/3"&gt;Issue&lt;/a&gt;&lt;br&gt;
Content projection just to change the size of the title seems overkill. Should it be done via inputs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#header-in-article-section"&gt;
  &lt;/a&gt;
  Header in article section
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/issues/4"&gt;Issue&lt;/a&gt;&lt;br&gt;
Article section header is incomplete.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#commits-done-in-this-update"&gt;
  &lt;/a&gt;
  Commits done in this update
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/commit/6fbc74f35b89b3067ab7b42e44fa47b789748940"&gt;built homepage articles section&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/commit/fa6062cbaeb758328bef9afa24bfe7c96b6ac1b6"&gt;add dynamic title in article card&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/commit/1a2629666a9ad652b517450f153c5f7164c874a4"&gt;WIP: add header to articles section&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let me know in the comments if you think something can be improved.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>July 22nd, 2021: What did you learn this week?</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Fri, 23 Jul 2021 02:58:33 +0000</pubDate>
      <link>https://dev.to/nickytonline/july-22nd-2021-what-did-you-learn-this-week-3ck</link>
      <guid>https://dev.to/nickytonline/july-22nd-2021-what-did-you-learn-this-week-3ck</guid>
      <description>&lt;p&gt;It's that time of the week again. So wonderful devs, what did you learn this week? It could be programming tips, career advice etc.&lt;/p&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/yDYAHbqe5DfyM/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/yDYAHbqe5DfyM/giphy.gif" alt="Yoda wooping someone's butt"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;


&lt;/center&gt;

&lt;p&gt;Feel free to comment with what you learnt and/or reference your TIL post to give it some more exposure.&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__5305"&gt;
  
    .ltag__tag__id__5305 .follow-action-button{
      background-color: #ffedc9 !important;
      color: #820000 !important;
      border-color: #ffedc9 !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/todayilearned" class="ltag__tag__link"&gt;todayilearned&lt;/a&gt; Follow
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        Summarize a concept that is new to you.
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>weeklylearn</category>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>Use puppeteer on the server in non-headless mode</title>
      <author>Sudarshan Sawandkar</author>
      <pubDate>Fri, 23 Jul 2021 02:49:40 +0000</pubDate>
      <link>https://dev.to/sudarshansb143/use-puppeteer-on-the-server-in-non-headless-mode-25bk</link>
      <guid>https://dev.to/sudarshansb143/use-puppeteer-on-the-server-in-non-headless-mode-25bk</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  📓📓 TL:DR
&lt;/h2&gt;

&lt;p&gt;Using puppeteer on the server is necessary use case when you want to&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Crawl millions of web pages of a certain URL &lt;/li&gt;
&lt;li&gt;Perform Web Automation &lt;/li&gt;
&lt;li&gt;Automate the testing of web apps&lt;/li&gt;
&lt;li&gt;Implement Bot-like activities on web sites 
etc.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But, using it in non - headless mode is such a pain. Especially, when you have any Unix-like OS i.e. ubuntu, centos installed on the remote machine and you are using the machine over SSH or any other remote connection tool like putty.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#%F0%9F%9B%A0-how-to-do-it-"&gt;
  &lt;/a&gt;
  🛠 How to do it :
&lt;/h2&gt;

&lt;p&gt;So, in spite of all these extreme cases we can still use it and in this article we will take a look at one of the ways to implement it.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#%F0%9F%95%B6-some-background-"&gt;
  &lt;/a&gt;
  🕶  Some Background :
&lt;/h2&gt;

&lt;p&gt;Puppeteer at it's core uses the chromium browser, which does all the heavy lifting stuff like &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Exposing  DOM API's for interactions&lt;/li&gt;
&lt;li&gt;Perform DOM manipulations and code injection &lt;/li&gt;
&lt;li&gt;Cookie management and session handling &lt;/li&gt;
&lt;li&gt;Navigation and context maintenance 
etc.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Chromium needs the display adapters to launch the chromium window on the host machine. Regardless of the host OS, it uses the available display adapter API available. &lt;/p&gt;

&lt;p&gt;When we are serving puppeteer using virtual machine or any other remote machine, by default we don't have any displays because all the work is done by Bash (AKA command line). &lt;/p&gt;

&lt;p&gt;If we have windows server, then there is no big deal. Just connect  the server using Remote Desktop Connection and  you are good to go. But, if you have Ubuntu, centos or any other UNIX based OS installed on the remote machine, then you have to do some extra efforts.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  👉 Steps
&lt;/h2&gt;




&lt;h3&gt;
  &lt;a href="#%E2%9A%92-1-regular-stpes-"&gt;
  &lt;/a&gt;
  ⚒ 1. Regular stpes :-
&lt;/h3&gt;

&lt;p&gt;Before doing anything else, lets update host by some OLD school stuff&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get update

&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get upgrade 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#2-%F0%9F%96%A5-install-desktoplike-enviroments"&gt;
  &lt;/a&gt;
  2. 🖥 Install desktop-like enviroments
&lt;/h3&gt;

&lt;p&gt;For installing the desktop based utility known as XRDP, I have installed core utilities like &lt;code&gt;ubuntu-mate-core&lt;/code&gt; and &lt;code&gt;ubuntu-mate-desktop&lt;/code&gt; by using this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--no-install-recommends&lt;/span&gt; ubuntu-mate-core ubuntu-mate-desktop &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Ubuntu Mate Core :-&lt;/p&gt;

&lt;p&gt;This utility converts the basic Ubuntu machine to complete workstation by adding some extra applications.&lt;/p&gt;

&lt;p&gt;Ubuntu Mate Desktop :-&lt;/p&gt;

&lt;p&gt;This is on such desktop like environments for Ubuntu. This exposes  the interface for handling the local as well as networked files, perform calculations etc.  &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-install-xrdp-"&gt;
  &lt;/a&gt;
  3. 💻 Install XRDP :-
&lt;/h3&gt;

&lt;p&gt;After doing above steps, we have to install XRDP server which will give us  the access of Remote Desktop Connection for host machine. We will also install some secondary dependencies for implementing complete desktop like environment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;mate-core mate-desktop-environment mate-notification-daemon xrdp &lt;span class="nt"&gt;-y&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#4-create-remote-user-"&gt;
  &lt;/a&gt;
  👮 4. Create remote user :-
&lt;/h3&gt;

&lt;p&gt;As suggested by numerous manuals, we will now create non-root user for performing all of our remaining tasks. &lt;/p&gt;

&lt;p&gt;Create a XYZ user and grant the sudo access to newly created user for avoiding any permission conflicts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
adduser xseven

usermod &lt;span class="nt"&gt;-aG&lt;/span&gt; admin xseven

usermod &lt;span class="nt"&gt;-aG&lt;/span&gt; &lt;span class="nb"&gt;sudo &lt;/span&gt;xseven

su - xseven

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#5-configuring-mate-session-"&gt;
  &lt;/a&gt;
  🔧 5. Configuring Mate Session :
&lt;/h3&gt;

&lt;p&gt;We  now will configure the necessary Mate Session. This will help use to customize the available desktop like enviroment as per our needs&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
&lt;span class="nb"&gt;echo &lt;/span&gt;mate-session&amp;gt; ~/.xsession

&lt;span class="nb"&gt;sudo cp&lt;/span&gt; /home/xseven/.xsession /etc/skel

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#6-restart-xrdp-"&gt;
  &lt;/a&gt;
  🚀🚀🚀 6. Restart XRDP :-
&lt;/h3&gt;

&lt;p&gt;Final step is to restart XRDP to apply all the configrations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;service xrdp restart

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once restarted, we can connect to the remote machine by using RDC  or any other compatible tool&lt;/p&gt;

&lt;p&gt;This is how we can run puppteer in non-headless mode on server. There are many other alternatives like &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Installing GNome or KDE for desktop machines &lt;/li&gt;
&lt;li&gt;Host applications on desktop ubuntu enviroment &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;etc.&lt;/p&gt;

&lt;p&gt;Thanks For Reading....&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
      <category>devops</category>
      <category>beginners</category>
    </item>
    <item>
      <title>CSS Hover style all you're buttons/links in one line</title>
      <author>sajrashid</author>
      <pubDate>Fri, 23 Jul 2021 02:02:49 +0000</pubDate>
      <link>https://dev.to/sajrashid/css-hover-style-all-you-re-buttons-links-succinctly-496e</link>
      <guid>https://dev.to/sajrashid/css-hover-style-all-you-re-buttons-links-succinctly-496e</guid>
      <description>&lt;p&gt;Let's add a few buttons&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"primary"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;OK&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"secondary"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Cancel&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt;  &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"accent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Delete&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add some styles&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.primary&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;steelblue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.secondary&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;
&lt;span class="nc"&gt;.accent&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;

&lt;span class="nc"&gt;.primary&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nice, but how about this ?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;great now we only need a single css class for all our buttons and our links, but, but but... opacity dims the element, so how do we make it brighter without dimming either the base or the hover huh ?&lt;/p&gt;

&lt;p&gt;🥁 🥁 🥁 Enter the brightness filter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;brightness&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.75&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🆒 CSS filters Cool, but often overlooked.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/sajrashid/embed/gOWGVJG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;EDIT: As suggested in the comments it's not cool to do this everywhere &amp;amp; it's certainly not meant to be a direction to do so... read the comments below for more&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 Useful Python String Methods </title>
      <author>Aya Bouchiha</author>
      <pubDate>Fri, 23 Jul 2021 00:43:23 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/5-useful-python-string-methods-4pe7</link>
      <guid>https://dev.to/ayabouchiha/5-useful-python-string-methods-4pe7</guid>
      <description>&lt;p&gt;Hi!, my name is &lt;a href="https://t.me/AyaBouchiha"&gt;Aya Bouchiha&lt;/a&gt;, on this beautiful day, I'm going to share with you 5 useful string methods in &lt;strong&gt;Python&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Firstly, we need to know that all python methods do not change the original value of the string, they return new values.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#startswith"&gt;
  &lt;/a&gt;
  startswith()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;startswith(&lt;em&gt;prefix, start = 0, end = len(str) - 1&lt;/em&gt;)&lt;/strong&gt;: checks if a string starts with a giving value.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parameters-of-startswith"&gt;
  &lt;/a&gt;
  Parameters of startswith
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;prefix&lt;/em&gt;: to check that the string starts&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;start = 0&lt;/em&gt;: the starting index where the giving prefix is needed to be checked.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;end = len(str) - 1&lt;/em&gt;: the ending index where the giving needs to be checked.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.geeksforgeeks.org/python-string-startswith/"&gt;more details...&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;phone_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'+212123456789'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phone_number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'34'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# False
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phone_number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'+212'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# True
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phone_number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'56'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# True
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phone_number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'78'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# True
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#replace"&gt;
  &lt;/a&gt;
  replace()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;replace(&lt;em&gt;old_value, new_value, count&lt;/em&gt;)&lt;/strong&gt;: replace a specific substring with a giving new value.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  parameters
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;old_value&lt;/em&gt;: the specific substring that you want to replace it&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;new_value&lt;/em&gt;: the new value to replace it with &lt;em&gt;old_value&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;count&lt;/em&gt;: (&lt;em&gt;optional&lt;/em&gt;) number specifying how many occurrences of the old value you want to replace. Default is all occurrences
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;country_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'212'&lt;/span&gt;
&lt;span class="n"&gt;user_phone_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;country_code&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;6123452129'&lt;/span&gt;
&lt;span class="c1"&gt;# 2126123452129
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_phone_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;# 066123452129
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_phone_number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;country_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'06'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#title"&gt;
  &lt;/a&gt;
  title()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;title()&lt;/strong&gt;: this string method converts each word's first character to uppercase.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;article_slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'5-html-tags-that-almost-nobody-knows'&lt;/span&gt;
&lt;span class="n"&gt;article_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;article_slug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# 5 HTML Tags That Almost Nobody Knows
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article_title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#upper-lower"&gt;
  &lt;/a&gt;
  upper(), lower()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;upper()&lt;/strong&gt;: converts string's characters to uppercase&lt;br&gt;
&lt;strong&gt;lower()&lt;/strong&gt;: converts string's characters to lowercase&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;full_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Aya Bouchiha'&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;full_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;# AYA BOUCHIHA
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;full_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;# aya bouchiha
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#find"&gt;
  &lt;/a&gt;
  find()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;find(valueToSearch, startIndex=0, endIndex=len(str))&lt;/strong&gt;: returns the index of the first occurence of the giving substring. It is  similar to &lt;strong&gt;index()&lt;/strong&gt;, but it returns &lt;em&gt;-1&lt;/em&gt; instead of raising an exception. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;valueToSearch&lt;/strong&gt;: string to search&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;startIndex = 0&lt;/strong&gt;: index to start searching&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;endIndex = len(str)&lt;/strong&gt;: index to end searching
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Tanger is a beautiful city'&lt;/span&gt;
&lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Tanger, Morocco'&lt;/span&gt;
&lt;span class="n"&gt;language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'en-us'&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'beautiful'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# 12
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Morocco'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# 8
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'en'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# 0
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'fr'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# -1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;startswith&lt;/strong&gt;: checks if a string starts with a giving value.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;title&lt;/strong&gt;: converts each word's first character to uppercase.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;replace&lt;/strong&gt;: replace a specific substring with a giving new value.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;upper, lower&lt;/strong&gt;: converts string's characters to uppercase, lowercase&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;find&lt;/strong&gt;: returns the index of the first occurrence of the giving substring.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have an amazing day!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;email: &lt;a href="mailto:developer.aya.b@gmail.com"&gt;developer.aya.b@gmail.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;telegram: &lt;a href="https://t.me/AyaBouchiha"&gt;Aya Bouchiha&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Matching Properties and Values in the Object challenge.</title>
      <author>Randy Rivera</author>
      <pubDate>Thu, 22 Jul 2021 23:27:53 +0000</pubDate>
      <link>https://dev.to/rthefounding/matching-properties-and-values-in-the-object-4g4e</link>
      <guid>https://dev.to/rthefounding/matching-properties-and-values-in-the-object-4g4e</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Welcome back I'm sorry that it took me a while to post something. Anyways let's get back straight to it. 
In this post let's make a function that looks through an array of objects (first argument) and returns an array of all objects that have matching name and value pairs (second argument). Each name and value pair of the source object has to be present in the object from the collection.&lt;/li&gt;
&lt;li&gt;For example, if the first argument is &lt;code&gt;[{ first: "Randy", last: "Skywalker" }, { first: "Alan", last: null }, { first: "Diego", last: "Rivera" }]&lt;/code&gt;, and the second argument is &lt;code&gt;{ last: "Rivera" }&lt;/code&gt;, then you must return the third object from the array (the first argument), because it contains the name and its value, that was passed on as the second argument.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#alright-lets-get-to-it-then-below-is-already-pre-written-for-you"&gt;
  &lt;/a&gt;
  Alright let's get to it then. Below is already pre written for you.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function names(collection, target) {
  var arr = [];
  // Only change code below this line


  // Only change code above this line
  return arr;
}

names([{ first: "Randy", last: "Skywalker" }, { first: "Alan", last: null }, { first: "Diego", last: "Rivera" }], { last: "Rivera" });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Answer:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function names(collection, target) {
  let keys = Object.keys(target);

  return collection.filter(function(obj) {
    for (let i = 0; i &amp;lt; keys.length; i++) {
    if (!obj.hasOwnProperty(keys[i]) || obj[keys[i]] !== target[keys[i]]) {
      return false;
    }
  }
    return true;
  })
}

names([{ first: "Randy", last: "Skywalker" }, { first: "Alan", last: null }, { first: "Diego", last: "Rivera" }], { last: "Rivera" }); // console.log would display the entire object [{ first: 'Diego', last: 'Rivera' }]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;!obj&lt;/code&gt; basically means if the &lt;code&gt;obj&lt;/code&gt; does not.&lt;/li&gt;
&lt;li&gt;There's also a slightly different way of doing the for loop as well.&lt;/li&gt;
&lt;li&gt;Ex:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function names(collection, target) {
  let keys = Object.keys(target);

  return collection.filter(function(obj) {
    for (let key of keys) {
    if (!obj.hasOwnProperty(key) || obj[keys] !== target[keys]) {
      return false;
    }
  }
    return true;
  })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>devops</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Secure your GitHub Personal Access Tokens with an Expiration Date</title>
      <author>Davide 'CoderDave' Benvegnù</author>
      <pubDate>Thu, 22 Jul 2021 23:12:41 +0000</pubDate>
      <link>https://dev.to/github/secure-your-github-personal-access-tokens-with-an-expiration-date-5cl</link>
      <guid>https://dev.to/github/secure-your-github-personal-access-tokens-with-an-expiration-date-5cl</guid>
      <description>&lt;p&gt;GitHub has just introduced the ability to set an &lt;strong&gt;optional expiration date on personal access tokens&lt;/strong&gt; (PATs). Users are now able to choose an expiration from a set of preset values, or specify a custom expiration date using a calendar drop-down.&lt;/p&gt;

&lt;p&gt;Let's take a look at this new feature!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;As usual, if you are a &lt;strong&gt;visual learner&lt;/strong&gt;, or simply prefer to watch and listen instead of reading, here you have &lt;strong&gt;the video with the whole explanation and demo&lt;/strong&gt;, which to be fair is much &lt;strong&gt;&lt;em&gt;more complete&lt;/em&gt;&lt;/strong&gt; than this post.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/f7t7cJp2v00"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/f7t7cJp2v00"&gt;Link to the video: https://youtu.be/f7t7cJp2v00&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you rather prefer reading, well... let's just continue :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h3&gt;

&lt;p&gt;Personal Access Tokens, or PATs, provide users with a quick way to create OAuth access tokens which they can use instead of passwords to make API calls or use services.&lt;/p&gt;

&lt;p&gt;However, until now PATs &lt;strong&gt;didn't offer an expiration option&lt;/strong&gt;, meaning they exist until they are manually disabled. Long-lived tokens can create &lt;strong&gt;large security implications&lt;/strong&gt; if they leak. &lt;/p&gt;

&lt;p&gt;Now this new optional expiration date increases both user's and organization's ability to secure how their data is accessed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#set-the-expiration-date"&gt;
  &lt;/a&gt;
  Set the Expiration Date
&lt;/h3&gt;

&lt;p&gt;To set the expiration date to a PAT just go to the &lt;em&gt;PAT creation&lt;/em&gt;, under &lt;code&gt;Your Profile &amp;gt; Settings &amp;gt; Developer Setting &amp;gt; Personal Access Tokens&lt;/code&gt;, and in here after clicking on the "&lt;em&gt;Generate new token&lt;/em&gt;" button you'll have, among the other things, the new "Expiration" drop down.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AZs8YYcw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wiwv0jp0v0fmofmhaenk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AZs8YYcw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wiwv0jp0v0fmofmhaenk.png" alt="Dropdown"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you can select any of the pre-defined options, between 7 and 90 days, or insert a custom expiration date.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RWCOWX2n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t09q1uvq2jahcpb21xc7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RWCOWX2n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t09q1uvq2jahcpb21xc7.png" alt="Dropdown values"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is still the possibility to have non-expiring tokens, as you can see, but it is &lt;strong&gt;highly not recommended&lt;/strong&gt; since, as I've mentioned before, that could represent a security issue in case the tokens leak.&lt;/p&gt;

&lt;p&gt;It is also possible to update existing tokens, adding the expiration date... however, that requires the re-generation of the token key.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;Let me know in the comment section below what do you think about this feature. And if you are new to Personal Access Tokens in GitHub, I highly encourage you to checkout &lt;a href="https://dev.to/n3wt0n/how-to-create-a-personal-access-token-pg7"&gt;this post&lt;/a&gt; or &lt;a href="https://youtu.be/SzrETQdGzBM"&gt;this video&lt;/a&gt; where I explain everything you need to know about them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
🌐 &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/f7t7cJp2v00"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>devops</category>
      <category>github</category>
      <category>security</category>
      <category>authentication</category>
    </item>
    <item>
      <title>➡️ Counter Up Animation | JavaScript✨</title>
      <author>Robson Muniz</author>
      <pubDate>Thu, 22 Jul 2021 21:46:36 +0000</pubDate>
      <link>https://dev.to/robsonmuniz16/counter-up-animation-javascript-b92</link>
      <guid>https://dev.to/robsonmuniz16/counter-up-animation-javascript-b92</guid>
      <description>&lt;p&gt;Hey DEVs, in this tutorial we're going to use JavaScript to build a visual Counting Animation. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-number-will-start-at-0-and-it-will-count-up-until-it-reaches-the-target-number"&gt;
  &lt;/a&gt;
  A number will start at 0 and it will count up until it reaches the target number.
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#-youtube-283yrecrym-"&gt;
  &lt;/a&gt;
  &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/283-YReCRYM"&gt;
&lt;/iframe&gt;

&lt;/h2&gt;

&lt;p&gt;📚Resources: &lt;br&gt;
Font-Awesome: &lt;a href="https://cdnjs.com/libraries/font-awesome"&gt;https://cdnjs.com/libraries/font-awesome&lt;/a&gt; &lt;br&gt;
Markup: &lt;a href="https://www.facebook.com/WebdevMadeEasy"&gt;https://www.facebook.com/WebdevMadeEasy&lt;/a&gt; &lt;/p&gt;




</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What is Tailwind CSS With React.js</title>
      <author>Thomas(Tripp) White </author>
      <pubDate>Thu, 22 Jul 2021 21:21:53 +0000</pubDate>
      <link>https://dev.to/turpp/what-is-tailwind-css-with-react-js-45ng</link>
      <guid>https://dev.to/turpp/what-is-tailwind-css-with-react-js-45ng</guid>
      <description>&lt;p&gt;React.js is an exceptional tool to build the frontend to your applications. You can max out React’s functionality and build the most complex application ever, but no one will want to use your application if it is not ascetically appealing. I have used straight CSS, Bootstrap, and Tailwind to make my applications pretty. They all have their own advantages and disadvantages but for the purpose of this article I want to share what Tailwind CSS is and my experience using it on my React applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-tailwind-css"&gt;
  &lt;/a&gt;
  What is Tailwind CSS
&lt;/h2&gt;

&lt;p&gt;Tailwind CSS is a utility-first CSS framework. This means that you use class names (utilities) to style your application. You many be thinking that is the same as straight CSS. With straight CSS you create your own class names and in a separate CSS file, you list your styling properties and values(unless using inline styling…more on this later). Tailwind CSS has predetermined class names that represent the CSS properties you would have in your CSS file. This allows you to use class names in your components and never have to leave the file. This helps speeds up your development especially if you work on a laptop with small screen real estate.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-about-react-inline-styling"&gt;
  &lt;/a&gt;
  What about React Inline Styling
&lt;/h2&gt;

&lt;p&gt;Why bring in this framework when you can do the same thing with inline styling? When using inline styling in react you are creating Javascript objects to handle your styling. In order to do this you must wrap your styling with double curly braces &lt;code&gt;style={{}}&lt;/code&gt;. You also have to write your styles differently. Since these are Javascript objects that we are injecting into our JSX, we have to write our styles in camelCase. &lt;code&gt;background-color: red;&lt;/code&gt; == &lt;code&gt;{{backgroundColor: “red”}}&lt;/code&gt; Having to declare the whole property and its value can make your code very congested and harder to read. Tailwind uses a class name that represents that property. These class names are shorter and have set values to help with readability concerns and constancy. &lt;/p&gt;

&lt;p&gt;One major difference is that Tailwind allows you to manage state variants and responsiveness directly in your component. Inline styles does not give you this capability. Tailwind CSS opens up the ability to adjust the component for different media sizes and even add effects like hover and focus with just using different class names. Tailwind pretty much takes inline styling and increases it readability and capability. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css-fundamentals"&gt;
  &lt;/a&gt;
  Tailwind CSS Fundamentals
&lt;/h2&gt;

&lt;p&gt;Now that we know what Tailwind CSS is, let's talk about the fundamentals to get you started. The initial setup for Tailwind can be a little tricky but the documentation does a great job walking you through. Check it out here. (&lt;a href="https://tailwindcss.com/docs/guides/create-react-app"&gt;https://tailwindcss.com/docs/guides/create-react-app&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tailwindconfigjs"&gt;
  &lt;/a&gt;
  tailwind.config.js
&lt;/h3&gt;

&lt;p&gt;This is your configuration file. Tailwind comes default with dedicated class names (utilities) that style in a certain way. This is great for getting started but what if you want to change some of the defaults? Instead of creating custom classes to add to your css file, you can adjust these class names and their actions in the config file. It's very easy to use and update. In the documentation for every main utility, at the bottom of the page, it will show you how to adjust the config file to add your own variants.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#utilityfirst"&gt;
  &lt;/a&gt;
  Utility-First
&lt;/h3&gt;

&lt;p&gt;This is the magic sauce of Tailwind CSS. If you have never used a Utility-First framework before it can be a little bit of a learning curve, but trust me its worth your time! Learning the different class names may seem overwhelming but they are very intuitive on how they are named. Learning these names is way better than having to constantly come up with new unique class names like with CSS. Also with each utility having a set value it allows you to bring more constancy to your design. Instead of having to remember the class you created three days ago and its value, all you have to remember is that for your titles used &lt;code&gt;m-8&lt;/code&gt; (&lt;code&gt;margin: 2 rem&lt;/code&gt;). Much simpler.&lt;br&gt;
To use these utilities all you have to do is add the corresponding utility to the class name of your element. If I wanted to create a &lt;code&gt;div&lt;/code&gt; that had a &lt;code&gt;border-style: solid; border-width: 2px;&lt;/code&gt; &lt;code&gt;max-width: 100%&lt;/code&gt; and had a &lt;code&gt;box-shadow&lt;/code&gt; all i would have to do is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"width-full border-solid border-2 shadow"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
Hi there!
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h3&gt;

&lt;p&gt;The documentation is outstanding. It list out everything you need to know and gives your code examples. It even gives examples of how to customize variants with your config file. Whenever I am developing I always have the documentation open in a separate tab. The documentation has a search bar that speeds up the learning curve dramatically. If you want to add &lt;code&gt;padding&lt;/code&gt; to a &lt;code&gt;div&lt;/code&gt; but don’t remember the class name or sizes all you have to do is type &lt;code&gt;padding&lt;/code&gt; in the search bar and it will take you directly to that section of the documentation. I use this life line every time I develop to double check my class names and also see what values are available for each property. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#components"&gt;
  &lt;/a&gt;
  Components
&lt;/h3&gt;

&lt;p&gt;Wait I thought this was a utility based framework! You are correct, but tailwind has kindly enough created some nicely designed components using their utilities to hep get you started. This is different than how React-Bootstrap handles their components. Tailwind components are just blocks of code just how you would type if you did it yourself. This allows you to edit the component and make it yours much easier. They have a list of hundreds of components that you can use. Unfortunately, to have access to them all it does cost some money. They have some free ones though to get your started though! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#base-styles-and-extracting-components"&gt;
  &lt;/a&gt;
  Base Styles and Extracting Components
&lt;/h3&gt;

&lt;p&gt;One major pain point of Tailwind is adding the same classes to the same type of elements over and over again. This makes developing very repetitive and also hard to maintain. Luckily, Tailwind allows you to create base styles and custom component classes. You can add base styles in your CSS files right under where you added Tailwind in the installation. You can make default styles for certain tags. I would only recommend this if you know that this tag will always need to be styled this way. It allows you to simply just use the tag instead of having to use a tag and add all the utilities over and over. Check out &lt;a href="https://tailwindcss.com/docs/adding-base-styles"&gt;https://tailwindcss.com/docs/adding-base-styles&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;If you have something like a button or a card that is constantly styled and used in multiple places in your application, it's best to extract the component. This is very similar to creating a custom class name like you would in CSS. The documentation walks you through how to do this at &lt;a href="https://tailwindcss.com/docs/extracting-components"&gt;https://tailwindcss.com/docs/extracting-components&lt;/a&gt;. This allows you to save time from having to type the same utilities over and over again and also makes your code much more maintainable. If you need to change the style of the button you can do it in one place instead of finding every button and making sure all the utilities are the same.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-experience"&gt;
  &lt;/a&gt;
  My Experience
&lt;/h2&gt;

&lt;p&gt;I don’t believe there is any perfect framework and personal preferences determine a lot of what you find practical. That is what I love about this profession. There are so many different ways to get the job done. It's up to you as a developer to determine what to use and when. So where does Tailwind CSS fall in my development? &lt;br&gt;
I really enjoy using tailwind. I enjoy being able to do mostly everything in one spot. I can just add the properties I need in the flow of my coding instead of having to create my element and then create a class name and then go to a separate file and add the different properties. To me its much easier to read than straight CSS. I may just do a poor job of organizing my CSS files, but I feel like every time I use CSS my files just keep getting bigger and more overwhelming. With Tailwind all the styling is right there with the element and I can make small changes without having to worry about messing up other parts of my application. I try to use Tailwind every time I take on a project. The only time I vary is when I do not care about it looking a certain way. When I just want to develop something fast and not to concern with it looking unique, I will usually use Bootstrap. Their components are hard to beat for fast development. Other than that, Tailwind is my go to for styling my web applications. Its intuitive and very customizable!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Normally when writing articles I show some coding examples to bring the topic home but to be honest Tailwind documentation is so well layout with examples that I couldn’t do it justice. Go check out the documentation and see how code looks. &lt;a href="https://tailwindcss.com/docs"&gt;https://tailwindcss.com/docs&lt;/a&gt; At first glance seeing so many class names that you don’t recognized can be overwhelming, but I promise a little time with it and it will become second nature to you. I hope this article gave you a good overview of what Tailwind CSS is and help answer any questions for folks who were considered trying it out.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>tailwindcss</category>
      <category>react</category>
    </item>
    <item>
      <title>Cross-site scripting (XSS) attack - Part 2</title>
      <author>Mariam Reba Alexander</author>
      <pubDate>Thu, 22 Jul 2021 21:09:20 +0000</pubDate>
      <link>https://dev.to/ms_74/cross-site-scripting-part-2-1d1l</link>
      <guid>https://dev.to/ms_74/cross-site-scripting-part-2-1d1l</guid>
      <description>&lt;p&gt;In the last post I went through what is Cross-site scripting and Stored XSS attack, a type of cross-site scripting caused by stored javascript in database from user inputs. If you haven't read it, here is the &lt;a href="https://dev.to/ms_74/cross-site-scripting-xss-attack-part-1-3d9a"&gt;link&lt;/a&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As frontend developers we are constantly adding and releasing new features or fixing bugs as per business requirements, and it's hard to keep vigilance on the security side of things. It has become a secondary concern and we are far behind the backend and Devops engineers for whom this is a primary and regular part of their thinking in development process. Today security attacks are on the rise and we need to take measures from both server side and client side before its too late.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this post I will go through another type of XSS attack and how to defend against it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-reflected-crosssite-scripting-attack"&gt;
  &lt;/a&gt;
  2. Reflected Cross-site scripting attack
&lt;/h2&gt;

&lt;p&gt;Suppose a webpage has a form page and on submission a HTTP request is made to check if the username exists. If the validation error then displays back the username entered within its error message, the hacker can take advantage of this vulnerability and enter a script into the input field. When the validation error message throws back the the error message with the script, the script gets executed. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WaMG9nAo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ubt9weayo1minqijjeq9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WaMG9nAo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ubt9weayo1minqijjeq9.png" alt="Reflected xss"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another instance is when someone search for a search term, say &lt;em&gt;tesla&lt;/em&gt; in their favourite search engine &lt;code&gt;https://www.dooble.com/search?q=tesla&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p8OJEtQ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4k5iyjuohwwdwly9lw31.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p8OJEtQ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4k5iyjuohwwdwly9lw31.png" alt="Search result for Tesla"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Imagine if the search term &lt;em&gt;tesla&lt;/em&gt; displays above the search results extracted from the search term in the URL, a hacker can possibly replace the &lt;em&gt;tesla&lt;/em&gt; parameter in the URL with malicious script, and have that script code execute whenever anybody opens that URL in their browser (Most search engines are possibly protected against this).&lt;br&gt;
 An attacker could then email the URL with the malicious code as a link to a victim, or trick a user into visiting with the URL through a form. On clicking the link the user is then taken to the vulnerable web site, which reflects the attack back to the user’s browser. As it came from a “trusted” server, the browser executes the code.&lt;/p&gt;

&lt;p&gt;When the injected script is reflected off the web server as above, we call this type of attack a &lt;strong&gt;reflected cross-site scripting attack&lt;/strong&gt;. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#defence-1-again-escape-the-content-received-from-http-requests"&gt;
  &lt;/a&gt;
  Defence #1 - Again... Escape the content received from HTTP requests
&lt;/h3&gt;

&lt;p&gt;The prevention for these type of attacks is again to escape the HTML by replacing its special characters with their corresponding entities.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--916n3VS3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atrzorsvcrk6zhhx5c1v.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--916n3VS3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atrzorsvcrk6zhhx5c1v.jpg" alt="Again gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#encodeuri"&gt;
  &lt;/a&gt;
  encodeURI
&lt;/h4&gt;

&lt;p&gt;I mentioned earlier that most modern UI frameworks protects against XSS (make sure you read the security recommendations in the framework's documentation) and also about the javascript function &lt;code&gt;encodeURI()&lt;/code&gt; that encodes strings, (specifically URI's). &lt;br&gt;
This function encodes special characters except &lt;code&gt;,/?:@&amp;amp;=+$#'&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://example.com/blog/1?comment=&amp;lt;script&amp;gt;alert(XSS1)&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://example.com/blog/1?comment=%3Cscript%3Ealert(XSS1)%3C/script%3E
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may as well look into the function &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent"&gt;encodeURIComponent()&lt;/a&gt; which encodes strings that is part of a URI. &lt;/p&gt;

&lt;p&gt;Both these functions does not escape the &lt;code&gt;'&lt;/code&gt; (single quote) character, as it is a valid character for URIs.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;'&lt;/code&gt; character is commonly used as an alternative to &lt;code&gt;"&lt;/code&gt;(double quote) for HTML attributes, e.g. href='MyUrl', which may introduce vulnerabilities. As it won't be escaped, input that includes it, will break the syntax resulting in an injection.&lt;/p&gt;

&lt;p&gt;If you are constructing HTML from strings, either use &lt;code&gt;"&lt;/code&gt; instead of &lt;code&gt;'&lt;/code&gt; for attribute quotes, or add an extra layer of encoding (&lt;code&gt;'&lt;/code&gt; can be encoded as %27).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#npm-libraries"&gt;
  &lt;/a&gt;
  npm libraries
&lt;/h4&gt;

&lt;p&gt;It is also recommended to use npm libraries like &lt;a href="https://www.npmjs.com/package/xss-filters"&gt;xss-filters&lt;/a&gt; and &lt;a href="https://github.com/cure53/DOMPurify"&gt;DOMPurify&lt;/a&gt; which provides filtering of unsafe characters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const safeUsername = xssFilters.inHTMLData(unsafeUsername);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that &lt;code&gt;xss-filters&lt;/code&gt; comes with some warnings, &lt;a href="https://www.npmjs.com/package/xss-filters#api-documentations"&gt;read it here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When using validation on forms, try to use npm packages similar to &lt;a href="https://github.com/validatorjs/validator.js"&gt;validator.js&lt;/a&gt; to sanitise the string inputs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;validator.escape(username); //replace &amp;lt;, &amp;gt;, &amp;amp;, ', " and / with HTML entities.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the next post I will be going through the next type of XSS attack, &lt;em&gt;DOM based XSS attack&lt;/em&gt; and how to defend against it. Stay tuned! &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>security</category>
    </item>
  </channel>
</rss>
