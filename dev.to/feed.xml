<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>From Junior to Senior Software Engineer at Klarna in 2.5 years</title>
      <author>Kevin Peters</author>
      <pubDate>Mon, 31 May 2021 12:23:50 +0000</pubDate>
      <link>https://dev.to/getworkrecognized/from-junior-to-senior-software-engineer-at-klarna-in-2-5-years-267</link>
      <guid>https://dev.to/getworkrecognized/from-junior-to-senior-software-engineer-at-klarna-in-2-5-years-267</guid>
      <description>&lt;p&gt;A promotion to senior level in a software engineering career brings many benefits: More compensation, more responsibilities, and a better position in your career progression. Getting promoted is difficult though. But let me tell you how I have applied simple tips and tricks to get promoted to senior-level at &lt;a href="https://www.klarna.com/"&gt;Klarna, one of the technology companies in Europe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After graduating from university in 2017 in Germany, I found a job based on an internship done during graduation. A small startup. But after 1.5 years I could not see my career progressing so quickly and growth opportunities were rare. So I decided to look around and after many rejections, I got an interview at Klarna. I do not know how but I completed the interview and got an offer and was hired as a Junior Software Engineer.&lt;/p&gt;

&lt;p&gt;A reason I wanted to join Klarna was that finally, I would have many other software engineers around me that would teach me how to build products at scale. In startups, the requirements for a software engineer are completely different from what big companies want. You need to focus more on the product. Have to tinker with marketing and work closely with Sales. It is a great opportunity for most people since you will learn a variety of skills. In the end, the dream of most software engineers is to work at a big company. You will have more dedicated time to actually focus on engineering and of course, the money is better as well.&lt;/p&gt;

&lt;p&gt;So let us look at what my progression at Klarna has been like.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#career-levels-at-klarna"&gt;
  &lt;/a&gt;
  Career Levels at Klarna
&lt;/h2&gt;

&lt;p&gt;Klarna is really good at telling at which stage in your career you really are. They have a detailed career ladder based on different metrics. &lt;a href="https://getworkrecognized.com/tools/career-ladders-explorer/klarna-2020"&gt;These metrics are symbolized through 8 Leadership Principles&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Customer obsession&lt;/li&gt;
&lt;li&gt;Deliver results&lt;/li&gt;
&lt;li&gt;Let the team shine&lt;/li&gt;
&lt;li&gt;Challenge the status quo&lt;/li&gt;
&lt;li&gt;Start small and learn fast&lt;/li&gt;
&lt;li&gt;Courage&lt;/li&gt;
&lt;li&gt;Hire and develop exceptional talent&lt;/li&gt;
&lt;li&gt;Detailed thinkers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Based on these leadership principles there is a matrix that is built up similar to something like this:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level 1 - Customer obsession:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An employee can put themself into the shoes of the customer&lt;/li&gt;
&lt;li&gt;An employee understands how working on specific tasks helps customers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Level 2 - Customer obsession:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An employee is able to create tickets based on customer’s needs&lt;/li&gt;
&lt;li&gt;An employee deeply cares for the customer and builds features that overdeliver on the scope of the ticket&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are of course a lot more levels for employees at Klarna. Currently, employees range from Level 1 to Level 8, where for Software Engineers level 1 is Junior and level 3 is senior. Further levels are harder to achieve and split up into an Individual contributor or management path which will be discussed later.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#initial-rating-during-the-hiring-process"&gt;
  &lt;/a&gt;
  Initial rating during the hiring process
&lt;/h3&gt;

&lt;p&gt;During your interviews with Klarna, you will get rated against these principles. Klarna’s interview process is quite standard in the technology industry and is built similar to this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Recruiter call&lt;/li&gt;
&lt;li&gt;Homework task, Leetcode-style questions&lt;/li&gt;
&lt;li&gt;On-Site, normally a review of the homework task + additional whiteboarding problem&lt;/li&gt;
&lt;li&gt;System Design&lt;/li&gt;
&lt;li&gt;Behavioral Interview with the hiring manager&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;During this process and based on your resume you will get rated. Is this process fair? Might be, but you always have the option to negotiate your level at that stage. Especially the round about system design will decide how you get leveled.&lt;/p&gt;

&lt;p&gt;Personally, I had little to no experience with system design tasks before since working in a startup did not expose me to such things. Luckily the system-design-primer guide exists that you can learn with and excel at those tasks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#promotion-rounds"&gt;
  &lt;/a&gt;
  Promotion rounds
&lt;/h3&gt;

&lt;p&gt;As within every bigger company, there is a promotion window at Klarna. It appears to happen once to twice per year, even though the process is currently changing. But the windows are build up the same. Normally you start a conversation with your manager first when the promotion window is coming up (1-2 months before) and in that conversation, you have to feel if your manager is willing to put in your promotion request. Once this is validated you can ask them in the same meeting if it would be ok to send out feedback for a 360-degree review. This means that you send out a form to all your colleagues and they rate you. Of course against the leadership principles. This can take some time!&lt;/p&gt;

&lt;p&gt;Once you have received all the feedback you gather and &lt;a href="https://getworkrecognized.com/blog/how-to-write-the-perfect-self-review"&gt;summarize it and present it to your manager&lt;/a&gt;. Your manager then has to decide if they put you forward to the next round of the promotion process. If they decide on it, then you have to basically write a short elevator pitch on why you should get promoted. That should be really short and be readable within a minute. Once that is done, the control is out of your hand. The promotion case will be discussed in a bigger group of engineering managers and stakeholders. Once approved you will receive your promotion.&lt;/p&gt;

&lt;p&gt;I went through that process twice and what really helped me was reminding my colleagues of what I have done in the past 6 months or year. Most of the employees forget what they have done themself in the past period so they will definitely not remember what you have achieved. For this, I track my work on a daily basis, and before sending out the form to collect feedback I am summarizing my achievements in a small brag document. 1 to 2 pages long. This will help my colleagues to remind them of where we actually worked together. This brag document I will attach to the form to collect feedback so the colleagues have an easy way to fill out the form.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-career-path-for-a-software-engineer-at-klarna"&gt;
  &lt;/a&gt;
  The career path for a software engineer at Klarna
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NtJvsJyU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmn9eg21bqqyse7d82rx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NtJvsJyU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmn9eg21bqqyse7d82rx.png" alt="A graph showing the usual career path at Klarna"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The engineering paths in Klarna are described quite clearly. As a software engineer, you will rise through the ranks from junior to senior normally with a focus on management but also contributing characteristics. Once reaching the senior level you will have to learn what you want to do in the future life. Stay on the individual contributor path or go into management. Both paths are valid approaches. Up to senior-level, it will not really make a difference on what you focus on, you need to have a substantial amount of skills within core engineering but also management.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#opportunities-i-took"&gt;
  &lt;/a&gt;
  Opportunities I took
&lt;/h2&gt;

&lt;p&gt;So how did I rise through the ranks? As there is a system with rising through the ranks, you can game the system of course. There are different parameters that you will work on during the promotion process but it is, of course, an individual approach.&lt;/p&gt;

&lt;p&gt;Once I landed at Klarna, I realized people give a lot of thought to leadership principles. If it is about product decisions or just how to implement a new feature. The leadership principles should be applied. A good way to see that is in the discussion. If someone’s decision is violating the leadership principles a lot of people will argue against that decision. In general, it is driving the development at Klarna forward. So make use of these leadership principles in discussions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#follow-the-career-ladder"&gt;
  &lt;/a&gt;
  Follow the career ladder
&lt;/h3&gt;

&lt;p&gt;As said before, Klarna focuses a lot on Leadership Principles. In my first promotion/feedback round I got a lot of stellar feedback, but also a lot of points on what to improve on. I had a lot of 1-on-1’s with my manager to focus on my growth goals. For example, we discussed what I could do within the next month regarding development work that will help me. At the beginning at Klarna, I struggled with the “Let the team shine” principle a lot. I did not had ideas on how to present the team. So my manager proposed different things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Join a group outside of the team for voluntarily work like maintaining third-party libraries used by the team within Klarna&lt;/li&gt;
&lt;li&gt;Or joining the engineering blogging or open-source group&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I decided on the second step and quickly checked what is needed to get to the next level to fulfill these requirements. I represented my team within those meetings, but also myself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://getworkrecognized.com/login"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wud4ToHx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yoqkknsv9ak4ir072vg6.gif" alt="Promotional banner for getworkrecognized"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But also on the team side, I got assigned to interesting tasks that helped me to grow. Working on creating new services and making sure they are scalable to millions of requests. I got put together with more senior engineers to do pair coding with them, but we also include mob programming within our team, a technique where the whole team gets together and codes something.&lt;/p&gt;

&lt;p&gt;These things really helped me to go from level 1 to level 2. For the transition from level 2 to level 3 the circumstances are a bit different. You have to work on different categories that are mentioned now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lead-the-team"&gt;
  &lt;/a&gt;
  Lead the Team
&lt;/h2&gt;

&lt;p&gt;When reaching level 2 and trying to get to level 3 another skill is getting a lot more important: Leadership. What does this mean? As a senior engineer Klarna expects from you two important things basically:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Can you influence the product and lead implementations that your team creates or you come up with?&lt;/li&gt;
&lt;li&gt;Are you teaching people to code in a well way and can make developers at Klarna more efficient?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these things can be tackled and be focused on. Once I reached level 2 I put a lot of focus on that. I introduced the technique of creating technical design documents in our team. These are documents that sketch out the feature and architecture. They also lead the conversation about trade-offs of implementations and are living documents for taking decisions with the product manager. It helps us to get a clear mind about a feature. Once that is done it is collaboration time with your product owner on creating JIRA tickets for that feature. Once tickets are estimated and assigned, maybe go over them with the assigned person to help them understand each part of the ticket. Be descriptive in the ticket descriptions and help to give pointers on what to look out for. This is especially useful for team members that are new to the team. What I always like to do is pasting the paths of the core files that would need to be touched for the files. Based on that even junior developers would be able to code the feature mostly independently.&lt;/p&gt;

&lt;p&gt;This gets us to the next point as well: Leading developers. To get to level 3 at Klarna you have to support the engineers in your team. It is more a job of educating and pair coding with them. Give them space and the right tips and the right time. This is important for your team level. But it can get even more important outside of the team.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#opportunities-outside-of-your-team"&gt;
  &lt;/a&gt;
  Opportunities outside of your team
&lt;/h3&gt;

&lt;p&gt;As mentioned before, teaching developers to be more efficient outside of your team is also a huge priority to get promoted to level 3. Next to it, it becomes important that you work together with people outside of your team. This will eventually bobble up to other engineering managers that you are doing good work with their engineers. There are different activities like changing code for other teams and so on. Just receiving recognition. I did it a bit differently.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#within-the-domain"&gt;
  &lt;/a&gt;
  Within the Domain
&lt;/h3&gt;

&lt;p&gt;At Klarna, we have a concept called domains. Domains are small subsections of the business. For example, we have a merchant domain that just deals with the merchant-aspect of the business but also a domain for the Klarna app. Some are more B2B focused, some more on the B2C side. Overall you can say the teams work closely together but each team has its own KPIs. But what becomes more important are the domain KPIs. Your team’s KPIs will be looked at by some people but if you made larger contributions to the domain’s KPIs people will start recognizing you.&lt;/p&gt;

&lt;p&gt;For example, in our domain, we are using a monorepo. A big repository that holds almost all services used in our domain. Improving this monorepo helps everyone in your domain to build better products and focus on features and implementation rather than infrastructure. I found many tasks like that, like creating a project to automatically update package dependencies throughout the monorepo. This will give you exposure to a wide audience and will make your case for promotions stronger.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#open-source"&gt;
  &lt;/a&gt;
  Open Source
&lt;/h3&gt;

&lt;p&gt;Most of the technology companies promote open source in one way or the other. For Klarna it was always the plan to open source part of the software to give back to a community of developers. The process was not there, so the company initiated a group regarding open source at Klarna. This group was the catalysator to set up a workflow, make sure legal requirements are met, and promoting open source when possible. I joined that group initially and build up the processes and many more things regarding the topic. For example, we wanted to have an incubator set up where projects live in private first before getting open-sourced. This and many other smaller projects helped me work with various other engineers and get recognition. I even presented the results of a hackathon during an engineering all-hands meeting in front of the hundreds of engineers working at Klarna, challenging but rewarding.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#blogging"&gt;
  &lt;/a&gt;
  Blogging
&lt;/h3&gt;

&lt;p&gt;Branding is really important for Klarna. It blends in with their leadership principle called “Hire and develop exceptional talent”. Blogging about the technology used at Klarna will help with hiring in the long term because it will create some kind of trust in people applying. The biggest companies blogging about their technology are probably:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/airbnb-engineering"&gt;Airbnb Engineeering &amp;amp; Data Science&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://netflixtechblog.com/"&gt;The Netflix Tech Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eng.uber.com/"&gt;Uber Engineering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@Pinterest_Engineering"&gt;Pinterest Engineering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eng.lyft.com/"&gt;Lyft Engineering&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of them succeed because of great engineers that get hired. And part of the reason might be the blog as well. By sharing technological information you can create an environment of learning and discovering new things.&lt;/p&gt;

&lt;p&gt;I helped authors within Klarna to create blog articles. I found ideas and asked if people would be willing to create a blog article regarding some interesting topics. I helped them with graphics, copywriting, proofreading, and many other things. And here is the important part again: I worked with other engineers. They will know about me and their manager will most likely also know about me by then. A better standing for me in the company.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#be-proactive-think-ahead"&gt;
  &lt;/a&gt;
  Be proactive, Think ahead
&lt;/h3&gt;

&lt;p&gt;A big part of my promotion rounds was that I was proactive in my action, plans, and projects. It all starts with asking for feedback. I prepare other people to remember what I have done so they can give me feedback in an easier way. I focus on my weaknesses and try to improve them actively.&lt;/p&gt;

&lt;p&gt;In general, I was also looking at what the company’s or domain’s KPIs were and how they played with the KPIs of our team. I challenged my product owner a lot and made it clear that I want to work on certain things because it will help the company in the long term. I also had the opportunity to join a temporary team dealing with major support problems that were brought up at the domain level. It was great exposure to a new development space, I worked again with many new people, but most importantly, we solved the domain’s problems in record time. It was stressful but rewarding and the promotion was part of it. Look out for teams or projects that will help the company grow. Do not just sit there and grind the tickets you are assigned to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#write-up-your-achievements"&gt;
  &lt;/a&gt;
  Write up your achievements
&lt;/h2&gt;

&lt;p&gt;An important part of my journey was gathering feedback and having strong evidence of my achievements. How have I made this possible? I wrote it down.&lt;/p&gt;

&lt;p&gt;Writing is an essential skill in your career but keeping a work diary is not difficult. Just at the end of every day write up what you have done throughout the day. Remind yourself of your weaknesses and how you improved them. Keeping these notes will be super important. With getworkrecognized, I tracked more than a year of work notes and it helped me to write my self-review but also receive stellar performance reviews from my peers.&lt;/p&gt;

&lt;p&gt;A simple system I have used is to track all work but tag the notes. Assign them to the leadership principles Klarna has, and you will see where you have to grow or where you need to focus on in the next weeks a bit more. Make a plan and put some tasks around that into the sprint or your upcoming weeks.&lt;/p&gt;

</description>
      <category>career</category>
    </item>
    <item>
      <title>Pull Request Checklist</title>
      <author>Kryštof Řeháček</author>
      <pubDate>Mon, 31 May 2021 12:19:45 +0000</pubDate>
      <link>https://dev.to/krystofee/ultimate-pull-request-checklist-4aon</link>
      <guid>https://dev.to/krystofee/ultimate-pull-request-checklist-4aon</guid>
      <description>&lt;p&gt;Hello there 👋 I've created an ultimate pull request checklist which summarises some of the &lt;strong&gt;best practises&lt;/strong&gt; we pursue in every pull request.&lt;/p&gt;

&lt;p&gt;There are many blogposts about merge review checklists, but none of them covered everything I wanted so I've created my own.&lt;/p&gt;

&lt;p&gt;Authors should memorise it and apply these rules when making a pull request. Otherwise you'll burn reviewer's time and later your time fixing the threads (that you could prevent).&lt;/p&gt;

&lt;p&gt;We are using &lt;strong&gt;Gitlab&lt;/strong&gt; for vcs, &lt;strong&gt;Django&lt;/strong&gt; on BE and &lt;strong&gt;React w/ typescript&lt;/strong&gt; on FE. So few points may be related to them.&lt;/p&gt;

&lt;p&gt;There it is:&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#guide-to-merge-requests"&gt;
  &lt;/a&gt;
  Guide to merge requests
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Review your code outside the editor you've written the code in and review the code once more in VCS.&lt;/li&gt;
&lt;li&gt;Have a clear understanding of the problem and set the expectations on what it should do and how before you start to code. Evaluate this once more when you do a self-review.&lt;/li&gt;
&lt;li&gt;You should be able to draw a simple diagram and explain your solution to some colleague. This will help you find any possible problems before you start to code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#code-amp-design"&gt;
  &lt;/a&gt;
  Code &amp;amp; Design
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Does it do what it is supposed to do?&lt;/li&gt;
&lt;li&gt;Did you remove everything that is not supposed to be there?&lt;/li&gt;
&lt;li&gt;Aren't there any debug prints or &lt;code&gt;TODO&lt;/code&gt; comments you want to do or remove?&lt;/li&gt;
&lt;li&gt;Is the branch up-to-date with master?&lt;/li&gt;
&lt;li&gt;Isn't there any conceivable way this could break other parts of the system?&lt;/li&gt;
&lt;li&gt;Check all of the possible edge cases and have a solution for them.&lt;/li&gt;
&lt;li&gt;Is the code easy to read and understand? Did you choose the best names and organise things as cleanly as possible?

&lt;ul&gt;
&lt;li&gt;name should not involve any historical context&lt;/li&gt;
&lt;li&gt;name should be clear to any developer who passes by or sees the code for the first time&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Isn't the functionality you've added already implemented somewhere else? If it's duplicated, reconsider the design.

&lt;ul&gt;
&lt;li&gt;if you cannot figure out how to deduplicate the code, try drawing a diagram of the system and find the pure underlying abstraction - there is always an answer&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Is there a single source of truth to every piece of logic?&lt;/li&gt;
&lt;li&gt;Ask yourself - How much expertise and context will anybody reading this code need to understand?&lt;/li&gt;
&lt;li&gt;Did you introduce any new abstractions?

&lt;ul&gt;
&lt;li&gt;Don't they cause additional complexity that can be achieved without the abstraction?&lt;/li&gt;
&lt;li&gt;Are you able to draw a simple diagram of the system?&lt;/li&gt;
&lt;li&gt;Did you ever see similar abstraction in some other software?&lt;/li&gt;
&lt;li&gt;Is it as simple as possible?&lt;/li&gt;
&lt;li&gt;Will it be easy to expand with more features? Have you thought about what other features we could add there and if it's possible?&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Is there anything you are not sure about? Just ask.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#frontend"&gt;
  &lt;/a&gt;
  Frontend
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Did you use already implemented ui components?&lt;/li&gt;
&lt;li&gt;Is UI visually consistent? (font size, line height, margin, padding)&lt;/li&gt;
&lt;li&gt;Can you find similar UI in other software?

&lt;ul&gt;
&lt;li&gt;Our's shouldn't be different, else explain why it is so.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;If you added any complex multi-step flow, then you should be able to draw a diagram of it and explain it including possible branches and error validation.&lt;/li&gt;
&lt;li&gt;Does it look OK on phone?&lt;/li&gt;
&lt;li&gt;How is the copy? Are sentences well-formed and clear? Any spelling error or typos?&lt;/li&gt;
&lt;li&gt;What if the request to the backend fails?&lt;/li&gt;
&lt;li&gt;Did you make any changes to the component in the &lt;code&gt;ui&lt;/code&gt; or &lt;code&gt;components&lt;/code&gt;? Check if all usages of the component still work as expected.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#backend"&gt;
  &lt;/a&gt;
  Backend
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Aren't there any possible security threats?&lt;/li&gt;
&lt;li&gt;Isn't any private data exposed to the public? Is the public part of the app available to the public?&lt;/li&gt;
&lt;li&gt;Aren't there any circular module dependencies?&lt;/li&gt;
&lt;li&gt;Did you add any inline import?

&lt;ul&gt;
&lt;li&gt;Why it's so? Are you able to draw a simple diagram of the system and explain?&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Models should not have any methods which doesn't really belong there.&lt;/li&gt;
&lt;li&gt;Are there any issues that will become problems in the next months or years?

&lt;ul&gt;
&lt;li&gt;Thing them out and discuss them with the reviewer in the merge request.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Does the new classes or modules have only single responsibility?&lt;/li&gt;
&lt;li&gt;Is it possible to write tests for this functionality?&lt;/li&gt;
&lt;li&gt;What if anything fails? Prevent side-effects before changes are committed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#migrations-checklist"&gt;
  &lt;/a&gt;
  Migrations checklist
&lt;/h2&gt;

&lt;p&gt;Understand that a migration can corrupt data and it is extremely difficult (sometimes impossible) to fix it. A single wrong migration can result in several man-days burnt in vain. We've been through this. It's not nice. Be careful.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Migrations should be always, reversible. When it's data transformation, you must write reverse transformation.&lt;/li&gt;
&lt;li&gt;Never delete a column that was previously used, instead keep the field in the model and mark it with comment &lt;code&gt;# DEPRECATED in version vX.Y.Z&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Never delete data that is used – if you need to transform data, create a new column and do the transformation there, keep the original data in the original column, use deprecation comment or prepend &lt;code&gt;old_&lt;/code&gt; to the column&lt;/li&gt;
&lt;li&gt;If you have experimented with database schema before settling for a final solution, squash your migrations&lt;/li&gt;
&lt;li&gt;Be extra careful about migrating large tables – there may be millions of rows in that tables and not all operations are safe to run, because it would take too long and fail

&lt;ul&gt;
&lt;li&gt;in that case, create async task which should be run after the code is deployed. Pay attention on that the task should be resumable, because it can be interrupted by failure or another deploy.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Always use &lt;code&gt;queryset.iterator()&lt;/code&gt;, which will prevent memory issues&lt;/li&gt;
&lt;li&gt;Log migration progress by step of reasonable size&lt;/li&gt;
&lt;li&gt;When doing data transformation, create some sample data, so you can correctly handle the edge cases&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#peer-review"&gt;
  &lt;/a&gt;
  Peer review
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;a href="https://chrome.google.com/webstore/detail/gitlab-unresolved-threads/dhmmedpdnmhmdehopnihlpiapdgakkld"&gt;this chrome extension&lt;/a&gt; to easily see unresolved threads on merge requests. &lt;em&gt;(Gitlab only)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Check all of the points above and create merge request threads for any violations.&lt;/li&gt;
&lt;li&gt;Merge request threads should not be resolved without any comment, because then the reviewer needs to check the resolution by himself and it's a waste of time.&lt;/li&gt;
&lt;li&gt;You should ask the reviewer to review your merge request, it will be merged faster. If it takes too long, the author will lose context of the issue and it will take more time to him and the reviewer fix and review it again.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Feedback is much appreciated.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>codequality</category>
      <category>django</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Menu / Sidebar toggle functionality with pure CSS and no JavaScript.</title>
      <author>Swastik Yadav</author>
      <pubDate>Mon, 31 May 2021 12:11:39 +0000</pubDate>
      <link>https://dev.to/swastikyadav/menu-sidebar-toggle-functionality-with-pure-css-and-no-javascript-1je6</link>
      <guid>https://dev.to/swastikyadav/menu-sidebar-toggle-functionality-with-pure-css-and-no-javascript-1je6</guid>
      <description>&lt;p&gt;In this post we will explore how we can create a toggle functionality for Menu / SideBar with pure CSS and no JavaScript.&lt;/p&gt;

&lt;p&gt;Toggle functionality is often built with JavaScript because it requires handling the click event.&lt;/p&gt;

&lt;p&gt;But it can be built with pure CSS and no JavaScript.&lt;/p&gt;

&lt;p&gt;Here is how.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-the-markup"&gt;
  &lt;/a&gt;
  1 - The Markup
&lt;/h2&gt;

&lt;p&gt;Let's start with a simple  tag for the sidebar.&lt;/p&gt;

&lt;p&gt;HTML&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;aside&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"aside-wrapper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"logo-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;Qpay&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-bars sidebar-toggle"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-home"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt; Home&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-building"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt; Company&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-dollar-sign"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt; Perks&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-file-contract"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt; Legal&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-credit-card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt; Payments&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-headset"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt; Get Help&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-comment"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt; Chat With Us&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/aside&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-add-input-type-checkbox"&gt;
  &lt;/a&gt;
  2 - Add input type checkbox
&lt;/h2&gt;

&lt;p&gt;Just above the aside tag add an input type checkbox.&lt;/p&gt;

&lt;p&gt;HTML&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"toggler"&lt;/span&gt; &lt;span class="na"&gt;checked&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;aside&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"aside-wrapper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"logo-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;Qpay&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-bars sidebar-toggle"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

  ...
&lt;span class="nt"&gt;&amp;lt;/aside&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-toggle-sidebar"&gt;
  &lt;/a&gt;
  3 - Toggle Sidebar
&lt;/h2&gt;

&lt;p&gt;Now based on the checked / Unchecked state of the input, we can show and hide the sidebar in CSS.&lt;/p&gt;

&lt;p&gt;The below code snippet says: If the input is checked, move the sidebar to the left by 250px. (250px is the width of the sidebar.)&lt;/p&gt;

&lt;p&gt;CSS&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Toggler Functionality */&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nt"&gt;aside&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-250px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now toggling the checkbox will show and hide the sidebar.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-hamburger-menu"&gt;
  &lt;/a&gt;
  4 - Hamburger Menu
&lt;/h2&gt;

&lt;p&gt;But we want this to work when we click on the hamburger, not on the checkbox.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Hide the input. (display: none)&lt;/li&gt;
&lt;li&gt;Wrap the hamburger menu in a label tag with the "for" attribute.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;Id&lt;/code&gt;&lt;/strong&gt; of input checkbox and &lt;strong&gt;&lt;code&gt;for&lt;/code&gt;&lt;/strong&gt; attribute for the label should be the same. (This will trigger the checkbox when we click on hamburger icon.)&lt;/p&gt;

&lt;p&gt;HTML&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Input checkbox "ID" = "toggler" --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"toggler"&lt;/span&gt; &lt;span class="na"&gt;checked&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;aside&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"aside-wrapper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"logo-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;Qpay&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Label "FOR" = "toggler" --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"toggler"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-bars sidebar-toggle"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

  ...
&lt;span class="nt"&gt;&amp;lt;/aside&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;And that's it. We created a toggle functionality without JavaScript.&lt;/p&gt;

&lt;p&gt;Here is a complete live demo with the codebase: &lt;a href="https://t.co/aTg6n5DkFG?amp=1"&gt;https://t.co/aTg6n5DkFG?amp=1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you enjoyed this post, found it useful, or felt happy please consider subscribing to my Weekly NewsLetter: &lt;a href="https://swastikyadav.com/subscribe"&gt;https://swastikyadav.com/subscribe&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank You!&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>javascript</category>
      <category>ux</category>
    </item>
    <item>
      <title>Solution: Search Suggestions System</title>
      <author>seanpgallivan</author>
      <pubDate>Mon, 31 May 2021 11:49:34 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-search-suggestions-system-90e</link>
      <guid>https://dev.to/seanpgallivan/solution-search-suggestions-system-90e</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/search-suggestions-system/discuss/1242832"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-1268-medium-search-suggestions-system"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/search-suggestions-system/"&gt;Leetcode Problem #1268 (&lt;em&gt;Medium&lt;/em&gt;): Search Suggestions System&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given an array of strings &lt;code&gt;products&lt;/code&gt; and a string &lt;code&gt;searchWord&lt;/code&gt;. We want to design a system that suggests at most three product names from &lt;code&gt;products&lt;/code&gt; after each character of &lt;code&gt;searchWord&lt;/code&gt; is typed. Suggested products should have common prefix with the &lt;code&gt;searchWord&lt;/code&gt;. If there are more than three products with a common prefix return the three lexicographically minimums products.&lt;/p&gt;

&lt;p&gt;Return &lt;em&gt;list of lists&lt;/em&gt; of the suggested &lt;code&gt;products&lt;/code&gt; after each character of &lt;code&gt;searchWord&lt;/code&gt; is typed.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;products = ["mobile","mouse","moneypot","monitor","mousepad"], searchWord = "mouse"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;[&lt;br&gt;["mobile","moneypot","monitor"],&lt;br&gt;["mobile","moneypot","monitor"],&lt;br&gt;["mouse","mousepad"],&lt;br&gt;["mouse","mousepad"],&lt;br&gt;["mouse","mousepad"]&lt;br&gt;]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;products sorted lexicographically = ["mobile","moneypot","monitor","mouse","mousepad"]&lt;br&gt;After typing m and mo all products match and we show user ["mobile","moneypot","monitor"]&lt;br&gt;After typing mou, mous and mouse the system suggests ["mouse","mousepad"]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;products = ["havana"], searchWord = "havana"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;[["havana"],["havana"],["havana"],["havana"],["havana"],["havana"]]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 3:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;products = ["bags","baggage","banner","box","cloths"], searchWord = "bags"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;[["baggage","bags","banner"],["baggage","bags","banner"],["baggage","bags"],["bags"]]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 4:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;products = ["havana"], searchWord = "tatiana"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;[[],[],[],[],[],[],[]]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= products.length &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;There are no repeated elements in &lt;code&gt;products&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= Σ products[i].length &amp;lt;= 2 * 10^4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;All characters of &lt;code&gt;products[i]&lt;/code&gt; are lower-case English letters.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= searchWord.length &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;All characters of &lt;code&gt;searchWord&lt;/code&gt; are lower-case English letters.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Despite the fact that the clues suggest a &lt;strong&gt;binary search&lt;/strong&gt; and a &lt;strong&gt;trie&lt;/strong&gt;, the optimal solution to this problem needs neither. The substrings formed by adding one letter at a time from the search word (&lt;strong&gt;S&lt;/strong&gt;) are naturally already in lexicographical order, as are the results that we're instructed to push into our answer array (&lt;strong&gt;ans&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;So if we sort the products array (&lt;strong&gt;P&lt;/strong&gt;), we should only ever need to iterate through &lt;strong&gt;P&lt;/strong&gt; once during the entire remaining process of the solution with a &lt;strong&gt;time complexity&lt;/strong&gt; of &lt;strong&gt;O(N)&lt;/strong&gt;. A single binary search would only require &lt;strong&gt;log(N) time&lt;/strong&gt;, but we'd have to perform &lt;strong&gt;M = S.length&lt;/strong&gt; binary searches, so in total they would take &lt;strong&gt;O(M * log(N)) time&lt;/strong&gt;, compared to the &lt;strong&gt;O(N)&lt;/strong&gt; time of a simple iteration.&lt;/p&gt;

&lt;p&gt;With constraints of &lt;strong&gt;1000&lt;/strong&gt; on both &lt;strong&gt;M&lt;/strong&gt; and &lt;strong&gt;N&lt;/strong&gt;, the binary search route would max out at a worse time complexity than iteration. Regardless, the sort itself, which is required for both, requires &lt;strong&gt;O(N * log(N))&lt;/strong&gt; time already, so neither option can decrease the overall time complexity required.&lt;/p&gt;

&lt;p&gt;So in order to only require a single pass through &lt;strong&gt;P&lt;/strong&gt;, we should keep track of the current bounds for the range of matches (&lt;strong&gt;left, right&lt;/strong&gt;), then we'll iterate through the characters (&lt;strong&gt;c&lt;/strong&gt;) of &lt;strong&gt;S&lt;/strong&gt;. At each iteration, we'll first want to move &lt;strong&gt;left&lt;/strong&gt; forward and &lt;strong&gt;right&lt;/strong&gt; back to narrow the range of matches based on the new value of &lt;strong&gt;c&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Then we can add the next three elements of &lt;strong&gt;P&lt;/strong&gt; to our result array (&lt;strong&gt;res&lt;/strong&gt;), as long as they fall inside the range &lt;strong&gt;[left, right]&lt;/strong&gt;. Once that's done, we can add &lt;strong&gt;res&lt;/strong&gt; to &lt;strong&gt;ans&lt;/strong&gt; and move to the next iteration.&lt;/p&gt;

&lt;p&gt;Once we've finished iterating through &lt;strong&gt;S&lt;/strong&gt;, we can &lt;strong&gt;return ans&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Time Complexity: O(N * log(N))&lt;/strong&gt; where &lt;strong&gt;N&lt;/strong&gt; is the length of &lt;strong&gt;P&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Space Complexity: O(1)&lt;/strong&gt; excluding output space required for &lt;strong&gt;ans&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;suggestedProducts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;]?.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;]?.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="nx"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;suggestedProducts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;
        &lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;suggestedProducts&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="no"&gt;P&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="no"&gt;S&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;P&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;P&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
            &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;P&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="no"&gt;P&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;P&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="no"&gt;P&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;--;&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt;
                &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;P&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
            &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;suggestedProducts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>Simple and maintainable error-handling in TypeScript</title>
      <author>James Elderfield</author>
      <pubDate>Mon, 31 May 2021 11:31:31 +0000</pubDate>
      <link>https://dev.to/supermetrics/simple-and-maintainable-error-handling-in-typescript-56lm</link>
      <guid>https://dev.to/supermetrics/simple-and-maintainable-error-handling-in-typescript-56lm</guid>
      <description>&lt;p&gt;Sometimes things fail — that's a fact of life and programming. So as a programmer, you're going to have to write error-handling code. Thankfully TypeScript has some handy features which can help us to create simple and maintainable error-handling code.&lt;/p&gt;

&lt;p&gt;At &lt;a href="https://supermetrics.com/"&gt;Supermetrics&lt;/a&gt; one error-handling approach we take is to encode error states into the TypeScript type system. What does this mean? Simply, I’m referring to code where the semantic property of "being an error" is indicated by a variable's type. For a simplified example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// No information in the type that this is an error,&lt;/span&gt;
&lt;span class="c1"&gt;// you would have to inspect the value to check&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;firstError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Something terrible occurred&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;TerribleError&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;TERRIBLE_ERROR&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// It is clearly indicated in the type that this is an error,&lt;/span&gt;
&lt;span class="c1"&gt;// the exact value of the variable is less important&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;secondError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TerribleError&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;TERRIBLE_ERROR&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Something terrible occurred&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, why is using the type system in this way so great?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-potential-errors-are-indicated-in-function-signatures"&gt;
  &lt;/a&gt;
  1. Potential errors are indicated in function signatures
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doSomethingRisky&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;TerribleError&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a consumer of this function, it’s clear that it may produce an error instead of the expected &lt;code&gt;number&lt;/code&gt;. Some developers like to add documentation on potential errors to the function. While documentation is great, it isn’t tied closely to the code and it’s easy for docs and code to diverge over time - in this case either indicating errors that can never occur or missing new errors added later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-the-compiler-will-not-allow-you-to-forget-to-check-errors"&gt;
  &lt;/a&gt;
  2. The compiler will not allow you to forget to check errors
&lt;/h2&gt;

&lt;p&gt;Using the example function from point 1:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;riskyNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;doSomethingRisky&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Compiler error because you can't add a TerribleError and a number&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;badComputedValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;riskyNumber&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;riskyNumber&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// This is ok as we've guarded against the error case&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;computedValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;riskyNumber&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This means you can't forget to check the errors, although it doesn't force you to handle them in any particular way. Simple static analysis like this is a great safety net for developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-it-can-be-used-to-standardize-error-handling"&gt;
  &lt;/a&gt;
  3. It can be used to standardize error handling
&lt;/h2&gt;

&lt;p&gt;When you have a generic type like &lt;code&gt;Error&amp;lt;E&amp;gt;&lt;/code&gt; where &lt;code&gt;E&lt;/code&gt; is some wrapped data about the error, you now have a generic way of handling errors throughout your codebase. You may even want to go a step further and wrap the good path in some kind of &lt;code&gt;Success&lt;/code&gt; type — we often use the pattern of a &lt;code&gt;Result&lt;/code&gt; type that is defined as something like &lt;code&gt;type Result&amp;lt;T, E&amp;gt; = Success&amp;lt;T&amp;gt; | Error&amp;lt;E&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is incredibly useful for writing generic code like this snippet which implements a function to call a potentially failing function with retries and could be used with any function returning your &lt;code&gt;Result&lt;/code&gt; type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;retry&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;E&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;E&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;numberOfAttempts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;E&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;numberOfAttempts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// isError is a simple custom type guard implemented elsewhere&lt;/span&gt;
    &lt;span class="c1"&gt;// https://www.typescriptlang.org/docs/handbook/advanced-types.html#using-type-predicates&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similar patterns can also be useful for many other cases like chaining operations that could fail, memoization of flaky functions, or handling errors from plugins or other 3rd party code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-not-all-errors-are-the-same"&gt;
  &lt;/a&gt;
  4. Not all errors are the same
&lt;/h2&gt;

&lt;p&gt;You’ll likely have operations that can fail in many exciting ways, which can also be encoded in these types. For example, by a discriminated union:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;NetworkError&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;NETWORK_ERROR&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;httpCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Note that error types can have different properties to include only&lt;/span&gt;
&lt;span class="c1"&gt;// the necessary information&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;EndOfUniverseError&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;END_OF_UNIVERSE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doVeryRiskyThing&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;NetworkError&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;EndOfUniverseError&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;maybeError&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;doVeryRiskyThing&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// These type guards cause the type of maybeError to be narrowed within&lt;/span&gt;
&lt;span class="c1"&gt;// the different scopes&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;maybeError&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;NETWORK_ERROR&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Network request failed with code &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;maybeError&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;httpCode&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;maybeError&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;END_OF_UNIVERSE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-function-polymorphism-can-be-used-to-indicate-when-errors-might-occur"&gt;
  &lt;/a&gt;
  5. Function polymorphism can be used to indicate when errors might occur
&lt;/h2&gt;

&lt;p&gt;By having functions that are polymorphic in arguments and return types, you can write very general functions that provide rich information on when errors can occur. For a contrived example, let's say you have an in-memory cache as part of your application and a more-full-featured and longer-term cache as part of another service. You might use a simple flag on your &lt;code&gt;cache&lt;/code&gt; function to indicate this like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Stores a value to local or remote cache with a given key&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRemoteCache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Accessing the remote cache introduces many new failure modes, such as network errors. By writing polymorphic function definitions with your error types, you can indicate this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// If using local cache then nothing interesting returned&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRemoteCache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// If using remote cache we may return a NetworkError&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;useRemoteCache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;NetworkError&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Implementation signature&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;useRemoteCache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;NetworkError&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Implementation here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final words
&lt;/h2&gt;

&lt;p&gt;The above patterns are by no means unique to TypeScript. For example, similar types are commonly used in functional-style programming in other languages, such as &lt;code&gt;Result&lt;/code&gt; in Rust or &lt;code&gt;Either&lt;/code&gt; in Haskell. You may also spot resemblance in some of these patterns to checked exceptions in Java or the mandatory error handling of &lt;code&gt;error&lt;/code&gt; in Go.&lt;/p&gt;

&lt;p&gt;It's very easy to build your own versions of the above error handling yourself, and in fact, I'd recommend it as a learning exercise if you want to become more familiar with TypeScript. But of course, there are many packages out there to help you. Some examples — in no particular order — include, &lt;a href="https://gigobyte.github.io/purify/"&gt;purify-ts&lt;/a&gt;, &lt;a href="https://github.com/gcanti/fp-ts"&gt;fp-ts&lt;/a&gt;, and &lt;a href="https://github.com/supermacro/neverthrow"&gt;neverthrow&lt;/a&gt;. You’ll notice that a couple of those examples are functional programming libraries, this is because errors can be well-modelled with monads.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>errors</category>
    </item>
    <item>
      <title>How to use custom fonts in React-Native.</title>
      <author>ReenyDavidson</author>
      <pubDate>Mon, 31 May 2021 11:29:58 +0000</pubDate>
      <link>https://dev.to/reenydavidson/how-to-use-custom-fonts-in-react-native-2dlc</link>
      <guid>https://dev.to/reenydavidson/how-to-use-custom-fonts-in-react-native-2dlc</guid>
      <description>&lt;p&gt;Have you tried using font-family in react-native and it didn't seem to work? It's fine, you have nothing to worry about. The pattern used to render a font in CSS for the web is quite different from the way you will render it in a react-native app. LET'S DIVE IN!&lt;/p&gt;

&lt;p&gt;To render a custom font in a react-native app, two main libraries are needed. These libraries are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;expo-font&lt;/li&gt;
&lt;li&gt;expo-app-loading&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#expofont"&gt;
  &lt;/a&gt;
  &lt;strong&gt;expo-font&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;expo-font is a library that allows one to load fonts from the web and use it in a react-native component. It does this with the help of a method called &lt;strong&gt;loadAsync&lt;/strong&gt;. To use expo-font, we will need to install it with expo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;expo&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;expo&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;font&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#expoapploading"&gt;
  &lt;/a&gt;
  &lt;strong&gt;expo-app-loading&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;While the font from expo-font is still loading, expo-app-loading makes sure that a loading screen component or splash screen is running or being displayed. Once the font is loaded, it automatically allows the component with the font in it to display and allows the loading screen or splash screen to unmount. It does this with the help of a component called &lt;strong&gt;Apploading&lt;/strong&gt;. We can use it by installing expo-app-loading with expo&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;expo&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;expo&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next thing to do is to download the fonts which you would want to use in your app and store them in the assets folder of your react-native app workspace. You can download google fonts at &lt;em&gt;&lt;a href="https://fonts.google.com/"&gt;https://fonts.google.com/&lt;/a&gt;&lt;/em&gt; they have wonderful fonts over there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-build"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Let's Build&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Firstly, we import our libraries :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Font&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;expo-font&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Apploading&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;expo-app-loading&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;We import Apploading from expo-app-loading, which makes sure that the splash screen component or loading screen component is visible while it is mounted and we also import everything in expo-font as Font so as to load fonts.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFonts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;Font&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadAsync&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;limelight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./assets/fonts/Limelight/Limelight- 
    Regular.ttf&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;indie&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./assets/fonts/Indie_Flower/IndieFlower- 
    Regular.ttf&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use loadAsync method to asynchronously load static or remote resources that can be used in the react-native application. In this case, we are using it to asynchronously load the required font needed in the react-native app. It registers the font in a name which will be used while referring to it with &lt;em&gt;fontFamily&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fontsloaded&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFontsLoaded&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fontsloaded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="c1"&gt;//you can return any component of your choice here&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Texts&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Open&lt;/span&gt; &lt;span class="nx"&gt;up&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="nx"&gt;working&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Text&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;StatusBar&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;auto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/View&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Apploading&lt;/span&gt;
        &lt;span class="nx"&gt;startAsync&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;getFonts&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;onFinish&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;setFontsLoaded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="nx"&gt;onError&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use useState to monitor if the fonts is loaded or not and then we use the conditional statement to render a particular component depending depending on if the fonts is loaded or not. In the snippet above, if fonts is loaded(fontsloaded), then we return the component where the font is specified or else we return a component called Apploading. Apploading takes in three props which includes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;startAsync&lt;/li&gt;
&lt;li&gt;onFinish&lt;/li&gt;
&lt;li&gt;onError&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;startAsync&lt;/strong&gt;&lt;br&gt;
startAsync returns a promise. This promise is what is being loaded or resolved while the a loading screen or splash screen is mounted or running. In the case above, the getFont function is what is being called in startAsync.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;onFinish&lt;/strong&gt;&lt;br&gt;
This guy takes in a function setFontLoaded and sets it to true. In the case above, the onFinish prop waits for startAsync to load the fonts from getFont function and then it updates the state of the react-native app thereby rendering the font being loaded.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;onError&lt;/strong&gt;&lt;br&gt;
onError catches every possible error that might be thrown from startAsync and handles it properly.&lt;/p&gt;

&lt;p&gt;Now, we can use our font in any component we wish to use it in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;alignItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;justifyContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;Texts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;fontFamily&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;indie&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see above, the name of the font family is the specified name given to the font when loading it from loadAsync. We can now use the loaded font and also specify weight and other attributes to the font loaded.&lt;/p&gt;

&lt;p&gt;Full code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StatusBar&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;expo-status-bar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Font&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;expo-font&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Apploading&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;expo-app-loading&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFonts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;Font&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadAsync&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;limelight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./assets/fonts/Limelight/Limelight-Regular.ttf&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;indie&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./assets/fonts/Indie_Flower/IndieFlower-Regular.ttf&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fontsloaded&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFontsLoaded&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fontsloaded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;//you can return any component of your choice here&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Texts&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Open&lt;/span&gt; &lt;span class="nx"&gt;up&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="nx"&gt;working&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Text&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;StatusBar&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;auto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/View&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Apploading&lt;/span&gt;
        &lt;span class="nx"&gt;startAsync&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;getFonts&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;onFinish&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;setFontsLoaded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="nx"&gt;onError&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;alignItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;justifyContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;Texts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;fontFamily&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;indie&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this little tutorial, I hope you are able to load a font properly in your react-native app. Go forth and be great!!&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to filter an array in javascript? </title>
      <author>hrishikesh1990</author>
      <pubDate>Mon, 31 May 2021 11:12:17 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/how-to-filter-an-array-in-javascript-non</link>
      <guid>https://dev.to/hrishikesh1990/how-to-filter-an-array-in-javascript-non</guid>
      <description>&lt;p&gt;In this short tutorial, we look at why the JavaScript filter array method is used we also look at the syntax and code to facilitate a better understanding of the concept.&lt;/p&gt;

&lt;p&gt;This tutorial is a part of our initiative at &lt;a href="https://flexiple.com/"&gt;Flexiple&lt;/a&gt;, to write short curated tutorials around often used or interesting concepts. However, in case you are here only for the solution use this &lt;a href="#code-amp-explanation"&gt;link&lt;/a&gt;.   &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of Content
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-does-the-javascript-filter-function-do"&gt;What does the JavaScript filter function do?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#practical-uses-of-javascript-filter-function"&gt;Practical uses of JavaScript filter function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#code-amp-explaination"&gt;Code &amp;amp; Explanation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#limitation-amp-caveats-while-using-javascript-filter"&gt;Limitation &amp;amp; Caveats while using JavaScript filter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-does-the-javascript-filter-function-do"&gt;
  &lt;/a&gt;
  What does the JavaScript filter function do?
&lt;/h2&gt;

&lt;p&gt;The JavaScript &lt;code&gt;filter&lt;/code&gt; array function filters an array based on criteria and creates a new array with the values that pass. The JavaScript filter function iterates over the values in the array and returns the values that pass i.e. returns &lt;code&gt;true&lt;/code&gt;.  The search criteria in the JavaScript filter function are passed using a &lt;code&gt;callbackfn&lt;/code&gt; that takes in various parameters, we discuss them in detail below. Arrow functions can also be used to make JavaScript filter array code more readable. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax-of-javascript-filter"&gt;
  &lt;/a&gt;
  Syntax of JavaScript filter():
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;thisValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here &lt;code&gt;array&lt;/code&gt; refers to the original array that you are looking to filter&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;function&lt;/code&gt; - Required. A function or search criteria that would be used to filter each value in the array

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;value&lt;/code&gt; - Required, the value if current element in the iteration&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;index&lt;/code&gt; - Optional, in case you would like to start the iteration from a specific index&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;arr&lt;/code&gt; - The array object being called upon&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;thisValue&lt;/code&gt; - Optional, and as the name suggests, the value present would be passed in case the parameter is empty.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#practical-uses-of-javascript-filter-function"&gt;
  &lt;/a&gt;
  Practical uses of JavaScript filter function
&lt;/h2&gt;

&lt;p&gt;We have all come across filters on websites and they help us find things easily, the JavaScript filter array function is what allows this to happen. For example, we're looking for a freelancer with a skill JavaScript skillset. We use the JavaScript filter array function to return freelancers containing the particular skillset. This is made possible as the JavaScript filter does not mutate the string but rather creates a new one hence the original string is not affected. &lt;/p&gt;

&lt;p&gt;Similarly, websites with filters all make use of the JavaScript filter array function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-amp-explaination"&gt;
  &lt;/a&gt;
  Code &amp;amp; Explaination:
&lt;/h2&gt;

&lt;p&gt;Let us start with a simple array and later move on to an array containing objects. So first, let us take an array containing numerical values and remove negative values using the JavaScript filter array function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;positive_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;positive_array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Output = [0, 1, 5, 12, 19, 20]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you could see, we have defined a function that returns values that are greater than or equal to &lt;code&gt;0&lt;/code&gt;. In case you are comfortable with arrow functions you can use them to make your code more readable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;positive_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;positive_array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Output = [0, 1, 5, 12, 19, 20]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let us look at a code where we use the JavaScript filter array function on an array of objects. Let's continue with the earlier example of filtering freelancers with JavaScript as a skillset.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;freelancers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Harry&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;skill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;skill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Python&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;David&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;skill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;javascript_freelancers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;freelancers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;freelancer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;freelancer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;skill&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;javascript_freelancers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Output = [{ name: "Harry", skill: "JavaScript" }, { name: "David", skill: "JavaScript" }]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the JavaScript filter array code for objects is also quite straightforward once you have understood the concept. Feel free to use the arrow function to increase readability. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#limitation-amp-caveats-while-using-javascript-filter"&gt;
  &lt;/a&gt;
  Limitation &amp;amp; Caveats while using Javascript filter
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The JavaScript filter array does not mutate the array and hence remember to save the filtered array in case you plan on using it later.&lt;/li&gt;
&lt;li&gt;The JavaScript filter will not execute the function in case the array is empty&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>25 YouTube Channels to Learn Web Development for Free</title>
      <author>Sai Ashish</author>
      <pubDate>Mon, 31 May 2021 11:10:49 +0000</pubDate>
      <link>https://dev.to/theinsightfulcoder/25-youtube-channels-to-learn-web-development-for-free-45np</link>
      <guid>https://dev.to/theinsightfulcoder/25-youtube-channels-to-learn-web-development-for-free-45np</guid>
      <description>&lt;p&gt;Web Development is one of the highest-paying careers today. According to the U.S. Bureau of Labor Statistics, web development provided employment to 174,300 developers in the US alone. Going forward, the industry is expected to grow 8% from 2019 to 2029, faster than most other occupations. With such increasing demand, peers are always in the search for valuable resources which don't burn a hole in their pocket. Keeping that in mind, I've compiled a list of 25 Awesome YouTube Channels to Learn Web Development for free!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-clever-programmer"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://www.youtube.com/channel/UCqrILQNl5Ed9Dz6CGMyvMTQ"&gt;Clever Programmer&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mKbQSoVy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwniwccxGvXvGzzwka5f73aPbmdxvEX4G_cUd7TEzkw%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mKbQSoVy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwniwccxGvXvGzzwka5f73aPbmdxvEX4G_cUd7TEzkw%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of my favorite channels, Clever Programmer, founded by Rafeh Qazi offers one of the best courses on Web Development. From actionable insights to website clones and earning a 6 figure salary as a developer, this channel covers it all. Clever Programmer currently has over 956k subscribers with over 39 million views already. I definitely suggest you visit this channel once if you haven't already.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-sonny-sangha"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://www.youtube.com/user/ssangha32"&gt;Sonny Sangha&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cUhoc4lg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwngXcU2LcXQqcPyZFVwF_sV2zjB04K5RVFGE7heEwc4%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cUhoc4lg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwngXcU2LcXQqcPyZFVwF_sV2zjB04K5RVFGE7heEwc4%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sonny Sangha aka Papa React is one of the best mentors you could ask for. From being in the team of Clever Programmer and building a personal brand, Sonny has come a long time. Sonny builds amazing clones of websites such as Amazon, LinkedIn, Netlfix, live step by step. Sonny has recently started his own Youtube channel which has gained over 1 million views and 46k subscribers already.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-akshay-saini"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://www.youtube.com/channel/UC3N9i_KvKZYP4F84FPIzgPQ"&gt;Akshay Saini&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f_5m57R---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnin7zykyU20uPntBE42IfNsj9SAL7tKeE7eiNuUYA%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f_5m57R---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnin7zykyU20uPntBE42IfNsj9SAL7tKeE7eiNuUYA%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Akshay Saini's course Namaste Javascript is one of the best in-depth, conceptual, simple, and effective tutorials you'd ever find. I've personally seen students thanking Akshay for his amazing explanation which has improved their skills by bounds. Akshay currently has 94k subscribers with 3 million views on his Youtube channel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-the-new-boston"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://www.youtube.com/user/thenewboston"&gt;The New Boston&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pt0grnu6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnglVjQeNSAVO9GgKkrjIbCO_y0rOx7Yxx-2bv9r_A%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pt0grnu6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnglVjQeNSAVO9GgKkrjIbCO_y0rOx7Yxx-2bv9r_A%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The New Boston is one of the biggest channels providing tons of free content on a plethora of topics. It has playlists for React, Angular, Node.js, ES6, Redux, Django, and more. The New Boston currently has 2.55 million subscribers and a whopping 479 million views!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-traversy-media"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://www.youtube.com/user/TechGuyWeb"&gt;Traversy Media&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3KrjGC0z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwng963DN2_MIbKuvMWRrN4KG920h3Y4YHg6KET9vZg%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3KrjGC0z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwng963DN2_MIbKuvMWRrN4KG920h3Y4YHg6KET9vZg%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Traversy Media needs no introduction. As the about section reads, "Traversy Media features the best online web development and programming tutorials for all of the latest web technologies including Node.js, Angular 2, React.js, PHP, Rails, HTML, CSS and much more." Traversy Media currently has 1.53 million subscribers and 138 million views. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-code-with-harry"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://www.youtube.com/channel/UCeVMnSShP_Iviwkknt83cww"&gt;Code with Harry&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3hb5OBvW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnjeHnMHZ7T341QLHqPhQPfsG6ugvg_SV6z6FkYqGw%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3hb5OBvW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnjeHnMHZ7T341QLHqPhQPfsG6ugvg_SV6z6FkYqGw%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The saviour of Indian students, Haris Khan at his channel, Code with Harry teaches coding techniques to people in a short time which took him ages to learn. Harry has a Web Development Playlist consisting of over 100 videos that teach you web development from the basics to making an end to end responsive website. Code with Harry has 1.39 million subscribers and over 111 million views.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-web-dev-simplified"&gt;
  &lt;/a&gt;
  7.  &lt;a href="https://www.youtube.com/channel/UCFbNIlppjAuEX4znoulh0Cw"&gt;Web Dev Simplified&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mw1T91RL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnhIz_0Su6HhW6Ym50QCroJCAnF10X9xnnMDboN2%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mw1T91RL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnhIz_0Su6HhW6Ym50QCroJCAnF10X9xnnMDboN2%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll let the description of Web Dev Simplified do the talking. Web Dev Simplified is all about teaching web development skills and techniques in an efficient and practical manner. If you are just getting started in web development Web Dev Simplified has all the tools you need to learn the newest and most popular technologies to convert you from a no stack to a full stack developer. Web Dev Simplified also deep dives into advanced topics using the latest best practices for you seasoned web developers. This channel has 549k subscribers and 28 million views at the moment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-the-net-ninja"&gt;
  &lt;/a&gt;
  8. &lt;a href="https://www.youtube.com/channel/UCW5YeuERMmlnqo4oq8vwUpg"&gt;The Net Ninja&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cfjA4LWc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwni-Wm0ZBDYJYFwySP2esxgc8s9mKiwmI3yJrmjlHQ%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cfjA4LWc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwni-Wm0ZBDYJYFwySP2esxgc8s9mKiwmI3yJrmjlHQ%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Net Ninja has over 1k tutorials on topics such as Modern JavaScript (beginner to advanced), Node.js, React, Vue.js, Firebase, MongoDB, HTML &amp;amp; CSS, PHP &amp;amp; MySQL, Laravel, React Native, and Flutter. It is one of the channels that gain viewers by word of mouth communication. The Net Ninja has 717k subscribers and 83 million views overall.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-coder-coder"&gt;
  &lt;/a&gt;
  9. &lt;a href="https://www.youtube.com/channel/UCzNf0liwUzMN6_pixbQlMhQ"&gt;Coder Coder&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dnTyffap--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwngKKP6FGC5DptI89tz1cD-2Cv6DY0at2lAvwPC04g%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dnTyffap--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwngKKP6FGC5DptI89tz1cD-2Cv6DY0at2lAvwPC04g%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Jessica at Coder Coder, provides incredible practical tips on Web Development. She has a limited number of videos on her channel but has garnered 170k subscribers and 3 million views on her channel. Surely one to look for.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-corey-schafer"&gt;
  &lt;/a&gt;
  10. &lt;a href="https://www.youtube.com/user/schafer5"&gt;Corey Schafer&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nUabRZM9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwngomgNvn2XgfFWEVlxCl_tUVEOhmUTUTlesdnuD%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nUabRZM9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwngomgNvn2XgfFWEVlxCl_tUVEOhmUTUTlesdnuD%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Corey Schafer is another guy who needs no introduction. You'll gain a ton of knowledge on  Python, Git, Development Environments, Terminal Commands, SQL, Programming Terms, JavaScript, Computer Science Fundamentals among others. Corey has 776k subscribers and 57 million views on his channel right now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-wes-bos"&gt;
  &lt;/a&gt;
  11. &lt;a href="https://www.youtube.com/user/wesbos"&gt;Wes Bos&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L6CSaDiH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnjP0LxkG0UhtUeCq8BnTJgxRCn7Ot1wLrkOguP5Cpw%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L6CSaDiH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnjP0LxkG0UhtUeCq8BnTJgxRCn7Ot1wLrkOguP5Cpw%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wes Bos, famously known for his Javascript 30 challenge, is one of the YouTubers you should definitely look out for. At the Javascript 30 challenge, you learn to build 30 Javascript projects using vanilla Javascript. Wes Bos has an amazing 131k subscribers and 6 million views on his channel. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#12-tanay-pratap"&gt;
  &lt;/a&gt;
  12. &lt;a href="https://www.youtube.com/channel/UCNFmBuclxQPe57orKiQbyfA"&gt;Tanay Pratap&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X1Nz9N5O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnibnmzbi8nfRHEAzdI-8lpPGsrD1F6Cg3mAImtQ%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X1Nz9N5O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnibnmzbi8nfRHEAzdI-8lpPGsrD1F6Cg3mAImtQ%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tanay Pratap, a Microsoft engineer shares his knowledge on Web Development on his YouTube channel. He has amazing long tutorials on HTML, CSS, JS, Git, Hosting, and more. Tanay has over 23k subscribers and half a million views on his channel. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#13-derek-banas"&gt;
  &lt;/a&gt;
  13. &lt;a href="https://www.youtube.com/user/derekbanas"&gt;Derek Banas&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LYeufoqo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnjUAaFsikVB8U9VFt_TE6w074PwyaM48yC3HobDbQ%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LYeufoqo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnjUAaFsikVB8U9VFt_TE6w074PwyaM48yC3HobDbQ%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Derek Banas has tutorials on a wide range of topics including HTML, CSS, PHP, JS,  AJAX, Git, Web Services, Django, and more. Derek Banas is currently making videos on Data Science and Machine Learning. His channel holds  1.12 subscribers and 107 million views in total. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#14-jonas-schmedtmann"&gt;
  &lt;/a&gt;
  14. &lt;a href="https://www.youtube.com/channel/UCNsU-y15AwmU2Q8QTQJG1jw"&gt;Jonas Schmedtmann&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pC6p3cbW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnizoYDfYjC-eOXV1g6cht2ss2biEtcLDoTphm56tw%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pC6p3cbW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnizoYDfYjC-eOXV1g6cht2ss2biEtcLDoTphm56tw%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Jonas Schmedtmann might not have many videos but does provide a mini-course and an overview of what you'll learn in Web Development. If you just want to spend a day, getting started with Web Dev, try Jonas. Jonas currently holds 24.9k subscribers and 1 lakh views on his channel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#15-academind"&gt;
  &lt;/a&gt;
  15. &lt;a href="https://www.youtube.com/channel/UCSJbGtTlrDami-tDGPUV9-w"&gt;Academind&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yD6eBUAL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnhuAGr98acrEv0S1Q3Ikz0giWPmHmM1J3h6pANWCg%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yD6eBUAL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnhuAGr98acrEv0S1Q3Ikz0giWPmHmM1J3h6pANWCg%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Max &amp;amp; Manuel at Academind creates courses and tutorials that teach you everything related to web development. No matter if it's programming languages like JavaScript, runtimes like NodeJS, or popular frameworks like ReactJS, Angular, or VueJS. They got you covered. Academind currently has 675k subscribers and 52 million plays already.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#16-hitesh-choudhary"&gt;
  &lt;/a&gt;
  16. &lt;a href="https://www.youtube.com/user/hiteshitube"&gt;Hitesh Choudhary&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BIzZrKsv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnihtV8Mb0JZFkkAEf9KKN4m4WNNeHkxUb6Wuvc_5w%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BIzZrKsv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnihtV8Mb0JZFkkAEf9KKN4m4WNNeHkxUb6Wuvc_5w%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hitesh Choudhary is a guy who creates content every single week, He covers a wide range of subjects like programming, new frameworks, open-source products, and more. He personally has a keen interest in topics like Javascript, Python, PHP, and Machine Learning. He also offers a MERN full stack development course for under 3$(₹ 199) Hitesh has over 633k subscribers and 37 million views on his channel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#17-adam-khoury"&gt;
  &lt;/a&gt;
  17. &lt;a href="https://www.youtube.com/user/flashbuilding"&gt;Adam Khoury&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bIwr-VFZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnioOS1ThaFgeVeaqTRDNOkJG4AdOWKsKirrI4JWHA%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bIwr-VFZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnioOS1ThaFgeVeaqTRDNOkJG4AdOWKsKirrI4JWHA%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Adam Khoury at his channel helps to master technologies like JavaScript, PHP, SQL, HTML, CSS, ActionScript, and more. His videos are concise, conceptual, and effective. Adam currently has 197k subscribers to his channel and more than 32 million views overall.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#18-code-course"&gt;
  &lt;/a&gt;
  18. &lt;a href="https://www.youtube.com/user/phpacademy"&gt;Code Course&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p9n33TKt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwngHnzFJMjhx1S_B-kKr6EeGMIBzAjwuguhbt4Jx0w%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p9n33TKt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwngHnzFJMjhx1S_B-kKr6EeGMIBzAjwuguhbt4Jx0w%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you're someone who's a fan of PHP and Lavarel, Code Course is the channel for you. Code Course covers numerous concepts related to PHP, Lavarel, APIs, and more. It currently has 340k subscribers and more than 33 million views in total.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#19-leveluptuts"&gt;
  &lt;/a&gt;
  19. &lt;a href="https://www.youtube.com/user/LevelUpTuts"&gt;LevelUpTuts&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OPnwTaCb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnhG70hoc2gsqGaYrXDU1J31FfG_eW4NXeuN18R-XA%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OPnwTaCb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnhG70hoc2gsqGaYrXDU1J31FfG_eW4NXeuN18R-XA%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scott Tolinski at his channel(formerly along with Ben Schaaf), LevelUpTuts provide high-quality content on Web Development. Their tutorials are aimed to be accessible and easy to follow while maintaining high production values. LevelUpTuts has 335k subscribers and 32 million views on its channel to date.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#20-cs50"&gt;
  &lt;/a&gt;
  20. &lt;a href="https://www.youtube.com/channel/UCcabW7890RKJzL968QWEykA"&gt;CS50&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mjDwxn6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnjo89LMRtwUAmOGuunMTbJTrIDby7FWPECLm799hA%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mjDwxn6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnjo89LMRtwUAmOGuunMTbJTrIDby7FWPECLm799hA%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CS50 is Harvard University's introduction to the intellectual enterprises of computer science and the art of programming. It offers a free course on Web Programming with Python and Javascript where it covers where they cover concepts like Git, Flash, SQL, ORM, API, Javascript, Django, Scalability, and Security of websites. I highly recommend taking this course if you're a beginner and want to start the journey of web development with an excellent foundation. CS50 has 690k subscribers to its channel with 43 million views. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#21-quentin-watt-tutorials"&gt;
  &lt;/a&gt;
  21. &lt;a href="https://www.youtube.com/user/QuentinWatt"&gt;Quentin Watt Tutorials&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N5A9BVLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwngEbgqSe1QSDY9I5UVQLyOgyy35KHk55AoIBXCirQ%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N5A9BVLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwngEbgqSe1QSDY9I5UVQLyOgyy35KHk55AoIBXCirQ%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Quentin Watt teaches technologies like JavaScript, PHP using popular frameworks like Vue.js and Laravel. With over a decade of experience to share he makes short video tutorials aimed at equipping an individual skill needed to develop their career. Quentin currently holds 162k subscribers and 19 million views on his channel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#22-devtips"&gt;
  &lt;/a&gt;
  22. &lt;a href="https://www.youtube.com/user/DevTipsForDesigners"&gt;DevTips&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--macY5PQN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwng7UMURAsfCu7U3zhssYa3bLWjg5Ht0dn8PGnbeow%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--macY5PQN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwng7UMURAsfCu7U3zhssYa3bLWjg5Ht0dn8PGnbeow%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DevTips has weekly discussions and tutorials on various technologies such as CSS, Bootstrap, React, Docker, etc. The tutorials are fun and easy to follow, two factors I definitely look for in a great resource.  DevTips has 356k subscribers and 16 million views on the channel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#23-learnwebcode"&gt;
  &lt;/a&gt;
  23. &lt;a href="https://www.youtube.com/user/LearnWebCode"&gt;LearnWebCode&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J_aHe_lu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnjrFXkpkMWqEtC2KhHqHcfQ7mFAy8LHU2fLSDby%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J_aHe_lu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwnjrFXkpkMWqEtC2KhHqHcfQ7mFAy8LHU2fLSDby%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Brad, at LearnWebCode has insightful tutorials on HTML, CSS, MongoDB, API, JSON, Bootstrap, and more. With 288k subscribers and 20 million views, LearnWebCode is a channel that gives a quick overview of and helps understand concepts quickly. LearnWebCode currently has 288k subscribers and 19 million views on the channel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#24-google-chrome-developers"&gt;
  &lt;/a&gt;
  24. &lt;a href="https://www.youtube.com/user/ChromeDevelopers"&gt;Google Chrome Developers&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3YLPg7rO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwniL7QUpTiyGjIpNfk6g7eCkMSB3yjnMS4wkMvY49Q%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3YLPg7rO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwniL7QUpTiyGjIpNfk6g7eCkMSB3yjnMS4wkMvY49Q%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Google Chrome Developers is a channel by Google developers, featuring some amazing content on the web and more. There are playlists on PWA, Design Learning, event recordings, and more. This is a channel you should visit to have a greater understanding of the web and upskill. Google Chrome Developers has 584k subscribers and 37 million views at the moment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#25-apna-college"&gt;
  &lt;/a&gt;
  25. &lt;a href="https://www.youtube.com/channel/UCBwmMxybNva6P_5VmxjzwqA"&gt;Apna College&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2ksArbZV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwniWFbtX2drltDWOBZGP1KhLVTqDypqg4oQPK7Pc%3Ds176-c-k-c0x00ffffff-no-rj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2ksArbZV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yt3.ggpht.com/ytc/AAUvwniWFbtX2drltDWOBZGP1KhLVTqDypqg4oQPK7Pc%3Ds176-c-k-c0x00ffffff-no-rj" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Last but not the least, Apna College with Aman Dhattarwal with his team as the face of the channel has an amazing animated course on Web Development on Apna College. The course is taught by a guy who has cleared Googler Summer of Code being from a non-cs background. Apna College has 509k subscribers and 25 million views on the channel. &lt;/p&gt;

&lt;p&gt;That was it for today folks. Though I have another set of great channels, these are more than enough to build your skills as a web developer. Honorable mentions to the evergreen and most famous channels such as &lt;a href="https://www.youtube.com/channel/UC8butISFwT-Wl7EV0hUK0BQ"&gt;FreeCodeCamp&lt;/a&gt;,  &lt;a href="https://www.youtube.com/user/edurekaIN"&gt;Edureka&lt;/a&gt;,  &lt;a href="https://www.youtube.com/user/programmingwithmosh"&gt;Programming with Mosh&lt;/a&gt;,  &lt;a href="https://www.youtube.com/user/Simplilearn"&gt;Simplilearn&lt;/a&gt;, and  &lt;a href="https://www.youtube.com/user/intellipaaat"&gt;Intellipaat&lt;/a&gt; who provide 6-10hr long videos on the topic covering a ton of concepts in a limited amount of time. &lt;/p&gt;

&lt;p&gt;Which YouTube channel is your favorite? Let me know in the comment section below!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-insights-by-the-insightful-coder-"&gt;
  &lt;/a&gt;
  Bonus Insights by &lt;a href="https://theinsightfulcoder.com/"&gt;The Insightful Coder&lt;/a&gt; :
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Interested in Building Creative Beginner-Level Python Projects🐍?: Check out the  &lt;a href="https://theinsightfulcoder.com/series/python-projects-for-beginners"&gt;Python Projects for Beginners Series&lt;/a&gt; 😍&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Interested in Building Your Own Artificial Intelligence Projects using Python?: Check out the &lt;a href="https://hashnode.com/series/python-ai-series-ckkft33ux016dwjs11xlqbz4v"&gt;Python AI Series&lt;/a&gt;🧠&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I'm also dropping useful dev resources, interactive quizzes and Interview preparation on my  &lt;a href="https://www.instagram.com/theinsightfulcoder/"&gt;Instagram&lt;/a&gt; Page. Make sure to follow me up 💯&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Find and Download All My Project Source Codes at My &lt;a href="https://github.com/SaiAshish-Konchada"&gt;Github Repository&lt;/a&gt;  🎁&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>computerscience</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Debugging Lua inside Openresty inside Docker with IntelliJ IDEA</title>
      <author>Omer van Kloeten</author>
      <pubDate>Mon, 31 May 2021 11:01:25 +0000</pubDate>
      <link>https://dev.to/omervk/debugging-lua-inside-openresty-inside-docker-with-intellij-idea-2h95</link>
      <guid>https://dev.to/omervk/debugging-lua-inside-openresty-inside-docker-with-intellij-idea-2h95</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href="#but-why"&gt;But why?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-do-other-people-do-it"&gt;How do other people do it?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#last-things-first"&gt;Last thing’s first&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#the-process"&gt;The process&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#starting-out"&gt;Starting out&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bootstrapping-the-debugger"&gt;Bootstrapping the debugger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-local-dynamic-library"&gt;The Local Dynamic Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#listening-on-localhost"&gt;Listening on localhost&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lets-step"&gt;Let’s step!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#matching-sources"&gt;Matching sources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#works-on-my-machine"&gt;Works on my machine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#summing-it-all-up"&gt;Summing it all up&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#a-word-of-warning"&gt;A word of warning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-changed"&gt;What changed?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#next-steps"&gt;Next steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#bonus-hot-reloading-the-lua-code"&gt;Bonus: Hot reloading the Lua code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#parting-words"&gt;Parting words&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#but-why"&gt;
  &lt;/a&gt;
  But why?
&lt;/h1&gt;

&lt;p&gt;I was challenged to find a way to step through some code. Usually I’d just fire up my IDE and start debugging, but this case was a bit more complicated than that. You see, this code is &lt;a href="http://www.lua.org/"&gt;Lua&lt;/a&gt; code, running inside a custom version of &lt;a href="https://www.nginx.com/"&gt;NGINX&lt;/a&gt; called &lt;a href="https://openresty.org/"&gt;Openresty&lt;/a&gt;, running inside a &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt; container as part of a &lt;a href="https://docs.docker.com/compose/"&gt;Docker Compose&lt;/a&gt; app. Oh, and I needed to step through it using IntelliJ IDEA.&lt;/p&gt;

&lt;p&gt;Can’t be too hard, right?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-do-other-people-do-it"&gt;
  &lt;/a&gt;
  How do other people do it?
&lt;/h1&gt;

&lt;p&gt;I sat down and read a lot of material online and most of it boiled down to one of two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use &lt;a href="https://studio.zerobrane.com/"&gt;ZeroBrane Studio&lt;/a&gt;, an entirely different IDE with a debugger named &lt;a href="https://github.com/pkulchenko/MobDebug"&gt;mobdebug&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Print debugging to the logs.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Neither one of those things were what I wanted to do, which got me thinking that, in order of likeliest to least:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Someone got it working but never documented it,&lt;/li&gt;
&lt;li&gt;It’s a terrible idea that I shouldn’t even consider trying, or;&lt;/li&gt;
&lt;li&gt;It’s never been done.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After a few days of work, I found the way to do it and the following is an explanation of how you could do it yourself.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#last-things-first"&gt;
  &lt;/a&gt;
  Last thing’s first
&lt;/h1&gt;

&lt;p&gt;If you don’t really care about the journey and why these things actually work, you can jump over to &lt;a href="#summing-it-all-up"&gt;Summing it all up&lt;/a&gt; and see the end result there.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-process"&gt;
  &lt;/a&gt;
  The process
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#starting-out"&gt;
  &lt;/a&gt;
  Starting out
&lt;/h2&gt;

&lt;p&gt;I’m assuming that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You have IntelliJ IDEA.&lt;/li&gt;
&lt;li&gt;You have a working Docker Compose app with an Ubuntu-based Docker container named &lt;em&gt;nginx&lt;/em&gt; running Openresty with your custom Lua code that you want to debug.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Fire up IntelliJ IDEA and install the &lt;a href="https://plugins.jetbrains.com/plugin/9768-emmylua"&gt;EmmyLua plugin for IntellIJ&lt;/a&gt;. Note that this is not the &lt;a href="https://plugins.jetbrains.com/plugin/5055-lua"&gt;Lua plugin&lt;/a&gt;, which I couldn’t get to work in the latest version of the IDE.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bootstrapping-the-debugger"&gt;
  &lt;/a&gt;
  Bootstrapping the debugger
&lt;/h2&gt;

&lt;p&gt;To start debugging, you’ll have to create a new Debug configuration. Go to &lt;em&gt;Run → Edit Configurations...&lt;/em&gt; and add a new &lt;em&gt;Emmy Debugger&lt;/em&gt; config.&lt;/p&gt;

&lt;p&gt;Set Connection to &lt;em&gt;Tcp ( IDE connect debugger )&lt;/em&gt;, and Keep Host and Port as &lt;em&gt;localhost&lt;/em&gt; and &lt;em&gt;9966&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The dialog is kind enough to generate a snippet of code you can copy and paste to your Lua code to bootstrap the debugger in its context.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I43iCKK6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bh2d6j5slmxt5kihwt6x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I43iCKK6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bh2d6j5slmxt5kihwt6x.png" alt="Run/Debug Configurations"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What &lt;em&gt;IDE connect debugger&lt;/em&gt; means is that the code will start listening on port 9966 for incoming connections, then block until the IDE attaches to it when we run this Debug configuration.&lt;/p&gt;

&lt;p&gt;Here’s the code I copied from that textbox verbatim:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;We’ll have to add this code to the file we’re debugging so that it can wait for the IDE to attach, after which we’ll theoretically be able to step through it, right?&lt;/p&gt;

&lt;p&gt;There are a few red flags here. Let’s break them down one by one:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The first line references a local file that is also a Mac-only &lt;code&gt;dylib&lt;/code&gt; (Dynamic Library) and we’ll be running a Linux-based container (which means we need an &lt;code&gt;so&lt;/code&gt; file - a Shared Object). We won’t be able to load that file.&lt;/li&gt;
&lt;li&gt;The debugger is listening on &lt;em&gt;localhost&lt;/em&gt;, but we’ll be inside a container.&lt;/li&gt;
&lt;li&gt;If we have multiple code paths that run this code one after the other, we’ll have errors since the port is a shared resource.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While the port contention (#3) can be solved with either closing the port quickly (using &lt;code&gt;dbg.stop()&lt;/code&gt;) or using a random port, the first two merit some more detail.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-local-dynamic-library"&gt;
  &lt;/a&gt;
  The Local Dynamic Library
&lt;/h2&gt;

&lt;p&gt;We’ll need a local binary inside the container to load, and it has to be the right one.&lt;/p&gt;

&lt;p&gt;While Emmy releases Linux SO files for Emmy Core &lt;a href="https://github.com/EmmyLua/EmmyLuaDebugger/releases/tag/1.0.16"&gt;as part of their builds&lt;/a&gt;, they’re not necessarily compatible with whatever flavor of Linux your container will have. We’ll have to &lt;em&gt;build it from source&lt;/em&gt; as part of building the image:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The above gets the latest released version of the source code (1.0.16 is the latest at the time this is written) and builds it according to the script in the repo’s &lt;a href="https://github.com/EmmyLua/EmmyLuaDebugger/blob/master/.travis.yml"&gt;.travis.yml file&lt;/a&gt; (lines 7-8). It then copies the SO file to the easily reachable /usr/local/emmy (lines 9-10) before removing the downloads (line 13).&lt;/p&gt;

&lt;p&gt;Like me, you might not be able to build it because you have an older version of CMake than is required. In that case, add the correct one before compiling the Emmy Debugger SO:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Here we download the latest version of CMake 3 which is required to build Emmy Core (line 1), then build it from source (lines 5-7), remove the downloads (line 9) and update Ubuntu to use it instead of the default CMake (line 10).&lt;/p&gt;

&lt;p&gt;Back to the code we used to bootstrap the debugger:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Let’s change line 1 to match the new Container-local Emmy Core:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#listening-on-localhost"&gt;
  &lt;/a&gt;
  Listening on localhost
&lt;/h2&gt;

&lt;p&gt;We told our code to bind to localhost on port 9966, but that doesn’t help us since we’re inside a Docker container. Let’s expose that port to the host computer so that it’s reachable.&lt;/p&gt;

&lt;p&gt;In your docker-compose.yaml, add the following lines 3-4:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;This exposes 9966 as a port local to the host machine. When the IDE opens a connection to it, that connection is proxied into the container.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-step"&gt;
  &lt;/a&gt;
  Let’s step!
&lt;/h2&gt;

&lt;p&gt;After doing all of that, let’s give it a try! Let’s place a breakpoint after the &lt;code&gt;dbg.waitIDE()&lt;/code&gt; line, start our Docker Compose app, then call the endpoint that includes the code to debug and, as it waits for us to connect, run the Debug Configuration.&lt;/p&gt;

&lt;p&gt;That doesn’t work, though. The code waits for the debugger, the debugger successfully connects and then disconnects. Our breakpoint isn’t even hit!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6KctFeiu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ejhgcthf6s4syothuwjp.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6KctFeiu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ejhgcthf6s4syothuwjp.gif" alt="[1] debugging fails"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#matching-sources"&gt;
  &lt;/a&gt;
  Matching sources
&lt;/h3&gt;

&lt;p&gt;The issue here is that when we place a breakpoint in the IDE in the file &lt;code&gt;/Users/omer_van_kloeten/my_project/src/lua/something.lua&lt;/code&gt;, the debugger will never stop there, because that path doesn’t exist in the container. Instead, this file will be somewhere like &lt;code&gt;/etc/nginx/lua/something.lua&lt;/code&gt;. How can we make that translation?&lt;/p&gt;

&lt;p&gt;I scoured the documentation, but found no API that could do that. Begrudgingly, I started trudging through the debugger’s source code and eventually found &lt;a href="https://github.com/EmmyLua/EmmyLuaDebugger/blob/3f8853897fe001250e6e8a80ace5b603b1caccd8/emmy_core/emmy_debugger.cpp#L428"&gt;a public API hook, with only a single line example&lt;/a&gt;. Was this the right API? I read through the sources and tried it and &lt;em&gt;it just worked&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;Here it is - this code should be placed before loading the debugger:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;fixPath&lt;/code&gt; function gets a file’s path and ‘fixes’ it to look like the paths the IDE expects.&lt;/p&gt;

&lt;p&gt;Looks like this will solve it. Let’s try again to place a breakpoint after the &lt;code&gt;dbg.waitIDE()&lt;/code&gt; line, start our Docker Compose app, then call the endpoint that includes the code to debug and, as it waits for us to connect, run the Debug Configuration.&lt;/p&gt;

&lt;p&gt;It works!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J9sD_XPr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vgb9qgiimyjw94ch8fgo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J9sD_XPr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vgb9qgiimyjw94ch8fgo.gif" alt="[2] debugging works"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#works-on-my-machine"&gt;
  &lt;/a&gt;
  Works on my machine
&lt;/h2&gt;

&lt;p&gt;This was exciting, but committing this kind of code would get me tarred and feathered. Let’s make sure this works on everyone’s machine. But how can we know, from inside a running container, where the host machine’s source code is located? Let’s use an environment variable.&lt;/p&gt;

&lt;p&gt;Let’s make a couple changes to the code above:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;First off, we added line 1, which fetches the environment variable. We’ve also changed line 4 to use the value from that environment variable.&lt;/p&gt;

&lt;p&gt;This means we’ll need to get the value &lt;code&gt;/Users/omer_van_kloeten/my_project/src&lt;/code&gt; into the variable.&lt;/p&gt;

&lt;p&gt;It’s not that trivial to get that environment variable into the code, because Nginx strips away almost all environment variables. We’ll have to whitelist it in nginx.conf:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now we’ll want to send it into the container at runtime. Inside docker-compose.yaml, let’s make sure our local environment variable is pushed to the container as a local environment variable:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;We’ve added the environment variable in line 4, but didn’t give it a value. That means it will pick up the value from the host environment when it’s started.&lt;/p&gt;

&lt;p&gt;Before we docker compose up our app, we’ll need to first export the environment variable:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Stepping through the code will now work on all of our colleagues’ computers!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#summing-it-all-up"&gt;
  &lt;/a&gt;
  Summing it all up
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#a-word-of-warning"&gt;
  &lt;/a&gt;
  A word of warning
&lt;/h2&gt;

&lt;p&gt;This guide covers only the first steps towards making robust debuggable code. You &lt;strong&gt;do not&lt;/strong&gt; want to ship your code with debugger binaries listening on a port for connections.&lt;/p&gt;

&lt;p&gt;This guide is far from comprehensive and doesn’t allude to being one-size-fits-all. I’d love to hear how you fixed issues with it in the comments. Come share your personal progress!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-changed"&gt;
  &lt;/a&gt;
  What changed?
&lt;/h3&gt;

&lt;p&gt;Here’s all of the changes we made to our code in easily copy-paste-able gist form:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h3&gt;

&lt;p&gt;This way of debugging means that the code waits for the debugger to connect to it, when it uses &lt;code&gt;tcpListen&lt;/code&gt;. However, this is not that great because it waits for user interaction (starting the Debug Configuration). If we used &lt;code&gt;tcpConnect&lt;/code&gt;, we would be able to start the debugger and have the process connect directly to it when it needs to, without user interaction. Unfortunately, I was unable to make that work within a reasonable timeframe when listening on &lt;code&gt;0.0.0.0&lt;/code&gt; and attempting to connect to &lt;code&gt;host.docker.internal&lt;/code&gt; from inside the Docker container. Perhaps you will.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bonus-hot-reloading-the-lua-code"&gt;
  &lt;/a&gt;
  Bonus: Hot reloading the Lua code
&lt;/h1&gt;

&lt;p&gt;A lot of the above included frequently changing Lua code and rebuilding the container, causing the feedback loop to be frustratingly long. If we can edit the files inside the container, that would make things much easier, right?&lt;/p&gt;

&lt;p&gt;To do that, let’s attach our sources as a volume to the container in docker-compose.yaml:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;In line 3 we’re effectively replacing the files that exist inside the container with a live link to our local ones.&lt;/p&gt;

&lt;p&gt;However, Openresty has a &lt;a href="https://openresty-reference.readthedocs.io/en/latest/Directives/#lua_code_cache"&gt;Lua code cache&lt;/a&gt; which will cache the code once it’s been run. Thankfully, we can turn that off in our nginx.conf:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Unfortunately, this neat trick breaks the reproducibility of Docker images, so these patches to docker-compose.yaml and nginx.conf should never reach your CI server.&lt;/p&gt;

&lt;p&gt;Note that you may also break your code if you turn off the Lua cache, due to &lt;a href="https://openresty-reference.readthedocs.io/en/latest/Directives/#lua_code_cache"&gt;its side effects&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#parting-words"&gt;
  &lt;/a&gt;
  Parting words
&lt;/h1&gt;

&lt;p&gt;Please remember that this guide only outlines bootstrapping the ability to step inside the code, and therefore should probably not be used as-is. It was a fun challenge to take up and I sincerely hope that this guide is some day useful to someone other than myself.&lt;/p&gt;

&lt;p&gt;--- &lt;a href="https://twitter.com/omervk"&gt;@omervk&lt;/a&gt;&lt;/p&gt;

</description>
      <category>lua</category>
      <category>openresty</category>
      <category>nginx</category>
      <category>docker</category>
    </item>
    <item>
      <title>Why I Switched to vi/vim</title>
      <author>Harvey</author>
      <pubDate>Mon, 31 May 2021 10:58:53 +0000</pubDate>
      <link>https://dev.to/harvey/why-i-switched-to-vi-vim-4hd1</link>
      <guid>https://dev.to/harvey/why-i-switched-to-vi-vim-4hd1</guid>
      <description>&lt;p&gt;When I started writing code, I used Notepad and Notepad++. When I switched to OS X. In my first computer science class in high school we used Visual Studio.&lt;/p&gt;

&lt;p&gt;When I finally migrated to Linux, I started using vi/vim after using nano for a while. Unlike nano, vim is a lot more powerful but is harder to learn.&lt;/p&gt;

&lt;p&gt;How did I go from never using &lt;a href="http://www.vim.org/"&gt;vim&lt;/a&gt; to using it all the time? How does one make a complete switch? I'll walk you through how I got here and share some tips along the way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reasons-to-learn-vim"&gt;
  &lt;/a&gt;
  Reasons to learn vim
&lt;/h2&gt;

&lt;p&gt;If you are trying to learn Vim, or you are on the fence about it, here are my top 5 reasons why I love this keyboard-centered editor:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The more I used it, the faster I became, and the faster I became the more productive I was.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It's everywhere. &lt;a href="https://bsdnerds.org/what-is-linux-shell/"&gt;Linux&lt;/a&gt;, OpenBSD, FreeBSD, Mac OS X and every other operating system supports Vi/Vim. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I don't like to use my mouse. I never did anything in Sublime Text without the help of my mouse. This is a annoying, easier to keep hands on the keyboard&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It can be used over the network using ssh. Login to any box and use it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I use it for almost everything: programming, writing, blogging, etc.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ztZY-89a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8ht6ydevzn0dpr7u0bb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ztZY-89a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8ht6ydevzn0dpr7u0bb.png" alt="vim editor"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-you-should-switch"&gt;
  &lt;/a&gt;
  Why You Should Switch:
&lt;/h2&gt;

&lt;p&gt;Switching is up to you, but here are my reasons.&lt;/p&gt;

&lt;p&gt;Why would somebody use ancient tools like vi/vim when there are so many modern ones out there? &lt;/p&gt;

&lt;p&gt;One day I had to answer this question for my friend. He asked, “Why don’t you use Sublime Text like me?” I explain to him that sometimes it’s better to use older/simpler tools than more complex ones.&lt;/p&gt;

&lt;p&gt;Here are my reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Learn how to use the best editor ever made.&lt;/li&gt;
&lt;li&gt;Never get lost in a sea of menus and toolbars that you never use (just like vim does not have any).&lt;/li&gt;
&lt;li&gt;Have an excuse to use powerful, built-in commands that are available in no other editor (and are faster than anything you can do with a GUI).&lt;/li&gt;
&lt;li&gt;Work fast using commands&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To practice vim, you can use this &lt;a href="https://vim.is/"&gt;site&lt;/a&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>vim</category>
    </item>
    <item>
      <title>How to check the weather right from your terminal with Python</title>
      <author>Stokry</author>
      <pubDate>Mon, 31 May 2021 10:58:07 +0000</pubDate>
      <link>https://dev.to/stokry/how-to-check-the-weather-right-from-your-terminal-with-python-1e7m</link>
      <guid>https://dev.to/stokry/how-to-check-the-weather-right-from-your-terminal-with-python-1e7m</guid>
      <description>&lt;p&gt;Today I want to show you how to check the weather from your terminal. For this purpose, we are going to use &lt;code&gt;cli-weather&lt;/code&gt;, a lightweight command-line app to get fast weather data right on the command line. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://pypi.org/project/cli-weather/"&gt;cli-weather&lt;/a&gt; is a command-line app to get instant real-time weather data by city name or postal code from any corner on earth right on the command line.&lt;/p&gt;

&lt;p&gt;With &lt;em&gt;&lt;code&gt;cli-weather app&lt;/code&gt;&lt;/em&gt; you can retrieve current weather observations from over &lt;strong&gt;45,000&lt;/strong&gt; live weather stations using WeatherBIT API, and highly localized weather forecasts for any point on the globe using the world's most trusted weather models such as GFS 13km, ECMWF, DWD 6.5km ICON-Europe, and NOAA 3km HRRR.!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;cli-weather requires &lt;a href="https://pypi.org/project/cli-weather/pip.pypa.io"&gt;pip&lt;/a&gt; python package manager to install.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;weather&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#basic-usage"&gt;
  &lt;/a&gt;
  Basic Usage
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;weather&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;COUNTRY&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt; &lt;span class="n"&gt;city_nmae&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;postal_cod&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is our example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rQ05LPOG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.ibb.co/HBBf2pv/video.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rQ05LPOG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.ibb.co/HBBf2pv/video.gif" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sweet, isn't it? :-)&lt;/p&gt;

&lt;p&gt;Thank you all.&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How To Use Mobile App ASO And SEO For Your App Promotion</title>
      <author>Krowser Web Services </author>
      <pubDate>Mon, 31 May 2021 10:46:03 +0000</pubDate>
      <link>https://dev.to/krowser/how-to-use-mobile-app-aso-and-seo-for-your-app-promotion-36pg</link>
      <guid>https://dev.to/krowser/how-to-use-mobile-app-aso-and-seo-for-your-app-promotion-36pg</guid>
      <description>&lt;p&gt;With the proliferation of the internet and numerous powerful online promotion techniques, creating and distributing an excellent app is now an option to many. However, this also makes the digital landscape fiercer for mobile app publishers. Today, when promoting your app, you’re competing with 3.8 million Android apps and over 2 million iOS apps. Unsurprisingly, in the competitive mobile app development space, getting your app published is one thing, getting your app noticed is another.&lt;br&gt;
With the app marketing landscape the way it is, you need to have a robust app promotion plan that combines the most effective mobile app ASO and SEO practices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why Combine Mobile App ASO And SEO?&lt;/strong&gt;&lt;br&gt;
SEO is all about optimizing your site for search engines, while mobile app ASO applies to an app store for basically the same purpose. We can freely say that ASO and SEO are two different sides of the same coin. And, to reach their ultimate performance, they should be used together.&lt;/p&gt;

&lt;p&gt;Statistics say that Google is still one of the most important sources of app discoverability. So, if you don’t play by its rules and optimize your site for it, your rankings, traffic, and visibility will suffer. In other words, you will miss out on an opportunity to serve your app to the right people.&lt;/p&gt;

&lt;p&gt;On the other hand, app stores also serve as closed site search engines. So, it’s not that surprising that the idea behind mobile app ASO is similar to SEO – the higher your app ranks in the app store, the more visible it is to your target audience.&lt;/p&gt;

&lt;p&gt;As the line between desktop and mobile is getting blurrier, web marketing and app marketing is becoming merged. Marketers focus on providing exceptional user experience, be it via apps or web. The result is more active engagement with your prospects, who have the potential to become your loyal customers one day.&lt;/p&gt;

&lt;p&gt;As a result, mobile app ASO and SEO need to be two equally important aspects of your app promotion strategy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SEO Is The Foundation Of Mobile App ASO&lt;/strong&gt;&lt;br&gt;
To get the most out of app promotion, don’t approach SEO and ASO as conflicting strategies. Organic search optimization is still the foundation of your online presence, and it needs to be an integral part of your mobile app ASO. Numerous SEO techniques can directly benefit your app store optimization. Some of them are:&lt;/p&gt;

&lt;p&gt;• Keyword research and targeting. Keyword targeting is one of the most complex and delicate aspects of your SEO. Choose keywords carefully because they are the pillars of your online presence. Make sure you back up this process with the right keyword research tools or even invest in SEO consulting services.&lt;/p&gt;

&lt;p&gt;• The optimization of your app name, title, and URL for your major keywords&lt;/p&gt;

&lt;p&gt;• Generating app rating and reviews&lt;/p&gt;

&lt;p&gt;• Using deep linking in your mobile app&lt;/p&gt;

&lt;p&gt;• Indexation of your app on Google&lt;/p&gt;

&lt;p&gt;• Click-through rate optimization&lt;/p&gt;

&lt;p&gt;• Link building techniques&lt;/p&gt;

&lt;p&gt;One of the significant mistakes app developers make is underestimating the power of a quality, responsive website. In today’s competitive digital landscape, your website serves as your online portfolio. Your target audience uses your website to learn more about your app before downloading it; it should be as informative as possible. Also, it needs to guide them through the information seeking process, providing them with a personalized user experience and turning them into engaged prospects.&lt;/p&gt;

&lt;p&gt;Your website also helps you position yourself as an authority and a reliable source of information. Starting a blog and creating highly interactive and engaging content boosts app awareness and visibility. Most importantly, creating domain authority drives more web traffic and increases downloads.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Improving Your In-App Store Techniques&lt;/strong&gt;&lt;br&gt;
63% of users discover apps via app stores, and not boosting your rankings in these channels means you’re giving up on a major promotional opportunity for your app. While the features of app stores vary, there are still some fundamental aspects of optimization you need to focus on:&lt;/p&gt;

&lt;p&gt;A meta title. Keep in mind that longer titles usually get truncated in the SERPs. You need to keep your meta title short, sweet, and memorable. Don’t forget to add your major keywords to it, too. Namely, the recent report shows that apps with a top-value keyword in their title rank 10.3% higher than those without a keyword.&lt;/p&gt;

&lt;p&gt;A meta description is a sort of a call to action for your target audience. Write your meta description in simple language, list your unique benefits, and inspire people to download your app. Make sure you add your major keywords to it and refurbish it every time you update your product page.&lt;/p&gt;

&lt;p&gt;App ratings and reviews are the validation of your app’s quality. As such, they boost your brand’s credibility.&lt;/p&gt;

&lt;p&gt;App keyword fields. When optimizing your app page for keywords, make sure you write your titles and descriptions for your target audience first. Your content is how you will entice users to download your app. Keep in mind that ranking algorithms take both keywords and your customer conversion into consideration. &lt;/p&gt;

&lt;p&gt;Screenshots and preview videos are important, as they bring your text to life and help your customers see the app before downloading it.&lt;/p&gt;

&lt;p&gt;App icon optimization. Just keep in mind that Google Play and the App Store have different standards for an icon’s ideal size, colour, and geometry. iOS icons need to be at least 1024×1024 pixels, while Android ones are required to be 512×512 pixels.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Revamp Your App Data Regularly&lt;/strong&gt;&lt;br&gt;
The highest-ranking apps in app stores are those that are continually getting improved, such as changes in technology, feature improvements, or adding new user feedback. Making regular updates helps you build a positive brand image and trust among your target audience. The fact that you’re continually working on your app improvements and keeping your users up-to-date on them sets you apart from your competitors and even boosts your rankings in the app stores. Namely, both Apple’s App Store and Google’s Play Store assess the consistency of app upgrades when ranking it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Over To You&lt;/strong&gt;&lt;br&gt;
You can see from the previous examples that mobile app ASO and web SEO are overlapping strategies. Sure, these strategies can work separately, but if you are not using them together, you are not leveraging visibility properly. Don’t forget that SEO allows you to target those people that are not browsing app stores. By focusing on the elements mentioned above, you can boost your rankings in both search engines and app stores and drive more quality traffic to your app.&lt;/p&gt;

</description>
      <category>android</category>
      <category>ios</category>
      <category>webdev</category>
      <category>marketing</category>
    </item>
  </channel>
</rss>
