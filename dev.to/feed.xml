<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Random Quote Generator using JavaScript and API</title>
      <author>Mystery Code</author>
      <pubDate>Wed, 03 Nov 2021 16:32:42 +0000</pubDate>
      <link>https://dev.to/mysterycode/random-quote-generator-using-javascript-and-api-20ce</link>
      <guid>https://dev.to/mysterycode/random-quote-generator-using-javascript-and-api-20ce</guid>
      <description>&lt;p&gt;In this article, you will learn how to create Random Quote Generator using JavaScript and API. I have taken the help of API to make this &lt;a href="https://www.codemediaweb.com/2021/11/random-quote-generator-javascript.html"&gt;&lt;strong&gt;Quote Generator&lt;/strong&gt;&lt;/a&gt;. There are many websites that provide API links I have used one of those links.&lt;/p&gt;

&lt;p&gt;This design includes a display and a button. When you click on that button, you can see that every time a quote is generated randomly, it can be seen in the display. Here we have saved the information using fetch method then we have arranged to display it with the help of innerText.&lt;/p&gt;

&lt;p&gt;To build this project you need to have a basic idea about HTML CSS and JavaScript. First I created a small box using HTML and CSS with a display and a generate button.&lt;/p&gt;

&lt;p&gt;You want a preview? &lt;a href="https://www.codemediaweb.com/2021/11/random-quote-generator-javascript.html"&gt;&lt;strong&gt;Watch the live demo&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In Random Quote Generator I have used a heading above all then there is a display. Quote and author's name can be seen in this display. Then there is a button which I have implemented with the help of JavaScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-basic-structure-of-quote-generator"&gt;
  &lt;/a&gt;
  Step 1: Basic structure of Quote Generator
&lt;/h3&gt;

&lt;p&gt;I have created its basic structure using the following HTML and CSS. It is basically a kind of box to which I have added all the information. Here I have given the background-color of the webpage in blue and the width of the box is 400px.&lt;/p&gt;

&lt;p&gt;No specific height of the box is given here it will determine its own height based on the amount of content. However here the minimum height is given 100px.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"wrapper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Poppins"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#058ddc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;65px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;87&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1M84-kkv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m5my23ysbgmkrx4txgl6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1M84-kkv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m5my23ysbgmkrx4txgl6.jpg" alt="Basic structure of Quote Generator " width="880" height="407"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-add-titles-using-html"&gt;
  &lt;/a&gt;
  Step 2: Add titles using html
&lt;/h3&gt;

&lt;p&gt;Now I have added a heading that will help to enhance the beauty. I added this title using the h 1 tag of html then designed it as required with the help of CSS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Quote Generator&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#1073be&lt;/span&gt;
  &lt;span class="n"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="m"&gt;-40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4S5iQs2m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cqjp511gq7ppgiw8xz6x.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4S5iQs2m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cqjp511gq7ppgiw8xz6x.jpg" alt="Add titles using html" width="880" height="407"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-create-a-display-to-view-random-quotes"&gt;
  &lt;/a&gt;
  Step 3: Create a display to view random quotes
&lt;/h3&gt;

&lt;p&gt;Now I have made a small display which will help to see these quotes. Here you can see both the quote and the author's name. Now I have just added the information of this display and done the basic design. &lt;/p&gt;

&lt;p&gt;The height of this display has not been determined but the minimum height has been given.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"display"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"quote"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     Lorem ipsum dolor, sit amet consectetur adipisicing elit. Voluptas,
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;h3&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"author"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Lorem, ipsum.&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.display&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;139&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;253&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#066dd4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;19px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"- "&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nt"&gt;h3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#0e045a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A2-oQtoQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7cd2p20z3t5wfk4odrp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A2-oQtoQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7cd2p20z3t5wfk4odrp.jpg" alt="Create a display to view random quotes" width="880" height="407"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-create-the-generate-button"&gt;
  &lt;/a&gt;
  Step 4: Create the Generate button
&lt;/h3&gt;

&lt;p&gt;Now is the time to create a button that will help generate separate quotes. Later I will execute the button using JavaScript. But now I have created it with the help of HTML and CSS. I used padding to determine the size of the button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Get Quote&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#023b80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;45px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KZgvKXBu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3ly1sp9bjahc6ihito0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KZgvKXBu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3ly1sp9bjahc6ihito0.jpg" alt="Create the Generat button" width="880" height="434"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-activate-the-random-quote-generator-using-javascript"&gt;
  &lt;/a&gt;
  Step 5: Activate the Random Quote Generator using JavaScript
&lt;/h3&gt;

&lt;p&gt;Above we have designed this Random Quote Generator using html css. Now is the time to implement it using JavaScript. I have used very simple and simple JavaScript for this.&lt;/p&gt;

&lt;p&gt;First I set a constant for the Quote, Author and Generate buttons.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;quote&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;author&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I have added the API link in the &lt;code&gt;'url'&lt;/code&gt;. As I said earlier, I got all this information with the help of this link. I have used the API link of a website here. You can use the link of any website of your choice if you want.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://api.quotable.io/random&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now is the time to implement it using little JavaScript. First I collected all the information of this API using &lt;code&gt;fetch method&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Then with the help of &lt;code&gt;innerText&lt;/code&gt; I have shown the content and author's name in the right place in the web page separately. Above we have stored all the terms in &lt;code&gt;'getQuote'&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;getQuote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I have activated the button. The system will be updated every time you click on that button. As a result, new information can be seen in the display.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;load&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getQuote&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getQuote&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5LQ9fGY9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n777aweizxl0nuoncn63.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5LQ9fGY9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n777aweizxl0nuoncn63.jpg" alt="Random Quote Generator using JavaScript" width="880" height="434"&gt;&lt;/a&gt;&lt;br&gt;
 Hopefully you have learned from this tutorial how I created this JavaScript Random Quote Generator with the help of API. If there is any difficulty then of course you can let us know by commenting.&lt;/p&gt;

&lt;p&gt;You can find the &lt;a href="https://www.codemediaweb.com/2021/11/random-quote-generator-javascript.html"&gt;&lt;strong&gt;source code&lt;/strong&gt;&lt;/a&gt; and live demo needed to create this project with the help of this link.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>html</category>
    </item>
    <item>
      <title>Browse and query Cloud Spanner databases from Visual Studio Code</title>
      <author>Jan Kleinert</author>
      <pubDate>Wed, 03 Nov 2021 16:18:21 +0000</pubDate>
      <link>https://dev.to/jankleinert/browse-and-query-cloud-spanner-databases-from-visual-studio-code-2f0e</link>
      <guid>https://dev.to/jankleinert/browse-and-query-cloud-spanner-databases-from-visual-studio-code-2f0e</guid>
      <description>&lt;p&gt;&lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; is one of the most widely-used IDEs, due in part to the variety of extensions that are available to developers. For developers who are building applications that interact with &lt;a href="https://cloud.google.com/spanner"&gt;Cloud Spanner&lt;/a&gt;, we're excited to announce the &lt;a href="https://marketplace.visualstudio.com/items?itemName=google-cloud-spanner-ecosystem.google-cloud-spanner-driver"&gt;Google Cloud Spanner driver&lt;/a&gt; for the popular &lt;a href="https://vscode-sqltools.mteixeira.dev/"&gt;SQLTools extension&lt;/a&gt; for VS Code. &lt;/p&gt;

&lt;p&gt;The SQLTools extension works with a variety of SQL drivers and allows developers to manage database connections, execute and generate queries, and more from within VS Code. By using the Cloud Spanner driver with SQLTools, developers can browse tables and execute queries, DDL statements, and DML statements on Cloud Spanner databases without having to leave the IDE.&lt;/p&gt;

&lt;p&gt;In this post, we'll walk through the process of installing the extension, connecting to a Cloud Spanner database, and using SQLTools with the database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Before you get started, you'll need to have a &lt;a href="https://cloud.google.com/resource-manager/docs/creating-managing-projects"&gt;Google Cloud Platform project&lt;/a&gt; with a Cloud Spanner instance and a database. This &lt;a href="https://codelabs.developers.google.com/codelabs/cloud-spanner-first-db"&gt;codelab&lt;/a&gt; will walk you through the process if you haven't used Cloud Spanner before. Alternatively, you can use the &lt;a href="https://cloud.google.com/spanner/docs/emulator"&gt;emulator&lt;/a&gt;. You'll also need to have &lt;a href="https://code.visualstudio.com/"&gt;VS Code&lt;/a&gt; installed on your computer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;To install the Cloud Spanner driver for SQLTools, click on the Extensions icon in VS Code, search for "cloud spanner driver", and install the extension called Google Cloud Spanner Driver. Alternatively, you can install the Cloud Spanner driver for SQLTools from the &lt;a href="https://marketplace.visualstudio.com/items?itemName=google-cloud-spanner-ecosystem.google-cloud-spanner-driver"&gt;Visual Studio Marketplace&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CU9QnswL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/gweb-cloudblog-publish/images/extensions_marketplace.max-500x500.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CU9QnswL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/gweb-cloudblog-publish/images/extensions_marketplace.max-500x500.png" alt="extensions" width="500" height="166"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the extension is installed, you'll see a database icon for SQLTools, as highlighted by the red rectangle in the image below, show up in VS Code. Click this database icon to access the extension.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SOd7FcBj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/gweb-cloudblog-publish/images/Screen_Shot_2021-04-01_at_10.29.04_AM.max-400x400.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SOd7FcBj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/gweb-cloudblog-publish/images/Screen_Shot_2021-04-01_at_10.29.04_AM.max-400x400.png" alt="choose" width="60" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connecting-to-a-cloud-spanner-database"&gt;
  &lt;/a&gt;
  Connecting to a Cloud Spanner database
&lt;/h2&gt;

&lt;p&gt;With the extension installed, click the Add New Connection icon in SQLTools to open the Connection Assistant and choose Google Cloud Spanner Driver. You can connect either to a Spanner instance on Google Cloud or to an emulator instance. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-a-connection-using-the-emulator"&gt;
  &lt;/a&gt;
  Configuring a connection using the emulator
&lt;/h2&gt;

&lt;p&gt;The Cloud SDK offers a local, in-memory &lt;a href="https://cloud.google.com/spanner/docs/emulator"&gt;emulator&lt;/a&gt; that you can use while developing and testing. To use the SQLTools extension with the emulator, you must first start the emulator. Then, in the Connection Settings step, enter values for Connection name, Google Cloud Project ID, Spanner Instance ID, and Spanner Database ID. Select the checkbox next to Connect to emulator. When you use this setting, the instance and database you specified will be automatically created for you in the emulator if they do not already exist.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BiOy4K3s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/gweb-cloudblog-publish/images/unnamed_5_7MGdvpb.max-600x600.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BiOy4K3s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/gweb-cloudblog-publish/images/unnamed_5_7MGdvpb.max-600x600.png" alt="connection assistant" width="600" height="566"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-a-connection-to-a-cloud-spanner-database-on-google-cloud"&gt;
  &lt;/a&gt;
  Configuring a connection to a Cloud Spanner database on Google Cloud
&lt;/h2&gt;

&lt;p&gt;If you are connecting to a Cloud Spanner database running on Google Cloud, you'll need to provide the Google Cloud Project ID, Spanner Instance ID, and Spanner Database ID. You can enter any value you like for the Connection name. You'll also need to specify your credentials in one of two ways: enter the absolute path to your credential key file in the Connection Assistant or set the &lt;code&gt;GOOGLE_ACCOUNT_CREDENTIALS&lt;/code&gt; environment variable to the path to your credential key file. If you are using the &lt;code&gt;GOOGLE_ACCOUNT_CREDENTIALS&lt;/code&gt; environment variable, note that if VS Code was already running before you set the environment variable, then you will need to restart VS Code. Your service account will need to be granted appropriate permissions for interacting with Cloud Spanner. For more information about credentials, see the documentation on creating &lt;a href="https://cloud.google.com/iam/docs/creating-managing-service-accounts"&gt;service accounts&lt;/a&gt; and &lt;a href="https://cloud.google.com/iam/docs/creating-managing-service-account-keys"&gt;service account keys&lt;/a&gt;. You can find a list of Cloud Spanner roles in &lt;a href="https://cloud.google.com/iam/docs/understanding-roles#cloud-spanner-roles"&gt;this table&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-and-establishing-connections"&gt;
  &lt;/a&gt;
  Testing and establishing connections
&lt;/h2&gt;

&lt;p&gt;Once you've entered the connection settings information, you can click TEST CONNECTION to make sure the connection is successful, and then click SAVE CONNECTION.&lt;/p&gt;

&lt;p&gt;On the final step of the Connection Assistant, click CONNECT NOW.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#browsing-database-tables"&gt;
  &lt;/a&gt;
  Browsing database tables
&lt;/h2&gt;

&lt;p&gt;In the Connections section of SQLTools, you can view the tables in your database. In the screenshot below, you can see the columns in the comments table.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_eDVDfkn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/gweb-cloudblog-publish/images/unnamed_6_5zLZJIK.max-500x500.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_eDVDfkn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/gweb-cloudblog-publish/images/unnamed_6_5zLZJIK.max-500x500.png" alt="browsing" width="500" height="453"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Right-clicking on a table name provides options such as showing table records or generating an insert query.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#executing-queries-and-statements"&gt;
  &lt;/a&gt;
  Executing queries and statements
&lt;/h2&gt;

&lt;p&gt;The Cloud Spanner driver supports executing queries, DDL statements, and &lt;a href="https://cloud.google.com/spanner/docs/dml-tasks"&gt;DML statements&lt;/a&gt;. If you execute multiple statements in a single script, each statement will be executed in a separate transaction. Note that the extension is intended for use during development and testing, not for administration of production database environments.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OsJz5cQr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/gweb-cloudblog-publish/images/Screen_Shot_2021-04-01_at_11.38.45_AM.max-600x600.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OsJz5cQr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/gweb-cloudblog-publish/images/Screen_Shot_2021-04-01_at_11.38.45_AM.max-600x600.png" alt="db environments" width="600" height="139"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Queries use single-use read-only transactions, while DML statements use read-write transactions. Make sure that the service account you're using has the necessary permissions to execute the queries or statements. For more information on types of transactions, see &lt;a href="https://cloud.google.com/spanner/docs/transactions"&gt;the documentation&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h2&gt;

&lt;p&gt;Interacting with your Cloud Spanner databases from within your IDE can make your development process more efficient and reduce the need to switch between multiple tools and interfaces. Ready to try it yourself? Install the &lt;a href="https://marketplace.visualstudio.com/items?itemName=google-cloud-spanner-ecosystem.google-cloud-spanner-driver"&gt;Cloud Spanner driver for SQLTools&lt;/a&gt; and start exploring and interacting with your Cloud Spanner databases from within VS Code. If you have suggestions or issues, you can raise them in the &lt;a href="https://github.com/cloudspannerecosystem/sqltools-cloud-spanner-driver/issues"&gt;issue tracker&lt;/a&gt; or for questions or comments, feel free to reach out to me on &lt;a href="https://twitter.com/jankleinert"&gt;Twitter&lt;/a&gt;. We would love to hear your feedback.&lt;/p&gt;

</description>
      <category>spanner</category>
      <category>database</category>
      <category>vscode</category>
      <category>googlecloud</category>
    </item>
    <item>
      <title>40+ Python Projects for Beginners – Easy Ideas to Get Started Coding Python </title>
      <author>John</author>
      <pubDate>Wed, 03 Nov 2021 16:16:52 +0000</pubDate>
      <link>https://dev.to/pych/40-python-projects-for-beginners-easy-ideas-to-get-started-coding-python-2eff</link>
      <guid>https://dev.to/pych/40-python-projects-for-beginners-easy-ideas-to-get-started-coding-python-2eff</guid>
      <description>&lt;p&gt;&lt;span&gt;Python is one of the most popular programming languages currently. It looks like this trend is about to continue in 2021 and beyond. So, if you are a Python beginner, the best thing you can do is work on some real-time &lt;span&gt;Python project ideas.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;We, here at upGrad, believe in a practical approach as theoretical knowledge alone won’t be of help in a real-time work environment. In this article, we will be exploring some interesting &lt;span&gt;Python project ideas&lt;/span&gt; which beginners can work on to put their Python knowledge to test. In this article, you will find 42 &lt;span&gt;top python project ideas&lt;/span&gt; for beginners to get hands-on experience on Python &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;b&gt;Read More:&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/40-python-projects-for-beginners-easy-ideas-to-get-started-coding-python/&amp;amp;ved=2ahUKEwiA2JL1yvzzAhUs_XMBHXHuCDIQFnoECAQQBQ&amp;amp;usg=AOvVaw3-eFdvlO7heiHZwMYsDSN6"&gt; 40+ Python Projects for Beginners – Easy Ideas to Get Started Coding Python &lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>40+ JavaScript Projects for Beginners – Easy Ideas to Get Started Coding JS [Beginners - Advance]</title>
      <author>John</author>
      <pubDate>Wed, 03 Nov 2021 16:10:25 +0000</pubDate>
      <link>https://dev.to/pych/40-javascript-projects-for-beginners-easy-ideas-to-get-started-coding-js-beginners-advance-1m42</link>
      <guid>https://dev.to/pych/40-javascript-projects-for-beginners-easy-ideas-to-get-started-coding-js-beginners-advance-1m42</guid>
      <description>&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;The best way to learn a new programming language is to build projects.

I have created a list of 40 beginner friendly project tutorials in Vanilla JavaScript, React, and TypeScript.

My advice for tutorials would be to watch the video, build the project, break it apart and rebuild it your own way. Experiment with adding new features or using different methods.

That will test if you have really learned the concepts or not.

You can click on any of the projects listed below to jump to that section of the article.

&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/40-javascript-projects-for-beginners/&amp;amp;ved=2ahUKEwiB9tj0rPjyAhUMX30KHZQ5CG0QFnoECAgQAQ&amp;amp;usg=AOvVaw26RDQjHugdhbATVS83LI83"&gt;40+ JavaScript Projects for Beginners – Easy Ideas to Get Started Coding JS

&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>40+ Nodejs Projects for Beginners – Easy Ideas to Get Started Coding Nodejs [Beginners - Advance] </title>
      <author>John</author>
      <pubDate>Wed, 03 Nov 2021 16:09:38 +0000</pubDate>
      <link>https://dev.to/pych/40-nodejs-projects-for-beginners-easy-ideas-to-get-started-coding-nodejs-beginners-advance-5eg5</link>
      <guid>https://dev.to/pych/40-nodejs-projects-for-beginners-easy-ideas-to-get-started-coding-nodejs-beginners-advance-5eg5</guid>
      <description>&lt;p&gt;If you have decided to build your career in &lt;span&gt;NodeJS &lt;/span&gt;development, we have gathered a list of &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; for all node enthusiasts to build highly scalable &lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/nodejs-project-for-beginners/&amp;amp;ved=2ahUKEwiOlt_I6e7zAhXXb30KHRuwBEIQFnoECAUQAQ&amp;amp;usg=AOvVaw1LC_Y25wyupI6_tdH89kg1" rel="noreferrer noopener"&gt;web applications&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These best &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; will help you gain knowledge about core node concepts, train your skill level, build a superb work portfolio, and get hired for your dream job.&lt;/p&gt;
&lt;p&gt;When you start building your first projects, it’s highly recommended for beginners in coding to create a repository for each of your projects so you will be able to learn &lt;em&gt;git&lt;/em&gt; and show your coding expertise to future employers. &lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/nodejs-project-for-beginners/&amp;amp;ved=2ahUKEwiOlt_I6e7zAhXXb30KHRuwBEIQFnoECAUQAQ&amp;amp;usg=AOvVaw1LC_Y25wyupI6_tdH89kg1"&gt;40+ Nodejs Projects for Beginners – Easy Ideas to Get Started Coding Nodejs &lt;/a&gt;&lt;/b&gt; &lt;/p&gt;






</description>
    </item>
    <item>
      <title>Automate creating DB Schemas by SilvenLEAF</title>
      <author>SilvenLEAF</author>
      <pubDate>Wed, 03 Nov 2021 15:53:40 +0000</pubDate>
      <link>https://dev.to/silvenleaf/automate-creating-db-schemas-by-silvenleaf-1064</link>
      <guid>https://dev.to/silvenleaf/automate-creating-db-schemas-by-silvenleaf-1064</guid>
      <description>&lt;p&gt;Ahoy there! Here we are, automating some tedious boring stuff! Today we'll be automating the entire DB Schema generations. Who's excited?&lt;/p&gt;

&lt;p&gt;We'll learn a bit of bash scripting on the way too! I'm really excited! Here we'll be using PostgreSQL, but you can use any SQL DB. We'll also be using Sequelize.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-0-project-setup"&gt;
  &lt;/a&gt;
  Step 0: Project Setup
&lt;/h3&gt;

&lt;p&gt;Assuming you already have a dummy project set up for this, if not, check this blog out &lt;strong&gt;&lt;a href="https://dev.to/silvenleaf/how-to-use-postgresql-with-nodejs-by-silvenleaf-1aef"&gt;How to use PostgreSQL with NodeJS&lt;/a&gt;&lt;/strong&gt; and finish your normal DB setup. Here I used PostgreSQL, but you can use any SQL DB you like! Once done, let the adventure begin!!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-create-our-automation-base-structure"&gt;
  &lt;/a&gt;
  Step 1: Create our automation base structure
&lt;/h3&gt;

&lt;p&gt;Create a &lt;strong&gt;autoGen&lt;/strong&gt; folder with this following structure&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ROOT_PROJECT_DIRECTORY
├── autoGen (it is a folder)
│   ├── models (it is a folder) // we will have all our autogenerated models here
│   ├── autoGen.sh (it is a file) // it is our bash script
│   ├── rename.js (it is a file) // an optional file to do some custom renamings
│
├── node_modules
├── package.json
├── .gitignore
└── your other project stuff
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that's done, let's move on the fun part, let's automate!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-understanding-the-automation-logic"&gt;
  &lt;/a&gt;
  Step 2: Understanding the automation logic
&lt;/h3&gt;

&lt;p&gt;Before jumping into the meaty delicious stuff, first let's understand what we want to do.&lt;/p&gt;

&lt;p&gt;First, we will autogenerate our models and schemas and will store it inside the &lt;strong&gt;models&lt;/strong&gt; folder which is inside &lt;strong&gt;autoGen&lt;/strong&gt; folder. Then if we want, we'll do some custom renamings or other conversions stuff. Later we will copy the generated final models and schemas in our &lt;strong&gt;specific location&lt;/strong&gt;. Every time we do this, at the beginning we'll clear up the &lt;strong&gt;final location models&lt;/strong&gt; folder and &lt;strong&gt;autoGen/models&lt;/strong&gt; folders, just to make sure everything is clear.&lt;/p&gt;

&lt;p&gt;So now finally let's learn some bash scripting.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-lets-learn-some-bash-scripting"&gt;
  &lt;/a&gt;
  Step 3: Let's learn some bash scripting
&lt;/h3&gt;

&lt;p&gt;But first, run the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;-D&lt;/span&gt; sequelize-auto
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(&lt;strong&gt;"npm i -D X"&lt;/strong&gt; is the short-hand for &lt;strong&gt;"npm install --save-dev X"&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;Anyway, now that's out of the way. Let's begin the fun stuff.&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;autoGen.sh&lt;/strong&gt; bash file, write the following contents&lt;br&gt;
&lt;strong&gt;Read the comments to understand what each word and each line does&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# By @SilvenLEAF&lt;/span&gt;
&lt;span class="c"&gt;# command 1:&lt;/span&gt;
&lt;span class="nb"&gt;rm&lt;/span&gt; ../database/models/&lt;span class="k"&gt;*&lt;/span&gt; &lt;span class="c"&gt;# if you followed the blog link to setup the project, then you know that, this is our main root db models folder where we want to copy all our autoGenerated models because this is where we'll be using them from. But if you are using your own project or setup, then replace the path (after rm) with the path of your main "models" folder which you'll be using&lt;/span&gt;
&lt;span class="c"&gt;# rm X command means remove or delete. X/* symbol means everything inside X. &lt;/span&gt;
&lt;span class="c"&gt;# So this command means, remove everything from our "database/models" folder, make it empty and clean&lt;/span&gt;



&lt;span class="c"&gt;# command 2:&lt;/span&gt;
&lt;span class="nb"&gt;rm &lt;/span&gt;models/&lt;span class="k"&gt;*&lt;/span&gt;
&lt;span class="c"&gt;# Same as the previous command, remove everything from our models folder which is in the same level as this bash script&lt;/span&gt;
&lt;span class="c"&gt;# I mean autoGen &amp;gt; models folder because it is in the same level as **autoGen.sh** file&lt;/span&gt;



&lt;span class="c"&gt;# command 3:&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Started auto-generating the models"&lt;/span&gt;
&lt;span class="c"&gt;# echo X command is the bash script version of "console.log(X)&lt;/span&gt;



&lt;span class="c"&gt;# command 4:&lt;/span&gt;
../node_modules/.bin/sequelize-auto sequelize-auto &lt;span class="nt"&gt;-d&lt;/span&gt; YOUR_DATABASE_NAME &lt;span class="nt"&gt;-h&lt;/span&gt; YOUR_DATABASE_HOST &lt;span class="nt"&gt;-p&lt;/span&gt; YOUR_DATABASE_PORT &lt;span class="nt"&gt;-u&lt;/span&gt; YOUR_DATABASE_USER &lt;span class="nt"&gt;-x&lt;/span&gt; YOUR_DATABASE_PASSWORD &lt;span class="nt"&gt;-e&lt;/span&gt; TYPE_OF_YOUR_SQL_DATABASE &lt;span class="nt"&gt;-s&lt;/span&gt; YOUR_DATABASE_SCHEMA &lt;span class="nt"&gt;--cm&lt;/span&gt; p &lt;span class="nt"&gt;--cp&lt;/span&gt; c &lt;span class="nt"&gt;--sg&lt;/span&gt; &lt;span class="nt"&gt;-l&lt;/span&gt; es5_OR_es6_OR_esm_OR_ts
&lt;span class="c"&gt;# If you globally installed sequelize-auto, then you could have run it like this&lt;/span&gt;
&lt;span class="c"&gt;# sequelize-auto -d YOUR_DATABASE_NAME -h YOUR_DATABASE_HOST -p YOUR_DATABASE_PORT -u YOUR_DATABASE_USER -x YOUR_DATABASE_PASSWORD -e TYPE_OF_YOUR_SQL_DATABASE -s YOUR_DATABASE_SCHEMA --cm p --cp c --sg -l es5_OR_es6_OR_esm_OR_ts&lt;/span&gt;
&lt;span class="c"&gt;# But since we didn't do that, we provided it's location, which is obviously from node_modules folder&lt;/span&gt;
&lt;span class="c"&gt;# Just don't think too much, confirm the location path of node modules, everything else after that are same&lt;/span&gt;

&lt;span class="c"&gt;# To Know More about this command 4, read below&lt;/span&gt;
&lt;span class="c"&gt;# -------------------------------------------------------------&lt;/span&gt;
&lt;span class="c"&gt;# The command 4, auto-generates the models&lt;/span&gt;

&lt;span class="c"&gt;# Let's imagine our&lt;/span&gt;
&lt;span class="c"&gt;# DATABASE_NAME = demo&lt;/span&gt;
&lt;span class="c"&gt;# DATABASE_HOST = localhost &lt;/span&gt;
&lt;span class="c"&gt;# DATABASE_USER = silvenleaf&lt;/span&gt;
&lt;span class="c"&gt;# DATABASE_PASSWORD = 12345678&lt;/span&gt;
&lt;span class="c"&gt;# TYPE_OF_OUR_SQL_DATABASE = postgres&lt;/span&gt;
&lt;span class="c"&gt;# DATABASE_SCHEMA = main&lt;/span&gt;

&lt;span class="c"&gt;# And now we want to generate models written in TypeScript, so use this command &lt;/span&gt;
&lt;span class="c"&gt;# ../node_modules/.bin/sequelize-auto sequelize-auto -d demo -h localhost -p 5432 -u silvenleaf -x 12345678 -e postgres -s main --cm p --cp c --sg -l ts&lt;/span&gt;

&lt;span class="c"&gt;# But if you want to generate models written in JavaScript, then use this command&lt;/span&gt;
&lt;span class="c"&gt;# ../node_modules/.bin/sequelize-auto sequelize-auto -d demo -h localhost -p 5432 -u silvenleaf -x 12345678 -e postgres -s main --cm p --cp c --sg -l es6&lt;/span&gt;

&lt;span class="c"&gt;# The final -l X decides whether we want JavaScript or TypeScript models, if not specified, it'll create JavaScript models, but if you specify "-l ts", it'll create TypeScript models&lt;/span&gt;
&lt;span class="c"&gt;# -------------------------------------------------------------&lt;/span&gt;



&lt;span class="c"&gt;# command 5: (Optional)&lt;/span&gt;
node rename.js
&lt;span class="c"&gt;# This is the optional rename.js file. If you want to do some custom renamings, then run this file. Otherwise, remove this command&lt;/span&gt;



&lt;span class="c"&gt;# command 6:&lt;/span&gt;
&lt;span class="nb"&gt;cp&lt;/span&gt; &lt;span class="nt"&gt;-R&lt;/span&gt; models/&lt;span class="k"&gt;*&lt;/span&gt; ../database/models/
&lt;span class="c"&gt;# cp command means copy. cp X/* Y/ means, copy everything from X to Y. Remember what this * means? * means everything :)&lt;/span&gt;
&lt;span class="c"&gt;# Here the -R flag means to copy stuff recursively&lt;/span&gt;



&lt;span class="c"&gt;# command 7:&lt;/span&gt;
&lt;span class="nb"&gt;ls &lt;/span&gt;models
&lt;span class="c"&gt;# ls X command lists down all the contents (files and folders) inside X&lt;/span&gt;
&lt;span class="c"&gt;# So here it'll list out all the models that were auto-generated&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great!! Now let's test it out&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-testing-the-bash-script"&gt;
  &lt;/a&gt;
  Step 4: Testing the bash Script
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#substep-1-creating-a-demo-database"&gt;
  &lt;/a&gt;
  Sub-step 1: Creating a demo database
&lt;/h4&gt;

&lt;p&gt;First let's create our demo db so that we can test it, if you already have a db created with some tables, then skip this sub-step and go to the next one to run and test. Anyway, let's go.&lt;/p&gt;

&lt;p&gt;First download &lt;strong&gt;PgAdmin&lt;/strong&gt; (Only if you are using postgres for this tutorial, if not download a similar GUI software for your SQL database). It is a GUI for Postgres Database. But if you are using any other database or other GUIs, then that'd work too. Our main purpose is to create a demo db and some dummy tables. It doesn't matter if you create it from GUI or CLI or any place.&lt;/p&gt;

&lt;p&gt;For keeping everything simple, I'm using GUI. If you don't have &lt;strong&gt;PgAdmin&lt;/strong&gt; and want to download it, you can download it from &lt;a href="https://www.pgadmin.org/download/pgadmin-4-windows/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once done downloading and installing, you'll see something like this.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ajdhkVzD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z01m4cmrw7pdpdj06rhk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ajdhkVzD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z01m4cmrw7pdpdj06rhk.png" alt="Open PgAdmin" width="880" height="417"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Expand &lt;strong&gt;Servers&lt;/strong&gt; and right click on &lt;strong&gt;Databases&lt;/strong&gt; and select &lt;strong&gt;Create &amp;gt; Database&lt;/strong&gt;. You'll see something like this. Give a name for your database (I gave &lt;strong&gt;demo&lt;/strong&gt;) and click &lt;strong&gt;save&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h2wVU7Tq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4270pplui9kmislw4q0n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h2wVU7Tq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4270pplui9kmislw4q0n.png" alt="Create Database" width="880" height="399"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, expand &lt;strong&gt;Databases&lt;/strong&gt; and you'll see your &lt;strong&gt;demo&lt;/strong&gt; database there. Expand it and click on &lt;strong&gt;Schemas&lt;/strong&gt; and select &lt;strong&gt;Create &amp;gt; Schema&lt;/strong&gt;. Give a name and click &lt;strong&gt;save&lt;/strong&gt; (I gave &lt;strong&gt;main&lt;/strong&gt;).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pXKO-UmR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sp49ughp3p6jr4pqyz9b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pXKO-UmR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sp49ughp3p6jr4pqyz9b.png" alt="Create Schema" width="880" height="407"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, expand the &lt;strong&gt;main&lt;/strong&gt; schema and click on &lt;strong&gt;tables&lt;/strong&gt; and select &lt;strong&gt;Create &amp;gt; Table&lt;/strong&gt;. And you know what to do right? Let's create a table. First give it a name (I gave &lt;strong&gt;users&lt;/strong&gt;).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C0nUjA2I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tkseo3mccpafcsmdxzxk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C0nUjA2I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tkseo3mccpafcsmdxzxk.png" alt="Create Table" width="880" height="405"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then click on the &lt;strong&gt;columns&lt;/strong&gt; tab. Then click on the &lt;strong&gt;+&lt;/strong&gt; button. Give the column a name, choose it's data type etc etc. I'm creating only these 4 columns: &lt;strong&gt;user_id, username, age, is_female&lt;/strong&gt;. You can create as much as you like. When done, click &lt;strong&gt;save&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p7J1Ox-X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vp85h6z5r5mm23o7s2k7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p7J1Ox-X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vp85h6z5r5mm23o7s2k7.png" alt="Create Columns" width="880" height="402"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great! Now we have a database and a table to test our automation script! Now let's go back to our project folder and update the command 4 of the bash script. Here, put your database name, host, user, password, and schema. If you followed me on the database creation then your command will look something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# command 4:&lt;/span&gt;
../node_modules/.bin/sequelize-auto sequelize-auto &lt;span class="nt"&gt;-d&lt;/span&gt; demo &lt;span class="nt"&gt;-h&lt;/span&gt; localhost &lt;span class="nt"&gt;-p&lt;/span&gt; 5432 &lt;span class="nt"&gt;-u&lt;/span&gt; YOUR_USER_NAME &lt;span class="nt"&gt;-x&lt;/span&gt; YOUR_USER_PASSWORD &lt;span class="nt"&gt;-e&lt;/span&gt; postgres &lt;span class="nt"&gt;-s&lt;/span&gt; main &lt;span class="nt"&gt;--cm&lt;/span&gt; p &lt;span class="nt"&gt;--cp&lt;/span&gt; c &lt;span class="nt"&gt;--sg&lt;/span&gt; &lt;span class="nt"&gt;-l&lt;/span&gt; ts

&lt;span class="c"&gt;# Here I put "-l ts" to create TypeScript models. If you want JavaScript models, replace it with "-l es6" or "-l es5"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's run this file. But before that, one IMPORTANT NOTE. If you are using TypeScript, and you have a &lt;strong&gt;tsconfig.json&lt;/strong&gt; file. Then make sure your target is &lt;strong&gt;es6&lt;/strong&gt;. Because Sequelize imports do not work with &lt;strong&gt;es5&lt;/strong&gt;. So inside your &lt;strong&gt;tsconfig.json&lt;/strong&gt;, make the target as &lt;strong&gt;es6&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   
   &lt;/span&gt;&lt;span class="nl"&gt;"target"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"es6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;other&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;configs&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#substep-2-run-the-bash-script-and-test"&gt;
  &lt;/a&gt;
  Sub-Step 2: Run the bash Script and test
&lt;/h4&gt;

&lt;p&gt;Now go inside that &lt;strong&gt;/autoGen&lt;/strong&gt; folder and run this bash script. To run it, type the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bash autoGen.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;(bash X.sh runs the X.sh bash file)&lt;/strong&gt;&lt;br&gt;
Hurray!! Magically all your Schemas are generated and also copied to the mentioned root location &lt;strong&gt;(In this case, "../database/models")&lt;/strong&gt;. Congrats! You just automated the DB Schema generations!&lt;/p&gt;

&lt;p&gt;Now create as much tables as you want, and update them as much as you want in the Database. And when you run this bash file, it'll automatically create all your updated Schemas and models! Yay!!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-5-more-on-renamejs"&gt;
  &lt;/a&gt;
  Step 5: MORE on rename.js
&lt;/h3&gt;

&lt;p&gt;One Important note about the &lt;strong&gt;command 4&lt;/strong&gt;, the name of the autogenerated model is always in singular. So if your table name is &lt;strong&gt;users&lt;/strong&gt; or &lt;strong&gt;user&lt;/strong&gt;, both will be converted and the generated model name will be &lt;strong&gt;user&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;So, what if you want to change the generated names. Or customize other stuff or contents. That's where we'll be using that &lt;strong&gt;rename.js&lt;/strong&gt; file. One example is below.&lt;/p&gt;

&lt;p&gt;Suppose we had a table named as &lt;strong&gt;usermeta&lt;/strong&gt;, then the generated model will be named as &lt;strong&gt;usermetum&lt;/strong&gt; because &lt;strong&gt;metum&lt;/strong&gt; is singular of &lt;strong&gt;meta&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;So if we want to change the file name and replace all &lt;strong&gt;Usermetum&lt;/strong&gt; mentioned in it and inside &lt;strong&gt;init-models&lt;/strong&gt; file as &lt;strong&gt;Usermeta&lt;/strong&gt;, then we can use the rename.js file. You can write the logic like this with the help of &lt;strong&gt;fs&lt;/strong&gt; module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Use this script to rename any variables generated in models folder&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./models/usermetum.ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/usermetum/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;usermeta&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/Usermetum/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Usermeta&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./models/usermeta.ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./models/usermetum.ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//delete the original usermetum file&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;



&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;file2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./models/init-models.ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;file2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;file2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/usermetum/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;usermeta&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;file2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;file2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/Usermetum/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Usermeta&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./models/init-models.ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;file2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#bonus-step-creating-a-server-and-rest-apis"&gt;
  &lt;/a&gt;
  Bonus Step: Creating a Server and REST APIs
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#substep-1-exporting-all-db-models-dynamically"&gt;
  &lt;/a&gt;
  Sub-Step 1: Exporting all DB models dynamically
&lt;/h3&gt;

&lt;p&gt;Assuming you have followed my last blog on how to set up the Database with Sequelize, create a &lt;strong&gt;DBmodels.ts&lt;/strong&gt; file in the root directory. It'll have these contents&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Sequelize&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sequelize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yourDatabaseHost&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yourDatabaseUser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yourDatabasePassword&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yourDatabaseName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt;


&lt;span class="c1"&gt;// __________set up sequelize connection (just like mongoose.connect())&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sequelize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Sequelize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;dialect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;postgres&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;


&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;initModels&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./database/models/init-models&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// from the root models folder, import the init-models file, this is NOT imported from './autoGen/models' but from the root models folder (if you followed my last blog, it'll be './database/models')&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;DBmodels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;initModels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sequelize&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;DBmodels&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#substep-2-create-the-server-and-api"&gt;
  &lt;/a&gt;
  Sub-Step 2: Create the Server and API
&lt;/h4&gt;

&lt;p&gt;Let's create the APIs to do some CRUD stuff to test out our DB. You can use anything, restify, hapi, loopback, express or anything. I'm goin' with &lt;strong&gt;express&lt;/strong&gt;. Why? Because it's so express-y haha!&lt;/p&gt;

&lt;p&gt;For those who are a bit lost on how to create an express server with TypeScript, check this one out&lt;br&gt;
&lt;a href="https://dev.to/silvenleaf/how-to-create-a-typescript-project-with-expressjs-the-simplest-way-578a"&gt;How to Create a TypeScript Project with ExpressJS the Simplest Way!!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In short (for details, checkout above link),&lt;br&gt;
&lt;strong&gt;0. install packages&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i typescript ts-node express @types/node @types/express
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;1. init tsconfig&lt;/strong&gt; (make sure you already have typescript globally installed, if not type &lt;strong&gt;npm i -g typescript&lt;/strong&gt;. And don't get it confused with the previous normal &lt;strong&gt;npm i typescript etc etc&lt;/strong&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;tsc &lt;span class="nt"&gt;--init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;create server on our app.ts file&lt;/strong&gt;&lt;br&gt;
Create an &lt;strong&gt;app.ts&lt;/strong&gt; file in the root level of our project directory and write the following contents.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;DBmodels&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./DBmodels&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;Usermeta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Users&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;DBmodels&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// this DBmodels object has all models dynamically inside it. So you can also find amazing autocomplete if you are using TypeScript&lt;/span&gt;



&lt;span class="c1"&gt;// -------------------firing express app&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlencoded&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;extended&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}));&lt;/span&gt;




&lt;span class="c1"&gt;// -------------------routes&lt;/span&gt;
&lt;span class="c1"&gt;// Create record&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createdUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SilvenLEAF&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getFullYear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isFemale&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;createdUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Read/Get record&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allUsers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;
  &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;allUsers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Update record&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users/:userId&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updatedUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SilvenLEAF (Manash Sarma)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="p"&gt;}});&lt;/span&gt;
  &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updatedUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Delete record&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users/:userId&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroy&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Record deleted!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;





&lt;span class="c1"&gt;// --------------------Listen&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server running on PORT &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, to test out our server, run &lt;strong&gt;ts-node app.ts&lt;/strong&gt; and make those http requests. Congrats!! We learnt how to automate all DB Schema and model generations, we also learnt about bash scripting and much more! Did you enjoy it? If yes, let me know in the comments!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NEXT blog coming soon by Nov 7th!!&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's NEXT?
&lt;/h1&gt;

&lt;h4&gt;
  &lt;a href="#1-improved-ai-bot-that-can-do-anything"&gt;
  &lt;/a&gt;
  1. Improved AI BOT that can do anything
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#2-insane-stuff-with-javascripttypescript"&gt;
  &lt;/a&gt;
  2. Insane stuff with JavaScript/TypeScript
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#3-debugging-typescript-with-vs-code-debugger"&gt;
  &lt;/a&gt;
  3. Debugging TypeScript with VS Code Debugger
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#4-how-to-automate-anything"&gt;
  &lt;/a&gt;
  4. How to automate anything
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#5-sequelize-hooks"&gt;
  &lt;/a&gt;
  5. Sequelize Hooks
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#6-how-to-deploy-in-the-cloud-azure-vms"&gt;
  &lt;/a&gt;
  6. How to deploy in the Cloud (Azure VMs)
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#7-how-to-create-an-android-app-with-no-xp"&gt;
  &lt;/a&gt;
  7. How to create an Android APP with NO XP
&lt;/h4&gt;

&lt;p&gt;(including apk generating)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#got-any-doubt"&gt;
  &lt;/a&gt;
  Got any doubt?
&lt;/h1&gt;

&lt;p&gt;Drop a comment or Feel free to reach out to me @SilveLEAF on Twitter or &lt;a href="https://www.linkedin.com/in/silvenleaf/"&gt;Linkedin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wanna know more about me? Come here! &lt;br&gt;
&lt;a href="https://SilvenLEAF.github.io"&gt;SilvenLEAF.github.io&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>node</category>
      <category>postgres</category>
    </item>
    <item>
      <title>How to test file uploads with Selenium</title>
      <author>Liviu Lupei</author>
      <pubDate>Wed, 03 Nov 2021 15:47:35 +0000</pubDate>
      <link>https://dev.to/liviu_lupei/how-to-test-file-uploads-with-selenium-2d7c</link>
      <guid>https://dev.to/liviu_lupei/how-to-test-file-uploads-with-selenium-2d7c</guid>
      <description>&lt;p&gt;I work as a Solutions Architect at &lt;a href="https://endtest.io"&gt;Endtest&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this article, we're going to learn how to perform a file upload with Selenium.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-lets-understand-how-a-file-upload-works"&gt;
  &lt;/a&gt;
  1. Let's understand how a file upload works
&lt;/h3&gt;

&lt;p&gt;Here is a basic example on &lt;a href="https://filebin.net/"&gt;Filebin&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xQl_t9J2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yj2ti1dfj7n1905zlhl9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xQl_t9J2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yj2ti1dfj7n1905zlhl9.png" alt="file upload" width="880" height="439"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Behind each file upload section, you will find an &lt;code&gt;&amp;lt;input type="file"&amp;gt;&lt;/code&gt; element:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zqHYOEK---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phbduivtcne91y8lexu8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zqHYOEK---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phbduivtcne91y8lexu8.png" alt="file input" width="880" height="158"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When I click the &lt;code&gt;Select files to upload&lt;/code&gt; button, the native file explorer window from my OS will open and I can select a file:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ynB3L1eD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b14hmmkak4kcbmn1394l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ynB3L1eD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b14hmmkak4kcbmn1394l.png" alt="file upload mac" width="880" height="502"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And after I select the file and click on the &lt;code&gt;Open&lt;/code&gt; button, the local path of the file will be written in the &lt;code&gt;&amp;lt;input type="file"&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;In my situation, this will be the local path of the file:&lt;br&gt;
&lt;code&gt;/Users/liviulupei/Desktop/rabbit.png&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-behind-the-scenes"&gt;
  &lt;/a&gt;
  2. Behind the scenes
&lt;/h3&gt;

&lt;p&gt;The browser is the one writing that local file path, not the JavaScript.&lt;/p&gt;

&lt;p&gt;Browsers do not allow JavaScript to write in &lt;code&gt;&amp;lt;input type="file"&amp;gt;&lt;/code&gt; elements, due to Security reasons. &lt;/p&gt;

&lt;p&gt;If that restriction wouldn't exist, a website could potentially upload files from your computer, without your knowledge or permission.&lt;/p&gt;

&lt;p&gt;As an experiment, let's try to write in that input with JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fileField&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/Users/liviulupei/Desktop/rabbit.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2fWdEh-_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tm5qfduw842ea6g1xusp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2fWdEh-_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tm5qfduw842ea6g1xusp.png" alt="javascript file upload" width="880" height="126"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we're getting an error. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-how-not-to-automate-a-file-upload-test"&gt;
  &lt;/a&gt;
  3. How not to automate a file upload test
&lt;/h3&gt;

&lt;p&gt;The first instinct might be to automate the exact steps that a real user performs. &lt;/p&gt;

&lt;p&gt;But there's a major challenge in that approach.&lt;/p&gt;

&lt;p&gt;Selenium can only interact with elements from the DOM, it cannot interact with elements from the OS, such as that File Explorer window.&lt;/p&gt;

&lt;p&gt;A possible workaround for that would be to call an external script that can handle that part, such as &lt;a href="https://www.autoitscript.com/site/"&gt;AutoIT&lt;/a&gt;, &lt;a href="http://sikulix.com/"&gt;SikuliX&lt;/a&gt; or &lt;a href="https://pywinauto.readthedocs.io/en/latest/"&gt;pywinauto&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But that could introduce flakiness in your test, since things might not always look the same in that file explorer window.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-the-correct-way"&gt;
  &lt;/a&gt;
  4. The correct way
&lt;/h3&gt;

&lt;p&gt;The correct approach is to skip the file explorer window part and to write the local file path directly in the &lt;code&gt;&amp;lt;input type="file"&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;JavaScript can't do that, but Selenium can, since the commands go directly through the webdriver.&lt;/p&gt;

&lt;p&gt;Let's write that Selenium command with Python:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;file_local_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"/Users/liviulupei/Desktop/rabbit.png"&lt;/span&gt;
&lt;span class="n"&gt;file_input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"fileField"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;file_input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_local_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Easy, right? &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-in-case-the-file-input-is-hidden"&gt;
  &lt;/a&gt;
  5. In case the file input is hidden
&lt;/h3&gt;

&lt;p&gt;There are situations where the &lt;code&gt;&amp;lt;input type="file"&amp;gt;&lt;/code&gt; element might be hidden. &lt;/p&gt;

&lt;p&gt;That is the case with most modern website designs.&lt;/p&gt;

&lt;p&gt;Selenium won't be able to interact with that element, because it can only interact with visible elements.&lt;/p&gt;

&lt;p&gt;In that situation, you would get an &lt;code&gt;Element not interactable&lt;/code&gt; error.&lt;/p&gt;

&lt;p&gt;The workaround is to execute some JavaScript code in the browser that will make the element visible:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fileField&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visibility&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;visible&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fileField&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;block&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That JavaScript code will actually be executed from your Python Selenium code, with the &lt;code&gt;execute_script&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;javascript_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"document.querySelector..."&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute_script&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;javascript_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-not-ideal-from-a-cicd-perspective"&gt;
  &lt;/a&gt;
  6. Not ideal from a CI/CD perspective
&lt;/h3&gt;

&lt;p&gt;Relying on a hardcoded local file path works well only if you're testing on your own machine. &lt;/p&gt;

&lt;p&gt;But most teams have their tests plugged into their CI/CD pipelines. &lt;/p&gt;

&lt;p&gt;You could implement a script that downloads the file from a repository and places it on the machine that is running the test.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-the-easy-way"&gt;
  &lt;/a&gt;
  7. The easy way
&lt;/h3&gt;

&lt;p&gt;It's a bit easier to perform a file upload test with &lt;a href="https://endtest.io"&gt;Endtest&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You just need one step: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Koqf4mT---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6z8n8yvm8xcmmrzrwagp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Koqf4mT---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6z8n8yvm8xcmmrzrwagp.png" alt="endtest file upload" width="880" height="204"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Details are provided in the &lt;a href="https://endtest.io/guides/docs/how-to-test-file-uploads/"&gt;How to test file uploads&lt;/a&gt; chapter.&lt;/p&gt;

&lt;p&gt;The file needs to be stored in the Endtest Drive (or any other system that provides a direct download link).&lt;/p&gt;

&lt;p&gt;And when the test execution starts, the file will be downloaded from the Drive onto the machine or device that the test is running on.&lt;/p&gt;

&lt;p&gt;That means it's really easy to plug the test into your CI/CD system.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>python</category>
    </item>
    <item>
      <title>How to export your complete Foursquare checkin history</title>
      <author>Aaron Parecki</author>
      <pubDate>Wed, 03 Nov 2021 15:22:31 +0000</pubDate>
      <link>https://dev.to/aaronpk/how-to-export-your-complete-foursquare-checkin-history-pkj</link>
      <guid>https://dev.to/aaronpk/how-to-export-your-complete-foursquare-checkin-history-pkj</guid>
      <description>&lt;p&gt;Today I finished up a tool that you can use to export your complete history from Foursquare and publish the checkins to your website!&lt;/p&gt;

&lt;p&gt;In 2017, I created &lt;a href="https://ownyourswarm.p3k.io"&gt;OwnYourSwarm&lt;/a&gt; to export my future Swarm checkins to my website in real-time. It's been working great, and it's meant that I have had a complete archive of all my checkins on my website ever since then, so I don't have to worry if Foursquare disappears one day. However, I never got around to creating a way to export my past checkins, so I was always missing my checkin history from 2009-2016.&lt;/p&gt;

&lt;p&gt;I had been considering building this as a feature of OwnYourSwarm, but realized that it would end up taking a lot of additional effort to make it work well as a web service, in addition to dealing with possible rate limit issues with the Foursquare API. So instead, this is published as a downloadable script you can run on your own computer. This also means you have a bit more flexibility in how you can use it, as well as being able to customize it more if you choose.&lt;/p&gt;

&lt;p&gt;You can download the code from GitHub here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/aaronpk/Swarm-Checkins-Import"&gt;https://github.com/aaronpk/Swarm-Checkins-Import&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The readme has installation and usage instructions, so I'll refrain from repeating all that in this post. Make sure to check out the step by step tutorial in the readme if you want to use this with your own account.&lt;/p&gt;

&lt;p&gt;The process is broken up into a couple steps.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, it downloads your entire Foursquare checkin history to JSON files on your computer&lt;/li&gt;
&lt;li&gt;Second, it downloads all the photos from your checkins&lt;/li&gt;
&lt;li&gt;Third, it publishes each checkin to your website via &lt;a href="https://micropub.net"&gt;Micropub&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If your website doesn't support checkins via Micropub, or if you don't want your checkins on your website at all, you can just skip that step entirely, and instead you'll have a complete export of your data locally.&lt;/p&gt;

&lt;p&gt;The JSON files contain the raw API response from Foursquare, so you can do what you want with that as well, such as turning it into your own HTML archive using your own custom tools if you want.&lt;/p&gt;

&lt;p&gt;The one issue that I don't have a good solution for is handling renamed venues. Unfortunately the API returns the current name for old checkins, so if a venue is renamed, your old checkins will not reflect the name at the time of the checkin. This is particularly strange for businesses that have gone through an acquisition or rebranding, since for example all my old checkins in Green Dragon are now labeled as Rogue Eastside Brewery. As far as I can tell there isn't a good way to handle this, so I may have to go back and manually edit the posts on my website for the venues I know have been renamed.&lt;/p&gt;

&lt;p&gt;I hope this is useful to people! I will be sleeping a little easier now knowing that my old checkin history is safely archived on my website now!&lt;/p&gt;

</description>
      <category>export</category>
      <category>ownyourdata</category>
      <category>foursquare</category>
      <category>swarm</category>
    </item>
    <item>
      <title>Write clean Object-Oriented code by extracting value objects in Rails</title>
      <author>Alexandre Ruban</author>
      <pubDate>Wed, 03 Nov 2021 14:58:53 +0000</pubDate>
      <link>https://dev.to/alexandreruban/write-clean-object-oriented-code-by-extracting-value-objects-in-rails-49fh</link>
      <guid>https://dev.to/alexandreruban/write-clean-object-oriented-code-by-extracting-value-objects-in-rails-49fh</guid>
      <description>&lt;p&gt;As Ruby on Rails developers, we tend to add too much code in the same &lt;code&gt;ActiveRecord&lt;/code&gt; model. Very often, this is because we fail to identify new objects. This article presents a concrete tool that helps keep our &lt;code&gt;ActiveRecord&lt;/code&gt; models sizes under control thanks to the &lt;a href="https://github.com/rails/rails/blob/main/activerecord/lib/active_record/attribute_methods/serialization.rb"&gt;serialize method&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#identifying-value-objects-in-rails"&gt;
  &lt;/a&gt;
  Identifying value objects in Rails
&lt;/h2&gt;

&lt;p&gt;Let's take a concrete example. Imagine that we are working on an invoicing system, each invoice being composed of multiple line items. Our Invoice model would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Invoice&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;has_many&lt;/span&gt; &lt;span class="ss"&gt;:line_items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;dependent: :destroy&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our example, a &lt;code&gt;LineItem&lt;/code&gt; will have a &lt;code&gt;quantity&lt;/code&gt; stored as an integer and a &lt;code&gt;unit_price&lt;/code&gt; stored as a decimal. The &lt;code&gt;LineItem&lt;/code&gt; model would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LineItem&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:invoice&lt;/span&gt;

  &lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:quantity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;numericality: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;only_integer: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;greater_than: &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:unit_price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;numericality: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;greater_than: &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;total_price&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unit_price&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's now imagine a new requirement: we have to handle VAT rates of 0%, 10%, and 20% on line items, 0% VAT rate being for tourist taxes. The most straightforward implementation would probably be to add all of the VAT rates in the &lt;code&gt;LineItem&lt;/code&gt; model as it already exists. We would add a tax_code string field in our &lt;code&gt;line_items&lt;/code&gt; table, and our &lt;code&gt;LineItem&lt;/code&gt; model would start growing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LineItem&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="c1"&gt;# previous associations and validations&lt;/span&gt;

  &lt;span class="no"&gt;TAX_CODES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;vat_0: &lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;vat_10: &lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;vat_20: &lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:tax_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;inclusion: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;in: &lt;/span&gt;&lt;span class="no"&gt;TAX_CODES&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:to_s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tax_rate&lt;/span&gt;
    &lt;span class="no"&gt;TAX_CODES&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tax_code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sym&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tourist_tax?&lt;/span&gt;
    &lt;span class="n"&gt;tax_code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sym&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:vat_0&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# We now have to take the tax_rate into account&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;total_price&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unit_price&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;tax_rate&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a very simple example of course but failing to identify value objects creates two issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Our &lt;code&gt;LineItem&lt;/code&gt; model is doing too much. Failing to identify new objects will make the model longer and longer, and it will harm readability sooner or later.&lt;/li&gt;
&lt;li&gt;Tax-related information is now entangled inside of our LineItem model. If we want to reuse tax codes elsewhere in our application, we are stuck.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tax codes represent something important in our application and we should give them a proper place to live.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#extracting-value-objects-in-rails"&gt;
  &lt;/a&gt;
  Extracting value objects in Rails
&lt;/h2&gt;

&lt;p&gt;We are first going to give this object a new home and a new name. With a few minor changes, we have extracted all the methods in the &lt;code&gt;TaxCode&lt;/code&gt; object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/models/tax_code.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TaxCode&lt;/span&gt;
  &lt;span class="no"&gt;TAX_CODES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;vat_0: &lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;vat_10: &lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;vat_20: &lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nb"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:key&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sym&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tax_rate&lt;/span&gt;
    &lt;span class="no"&gt;TAX_CODES&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tourist_tax?&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:vat_0&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our &lt;code&gt;LineItem&lt;/code&gt; model is now much smaller and focused on its main responsibility as we removed all the tax code related code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LineItem&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="c1"&gt;# previous associations and validations&lt;/span&gt;

  &lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:tax_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;inclusion: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;in: &lt;/span&gt;&lt;span class="no"&gt;TaxCode&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;TAX_CODES&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:to_s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;total_price&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unit_price&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;tax_rate&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tax_rate&lt;/span&gt;
    &lt;span class="no"&gt;TaxCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tax_code&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;tax_rate&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is still one issue to solve: The &lt;code&gt;LineItem#tax_code&lt;/code&gt; does not return a &lt;code&gt;TaxCode&lt;/code&gt; object. Let's demonstrate this issue in the rails console:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;line_item &lt;span class="o"&gt;=&lt;/span&gt; LineItem.create&lt;span class="o"&gt;(&lt;/span&gt;quantity: 1, unit_price: 100, tax_code: :vat_20&lt;span class="o"&gt;)&lt;/span&gt;
line_item.tax_code
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"vat_20"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We want to get a &lt;code&gt;TaxCode&lt;/code&gt; object when calling the &lt;code&gt;LineItem#tax_code&lt;/code&gt; method. Luckily, Rails provides a way to do precisely that, thanks to the serialize method. Let's instruct the LineItem model that its tax_code method should return a TaxCode object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LineItem&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="n"&gt;serialize&lt;/span&gt; &lt;span class="ss"&gt;:tax_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;TaxCode&lt;/span&gt;

  &lt;span class="c1"&gt;# all the previous code...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the &lt;code&gt;.serialize&lt;/code&gt; method to work, &lt;code&gt;TaxCode&lt;/code&gt; should implement both the &lt;code&gt;.load&lt;/code&gt; and &lt;code&gt;.dump&lt;/code&gt; class methods. As mentioned in &lt;a href="https://github.com/rails/rails/blob/main/activerecord/lib/active_record/attribute_methods/serialization.rb#L51"&gt;the documentation&lt;/a&gt;, &lt;code&gt;.dump&lt;/code&gt; will be called to serialize an object and should return the serialized value to be stored in the database. On the other hand, &lt;code&gt;.load&lt;/code&gt; will be called to reverse the process and deserialize from  the database. In our case, that means converting a string into a &lt;code&gt;TaxCode&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;Let's add those two class methods to the &lt;code&gt;TaxCode&lt;/code&gt; class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/models/tax_code.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TaxCode&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# We don't want to build TaxCodes with a nil key&lt;/span&gt;
    &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tax_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;tax_code&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="n"&gt;tax_code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;key&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;tax_code&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# all the previous code...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! Now the &lt;code&gt;LineItem#tax_code&lt;/code&gt; method should return a &lt;code&gt;TaxCode&lt;/code&gt; object! Let's update the validations and the &lt;code&gt;LineItem#total_price&lt;/code&gt; method accordingly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LineItem&lt;/span&gt;
  &lt;span class="c1"&gt;# all the previous code&lt;/span&gt;
  &lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:tax_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;inclusion: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;in: &lt;/span&gt;&lt;span class="no"&gt;TaxCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;total_price&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unit_price&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;tax_code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;tax_rate&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's add the &lt;code&gt;.all&lt;/code&gt; method on &lt;code&gt;TaxCode&lt;/code&gt; and the &lt;code&gt;#==&lt;/code&gt; method to be able to compare two tax codes as it is necessary for the inclusion validation to be able to compare them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/models/tax_code.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TaxCode&lt;/span&gt;
  &lt;span class="c1"&gt;# all the previous code...&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt;
    &lt;span class="no"&gt;TAX_CODES&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# Tax codes are equal if they have the same key&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;==&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;key&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's restart our rails console and try again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;line_item &lt;span class="o"&gt;=&lt;/span&gt; LineItem.create&lt;span class="o"&gt;(&lt;/span&gt;quantity: 1, unit_price: 100, tax_code: :vat_20&lt;span class="o"&gt;)&lt;/span&gt;
line_item.tax_code
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &amp;lt;TaxCode:0x00007fd0c6316728 @key&lt;span class="o"&gt;=&lt;/span&gt;:vat_20&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The final implementation&lt;br&gt;
That was a lot of work! Let's look at the final implementation of the &lt;code&gt;LineItem&lt;/code&gt; model:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LineItem&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:invoice&lt;/span&gt;

  &lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:quantity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;numericality: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;only_integer: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;greater_than: &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:unit_price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;numericality: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;greater_than: &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:tax_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;inclusion: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;in: &lt;/span&gt;&lt;span class="no"&gt;TaxCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;serialize&lt;/span&gt; &lt;span class="ss"&gt;:tax_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;TaxCode&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;total_price&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unit_price&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;tax_code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;tax_rate&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see, our model is very small and only focused on line items related calculations. All taxes related code has been extracted to the TaxCode class.&lt;/p&gt;

&lt;p&gt;We can notice the same beneficial effects in the &lt;code&gt;TaxCode&lt;/code&gt; class. All tax-related code is isolated in a small class with a single responsibility:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/models/tax_code.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TaxCode&lt;/span&gt;
  &lt;span class="no"&gt;TAX_CODES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;vat_0: &lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;vat_10: &lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;vat_20: &lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tax_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;tax_code&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="n"&gt;tax_code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;key&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;tax_code&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt;
    &lt;span class="no"&gt;TAX_CODES&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="nb"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:key&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sym&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tax_rate&lt;/span&gt;
    &lt;span class="no"&gt;TAX_CODES&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tourist_tax?&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:vat_0&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;==&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;key&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our &lt;code&gt;TaxCode&lt;/code&gt; model is now completely extracted and can be reused anywhere inside our application!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serialization-in-the-wild"&gt;
  &lt;/a&gt;
  Serialization in the wild
&lt;/h2&gt;

&lt;p&gt;Admittedly, our value object example is a bit simple. Let's explore a real-world example. &lt;code&gt;ActionText&lt;/code&gt; is a part of the Ruby on Rails framework and enables us to add rich text to our applications with just one line of code. To add rich text to an &lt;code&gt;Article&lt;/code&gt; model for example, we would simply add the following line to our model:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;has_rich_text&lt;/span&gt; &lt;span class="ss"&gt;:content&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Under the hood, the &lt;a href="https://github.com/rails/rails/blob/main/actiontext/lib/action_text/attribute.rb#L33"&gt;&lt;code&gt;.has_rich_text&lt;/code&gt;&lt;/a&gt; method defines a &lt;code&gt;has_one&lt;/code&gt; association with an object of class &lt;code&gt;ActionText::RichText&lt;/code&gt;. The &lt;code&gt;ActionText::RichText&lt;/code&gt; object holds the rich text inside the database in a body field that gets &lt;a href="https://github.com/rails/rails/blob/main/actiontext/app/models/action_text/rich_text.rb#L11"&gt;serialized&lt;/a&gt; in an &lt;code&gt;ActionText::Content&lt;/code&gt; object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;ActionText&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RichText&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Record&lt;/span&gt;
    &lt;span class="n"&gt;serialize&lt;/span&gt; &lt;span class="ss"&gt;:body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;ActionText&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Content&lt;/span&gt;

    &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://github.com/rails/rails/blob/main/actiontext/lib/action_text/content.rb"&gt;&lt;code&gt;ActionText::Content&lt;/code&gt;&lt;/a&gt; object does much more than our simple &lt;code&gt;TaxCode&lt;/code&gt; example of course; it defines many more methods! The &lt;code&gt;.load&lt;/code&gt; and &lt;code&gt;.dump&lt;/code&gt; methods are defined in the &lt;a href="https://github.com/rails/rails/blob/main/actiontext/lib/action_text/serialization.rb"&gt;&lt;code&gt;ActionText::Serialization&lt;/code&gt; concern&lt;/a&gt; that is included in &lt;a href="https://github.com/rails/rails/blob/main/actiontext/lib/action_text/content.rb#L5"&gt;&lt;code&gt;ActionText::Content&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Did you like this article?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can &lt;strong&gt;&lt;a href="https://twitter.com/alexandre_ruban"&gt;follow me on Twitter&lt;/a&gt;&lt;/strong&gt; as I announce all my articles there! &lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>oop</category>
    </item>
    <item>
      <title>Source of success: how not to lose confidence after a promotion?</title>
      <author>Sandor Dargo</author>
      <pubDate>Wed, 03 Nov 2021 14:36:19 +0000</pubDate>
      <link>https://dev.to/sandordargo/source-of-success-how-not-to-lose-confidence-after-a-promotion-580k</link>
      <guid>https://dev.to/sandordargo/source-of-success-how-not-to-lose-confidence-after-a-promotion-580k</guid>
      <description>&lt;p&gt;When you're promoted you feel you're the king of the world. You worked your ass off. You deserved it, you deserved your new title, your hopefully hefty raise. Of course, you'd have deserved just any raise, right?!&lt;/p&gt;

&lt;p&gt;Oh, the joy you felt over your promotion. The problem is that this feeling fades soon. Probably it's not even a problem, as you should not define who you are based on your previous achievements. The real problem is that often your confidence fades and without it, it'll be hard to progress further, or even just to feel fulfilled in your current role.&lt;/p&gt;

&lt;p&gt;Let's see from where your confidence comes from, how it helps you to progress then how it fades because of that progress. Finally, we see how you can regain your confidence.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#five-sources-of-confidence"&gt;
  &lt;/a&gt;
  Five sources of confidence
&lt;/h2&gt;

&lt;p&gt;Let's explore 5 essential sources of confidence and how not to let them dry up.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-things-done"&gt;
  &lt;/a&gt;
  Get things done
&lt;/h3&gt;

&lt;p&gt;Some people claim that in order to achieve something, you must be confident. These people are already confident, but they forget that it was not always the case.&lt;/p&gt;

&lt;p&gt;Confidence doesn't come out of the blue. That is called ego.&lt;/p&gt;

&lt;p&gt;Confidence is the outcome of action. Get things done, no matter how small they are, but be consistent and you'll build up your confidence fast.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#follow-through"&gt;
  &lt;/a&gt;
  Follow through
&lt;/h3&gt;

&lt;p&gt;Getting things done is often mentioned in relation to small tasks. If something would not take more than 2 minutes to complete, just do it, do it now. That's one of the foundational rules of &lt;em&gt;getting things done&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It's important.&lt;/p&gt;

&lt;p&gt;It also helps gain some confidence. Confidence that is needed to follow through with more complex tasks. Tasks that cannot simply be get done. Projects that require that you break them down into smaller chunks. Into pieces that will require you to work on them every day or so. &lt;/p&gt;

&lt;p&gt;By doing so, by completing some big projects you had in mind, you'll further boost your confidence.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#focus-on-your-gains"&gt;
  &lt;/a&gt;
  Focus on your gains
&lt;/h3&gt;

&lt;p&gt;If you want to improve something, you have to measure it. You cannot improve your finances if you don't know in detail your financial situation. You cannot prepare well for an exam if you don't know where your weaknesses are.&lt;/p&gt;

&lt;p&gt;You must monitor your progress and use the insights to adjust your direction. But it's not enough.&lt;/p&gt;

&lt;p&gt;As Dan Sullivan, the world-class business coach and Dr. Benjamin Hardy organizational psychologist explained in their book &lt;a href="https://www.amazon.com/gp/product/1401964362/ref=as_li_qf_asin_il_tl?ie=UTF8&amp;amp;tag=sandordargo-20&amp;amp;creative=9325&amp;amp;linkCode=as2&amp;amp;creativeASIN=1401964362&amp;amp;linkId=28504ced4262bc4ef3d8095a8b023357"&gt;The Gap And The Gain&lt;/a&gt;, you have to focus on how much you progressed, not on how far you are from your ideal.&lt;/p&gt;

&lt;p&gt;You'll always find people who are still further away from you and it feels daunting. You shouldn't compare yourself to others. Compare yourself to your past self, focus on how long you came, how much you improved!&lt;/p&gt;

&lt;p&gt;That's a surefire way to boost your confidence!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#do-something-outside-your-work"&gt;
  &lt;/a&gt;
  Do something outside your work!
&lt;/h3&gt;

&lt;p&gt;Sure, work is important, but your life is - hopefully - more than that. You might have a family, a hobby, a passion...&lt;/p&gt;

&lt;p&gt;How does that relate to your career?&lt;/p&gt;

&lt;p&gt;In many different ways, but let's focus on confidence. Even if confidence in one area cannot be directly translated to confidence in another, still, it has an effect.&lt;/p&gt;

&lt;p&gt;Life is a complex system. If you're improving one area of your life, it will affect all the others.&lt;/p&gt;

&lt;p&gt;Therefore, it's important to do something outside of work that you enjoy, that you are good at, and that you can use as a source of inspiration, a source of confidence.&lt;/p&gt;

&lt;p&gt;It can be raising your kid, making your home beautiful, doing some sports, baking. Whatever you truly care about!&lt;/p&gt;

&lt;p&gt;Achieving results in that area will boost your confidence in every area of your life.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#visualize-your-success"&gt;
  &lt;/a&gt;
  Visualize your success
&lt;/h3&gt;

&lt;p&gt;Michael Phelps, one of the most successful swimmers ever - like other successful sportspeople - had a thorough pre-race routine. Part of it was closing his eyes and visualizing himself during the race. He saw himself from the outside, he saw himself swimming and winning.&lt;/p&gt;

&lt;p&gt;It helped him to relax, to be less anxious and more confident. After all, winning just became something he already saw.&lt;/p&gt;

&lt;p&gt;You don't have to be a world-class swimmer to follow similar habits.&lt;/p&gt;

&lt;p&gt;Before you start into a complex venture, close your eyes and visualize yourself succeeding at it. Don't be shallow, focus on the details. It will both help you prepare, think about things you might have forgotten otherwise and it will also grow your confidence!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#confidence-leads-to-more-results"&gt;
  &lt;/a&gt;
  Confidence leads to more results
&lt;/h2&gt;

&lt;p&gt;With the increased level of confidence you earned, you will reap many benefits in your life, including better performance, healthier relationships, openness to try new things and resilience.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#better-performance"&gt;
  &lt;/a&gt;
  Better performance
&lt;/h3&gt;

&lt;p&gt;First of all, it's worth emphasizing that confidence is not a prerequisite of action, it's a byproduct! By taking action, by performing well, you'll gain confidence.&lt;/p&gt;

&lt;p&gt;But by gaining confidence, you'll perform even better, you'll take more action. It's an upward spiral. Or if you prefer, it's like &lt;a href="https://www.sandordargo.com/blog/2020/12/26/good-to-great-by-jim-collins#let-the-flywheel-turn"&gt;letting the flywheel turn&lt;/a&gt; on its own.&lt;/p&gt;

&lt;p&gt;The first few actions, earning the first few bits of confidence is difficult, but once the momentum builds up, you're becoming unstoppable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#healthy-relationships"&gt;
  &lt;/a&gt;
  Healthy relationships
&lt;/h3&gt;

&lt;p&gt;Your confidence will also improve your relationships in two different ways.&lt;/p&gt;

&lt;p&gt;First, you'll stop comparing yourself to others, you'll stop being jelaous, therefore you can be happier both for others' successes and for your own as well.&lt;/p&gt;

&lt;p&gt;Second, your confidence originates from your within, you don't have to rely on others. If you feel that others just try to bring you down, they just try to hold you back, you'll be able to walk away more easily.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#openness-to-try-new-things"&gt;
  &lt;/a&gt;
  Openness to try new things
&lt;/h3&gt;

&lt;p&gt;When you are confident, when you believe in yourself, you feel free to try new things.&lt;/p&gt;

&lt;p&gt;This openness will not just manifest itself at work, but in your personal life as well. Remember, the different parts of life constitute a system. If you improve one part, the rest will also improve.&lt;/p&gt;

&lt;p&gt;A confident person is an open person. Open to think about new ideas, open to try himself in new circumstances.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resilience"&gt;
  &lt;/a&gt;
  Resilience
&lt;/h3&gt;

&lt;p&gt;Confidence will also make you more resilient. Imagine that you fail with one of your projects. Not just a little, but you fail hard.&lt;/p&gt;

&lt;p&gt;If you had no confidence, it puts you down. Probably you were already down, so it just pushes you downward in the spiral.&lt;/p&gt;

&lt;p&gt;But if you are confident, you know that you cannot fail. You either win or you learn. You'll bounce back, you'll be even more capable than before.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-might-lose-your-confidence-after-a-big-win-and-its-okay"&gt;
  &lt;/a&gt;
  You might lose your confidence after a big win and it's okay
&lt;/h2&gt;

&lt;p&gt;Even if you drink from all the wells of confidence every morning, even if you enjoy all the benefits of being confident, sometimes you'll lose your spirit. You'll feel alone. You'll be afraid. You won't understand what just happened.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#promotion-leads-to-incompetence"&gt;
  &lt;/a&gt;
  Promotion leads to incompetence
&lt;/h3&gt;

&lt;p&gt;Don't worry. You're not alone.&lt;/p&gt;

&lt;p&gt;This is a common feeling a bit after a promotion.&lt;/p&gt;

&lt;p&gt;Think about how people get promoted.&lt;/p&gt;

&lt;p&gt;You do a great job as a software developer and you might become a tech lead. Or an engineering manager.&lt;/p&gt;

&lt;p&gt;You never learnt it. It will be difficult. You might even fail.&lt;/p&gt;

&lt;p&gt;Most businesses promote people according to the Peter principle. People will be promoted to new positions - to positions that require a different skillset - until they will reach a position where they don't perform well.&lt;/p&gt;

&lt;p&gt;A part of your confidence came from successes that you achieved in your previous position. Those are gone. They are irrelevant.&lt;/p&gt;

&lt;p&gt;You have less to rely on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#promotions-as-acknowledgement-are-better"&gt;
  &lt;/a&gt;
  Promotions as acknowledgement are better
&lt;/h3&gt;

&lt;p&gt;That is why I found a good practice that you have to perform in your new role for some time before you can officially be promoted. If you want to become a senior engineer, if you want to become a staff engineer, you have to perform tasks that a senior or a staff engineer would do.&lt;/p&gt;

&lt;p&gt;I know that it can seem unjust to work in a higher position without the tile or the financial rewards, but it's still beneficial not only for your employer in terms of better judgement but also for you to be a bit stressed about your promotion and more confident on how well you can perform.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-feeling-of-incompetence-should-not-hurt-your-confidence"&gt;
  &lt;/a&gt;
  The feeling of incompetence should not hurt your confidence
&lt;/h3&gt;

&lt;p&gt;But if you scroll back to the section about how to gain more confidence, you'll realize that most of the sources are still relevant to you.&lt;/p&gt;

&lt;p&gt;You can still get small things done. Your activities outside your job are still there. You already gained a lot that you can focus on. And while probably following through big projects will still have to wait a bit, you can already visualize those successes.&lt;/p&gt;

&lt;p&gt;Don't let new circumstances make you feel incompetent, don't let the new incompetence take away your confidence. You have already come far.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#regain-your-confidence"&gt;
  &lt;/a&gt;
  Regain your confidence
&lt;/h2&gt;

&lt;p&gt;What can you do if despite what we discussed, you still lose your confidence after the promotion?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#accept-you-cannot-know-everything"&gt;
  &lt;/a&gt;
  Accept you cannot know everything
&lt;/h3&gt;

&lt;p&gt;First and foremost, you have to do a mental shift. You have to accept that you do not, you cannot know everything but you can always learn more.&lt;/p&gt;

&lt;p&gt;You have to accept that you'll meet less experienced people who can do things that you cannot do. You should not be afraid of them taking over your role, you deserved your promotion. Not because you know everything and everything better than others.&lt;/p&gt;

&lt;p&gt;If you don't do the mental shift, you'll not focus on growing, you'll not focus on getting better, but instead, you'll spend most of your energy on defending your position, building a silo around yourself so that you feel less threatened by those who are better in some aspects of your job.&lt;/p&gt;

&lt;p&gt;You don't want that, do you?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#focus-on-your-strengths"&gt;
  &lt;/a&gt;
  Focus on your strengths
&lt;/h3&gt;

&lt;p&gt;Instead, you have to focus on your own strengths and hone those skills further. You might lack some skills that you should improve, but in general, you're better off if you actively seek out the help of more competent people. When you face a problem that goes out of your competency zone, you should not think about how to solve it, but rather about who you can solve it for you. Focus on who, not how as Benjamin P Hardy explained in &lt;a href="https://www.amazon.com/gp/product/1401960588/ref=as_li_qf_asin_il_tl?ie=UTF8&amp;amp;tag=sandordargo-20&amp;amp;creative=9325&amp;amp;linkCode=as2&amp;amp;creativeASIN=1401960588&amp;amp;linkId=8eb5d38b3b0e0aebdcde3e553463efe4"&gt;his book&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It'll deliberate you from wanting to know everything and let you focus on what you are great at. There is a reason why not every company produces everything, but only what they are good or even great at. In economics, it's also called having a comparative advantage.&lt;/p&gt;

&lt;p&gt;The best thing you can do is that you set your next big goal and start working towards them, little by little. Building up your confidence again also relies on other parts of your life.&lt;/p&gt;

&lt;p&gt;And don't let success and others' knowledge discourage you. You don't have to be better at everything.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Wouldn't it be great to live your life in a way that always goes upwards?&lt;/p&gt;

&lt;p&gt;It's not a realistic expectation, after mountains, there are valleys. Yet, it doesn't mean that whenever you go down into a valley, you should lose your confidence.&lt;/p&gt;

&lt;p&gt;We saw that there are many sources of confidence, therefore if you feel less comfortable in one area of your life, you should not lose it all, we should still be able to gain force from the other areas.&lt;/p&gt;

&lt;p&gt;Think about what activities make you more confident and how you can do more of those!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-deeper"&gt;
  &lt;/a&gt;
  Connect deeper
&lt;/h2&gt;

&lt;p&gt;If you liked this article, please &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hit on the like button,
&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://eepurl.com/gvcv1j"&gt;subscribe to my newsletter&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;and let's connect on &lt;a href="https://twitter.com/SandorDargo"&gt;Twitter&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>career</category>
      <category>confiedence</category>
      <category>selfimprovement</category>
    </item>
    <item>
      <title>The problem with code screenshots and how to fix it</title>
      <author>Savvas Stephanides</author>
      <pubDate>Wed, 03 Nov 2021 14:03:34 +0000</pubDate>
      <link>https://dev.to/savvasstephnds/the-problem-with-code-screenshots-and-how-to-fix-it-2ka0</link>
      <guid>https://dev.to/savvasstephnds/the-problem-with-code-screenshots-and-how-to-fix-it-2ka0</guid>
      <description>&lt;p&gt;So you decided to write a tutorial about a topic you know extremely well. You are very familiar with the topic, so much so that you know all the code like the backside of your hand.&lt;/p&gt;

&lt;p&gt;This tutorial has a lot of code, and you need it to look good! So you either screenshot your code editor which colours your code, or you use a tool like &lt;a href="https://carbon.now.sh/"&gt;Carbon&lt;/a&gt; to generate some great-looking code snippets as PNGs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rSjQPSLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6pihc956vh47hm9dh8eu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rSjQPSLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6pihc956vh47hm9dh8eu.png" alt="" width="880" height="408"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is awesome as now you can get away from using bland, ugly code snippets.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log("Hi!")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-problems"&gt;
  &lt;/a&gt;
  The problem(s)
&lt;/h2&gt;

&lt;p&gt;While pasting a picture or screenshot of code might look good on your blog, it presents 2 major issues:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-your-users-cant-copy-your-code"&gt;
  &lt;/a&gt;
  1. Your users can't copy your code
&lt;/h3&gt;

&lt;p&gt;Imagine you're running into a problem while coding. You search on Google and stumble upon a great tutorial. Clear and concise explanations with code examples. You want to try the code for yourself to see if it's fit for your purpose, but to your frustration and horror, the code you've been reading is actually &lt;em&gt;a screenshot&lt;/em&gt;. How would you feel? You'd rub your temples, or scream at the screen and move away from the article to find something else.&lt;/p&gt;

&lt;p&gt;That's exactly what your users will do.&lt;/p&gt;

&lt;p&gt;But there's another, more major issue:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-code-images-are-inaccessible"&gt;
  &lt;/a&gt;
  2. Code images are inaccessible
&lt;/h3&gt;

&lt;p&gt;For screen reader users, an image is only as good as its &lt;code&gt;alt&lt;/code&gt; text. So what are you going to do? Write the entire code snippet as &lt;code&gt;alt&lt;/code&gt; text? No, you shouldn't. So anyone with a screen reader is unable to read your code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The solution
&lt;/h2&gt;

&lt;p&gt;The solution to both these problems is pretty simple:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-proper-markdown"&gt;
  &lt;/a&gt;
  Use proper Markdown
&lt;/h3&gt;

&lt;p&gt;The first thing to do is to use proper Markdown for code snippets. So if you're adding code, you should use this syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```
console.log("Hi!")
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Blogging platforms like DevTo and Hashnode have excellent code snippet colouring support:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So if you just include the language next to your top backticks (`), then they should be automatically coloured:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```javascript
console.log("Hi!")
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;But what if I'm writing on my own blog?&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-highlightjs"&gt;
  &lt;/a&gt;
  Use HighlightJS
&lt;/h2&gt;

&lt;p&gt;If you want to make your code look beautiful on your own website or blog, without the need for inaccessible screenshots or Carbon images, you can use Javascript libraries like &lt;a href="https://highlightjs.org/"&gt;HighlightJS&lt;/a&gt;. Here's a &lt;a href="https://savvas.me/tips/beautiful-code"&gt;tutorial to get started&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;You work hard on your blog and you want everything, including your code to look great! Code snippets as images or screenshots might sound like the easy way towards this but you also need to think of your visitors. Visitors who would want to copy your code for later use and users who are only able to read your posts using screen readers. Be inclusive. Be human.&lt;/p&gt;

&lt;p&gt;Thank you for reading.&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>writing</category>
      <category>programming</category>
      <category>inclusion</category>
    </item>
    <item>
      <title>Webhook vs APIs</title>
      <author>Suspir0n</author>
      <pubDate>Wed, 03 Nov 2021 13:45:33 +0000</pubDate>
      <link>https://dev.to/suspir0n/webhook-vs-apis-50h0</link>
      <guid>https://dev.to/suspir0n/webhook-vs-apis-50h0</guid>
      <description>&lt;h1&gt;
  &lt;a href="#quer-saber-o-que-%C3%A9-um-webhook-e-como-funciona"&gt;
  &lt;/a&gt;
  Quer saber o que é um webhook e como funciona?
&lt;/h1&gt;

&lt;p&gt;Imagine a facilidade e a praticidade que você terá usando o webhook, neste artigo iremos descrever o que webhook, como funciona e de bônus deixaremos um exemplo simples e prático usando python mas também pode ser utilizado em outras linguagens, deixarei referencias em outras linguagens para poder ajudar no seu estudo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-que-%C3%A9-webhook"&gt;
  &lt;/a&gt;
  O que é Webhook?
&lt;/h2&gt;

&lt;p&gt;De acordo com o blog do &lt;a href="https://blog.vindi.com.br/o-que-sao-webhooks/"&gt;Vindi&lt;/a&gt; "Webhook é uma forma de recebimento de informações, passadas quando um evento acontece. Dessa forma, o webhook, na prática, é a forma de receber informações entre dois sistemas de uma forma passiva. Além disso, o webhook (também conhecido como retorno de chamada web ou HTTP e, ainda, impulso API) é uma maneira prática para um app ou sistema fornecer outras aplicações com informações em tempo real. Da mesma forma, ele fornece dados para outros aplicativos, e são muito eficientes tanto para o prestador de serviço, como para o consumidor."&lt;/p&gt;

&lt;p&gt;Simplificando, webhooks são eventos que acionam uma ação.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bLQi7irI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5c64liu91rcqqha8zgk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bLQi7irI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5c64liu91rcqqha8zgk.png" alt="webhook em ação" width="880" height="704"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#como-funciona-webhook"&gt;
  &lt;/a&gt;
  Como funciona Webhook?
&lt;/h2&gt;

&lt;p&gt;Então, supondo que você esteja criando um bot para o telegram, e você acaba criando uma API para isso, nesta API você tem uma rota que executa uma determinada ação do bot, com isso você precisa fazer o set Webhook na API do telegram para que quando for requisitado aquele Webhook, ele ira acionar a ação daquele determinado evento. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wqofmdKz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/usghu9bqpam8tp76s8ex.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wqofmdKz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/usghu9bqpam8tp76s8ex.png" alt="webhook vs API" width="720" height="254"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Observando está imagem acima, você percebe que Webhook e APIs são duas comunicações totalmente diferente, enquanto a API ele pega os dados de um servidor, o Webhook puxa os seus dados. APIs estão em constante votação para obter as assinaturas.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aOuCegze--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mp0x19fu4fx8og64677b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aOuCegze--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mp0x19fu4fx8og64677b.png" alt="Diferença de votação" width="720" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#webhook-na-pr%C3%A1tica"&gt;
  &lt;/a&gt;
  Webhook, na prática
&lt;/h2&gt;

&lt;p&gt;Neste exemplo prático iremos utilizar:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flask.palletsprojects.com/en/2.0.x/"&gt;Framework Flask&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vamos começar criando um servidor para receber o webhook.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V7kmyCjR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sk5t6qhol6xdfs29xubn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V7kmyCjR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sk5t6qhol6xdfs29xubn.png" alt="Servidor em Flask" width="880" height="816"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Neste código, você observa que criamos apenas uma rota chamada '/webhook' do método do tipo 'POST', logo a nossa rota irá permitir requisição com este método. Com isso basta você executar dois comandos, o primeiro para escrever seu server como uma variável de ambiente e o outro para executar o server.&lt;/p&gt;

&lt;p&gt;No windows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;set FLASK_APP='nomedoseuarquivo'.py&lt;/li&gt;
&lt;li&gt;flask run&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No Linux:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;export FLASK_APP='nomedoseuarquivo'.py&lt;/li&gt;
&lt;li&gt;flask run&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Após você ter criado um server, vamos agora criar um arquivo onde você irar enviar o seu webhook, o código ficaria desta forma.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NbYwdbpt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kc0umm97by6y0bs97ef7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NbYwdbpt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kc0umm97by6y0bs97ef7.png" alt="Send Webhooks" width="880" height="407"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Neste código, fizemos um exemplo de requisição, fazendo o envio do nosso webhook, finalizando nosso exemplo nesta etapa.&lt;/p&gt;

&lt;p&gt;Repare que neste exemplo, usamos localhost, caso você deseje aplicar esses conhecimentos utilizando a API do telegram, por exemplo, você pode usar o &lt;a href="https://ngrok.com/docs"&gt;ngrok&lt;/a&gt;, pois o telegram não aceita localhost, então você pode utilizar o ngrok para isso, sendo que ele serve apenas para testar sua aplicação, não para ir em produção. Decorrerei sobre o ngrok em outro artigo, deixarei o link logo abaixo.&lt;/p&gt;

&lt;p&gt;Este foi o &lt;b&gt;diário de bordo #06&lt;/b&gt; vamos nos despedindo por aqui. Voltaremos com mais um diário de bordo.&lt;/p&gt;

&lt;p&gt;
  &lt;a href="#"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0CymIAaq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.dribbble.com/users/1889486/screenshots/5081642/thankyou_.gif" width="800" height="600"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Este artigo foi útil para você?&lt;/b&gt; &lt;br&gt;
&lt;b&gt;Deixe um comentário abaixo.&lt;/b&gt;&lt;/p&gt;

</description>
      <category>webhook</category>
      <category>python</category>
      <category>ngrok</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
