<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>That TypeScript argument...</title>
      <author>LUKESHIRU</author>
      <pubDate>Mon, 20 Dec 2021 21:56:48 +0000</pubDate>
      <link>https://dev.to/lukeshiru/that-typescript-argument-5c56</link>
      <guid>https://dev.to/lukeshiru/that-typescript-argument-5c56</guid>
      <description>&lt;p&gt;You can see pretty much daily &lt;a href="https://dev.to/search?q=typescript&amp;amp;sort_by=published_at&amp;amp;sort_direction=desc"&gt;here in DEV&lt;/a&gt; an article about how great or how bad TypeScript is, and then folks that don't share the opinion debating in the comments.&lt;/p&gt;

&lt;p&gt;Generally, the arguments for both "sides" are understandable. The people that support TypeScript will tell you everything about how great the DX is, and how the learning curve is worth it, while the people against it will tell you that the learning curve is too steep, and the added value of TS is too low to consider it.&lt;/p&gt;

&lt;p&gt;I'm ok with both opinions because at the end of the day they are just opinions and as such, you should use the tool that is more convenient for you, and TS is not for everyone. My problem is when the arguments are &lt;a href="https://en.wikipedia.org/wiki/Straw_man"&gt;straw mans&lt;/a&gt; and today I'll focus on one that I have seen a lot recently:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-argument"&gt;
  &lt;/a&gt;
  The argument
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;"TypeScript isn't useful because it doesn't do runtime type checking"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The problem with this argument is not that it's "against TS", but actually that it's asking something from TS that doesn't even exist in other typed languages like it. The argument is based on ignoring the difference between type checking and data validation.&lt;/p&gt;

&lt;p&gt;The examples that folks use when they present this argument are usually APIs, file system access, user input, and other types of "unpredictable data". They say that even if you type those, you could get unpredictable data, so "TS is useless". This is a "straw man" because it presents an external problem unrelated to type checking, and then uses it as an argument against it.&lt;/p&gt;

&lt;p&gt;TypeScript is a tool for developers, not for consumers. As such is at the same level as JSDocs, ESLint, prettier, and other dev tools. It allows you to catch some errors earlier than prod in your editor, but once is "compiled" is just JavaScript, so is your responsibility as a dev to validate data you "can't trust".&lt;/p&gt;

&lt;p&gt;So, a function like this in TS is just fine:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;value1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because when you try to use it passing strings for example, it will yell at you in dev time. But now if we do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://swapi.dev/api/people/1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;People&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are doing things wrong, mainly because we are typing that response as &lt;code&gt;People&lt;/code&gt; and maybe we got something else from the API. In those scenarios you have several options, one is to use something like &lt;code&gt;Partial&lt;/code&gt; which makes all the properties of an object optional, so TS will tell you that &lt;code&gt;name&lt;/code&gt; could be undefined:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nb"&gt;Partial&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;People&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Response is not of type People&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another solution is to have an abstraction layer on top of the API that generates the types and fallback values for you (you need to have a contract with your API, using stuff like swagger, GraphQL, or others). You can also use libs such as &lt;a href="https://gcanti.github.io/io-ts/"&gt;io-ts&lt;/a&gt; which does all the runtime checking for you while keeping it type-safe in dev.&lt;/p&gt;

&lt;p&gt;Now, going back to the argument: Saying that TS is useless because it doesn't do validations at runtime is just saying that you missed the point of TS completely. It would be the same as saying that ESLint is useless because it doesn't throw in prod when the user doesn't follow a linting rule, or it would be like asking Prettier to throw if the code is not formatted correctly in production.&lt;/p&gt;

&lt;p&gt;TypeScript is a tool to help in the dev process, and if you tried it, you know that even if it doesn't do validations at runtime, is extremely valuable as a tool for refactoring, documentation, autocompletion, and so on.&lt;/p&gt;

&lt;p&gt;Now, it would be a false argument as well to say that the only way of achieving this is with TypeScript. You can also use JSDocs and type your code with it, and thanks to the TS server you can get almost the same experience in vanilla JS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing"&gt;
  &lt;/a&gt;
  Closing
&lt;/h2&gt;

&lt;p&gt;Hope this article is useful enough to understand that your argument is not valid because:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;TS is not designed to do validations in production.&lt;/li&gt;
&lt;li&gt;All typed languages have the same issue, you should never trust stuff like user input, the file system, APIs, or any other "external source".&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point then you might understand why I say that the initial argument is a straw man because if we fix it, that argument is actually saying this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"TypeScript isn't useful because it doesn't do &lt;strong&gt;something it wasn't designed to do in the first place&lt;/strong&gt;"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Which is kinda ridiculous.&lt;/p&gt;

&lt;p&gt;That's it, thanks for reading!&lt;br&gt;
Cheers!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Add test coverage badge for  PHP and Pest in your GitHub repository</title>
      <author>Roberto B.</author>
      <pubDate>Mon, 20 Dec 2021 21:39:48 +0000</pubDate>
      <link>https://dev.to/robertobutti/add-test-coverage-badge-for-php-and-pest-in-your-github-repository-37mo</link>
      <guid>https://dev.to/robertobutti/add-test-coverage-badge-for-php-and-pest-in-your-github-repository-37mo</guid>
      <description>&lt;p&gt;If you walk through across GitHub repositories, you can see that most of them show some badges. A badge is a sort of icon that show you the status of your code, your repository, your workflow, etc.&lt;/p&gt;

&lt;p&gt;In your Readme file in your GitHub repository, you can include your badges.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q35lpvuP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kh22cjyqvf9y9ewqnpip.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q35lpvuP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kh22cjyqvf9y9ewqnpip.png" alt="Test coverage badge" width="880" height="58"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Badges are for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;show package version;&lt;/li&gt;
&lt;li&gt;number download;&lt;/li&gt;
&lt;li&gt;issues information (totals, opened, closed ...);&lt;/li&gt;
&lt;li&gt;result of test executions;&lt;/li&gt;
&lt;li&gt;result from GitHub Actions workflows;&lt;/li&gt;
&lt;li&gt;etc...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A good website where to generate badges is &lt;a href="https://shields.io/"&gt;https://shields.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you don't find a badge that fits your need, you can create one, or you can use some tools specific for your needs.&lt;br&gt;
In my last project, I needed to measure the test code coverage.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Code coverage is the percentage of code which is covered by automated tests. Code coverage measurement simply determines which lines of code / instructions have been executed through a test run, and which lines / instructions have not. The percentage is calculated based on code covered and all code (number of lines of code).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Normally, the result is shown in the terminal if your test suite is executed in a terminal, for example via command line.&lt;br&gt;
You have also the option to save the result in some specific file with a "standard" format.&lt;br&gt;
For example, "clover" format is an XML file that reports code coverage e some other nice metrics.&lt;br&gt;
If you run the test suite in your GitHub Actions workflow, you need a specific action that is able to read clover format and use the value of coverage to render a badge.&lt;br&gt;
Then a badge needs to be committed to the repository.&lt;br&gt;
To recap:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;execute test in GitHub Actions workflow;&lt;/li&gt;
&lt;li&gt;save the report in clover format (clover.xml file);&lt;/li&gt;
&lt;li&gt;use an "Actions" that: read the clover.xml file, produces the badge and commit/push the new badge on the repository.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the Readme file, you need to include the badge image.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#execute-test-in-github-actions-workflow"&gt;
  &lt;/a&gt;
  Execute test in GitHub Actions workflow
&lt;/h2&gt;

&lt;p&gt;To execute tests, you can use PHPUnit or Pest. Both tools have the option for saving the report in &lt;em&gt;clover&lt;/em&gt; format (Pest uses the feature provided by PHPUnit).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Execute tests (Unit and Feature tests) via PestPHP&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;vendor/bin/pest --coverage-clover clover.xml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this way, the &lt;em&gt;clover.xml&lt;/em&gt; file is created.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-badge"&gt;
  &lt;/a&gt;
  Create a badge
&lt;/h2&gt;

&lt;p&gt;For creating the badge, I found this Actions: &lt;a href="https://github.com/marketplace/actions/phpunit-coverage-badge"&gt;phpunit-coverage-badge&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This actions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;reads clover.xml file;&lt;/li&gt;
&lt;li&gt;saves the badge file &lt;em&gt;coverage_badge_path&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;optionally, commits and pushes the badge via &lt;em&gt;push_badge&lt;/em&gt; option;&lt;/li&gt;
&lt;li&gt;for pushing the badge to the repo you need to set the &lt;em&gt;repo_token&lt;/em&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Generate test coverage badge&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;timkrase/phpunit-coverage-badge@v1.2.0&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;coverage_badge_path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;badge-coverage.svg'&lt;/span&gt;
          &lt;span class="na"&gt;push_badge&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
          &lt;span class="na"&gt;repo_token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, every time you push your code on &lt;em&gt;main&lt;/em&gt; branch, the test suite is executed and the badge is updated.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#update-readme-file"&gt;
  &lt;/a&gt;
  Update Readme file
&lt;/h2&gt;

&lt;p&gt;Now that the badge file is created, you need to include it into your readme file with the typical markdown syntax for images:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;![Test Coverage&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://raw.githubusercontent.com/Hi-Folks/array/main/badge-coverage.svg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;](https://packagist.org/packages/hi-folks/array)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You need to replace &lt;em&gt;Hi-Folks/array&lt;/em&gt; with your &lt;em&gt;org/repo&lt;/em&gt; of your project.&lt;br&gt;
The current badge is:&lt;br&gt;
&lt;a href="https://packagist.org/packages/hi-folks/array"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o4AHjCVO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Hi-Folks/array/main/badge-coverage.svg" alt="Test Coverage" width="100" height="20"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-workflow-file"&gt;
  &lt;/a&gt;
  The workflow file
&lt;/h2&gt;

&lt;p&gt;The whole yaml file (you need to save it in .github/workflows directory):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Test Coverage PHP Package&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;laravel-tests&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;matrix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;operating-system&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;ubuntu-latest&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
        &lt;span class="na"&gt;php-versions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;8.0'&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
        &lt;span class="na"&gt;dependency-stability&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;prefer-none'&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;

    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;P${{ matrix.php-versions }} - L${{ matrix.laravel }} - ${{ matrix.dependency-stability }} - ${{ matrix.operating-system}}&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install PHP versions&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;shivammathur/setup-php@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;php-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.php-versions }}&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install Dependencies&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;steps.vendor-cache.outputs.cache-hit != 'true'&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Update Dependencies with latest stable&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;matrix.dependency-stability == 'prefer-stable'&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;composer update --prefer-stable&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Update Dependencies with lowest stable&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;matrix.dependency-stability == 'prefer-lowest'&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;composer update --prefer-stable --prefer-lowest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>php</category>
      <category>github</category>
      <category>testing</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Tools for testing Functional Web Apps</title>
      <author>Taylor Beseda</author>
      <pubDate>Mon, 20 Dec 2021 21:38:21 +0000</pubDate>
      <link>https://dev.to/begin/tools-for-testing-functional-web-apps-52n1</link>
      <guid>https://dev.to/begin/tools-for-testing-functional-web-apps-52n1</guid>
      <description>&lt;p&gt;&lt;small&gt;Photo by &lt;a href="https://unsplash.com/photos/3GZi6OpSDcY"&gt;Nicolas Thomas&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;If you're building critical cloud functions to return API results, handle evented business operations (like &lt;a href="https://blog.begin.com/posts/2021-11-17-shopify-webhooks"&gt;Shopify webhooks&lt;/a&gt;), or render web views, you'll want to incorporate some tests. It's essential to test their internals, inputs, and outputs in a predictable context. We want a utilitarian toolchain to ensure core services function as expected. Where each test can run in isolation, in an unmodified Node.js context. The test suite should run quickly and deterministically; helpful in local development and ideal in CI, where computing resources might be limited.&lt;/p&gt;

&lt;p&gt;Our tests should be proportionate to our functions in scope and size. Ideally, tests are fast and small, just like the services they're testing. (We're &lt;a href="https://blog.begin.com/posts/2021-12-01-fat-function-anti-pattern"&gt;not building fat functions&lt;/a&gt;, right?)&lt;/p&gt;

&lt;p&gt;For the sake of brevity, this discussion is limited to a Node.js runtime, but the principles are the same for other environments. Additionally, we won't worry about testing user interfaces or varying browser environments; those utilities are another post entirely.&lt;/p&gt;

&lt;p&gt;So what's a good approach? Which libraries should be candidates?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-comparison"&gt;
  &lt;/a&gt;
  A comparison
&lt;/h2&gt;

&lt;p&gt;Several frameworks with performant runners help execute atomic tests, even concurrently. Some important considerations are library capabilities (like assertions), package size, maturity, and level of maintenance. Let's look at a collection of the most popular, up to date modules on npm today:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Library&lt;/th&gt;
&lt;th&gt;Size&lt;/th&gt;
&lt;th&gt;Concurrent&lt;/th&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;th&gt;Updated&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/avajs/ava"&gt;Ava&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;281 kB&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;3.15.0&lt;/td&gt;
&lt;td&gt;2021-11-01&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://jasmine.github.io/setup/nodejs.html"&gt;Jasmine&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;47 kB&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;3.10.0&lt;/td&gt;
&lt;td&gt;2021-10-13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://hapi.dev/module/lab"&gt;@hapi/lab&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;160 kB&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;24.4.0&lt;/td&gt;
&lt;td&gt;2021-11-09&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://mochajs.org/"&gt;Mocha&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3.8  &lt;em&gt;&lt;strong&gt;MB&lt;/strong&gt;&lt;/em&gt;
&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;9.1.3&lt;/td&gt;
&lt;td&gt;2021-10-15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://node-tap.org/"&gt;Node Tap&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;28.3  &lt;em&gt;&lt;strong&gt;MB&lt;/strong&gt;&lt;/em&gt;
&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;15.1.5&lt;/td&gt;
&lt;td&gt;2021-11-26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/substack/tape"&gt;tape&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;248 kB&lt;/td&gt;
&lt;td&gt;No&lt;sup&gt;1&lt;/sup&gt;
&lt;/td&gt;
&lt;td&gt;5.3.2&lt;/td&gt;
&lt;td&gt;2021-11-16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/lukeed/uvu"&gt;uvu&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;46 kB&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;0.5.2&lt;/td&gt;
&lt;td&gt;2021-10-08&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;achievable with tape-esque libraries like &lt;code&gt;mixed-tape&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#a-note-about-jest"&gt;
  &lt;/a&gt;
  A note about Jest
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;"But where’s Jest?"&lt;/em&gt; you ask. Don’t get me wrong, I understand the appeal of a framework with so many pleasantries. Jest’s feature-set is impressive and battle-tested. Unfortunately, tools like Jest, in order to accomplish so much, are opinionated. Jest uses implicit globals and its own context. It may not execute code the same way our servers will. This pattern can require all sorts of configuration bloat and transpilation, making debugging (especially in CI) tedious. In my view, Jest is not appropriate for what we're testing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unpacked-module-size"&gt;
  &lt;/a&gt;
  Unpacked module size
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Emphasis on sizes &amp;gt; 1 MB in the above table is intentional.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Since we're running our tests in a cloud environment (in addition to locally), disk space matters.&lt;/p&gt;

&lt;p&gt;Unfortunately, the library that most appeals to me, Node Tap, is just too large. At 28 MB, &lt;code&gt;tap&lt;/code&gt; isn't very portable and will occupy a large part of allotted space in an environment like AWS Lambda. Hopefully, this limitation won't always be an issue, but it's an important factor for now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-recommended-testing-stack"&gt;
  &lt;/a&gt;
  A recommended testing “stack”
&lt;/h2&gt;

&lt;p&gt;I think any of the above options are viable, depending on your use case and preference. For example, if BDD is preferable, &lt;code&gt;jasmine&lt;/code&gt; has you covered. &lt;code&gt;ava&lt;/code&gt; has excellent TypeScript support. &lt;code&gt;uvu&lt;/code&gt; is super fast and works with ESM. And if you're looking for staying power, &lt;code&gt;mocha&lt;/code&gt; has been around for nearly a decade!&lt;/p&gt;

&lt;p&gt;For us at Begin and &lt;a href="https://arc.codes/"&gt;Architect&lt;/a&gt;, &lt;a href="https://github.com/substack/tape"&gt;tape&lt;/a&gt; has been in use for several years. &lt;code&gt;tape&lt;/code&gt; has a stable and straightforward API, routine maintenance updates, and outputs &lt;a href="https://testanything.org/"&gt;TAP&lt;/a&gt;, making it really versatile. While TAP is legible, it's not the most human-readable format. Fortunately, several TAP reporters can help display results for developers. Until recently, Begin's TAP reporter of choice was &lt;code&gt;tap-spec&lt;/code&gt;. Sadly &lt;code&gt;tap-spec&lt;/code&gt; wasn't kept up to date and npm began reporting vulnerabilities.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-new-tap-reporter"&gt;
  &lt;/a&gt;
  A new TAP reporter
&lt;/h3&gt;

&lt;p&gt;Enter &lt;a href="https://github.com/architect/tap-arc"&gt;&lt;code&gt;tap-arc&lt;/code&gt;&lt;/a&gt;. Heavily inspired by &lt;code&gt;tap-spec&lt;/code&gt; (a passing suite's output is nearly identical), &lt;code&gt;tap-arc&lt;/code&gt; is a minimal, streaming TAP reporter with useful expected vs. actual diffing. We're still improving the package, but it's definitely on par with &lt;code&gt;tap-spec&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#feedback"&gt;
  &lt;/a&gt;
  Feedback?
&lt;/h2&gt;

&lt;p&gt;I'm super interested in what others are doing in this realm. How are you testing cloud functions? What factors are important when selecting test utilities? Do you test in the same environment you're deploying to?&lt;/p&gt;

</description>
      <category>testing</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>serverless</category>
    </item>
    <item>
      <title>A Colossal CSS Art!</title>
      <author>Temani Afif</author>
      <pubDate>Mon, 20 Dec 2021 21:13:46 +0000</pubDate>
      <link>https://dev.to/afif/a-colossal-css-art-56mm</link>
      <guid>https://dev.to/afif/a-colossal-css-art-56mm</guid>
      <description>&lt;p&gt;Here I am with another CSS Art. I am back to my favorite Anime (Attack On Titan) to draw:&lt;/p&gt;

&lt;p&gt;A CSS-only Colossal Titan!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/wvreKjm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In case you are not familiar with the Anime, here is an overview of the character:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aUWTH1PA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ic06xt19nzcm5s38q9ms.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aUWTH1PA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ic06xt19nzcm5s38q9ms.jpg" alt="Colossal Titan" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am still missing a few details and I will probably release a better version in the future 😉&lt;/p&gt;




&lt;p&gt;This time I did a better organization for the main colors so I can easily adjust them. &lt;/p&gt;

&lt;p&gt;Below an interactive demo if you want to update the colors. Share your version in the comment section 👇 &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/VwMzLGR?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It's also on Twitter if you want to spread the word 📯&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m4jnIuDi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FHC_GfkX0AIuiHJ.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--FmlYTCXC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1384162618290540551/jtuQodsv_normal.png" alt="CSS Challenges profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        CSS Challenges
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @challengescss
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      🎨 CSS Art!&lt;br&gt;&lt;br&gt;Are you ready for the final season of &lt;a href="https://twitter.com/hashtag/AttackOnTitan"&gt;#AttackOnTitan&lt;/a&gt; &lt;br&gt;The best anime ever will be back in January 2022!&lt;br&gt;&lt;br&gt;Until then here is a CSS-only Colossal Titan!&lt;br&gt;&lt;br&gt;Demo: &lt;a href="https://t.co/zm0dweMBLd"&gt;codepen.io/t_afif/full/wv…&lt;/a&gt; via &lt;a href="https://twitter.com/CodePen"&gt;@CodePen&lt;/a&gt; &lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/CSS"&gt;#CSS&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/CSS"&gt;#CSS&lt;/a&gt;art &lt;a href="https://twitter.com/hashtag/ShingekiNoKyojin"&gt;#ShingekiNoKyojin&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/AttackonTitanFinalSeason"&gt;#AttackonTitanFinalSeason&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/SNK"&gt;#SNK&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      11:26 AM - 20 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1472891196615892994" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1472891196615892994" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1472891196615892994" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;





&lt;p&gt;&lt;strong&gt;Someone&lt;/strong&gt;: Where are all the cool tutorials and useful collections? 🤔&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Me&lt;/strong&gt;: A lot of great content will come soon and a heavy CSS collection is in progress as well 🤫&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/jaXDDTuKmeJvwI56kV/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/jaXDDTuKmeJvwI56kV/giphy.gif" alt="Stay Tuned" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Flutter Optimisation Tips</title>
      <author>Rashid Wassan</author>
      <pubDate>Mon, 20 Dec 2021 21:01:05 +0000</pubDate>
      <link>https://dev.to/rashidwassan/flutter-optimisation-tips-9a1</link>
      <guid>https://dev.to/rashidwassan/flutter-optimisation-tips-9a1</guid>
      <description>&lt;p&gt;Flutter apps are very performant if some of the performance optimisations are kept in mind while developing the apps. No doubt, apps can become laggy and janky.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1: Use smaller image files:&lt;/strong&gt;&lt;br&gt;
No doubt, images are essential for any mobile application. And this is the area where performance gets the hit by a good margin, if not managed correctly. I started my journey as an Android Developer and I soon experienced lot of lag and poor performance in my apps. Later, I found that I was using the images which were of several MBs each. The resolution of image assets was much higher than required.&lt;br&gt;
This took lot of time for device to load the assets and draw pixels, increasing CPU &amp;amp; GPU’s work. Sometimes, images even failed to load, making app completely unresponsive.&lt;br&gt;
Here are some tips to follow to avoid performance issues related to image assets.&lt;br&gt;
Try reducing size of you images from tinypng.&lt;br&gt;
Lower the resolution of image here. Make sure the resolution is not more than any higher end device’s resolution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2: Avoid Unnecessary Animations&lt;/strong&gt;&lt;br&gt;
Animation is a foe of performance, using animations may cause your device resources to constantly work (since the animation values are generated again &amp;amp; again). CPU constantly needs to generate values &amp;amp; GPU has to redraw widgets.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3: Remove Redundant Widgets&lt;/strong&gt;&lt;br&gt;
Personally, I used lot of redundant widgets like useless containers &amp;amp; other widgets which did not contribute to overall UI feel of the app. Gradually, I realised that this was becoming my habit. Although this can be subjective. Make sure to use only those widgets which are necessary.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4: Proper State Management&lt;/strong&gt;&lt;br&gt;
A proper state management solution can make your app very efficient &amp;amp; avoid computational overhead. A typical Flutter app may contain hundreds of widgets. Updating these widgets &amp;amp; redrawing them again &amp;amp; again may cause your device to work more. The proper state management allows only necessary widgets to update their state or redraw. Let’s assume that you are using Provider as your state management tool for the app, Provider will only notify its listeners i.e consumer widgets. Only widgets listening to that Change Notifier Provider will update.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wfr6I_tS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4465dbpfwodw839nwa9x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wfr6I_tS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4465dbpfwodw839nwa9x.png" alt="Image description" width="880" height="381"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5: Use Dart Dev Tools (Flutter Dev Tools)&lt;/strong&gt;&lt;br&gt;
Dart Dev Tools is a combination of some useful profiling tools which can help to determine which widget or functionality is taking much processing power and cause lag or jank. Dev Tools illustrate a clear picture of things happening at main &amp;amp; UI thread.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aN2aE2Ir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6amt62j3cipedxg740tk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aN2aE2Ir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6amt62j3cipedxg740tk.png" alt="Image description" width="880" height="483"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6: Use Const Widgets Wherever Possible&lt;/strong&gt;&lt;br&gt;
It is good practice to use the keyword const for constants that we can initialise at compile time. Let's also not forget to use const as much as possible for our widgets, this allows us to catch and reuse widgets to avoid unnecessary rebuilds that are caused by their ancestors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7: Avoid Functional Components&lt;/strong&gt;&lt;br&gt;
Flutter is all about widgets, creating a custom widget can be done in two popular ways. Either create a function returning respective widget (functional approach) or create a whole new widget. It is highly recommended to create either Stateless or Stateful widget rather than creating a function.&lt;/p&gt;

&lt;p&gt;I hope this article will help to make performant Flutter apps.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
      <category>android</category>
      <category>ios</category>
    </item>
    <item>
      <title>Remix: A guide to the newly open-sourced React framework</title>
      <author>Matt Angelosanto</author>
      <pubDate>Mon, 20 Dec 2021 20:46:57 +0000</pubDate>
      <link>https://dev.to/logrocket/remix-a-guide-to-the-newly-open-sourced-react-framework-57j5</link>
      <guid>https://dev.to/logrocket/remix-a-guide-to-the-newly-open-sourced-react-framework-57j5</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/atharvadeosthale/"&gt;Atharva Deosthale&lt;/a&gt;&lt;/strong&gt; ✏️&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Nowadays, it seems like there’s a React framework being introduced every day. And while every React framework has something special to offer, &lt;a href="https://remix.run/"&gt;Remix&lt;/a&gt; stands out. Though it isn’t new, it recently became open source after initially being available on a paid subscription basis.&lt;/p&gt;

&lt;p&gt;Remix is a React framework used for server-side rendering (SSR). This means that both the backend and the frontend can be made using a single Remix app. Data is rendered on the server and served to the client side with minimum JavaScript. Unlike vanilla React, where data is fetched on the frontend and then rendered on the screen, Remix fetches data on the backend and serves the HTML directly to the user.&lt;/p&gt;

&lt;p&gt;In this article, we will discuss some cool things about Remix, then move on to create an SSR weather app using this new framework. Finally, I’ll share my personal views on Remix and whether I plan to use Remix for my future projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-to-using-remix"&gt;
  &lt;/a&gt;
  Benefits to using Remix
&lt;/h2&gt;

&lt;p&gt;Remix, just like other frameworks, has some special built-in features that make it convenient for developers. Here are some of my favorites:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nested-pages"&gt;
  &lt;/a&gt;
  Nested pages
&lt;/h3&gt;

&lt;p&gt;Any page inside a route folder is nested in the route instead of being separate. This means you can embed these components into your parent page, which also means less loading time.&lt;/p&gt;

&lt;p&gt;Another advantage of doing this is that we can enforce error boundaries to these embedded pages, which will help with error handling.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#error-boundaries"&gt;
  &lt;/a&gt;
  Error boundaries
&lt;/h3&gt;

&lt;p&gt;Suppose you get an error in a Remix component or a nested route; the errors are limited to the component and the component will fail to render, or it will simply show an error. In other frameworks, it will break the entire page, and you will see a huge error screen.&lt;/p&gt;

&lt;p&gt;While error boundaries can be implemented in Next.js as well, Remix has this built in, and I think it's a cool feature for production builds so that the user doesn’t get locked out of the entire page for a simple error.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#transitions"&gt;
  &lt;/a&gt;
  Transitions
&lt;/h3&gt;

&lt;p&gt;Remix automatically handles all loading states for you; all you have to do is tell Remix what to show when the app is loading. In other frameworks like Next.js, you need to set the loading state using some state management library like Redux or Recoil. While there are libraries that can help you do the exact same thing in other frameworks, Remix has this built in.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#traditional-forms"&gt;
  &lt;/a&gt;
  Traditional forms
&lt;/h3&gt;

&lt;p&gt;Now we are going back when developers used PHP. We used to specify a form method and action with a valid PHP URL; we use a similar approach in Remix.&lt;/p&gt;

&lt;p&gt;I know this doesn’t sound fun because we are used to &lt;code&gt;onClick&lt;/code&gt;, &lt;code&gt;onSubmit&lt;/code&gt;, and HTTP calls. But Remix handles this situation in a completely different way by providing functions like &lt;code&gt;action&lt;/code&gt; and &lt;code&gt;loader&lt;/code&gt; to perform server-side operations. Form data is easily available in these functions. This means there’s absolutely no need to serve JavaScript to the frontend to submit a form.&lt;/p&gt;

&lt;p&gt;Suppose you have a fairly simple website and you don’t really need to serve JavaScript to the frontend. This traditional form method works the best in these situations. In other frameworks, you might need to serve JavaScript to make a &lt;code&gt;fetch&lt;/code&gt; or an &lt;code&gt;axios&lt;/code&gt; call, but you don’t need to do that in Remix. It helps keep things simple.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#drawbacks-of-using-remix"&gt;
  &lt;/a&gt;
  Drawbacks of using Remix
&lt;/h2&gt;

&lt;p&gt;While Remix has plenty of benefits, there are some aspects of using the framework that might give you pause.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#smaller-community"&gt;
  &lt;/a&gt;
  Smaller community
&lt;/h3&gt;

&lt;p&gt;Remix is newly open-sourced. Because of this, there aren't many people using Remix in production projects at the moment.&lt;/p&gt;

&lt;p&gt;When you get stuck with a problem while using Remix, it might be difficult to find a solution on the internet, and you may need to post questions on forums and wait for a while to get a response.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#routing-system-might-be-confusing"&gt;
  &lt;/a&gt;
  Routing system might be confusing
&lt;/h3&gt;

&lt;p&gt;When I started out with Remix, I found the routing system confusing. I couldn’t understand the nested routes concept. That is because I’m used to other frameworks without this specific routing system, which means Remix has a bit of a learning curve.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-makes-remix-different-from-nextjs"&gt;
  &lt;/a&gt;
  What makes Remix different from Next.js?
&lt;/h2&gt;

&lt;p&gt;At first glance, there doesn’t seem to be much of a difference between Remix and Next.js because both of them support SSR. However, while Next.js supports SSG and other awesome tools, Remix only focuses on SSR.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-a-sample-app-with-remix"&gt;
  &lt;/a&gt;
  Building a sample app with Remix
&lt;/h2&gt;

&lt;p&gt;Now that we have seen some of the cool things Remix has to offer, let’s make a simple weather app using it. Before moving on with the tutorial, let’s look at the requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://nodejs.org"&gt;Node.js&lt;/a&gt; installed on your machine&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://code.visualstudio.com"&gt;Visual Studio Code&lt;/a&gt; or any other code editor you prefer&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://openweathermap.org/api"&gt;OpenWeatherMap&lt;/a&gt; API key — the free one is sufficient&lt;/li&gt;
&lt;li&gt;  Working knowledge of React&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you get stuck somewhere in the tutorial, here’s the &lt;a href="https://github.com/atharvadeosthale/remix-weather-app"&gt;GitHub&lt;/a&gt; repository.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-remix-app"&gt;
  &lt;/a&gt;
  Creating a Remix app
&lt;/h2&gt;

&lt;p&gt;Navigate to a safe directory and use the following command in the terminal to initialize the installation of our Remix app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-remix@latest weather-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, you can replace &lt;code&gt;weather-app&lt;/code&gt; with whatever project name is suitable to you. Once you hit &lt;code&gt;Enter&lt;/code&gt;, you will see an interactive menu that will help you make a Remix app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k7EF7n1j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/12/Remix-startup-screen.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k7EF7n1j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/12/Remix-startup-screen.png" alt="Image of IDE after installing Remix" width="730" height="246"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just like the above picture, you will be asked where you want to deploy. We are just experimenting and won’t cover deployment in this tutorial, so we will be using &lt;strong&gt;Remix App Server&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i8opGQXw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/12/Remix-IDE-deployment.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i8opGQXw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/12/Remix-IDE-deployment.png" alt="IDE screen asking where to deploy Remix" width="730" height="195"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, you will be asked whether you want to use JavaScript or TypeScript. I’ll be using JavaScript for the sake of simplicity in this tutorial.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NQIfvFLr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/12/Remix-IDE-JS-vs-TS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NQIfvFLr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/12/Remix-IDE-JS-vs-TS.png" alt="Remix IDE asking to use JS or TS" width="730" height="175"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then you will be asked if Remix should use &lt;code&gt;npm install&lt;/code&gt;. Type &lt;code&gt;y&lt;/code&gt;. This will install the required dependencies for Remix to run.&lt;/p&gt;

&lt;p&gt;Now, navigate into the project directory and use the following commands to install some dependencies you will need for this project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;axios dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are installing &lt;code&gt;axios&lt;/code&gt; so that we can send HTTP requests from our app to the OpenWeatherMap API. We will be using &lt;code&gt;dotenv&lt;/code&gt; for storing our API key in an environment variable.&lt;/p&gt;

&lt;p&gt;Now let’s edit &lt;code&gt;package.json&lt;/code&gt; so that we can use environment variables in the development mode of Remix. Replace the &lt;code&gt;dev&lt;/code&gt; script with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node -r dotenv/config node_modules/.bin/remix dev"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will enable environment variables for your projects. Now, create a new file &lt;code&gt;.env&lt;/code&gt; for our environment variables and store the API key in the following format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;WEATHER_API_KEY&lt;/span&gt;&lt;span class="o"&gt;={&lt;/span&gt;api key here&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let’s have a look at the Remix folder structure:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YYONR8yT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/12/Remix-folder-structure.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YYONR8yT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/12/Remix-folder-structure.png" alt="Folder structure of a Remix app" width="344" height="764"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;app&lt;/code&gt; folder contains our main app logic. All the folders and files under the &lt;code&gt;routes&lt;/code&gt; folder are exposed to the public and can be accessed with a URL. The &lt;code&gt;styles&lt;/code&gt; folder contains all the CSS files, which are stored in a similar fashion as routes.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;entry.client.jsx&lt;/code&gt; and &lt;code&gt;entry.server.jsx&lt;/code&gt; are managed by Remix, and it’s better not to touch entry files. Instead, create new files and work on them. The &lt;code&gt;root.jsx&lt;/code&gt; file contains our general page layout.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;public&lt;/code&gt; folder contains our public assets like static images and favicons, and the &lt;code&gt;remix.config.js&lt;/code&gt; file contains basic configuration for our Remix app, such as the port it should run on in development mode.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cleaning-up"&gt;
  &lt;/a&gt;
  Cleaning up
&lt;/h2&gt;

&lt;p&gt;When you first set up a Remix app, it’s not blank; Remix has some tutorials and demos built into the app. Let’s first clean them up so we can work on our weather app.&lt;/p&gt;

&lt;p&gt;Go to &lt;code&gt;root.jsx&lt;/code&gt; and empty the default &lt;code&gt;Layout&lt;/code&gt; component so that it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now go to the &lt;code&gt;styles&lt;/code&gt; folder, remove the &lt;code&gt;demos&lt;/code&gt; folder, and empty the contents of &lt;code&gt;dark.css&lt;/code&gt; and &lt;code&gt;global.css&lt;/code&gt;. This will clean up all the styling for us.&lt;/p&gt;

&lt;p&gt;Delete the &lt;code&gt;demos&lt;/code&gt; folder in the &lt;code&gt;routes&lt;/code&gt; directory as well because we don’t need it.&lt;/p&gt;

&lt;p&gt;Now go to &lt;code&gt;index.jsx&lt;/code&gt; and empty everything. Just make sure it has a default exported component just like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-a-form-and-fetching-the-weather"&gt;
  &lt;/a&gt;
  Creating a form and fetching the weather
&lt;/h2&gt;

&lt;p&gt;Now let’s create a form in &lt;code&gt;index.jsx&lt;/code&gt; with the following layout:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/weather&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;get&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;City&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;city&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fetch weather&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we created a form with method &lt;code&gt;get&lt;/code&gt;, and we have a name associated with the input field, which will be appended to the URL when the form gets submitted.&lt;/p&gt;

&lt;p&gt;Now let’s see how to use route nesting. Create a new file named &lt;code&gt;weather.jsx&lt;/code&gt; in the &lt;code&gt;routes&lt;/code&gt; folder; it will handle the &lt;code&gt;/weather&lt;/code&gt; route:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Outlet&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Weather&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Weather&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Outlet&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Outlet&lt;/code&gt; component will look for the &lt;code&gt;weather&lt;/code&gt; folder inside the &lt;code&gt;routes&lt;/code&gt; folder and embed the pages inside the main page. This should give you an idea on how page nesting works in Remix.&lt;/p&gt;

&lt;p&gt;Now create a new folder in &lt;code&gt;routes&lt;/code&gt; named &lt;code&gt;weather&lt;/code&gt;, and create a new file &lt;code&gt;index.jsx&lt;/code&gt; inside the &lt;code&gt;weather&lt;/code&gt; folder. Let’s make a &lt;code&gt;loader&lt;/code&gt; function that will run on the server side whenever the page is requested:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;city&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;city&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;city&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s2"&gt;`https://api.openweathermap.org/data/2.5/weather?q=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;city&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;appid=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WEATHER_API_KEY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;units=metric`&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;city&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;weather&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are extracting the city name from the URL query, which was sent using a GET request. Then we make a request to the OpenWeatherMap API to get the weather in that city. Remember, we should return the data we need in our frontend so that the data is available to render on the screen.&lt;/p&gt;

&lt;p&gt;Now let’s work on the layout of the result screen:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLoaderData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;city&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Temperature&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="err"&gt;°&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;useLoaderData&lt;/code&gt; hook gets the data that was returned using the &lt;code&gt;loader&lt;/code&gt; function so that we can render it on the frontend. If you did everything correctly, you should get your weather rendered like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K8_PCezF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/12/weather-app-demo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K8_PCezF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/12/weather-app-demo.png" alt="image of weather app displaying weather in nagpur" width="482" height="466"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congrats! You’ve made your first weather app using Remix!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I think the Remix is powerful and should gain further popularity in 2022. Will I use Remix instead of Next.js? Probably not, because Next.js has a huge community to back me up as compared to Remix, which is understandable because it is just newly open-sourced.&lt;/p&gt;

&lt;p&gt;This doesn’t mean I didn’t like this framework. I might use this for my personal or fun projects. I want to experiment more with the error boundary features. In my opinion, Next.js would be a great option as of this writing, because when I try to Google some of the problems I faced with Remix, I couldn’t find a solution easily. Maybe in a few years things will change, and Remix will be a more powerful framework with a huge community backing.&lt;/p&gt;

&lt;p&gt;Are you excited about trying out Remix now that it’s open source?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#full-visibility-into-production-react-apps"&gt;
  &lt;/a&gt;
  Full visibility into production React apps
&lt;/h2&gt;

&lt;p&gt;Debugging React applications can be difficult, especially when users experience issues that are hard to reproduce. If you’re interested in monitoring and tracking Redux state, automatically surfacing JavaScript errors, and tracking slow network requests and component load time, &lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;try LogRocket&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8FGBNR-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;LogRocket&lt;/a&gt; is like a DVR for web apps, recording literally everything that happens on your React app. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. LogRocket also monitors your app's performance, reporting with metrics like client CPU load, client memory usage, and more.&lt;/p&gt;

&lt;p&gt;The LogRocket Redux middleware package adds an extra layer of visibility into your user sessions. LogRocket logs all actions and state from your Redux stores.&lt;/p&gt;

&lt;p&gt;Modernize how you debug your React apps — &lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;start monitoring for free&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>ASMR Game Coding 🕹️ in Python [ Atari : Missile Command 🚀 ] </title>
      <author>Bek Brace</author>
      <pubDate>Mon, 20 Dec 2021 20:43:32 +0000</pubDate>
      <link>https://dev.to/bekbrace/asmr-game-coding-in-python-atari-missile-command--8i0</link>
      <guid>https://dev.to/bekbrace/asmr-game-coding-in-python-atari-missile-command--8i0</guid>
      <description>&lt;p&gt;Missile command 🚀 was the first game I've ever played in my life.&lt;br&gt;
This was in 1989 on Atari 800XL home computer my father bought the same year.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Atari&lt;/em&gt; 当たり [hiragana: アタリ] in Japanese means: &lt;br&gt;
"Hit" , "strike" or "to be right".&lt;/p&gt;

&lt;p&gt;The game was on a cartridge (I'm sure today's kids don't know what is a cartridge), I put it in the slot, and boom the game is on the TV ready to be played.&lt;br&gt;
This is an attempt to recreate the game after 32 years using Python programming language.&lt;br&gt;
This was not easy to recreate and I had to look up a lot of the logic on internet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Story&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You are the local Missile Commander for the Missile Intercept Launch Function.&lt;/p&gt;

&lt;p&gt;You are responsible for the safety of millions of citizens in six nearby cities. Nuclear war has just broken out. Wave after wave of nuclear warheads have been detected re-entering the atmostphere in your zone of control.&lt;/p&gt;

&lt;p&gt;All that stands between the last remaining citizens of your country and a fireball of death are your lightning reflexes and sharp-shooting aim.&lt;/p&gt;

&lt;p&gt;That's the video:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/y447GHeZgGM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Thank you for reading (and maybe watching 😉)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#social-media"&gt;
  &lt;/a&gt;
  Social Media  
&lt;/h2&gt;

&lt;p&gt;Facebook : &lt;a href="https://www.facebook.com/bekbrace%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B"&gt;https://www.facebook.com/bekbrace​​​​&lt;/a&gt; &lt;br&gt;
Twitter : &lt;a href="https://twitter.com/BekBrace"&gt;https://twitter.com/BekBrace&lt;/a&gt;&lt;br&gt;
Instagram : &lt;a href="https://www.instagram.com/bek_brace/"&gt;https://www.instagram.com/bek_brace/&lt;/a&gt;&lt;br&gt;
DEV profile : &lt;a href="https://dev.to/bekbrace%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B"&gt;https://dev.to/bekbrace​​​​&lt;/a&gt;&lt;br&gt;
GitHub profile : &lt;a href="https://github.com/BekBrace%E2%80%8B%E2%80%8B%E2%80%8B"&gt;https://github.com/BekBrace​​​&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>productivity</category>
      <category>gamedev</category>
      <category>programming</category>
    </item>
    <item>
      <title>My Journey with freeCodeCamp's Javascript Algorithms and Data Structures Course</title>
      <author>Eamonn Cottrell</author>
      <pubDate>Mon, 20 Dec 2021 20:37:04 +0000</pubDate>
      <link>https://dev.to/sieis/freecodecamp-javascript-3fcd</link>
      <guid>https://dev.to/sieis/freecodecamp-javascript-3fcd</guid>
      <description>&lt;h2&gt;
  &lt;a href="#victory-a-javascript-certificate"&gt;
  &lt;/a&gt;
  Victory! A Javascript Certificate
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;(But more importantly, some good programming practice.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Minimal code included as I found it most important in these projects to not look up anyone else's sample code. The act of banging my head against the proverbial wall was as important in learning the programming concepts as anything.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So, this took me a long time. &lt;/p&gt;

&lt;p&gt;I signed up for freeCodeCamp back in 2016, and it was one of the handful of tools I used to become familiar with coding. However, it wasn't until the past couple years (2019-2021) that I truly got more than casually serious about learning web development and computer programming. And I've continued to use myriad resources from Codecademy to Udemy to EdX to MITx to Google and YouTube. &lt;/p&gt;

&lt;p&gt;Last year, I became enthralled with bootcamps and nearly enrolled in a couple. I'm thankful that I decided against it, though, as I could never quite justify the price tag when I knew the breadth and depth of knowledge available for free out on the internet. &lt;/p&gt;

&lt;p&gt;And thus, I came back to freeCodeCamp.&lt;/p&gt;

&lt;p&gt;Throughout the course of the Javascript Algorithms and Data Structures material, I was grateful for the bite-sized lessons that have you learning bits and pieces of the language and the mechanisms to program with it. But beyond that, the projects were where I could tell the true tests stood. They were always challenging enough to not breeze through, but not impossible to comprehend either.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#elegance-a-roman-numeral-converter"&gt;
  &lt;/a&gt;
  Elegance? A Roman Numeral Converter
&lt;/h2&gt;

&lt;p&gt;In the final projects, I can certainly see my own amateur abilities, however, it's hard to overvalue the thrill of a working piece of code no matter how muddled its guts are. For the Roman Numeral Converter problem, we were tasked with converting any given number into its Roman Numeral counterpart. As I look back over my code now, it is a lengthy mess of if statements following a giant object holding the various iterations of Roman Numerals with which I glued together my solution.&lt;/p&gt;

&lt;p&gt;A part of me knows there are more elegant ways to come to the solution, but puzzling through this on my own without seeking any outside help was where the learning truly took place.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rules&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;II&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;III&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;IV&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;V&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;VI&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;VII&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;VIII&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;IX&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;X&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;XX&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;XXX&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;XL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;L&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;LX&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;LXX&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;LXXX&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;XC&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;CC&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;CCC&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;CD&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;D&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DC&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;700&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DCC&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DCCC&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;900&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;CM&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;M&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MM&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MMM&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#comments-ftw-a-cash-register-project"&gt;
  &lt;/a&gt;
  Comments ftw! A Cash Register Project
&lt;/h2&gt;

&lt;p&gt;I know comments are important. I just don't follow my own best knowledge all the time. During the five projects I grew progressively better at actually commenting well. For a couple, it was simple enough (in my mind at least) to not make notes through the code: particularly when the whole project was able to be completed in twenty or thirty lines. However, by the cash register problem I was commenting both for my own benefit as well as for the sake of good practice.&lt;/p&gt;

&lt;p&gt;The cash register took me two days to complete, and three complete restarts. I suspect that had I begun commenting and pseudo-coding out of the gate, this might have reduced my toil. Nevertheless, I was victorious in the end, and my misfires proved helpful in my learning.&lt;/p&gt;

&lt;p&gt;Including a fair bit of console.log-ing left in the solution, it took me 89 lines of code to get to the finish line. I suspect there to be more elegant and condensed ways to arrive at this solution, but I'm a simple man with a mind grounded in the functional earth of for loops.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;=====================&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Original Amounts: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;=====================&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;price:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;cash:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;total in drawer:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;change:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;change&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`cash in drawer:`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;=====================&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Computations:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;=====================&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#takeaways"&gt;
  &lt;/a&gt;
  Takeaways
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Comments are important; to not use them is to slap oneself.&lt;/li&gt;
&lt;li&gt;Elegance makes for more shareable code; dirty code can still work.&lt;/li&gt;
&lt;li&gt;Walking away from code sharpens intent; sleeping sharpens the mind.&lt;/li&gt;
&lt;li&gt;Projects are the only way to truly learn something.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TePpn0Jy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6eti4tgcdqcuqlfssb7s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TePpn0Jy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6eti4tgcdqcuqlfssb7s.png" alt="picture of Eamonn's Javascript Certificate from freeCodeCamp" width="880" height="676"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>bootcamp</category>
      <category>freecodecamp</category>
    </item>
    <item>
      <title>What Is The Difference Between A Resume And A CV?</title>
      <author>Guaranteed Website Visitors</author>
      <pubDate>Mon, 20 Dec 2021 20:14:24 +0000</pubDate>
      <link>https://dev.to/getrealvisitors/what-is-the-difference-between-a-resume-and-a-cv-19c8</link>
      <guid>https://dev.to/getrealvisitors/what-is-the-difference-between-a-resume-and-a-cv-19c8</guid>
      <description>&lt;p&gt;RESUME WRITING&lt;br&gt;
What Is The Difference Between A Resume And A CV?&lt;br&gt;
Last update of Azar 00 Study time: 5 minutes&lt;br&gt;
While both resumes and CVs work for job opportunities (and even some employers and hiring experts confuse the two), it should be noted that there are differences between the two. Which distinguish them from each other.&lt;/p&gt;

&lt;p&gt;In this article, we will explain the differences between a resume and a CV, what should be included in each, and when to use each. This content will help you to use either of these two to get the job you want.&lt;/p&gt;

&lt;p&gt;The difference between a resume and a CV&lt;br&gt;
The difference between a resume and a CV is the length, content and purpose of the two. In fact, you should choose one of these two documents depending on the job you are applying for.&lt;/p&gt;

&lt;p&gt;The resume should be a concise and useful collection of your work experience, skills and professional qualifications that should be completely relevant to the job description you are applying for. In contrast, the CV will be a complete document of your professional and educational qualifications and achievements. Some of the main differences between a resume and a CV include the following:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resume-length-and-cv"&gt;
  &lt;/a&gt;
  Resume length and CV
&lt;/h2&gt;

&lt;p&gt;Since writing a professional resume only covers your skills and abilities for a particular role, it should usually be only one or two pages long. But there is no limit to the number of pages in a CV, and it is even much longer than most resumes, as it includes more information and more detailed descriptions of courses, research, published articles or presentations.&lt;/p&gt;

&lt;p&gt;Work experience or type of job&lt;br&gt;
CVs are mostly used to get jobs in academia and research. For example, if you are planning to apply for the job of a university professor, your CV can cover and display everything you did during your studies and campus activities, and increase your chances of getting hired on a resume. But resumes are often used when applying for jobs in the private or public sector, often referred to as "industrial jobs" and are the exact opposite of college jobs.&lt;/p&gt;

&lt;p&gt;geographical location&lt;br&gt;
In some parts of the world, such as the United Kingdom, New Zealand and parts of Europe, employers use the term CV to describe a resume and do not use the term "resume" at all for a job marketing document. In South Africa, Australia and India, the terms CV and resume are often used interchangeably. But in the United States, resumes and CVs are very different and are used for different purposes. In Iran, most employers know resume and CV by the same name as resume, and in fact, its meaning and concept has been different for some people for several years.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-cv"&gt;
  &lt;/a&gt;
  What is a CV?
&lt;/h2&gt;

&lt;p&gt;CV (Latin for curriculum vitae) is a detailed and comprehensive document that describes in detail the course of scientific and professional achievements of individuals. CV descriptions are usually done in chronological order and usually begin with a list of work history, qualifications and educational background. While there is no requirement for the size and length of a CV, it usually takes three to ten pages and some people even make it longer. In general, the more experience you have, the longer your CV will be.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-included-in-the-cv"&gt;
  &lt;/a&gt;
  What is included in the CV?
&lt;/h2&gt;

&lt;p&gt;Typically, you include your career history as well as your education, awards, honors, scholarships, research or academic projects, and published articles in your CV. You can also include professional activities, work in universities and training centers, dissertation descriptions and one of your personal profiles in the CV that show all your skills and knowledge.&lt;/p&gt;

&lt;p&gt;What is a resume?&lt;br&gt;
A resume is a document that summarizes your work history, skills and education. The term is derived from the French word résumé, which translates as "summary" or "abstract".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-difference-between-a-resume-and-a-cv"&gt;
  &lt;/a&gt;
  The difference between a resume and a CV
&lt;/h2&gt;

&lt;p&gt;What should be included in the resume&lt;br&gt;
A resume usually includes a professional statement or "summary", a skills section, and a concise description of recent career achievements related to the job description, which are listed in reverse chronological order, starting with your last job.&lt;/p&gt;

&lt;p&gt;You can also include your educational background, achievements and professional profiles. If you have little or no professional experience, you can mention your related internship or personal projects on your resume.&lt;/p&gt;

&lt;p&gt;Read more: Words to include in your resume&lt;br&gt;
Time to use resume and CV&lt;br&gt;
If you are unsure which one to send to your hiring expert or prospective employer, ask yourself these questions:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-kind-of-job-are-you-applying-for"&gt;
  &lt;/a&gt;
  What kind of job are you applying for?
&lt;/h2&gt;

&lt;p&gt;If you are applying for a job at a university, especially as a professor, assistant professor or researcher at school or university, you will need to list your CV. Some institutions have guidelines for what should be included in the resume, so be sure to ask your university or school principal about this to prepare and submit the correct format for them.&lt;/p&gt;

&lt;p&gt;Is the company traditional or modern and up-to-date?&lt;br&gt;
The standard format for a resume for jobs other than college is resume, but there are companies and employers who are looking for more information and information about the job seeker and the number of pages of description is not important to them. You can use a CV for these occasions, but keep in mind that the number of companies is very small and employers and hiring experts allow the maximum amount of time it takes for job seekers to initially read their resumes to be 15 seconds.&lt;/p&gt;

&lt;p&gt;If in doubt about sending your resume or CV, contact the recruiter or hiring manager for an explanation.&lt;/p&gt;

&lt;p&gt;If you have a resume and you did not do anything to create a CV or vice versa, start today and try to have both copies of your &lt;a href="https://cryptoplatform.business.blog/2021/12/20/convert-more-traffic-to-sales-figma-2/"&gt;marketing document ready&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>resume</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Building and Testing Smart Contracts with Foundry by Paradigm</title>
      <author>Nader Dabit</author>
      <pubDate>Mon, 20 Dec 2021 19:53:22 +0000</pubDate>
      <link>https://dev.to/dabit3/building-smart-contracts-with-foundry-by-paradigm-2gfm</link>
      <guid>https://dev.to/dabit3/building-smart-contracts-with-foundry-by-paradigm-2gfm</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post was originally published on &lt;a href="https://mirror.xyz/sha.eth/6Mn3HjrqKLhHzu2balLPv4SqE5a-oEESl4ycpRkWFsc"&gt;Mirror&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of the things I really like about &lt;a href="https://www.paradigm.xyz/"&gt;Paradigm&lt;/a&gt; is that they seem to be very focused on helping builders and developers, and are not afraid to get their hands dirty with code (people like &lt;a href="https://github.com/Anish-Agnihotri?tab=repositories"&gt;Anish Agnihotri&lt;/a&gt; and &lt;a href="https://github.com/gakonst?tab=repositories"&gt;Georgios Konstantopoulos&lt;/a&gt; are some of the best engineers in web3 or maybe anywhere). They also &lt;a href="https://www.paradigm.xyz/writing/"&gt;share&lt;/a&gt; an enormous amount of some of the highest quality blockchain / web3 / crypto related content in existence. They definitely don't seem like the the typical VC firm.&lt;/p&gt;

&lt;p&gt;They &lt;a href="https://www.paradigm.xyz/2021/12/introducing-the-foundry-ethereum-development-toolbox/"&gt;recently created&lt;/a&gt; and open sourced &lt;a href="https://github.com/gakonst/foundry"&gt;Foundry&lt;/a&gt;, a new Solidity development environment.&lt;/p&gt;

&lt;p&gt;Since it came out I've been wanting to try it out, and finally had the chance to this week.&lt;/p&gt;

&lt;p&gt;In this post I want to give you a quick rundown of what I learned and how to get started with it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#foundry-overview"&gt;
  &lt;/a&gt;
  Foundry Overview
&lt;/h2&gt;

&lt;p&gt;Paradigm's description of Foundry is that &lt;strong&gt;Foundry is a portable, fast and modular toolkit for Ethereum application development.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It fits into the stack the same way that &lt;a href="https://hardhat.org/"&gt;Hardhat&lt;/a&gt;, &lt;a href="https://trufflesuite.com/"&gt;Truffle&lt;/a&gt;, and &lt;a href="https://dapp.tools/"&gt;Dapp Tools&lt;/a&gt; do.&lt;/p&gt;

&lt;p&gt;The main differences / selling points of Foundry are:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; It allows you to write your tests in Solidity instead of JavaScript.&lt;/p&gt;

&lt;p&gt;They make &lt;a href="https://www.paradigm.xyz/2021/12/introducing-the-foundry-ethereum-development-toolbox/#You_should_be_writing_your_tests_in_Solidity"&gt;a great case&lt;/a&gt; about why writing tests in Solidity VS JavaScript is better, and they are spot on with most of their points.&lt;/p&gt;

&lt;p&gt;There is just a lot less boilerplate and a lot less mental overhead. Once you write a few tests in Solidity you feel the difference.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; It's fast.&lt;/p&gt;

&lt;p&gt;Foundry is written in Rust and it is fast. They've documented a few &lt;a href="https://www.paradigm.xyz/2021/12/introducing-the-foundry-ethereum-development-toolbox/#You_should_be_writing_your_tests_in_Solidity"&gt;benchmarks here&lt;/a&gt;, but it's hard to do it justice until you use it (especially after using an alternative).&lt;/p&gt;

&lt;p&gt;Foundry is made up of 2 CLI tools - &lt;a href="https://github.com/gakonst/foundry/tree/master/forge"&gt;forge&lt;/a&gt; and &lt;a href="https://github.com/gakonst/foundry/tree/master/cast"&gt;cast&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Forge&lt;/strong&gt; is the Ethereum development and testing framework.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cast&lt;/strong&gt; is a CLI that allows you to interact with EVM smart contracts, send transactions, and read data from the network.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#drawbacks"&gt;
  &lt;/a&gt;
  Drawbacks
&lt;/h3&gt;

&lt;p&gt;While Foundry is fantastic for hardcore smart contract development, as an avid Hardhat user and enthusiast, I have to also outline some of the tradeoffs.&lt;/p&gt;

&lt;p&gt;I feel like Hardhat definitely wins for full stack developers because it offers better tooling for switching between and deploying to various networks (at least as of this writing).&lt;/p&gt;

&lt;p&gt;Hardhat also offers a local ethereum node that you can deploy to and test out a live front end or other application on.&lt;/p&gt;

&lt;p&gt;Hardhat also has a robust &lt;a href="https://hardhat.org/plugins/"&gt;plugin ecosystem&lt;/a&gt; that allows you to extend the project with a lot of additional functionality.&lt;/p&gt;

&lt;p&gt;Finally, Hardhat is fairly mature at this point and &lt;em&gt;just works&lt;/em&gt;, whereas Foundry is still building out its base feature set.&lt;/p&gt;

&lt;p&gt;Now that we've had an overview of Foundry, let's look at how to use it to build and test a smart contract.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-amp-testing-a-smart-contract-with-foundry"&gt;
  &lt;/a&gt;
  Building &amp;amp; testing a smart contract with Foundry
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;To install Foundry, you must first have Rust installed on your machine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To get started, we'll install &lt;a href="https://github.com/gakonst/foundry/tree/master/forge"&gt;forge&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;cargo &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--git&lt;/span&gt; https://github.com/gakonst/foundry &lt;span class="nt"&gt;--bin&lt;/span&gt; forge &lt;span class="nt"&gt;--locked&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, in an empty directory, we can use the &lt;code&gt;init&lt;/code&gt; command to initialize a new project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;forge init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The forge CLI will create two directories, &lt;strong&gt;lib&lt;/strong&gt; and &lt;strong&gt;src&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;lib&lt;/strong&gt; directory contains the testing contract (&lt;strong&gt;lib/ds-test/src/test.sol&lt;/strong&gt;) as well as a demo test contract implementing some various tests (&lt;strong&gt;lib/ds-test/demo/demo.sol&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;src&lt;/strong&gt; directory contains a barebones smart contract and test.&lt;/p&gt;

&lt;p&gt;Let's create a basic smart contract to test out. Rename &lt;strong&gt;Contract.sol&lt;/strong&gt; to &lt;strong&gt;HelloWorld.sol&lt;/strong&gt; and update it with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="c1"&gt;// SPDX-License-Identifier: MIT
&lt;/span&gt;&lt;span class="k"&gt;pragma&lt;/span&gt; &lt;span class="n"&gt;solidity&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;HelloWorld&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;constructor&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="k"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;_greeting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_greeting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;view&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="k"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;updateGreeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="k"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;_greeting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_greeting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we can run a build and compile the ABIs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;forge build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should create an &lt;strong&gt;out&lt;/strong&gt; directory containing the ABIs for both the main contract as well as the test.&lt;/p&gt;

&lt;p&gt;Next, let's update the name of &lt;strong&gt;test/Contract.t.sol&lt;/strong&gt; to &lt;strong&gt;test/HelloWorld.t.sol&lt;/strong&gt; and add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="c1"&gt;// SPDX-License-Identifier: MIT
&lt;/span&gt;&lt;span class="k"&gt;pragma&lt;/span&gt; &lt;span class="n"&gt;solidity&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"ds-test/test.sol"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'src/HelloWorld.sol'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;HelloWorldTest&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;DSTest&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;HelloWorld&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HelloWorld&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Foundry is fast!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;test1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;assertEq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="s"&gt;"Foundry is fast!"&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;test2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;assertEq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;updateGreeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;assertEq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;assertEq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="s"&gt;"Hello World"&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Forge comes built in with some really great testing features like assertions and gas cost snapshots.&lt;/p&gt;

&lt;p&gt;In our test we've asserted equality using the &lt;code&gt;assertEq&lt;/code&gt; utility.&lt;/p&gt;

&lt;p&gt;To run the test, we can run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;forge &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the test is run, we'll see output for not only the success of the test, but also the gas cost:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EWKOA1y2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op80td1jznbdv76sah6b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EWKOA1y2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op80td1jznbdv76sah6b.png" alt="Forge test" width="880" height="230"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are also utilities for:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;truthiness&lt;/strong&gt; - &lt;code&gt;assertTrue&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;decimal equality&lt;/strong&gt; - &lt;code&gt;assertEqDecimal&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;greater than, less than&lt;/strong&gt; - &lt;code&gt;assertGt&lt;/code&gt;, &lt;code&gt;assertGe&lt;/code&gt;, &lt;code&gt;assertLt&lt;/code&gt;, &lt;code&gt;assertLe&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can view the assertions in the testing contract at &lt;strong&gt;lib/ds-test/src/test.sol&lt;/strong&gt;. These are all of the available functions that we can use in our tests.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fuzzing"&gt;
  &lt;/a&gt;
  Fuzzing
&lt;/h3&gt;

&lt;p&gt;Foundry also supports &lt;a href="https://en.wikipedia.org/wiki/Fuzzing"&gt;fuzzing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This allows us to define function parameter types and the testing framework will populate these values at runtime.&lt;/p&gt;

&lt;p&gt;If it does find an input that causes the test to fail, it will return it so you can create a regression test.&lt;/p&gt;

&lt;p&gt;For instance, we can update the &lt;code&gt;test2&lt;/code&gt; function to receive a function argument, and use the value in our test without ever having to define what it is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;test2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="k"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;_greeting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;assertEq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;updateGreeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_greeting&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;assertEq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;assertEq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;_greeting&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when we run the test, Foundry will automatically populate the &lt;code&gt;_greeting&lt;/code&gt; variable when the test is run.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Foundry is a welcome addition to the web3 stack, bringing improved tooling and performance for smart testing and development.&lt;/p&gt;

&lt;p&gt;I'm excited to see this project mature and already would recommend developers looking to quickly build and test non-trivial smart contracts to try it out today.&lt;/p&gt;

&lt;p&gt;Huge shout out and thank you to Paradigm for their work building developer tooling like Foundry, it is much appreciated.&lt;/p&gt;

</description>
      <category>solidity</category>
      <category>web3</category>
      <category>blockchain</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to combat climate change with data in AWS</title>
      <author>Christopher Thompson H.</author>
      <pubDate>Mon, 20 Dec 2021 19:43:43 +0000</pubDate>
      <link>https://dev.to/aws-builders/how-to-combat-climate-change-with-data-in-aws-52nf</link>
      <guid>https://dev.to/aws-builders/how-to-combat-climate-change-with-data-in-aws-52nf</guid>
      <description>&lt;p&gt;Hello data Lovers! this blog will talk about some initiatives driven by AWS technologies that allow us to analyze and prevent some of the most significant effects of climate change in the world. Each section has its respective source to learn about the initiatives directly, &lt;strong&gt;and it's only a compilation of what already exists on the web.&lt;/strong&gt; 😄&lt;/p&gt;

&lt;p&gt;Data and its analysis are increasingly crucial for the urgency of measuring, model and monitoring global climate change. Organizations multi-laterals, governments, non-governmental organizations, and companies worldwide are committed to the compilation and generation of databases that support the fight against global warming.&lt;/p&gt;

&lt;p&gt;However, researchers are increasingly using new tools with higher availability and accessibility based on Cloud computing's technology, like analytics advanced resources for accelerating real-time monitoring.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#digital-information-for-decision-making-in-africa"&gt;
  &lt;/a&gt;
  Digital information for decision making in Africa
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Digital Earth Africa&lt;/strong&gt; is a program that promotes access to Earth observation data that allows African countries uses Sattelite's information about floods, droughts, soil, and coastal erosion, agriculture, land cover forests, land use, among other services. The users can analyze the critical data in minutes after they become available.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kBN6albq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jektpkc8nhsn0f6e601o.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kBN6albq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jektpkc8nhsn0f6e601o.jpg" alt="digital-earth-africa" width="880" height="474"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks to the &lt;a href="https://sustainability.aboutamazon.com/environment/the-cloud/asdi"&gt;AWS initiative Amazon Sustainability Data Initiative&lt;/a&gt; (ASDI), this information has been supported and endorsed by the various entities within this program.&lt;/p&gt;

&lt;p&gt;The success story published by AWS can be found in the following blog:&lt;br&gt;
&lt;a href="https://aws.amazon.com/es/blogs/publicsector/digital-earth-africa-enabling-insights-for-better-decision-making/"&gt;https://aws.amazon.com/es/blogs/publicsector/digital-earth-africa-enabling-insights-for-better-decision-making/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#melting-of-peruvian-glaciers-in-realtime"&gt;
  &lt;/a&gt;
  Melting of Peruvian glaciers in real-time
&lt;/h2&gt;

&lt;p&gt;Perú represents approximately 68% of the tropical glacier's mass, which has reduced by less than half over the last 40 years. The Instituto Nacional de Ecosistemas de Glaciares y Montañas (Inaigem), administrated by the state, uses machine learning and artificial intelligence tools for analyzing the compiled data in real-time. All of this is in the most vulnerable glacial lakes for calculating the probability of possible avalanches, shortening the answer time, and issuing alerts to prevent accidents and harm to the population.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rDw-Agi5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l07z947jviv26ou9qxkp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rDw-Agi5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l07z947jviv26ou9qxkp.jpg" alt="chacraraju-mountain" width="880" height="474"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks to AWS Technologies, it is possible to collect the information in real-time (with seconds difference) through sensors consolidating data in a central repository and data lake in AWS, generating alerts through messages services for possible avalanches or landslides. &lt;/p&gt;

&lt;p&gt;If you want to find out more, these are the links:&lt;br&gt;
&lt;a href="https://tc.copernicus.org/articles/13/2537/2019/"&gt;https://tc.copernicus.org/articles/13/2537/2019/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.aboutamazon.com/news/aws/tracking-the-disappearing-glaciers-of-peru"&gt;https://www.aboutamazon.com/news/aws/tracking-the-disappearing-glaciers-of-peru&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shark-and-sea-state-monitoring"&gt;
  &lt;/a&gt;
  Shark and sea state monitoring
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vHFbRbdQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6kfkvname06rsagv53eq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vHFbRbdQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6kfkvname06rsagv53eq.jpg" alt="shark-monitoring-with-aws" width="880" height="474"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;95% of the ocean is unexplored, and the lack of data will affect conservation efforts. Non-governmental organization Global Ocarch borns to help scientists deal with the previously unavailable information. Cloud Computing is for storing and sharing data with Sattelite telemetry above the shark movement through the Ocarch Shark Tracker and Ocarch tracker applications in his site. This information allows most of 180 scientists of 90 organizations to progress in 23 different research projects.&lt;/p&gt;

&lt;p&gt;OCEACH uses Amazon Simple Storage Service (Amazon S3) to store its recompiled data. Amazon Relational Database Service (Amazon RDS) for its shared database, Amazon Elastic Compute Cloud (Amazon EC2) for the computing power, and Amazon Route 53 how domain name system.&lt;/p&gt;

&lt;p&gt;The success story published by AWS can be found in the following blog:&lt;br&gt;
&lt;a href="https://aws.amazon.com/es/blogs/publicsector/assessing-oceans-health-monitoring-shark-populations/"&gt;https://aws.amazon.com/es/blogs/publicsector/assessing-oceans-health-monitoring-shark-populations/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#securing-the-future-for-the-tazmania-devil"&gt;
  &lt;/a&gt;
  Securing the future for the Tazmania devil
&lt;/h2&gt;

&lt;p&gt;This marsupial is threatened for changes provoked by humans or devasting fires and for infectious cancers that can cause facial tumors and reduce their number by more than 80%. The Cloud has accelerated the work of Sydney University Experts using data of the Tasmanian genome. Those analyses will use for researchers worldwide, and search helps protect those marsupials and other endangered species.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cWUwIlJm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5ch13e8yeeawznciwwx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cWUwIlJm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5ch13e8yeeawznciwwx.jpg" alt="Demons of Tazmania" width="880" height="474"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The team's work has accelerated since the start of a proof of concept in AWS. According to the team, it allowed them to speed up the investigation and manage the finances carefully.&lt;/p&gt;

&lt;p&gt;If you want to find out more, these are the links:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.zdnet.com/article/university-of-sydney-using-cloud-to-prevent-the-tasmanian-devil-from-extinction/"&gt;https://www.zdnet.com/article/university-of-sydney-using-cloud-to-prevent-the-tasmanian-devil-from-extinction/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://aws.amazon.com/es/opendata/open-data-sponsorship-program/"&gt;https://aws.amazon.com/es/opendata/open-data-sponsorship-program/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#other-interesting-cases"&gt;
  &lt;/a&gt;
  Other interesting cases
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#saildrone"&gt;
  &lt;/a&gt;
  Saildrone
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.saildrone.com/"&gt;Saildrone Website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/es/solutions/case-studies/saildrone-video-case-study/"&gt;https://aws.amazon.com/es/solutions/case-studies/saildrone-video-case-study/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cmip6-dataset-to-foster-climate-innovation-and-study-the-impact-of-future-climate-conditions"&gt;
  &lt;/a&gt;
  CMIP6 dataset to foster climate innovation and study the impact of future climate conditions
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/es/blogs/publicsector/now-available-cmip6-dataset-foster-climate-innovation-study-impact-future-climate-conditions/"&gt;https://aws.amazon.com/es/blogs/publicsector/now-available-cmip6-dataset-foster-climate-innovation-study-impact-future-climate-conditions/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>datascience</category>
      <category>cloud</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Living in the Shell #20; tail (Display/Follow File Content)</title>
      <author>Babak K. Shandiz</author>
      <pubDate>Mon, 20 Dec 2021 19:41:07 +0000</pubDate>
      <link>https://dev.to/babakks/living-in-the-shell-20-tail-displayfollow-file-content-3nm1</link>
      <guid>https://dev.to/babakks/living-in-the-shell-20-tail-displayfollow-file-content-3nm1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#-raw-tail-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;tail&lt;/code&gt; ⛵
&lt;/h2&gt;

&lt;p&gt;Display or follow file content.&lt;/p&gt;

&lt;p&gt;ℹ️ Here, &lt;em&gt;following&lt;/em&gt; means streaming a file while it's being updated (appended).&lt;/p&gt;

&lt;p&gt;ℹ️ You can use &lt;code&gt;-c&lt;/code&gt; in place of &lt;code&gt;-n&lt;/code&gt; in the following examples, to switch to binary offset selection.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#print-bottom-n-lines-of-a-file-raw-n-endraw-"&gt;
  &lt;/a&gt;
  Print bottom N lines of a file &lt;code&gt;-n&lt;/code&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;tail&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; 5 ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Prints last 5 lines of &lt;code&gt;~/.bashrc&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#print-from-nth-line-afterwards-raw-n-n-endraw-"&gt;
  &lt;/a&gt;
  Print from N-th line afterwards &lt;code&gt;-n +N&lt;/code&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;tail&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; +3 ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Prints &lt;code&gt;~/.bashrc&lt;/code&gt; from the 3rd line until the end.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#following-raw-syslog-endraw-events-raw-f-endraw-"&gt;
  &lt;/a&gt;
  Following &lt;code&gt;syslog&lt;/code&gt; events &lt;code&gt;-f&lt;/code&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;tail&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; /var/log/syslog
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Follows system logs (on Debian/Ubuntu).&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>productivity</category>
      <category>linux</category>
      <category>bash</category>
      <category>devops</category>
    </item>
  </channel>
</rss>
