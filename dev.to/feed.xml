<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Firebase core services</title>
      <author>Aswin Barath</author>
      <pubDate>Tue, 24 Aug 2021 18:01:28 +0000</pubDate>
      <link>https://dev.to/aswin2001barath/firebase-core-services-4hkl</link>
      <guid>https://dev.to/aswin2001barath/firebase-core-services-4hkl</guid>
      <description>&lt;h2&gt;
  &lt;a href="#firestore-database"&gt;
  &lt;/a&gt;
  Firestore database
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OdUPDGCJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qliisl5vchs8xas8j4v3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OdUPDGCJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qliisl5vchs8xas8j4v3.png" alt="Firestore database"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Firestore is an excellent choice these days as almost every app needs persistent data. Following are the benefits of firestore:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Realtime&lt;/li&gt;
&lt;li&gt;NoSQL&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#realtime"&gt;
  &lt;/a&gt;
  Realtime
&lt;/h3&gt;

&lt;p&gt;Realtime means that for every change made in the database, the connected users updates with these changes. This feature saves you a lot of time when you are developing applications. It provides clear logic and reduces your code length.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nosql"&gt;
  &lt;/a&gt;
  NoSQL
&lt;/h3&gt;

&lt;p&gt;Firestore is a NoSQL document database. There has been a surf of popularity for NoSQL databases. A lot of developers find them more comfortable to use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h3&gt;

&lt;p&gt;Firestore provides a set of security rules with which you can easily create restrictions for who can read, write, update, or delete data from your database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hosting"&gt;
  &lt;/a&gt;
  Hosting
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pYLBKkVR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6w96xl0bl2gmvynbh1ba.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pYLBKkVR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6w96xl0bl2gmvynbh1ba.png" alt="Hosting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Firebase Hosting is an easy to use service even for beginners. Following are some impressive reasons to use this service:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SSL for Every Site&lt;/li&gt;
&lt;li&gt;Fast Servers&lt;/li&gt;
&lt;li&gt;Deploy From CLI&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#ssl-for-every-site"&gt;
  &lt;/a&gt;
  SSL for Every Site
&lt;/h3&gt;

&lt;p&gt;The SSL certificate is automatically provisioned and configured for each site deployed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cached-on-ssds"&gt;
  &lt;/a&gt;
  Cached on SSDs
&lt;/h3&gt;

&lt;p&gt;Sites deployed to Firebase Hosting are cached on SSD’s(Solid State Drive) for a low latency reliable experience.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deploy-from-cli"&gt;
  &lt;/a&gt;
  Deploy From CLI
&lt;/h3&gt;

&lt;p&gt;Deploying your app to the web from a local directory only takes one command.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#storage"&gt;
  &lt;/a&gt;
  Storage
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ixXSYaZg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zyw6j9xxzw9wns7hdv0x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ixXSYaZg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zyw6j9xxzw9wns7hdv0x.png" alt="Storage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We love to share photos, videos, and gifs. Firebase storage enables your users to store and share these files through your app. Some of the features of the Firebase storage service are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Handle Large File Sizes&lt;/li&gt;
&lt;li&gt;Flexible File Type&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#handle-large-file-sizes"&gt;
  &lt;/a&gt;
  Handle Large File Sizes
&lt;/h3&gt;

&lt;p&gt;Firebase storage can scale up to petabytes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flexible-file-type"&gt;
  &lt;/a&gt;
  Flexible File Type
&lt;/h3&gt;

&lt;p&gt;There are no limitations on the types of files you can upload, which means you can use this service for images, videos, PDFs, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#authentication"&gt;
  &lt;/a&gt;
  Authentication
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Or771bnG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/irk835xr7su5paudhy2f.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Or771bnG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/irk835xr7su5paudhy2f.PNG" alt="Authentication"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To build an authentication system from scratch is tiresome and can get tricky. Firebase offers a solution to authentication that requires less code, less time, and better security through the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Email and Password Authentication&lt;/li&gt;
&lt;li&gt;OAuth authentication

&lt;ul&gt;
&lt;li&gt;Using an existing platform to authenticate a user is known as OAuth. Firebase utilizes Google, Facebook, Twitter, Github, and many other providers that you can use to authenticate your users.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each Firebase service can be used on its own or together with the other services. Hence makes it easy to pick and choose the right services for your specific application.&lt;/p&gt;

&lt;p&gt;Firebase offers various services.&lt;br&gt;
So, I encourage you to take the time to explore the other services as well.&lt;/p&gt;

&lt;p&gt;Feel free to share if you found this useful 😃.&lt;/p&gt;

</description>
      <category>firebase</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Assign value to multiple variables at once in Javascript</title>
      <author>Beginner Developer</author>
      <pubDate>Tue, 24 Aug 2021 16:50:52 +0000</pubDate>
      <link>https://dev.to/beginnerdeveloper/assign-value-to-multiple-variables-at-once-in-javascript-3ah7</link>
      <guid>https://dev.to/beginnerdeveloper/assign-value-to-multiple-variables-at-once-in-javascript-3ah7</guid>
      <description>&lt;p&gt;The &lt;strong&gt;destructuring assignment&lt;/strong&gt; syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    let [a,b,c] = [1,2,3];

    console.log(a,b,c);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cuVKCvS1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3b8yxsbyhx8e3c9634r9.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cuVKCvS1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3b8yxsbyhx8e3c9634r9.PNG" alt="Output"&gt;&lt;/a&gt;&lt;br&gt;
My Blog:- &lt;a href="https://beginners-developer.blogspot.com/"&gt;https://beginners-developer.blogspot.com/&lt;/a&gt;&lt;br&gt;
Reference: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tips</category>
      <category>html</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>KoMPose Kit: KaMP Kit goes Jetpack Compose</title>
      <author>Brady Aiello</author>
      <pubDate>Tue, 24 Aug 2021 16:38:22 +0000</pubDate>
      <link>https://dev.to/touchlab/kompose-kit-kamp-kit-goes-jetpack-compose-1k43</link>
      <guid>https://dev.to/touchlab/kompose-kit-kamp-kit-goes-jetpack-compose-1k43</guid>
      <description>&lt;h2&gt;
  &lt;a href="#kamp-kit-and-jetpack-compose"&gt;
  &lt;/a&gt;
  KaMP Kit and Jetpack Compose
&lt;/h2&gt;

&lt;p&gt;Hey folks, Brady from Touchlab here. I've only been at Touchlab since the beginning of the year, but &lt;a href="https://github.com/touchlab/KaMPKit"&gt;KaMP Kit&lt;/a&gt;, our simple-but-not-too-simple sample project to help those considering Kotlin Multiplatform, started way back at the end of 2019. Back then, Jetpack Compose had just been announced in May. It was a time full of optimism about the modern mobile UI development experience, but also of wild instability. The first &lt;a href="https://android.googlesource.com/platform/frameworks/support/+/refs/heads/androidx-navigation-release/ui/README.md"&gt;method&lt;/a&gt; of getting Jetpack Compose to work on your machine involved pulling down the AndroidX development toolchain, and running a special version of Android Studio via terminal commands. Eventually, preview, alpha, and beta version of Compose could be used in the canary version of Android Studio (more &lt;a href="https://youtu.be/U5BwfqBpiWU?t=1324"&gt;history&lt;/a&gt;). Starting July 28, 2021, Compose went &lt;a href="https://android-developers.googleblog.com/2021/07/jetpack-compose-announcement.html"&gt;stable&lt;/a&gt;, and a version of Android Studio Arctic Fox, which supports Compose, was released in the stable channel shortly thereafter. Now we can use a stable version of Compose with a stable version of Android Studio. We at Touchlab have been excited about Compose for a long time; you can watch us geek out about it &lt;a href="https://www.youtube.com/watch?v=CA6KYa0MvPo"&gt;here&lt;/a&gt;. And though the community has been interested in Compose for KaMP Kit since at least &lt;a href="https://github.com/touchlab/KaMPKit/issues/105"&gt;May 2020&lt;/a&gt;, we didn't want folks who are trying out Kotlin Multiplatform with KaMP Kit to also have to learn a changing Jetpack Compose API, and require them to use a special version of Android Studio. Now that these obstacles have been removed, we feel comfortable fully endorsing Jetpack Compose in KMM.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cutting-code"&gt;
  &lt;/a&gt;
  Cutting Code
&lt;/h2&gt;

&lt;p&gt;After moving to Jetpack Compose, we were able to remove a lot of things that clutter the KMP learning experience. XML views are gone, which means developers don't need to worry about context switching between XML and Kotlin, &lt;code&gt;findViewById()&lt;/code&gt;, or configure &lt;code&gt;viewBinding&lt;/code&gt; or &lt;code&gt;dataBinding&lt;/code&gt;. Removing the &lt;code&gt;RecyclerView&lt;/code&gt;, its &lt;code&gt;ViewHolder&lt;/code&gt;, and &lt;code&gt;Adapter&lt;/code&gt;, and replacing it with a &lt;code&gt;LazyColumn&lt;/code&gt; from Compose simplifies the sample considerably. Although we had to bring in Compose dependencies, &lt;a class="mentioned-user" href="https://dev.to/russhwolf"&gt;@russhwolf&lt;/a&gt;
 noticed that by abandoning &lt;code&gt;AppCompatActivity&lt;/code&gt; in favor of &lt;code&gt;ComponentActivity&lt;/code&gt;, we were able to remove the large AppCompat library from our dependencies entirely.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exposing-a-flaw-in-our-state-management"&gt;
  &lt;/a&gt;
  Exposing a Flaw in our State Management
&lt;/h2&gt;

&lt;p&gt;If you're now converting an app to use Jetpack Compose, you may have noticed that modeling your view state using a &lt;code&gt;sealed class&lt;/code&gt; may not work as well as it used to in the &lt;code&gt;View&lt;/code&gt; world. That's because &lt;code&gt;View&lt;/code&gt;s implicitly kept state that we relied on. Compose made this more apparent, and forced us to stop relying on our UI for any state whatsoever. &lt;/p&gt;

&lt;p&gt;For example, let's say we have &lt;code&gt;Loading&lt;/code&gt;, &lt;code&gt;Success&lt;/code&gt;, and &lt;code&gt;Error&lt;/code&gt; states to describe our UI, and that we are currently showing the &lt;code&gt;Success&lt;/code&gt; state to describe a list of items in our UI, while fetching more data. In the &lt;code&gt;View&lt;/code&gt; world, we emit a &lt;code&gt;Loading&lt;/code&gt; state, which just makes the loading spinner visible, in addition to the stale list, while fetching a fresh list. It just comes down to showing what we're already showing, and then making a loading spinner visible.&lt;/p&gt;

&lt;p&gt;However, in the Compose world, we don't have all possible views on the screen, only toggling some as visible. Instead, we need to emit all of the UI we want to show whenever the State changes. In our example, when we emit the &lt;code&gt;Loading&lt;/code&gt; state, the success UI with our list of data goes away, and only the loading spinner is visible. This is very jarring, and not a great user experience. This is because we're using a &lt;code&gt;sealed class&lt;/code&gt; for something that's not mutually exclusive. &lt;code&gt;Success&lt;/code&gt; and &lt;code&gt;Loading&lt;/code&gt; are not mutually exclusive, unless &lt;code&gt;Loading&lt;/code&gt; only describes an empty screen with a loading spinner. Ryan Harter has &lt;a href="https://ryanharter.com/blog/2019/07/encapsulating-view-state/#a-note-about-sealed-classes"&gt;written&lt;/a&gt; about this issue, and Android GDE &lt;a class="mentioned-user" href="https://dev.to/ditn"&gt;@ditn&lt;/a&gt;
 &lt;a href="https://twitter.com/iateyourmic"&gt;Adam Bennett&lt;/a&gt; told me that his team at Cuvva also had this discussion. Perhaps the simplest solution is to have a &lt;code&gt;data class&lt;/code&gt; with nullable fields:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;data class&lt;/span&gt; &lt;span class="nc"&gt;DataState&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This covers the only &lt;code&gt;Loading&lt;/code&gt;, only &lt;code&gt;Success&lt;/code&gt;, only &lt;code&gt;Error&lt;/code&gt;, &lt;code&gt;Loading&lt;/code&gt; and &lt;code&gt;Success&lt;/code&gt;, and &lt;code&gt;Loading&lt;/code&gt; and &lt;code&gt;Error&lt;/code&gt; possibilities. It harkens back to the old Android architecture components samples' &lt;code&gt;Resource&amp;lt;T&amp;gt;&lt;/code&gt; &lt;a href="https://github.com/android/architecture-components-samples/blob/88747993139224a4bb6dbe985adf652d557de621/GithubBrowserSample/app/src/main/java/com/android/example/github/vo/Resource.kt"&gt;class&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Though, some &lt;a href="https://twitter.com/JorgeCastilloPr/status/1428731347888230402"&gt;argue&lt;/a&gt; that those State combinations should all be mutually exclusive &lt;code&gt;sealed class&lt;/code&gt;es, which is also a great approach that avoids the nullability issues. If &lt;code&gt;Loading&lt;/code&gt; is the only State that can coexist with other States, we can also just add a boolean field. &lt;/p&gt;

&lt;p&gt;Whichever way you go, you should make sure not to model any of your UI state as mutually exclusive of others unless it actually &lt;em&gt;is&lt;/em&gt; mutually exclusive of others. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#swipe-to-refresh"&gt;
  &lt;/a&gt;
  Swipe To Refresh
&lt;/h2&gt;

&lt;p&gt;Swipe-to-refresh functionality is an extremely common UI element, and as such, it is available on Android's legacy View system in &lt;a href="https://developer.android.com/training/swipe/add-swipe-interface"&gt;SwipeRefreshLayout&lt;/a&gt;. The Compose equivalent isn't part of the core Compose UI, but there is a solid solution.&lt;/p&gt;

&lt;p&gt;To get this same functionality in Compose without implementing swipe-to-refresh yourself, you'll want to use &lt;a href="https://github.com/google/accompanist/tree/main/swiperefresh"&gt;Accompanist-SwipeRefresh&lt;/a&gt;, which is a Google library, but isn't officially part of Jetpack. You'll also need to make sure that any content inside the &lt;code&gt;SwipeRefresh&lt;/code&gt; Composable is scrollable. You may have to wrap some content in a &lt;code&gt;Column&lt;/code&gt; with a &lt;code&gt;verticalScroll&lt;/code&gt; modifier per the &lt;a href="https://google.github.io/accompanist/swiperefresh/"&gt;documentation&lt;/a&gt;. If you miss this step, you could emit a non-scrollable &lt;code&gt;Error&lt;/code&gt; state, and be unable to swipe to refresh again.&lt;/p&gt;

&lt;p&gt;Given its popularity, it seems a little strange that swipe-to-refresh isn't a core part of Compose. But this brings us to another way that Compose shines. Compose, and its 1st party associated libraries, are completely unbundled from the operating system. This means that Compose can run on any device running Android API &lt;a href="https://developer.android.com/jetpack/compose/interop/adding#anchor"&gt;21 (Lollipop) and newer&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#transforming-flows"&gt;
  &lt;/a&gt;
  Transforming Flows
&lt;/h2&gt;

&lt;p&gt;Compose uses a &lt;a href="https://developer.android.com/jetpack/compose/state"&gt;special observable type&lt;/a&gt; to know when to update UI. In Compose, this is the &lt;code&gt;State&amp;lt;T&amp;gt;&lt;/code&gt; class. When &lt;code&gt;State&lt;/code&gt; changes, all &lt;code&gt;@Composable&lt;/code&gt; functions dependent on that &lt;code&gt;State&lt;/code&gt; are reinvoked, and emit the corresponding UI. By exposing data as &lt;code&gt;StateFlow&lt;/code&gt;s from our KMM module, we can use the &lt;code&gt;Flow&lt;/code&gt; extension function &lt;code&gt;collectAsState()&lt;/code&gt; and clean it up even more with delegate syntax. We want to collect the &lt;code&gt;Flow&lt;/code&gt; safely, avoiding collection when the view goes to the background, and restarting it when it comes back to the foreground. We'll use Manuel Vivo's &lt;a href="https://medium.com/androiddevelopers/a-safer-way-to-collect-flows-from-android-uis-23080b1f8bda#c5fd"&gt;post&lt;/a&gt;, "A safer way to collect flows from Android UIs" as a guide to create a lifecycle-aware &lt;code&gt;Flow&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;lifecycleOwner&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;LocalLifecycleOwner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;lifecycleAwareDogsFlow&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;remember&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;breedStateFlow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;lifecycleOwner&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;breedStateFlow&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;flowWithLifecycle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lifecycleOwner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lifecycle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;dogsState&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;lifecycleAwareDogsFlow&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;collectAsState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;breedStateFlow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The delegate syntax is nice because we get best of &lt;code&gt;State&lt;/code&gt; and its backing data. Our &lt;code&gt;dogsState&lt;/code&gt; is actually not a &lt;code&gt;State&lt;/code&gt;, so we don't need to put &lt;code&gt;.value&lt;/code&gt; to get the value, but because it delegates its &lt;code&gt;get()&lt;/code&gt;s to a &lt;code&gt;State&lt;/code&gt;, &lt;code&gt;@Composable&lt;/code&gt; functions that take it as a parameter are still invoked whenever its value changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Jetpack Compose has been an exciting project to follow, and it's clear that it has a bright future for reactive and declarative UI. Updating to Compose has simplified KaMP Kit, and exposed a flaw in our previous state management approach, forcing us to become better developers. Our goal with the &lt;a href="https://github.com/touchlab/KaMPKit"&gt;KaMP Kit&lt;/a&gt; project is to give folks interested in Kotlin Multiplatform the easiest way to get started, and now that Compose is stable, it makes learning KMM easier than ever.&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>compose</category>
      <category>android</category>
    </item>
    <item>
      <title>What is Firebase?</title>
      <author>Aswin Barath</author>
      <pubDate>Tue, 24 Aug 2021 16:38:13 +0000</pubDate>
      <link>https://dev.to/aswin2001barath/what-is-firebase-3f35</link>
      <guid>https://dev.to/aswin2001barath/what-is-firebase-3f35</guid>
      <description>&lt;p&gt;&lt;a href="https://aswinbarath.github.io/What-is-Firebase/"&gt;Originally posted here!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let us first understand how is a full-stack application built.&lt;br&gt;
A full-stack application consists of a front-end component and a back-end component.&lt;br&gt;
A front-end component is what we see, a user interface(UI).&lt;br&gt;
A back-end component communicates with the UI to send, receive, store and/or delete data.&lt;/p&gt;

&lt;p&gt;Firebase is &lt;strong&gt;Back-End as a Service (BaaS)&lt;/strong&gt;.&lt;br&gt;
Firebase gives you all the benefits of a back-end without the complexities of creating one up from scratch.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-firebase"&gt;
  &lt;/a&gt;
  Benefits of Firebase
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#reduce-development-time"&gt;
  &lt;/a&gt;
  Reduce Development Time
&lt;/h3&gt;

&lt;p&gt;Let's face it. We can get impatient when we want a full-stack application as soon as possible. With Firebase, you can cut down development time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h3&gt;

&lt;p&gt;Firebase provides built-in security. If you configure it in the right way, your app will be a solid fortress.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#highspeed-caching"&gt;
  &lt;/a&gt;
  High-Speed Caching
&lt;/h3&gt;

&lt;p&gt;Your app deployed using Firebase hosting gets cached on solid-state drives (SSD) throughout the world. Your app loading time will become extremely fast that also helps with SEO.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#realtime-data"&gt;
  &lt;/a&gt;
  Realtime Data
&lt;/h3&gt;

&lt;p&gt;Cloud Firestore database updates all connected clients in real-time. The ability to get real-time updates makes applications a lot easier to implement.&lt;/p&gt;

&lt;p&gt;Feel free to share if you found this useful 😃.&lt;/p&gt;

</description>
      <category>firebase</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>15 Useful VSCode shortcuts to improve productivity</title>
      <author>Shubham Khatri</author>
      <pubDate>Tue, 24 Aug 2021 16:20:43 +0000</pubDate>
      <link>https://dev.to/shubhamreacts/15-useful-vscode-shortcuts-to-improve-productivity-4akc</link>
      <guid>https://dev.to/shubhamreacts/15-useful-vscode-shortcuts-to-improve-productivity-4akc</guid>
      <description>&lt;p&gt;VSCode is one of the most popular editors for web development. When writing code, we often require certain formatting actions, and a lot of them are supported by VSCode itself. While most actions can be found from Menu options, having hands-on keyboard shortcuts can help improve your coding speed by a lot.&lt;/p&gt;

&lt;p&gt;Here is a list of some shortcuts that I have been using for a while and found to be really useful. &lt;/p&gt;

&lt;p&gt;Default shortcuts are for Mac, while shortcuts for Windows and Linux are mentioned below for each command &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#1-cmd-p-opens-the-palette-to-search-for-a-file"&gt;
  &lt;/a&gt;
  1. CMD + P: Opens the palette to search for a file
&lt;/h3&gt;

&lt;p&gt;(Windows/Linux: CTRL + P)&lt;/p&gt;

&lt;p&gt;Navigating through files is one of the most common options and this command can come in pretty handy. You can type the name of the file in the search box and select the file by clicking or by pressing enter on the search result to open the file&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cTCOXgfa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxo3d2am76propqw6vl4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cTCOXgfa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxo3d2am76propqw6vl4.gif" alt="CMD+P"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-cmd-shift-l-add-cursors-to-all-matching-selections"&gt;
  &lt;/a&gt;
  2. CMD + SHIFT + L: Add cursors to all matching selections
&lt;/h3&gt;

&lt;p&gt;(Windows/Linux: CTRL + SHIFT + L)&lt;/p&gt;

&lt;p&gt;One of my favorite features of VSCode is multi cursors. They allow you to replace text or append more text without copy-pasting or requiring you to change it one at a time. &lt;/p&gt;

&lt;p&gt;Using this command, you can add cursors to all matching selections in the document&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m9KDF5lp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvaju2yhi84vprpnsytl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m9KDF5lp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvaju2yhi84vprpnsytl.gif" alt="CMD+SHIFT+L"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-cmd-d-add-cursor-to-next-matching-selection"&gt;
  &lt;/a&gt;
  3. CMD + D: Add cursor to next matching selection
&lt;/h3&gt;

&lt;p&gt;(Windows/Linux: CTRL + D)&lt;/p&gt;

&lt;p&gt;Like the above command, this is also used to add cursors but with this, you can add the cursor to the next matching selection. This is especially helpful when you don't want to select all occurrences together&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--diGL3ajV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/btp319vo48whuryb21k9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--diGL3ajV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/btp319vo48whuryb21k9.gif" alt="CMD+D"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-cmd-u-undo-last-cursor-operation"&gt;
  &lt;/a&gt;
  4.  CMD + U: Undo last cursor operation
&lt;/h3&gt;

&lt;p&gt;(Windows/Linux: CTRL + U)&lt;/p&gt;

&lt;p&gt;If you need to undo cursor selection in a case where you selected more cursors than required or reset the cursor to a previous position, you can use this command to undo the last cursor action&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0OI5Zdp3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l57879ascz6drk6rhsrl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0OI5Zdp3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l57879ascz6drk6rhsrl.gif" alt="CMD+U"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-cmd-l-select-current-line"&gt;
  &lt;/a&gt;
  5. CMD + L: Select current line.
&lt;/h3&gt;

&lt;p&gt;(Windows/Linux: CTRL + L)&lt;/p&gt;

&lt;p&gt;Often we use mouse drag to select the text, but if we want to select entire lines, we can use this command &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0e5cfa_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9z09oof6f5oupytbnx18.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0e5cfa_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9z09oof6f5oupytbnx18.gif" alt="CMD+L"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-ctrl-g-go-to-a-specific-line"&gt;
  &lt;/a&gt;
  6. CTRL + G: Go to a specific line
&lt;/h3&gt;

&lt;p&gt;(Windows/Linux: CTRL + G)&lt;/p&gt;

&lt;p&gt;We can navigate to a specific line of the document by using this simple command and typing the line number. &lt;/p&gt;

&lt;p&gt;This is especially helpful in situations when error stack traces provide us the line number of the file and our file is large.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CFbXfmRo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/673j1pskcne0zc7sgp5g.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CFbXfmRo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/673j1pskcne0zc7sgp5g.gif" alt="CTRL+G"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-cmd-k-w-close-all-open-editor-tabs"&gt;
  &lt;/a&gt;
  7. CMD + K + W: Close all open editor tabs
&lt;/h3&gt;

&lt;p&gt;(Windows/Linux: CTRL + K + W)&lt;/p&gt;

&lt;p&gt;This command is useful when we want to clear all tabs. &lt;/p&gt;

&lt;p&gt;Often while debugging or developing, I have opened many tabs and when I want to change the context or start fresh, this command comes in very handy&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SbrLzFHk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mtdwxtdan9ik48jrkrk2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SbrLzFHk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mtdwxtdan9ik48jrkrk2.gif" alt="CMD+K+W"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-shift-option-a-toggle-block-comment"&gt;
  &lt;/a&gt;
  8. SHIFT + OPTION + A : Toggle  block comment
&lt;/h3&gt;

&lt;p&gt;(Windows: SHIFT + ALT + A, Linux: CTRL+SHIFT+A)&lt;/p&gt;

&lt;p&gt;This shortcut also allows us to add a new block comment or toggle existing ones.&lt;/p&gt;

&lt;p&gt;We enclose a piece of Javascript code with &lt;code&gt;/* */&lt;/code&gt;  to add a block comment. However, with this shortcut, we can add or remove a block comment for the selected code block or add new ones.  &lt;/p&gt;

&lt;p&gt;Line comments can be toggled with &lt;code&gt;CMD + / (Windows/Linux: CTRL + /)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--klhXakvg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1d0o7o7bd56dub5cf25s.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--klhXakvg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1d0o7o7bd56dub5cf25s.gif" alt="SHIFT+ALT+A"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-cmd-option-fold-code-block"&gt;
  &lt;/a&gt;
  9. CMD + OPTION + [ : Fold code block
&lt;/h3&gt;

&lt;p&gt;(Windows/Linux: CTRL + SHIFT + [ )&lt;/p&gt;

&lt;p&gt;This command is especially useful when we want to focus on a specific area of the code and hence ignore some code blocks. This folds the block closest to the cursor. &lt;/p&gt;

&lt;p&gt;You can unfold the code block with &lt;code&gt;CMD + OPTION + ] (Windows/Linux: CTRL + SHIFT + ] )&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wjlZCUyI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h7l30kgftqjwmhhyo735.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wjlZCUyI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h7l30kgftqjwmhhyo735.gif" alt="CMD+OPTION+Bracket"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-option-updown-move-line-up-or-down"&gt;
  &lt;/a&gt;
  10. OPTION + UP/DOWN : Move line up or down
&lt;/h3&gt;

&lt;p&gt;(Windows/Linux: ALT + UP/DOWN)&lt;/p&gt;

&lt;p&gt;When you want to move a piece of code, for example, a variable declaration either up or down, you cut and paste it to the appropriate place but if the readjustment is for a few lines you can use this command to move the current line/selection up or down&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RwcwivLM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g2he2n3sv0u2fp03kwx5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RwcwivLM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g2he2n3sv0u2fp03kwx5.gif" alt="ALT+UP"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-ctrl-raw-open-integrated-terminal"&gt;
  &lt;/a&gt;
  11. CTRL + ` : Open integrated terminal
&lt;/h3&gt;

&lt;p&gt;(Windows/Linux: CTRL+ `)&lt;/p&gt;

&lt;p&gt;One of the most amazing features of VSCode is that it supports an integrated terminal which you can use just like a normal terminal and to run code or perform other operations. This command helps you open the terminal when you need it&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uNZ_lWgy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iftjbtlqz8wec862078p.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uNZ_lWgy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iftjbtlqz8wec862078p.gif" alt="CTRL+BackTick"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12-cmd-split-editor-view"&gt;
  &lt;/a&gt;
  12. CMD + \ : Split editor view
&lt;/h3&gt;

&lt;p&gt;(Windows/Linux: CTRL+)&lt;/p&gt;

&lt;p&gt;You can split your editor view to open multiple files together. &lt;/p&gt;

&lt;p&gt;This is especially helpful when you want to refer to content from a file while coding in another.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BL26CsYe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ztr68zghaqmih1siaal.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BL26CsYe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ztr68zghaqmih1siaal.gif" alt="CMD+backslash"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13-shift-option-f-format-document"&gt;
  &lt;/a&gt;
  13. SHIFT + OPTION + F : Format document
&lt;/h3&gt;

&lt;p&gt;(Windows: SHIFT+ALT+F, Linux: CTRL+SHIFT+I)&lt;/p&gt;

&lt;p&gt;Often we have extensions enabled or settings configured to format documents on save but sometimes we like to control when we want to format the document. This is where this command comes in. &lt;/p&gt;

&lt;p&gt;It allows us to format the current document according to the configured settings. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v9_91UCU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dwmne9b9dlprk36l3suc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v9_91UCU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dwmne9b9dlprk36l3suc.gif" alt="SHIFT+ALT+F"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#14-option-shift-up-down-duplicate-selection-up-or-down"&gt;
  &lt;/a&gt;
  14. OPTION + SHIFT + UP / DOWN : Duplicate selection up or down
&lt;/h3&gt;

&lt;p&gt;(Windows/Linux: SHIFT+ALT+UP/DOWN)&lt;/p&gt;

&lt;p&gt;Using this command you can duplicate the selected code either above or below the current code.&lt;/p&gt;

&lt;p&gt;I love to use this when some functions are almost identical except for some small changes which I make after duplicating the previous implementation&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hnqjZZA4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3j692xc8232oqm77b32c.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hnqjZZA4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3j692xc8232oqm77b32c.gif" alt="SHIFT+ALT+UP"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#15-cmd-b-toggle-sidebar"&gt;
  &lt;/a&gt;
  15. CMD + B: Toggle Sidebar
&lt;/h3&gt;

&lt;p&gt;(Windows/Linux: CTRL+B)&lt;/p&gt;

&lt;p&gt;You can use this command to toggle the sidebar to make more space for your file view as and when needed. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DwGHsLv6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9iicj04v50q5joc2dx8o.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DwGHsLv6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9iicj04v50q5joc2dx8o.gif" alt="CMD+B"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#cherry-on-the-cake"&gt;
  &lt;/a&gt;
  Cherry on the cake
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;code .&lt;/code&gt; :  Open VSCode from the terminal&lt;/p&gt;

&lt;p&gt;Although this isn't a keyboard shortcut, it is extremely useful when you are working with the terminal and want to open a directory in VSCode&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uugoiilV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4n4wdhaex44s2j6qjop.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uugoiilV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4n4wdhaex44s2j6qjop.gif" alt="CMD+D"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;P.S. If this isn't configured yet, you can do so from VSCode by open command palette with &lt;code&gt;CMD+SHIFT+P&lt;/code&gt; and type in &lt;code&gt;shell&lt;/code&gt; and then select &lt;code&gt;Shell Command: Install 'code' command in PATH&lt;/code&gt; from the options.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;In this article, I covered some of the common, uncommon, and useful shortcuts. &lt;/p&gt;

&lt;p&gt;There are other shortcuts too which are useful like &lt;code&gt;CMD+SHIFT+F&lt;/code&gt; for search, &lt;code&gt;CMD+SHIFT+P&lt;/code&gt; for showing command palette, &lt;code&gt;CMD+/&lt;/code&gt; for toggling line comment, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you for reading&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you found this article helpful, do like and share this with your colleagues and friends. If you have any suggestions, please feel free to add them in the comments.&lt;/p&gt;

&lt;p&gt;I also share tips and tricks related to web development with Javascript and React on &lt;a href="https://twitter.com/ShubhamReacts"&gt;Twitter&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Come say hi 👋 . Let us connect 😁&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>beginners</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to create a Twitter Bot using Python and Tweepy (Quick and Easy)</title>
      <author>Fernando Groders</author>
      <pubDate>Tue, 24 Aug 2021 16:18:10 +0000</pubDate>
      <link>https://dev.to/fegroders/how-to-create-a-twitter-bot-using-python-and-tweepy-quick-and-easy-p1b</link>
      <guid>https://dev.to/fegroders/how-to-create-a-twitter-bot-using-python-and-tweepy-quick-and-easy-p1b</guid>
      <description>&lt;p&gt;Hey guys, today you are going to learn how to develop a &lt;a href="https://twitter.com/"&gt;Twitter&lt;/a&gt; bot using Python and a library called &lt;a href="https://www.tweepy.org"&gt;Tweepy&lt;/a&gt;.&lt;br&gt;
Founded in March 2006, Twitter is available in 40 languages and has about 335 million active users per month. Offering users a space for conversation and to share written content, photos and videos, Twitter is one of the most famous social networks. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#chapter-1"&gt;Getting your API keys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-2"&gt;Install Tweepy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-3"&gt;Authenticate your App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-4"&gt;Example Bot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-5"&gt;Inspiring Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#getting-your-api-keys-on-twitter-for-developers"&gt;
  &lt;/a&gt;
  Getting your API keys on Twitter for Developers &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;First of all, to connect your bot with your Twitter account, you need to use the Twitter API. To get your API keys you need a Twitter account. If you don't have one you can create &lt;a href="https://twitter.com/i/flow/signup"&gt;here&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DhNpe0w2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrqtyv2nc50dgazab7tr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DhNpe0w2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrqtyv2nc50dgazab7tr.png" alt="Create an Account"&gt;&lt;/a&gt;&lt;br&gt;
Now you will get the access to &lt;a href="https://developer.twitter.com/en"&gt;Twitter for Developers&lt;/a&gt;. After accessing it, click on Developer Portal. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xP8_U0kZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4i2s8klnq9l70pbj91rd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xP8_U0kZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4i2s8klnq9l70pbj91rd.png" alt="Click on Developer Portal"&gt;&lt;/a&gt;&lt;br&gt;
Complete your app’s registration by answering the form.  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qDpXNelF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wpz4qlm8dc3wv4uv34i2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qDpXNelF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wpz4qlm8dc3wv4uv34i2.png" alt="Create your app"&gt;&lt;/a&gt;&lt;br&gt;
After that, go to Projects &amp;amp; Apps -&amp;gt; Your App -&amp;gt; Edit app permissions &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_lMeW-nI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dnbq31vt6v6bo0sen3ic.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_lMeW-nI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dnbq31vt6v6bo0sen3ic.png" alt="Edit app permissions"&gt;&lt;/a&gt;&lt;br&gt;
Here you can find  your app permissions and the API keys. After generating the credentials, save them to later use in your code. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BZDmT3_z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jimbw02t965g39754e7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BZDmT3_z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jimbw02t965g39754e7.png" alt="Get the API keys"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#install-tweepy"&gt;
  &lt;/a&gt;
  Install Tweepy &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Before start coding, you need to install the library that we are going to use. The easiest way to install it is using &lt;a href="https://pypi.org/project/pip/"&gt;PIP&lt;/a&gt;. (If you don't have PIP installed, &lt;a href="https://pip.pypa.io/en/stable/installation/"&gt;Click here&lt;/a&gt;. In your CMD:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Install Tweepy&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;tweepy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#authenticate-your-app"&gt;
  &lt;/a&gt;
  Authenticate your App &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Now it's time to start the fun part, coding. First of all create a file called "twitter.py". Open it in your IDE and add this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Import Tweepy
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tweepy&lt;/span&gt;

&lt;span class="c1"&gt;# Change with your API keys
&lt;/span&gt;&lt;span class="n"&gt;API_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'API_KEY'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="n"&gt;API_KEY_SECRET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'API_KEY_SECRET'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="n"&gt;ACCESS_TOKEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'ACCESS_TOKEN'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ACCESS_SECRET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'ACCESS_SECRET'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Connect with the API
&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OAuthHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;API_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;API_KEY_SECRET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_access_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ACCESS_TOKEN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ACCESS_SECRET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;API&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wait_on_rate_limit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wait_on_rate_limit_notify&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Add your code 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok, now you have the basic to create a functional bot, but I will give you an example of a bot that answer “@user Hello World” when somebody mention him. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-bot"&gt;
  &lt;/a&gt;
  Example Bot &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;After doing the previous steps, you will need a function to save the last ID answered by the bot. Create a file called "lastId.txt" and put "1" inside without the quotation marks. Then add this code in your twitter.py file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fileName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'lastId.txt'&lt;/span&gt;
&lt;span class="c1"&gt;# Function to save the last id answered on ./lastId.txt
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;saveLastId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lastId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="n"&gt;f_write&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f_write&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lastId&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;f_write&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have a function to save the ID, you need one to read what your bot saved or it will answer always the same tweet&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Function to read the last id that is saved on ./lastId.txt
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;readLastId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="n"&gt;f_read&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;ultimo_id_lido&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f_read&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;f_read&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ultimo_id_lido&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, we will create a function to answer the tweets&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Function to answer a mention
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'BOT WORKING...'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;lastId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;readLastId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Get the last ID
&lt;/span&gt;    &lt;span class="n"&gt;mentions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mentions_timeline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lastId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tweet_mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'extended'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Get all mentions since the last ID
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;mention&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mentions&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;# Reads the mentions in reverse order
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;'@youruser'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;mention&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;full_text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="c1"&gt;# Verifies if your bot was mentioned 
&lt;/span&gt;            &lt;span class="n"&gt;lastId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mention&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mention&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;' - '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;mention&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;full_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Prints the mention
&lt;/span&gt;            &lt;span class="n"&gt;saveLastId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lastId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#Save the last id 
&lt;/span&gt;            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Answering tweet'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Hello @{}!'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mention&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;screen_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Message to be sent
&lt;/span&gt;            &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in_reply_to_status_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mention&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Reply to the mention
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And to finish the code, we will add a loop to make the bot work every 30 seconds. As we are using "time", then we need to add the import on the top of the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the last line of the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#Loop that runs the bot every 30 seconds
&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So the final file would be something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Import Tweepy
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tweepy&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="c1"&gt;# Change with your API keys
&lt;/span&gt;&lt;span class="n"&gt;API_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'API_KEY'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="n"&gt;API_KEY_SECRET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'API_KEY_SECRET'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="n"&gt;ACCESS_TOKEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'ACCESS_TOKEN'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ACCESS_SECRET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'ACCESS_SECRET'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Connect with the API
&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OAuthHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;API_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;API_KEY_SECRET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_access_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ACCESS_TOKEN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ACCESS_SECRET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;API&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wait_on_rate_limit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wait_on_rate_limit_notify&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;fileName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'lastId.txt'&lt;/span&gt;
&lt;span class="c1"&gt;# Function to save the last id answered on ./lastId.txt
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;saveLastId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lastId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="n"&gt;f_write&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f_write&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lastId&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;f_write&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;

&lt;span class="c1"&gt;# Function to read the last id that is saved on ./lastId.txt
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;readLastId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="n"&gt;f_read&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;ultimo_id_lido&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f_read&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;f_read&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ultimo_id_lido&lt;/span&gt;

&lt;span class="c1"&gt;# Function to answer a mention
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'BOT WORKING...'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;lastId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;readLastId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Get the last ID
&lt;/span&gt;    &lt;span class="n"&gt;mentions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mentions_timeline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lastId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tweet_mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'extended'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Get all mentions since the last ID
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;mention&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mentions&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;# Reads the mentions in reverse order
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;'@youruser'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;mention&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;full_text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="c1"&gt;# Verifies if your bot was mentioned 
&lt;/span&gt;            &lt;span class="n"&gt;lastId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mention&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mention&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;' - '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;mention&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;full_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Prints the mention
&lt;/span&gt;            &lt;span class="n"&gt;saveLastId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lastId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#Save the last id 
&lt;/span&gt;            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Answering tweet'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Hello @{}!'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mention&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;screen_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Message to be sent
&lt;/span&gt;            &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in_reply_to_status_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mention&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Reply to the mention
&lt;/span&gt;
&lt;span class="c1"&gt;#Loop that runs the bot every 30 seconds
&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you just need to run the file “Twitter.py” and your bot will start working. If you want you can create a .exe and make it work in second plan. But this will become another tutorial.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inspiring-examples"&gt;
  &lt;/a&gt;
  Inspiring Examples &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Of course this is a very simple example of a bot, but you can create very advanced bots using Tweepy. If you want to read all the possibilities, you can read Tweepy's documentation &lt;a href="https://docs.tweepy.org/en/stable/index.html"&gt;here&lt;/a&gt;. Now it's time to be creative and create bots. If you are not a creative person here are some examples of Twitter bots to inspire you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/DizUmFilme"&gt;Dizumfilme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/bot_philosopher"&gt;Philosopher BOT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/DownloaderBot"&gt;Video Downloader Bot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/cleverbot"&gt;CleverBot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/cmsn_ART"&gt;Art Commission Bot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you are ready to create AWESOME Twitter bots. The next step is upload your bot and run it on Cloud, but this is a topic that will become another article.&lt;br&gt;
If you have any doubts, you can contact me here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://fegroders.github.io"&gt;Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.linkedin.com/in/fernandogroders"&gt;LinkedIn&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://instagram.com/fegroders"&gt;Instagram&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading, if you like it and learned something, like the post, comment and share with others developers! :D&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>twitter</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Terraform Associate Certification: Conditional Expression &amp; Local values</title>
      <author>Daniel Huerta</author>
      <pubDate>Tue, 24 Aug 2021 16:02:09 +0000</pubDate>
      <link>https://dev.to/danihuerta/terraform-associate-certification-conditional-expression-local-values-3e9p</link>
      <guid>https://dev.to/danihuerta/terraform-associate-certification-conditional-expression-local-values-3e9p</guid>
      <description>&lt;h2&gt;
  &lt;a href="#conditional-expression"&gt;
  &lt;/a&gt;
  Conditional Expression
&lt;/h2&gt;

&lt;p&gt;If you have programmed in other languages such as C or Javascript you may know the &lt;em&gt;ternary operator&lt;/em&gt;. Well, in Terraform you can use it as well and it is nothing but a conditional expression that uses the value of a bool expression to select one of two values.&lt;/p&gt;

&lt;p&gt;The syntax of it is as follows:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;condition ? True_value : False_value&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If condition is true, then the returned value will be True_value, otherwise will be False_value.&lt;/p&gt;

&lt;p&gt;Let's see an example of this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ro_Zx8uy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wfsoqyoxnyt1td4mao2i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ro_Zx8uy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wfsoqyoxnyt1td4mao2i.png" alt="Screen Shot 2021-08-24 at 10.47.55"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this case, the amount of aws_instances will be created according to the value of the bool variable named &lt;em&gt;istest&lt;/em&gt;. As you can see in the image, this value is set to false so only one &lt;em&gt;aws_instance.prod will be created&lt;/em&gt; 😉.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#local-values"&gt;
  &lt;/a&gt;
  Local Values
&lt;/h2&gt;

&lt;p&gt;A local value assigns a name to an expression, allowing it to be used multiple times within a module without repeating it.&lt;br&gt;
Let's see an example to understand this better, in the next image you will see that I created a set of tags within a &lt;strong&gt;locals block&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--91Ht2irX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gqiwjp9gw6zkwvulxibj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--91Ht2irX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gqiwjp9gw6zkwvulxibj.png" alt="Screen Shot 2021-08-24 at 10.57.19"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm using these tags inside two different resource blocks but I'm not typing every tag on it, that's the advantage of the local values. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#local-values-support-for-expression"&gt;
  &lt;/a&gt;
  Local values support for expression
&lt;/h3&gt;

&lt;p&gt;Local values can be used for multiple different use-cases like having a conditional expression.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--geAWgf1E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eipg07kk3ipwy8f5t635.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--geAWgf1E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eipg07kk3ipwy8f5t635.png" alt="Screen Shot 2021-08-24 at 10.58.47"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Use local values only in moderation, in situations where a single value or result is used in many places and that value is likely to be changed in future&lt;/em&gt;.&lt;/p&gt;

</description>
      <category>terraform</category>
      <category>cloud</category>
      <category>aws</category>
      <category>devops</category>
    </item>
    <item>
      <title>Laravel for Beginners : a Quick Guide - 8</title>
      <author>Kartik Bhat</author>
      <pubDate>Tue, 24 Aug 2021 15:55:42 +0000</pubDate>
      <link>https://dev.to/kartikbhat/laravel-for-beginners-a-quick-guide-8-2na1</link>
      <guid>https://dev.to/kartikbhat/laravel-for-beginners-a-quick-guide-8-2na1</guid>
      <description>&lt;h3&gt;
  &lt;a href="#laravel-routes"&gt;
  &lt;/a&gt;
  Laravel Routes
&lt;/h3&gt;

&lt;p&gt;I hope you understood the concept of adding data from user interface and receiving it response back to user interface,&lt;/p&gt;

&lt;p&gt;Let's revisit concept of 'routes'...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;what is 'route' ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;simply, route is a key word that connects user interface to the backend - Controller;  :)&lt;/p&gt;

&lt;p&gt;Ok in my previous articles you saw these kinds of routes ;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::get('addData', [DataController::class,'addData']);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;right ?&lt;/p&gt;

&lt;p&gt;(revisit web.php file and verify it once)&lt;/p&gt;

&lt;p&gt;this will connect to addData() function present under DataController Class, correct ?&lt;/p&gt;

&lt;p&gt;Hope you observed that you are using &lt;strong&gt;Route&lt;/strong&gt; Object to define new route ;&lt;/p&gt;

&lt;p&gt;this &lt;strong&gt;Route&lt;/strong&gt; object is actually defined under this class (you can notice this at the top section of the file align with &lt;em&gt;use&lt;/em&gt; keyword)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Illuminate\Support\Facades\Route;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then after that you observe key word &lt;strong&gt;get&lt;/strong&gt;; it is nothing but HTTP method; yes exactly,&lt;/p&gt;

&lt;p&gt;it will catch a type of request using a HTTP method that you used while calling that route,&lt;/p&gt;

&lt;p&gt;HTTP method is a way request rises to the application's backend ;&lt;/p&gt;

&lt;p&gt;What are different types of HTTP methods ?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GET&lt;/li&gt;
&lt;li&gt;POST&lt;/li&gt;
&lt;li&gt;PUT&lt;/li&gt;
&lt;li&gt;PATCH&lt;/li&gt;
&lt;li&gt;DELETE &lt;/li&gt;
&lt;li&gt;OPTIONS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;for a time being lets concentrate on GET and POST methods only, and these are the methods we frequently use in our laravel applications.&lt;/p&gt;

&lt;p&gt;Laravel support all these kinds of methods; like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::get('addData', [DataController::class,'addData']);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::post('addData', [DataController::class,'addData']);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::put('addData', [DataController::class,'addData']);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::patch('addData', [DataController::class,'addData']);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::delete('addData', [DataController::class,'addData']);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::options('addData', [DataController::class,'addData']);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;along with above mentioned HTTP method routes laravel also provides another route type, it is &lt;strong&gt;any&lt;/strong&gt; , it catches any kind of HTTP method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::any('addData', [DataController::class,'addData']);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#mistyped-routesrequests"&gt;
  &lt;/a&gt;
  Mistyped routes/requests
&lt;/h3&gt;

&lt;p&gt;laravel matches incoming requests HTTP method first, then it finds suitable route in web.php file, if it found then control moves to controller's method; else you can observe 404 page&lt;/p&gt;

&lt;p&gt;let try this,&lt;br&gt;
You know we have a route called,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::get('addData', [DataController::class,'addData']);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;hit this route from browser; (hope you are running laravel app)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="http://127.0.0.1:8000/addData"&gt;http://127.0.0.1:8000/addData&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;you can observe this &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x0LH9XG6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bp0o6g7hjc8m4evwrobd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x0LH9XG6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bp0o6g7hjc8m4evwrobd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;right ? &lt;/p&gt;

&lt;p&gt;now just alter keyword &lt;strong&gt;addData&lt;/strong&gt; to &lt;strong&gt;addData--1&lt;/strong&gt; present in the url; Ok&lt;/p&gt;

&lt;p&gt;now hit that url again;&lt;br&gt;
(Do verify that we don't have any route defined called &lt;strong&gt;addData--1&lt;/strong&gt; in our web.php file)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="http://127.0.0.1:8000/addData--1"&gt;http://127.0.0.1:8000/addData--1&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;since we don't have any such route; laravel manages to load 404 page;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XujLWspo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjdmwqbro2z5hlww7mv1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XujLWspo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjdmwqbro2z5hlww7mv1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, no need to worry about mistyped routes/requests from browser, laravel manages it by itself, seems interesting right ? :)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#routes-and-form-submit"&gt;
  &lt;/a&gt;
  Routes and Form submit
&lt;/h3&gt;

&lt;p&gt;whenever the form submit happens, some that will be passed to the backend from our user interface(say frontend), right ?&lt;/p&gt;

&lt;p&gt;Open &lt;strong&gt;addData.blade.php&lt;/strong&gt; file located under resources-&amp;gt;views folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;h3&amp;gt;Add Data&amp;lt;/h3&amp;gt;
            &amp;lt;form method="GET" action="{{ url('saveFormData') }}"&amp;gt;
                &amp;lt;label&amp;gt;Name&amp;lt;/label&amp;gt;
                &amp;lt;input type="text" name="name" /&amp;gt;
                &amp;lt;label&amp;gt;Age&amp;lt;/label&amp;gt;
                &amp;lt;input type="number" name="age" /&amp;gt;
                &amp;lt;button type="submit"&amp;gt;Save&amp;lt;/button&amp;gt;
            &amp;lt;/form&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you can observe &lt;strong&gt;method&lt;/strong&gt; and &lt;strong&gt;action&lt;/strong&gt; mentioned with form element&lt;/p&gt;

&lt;p&gt;method - GET&lt;br&gt;
action - route saveFormData&lt;/p&gt;

&lt;p&gt;here form is submitting data to the route &lt;strong&gt;saveFormData&lt;/strong&gt; via GET http method; you know it I suppose :)&lt;/p&gt;

&lt;p&gt;Now open &lt;strong&gt;DataController&lt;/strong&gt; class and go to the function returned by 'saveFormData' route; it is &lt;strong&gt;saveForm()&lt;/strong&gt;, add dd() of $request after entering the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function saveForm(Request $request) {
        dd($request);
        $data = [
            'name' =&amp;gt; $request-&amp;gt;name,
            'age' =&amp;gt; $request-&amp;gt;age
        ];
        $insertData = Data::create($data);

        if(isset($insertData['id'])) {
            $message = "Success";
        } else {
            $message = "Failed";
        }

        $response = [
            'message'=&amp;gt;$message
        ];

        return view('response',$response);
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok, then hit the route 'addData' from your browser;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#http1270018000adddata"&gt;
  &lt;/a&gt;
  &lt;a href="http://127.0.0.1:8000/addData"&gt;http://127.0.0.1:8000/addData&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;then fill the form and submit;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X6wFA0m6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvzvn2fvfrxz5t6m7c33.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X6wFA0m6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvzvn2fvfrxz5t6m7c33.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see this window right ?&lt;br&gt;
Now,, just observe URL bar;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sji6YK6O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78ypv8rz7gdzhbxql658.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sji6YK6O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78ypv8rz7gdzhbxql658.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;you can see those form input data; those are passing as a url parameters to the backend(Controller); right ?&lt;/p&gt;

&lt;p&gt;now, lets change form method from &lt;strong&gt;GET&lt;/strong&gt; to &lt;strong&gt;POST&lt;/strong&gt; present in the file addData.blade.php&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;form method="POST" action="{{ url('saveFormData') }}"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, hit the &lt;strong&gt;addData&lt;/strong&gt; route and fill the form ; then submit.&lt;/p&gt;

&lt;p&gt;What you are seeing ?&lt;/p&gt;

&lt;p&gt;this error right ?&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c1Ykoz3U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdpd34x82pftvydoscak.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c1Ykoz3U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdpd34x82pftvydoscak.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Why ?&lt;/p&gt;

&lt;p&gt;Observe web.php file; there is no route with a method post having keyword 'saveFormData' ; Observed ?&lt;/p&gt;

&lt;p&gt;what you got ?&lt;br&gt;
route catches an http method that request is coming from; through form you are sending data through POST method for 'saveFormData'  route; it actually doesn't exist;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::get('saveFormData', [DataController::class,'saveForm']);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;it is a &lt;strong&gt;get&lt;/strong&gt; route with a key word 'saveFormData' , it doesn't catches request with POST method; then how to catch it ?&lt;/p&gt;

&lt;p&gt;Simple, create a similar route with &lt;strong&gt;post&lt;/strong&gt; method; like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::post('saveFormData', [DataController::class,'saveForm']);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;that too returning same controller's same method; no issues.&lt;/p&gt;

&lt;p&gt;now again hit the url : ####&lt;a href="http://127.0.0.1:8000/addData####"&gt;http://127.0.0.1:8000/addData####&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and fill the form and submit again;&lt;/p&gt;

&lt;p&gt;what you are seeing now ?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SAn-nJEm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sq4fh54gsrxm64m9quv9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SAn-nJEm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sq4fh54gsrxm64m9quv9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;you are seeing dd() response of $request; right ?&lt;/p&gt;

&lt;p&gt;Observe URL bar now; there is no url parameters exist but still Controller is receiving form data; right ?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xYNTKKsF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1cjlfmbzj13ihfuzf50o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xYNTKKsF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1cjlfmbzj13ihfuzf50o.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is what the main difference between GET and POST http methods :)&lt;/p&gt;

&lt;p&gt;POST method doesn't shows form submitted data as an URL parameters where as GET method clearly shows;&lt;/p&gt;

&lt;p&gt;There is a limitation of data length that can be passed through GET method, where POST method hasn't any such;&lt;/p&gt;

&lt;p&gt;Even though both the method has there own features; primarily we can prefer form data should be submitted through POST method, a secure approach we believe;&lt;/p&gt;

&lt;p&gt;While sending FORM data through POST we need add another constraint to the form i.e CSRF token (Cross-Site Request Forgery)&lt;br&gt;
is a way our application identifies that request is coming / data is submitting from known/authenticated source, Laravel automatically generates this CSRF token and just we need to add it within our form element&lt;/p&gt;

&lt;p&gt;within form element of the addData blade file we just need to mention&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@csrf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;h3&amp;gt;Add Data&amp;lt;/h3&amp;gt;
            &amp;lt;form method="POST" action="{{ url('saveFormData') }}"&amp;gt;
                @csrf
                &amp;lt;label&amp;gt;Name&amp;lt;/label&amp;gt;
                &amp;lt;input type="text" name="name" /&amp;gt;
                &amp;lt;label&amp;gt;Age&amp;lt;/label&amp;gt;
                &amp;lt;input type="number" name="age" /&amp;gt;
                &amp;lt;button type="submit"&amp;gt;Save&amp;lt;/button&amp;gt;
            &amp;lt;/form&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;it will be automatically verified by laravel while receiving the request at backend;&lt;/p&gt;

&lt;p&gt;this is all about brief explanation on Laravel Routes; Hope you understood about it;&lt;/p&gt;

&lt;p&gt;Bye ;)&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>mvc</category>
    </item>
    <item>
      <title>How To Create Login Page With HTML And CSS Only</title>
      <author>frontendtrick</author>
      <pubDate>Tue, 24 Aug 2021 15:30:06 +0000</pubDate>
      <link>https://dev.to/frontendtrick/how-to-create-login-page-with-html-and-css-only-5d2i</link>
      <guid>https://dev.to/frontendtrick/how-to-create-login-page-with-html-and-css-only-5d2i</guid>
      <description>&lt;p&gt;Html Code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
  &amp;lt;head&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div class="container"&amp;gt;
      &amp;lt;form action="#"&amp;gt;
        &amp;lt;div class="title"&amp;gt;Login&amp;lt;/div&amp;gt;
        &amp;lt;div class="input-box underline"&amp;gt;
          &amp;lt;input type="text" placeholder="Enter Your Email" required&amp;gt;
          &amp;lt;div class="underline"&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="input-box"&amp;gt;
          &amp;lt;input type="password" placeholder="Enter Your Password" required&amp;gt;
          &amp;lt;div class="underline"&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="input-box button"&amp;gt;
          &amp;lt;input type="submit" name="" value="Login"&amp;gt;&amp;lt;br&amp;gt;
          
        &amp;lt;/div&amp;gt;
      &amp;lt;/form&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;CSS Code:&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;@import url('https://fonts.googleapis.com/css2?family=Baloo+Bhai+2:wght@500&amp;amp;display=swap');
*{
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'Baloo Bhai 2',sans-serif;
  background: #FAF7FF;
}
html, body{
  display: grid;
  height: 100vh;
  width: 100%;
  place-items: center;
  background: linear-gradient(to right, #540099 0%,100%);
}
::selection{
  background: #ff80bf;

}
.container{
  background: #FAF7FF;
  max-width: 350px;
  width: 100%;
  padding: 25px 30px;
  border-radius: 10px;
  box-shadow: 10px 20px 20px rgb(0 0 0 / 15%);
}
.container form .title{
  font-size: 30px;
  font-weight: 600;
  margin: 20px 0 10px 0;
  position: relative;
}
.container form .title:before{
  content: '';
  position: absolute;
  height: 4px;
  width: 33px;
  left: 0px;
  bottom: 3px;
  border-radius: 5px;
  background: linear-gradient(to right, #290099 0%, #ae00ff 100%);
}
.container form .input-box{
  width: 100%;
  height: 45px;
  margin-top: 25px;
  position: relative;
}
.container form .input-box input{
  width: 100%;
  height: 100%;
  outline: none;
  font-size: 18px;
  border: none;
}
.container form .underline::before{
  content: '';
  position: absolute;
  height: 2px;
  width: 100%;
  background: #ccc;
  left: 0;
  bottom: 0;
}

.container form .button{
  margin: 40px 0 20px 0;
}
.container .input-box input[type="submit"]{
  background: linear-gradient(to right, #290099 0%, #ae00ff 100%);
  font-size: 17px;
  color: #fff;
  border-radius: 5px;
  cursor: pointer;
  transition: all 0.3s ease;
}
.container .input-box input[type="submit"]:hover{
  
  background-color: rgb(224, 220, 245);
}
.container .option{
  font-size: 14px;
  text-align: center;
}
&lt;/code&gt;&lt;/pre&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Forem PR Walkthroughs - MLH Fellowship Demos Day</title>
      <author>Khadija Sidhpuri</author>
      <pubDate>Tue, 24 Aug 2021 15:28:36 +0000</pubDate>
      <link>https://dev.to/squarebat/forem-pr-walkthroughs-mlh-fellowship-demos-day-fep</link>
      <guid>https://dev.to/squarebat/forem-pr-walkthroughs-mlh-fellowship-demos-day-fep</guid>
      <description>&lt;p&gt;&lt;em&gt;Cover image by &lt;a href="https://unsplash.com/@gabrielvdz?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText%22%3E"&gt;Gabriel Valdez&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/roller-coaster?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText%22%3E"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The end is near! One week remains of the 12 week long MLH Fellowship - the best learning experience of my life so far. Over the last 3 months, I had the amazing opportunity to contribute to &lt;a href="https://www.forem.com"&gt;Forem&lt;/a&gt; - the very platform that DEV is built on. I thought about sharing my experience and work,  and what better platform to do it on than the one I contributed to. Here I present to you my beautiful Forem Adventures!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-first-pr"&gt;
  &lt;/a&gt;
  My First PR
&lt;/h2&gt;

&lt;p&gt;What does one do when they just begin contributing to a software? They look for good first issues of course! This issue seemed like it was the right fit!&lt;/p&gt;


&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/13935"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Strikethrough markdown within a link is not rendered in live comments (but works fine elsewhere)
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#13935&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/andygeorge"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hsW_nydi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/10601857%3Fv%3D4" alt="andygeorge avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/andygeorge"&gt;andygeorge&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/13935"&gt;&lt;time&gt;Jun 07, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      

&lt;p&gt;&lt;strong&gt;Describe the bug&lt;/strong&gt;
While using &lt;a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Here-Cheatsheet#emphasis"&gt;Strikethrough markdown&lt;/a&gt; within &lt;a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Here-Cheatsheet#links"&gt;link text&lt;/a&gt;, I discovered the strikethrough is not rendered &lt;strong&gt;in live comment views only&lt;/strong&gt;; this appears to work elsewhere (comment previews, posts, and post previews).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To Reproduce&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Add strikethrough text within a link to a comment:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[~~strikethrough~~](https://www.example.com)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This looks fine in posts, post previews, and comment previews:
&lt;a href="https://user-images.githubusercontent.com/10601857/121033652-fe808700-c771-11eb-9471-1acd53275530.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ShpK4oDH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/10601857/121033652-fe808700-c771-11eb-9471-1acd53275530.png" alt="image"&gt;&lt;/a&gt;
&lt;a href="https://user-images.githubusercontent.com/10601857/121033703-08a28580-c772-11eb-9a5f-bbd6272c9f6a.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ztditMOW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/10601857/121033703-08a28580-c772-11eb-9a5f-bbd6272c9f6a.png" alt="image"&gt;&lt;/a&gt;
&lt;a href="https://user-images.githubusercontent.com/10601857/121033744-10622a00-c772-11eb-9205-50bf2a4f5608.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BvotVERY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/10601857/121033744-10622a00-c772-11eb-9205-50bf2a4f5608.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;...but not in a submitted comment:
&lt;a href="https://user-images.githubusercontent.com/10601857/121033804-1b1cbf00-c772-11eb-95c8-f66c94ae0eef.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gXHa-j7Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/10601857/121033804-1b1cbf00-c772-11eb-95c8-f66c94ae0eef.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Strikethrough markdown within link text is rendered correctly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Desktop (please complete the following information):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS, version: Fedora Core 33&lt;/li&gt;
&lt;li&gt;Browser, version: Firefox 88.0.1 and Chromium 91.0.4472.77&lt;/li&gt;
&lt;/ul&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/13935"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
 

&lt;p&gt;This issue reports a bug in how the markdown is processed in the comments, the strikethrough text wouldn't render correctly as per markdown rules - &lt;code&gt;~~text~~&lt;/code&gt; within a link. I looked into the code base to find where the problem was. This was really challenging, I had underestimated how huge Forem is and took time understanding the code base. That is why you must always pick up an easy issue as your first one, it's more about understanding the code base than writing code. This issue helped me a lot to explore a lot of corners and understand the Forem architecture. I eventually found out that a method that shortened URLs in the comments was causing html tags to be stripped out. I fixed that and raised &lt;a href="https://github.com/forem/forem/pull/14103"&gt;PR 14103&lt;/a&gt;, my first PR to a huge repo, and my first bug fix.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Except the bug wasn't solved&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Even after the PR got merged, it kept bugging me that my fix wouldn't resolve all edge cases, I tried it out in the production and indeed, I found more bugs. Which leads me to - &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#my-first-issue"&gt;
  &lt;/a&gt;
  My First Issue
&lt;/h2&gt;

&lt;p&gt;I raised an issue relating to the bug I found while working on the above PR. I found out that only the bug relating to strikethrough text was solved, but the comments were stripping out all sorts of text formatting, which leaves the user just plain text at disposal ;-; .&lt;/p&gt;


&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/14114"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        shorten_urls causing link text in comments to not render correctly
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#14114&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/squarebat"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wo8QZm3M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/59063821%3Fv%3D4" alt="squarebat avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/squarebat"&gt;squarebat&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/14114"&gt;&lt;time&gt;Jul 01, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      

&lt;p&gt;&lt;strong&gt;Describe the bug&lt;/strong&gt;
In issue #13935, &lt;a class="mentioned-user" href="https://dev.to/andygeorge"&gt;@andygeorge&lt;/a&gt;
 reported that strikethrough text within links was rendered as normal text in live comments. I found out that the method &lt;code&gt;shorten_urls&lt;/code&gt; in &lt;code&gt;models/comment.rb&lt;/code&gt; was causing the issue and raised PR #14103 fixing it. However, I later discovered that no text formatting (bold, italics etc) is rendered within &lt;a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Here-Cheatsheet#links"&gt;link text&lt;/a&gt; in comments.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To Reproduce&lt;/strong&gt;
Add text formatting within link text in comments:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[__bold-text__](https://www.example.com)
[~~strikethrough~~](https://www.example.com)
[_italic_](https://www.example.com)
[___bold-italic___](https://www.example.com)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This looks fine in posts and comment previews:
&lt;a href="https://user-images.githubusercontent.com/59063821/124055478-986de380-da41-11eb-868c-f2fad3f0bba5.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IOi7A48U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/59063821/124055478-986de380-da41-11eb-868c-f2fad3f0bba5.png" alt="preview"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But isn't rendered in comments (Only strikethrough works because #14103 got merged):
&lt;a href="https://user-images.githubusercontent.com/59063821/124055512-ad4a7700-da41-11eb-89b7-f4fe5d4c9cc3.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EKXnlvP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/59063821/124055512-ad4a7700-da41-11eb-89b7-f4fe5d4c9cc3.png" alt="live-comment"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;
Text within links should be formatted correctly in comments.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Desktop (please complete the following information):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS, version: POP_OS! 20.10&lt;/li&gt;
&lt;li&gt;Browser, version: Firefox&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Additional context&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The bug occurs because &lt;code&gt;shorten_urls&lt;/code&gt; in &lt;code&gt;models/comment.rb&lt;/code&gt; strips out all html tags within anchor tag in the html text processed from markdown. The method is used to truncate URLs longer than ~37 characters.&lt;/p&gt;
&lt;p&gt;In my opinion, the best way to fix this issue is to limit &lt;code&gt;shorten_urls&lt;/code&gt; to only truncate URLs and not custom link text. Doing so will also prevent any useful text from getting truncated.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;potential bug&lt;/strong&gt;: comment preview looks different from the final comment, because URLs aren't shortened in previews. This could be raised as another issue.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/14114"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
 

&lt;p&gt;Since I had already worked on it earlier and had an idea how to solve this, I worked on the fix for it and raised &lt;a href="https://github.com/forem/forem/pull/14240"&gt;PR 14240&lt;/a&gt; . I tested it out, maintainers reviewed it, it got pushed to prod and I called it a day. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Except it wasn't solved yet&lt;/strong&gt;, which leads me to - &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-bug-i-pushed-to-prod"&gt;
  &lt;/a&gt;
  The bug I pushed to Prod
&lt;/h2&gt;

&lt;p&gt;Yeah, this is embarrassing. Even though I thought I had thoroughly tested my code, both manually and automatically but I still had to try it out in Production, on DEV.to. I happened to come across a bug, which was produced due to the changes I made. Fortunately, I noticed it soon enough, and had the PR reverted - &lt;/p&gt;


&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/pull/14240#issuecomment-881130782"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Comment for
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#14240&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/squarebat"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--fI8VGo8f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/59063821%3Fu%3D56d3e4e2301848ec216d8b8aedd570c90737d573%26v%3D4" alt="squarebat avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/squarebat"&gt;squarebat&lt;/a&gt;
        &lt;/strong&gt; commented on &lt;a href="https://github.com/forem/forem/pull/14240#issuecomment-881130782"&gt;&lt;time&gt;Jul 16, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/jgaskins"&gt;@jgaskins&lt;/a&gt;
 I was worried about the unexpected bugs, and it appears that a bug has occurred :( . Images in the comments don't get rendered as images but as plain links.
E.g
&lt;code&gt;![Alt-text](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q2czbn344eli58gs3ln6.png)&lt;/code&gt; gets rendered as -
&lt;a href="https://user-images.githubusercontent.com/59063821/125881913-cf72f4c3-4466-43ba-a9cd-1840e281bca8.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1iPmFGBJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/59063821/125881913-cf72f4c3-4466-43ba-a9cd-1840e281bca8.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Images were working fine when I tested it on local, but that would be because localhost urls are structured differently. I am extremely sorry about this, should've tested it thoroughly. I'll fix it as soon as possible. In the mean time, the changes should best be reverted.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; I have fixed the bug. Shall I revert the changes and create a new PR? Again, apologies for the inconvenience 😞&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/pull/14240#issuecomment-881130782"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
 

&lt;p&gt;Eventually, I had this fixed with &lt;a href="https://github.com/forem/forem/pull/14262"&gt;PR 14262&lt;/a&gt;. This time I was sure to test it thoroughly and finally closed the issue.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you were to comment anywhere on DEV now, you can use all sorts of formatting within links and it'll work its magic!&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#my-second-bug-fix"&gt;
  &lt;/a&gt;
  My Second Bug Fix
&lt;/h2&gt;

&lt;p&gt;Oh boy, this was a tough one. And my favorite one to work on. I present to you the RSS Feed Dilemma -&lt;/p&gt;


&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/13185"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Dashboard not updated correctly if two people have the same RSS feed 
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#13185&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/ftisiot"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--h94b23PM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/11272743%3Fv%3D4" alt="ftisiot avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/ftisiot"&gt;ftisiot&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/13185"&gt;&lt;time&gt;Mar 30, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;If two people share the same &lt;code&gt;RSS Feed URL&lt;/code&gt; in &lt;code&gt;Settings&lt;/code&gt; -&amp;gt; &lt;code&gt;Publishing to DEV Community from RSS&lt;/code&gt;
Then new post will appear randomly only in 1 feed.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Have two separated dev.to accounts&lt;/li&gt;
&lt;li&gt;Go to &lt;code&gt;Settings&lt;/code&gt; -&amp;gt; &lt;code&gt;Publishing to DEV Community from RSS&lt;/code&gt; and setup the same &lt;code&gt;RSS Feed URL&lt;/code&gt; in both&lt;/li&gt;
&lt;li&gt;Create a new RSS entry&lt;/li&gt;
&lt;li&gt;The entry is show in one of the two dev.to account's (say account A) Dashboard and not in the other (account B)&lt;/li&gt;
&lt;li&gt;If the account who doesn't see the RSS feed (account B) tries creating a new post mentioning the new entry's canonical_url it gets a message
&lt;code&gt;canonical_url: has already been taken&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;If the account who does see the RSS entry (account A) deletes the draft, then Account B can publish successfully the content&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Both dev.to accounts should see the new RSS entry in the dashboard&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Screenshots&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Desktop (please complete the following information):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS, version: MacOS Big Sur 11.2.3&lt;/li&gt;
&lt;li&gt;Browser, version: tried with Safari, Chrome and Firefox&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Smartphone (please complete the following information):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Device:&lt;/li&gt;
&lt;li&gt;OS, version:&lt;/li&gt;
&lt;li&gt;Browser, version:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Additional context&lt;/strong&gt;&lt;/p&gt;


    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/13185"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;If you are unaware about RSS Feeds - they are beautiful xml files that summarize your webpages which lets you import your data to other webapps. They are a simple solution to achieve cross app communication. &lt;/p&gt;

&lt;p&gt;Forem uses this feature to allow users to import their blogs from other blogging websites like medium, and other forem instances as well. This works by setting you Source RSS Feed URL in Settings -&amp;gt; Extensions. It works fine when only one user is accessing a certain feed, but since RSS feeds are public, it is entirely possible for other users on a Forem instance to import blogs from the same feed as well. In this case, an article from the feed would get imported only to one of those users randomly, because of how Forem's post settings work. It made sense too, since multiple imports will lead to duplication. But there was no way to verify the true owner of the RSS feed, and no apparent way for the owner to know why some articles won't get imported. A fix was required, or just a way to let the users know what was going on. However, it was hard to decide what to do, whilst preserving content uniqueness.&lt;/p&gt;

&lt;p&gt;I explained this issue to the mainatainers, and together we decided that the best approach would be to allow duplicate draft posts, but only one of them be allowed to publish. If the  post has already been published, another user who tries to do the same will get a useful error message and be suggested to contact the core team. Content uniqueness preserved, users not ghosted anymore, everyone happy. I closed this issue with &lt;a href="https://github.com/forem/forem/pull/14160"&gt;PR 14160&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To learn more about the dilemma - &lt;/p&gt;


&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/13185#issuecomment-872681158"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Comment for
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#13185&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/squarebat"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--fI8VGo8f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/59063821%3Fu%3D56d3e4e2301848ec216d8b8aedd570c90737d573%26v%3D4" alt="squarebat avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/squarebat"&gt;squarebat&lt;/a&gt;
        &lt;/strong&gt; commented on &lt;a href="https://github.com/forem/forem/issues/13185#issuecomment-872681158"&gt;&lt;time&gt;Jul 02, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt; : I played around with two dev accounts and based on my observations, some issues will occur regardless of whether we fix this issue or not. My observations might be incorrect, correct me if I'm wrong.&lt;/p&gt;
&lt;p&gt;Going through the PRs mentioned by &lt;a class="mentioned-user" href="https://dev.to/rhymes"&gt;@rhymes&lt;/a&gt;
 helped a lot. It's quite obvious now why canonical_url needs to be unique. I played around with importing from the same RSS feed from two dev accounts and this is what I observed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If an article from the feed was already imported in one account A, it won't be imported in account B regardless of whether the canonical_url was set or not, or if it was draft/published.&lt;/li&gt;
&lt;li&gt;If the article is deleted from account A, it can be fetched in account B.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note: These observations are from using the &lt;code&gt;Fetch feed now&lt;/code&gt; button, and not from periodic feed imports.
I can think of following issues that will occur:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If we allow both accounts to fetch the same article:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;None of them gets to publish the post if the canonical_url is same. They can be published by changing it, but since there is no way to know which account is using it, the canonical_url might remain unused.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;If we allow only one account to fetch an article (as is the case right now):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There's a UX issue where user won't know why articles aren't being fetched from the feed.&lt;/li&gt;
&lt;li&gt;Articles are being fetched on first come first serve basis, which defeats the purpose of allowing 2 accounts to import from the same feed.&lt;/li&gt;
&lt;/ul&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/13185#issuecomment-872681158"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;I'll definitely be writing a more detailed post on this one, but before then I will find myself using the feeds import feature to import this post over to other Forems, hopefully someone doesn't beat me to it 👀.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-super-cool-stuff"&gt;
  &lt;/a&gt;
  Other super cool stuff
&lt;/h2&gt;

&lt;p&gt;I wish to write detailed walk-throughs for all my PRs at Forem in the hopes that other contributors might find something of use from my adventures. But until then here are some honorable mentions -&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automatic-image-deletion"&gt;
  &lt;/a&gt;
  Automatic Image Deletion
&lt;/h3&gt;

&lt;p&gt;Working on this issue made us discover a security issue that would arise by deleting images, and even though this could not get merged, I learned a lot about data storage by going through the code base. &lt;/p&gt;


&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/pull/14141"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Automatically delete Cloudinary's user uploaded images in articles
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#14141&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/squarebat"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wo8QZm3M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/59063821%3Fv%3D4" alt="squarebat avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/squarebat"&gt;squarebat&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/pull/14141"&gt;&lt;time&gt;Jul 06, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      
&lt;h2&gt;
&lt;a id="user-content-what-type-of-pr-is-this-check-all-applicable" class="anchor" href="#what-type-of-pr-is-this-check-all-applicable"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;What type of PR is this? (check all applicable)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[x] Optimization&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
&lt;a id="user-content-description" class="anchor" href="#description"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Description&lt;/h2&gt;
&lt;p&gt;Currently, for articles and collections, the user uploaded images persist in the database, even after the article/collection using that image is deleted. This PR adds the functions required to delete user uploaded images (to cloudinary) in the article if any.&lt;/p&gt;
&lt;h2&gt;
&lt;a id="user-content-related-tickets--documents" class="anchor" href="#related-tickets--documents"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Related Tickets &amp;amp; Documents&lt;/h2&gt;
&lt;p&gt;Resolves #13936&lt;/p&gt;
&lt;h2&gt;
&lt;a id="user-content-addedupdated-tests" class="anchor" href="#addedupdated-tests"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Added/updated tests?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[x] Yes&lt;/li&gt;
&lt;/ul&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/pull/14141"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#updating-tags-in-articles-on-tag-update"&gt;
  &lt;/a&gt;
  Updating tags in articles on tag update
&lt;/h3&gt;

&lt;p&gt;The issue was that if tag colors are updated by the admin, that change isn't reflected at other places because the colors are cached. I learned about how client side and server side caching works in Forem and was able to locate the bug. Easy peasy&lt;/p&gt;


&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/pull/14427"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Delete tag colors cache on updating tags.
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#14427&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/squarebat"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wo8QZm3M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/59063821%3Fv%3D4" alt="squarebat avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/squarebat"&gt;squarebat&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/pull/14427"&gt;&lt;time&gt;Aug 05, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      
&lt;h2&gt;
&lt;a id="user-content-what-type-of-pr-is-this-check-all-applicable" class="anchor" href="#what-type-of-pr-is-this-check-all-applicable"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;What type of PR is this? (check all applicable)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[x] Bug Fix&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
&lt;a id="user-content-description" class="anchor" href="#description"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Description&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;In reference to issue #12486, I raised a PR #14298 which focused on deleting article edge cache when tags are updated, so that the new tag colors maybe reflected. The issue however was not the client side cache, it was the server side cache key &lt;code&gt;view-helper-#{tag}&lt;/code&gt; that stores the colors of the tag. Deleting the cache at that key solves the issue.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
&lt;a id="user-content-related-tickets--documents" class="anchor" href="#related-tickets--documents"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Related Tickets &amp;amp; Documents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Resolves #12486&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/blob/de852bd466ef418ac07a6317de4af6f8b892338d/app/helpers/application_helper.rb#L89"&gt;https://github.com/forem/forem/blob/de852bd466ef418ac07a6317de4af6f8b892338d/app/helpers/application_helper.rb#L89&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
&lt;a id="user-content-addedupdated-tests" class="anchor" href="#addedupdated-tests"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Added/updated tests?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[x] No, and this is why: This was a one line fix and is already tested by &lt;code&gt;spec/models/tag_spec.rb:119&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
&lt;a id="user-content-what-gif-best-describes-this-pr-or-how-it-makes-you-feel" class="anchor" href="#what-gif-best-describes-this-pr-or-how-it-makes-you-feel"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;What gif best describes this PR or how it makes you feel?&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://camo.githubusercontent.com/f8743090a2a892a4149b22cfe1efd92bccf63658d4d0581c7c51edcb421d3b70/68747470733a2f2f6d656469612e74656e6f722e636f6d2f696d616765732f32636234323432353135326362346264316664306164336465393562616532612f74656e6f722e676966" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f8743090a2a892a4149b22cfe1efd92bccf63658d4d0581c7c51edcb421d3b70/68747470733a2f2f6d656469612e74656e6f722e636f6d2f696d616765732f32636234323432353135326362346264316664306164336465393562616532612f74656e6f722e676966" alt="alt_text"&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/pull/14427"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#the-sponsors-image-bug"&gt;
  &lt;/a&gt;
  The Sponsors Image bug
&lt;/h3&gt;


&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/pull/14494"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Fix Sponsors Image display in homefeed and sponsors page.
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#14494&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/squarebat"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wo8QZm3M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/59063821%3Fv%3D4" alt="squarebat avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/squarebat"&gt;squarebat&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/pull/14494"&gt;&lt;time&gt;Aug 13, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;h2&gt;
&lt;a id="user-content-what-type-of-pr-is-this-check-all-applicable" class="anchor" href="#what-type-of-pr-is-this-check-all-applicable"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;What type of PR is this? (check all applicable)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[x] Bug Fix&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
&lt;a id="user-content-description" class="anchor" href="#description"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Description&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;As discussed in #14291, there was an bug with rendering the organizations logo while featuring sponsors in the homefeed. While inspecting, I found that the same issue exists in &lt;code&gt;/sponsors&lt;/code&gt; page as well. This PR fixes the bug.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
&lt;a id="user-content-related-tickets--documents" class="anchor" href="#related-tickets--documents"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Related Tickets &amp;amp; Documents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Resolves #14291&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
&lt;a id="user-content-qa-instructions-screenshots-recordings" class="anchor" href="#qa-instructions-screenshots-recordings"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;QA Instructions, Screenshots, Recordings&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://user-images.githubusercontent.com/59063821/129339688-d504029d-5598-4506-8f14-6f3fc0667315.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XpQnvDxi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/59063821/129339688-d504029d-5598-4506-8f14-6f3fc0667315.png" width="250"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://user-images.githubusercontent.com/59063821/129339695-a7781a1b-c873-4eef-b797-b72256f2ecd2.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5-XqOip9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/59063821/129339695-a7781a1b-c873-4eef-b797-b72256f2ecd2.png" width="350"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
&lt;a id="user-content-addedupdated-tests" class="anchor" href="#addedupdated-tests"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Added/updated tests?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[x] No, and this is why: a fallback has been added (profile image of org is displayed if they haven't uploaded a logo) and tests for the same aren't needed. Thought I should add tests anyway but realized that I won't be able to because of how the image uploader works.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
&lt;a id="user-content-what-gif-best-describes-this-pr-or-how-it-makes-you-feel" class="anchor" href="#what-gif-best-describes-this-pr-or-how-it-makes-you-feel"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;What gif best describes this PR or how it makes you feel?&lt;/h2&gt;
&lt;p&gt;happy bug smashin everyone!
&lt;a href="https://camo.githubusercontent.com/f66002464b33c96e8b86d2dcbaf5cbf56a02e8a595d6b075f681ea87c178c5ec/68747470733a2f2f632e74656e6f722e636f6d2f4f4e30364a744c614f564d41414141432f73616d616e646d61782d6d61782e676966" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f66002464b33c96e8b86d2dcbaf5cbf56a02e8a595d6b075f681ea87c178c5ec/68747470733a2f2f632e74656e6f722e636f6d2f4f4e30364a744c614f564d41414141432f73616d616e646d61782d6d61782e676966" width="250"&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/pull/14494"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#refactoring-and-reorganizing-code"&gt;
  &lt;/a&gt;
  Refactoring and reorganizing code
&lt;/h3&gt;

&lt;p&gt;I worked on a part of refactoring for StoriesController and &lt;strong&gt;highly recommend&lt;/strong&gt; new contributors to try their hands on this issue. It's the best way to get familiarized with the code base and learn about what goes where and when a certain method is called.&lt;/p&gt;


&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/2914"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        StoriesController refactoring
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#2914&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/lightalloy"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--R-v3X4CX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/30115%3Fv%3D4" alt="lightalloy avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/lightalloy"&gt;lightalloy&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/2914"&gt;&lt;time&gt;May 21, 2019&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;Currently, &lt;code&gt;StoriesController&lt;/code&gt; has a lot of responsibilities, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rendering homepage&lt;/li&gt;
&lt;li&gt;rendering articles by tag&lt;/li&gt;
&lt;li&gt;articles by time&lt;/li&gt;
&lt;li&gt;articles search&lt;/li&gt;
&lt;li&gt;article page&lt;/li&gt;
&lt;li&gt;user profile&lt;/li&gt;
&lt;li&gt;user comments page&lt;/li&gt;
&lt;li&gt;organization page&lt;/li&gt;
&lt;li&gt;podcast episode page&lt;/li&gt;
&lt;li&gt;podcast episodes list&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These responsibilities should be &lt;strong&gt;separated and placed into their own controllers&lt;/strong&gt; because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the code would be easier to understand&lt;/li&gt;
&lt;li&gt;easier to debug&lt;/li&gt;
&lt;li&gt;easier to reason about performance&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
&lt;a id="user-content-approach" class="anchor" href="#approach"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Approach&lt;/h3&gt;
&lt;p&gt;Ideally we want to take each of the responsibilities this single controller has right now and break them off into their own controller with their own route. I would imagine the workflow would go something like&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add new route for supporting new url (ie /users/:id/comments)&lt;/li&gt;
&lt;li&gt;Replace existing links all over the codebase&lt;/li&gt;
&lt;li&gt;Investigate: what happens with legacy url? should we remove or support it?&lt;/li&gt;
&lt;li&gt;Take into account that these urls could be bookmarked or shared through social media by many users. should we support legacy url and redirect to new url ??&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I've started doing some work on it, e.g. reorganized the views (#1584, #1317), but most of the work needs to be done.
It seems like a big non-urgent task to consider doing.
I suppose, that rails route constraints can be used to deal with the routes.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/2914"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#shoutouts"&gt;
  &lt;/a&gt;
  Shoutouts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To &lt;a class="mentioned-user" href="https://dev.to/coffeecraftcode"&gt;@coffeecraftcode&lt;/a&gt;
 for helping me with all my troubles throughout the fellowship and the great conversations over maintainer meets.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To &lt;a class="mentioned-user" href="https://dev.to/khattakdev"&gt;@khattakdev&lt;/a&gt;
 2.0 for being an amazing pod lead. Our Standups and 1-on-1s will be missed 🥺.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To all the maintainers at Forem that closely reviewed my code and made sure I was giving my best. I learned a lot about the ins and outs of Rails and best coding practices through the reviews.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>opensource</category>
      <category>forem</category>
    </item>
    <item>
      <title>AWS Latency Optimization for Trading Applications</title>
      <author>Scott Gerring</author>
      <pubDate>Tue, 24 Aug 2021 15:16:37 +0000</pubDate>
      <link>https://dev.to/aws-ch/aws-latency-optimization-for-trading-applications-1kg1</link>
      <guid>https://dev.to/aws-ch/aws-latency-optimization-for-trading-applications-1kg1</guid>
      <description>&lt;p&gt;Solutions on AWS that need consistently low latency between components are an interesting class of problem. Cloud platforms virtualize compute and network resources to optimize for more common problems, simultaneously impacting latency. We can readily achieve single digit millisecond latency with solutions built on top of AWS, and for the majority of use cases, this is great, but for some domains, we may want to try and do better.&lt;/p&gt;

&lt;p&gt;Despite the virtualization, there are plenty of tools we can reach for to drive our latency down - we just have to look a bit harder for them. A classic use case we often see in Switzerland is high-frequency crypto trading - a new and interesting industry that’s captured the interest of many startups. &lt;/p&gt;

&lt;p&gt;Usually when people build solutions on AWS, or any other cloud for that matter, they focus on abstraction - load balancers instead of direct access to servers, layered networking, and so on. These are examples of best practices that we employee to build well-architected solutions - secure, low maintenance, and cost-efficient. In cases like crypto trading though, the latency impact of these architectural decisions can represent a poor trade-off, and other options must be considered.&lt;br&gt;
 In this article, we will look at the tools and levers that can be used within the AWS platform to drive down latency, both between instances and across the internet. &lt;/p&gt;

&lt;p&gt;We will focus on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ensuring our instances have the best chance of low latency &lt;em&gt;in general&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Optimizing the latency between the instances we own&lt;/li&gt;
&lt;li&gt;Optimizing the latency from our instances to the rest of the world &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The options presented here generally represent a poor trade-off for conventional workloads, and a full understanding of their impact on the security, reliability and cost-effectiveness in particular on your workloads should be arrived at before using any of them. The &lt;a href="https://aws.amazon.com/architecture/well-architected/?wa-lens-whitepapers.sort-by=item.additionalFields.sortDate&amp;amp;wa-lens-whitepapers.sort-order=desc"&gt;AWS Well-Architected Framework&lt;/a&gt; and &lt;a href="https://aws.amazon.com/well-architected-tool/?whats-new-cards.sort-by=item.additionalFields.postDateTime&amp;amp;whats-new-cards.sort-order=desc"&gt;Tool&lt;/a&gt; are great resources to help you understand the impact of these and other architectural decisions on your workload.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-choosing-an-instance"&gt;
  &lt;/a&gt;
  1. Choosing an Instance
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#instance-families-generations-and-sizes"&gt;
  &lt;/a&gt;
  Instance Families, Generations, and Sizes
&lt;/h3&gt;

&lt;p&gt;The biggest lever we have in terms of improving network latency is the &lt;a href="https://aws.amazon.com/ec2/instance-types/"&gt;instance family, generation, and size we choose&lt;/a&gt;. The higher the network throughput available to the instance, the lower we can expect the latency to be. At the time of writing the highest throughput available is 100 gigabit, which can be obtained within the following instance families:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;c5n (e.g., c5n.18xlarge, c5n.metal) - compute optimised&lt;/li&gt;
&lt;li&gt;g4dn - GPU instances, useful for machine learning&lt;/li&gt;
&lt;li&gt;inf1 - AWS Inferentia, useful for machine learning inferences&lt;/li&gt;
&lt;li&gt;m5n - balanced CPU and memory&lt;/li&gt;
&lt;li&gt;r5n - memory-optimized&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Generally you want the newest instance generation (indicated by the number), an ‘n’ indicating improved networking. The choice between the other details - e.g. memory optimized vs. CPU optimized vs inferentia should be chosen to align with your workload.&lt;/p&gt;

&lt;p&gt;The trade-off here means we are inevitably choosing expensive instances to access the highest tier of network performance. Depending on the workload it is likely that these instances will end up underutilized. For typical workloads this would not align with the Well Architected Framework’s Cost Optimization pillar.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tenancy-amp-metal-instances"&gt;
  &lt;/a&gt;
  Tenancy &amp;amp; Metal Instances
&lt;/h3&gt;

&lt;p&gt;Once we’ve chosen an appropriate instance family and size to match the workload, we move onto the choice of tenancy and metal instances:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Hypervisor?&lt;/th&gt;
&lt;th&gt;Isolation?&lt;/th&gt;
&lt;th&gt;Placement Groups?&lt;/th&gt;
&lt;th&gt;Pros&lt;/th&gt;
&lt;th&gt;Cons&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Dedicated Host&lt;/td&gt;
&lt;td&gt;Reserve a host and explicitly assign VMs to it&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Explicitly assigned VMs&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Explicitly group VMs onto host to maximize network performance, full control of all neighbors on host&lt;/td&gt;
&lt;td&gt;Issues with host impact all instances on host simultaneously&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dedicated Instance&lt;/td&gt;
&lt;td&gt;Ensure that VMs only placed on hosts running VMs for the same account&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Shared with other instances within account&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Can use placement groups to mix with regular instances&lt;/td&gt;
&lt;td&gt;Because AWS picks the host for you, cannot guarantee same low latency between instances as dedicated hosts (instances may be spread between multiple hosts), Issues with host may impact all instances simultaneously&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Metal&lt;/td&gt;
&lt;td&gt;Deploy AMIs to bare metal, without a hypervisor&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Single instance only&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Direct access to the underlying hardware and and hardware feature sets (such as Intel® VT-x) and the ability to run your own hypervisor.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shared Tenancy&lt;/td&gt;
&lt;td&gt;Deploy instances to hosts potentially shared with other accounts&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Use placement groups to best-effort place instances near each other, spreading instances across hosts lowers impact of any issues arising on underlying hardware.&lt;/td&gt;
&lt;td&gt;Because AWS chooses hosts to place the instances on, there is a likely impact on latency between instances.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Choosing a dedicated host allows us to place our instances on the same hardware which is likely to result in the best latency we can expect between the instances. On the other hand, this means that a host failure will bring down all of our instances at once while EC2 moves the VMs onto a new dedicated host. Depending on your workload, this may be an unacceptable failure mode.&lt;/p&gt;

&lt;p&gt;Metal instances remove the hypervisor from the equation completely, allowing us to provision standard AMIs to machines without the hypervisor. With EC2’s nitro hypervisor and hypervisor cards, the overhead added by the hypervisor is minimal, but nonetheless the impact of this may be a deciding factor for our workload. Metal instances tend to be used mainly where licensing constraints require it, rather than as a performance optimisation.&lt;/p&gt;

&lt;p&gt;Ultimately the choice here comes down to the particular workload, how it responds to failures, and how far we want to sacrifice the Well Architected Framework’s Reliability pillar to drive our latency numbers down. Once again, the choices made here, focussed on placing the instances as closely together as possible within an AZ, represent a poor trade-off for traditional workloads where reliability is much more important than minimising latency at all costs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-networking-within-the-region"&gt;
  &lt;/a&gt;
  2. Networking - Within the Region
&lt;/h2&gt;

&lt;p&gt;Once we’ve picked our instances and their tenancy, we might need to hook them up to each other. For low-latency workloads, the less connectivity the better - ultimately avoiding hitting the network is always going to be the fastest option! &lt;br&gt;
In some cases - when the workload can’t fit onto a single machine, for instance, or needs connectivity with other, discrete services within your AWS environment - this isn’t practical. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#availability-zones"&gt;
  &lt;/a&gt;
  Availability Zones
&lt;/h3&gt;

&lt;p&gt;Placing all of our instances into the same AZ will likely give us the best latency between them, but once again, at the expense of reliability. AZs are physically isolated from one another to improve the durability of the region they reside within, and this comes with a small latency cost. The best practice for traditional workloads is to take advantage of services such as &lt;a href="https://aws.amazon.com/ec2/autoscaling/"&gt;EC2 Autoscaling’s&lt;/a&gt; inbuilt ability to spread instances across availability zones, so that in the unlikely event of an AZ outage, the workload continues to run. Keep in mind that AZs remain close enough for things like RDS’ synchronous database replication to work well; it is definitely worth measuring whether or not the improvement here is worth the trade-off! &lt;/p&gt;

&lt;p&gt;We must carefully consider whether or not the latency improvements brought by targeting a single AZ only are worth the reliability impact for the workload.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cluster-placement-groups"&gt;
  &lt;/a&gt;
  Cluster Placement Groups
&lt;/h3&gt;

&lt;p&gt;Within an AZ, we can go further still and use &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html#placement-groups-cluster"&gt;Cluster Placement Groups&lt;/a&gt; to hint to AWS that we want our instances packed closely together on the physical hardware, rather than spread apart - the default behaviour used to improve reliability. It is recommended that all instances for the placement group be launched in a single launch request to increase the likelihood they can be placed effectively.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#network-cards"&gt;
  &lt;/a&gt;
  Network Cards
&lt;/h3&gt;

&lt;p&gt;We need to make sure we are using &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/enhanced-networking.html"&gt;Enhanced Networking&lt;/a&gt;; on the newer instance generations we should have this turned on by default, but it is nonetheless worth checking.&lt;/p&gt;

&lt;p&gt;Next, we can look at splitting traffic for different workloads apart onto different interfaces. For instance, for a trading workload, we may choose to separate the interface we use to receive market signals from the interface we use to place orders. This limits the ability of separate streams of traffic to impact each other, and allows us to tune the interfaces separately if required.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#network-cards-elastic-fabric-adapter"&gt;
  &lt;/a&gt;
  Network Cards - Elastic Fabric Adapter
&lt;/h3&gt;

&lt;p&gt;Finally, for traffic within our cluster, we can look at OS bypass networking.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/hpc/efa/"&gt;Elastic Fabric Adapter (EFA)&lt;/a&gt; is a network card that allows customers to run applications requiring high levels of inter-node communications leveraging operating system bypass. This allows tightly-coupled workloads to achieve improved latency, jitter, and throughput. Using EFAs with their OS bypass functionality imposes some constraints that mean they are not simply a “better ENA”:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Communications within the same subnet only&lt;/li&gt;
&lt;li&gt;TCP/IP is not available; applications must leverage a library such as &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/efa-start.html"&gt;Open MPI&lt;/a&gt; for communications&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;EFAs also provide regular, non-kernel-bypass traffic, which can be used to reach the machine regularly, but as discussed earlier, we likely want to separate this class of traffic out onto separate network interfaces anyway.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#network-simplification"&gt;
  &lt;/a&gt;
  Network Simplification
&lt;/h3&gt;

&lt;p&gt;Anything in the path of traffic between our instances can affect latency, and we can therefore try to keep these paths as simple as practical while continuing to meet our other architectural goals.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;VPC - use a single VPC where possible; VPC peering, VPN links, and traffic gateway all introduce latency&lt;/li&gt;
&lt;li&gt;Subnets - passing traffic between subnets introduces latency. If we intend to use EFA and kernel-bypass, we will need to keep the clustered portion of our workload inside a single subnet anyway&lt;/li&gt;
&lt;li&gt;Security Groups - attaching multiple SGs, or overly-complex SGs, may impact latency&lt;/li&gt;
&lt;li&gt;Access Control Lists - attaching overly complex ACLs may impact latency&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here too we need to pay special attention to the ramifications of simplification. Simply removing all access control from our network is clearly a step in the wrong direction, particularly in terms of Well Architected’s Security pillar. The problems that we may cause by compromising on security can foreseeably be much more dire than those of our earlier reliability compromises.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#protocol-choice-amp-serialization"&gt;
  &lt;/a&gt;
  Protocol Choice &amp;amp; Serialization
&lt;/h3&gt;

&lt;p&gt;While REST + JSON + HTTP has become the defacto standard of public APIs exposed on the internet, it is much more optimized for common use cases like web applications than it is for low-latency. If we choose to use EFAs and kernel bypass as suggested earlier, we’ve already been pushed away from this for traffic within our cluster, but what if we can’t make this move, or if we have external interfaces?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If we must use HTTP, favour newer HTTP versions - e.g. HTTP3 / QUIC over HTTP2 over HTTP1&lt;/li&gt;
&lt;li&gt;Favour gRPC over REST &lt;/li&gt;
&lt;li&gt;Favour higher performance serialization options such as &lt;a href="https://developers.google.com/protocol-buffers"&gt;protocol buffers&lt;/a&gt; over JSON or XML &lt;/li&gt;
&lt;li&gt;Favour websockets PUSH over polling - for instance, if we have incoming market signals&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-networking-beyond-the-region"&gt;
  &lt;/a&gt;
  3. Networking - Beyond the Region
&lt;/h2&gt;

&lt;p&gt;While it’s nice to have our instances talking to each other as quickly as possible, most real-world systems, especially trading systems, need to interact with the rest of the world. Fortunately there are some tools we can use here, too, to push our latency down.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#privatelink-amp-vpc-peering"&gt;
  &lt;/a&gt;
  PrivateLink &amp;amp; VPC Peering
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/privatelink"&gt;AWS PrivateLink&lt;/a&gt; allows you to publish a service from one VPC into another, without having to directly peer the VPCs and without the traffic travelling over the public internet. In some cases, external API providers provide PrivateLink endpoints for their services in the regions and zones they operate in, which you can then use to communicate with them. &lt;br&gt;
PrivateLink exposes a Network Load Balancer from one VPC into the other, which may have a latency impact. If you control both accounts you can also use VPC peering or AWS Transit Gateway, which allows traffic to pass between them without the intermediate NLB. This complicates the security situation and couples the two much more tightly together, but may be an appropriate trade-off in some situations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#global-accelerator-amp-cloudfront"&gt;
  &lt;/a&gt;
  Global Accelerator &amp;amp; Cloudfront
&lt;/h3&gt;

&lt;p&gt;Global Accelerator allows you to expose a public endpoint for your AWS-hosted service using BGP Anycast such that traffic for the service enters the AWS network as close to the edge as possible. The traffic then travels through AWS’ internal network to your service, wherever that may be, rather than across the public internet. This can result in a marked improvement in stability and latency of the connection. &lt;/p&gt;

&lt;p&gt;CloudFront is a content delivery network that provides HTTP[S] endpoints to your service distributed around Amazon’s global network. Traffic hits CloudFront at the edge, and then travels over AWS’ internal network to your service. This can be a simpler alternative to Global Accelerator where HTTP/HTTPS is all that is required.&lt;/p&gt;

&lt;p&gt;In our example here - a trading system - it is likely not much use, as we would much rather place our workload as close to the exchange we are using as possible. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#direct-connect-partners"&gt;
  &lt;/a&gt;
  Direct Connect Partners
&lt;/h3&gt;

&lt;p&gt;In case you are interested in arbitrage, you may want the lowest latency possible not just between a single region and an exchange, but to multiple exchanges spread out across the world, the idea being to take advantage of price differences quicker than anyone else can. This of course makes the problem much harder.&lt;/p&gt;

&lt;p&gt;Some AWS Direct Connect partners such as Equinix operate their own global networks and may offer latency optimized offerings. If you are interested in exploring this possibility you can checkout our &lt;a href="https://aws.amazon.com/directconnect/partners/"&gt;AWS’ Direct Connect partners&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-kernel-amp-process-optimisation"&gt;
  &lt;/a&gt;
  4. Kernel &amp;amp; Process Optimisation
&lt;/h2&gt;

&lt;p&gt;Once we’ve gone through all of the “big picture” pieces above, we can move into the instances themselves and start fiddling with local optimisations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#core-pinning"&gt;
  &lt;/a&gt;
  Core Pinning
&lt;/h3&gt;

&lt;p&gt;Core pinning, sometimes also called &lt;a href="https://en.wikipedia.org/wiki/Processor_affinity"&gt;CPU pinning or processor affinity&lt;/a&gt;, allows us to indicate to our OSes scheduler that a particular process should only run on a particular core. This can help avoid cache misses and improve process latency. This sort of optimization warrants benchmarking to ensure that it yields a positive performance impact. Most X86 AWS instance families maintain affinity between virtualized cores and physical hyperthreads, but &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html"&gt;this can be verified for the relevant family in the documentation&lt;/a&gt;. The T2 instance type and graviton instances like T4g are notable exceptions. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tcp-amp-network-card-tuning"&gt;
  &lt;/a&gt;
  TCP &amp;amp; Network Card Tuning
&lt;/h3&gt;

&lt;p&gt;TCP &amp;amp; network card tuning is a rabbit hole that we can also choose to dive into. Ultimately both have a number of levers and tweaks we can play with - window sizes, buffer sizes, and so on - that are generally tuned to provide reliability for normal use cases. Diving into this is beyond the scope of this document!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;If you’ve gotten this far, congratulations! Despite running on virtualized infrastructure, there is still a lot we can do to drive down our latency.&lt;/p&gt;

</description>
      <category>aws</category>
    </item>
    <item>
      <title>Rust for Data Science: Tutorial 1</title>
      <author>Davide Del Papa</author>
      <pubDate>Tue, 24 Aug 2021 15:14:37 +0000</pubDate>
      <link>https://dev.to/davidedelpapa/rust-for-data-science-tutorial-1-4g5j</link>
      <guid>https://dev.to/davidedelpapa/rust-for-data-science-tutorial-1-4g5j</guid>
      <description>&lt;p&gt;[Photo by &lt;a href="https://unsplash.com/@jimgade?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;jim gade&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/sand?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;,&lt;br&gt;
  modified]&lt;br&gt;
Data Science: a branch of computer science that studies how to use, store, and analyze data in order to derive information from it.&lt;/p&gt;

&lt;p&gt;With this mini-series we are going to explore how to use some Rusty tools to accomplish the tasks that are the bread and butter of any Data Scientist.&lt;/p&gt;

&lt;p&gt;The final goal is to show that Rust can be employed in this field, and how so. Ultimately our goal is also to sparkle interest in this field of application: the author is persuaded that Rust should prove very useful in the field of Data Science (as well as Machine Learning and ultimately AI).&lt;/p&gt;

&lt;p&gt;You can find this article's code in the repo: &lt;a href="https://github.com/davidedelpapa/rdatascience-tut1"&gt;github.com/davidedelpapa/rdatascience-tut1&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-the-stage-for-this-tutorial"&gt;
  &lt;/a&gt;
  Setting the stage for this tutorial
&lt;/h2&gt;

&lt;p&gt;There are few crates we are going to cover in this tutorial. However, we are going to introduce them as we go.&lt;/p&gt;

&lt;p&gt;Let's start our project the standard rusty way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;cargo new rdatascience-tut1 &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;rdatascience-tut1
cargo add ndarray ndarray-rand ndarray-stats noisy_float poloto
code &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am using currently &lt;code&gt;cargo add&lt;/code&gt; from the good &lt;a href="https://crates.io/crates/cargo-edit"&gt;cargo-edit&lt;/a&gt; (quick inst: &lt;code&gt;cargo install cargo-edit&lt;/code&gt;) to handle dependencies, and &lt;a href="https://code.visualstudio.com/"&gt;VisualStudio Code&lt;/a&gt; as dev IDE.&lt;/p&gt;

&lt;p&gt;Feel free to handle &lt;em&gt;Cargo.toml&lt;/em&gt; dependencies by hand, or use a different IDE.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ndarray-what-is-it-and-why-to-use-it"&gt;
  &lt;/a&gt;
  ndarray: what is it, and why to use it?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://crates.io/crates/ndarray"&gt;ndarray&lt;/a&gt; is a Rust crate used to work with arrays. &lt;/p&gt;

&lt;p&gt;It covers all the classic uses of an array handling framework (such as &lt;code&gt;numpy&lt;/code&gt; for Python). Some use cases which are not covered by the main crate, are covered through some corollary crates, such as &lt;a href="https://crates.io/crates/ndarray-linalg"&gt;ndarray-linalg&lt;/a&gt; for linear algebra, &lt;a href="https://crates.io/crates/ndarray-rand"&gt;ndarray-rand&lt;/a&gt; to generate randomness, and &lt;a href="https://crates.io/crates/ndarray-stats"&gt;ndarray-stats&lt;/a&gt; for statistics.&lt;/p&gt;

&lt;p&gt;Additionally, &lt;code&gt;ndarray&lt;/code&gt; has got also some nice extra, such as support for &lt;a href="https://crates.io/crates/rayon"&gt;rayon&lt;/a&gt; for parallelization, or the popular &lt;a href="http://www.netlib.org/blas/"&gt;BLAS&lt;/a&gt; low-level specs, through one of the working back-ends (using &lt;a href="https://crates.io/crates/blas-src"&gt;blas-src&lt;/a&gt; ).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-to-use-ndarray"&gt;
  &lt;/a&gt;
  Why to use ndarray?
&lt;/h4&gt;

&lt;p&gt;In Rust there are already arrays (or lists), and also vectors, and the language itself allows for many different types of manipulation through powerful iterators.&lt;/p&gt;

&lt;p&gt;What is more, what is offered by the bare Rust language (enhanced by the &lt;code&gt;std&lt;/code&gt;) is many times even faster than other more popular languages; still, &lt;code&gt;ndarray&lt;/code&gt; is specialized to handle n-dimensional arrays with a mathematical end in view. &lt;/p&gt;

&lt;p&gt;Thus &lt;code&gt;ndarray&lt;/code&gt; builds over the power already provided by the language; Rust power is one of the reasons why the author is persuaded that Rust will be the language of Data Science in the next few years.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ndarray-quickstart"&gt;
  &lt;/a&gt;
  ndarray Quick-Start
&lt;/h2&gt;

&lt;p&gt;At the top of our &lt;em&gt;src/main.rs&lt;/em&gt; we are going to import as usual:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;ndarray&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;prelude&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have almost everything we need in the prelude.&lt;/p&gt;

&lt;p&gt;We can start to put stuff inside the &lt;code&gt;fn main()&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#array-creation"&gt;
  &lt;/a&gt;
  Array creation
&lt;/h3&gt;

&lt;p&gt;Let's start to see how we can create arrays:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;arr1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;array!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;.&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"1D array: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;ndarray&lt;/code&gt; provides the &lt;code&gt;array!&lt;/code&gt; macro that detects which type of &lt;code&gt;ArrayBase&lt;/code&gt; is needed. In this case this is a 1-D, that is, a one dimensional array. Notice that the underlying &lt;code&gt;ArrayBase&lt;/code&gt; already implements a &lt;code&gt;std::fmt::Display&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Compare it to the standard Rust array (let's call them &lt;em&gt;lists&lt;/em&gt; in order not to confuse them with &lt;code&gt;ndarray&lt;/code&gt;'s arrays) and Vec:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// 1D array VS 1D array VS 1D Vec&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;arr1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;array!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;.&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"1D array: &lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;ls1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"1D list: &lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;{:?}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ls1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;vec1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;vec!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;.&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"1D vector: &lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;{:?}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vec1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1D array:       [1, 2, 3, 4, 5, 6]
1D list:        [1.0, 2.0, 3.0, 4.0, 5.0, 6.0]
1D vector:      [1.0, 2.0, 3.0, 4.0, 5.0, 6.0]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice too that &lt;code&gt;array!&lt;/code&gt; has written the floats as integers, since they are all &lt;code&gt;.0&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#array-sum"&gt;
  &lt;/a&gt;
  Array Sum
&lt;/h3&gt;

&lt;p&gt;Let's try to sum 2 arrays element by element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;arr2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;array!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;.&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;arr3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"1D array: &lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let see how it compares with standard arrays(lists) and vectors:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;arr2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;array!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;.&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;arr3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"1D array: &lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;ls2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;ls3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ls1&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;ls2&lt;/span&gt;&lt;span class="nf"&gt;.len&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="n"&gt;ls3&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ls1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ls2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"1D list: &lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;{:?}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ls3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;vec2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;vec!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;.&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;vec3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;f64&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vec1&lt;/span&gt;&lt;span class="nf"&gt;.iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec2&lt;/span&gt;&lt;span class="nf"&gt;.iter&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="nf"&gt;.map&lt;/span&gt;&lt;span class="p"&gt;(|(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;e1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;e2&lt;/span&gt;&lt;span class="p"&gt;)|&lt;/span&gt; &lt;span class="n"&gt;e1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;e2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"1D vec: &lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;{:?}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vec3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1D array:       [2, 4.2, 6.3, 8, 10, 12]
1D list:        [1.0, 4.2, 6.3, 8.0, 10.0, 12.0]
1D vec:         [2.0, 4.2, 6.3, 8.0, 10.0, 12.0]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, with Rust standard tools it became more complicated very soon. To perform an element by element sum we need a &lt;code&gt;for&lt;/code&gt; or (only for Vec) we need to use iterators, which are powerful, but very complicated to use in such a day-to-day Data Science scenario.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2d-arrays-amp-more"&gt;
  &lt;/a&gt;
  2D arrays &amp;amp; more
&lt;/h2&gt;

&lt;p&gt;let's just abandon quickly the examples using Rust's standard constructs, since as we have shown, they are more complex, and let us focus on &lt;code&gt;ndarray&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ndarray&lt;/code&gt; offers various methods to create and instantiate (and use) 2D arrays.&lt;/p&gt;

&lt;p&gt;Just look at this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;arr4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;array!&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;.&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;.&lt;span class="p"&gt;]];&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;arr5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from_elem&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;arr6&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr4&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;arr5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"2D array:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;with its output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2D array:
[[2, 3, 4],
 [5, 6, 7]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the macro &lt;code&gt;array!&lt;/code&gt; we need to specify all elements, while with &lt;code&gt;Array::from_elem&lt;/code&gt; we need to offer a &lt;code&gt;Shape&lt;/code&gt;, in this case &lt;code&gt;(2,1)&lt;/code&gt; and an element to fill the array, in this case &lt;code&gt;1.0&lt;/code&gt;: it will fill for us the whole shape with the selected element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;arr7&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nn"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;f64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr6&lt;/span&gt;&lt;span class="nf"&gt;.raw_dim&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;arr8&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr6&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;arr7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which outputs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[[0, 0, 0],
 [0, 0, 0]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Array::zeros(Shape)&lt;/code&gt; creates an array of &lt;code&gt;Shape&lt;/code&gt; filled with zero's. &lt;/p&gt;

&lt;p&gt;Notice that sometimes the compiler cannot infer the type of zero to feed in (you almost forgot Rust has got a &lt;em&gt;nice&lt;/em&gt; type system, didn't you?), so we help it with the annotation &lt;code&gt;Array::&amp;lt;f64, _&amp;gt;&lt;/code&gt;, which gives the type, letting the compiler infer the shape (&lt;code&gt;_&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The function &lt;code&gt;.raw_dim()&lt;/code&gt;, as you can imagine, gives the shape of the matrix.&lt;/p&gt;

&lt;p&gt;Let's create an identity matrix now (a 2 dimensional array with all 0 but the diagonal)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;identity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Array2&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;f64&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nn"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;eye&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which outputs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[[1, 0, 0],
 [0, 1, 0],
 [0, 0, 1]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We helped the compiler providing the shape and type, but this time using a specialized form of &lt;code&gt;ArrayBase&lt;/code&gt;, that is, &lt;code&gt;Array2&lt;/code&gt; that represents 2-dimensional arrays. Notice that we created a reference so that we can re-use the variable without incurring in the ire of the borrow checker (yes, always working, did you forget that as well?)&lt;/p&gt;

&lt;p&gt;Let's explore now the use of an identity matrix:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;arr9&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;array!&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;.&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;.&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;.&lt;span class="p"&gt;]];&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;arr10&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;arr9&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;identity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Outputs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[[1, 0, 0],
 [0, 5, 0],
 [0, 0, 9]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From my math classes I remember something like that the identity matrix should give back the same matrix when multiplied...&lt;/p&gt;

&lt;p&gt;Yes, of course, we are not doing &lt;em&gt;dot&lt;/em&gt; multiplications! With normal multiplication it does not work.&lt;/p&gt;

&lt;p&gt;In fact, when using matrices there is a element-wise multiplication, which is done by &lt;code&gt;arr9 * identity&lt;/code&gt;, but there's too a matrix multiplication, which is done by&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;arr11&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr9&lt;/span&gt;&lt;span class="nf"&gt;.dot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;identity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr11&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;which finally outputs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[[1, 2, 3],
 [4, 5, 6],
 [7, 8, 9]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, &lt;code&gt;ndarray&lt;/code&gt; can handle also a 0-D array, with 0 meaning that it is just an element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nd"&gt;array!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;.&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Dimensions: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nd"&gt;array!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;.&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nf"&gt;.ndim&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;which correctly outputs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[2]
Dimensions: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Likewise, we could go to 3D or more&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;arr12&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;i8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;ones&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;MULTIDIMENSIONAL&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr12&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Guessed its output?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MULTIDIMENSIONAL
[[[[1, 1],
   [1, 1]],

  [[1, 1],
   [1, 1]],

  [[1, 1],
   [1, 1]]],


 [[[1, 1],
   [1, 1]],

  [[1, 1],
   [1, 1]],

  [[1, 1],
   [1, 1]]]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's a 2-elements 2 vectors, repeated 3 times, repeated 2 times; just go from right to left to unpack it from smaller to bigger (and vice-versa).&lt;/p&gt;

&lt;p&gt;If it is still unclear, don't worry: we are here for the programming more than for the math/stats behind it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-add-some-randomness-to-the-mess"&gt;
  &lt;/a&gt;
  Let's add some randomness to the mess!
&lt;/h2&gt;

&lt;p&gt;We also loaded &lt;code&gt;ndarray-rand&lt;/code&gt; into our &lt;em&gt;Cargo.toml&lt;/em&gt;, which we briefly described earlier.&lt;/p&gt;

&lt;p&gt;This package adds the power of the &lt;a href="https://crates.io/crates/rand"&gt;rand&lt;/a&gt; crate (which it re-exports as sub-module) to your &lt;em&gt;ndarray ecosystem&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In order to see some examples, let's add the following in the &lt;code&gt;use&lt;/code&gt; section of our &lt;em&gt;src/main.rs&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;ndarray_rand&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;RandomExt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SamplingStrategy&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;ndarray_rand&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;rand_distr&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Uniform&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can get an array of shape &lt;code&gt;(5, 2)&lt;/code&gt;, for example, filled with a uniform distribution between 1 and 10 (floats, though):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;arr13&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;random&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nn"&gt;Uniform&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{:5.2}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr13&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which results, for example, in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[[ 2.04,  0.15,  6.66,  3.06,  0.91],
 [ 8.18,  6.08,  6.99,  4.45,  5.27]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Results should vary at each run, being the distribution (pseudo)random.&lt;/p&gt;

&lt;p&gt;We can also &lt;em&gt;"pick"&lt;/em&gt; data from an array (sampling) in the following way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;arr14&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;array!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;.&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;.&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;arr15&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr14&lt;/span&gt;&lt;span class="nf"&gt;.sample_axis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;Axis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;SamplingStrategy&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;WithoutReplacement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Sampling from:&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;{}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Two elements:&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr15&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which may result in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Sampling from:  [1, 2, 3, 4, 5, 6]
Two elements:   [4, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let me show another way of sampling, which involves the use of the &lt;code&gt;rand&lt;/code&gt; crate and the creation of an array from a vector:&lt;/p&gt;

&lt;p&gt;We first need the following added to the &lt;code&gt;use&lt;/code&gt; section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;ndarray_rand&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;IteratorRandom&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we use the &lt;code&gt;rand&lt;/code&gt; crate as re-exported by &lt;code&gt;ndarray-rand&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then we can do the following (example in the &lt;a href="https://rust-random.github.io/rand/rand/seq/trait.IteratorRandom.html"&gt;rand docs&lt;/a&gt;, adapted):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;rng&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;thread_rng&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;faces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"😀😎😐😕😠😢"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;arr16&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from_shape_vec&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;faces&lt;/span&gt;&lt;span class="nf"&gt;.chars&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.choose_multiple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;rng&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Sampling from:&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;faces&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Elements:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We define the &lt;code&gt;thread_rng&lt;/code&gt; to be used first, then we set a string containing the emoji we want to select.&lt;/p&gt;

&lt;p&gt;Then we create an array from a vector, giving a shape. The shape we chose is &lt;code&gt;(2, 2)&lt;/code&gt;, but the vector is created using a particular &lt;code&gt;IteratorRandom&lt;/code&gt;, i.e., &lt;code&gt;choose_multiple&lt;/code&gt;, extracting 4 elements (chars) at random from the string.&lt;/p&gt;

&lt;p&gt;The output is obvious:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Sampling from:  😀😎😐😕😠😢
Elements:
[[😀, 😎],
 [😢, 😠]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Beware though not to over-sample, otherwise &lt;code&gt;choose_multiple&lt;/code&gt; will simply panic.&lt;br&gt;
Instead, &lt;code&gt;Array::from_shape_vec&lt;/code&gt; returns a &lt;code&gt;Result&lt;/code&gt; stating if it could create an array or not (Result which we simply unwrap).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lets-do-some-stats-and-visualize-something-shall-we"&gt;
  &lt;/a&gt;
  Let's do some stats and visualize something, shall we?
&lt;/h2&gt;

&lt;p&gt;Before introducing visualization, let's introduce the crate &lt;a href="https://crates.io/crates/ndarray-stats"&gt;ndarray-stats&lt;/a&gt;, actually, also the crate &lt;a href="https://crates.io/crates/noisy_float"&gt;noisy_float&lt;/a&gt; which is a must when using &lt;code&gt;ndarray-stats&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First of all, we start with a Standard Normal Distribution, randomly created.&lt;/p&gt;

&lt;p&gt;First we add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;ndarray_rand&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;rand_distr&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;Uniform&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;StandardNormal&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;in its proper place, then:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;arr17&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;f64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;random_using&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;StandardNormal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="nn"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;thread_rng&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way we have a 2D array with 300 couples of elements&lt;/p&gt;

&lt;p&gt;Then we add to the &lt;code&gt;use&lt;/code&gt; section also the imports we need to do statistics:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;ndarray_stats&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;HistogramExt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;ndarray_stats&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;histogram&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="nn"&gt;strategies&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Sqrt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GridBuilder&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;noisy_float&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;types&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;N64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n64&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to transform each element from float into a noisy float; I will not go into explaining a noisy float, just consider it as a float that can't silently fail (be a &lt;code&gt;NaN&lt;/code&gt;); besides this way it is order-able, which is what is needed by &lt;code&gt;ndarray-stats&lt;/code&gt; to create an histogram.&lt;/p&gt;

&lt;p&gt;In order to perform by value an operation on each element of the ndarray, we will use the function &lt;code&gt;mapv()&lt;/code&gt; which is akin to the standard &lt;code&gt;map()&lt;/code&gt; for iterators.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr17&lt;/span&gt;&lt;span class="nf"&gt;.mapv&lt;/span&gt;&lt;span class="p"&gt;(|&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nf"&gt;n64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, we can create a grid for our histogram (a grid is needed to divide the data into bins); we try to infer the best way, using the &lt;code&gt;strategies::Sqrt&lt;/code&gt; (a strategy used by many programs, including MS Excel):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;GridBuilder&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Sqrt&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;N64&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.build&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have a grid, that is, a way to divide our raw data to prepare our histogram, we can create such histogram:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;histogram&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="nf"&gt;.histogram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to get the underlying counts matrix, we can simply state:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;histogram_matrix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;histogram&lt;/span&gt;&lt;span class="nf"&gt;.counts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The count matrix just states how many elements are present in each bin and each height, in the grid.&lt;/p&gt;

&lt;p&gt;Ok, now we have a histogram... but how could we visualize it?&lt;br&gt;
Well, before visualizing our data we should prepare it for visualization.&lt;/p&gt;

&lt;p&gt;The problem we face is that we have the counts of a grid, but to plot it we should really have a number of bin and all elements in that bin, meaning, we should sum vertically all elements.&lt;/p&gt;

&lt;p&gt;In order to do so, we need to sum on axis(0) of the ndarray:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;histogram_matrix&lt;/span&gt;&lt;span class="nf"&gt;.sum_axis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;Axis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have a 1D ndarray containing all the sums of the grid. At this point we can establish that each sum is a different bin, and enumerate them. We will transform it all to a vector of tuples, in order to prepare it for the visualization tool, where the first element of the tuple is the number of bin, and the second is the height of the bin.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;his_data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;f32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;f32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="nf"&gt;.iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.enumerate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.map&lt;/span&gt;&lt;span class="p"&gt;(|(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;f32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;f32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember: this is just a hoax dataset, based on a pseudorandom generator of a normal distribution (i.e., a Gaussian distribution centered in &lt;code&gt;0.0&lt;/code&gt;, with radius approx. &lt;code&gt;1&lt;/code&gt;). Still, we should see a rough Gaussian on a histogram.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dataviz"&gt;
  &lt;/a&gt;
  DataViz
&lt;/h3&gt;

&lt;p&gt;In order to visualize things we will use &lt;a href="https://crates.io/crates/poloto"&gt;poloto&lt;/a&gt;, which is one of many plotting crates for Rust. &lt;/p&gt;

&lt;p&gt;It is a simple one, meaning we do not need many lines of code to have something to see on our screen.&lt;/p&gt;

&lt;p&gt;We will not import it in the &lt;code&gt;use&lt;/code&gt; section, because it is very simple. Let me explain how to plot a histogram in three steps:&lt;/p&gt;

&lt;p&gt;Step one - create a file to store our graph:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;File&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"standard_normal_hist.svg"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step two - create a histogram out of the data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;graph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;poloto&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Histogram"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"x"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"y"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="nf"&gt;.histogram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Stand.Norm.Dist."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;his_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.xmarker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.ymarker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create a &lt;code&gt;Plotter&lt;/code&gt; object, assigning it a title, and legend for each axis.&lt;br&gt;
Then, we plot our histogram on it, assigning the title in the legend (&lt;code&gt;"Stand.Norm.Dist."&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Step three - write the graph on disk:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="nf"&gt;.simple_theme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;poloto&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;upgrade_write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As simple as that!&lt;/p&gt;

&lt;p&gt;Let's admire our work of (random) art:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lHBw1jMz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0a4e1lazjh80hy497cuc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lHBw1jMz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0a4e1lazjh80hy497cuc.png" alt="Histogram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OK, let's try something different: let's view our graph as a scatter plot. Since our hoax data is a Standard Normal Distribution, if we have N pairs of coordinates, the scatter plot should be like a cloud centered on the &lt;code&gt;0,0&lt;/code&gt; coordinates.&lt;/p&gt;

&lt;p&gt;Let's visualize it!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;arr18&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;f64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;random_using&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;StandardNormal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="nn"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;thread_rng&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;f64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;f64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr18&lt;/span&gt;&lt;span class="nf"&gt;.axis_iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;Axis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="nf"&gt;.map&lt;/span&gt;&lt;span class="p"&gt;(|&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="nf"&gt;.to_vec&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="nf"&gt;.collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We created 300 pairs of random numbered centered around &lt;code&gt;(0, 0)&lt;/code&gt;, according to a Standard Normal Distribution.&lt;/p&gt;

&lt;p&gt;Then we transformed that array to a &lt;code&gt;Vec&amp;lt;(f64, f64)&amp;gt;&lt;/code&gt;, because the &lt;code&gt;poloto&lt;/code&gt; library only graphs &lt;code&gt;[f64; 2]&lt;/code&gt; or whatever can be converted to a &lt;code&gt;AsF64&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We will add also two lines to show the center of our graph:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;y_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we create a file, plot, and save, just as we did for the histogram:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;File&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"standard_normal_scatter.svg"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c"&gt;// create file on disk&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;graph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;poloto&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Scatter Plot"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"x"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"y"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;// create graph&lt;/span&gt;
&lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="nf"&gt;.line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;x_line&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="nf"&gt;.line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;y_line&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="nf"&gt;.scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Stand.Norm.Dist."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.ymarker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="nf"&gt;.simple_theme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;poloto&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;upgrade_write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! We can admire our random creation now:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0BmO0WN8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e0e1sxz8b5pkui59cck8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0BmO0WN8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e0e1sxz8b5pkui59cck8.png" alt="Scatter Plot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I think this should wrap it up for today.&lt;/p&gt;

&lt;p&gt;We saw how to use &lt;code&gt;ndarray&lt;/code&gt; (in a basic form), and how it differs from Rust arrays and vectors.&lt;/p&gt;

&lt;p&gt;We saw also some of its companion crates that complete the ecosystem, to provide randomness and some statistic feats.&lt;br&gt;
We saw also a way to plot graphs with data, showing how to plot a histogram, a scatter plot, and some lines.&lt;/p&gt;

&lt;p&gt;I hope this will be a good starting point to delve deeper into the use of Rust for Data Science.&lt;/p&gt;

&lt;p&gt;That's all folks for today, see you next time!&lt;/p&gt;

</description>
      <category>rust</category>
      <category>datascience</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
