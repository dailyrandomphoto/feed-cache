<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How did I publish my 1st NPM package.</title>
      <author>Md Amir Gauhar</author>
      <pubDate>Tue, 27 Jul 2021 04:05:49 +0000</pubDate>
      <link>https://dev.to/mdamirgauhar/how-did-i-publish-my-1st-npm-package-25h5</link>
      <guid>https://dev.to/mdamirgauhar/how-did-i-publish-my-1st-npm-package-25h5</guid>
      <description>&lt;p&gt;Hello fellow developers! &lt;br&gt;
We have came across various npm packages which had made our lives more simpler and easier. If you don’t know what NPM is then let me help you to know a little bit about it. NPM is package manager for NodeJS which was created in 2009 as an open source project to help JavaScript Developers easily share their codes in form of packages.&lt;/p&gt;

&lt;p&gt;So in this article I’ll talk about how I published my 1st NPM package. Creating your first NPM package may seem incredibly intimidating but it is actually surprisingly easy. The main focus of this articles isn’t to build a bad-ass npm package but to explain how to build and publish a npm package.&lt;/p&gt;

&lt;p&gt;Now let’s get started...&lt;br&gt;
To publish a NPM package, all we need is the NPM command Line tool which is also called &lt;em&gt;npm&lt;/em&gt;. When we install NodeJS in our system, we automatically get npm installed in our computer. To download NodeJS visit &lt;a href="https://nodejs.org"&gt;here&lt;/a&gt;.&lt;br&gt;
After installing &lt;em&gt;npm&lt;/em&gt;, we can go ahead and start creating our package. Now in the terminal we’ll do the following:&lt;/p&gt;

&lt;blockquote&gt;
&lt;h6&gt;
  &lt;a href="#creating-the-project-directory"&gt;
  &lt;/a&gt;
  creating the project directory
&lt;/h6&gt;

&lt;p&gt;mkdir reverse-string &lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#change-into-the-project-directory"&gt;
  &lt;/a&gt;
  change into the project directory
&lt;/h6&gt;

&lt;p&gt;cd reverse-string&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before we start writing our code, we need to add a &lt;strong&gt;package.json&lt;/strong&gt; file to our project. For that run we need to run the following command in the terminal :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;npm init&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ghBrpyD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/voggngswmsh2jyu53oyj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ghBrpyD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/voggngswmsh2jyu53oyj.png" alt="npm init"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we need to answer some questions which is basically about the package we are creating. After answering the questions, the &lt;strong&gt;package.json&lt;/strong&gt; will be created in the root of the project and will look like this&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--34_ktNkA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xywzelvvss1h7e3fmvbv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--34_ktNkA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xywzelvvss1h7e3fmvbv.png" alt="package.json"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let’s start writing our code. We are going to create a package to reverse a string.&lt;br&gt;
Create an &lt;em&gt;index.js&lt;/em&gt; file in the root of the project and add the following code for reversing the string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function reverse(string) {
  return string
    .toLowerCase()
    .split("")
    .reverse()
    .join("");
};

module.exports = reverse;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let’s publish the package…&lt;br&gt;
In order to publish the package to NPM registry we need to create an account in the NPM registry. After creating the account go to the email we provided to verify our account. Then we'll go to the terminal and authenticate ourselves using:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;npm login.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After entering all the credentials, we can now publish our package using the following command:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;npm publish &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that we may not be able to publish the package if someone else already has a package with same name in the registry. We can simply change the package name  to some unique name or simply change it to @username/package-name.&lt;br&gt;
In my case I’ll rename my package name to &lt;strong&gt;&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/mdamirgauhar"&gt;@mdamirgauhar&lt;/a&gt;
/reverse-string&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;When we have a name-spaced package, NPM tries to make it a private package instead of public. In order to publish our package we need to run the following command in the terminal:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;npm publish --access=public.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Voila&lt;/strong&gt;, we have created our first npm package. Hope you liked it..&lt;/p&gt;

</description>
      <category>npm</category>
      <category>node</category>
    </item>
    <item>
      <title>Find Social Media Accounts in 5 Minutes with Sherlock</title>
      <author>Suhail Kakar</author>
      <pubDate>Tue, 27 Jul 2021 04:01:29 +0000</pubDate>
      <link>https://dev.to/suhailkakar/find-social-media-accounts-in-5-minutes-with-sherlock-4h57</link>
      <guid>https://dev.to/suhailkakar/find-social-media-accounts-in-5-minutes-with-sherlock-4h57</guid>
      <description>&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h3&gt;

&lt;p&gt;Don't do this to anyone with ill intent, this is a legit hacking tool part of the hacking process called osens, where we gather information about our hacking targets. What we're doing is not technically illegal we're just gathering publicly available information on the internet but the lines can blur based on your intentions so just be careful use this as a learning tool.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;Sherlock is a powerful command line tool supplied by the Sherlock Project that may be used to locate usernames across a variety of social media platforms. It is a python open-source project available at GitHub. You just need to input the username and Sherlock will return all the social media account url of that username&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#requirement"&gt;
  &lt;/a&gt;
  Requirement
&lt;/h3&gt;

&lt;p&gt;This best thing about this project is that you don't need any extra thing, You just need a web browser&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-use-"&gt;
  &lt;/a&gt;
  How To Use ?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Open this  &lt;a href="https://console.cloud.google.com/cloudshell/open?git_repo=https://github.com/sherlock-project/sherlock&amp;amp;tutorial=README.md"&gt;link&lt;/a&gt;  in your browser. This will open Google Cloud Console which we can use its shell to install Sherlock&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure to check the Trust checkbox and click on Confirm and wait for 10 seconds &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4W0gd3E5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627356069411/sx6yI9aqt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4W0gd3E5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627356069411/sx6yI9aqt.png" alt="screely-1627356052231.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Once everything is done, go a head and paste the below code in the Cloud Shell
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python3 &lt;span class="nt"&gt;-m&lt;/span&gt; pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;If all the packages are installed successfully, you should see something similar to below picture&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--svNuMVjm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627356959209/be5HQdOdb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--svNuMVjm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627356959209/be5HQdOdb.png" alt="image (1).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now we can start using Sherlock, you just need to a username to get the social media account. In the Cloud Shell paste the below code and click enter ( change username with the account you want to get information, In my case suhailkakar) and will get all the social media profile of the username
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python3 sherlock &lt;span class="nt"&gt;--timeout&lt;/span&gt; 1 username
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CgHiX9qy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627357833292/qgItNii3M.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CgHiX9qy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627357833292/qgItNii3M.gif" alt="Sherlock"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;I hope you found this articles helpful. If you need any help please let me know at comment section&lt;/p&gt;

&lt;p&gt;Let's connect on  &lt;a href="https://twitter.com/suhailkakar"&gt;Twitter&lt;/a&gt;  and  &lt;a href="https://www.linkedin.com/in/suhailkakar/"&gt;LinkedIn&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;👋 Thanks for reading, See you next time&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>hacking</category>
      <category>datascience</category>
    </item>
    <item>
      <title>ReactJS project for beginners</title>
      <author>Jack </author>
      <pubDate>Tue, 27 Jul 2021 02:41:05 +0000</pubDate>
      <link>https://dev.to/codingninjaz/reactjs-project-for-beginners-5c87</link>
      <guid>https://dev.to/codingninjaz/reactjs-project-for-beginners-5c87</guid>
      <description>&lt;h3&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;b&gt;2. ReactJS project&lt;/b&gt;&lt;/h3&gt;
&lt;p&gt;Aiming to master front-end frameworks? Start learning &lt;span&gt;ReactJS &lt;/span&gt;diligently and look forward to a great career in programming. The best way to move forward is to start building ReactJS projects for beginners and get hands-on with ReactJS.&lt;/p&gt;
&lt;p&gt;By working on smaller real-life projects, you can master theoretical concepts and get ready for the professional development challenges. Once you have successfully deployed your &lt;em&gt;ReactJS&lt;/em&gt; apps you can present those achievements to your future employers and get your dream job.&lt;/p&gt;
&lt;p&gt;Building &lt;span&gt;ReactJS projects for beginners&lt;/span&gt; will not only allow you to strengthen up React skills but also will help you explore your creative sides as a developer. Also, it will make you familiar with &lt;span&gt;React developer tools&lt;/span&gt; and react ecosystem for each project as per the need for that project.&lt;/p&gt;
&lt;p&gt;React project development is a self-directed process. You’ll have to learn on a trial and error basis. Unlike the basics of React via online learning materials, there’ll not be much to guide you on building React projects.&lt;/p&gt;
&lt;p&gt;Further Reading: &lt;b&gt;&lt;a href="https://bit.ly/2TCFknJ"&gt;ReactJS project for beginners&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Nodejs Project For Beginners</title>
      <author>Jack </author>
      <pubDate>Tue, 27 Jul 2021 02:30:27 +0000</pubDate>
      <link>https://dev.to/codingninjaz/nodejs-project-for-beginners-440l</link>
      <guid>https://dev.to/codingninjaz/nodejs-project-for-beginners-440l</guid>
      <description>&lt;h3&gt;1.  Nodejs Project&lt;br&gt;
&lt;/h3&gt;
&lt;br&gt;&lt;p&gt;If you have decided to build your career in &lt;span&gt;NodeJS &lt;/span&gt;development, we have gathered a list of &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; for all node enthusiasts to build highly scalable web applications.&lt;/p&gt;
&lt;p&gt;These best &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; will help you gain knowledge about core node concepts, train your skill level, build a superb work portfolio, and get hired for your dream job.&lt;/p&gt;
&lt;p&gt;When you start building your first projects, it’s highly recommended for beginners in coding to create a repository for each of your projects so you will be able to learn &lt;em&gt;git&lt;/em&gt; and show your coding expertise to future employers.&lt;/p&gt;
&lt;p&gt;Further Reading: &lt;b&gt;&lt;a href="https://bit.ly/36YTCSA"&gt;Nodejs Project For Beginners&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Observabilidade em APIs ASP.NET core</title>
      <author>Beatriz813</author>
      <pubDate>Tue, 27 Jul 2021 01:41:47 +0000</pubDate>
      <link>https://dev.to/beatriz813/obsevabilidade-em-apis-asp-net-core-5cil</link>
      <guid>https://dev.to/beatriz813/obsevabilidade-em-apis-asp-net-core-5cil</guid>
      <description>&lt;h2&gt;
  &lt;a href="#ferramentas-utilizadas"&gt;
  &lt;/a&gt;
  Ferramentas utilizadas:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Asp.Net core 3.1&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/prometheus-net/prometheus-net"&gt;prometheus-net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.influxdata.com/influxdb/v2.0/"&gt;InfluxDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://grafana.com/docs/grafana/latest/getting-started/getting-started/"&gt;Grafana&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introdu%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Introdução
&lt;/h2&gt;

&lt;p&gt;Para este tutorial será construído apenas uma API com Asp.net core que contém um controller, ou seja, o foco aqui é sobre como adicionar um coletor de métricas na sua API. Neste tutorial todas as ferramentas serão instaladas localmente sem uso de Docker.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#influxdb"&gt;
  &lt;/a&gt;
  InfluxDB
&lt;/h2&gt;

&lt;p&gt;O InfluxDB é um banco de dados (TSDB) usado para armazenar registros onde a data e hora em que eles foram armazenados são relevantes para algum tipo de análise. Portanto, o InfluxDB é usado para armazenar métricas de servidor, monitoramento de desempenho de aplicativos, dados de rede, dados de sensores, eventos, negociações em um mercado e outros tipos de dados analíticos. Ele possui uma linguagem própria chamada Influx que se utiliza do paradigma funcional e oferece várias funções para manipular e analisar dados.&lt;br&gt;
  O InfluxDB pode ser usado com Docker ou instalando o banco de dados na sua máquina. Para instalar o InfluxDB basta baixar o pacote comprimido no site &lt;a href="https://docs.influxdata.com/influxdb/v2.0/install/?t=Windows#download-and-install-influxdb-v20"&gt;InfluxData&lt;/a&gt; e descomprimir na pasta &lt;code&gt;C:\Program Files\InfluxData\&lt;/code&gt;, após isso basta abrir o terminal do seu computador e rodar o binário do banco de dados.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;"C:&lt;/span&gt;&lt;span class="se"&gt;\P&lt;/span&gt;&lt;span class="s2"&gt;rogram Files&lt;/span&gt;&lt;span class="se"&gt;\I&lt;/span&gt;&lt;span class="s2"&gt;nfluxData&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;
  ./influxd
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Após isso você consegue acessar a UI do influxDB que fica por padrão no endereço &lt;code&gt;http://localhost:8086&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#grafana"&gt;
  &lt;/a&gt;
  Grafana
&lt;/h2&gt;

&lt;p&gt;O grafana é uma aplicação de código aberto onde é possível criar dashboards que refletem os dados que estão armazenados em alguma fonte de dados que você especifica. Ele pode ser usado de duas formas: como container Docker ou instalado localmente. Para instalar basta entrar no &lt;a href="https://grafana.com/grafana/download?platform=windows"&gt;site do Grafana&lt;/a&gt; e selecionar o seu sistema operacional. Se você estiver no windows baixe o arquivo .msi e siga o instalador. Após finalizar a instalação o servidor do grafana ja estará rodando na porta 3000 &lt;code&gt;http://localhost:3000&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#api-aspnet-core-31"&gt;
  &lt;/a&gt;
  API Asp.Net Core 3.1
&lt;/h2&gt;

&lt;p&gt;Aqui será usado Visual Studio 2019. Crie uma API Asp.Net Core 3.1 com os seguintes passos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Selecione a opção &lt;strong&gt;Criar um projeto&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Selecione o projeto &lt;strong&gt;Aplicativo Web ASP.NET Core&lt;/strong&gt; e dê o nome que desejar&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Após essa criação adicione o seguinte pacote &lt;a href="https://github.com/prometheus-net/prometheus-net"&gt;prometheus-net.AspNetCore&lt;/a&gt;&lt;br&gt;
  Se você não sabe instalar um pacote, segue as instruções:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Selecione a opção &lt;strong&gt;Ferramentas&lt;/strong&gt; &amp;gt; &lt;strong&gt;Gerenciador de pacotes do NuGet&lt;/strong&gt; &amp;gt; &lt;strong&gt;Gerenciar pacotes do NuGet para a Solução&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Na janela que irá abrir selecione a aba &lt;strong&gt;Procurar&lt;/strong&gt; e digite o nome do pacote.&lt;/li&gt;
&lt;li&gt;Após encontrar o pacote selecione ele e instale na sua solução.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BZI_Kz_n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbalijv57a9nn59c6ueb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BZI_Kz_n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbalijv57a9nn59c6ueb.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Após fazer isso basta você adicionar o middleWare do prometheus para expor as metricas da sua API no endpoint &lt;code&gt;/metrics&lt;/code&gt;. O &lt;code&gt;app.UseHttpMetrics()&lt;/code&gt; deve ser posto após &lt;code&gt;app.UseRouting()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IApplicationBuilder&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IWebHostEnvironment&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="p"&gt;...&lt;/span&gt;
     &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseRouting&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
     &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseHttpMetrics&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

     &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseEndpoints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endpoints&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapControllers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapMetrics&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Quando você rodar a sua API e consultar o endpoint &lt;code&gt;/metrics&lt;/code&gt; verá o seguinte resultado:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UfK0RpvU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5zln07mm1rwsqatdh6jd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UfK0RpvU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5zln07mm1rwsqatdh6jd.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#salvando-as-m%C3%A9tricas-no-influxdb"&gt;
  &lt;/a&gt;
  Salvando as métricas no InfluxDB
&lt;/h2&gt;

&lt;p&gt;O InfluxDB tem os buckets que são onde as métricas são armazenadas, porém com Asp.net core você só tem ferramentas/pacotes que te possibilitam escrever e consultar esse bucket, não tem um pacote que colete e insira os dados diretamente no bucket. Para isso o InfluxDB também oferece os scrapers que são coletores que buscam dados de um endpoint informado por você que expõe as métricas no &lt;a href="https://prometheus.io/docs/instrumenting/exposition_formats/"&gt;padrão de escrita Prometheus&lt;/a&gt;. Esses Scrapers ficam varrendo o endpoint que você informou e guarda os dados que encontra no bucket informado por você.&lt;br&gt;
  Para utilizar o Scrapper você precisa:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Criar um Bucket&lt;/li&gt;
&lt;li&gt;Criar um Scraper&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Se você não souber como criar assista o video. &lt;a href="https://www.loom.com/share/c2c452df29414344b67c7ad470ebdabc"&gt;Criando buckets e scrapers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vale ressaltar que na opção "Target URL" para criar o scraper você deve informar o endpoint de métricas da sua API.&lt;br&gt;
Após isso, quando você rodar a sua API e começar a fazer requisições para ela os dados serão inseridos nos buckets, e você vai poder visualizar que eles estão sendo salvos através da opção &lt;strong&gt;Explore&lt;/strong&gt; na interface gráfica do InfluxDB &lt;code&gt;http://localhost:8086&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zZGIntOV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgkmat06uhwqyv9aeiyy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zZGIntOV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgkmat06uhwqyv9aeiyy.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#criando-dashboard-no-grafana"&gt;
  &lt;/a&gt;
  Criando Dashboard no Grafana
&lt;/h2&gt;

&lt;p&gt;Depois de ter instalado o grafana você deve acessar o endereço &lt;code&gt;http://localhost:3000&lt;/code&gt;, fazer login e começar os preparativos para visualizar os seus dados que estão armazenados no InfluxDB. Para isso você deve:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adicionar a fonte de dados do InfluxDB&lt;/li&gt;
&lt;li&gt;Criar o Dashboard de forma que cada quadro represente uma query ao Bucket&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Assista o &lt;a href="https://www.loom.com/share/ecfab9b189d24a79a2fb48fb3faf78d9"&gt;vídeo&lt;/a&gt; para saber como fazer os dois passos anteriores.&lt;/p&gt;

&lt;p&gt;Se você não conhece a forma de escrita com Influx e não tem intimidade com ela você pode utilizar o construtor de query (Query Builder), selecionar os parâmetros que você quer visualizar e depois copiar o script gerado em &lt;strong&gt;Script Editor&lt;/strong&gt; (Esse procedimento é mostrado no vídeo sugerido logo acima).&lt;br&gt;
Uma informação que acho relevante citar aqui é: você pode verificar os tipos de dados disponibilizados pela ferramenta prometheus-net.AspNetCore olhando o seu endpoint &lt;code&gt;/metrics&lt;/code&gt;. Cada métrica tem um breve resumo com a sua descrição (#HELP) e tipo (#TYPE).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GCbH5ock--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5lqqht40zp7w4ia5xp8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GCbH5ock--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5lqqht40zp7w4ia5xp8.png" alt="exemplo de métricas"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Saber o tipo de informação disponibilizada te ajudará a escolher o tipo de gráfico correto para a sua visualização.&lt;/p&gt;

&lt;p&gt;Com o prometheus-dotnet você também pode criar suas próprias métricas, em um próximo tutorial demonstrarei como pode ser feito!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Text classification using Machine Learning - Tensorflow - AI</title>
      <author>Jeff</author>
      <pubDate>Tue, 27 Jul 2021 01:23:03 +0000</pubDate>
      <link>https://dev.to/jeffersonlicet/text-classification-using-machine-learning-tensorflow-ai-2pf5</link>
      <guid>https://dev.to/jeffersonlicet/text-classification-using-machine-learning-tensorflow-ai-2pf5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hey"&gt;
  &lt;/a&gt;
  Hey 👋
&lt;/h2&gt;

&lt;p&gt;I want to share my experience participating in the #MeliDataChallenge 2019. (Mercadolibre.com challenge)&lt;/p&gt;

&lt;p&gt;I'm not an expert. I like to participate in contests like this to learn about Machine Learning and AI with real world applications, soon I will publish my experience and my solution for the Despegar challenge (Images classification).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-challenge"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The challenge&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The challenge was very interesting, classify e-commerce products using only its titles.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-prize"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The prize&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;First and second place will receive tickets to KHIPU. From 3 to 5 place an Intel Movidius.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Il7kG0ih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/RifuOIr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Il7kG0ih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/RifuOIr.png" alt="Prize"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-result"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The result&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;I managed to be in the top 20 with a score of &lt;strong&gt;0.8954/1&lt;/strong&gt;, there were more of 150 participants, the competition was hard and exciting. Of course, I learned a lot of new things.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;POSITION&lt;/th&gt;
&lt;th&gt;NAME&lt;/th&gt;
&lt;th&gt;SCORE&lt;/th&gt;
&lt;th&gt;ENTRIES&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;jefferson1100001&lt;/td&gt;
&lt;td&gt;0.895456136076574&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#lets-explain-my-approach"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Let's explain my approach&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The first thing I did was to take a look of the data, Mercadolibre provided two files, train.csv and test.csv.  This is how train.csv looks like:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;TITLE&lt;/th&gt;
&lt;th&gt;LABEL_QUALITY&lt;/th&gt;
&lt;th&gt;LANGUAGE&lt;/th&gt;
&lt;th&gt;CATEGORY&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Hidrolavadora Lavor One 120 Bar 1700w Bomba A...&lt;/td&gt;
&lt;td&gt;unreliable&lt;/td&gt;
&lt;td&gt;spanish&lt;/td&gt;
&lt;td&gt;ELECTRIC_PRESSURE_WASHERS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Placa De Sonido - Behringer Umc22&lt;/td&gt;
&lt;td&gt;unreliable&lt;/td&gt;
&lt;td&gt;spanish&lt;/td&gt;
&lt;td&gt;SOUND_CARDS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Maquina De Lavar Electrolux 12 Kilos&lt;/td&gt;
&lt;td&gt;unreliable&lt;/td&gt;
&lt;td&gt;portuguese&lt;/td&gt;
&lt;td&gt;WASHING_MACHINES&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;There are 12,644,401 valid rows, the dataset is unbalanced and some categories are present in just one language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-preprocessing"&gt;
  &lt;/a&gt;
  Data preprocessing
&lt;/h2&gt;

&lt;p&gt;Here I will describe my preprocess routines without code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Remove tildes&lt;br&gt;
Spanish and Portuguese words have tildes, like teléfono. This step mutates the word to telefono.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remove word separators&lt;br&gt;
Some titles have dash, dots and other punctuation marks without a space between them, for example kit.ruedas.moto.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'm replacing each one of this marks with a space.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;+ , . ( ) : [ ] { } _ /&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remove other punctuation marks and numbers&lt;br&gt;
I've removed any other punctuation mark and numbers, but the number must be surrounded by a word boundary.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tokenize the title&lt;br&gt;
I applied the WordPunctTokenizer provided by NLTK to split each title into words.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remove stop words&lt;br&gt;
On the resulting array of words I discarded stop words like: "un", "unas", "unos"...&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stem each token&lt;br&gt;
I used the SnowballStemmer provided by NLTK. Stemming is the process of reducing inflected (or sometimes derived) words to their word stem. For example: Cámara is transformed to "cam".&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#preprocessing-result"&gt;
  &lt;/a&gt;
  Preprocessing result
&lt;/h2&gt;

&lt;p&gt;Let's take a look of the titles titles before and after preprocessing:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;BEFORE&lt;/th&gt;
&lt;th&gt;AFTER PREPROCESSING&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Placa De Sonido - Behringer Umc22&lt;/td&gt;
&lt;td&gt;plac son behring umc22&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Oportunidad! Notebook Dell I3 - 4gb Ddr4 - Hd 1tb - Win 10&lt;/td&gt;
&lt;td&gt;oportun notebook dell i3 4gb ddr4 hd 1tb win&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cámara Instantánea Fujifilm Instax Mini 9 - Azul Cobalto&lt;/td&gt;
&lt;td&gt;cam instantane fujifilm instax mini azul cobalt&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;I saved a copy of train.csv with all the titles preprocessed, a list with all the posible categories and a list with all labels.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-dictionary"&gt;
  &lt;/a&gt;
  The dictionary:
&lt;/h2&gt;

&lt;p&gt;Iterating over all the preprocessed titles and with the help of a Counter I had created a dictionary containing words only if their frequency is &amp;gt;= 2. It means that the word must occur at least two times in some title.&lt;/p&gt;

&lt;p&gt;The dictionary looks like this&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{'kit': 785233, 'original': 469537, 'pret': 232647, 'led': 220194, ...}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There are 1,251,659 unique tokens, after filtering them the dictionary has 513,307 posible words.&lt;/p&gt;

&lt;p&gt;Let's transform the preprocessed titles to numbers&lt;br&gt;
In this step I used the dictionary to transform each title into an array of numbers. It's very simple, for each word in the title, replace it with the corresponding index of the word in the dictionary plus 1. (0 is reserved).&lt;/p&gt;

&lt;p&gt;A preprocessed title like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;['porton', 'chap', 'hoj', 'mtr', 'marc']&lt;/code&gt;&lt;br&gt;
Becomes:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[120, 121, 122, 123, 124]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The max word sequence has len 27, if the transformed title has len less than 27, we pad it with zeros so each title has the same length.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[120, 121, 122, 123, 124, 0, 0, 0, 0, 0, 0, 0, ....]&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#now-its-time-for-machine-learning"&gt;
  &lt;/a&gt;
  Now it's time for Machine Learning
&lt;/h3&gt;

&lt;p&gt;I've used Tensorflow + Keras, the model has the following architecture:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fNwO0qnt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://jeffersonlicet.com/content/images/2019/10/arch.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fNwO0qnt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://jeffersonlicet.com/content/images/2019/10/arch.png" alt="Architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-points-you-must-know"&gt;
  &lt;/a&gt;
  Key points you must know
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Seed random numbers, so you can get reproducible results.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use stratified samples when splitting test and train&lt;br&gt;
It means that each set must have the same proportion of classes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Take 1% for testing&lt;br&gt;
The dataset is relative big, 1% seems to represent a good number of features of the dataset for being validated.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use class_weights&lt;br&gt;
Due to the imbalanced nature of the dataset, class_weights increased the BACC of the model.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Explore the data locally&lt;br&gt;
And maybe preprocess locally but use multiprocessing&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use Colab or Kaggle&lt;br&gt;
To take adventage of the GPU and train faster&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#training"&gt;
  &lt;/a&gt;
  Training:
&lt;/h2&gt;

&lt;p&gt;After 18 epochs the model seems to achieve good results before start to overfitting. The balanced accuracy was: 0.86774697&lt;/p&gt;

&lt;p&gt;Testing a new title:&lt;br&gt;
If we feed the model with complete new data, for example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;"Buzo Harry Potter Lentes Cicatriz Hogwarts Hoodie"&lt;/code&gt;&lt;br&gt;
It will predict:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SWEATSHIRTS_AND_HOODIES&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-alternative-attempt"&gt;
  &lt;/a&gt;
  The alternative attempt:
&lt;/h2&gt;

&lt;p&gt;I also created a small model with just 1400 categories representing the reliable subset.  The the goal was to feed that model with the unreliable subset in order to detect if the unreliable categories were in the wrong categories, but this adds complexity and I'd to optimize two models instead of just one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You can use the label_quality somehow to increase model ACC.&lt;/li&gt;
&lt;li&gt;Use confusion matrix or any performance measurement to detect where does our model perform worst.&lt;/li&gt;
&lt;li&gt;Use a complex architecture or CNN&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#github-with-all-the-code"&gt;
  &lt;/a&gt;
  Github with all the code:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/jeffersonlicet/ml-titles-classification"&gt;https://github.com/jeffersonlicet/ml-titles-classification&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tensorflow</category>
      <category>machinelearning</category>
      <category>nlp</category>
      <category>python</category>
    </item>
    <item>
      <title>JavaScript Hoisting</title>
      <author>Patricia Nicole</author>
      <pubDate>Tue, 27 Jul 2021 01:06:33 +0000</pubDate>
      <link>https://dev.to/pat_the99/javascript-hoisting-450l</link>
      <guid>https://dev.to/pat_the99/javascript-hoisting-450l</guid>
      <description>&lt;h2&gt;
  &lt;a href="#js5-wil-post"&gt;
  &lt;/a&gt;
  [JS#5 WIL 🤔 Post]
&lt;/h2&gt;

&lt;p&gt;JavaScript hoisting refers to the process where the compiler allocates memory for variable and function declarations &lt;strong&gt;prior&lt;/strong&gt; to execution of code [&lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Hoisting"&gt;1&lt;/a&gt;]. That means that declarations are moved to the top of their scope before code execution regardless of whether its scope is global or local. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#javascript-hoisting"&gt;Javascript Hoisting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#context-execution"&gt;Javascript Context Execution: Creation and Execution Phase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#default-values"&gt;Default Values: &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;ReferenceError&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tdz"&gt;&lt;code&gt;let&lt;/code&gt; hoisting and Temporal Dead Zone (TDZ)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hoisting-variables"&gt;Variable Hoisting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#function-hoisting"&gt;Function Hoisting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pushpin-javascript-hoisting"&gt;
  &lt;/a&gt;
  📌 Javascript Hoisting &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Conceptually speaking, &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;hoisting is the compiler splitting variable declaration and initialization and moving only the declarations to the top of the code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thus, variables can appear in code before they are even defined. However, the variable initialization will only happen until that line of code is executed.&lt;/p&gt;

&lt;p&gt;The code snippets below show hoisting in action. The first snippet shows how the code is expected to be written: &lt;strong&gt;declare the function first and use/invoke it after.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;printIamHoisted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;printIamHoisted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Am I hoisted??&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the snippet below, the method is invoked first, and the function declaration is written next. However, both of them have the same output - they print the string &lt;code&gt;Am I hoisted?&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;printIamHoisted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Am I hoisted?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;printIamHoisted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So even though the function is called before it is written, the code still works. This happens because of how context execution works in Javascript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pushpin-javascript-context-execution"&gt;
  &lt;/a&gt;
  📌 Javascript Context Execution &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;When a Javascript engine executes code, it creates execution context. Each context has two phases: &lt;strong&gt;creation&lt;/strong&gt; and &lt;strong&gt;execution&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pushpin-creation-phase"&gt;
  &lt;/a&gt;
  📌 Creation Phase
&lt;/h4&gt;

&lt;p&gt;When a script executes, the JS engine creates a &lt;strong&gt;Global Execution Context&lt;/strong&gt;. In this phase, it performs the following tasks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a global object &lt;code&gt;window&lt;/code&gt; in the web browser&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;this&lt;/code&gt; object binding which pertains to the global object&lt;/li&gt;
&lt;li&gt;Setup memory for storing variables and function references&lt;/li&gt;
&lt;li&gt;Store the declarations in memory within the global execution context with &lt;code&gt;undefined&lt;/code&gt; initial value.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lookin back at this snippet,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;printIamHoisted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am hoisted!!!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;printIamHoisted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the global execution context at this phase, would somehow look like this &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZXxlogt_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4t3uitokcxtbs7qil5x8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZXxlogt_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4t3uitokcxtbs7qil5x8.png" alt="Creation Phase"&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pushpin-execution-phase"&gt;
  &lt;/a&gt;
  📌 Execution Phase
&lt;/h4&gt;

&lt;p&gt;At this phase, the JS engine executes the code line by line. But by virtue of hoisting, the function is declared regardless of line order, so there is no problem calling/invoking the method prior the declaration.&lt;/p&gt;

&lt;p&gt;For every function call, the JS engine creates a new &lt;strong&gt;Function Execution Context&lt;/strong&gt;. This context is similar to &lt;strong&gt;global execution context&lt;/strong&gt;, but instead of creating the global object, it creates the &lt;code&gt;arguments&lt;/code&gt; object that contains references to all the parameters passed to the function. The context during this phase would look somewhat like : &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NCP-Yn_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/px04iqhq9b2qtr72i4sl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NCP-Yn_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/px04iqhq9b2qtr72i4sl.png" alt="Execution Phase"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#pushpin-only-the-declarations-function-and-variable-are-hoisted"&gt;
  &lt;/a&gt;
  📌 Only the declarations (function and variable) are hoisted
&lt;/h3&gt;

&lt;p&gt;JS only hoists declarations, &lt;strong&gt;not initializations&lt;/strong&gt;. If a variable is used but it is only declared and initialized after, the value when it is used will be the default value on initialization. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#pushpin-default-values-raw-undefined-endraw-and-raw-referenceerror-endraw-"&gt;
  &lt;/a&gt;
  📌 Default Values: &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;ReferenceError&lt;/code&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;For variables declared with the &lt;code&gt;var&lt;/code&gt; keyword, the default value would be &lt;code&gt;undefined&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hoistedVar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Returns 'undefined' from hoisted var declaration (not 6)&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;hoistedVar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Declaration&lt;/span&gt;
&lt;span class="nx"&gt;hoistedVar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;78&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Initialization&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Logging the &lt;code&gt;hoistedVar&lt;/code&gt; variable before it is initialized would print &lt;code&gt;undefined&lt;/code&gt;. If however, the declaration of the variable is removed, i.e.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hoistedVar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Throw ReferenceError Exception&lt;/span&gt;
&lt;span class="nx"&gt;hoistedVar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;78&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Initialization&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;a &lt;code&gt;ReferenceError&lt;/code&gt; exception would be thrown because no hoisting happened.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pushpin-raw-let-endraw-hoisting-temporal-dead-zone-tdz"&gt;
  &lt;/a&gt;
  📌 &lt;code&gt;let&lt;/code&gt; hoisting: Temporal Dead Zone (TDZ)&lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Variables declared with &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; are also hoisted. However, unlike variables declared with &lt;code&gt;var&lt;/code&gt;, they are not initialized to a default value of &lt;code&gt;undefined&lt;/code&gt;. Until the line in which they are initialized is executed, any code that access them, will throw an exception. These variables are said to be in a "temporal dead zone" (TDZ) from the start of the block until the initialization has completed. Accessing unintialized &lt;code&gt;let&lt;/code&gt; variables would result to a &lt;code&gt;ReferenceError&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// TDZ starts at beginning of scope&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;varVariable&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;letVariable&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ReferenceError&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;varVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;letVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// End of TDZ (for letVariable)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The term "temporal" is used because the zone depends on the execution order (referring to time - &lt;em&gt;temporal&lt;/em&gt;) rather than the order in which the code is written (position). However, the code snippet below will work because even though &lt;code&gt;sampleFunc&lt;/code&gt; uses the &lt;code&gt;letVariable&lt;/code&gt; before it is declared, the function is &lt;strong&gt;called&lt;/strong&gt; outside of the TDZ.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// TDZ starts at beginning of scope&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sampleFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;letVariable&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// OK&lt;/span&gt;

    &lt;span class="c1"&gt;// Within the TDZ letVariable access throws `ReferenceError`&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;letVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// End of TDZ (for letVariable)&lt;/span&gt;
    &lt;span class="nx"&gt;sampleFunc&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Called outside TDZ!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#pushpin-variable-hoisting"&gt;
  &lt;/a&gt;
  📌 Variable Hoisting &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Remember that all function and variable declarations are hoisted to the &lt;strong&gt;TOP&lt;/strong&gt; of the scope. Declarations are processed &lt;strong&gt;before&lt;/strong&gt; any code is executed. With this, undeclared variables do not exist until the code assignment is executed. Variable assignment to an undeclared variable implicitly creates it as a &lt;strong&gt;global&lt;/strong&gt; variable when the assignment is executed. That means that any undeclared variable (but assigned) is a global variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;globalVar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;functionScopedVar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;78&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;globalVar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Output: 34&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;functionScopedVar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// throws a ReferenceError&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;This is why it is always good to declare variables regardless of whether they are of function or global scope.&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pushpin-es5-strict-mode"&gt;
  &lt;/a&gt;
  📌 ES5 Strict Mode
&lt;/h4&gt;

&lt;p&gt;Introduced in EcmaScript 5, strict mode is a way to opt in to a restricted variant of JS. Strict mode make several changes to normal JS semantics&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Eliminates silent errors by throwing them&lt;/li&gt;
&lt;li&gt;Prohibits syntax that might be defined in future version of ES&lt;/li&gt;
&lt;li&gt;Fix mistakes that make JS engines perform optimizations&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With regards to hoisting, using strict mode will not tolerate the use of variables before they are declared. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pushpin-function-hoisting"&gt;
  &lt;/a&gt;
  📌 Function Hoisting &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;JS functions can be declarations or expressions. &lt;/p&gt;

&lt;p&gt;Function declarations are hoisted completely to the top. That is why a function can be invoked even before it is declared.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;amIHoisted&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Output: "Yes I am."&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;amIHoisted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Yes I am.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Function expressions, are &lt;strong&gt;NOT&lt;/strong&gt; hoisted. This is because of the precedence order of JS functions and variables. The snippet below would throw a &lt;code&gt;TypeError&lt;/code&gt; because the hoisted variable &lt;code&gt;amIHoisted&lt;/code&gt; is treated as a variable, not a function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;amIHoisted&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//Output: "TypeError: expression is not a function&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;amIHoisted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;No I am not.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code execution of the code above would somehow look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;amIHoisted&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="nx"&gt;amIHoisted&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
&lt;span class="cm"&gt;/*Function is invoked, but from the interpreter's perspective it is not a function. 
Thus would throw a type error
*/&lt;/span&gt;
&lt;span class="nx"&gt;amIHoisted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;No I am not.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/*The variable is assigned as a function late. It was already invoked before the assignment.*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#pushpin-hoisting-order-of-precedence"&gt;
  &lt;/a&gt;
  📌 Hoisting Order of Precedence
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Variable assignment takes precedence over function declaration. 
The type of &lt;code&gt;amIABoolean&lt;/code&gt; would be a &lt;code&gt;boolean&lt;/code&gt; because the variable is assigned to a value &lt;code&gt;true&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;amIABoolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;amIABoolean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;No.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;amIABoolean&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Output: boolean&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Function declarations take precedent over variable declarations. From the snippet below, the type of &lt;code&gt;amIAFunction&lt;/code&gt; would be a &lt;code&gt;function&lt;/code&gt; because on the first line, the variable is only declared, not assigned. Since function declarations takes precedence, it is resolved to type &lt;code&gt;function&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;amIAFunction&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;amIAFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Yes.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;amIAFunction&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Output: function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Hoisting in JS  is the compiler splitting variable declaration and initialization and moving only the declarations to the top of the code. So even though the functions and variables are called/used before they are written, the code still works. This happens because of how context execution works in Javascript.&lt;/p&gt;

&lt;p&gt;Note that only declarations are hoisted, &lt;strong&gt;not initializations&lt;/strong&gt;. For variables declared with the &lt;code&gt;var&lt;/code&gt; keyword, the default value would be &lt;code&gt;undefined&lt;/code&gt;. For &lt;code&gt;let&lt;/code&gt; variables, until the line in which they are initialized is executed, any code that access them, will throw an exception. These variables are said to be in a "temporal dead zone" (TDZ) from the start of the block until the initialization has completed. Accessing unintialized &lt;code&gt;let&lt;/code&gt; variables would result to a &lt;code&gt;ReferenceError&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That is it for the basics of JS hoisting, my fifth WIL(&lt;em&gt;What I Learned&lt;/em&gt;) dev post 😄.&lt;/p&gt;

&lt;p&gt;As always, cheers to lifelong learning 🍷! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  [REFERENCES]
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Hoisting"&gt;MDN Web Docs : Hoisting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/understanding-hoisting-in-javascript"&gt;Understanding Hoisting in Javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.javascripttutorial.net/javascript-execution-context/"&gt;Javascript Context Execution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz"&gt;Temporal Dead Zone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode"&gt;Strict Mode&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>useFetch - React hook</title>
      <author>Takuya Kikuchi</author>
      <pubDate>Tue, 27 Jul 2021 00:53:56 +0000</pubDate>
      <link>https://dev.to/takuyakikuchi/useclickoutside-usefetch-4dh6</link>
      <guid>https://dev.to/takuyakikuchi/useclickoutside-usefetch-4dh6</guid>
      <description>&lt;p&gt;This is a series of tying out the custom hooks introduced in the really good article by &lt;a href="https://thesmartcoder.dev/author/team/"&gt;team&lt;/a&gt; about useful React custom hooks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://thesmartcoder.dev/awesome-react-hooks/"&gt;8 Awesome React Hooks&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usefetch"&gt;
  &lt;/a&gt;
  useFetch
&lt;/h3&gt;

&lt;p&gt;Fetching  a character from the Star Wars API and render its name in a declarative way&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/9b9th"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codesandbox</category>
      <category>react</category>
      <category>webdev</category>
      <category>frontend</category>
    </item>
    <item>
      <title>5 Useful JS Number Methods</title>
      <author>Aya Bouchiha</author>
      <pubDate>Tue, 27 Jul 2021 00:51:39 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/5-useful-js-number-methods-43l4</link>
      <guid>https://dev.to/ayabouchiha/5-useful-js-number-methods-43l4</guid>
      <description>&lt;p&gt;Hi everybody, I'm &lt;a href="https://t.me/AyaBouchiha"&gt;Aya Bouchiha&lt;/a&gt;, todya, we will discuss  &lt;strong&gt;5 useful Number Object Methods&lt;/strong&gt; &lt;em&gt;toFixed()&lt;/em&gt; and &lt;em&gt;isInteger()&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#numberprototypetofixed"&gt;
  &lt;/a&gt;
  Number.prototype.toFixed()
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;toFixed(digits)&lt;/em&gt; returns as a string the specified number rounded to a given number of decimals.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;742&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// 742.00&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;20.248&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// 20.2&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// 3.142&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#numberisinteger"&gt;
  &lt;/a&gt;
  Number.isInteger()
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;isInteger(num)&lt;/em&gt;: is a static method used to check if the given value is an integer.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;400.00&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;657.1540&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#numberisnan"&gt;
  &lt;/a&gt;
  Number.isNaN()
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;isNaN(num)&lt;/em&gt; : is a static method used to check if the given value is not a number&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Aya Bouchiha&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;NaN&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;NaN&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;NaN&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;([]));&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#numberprototypetoprecision"&gt;
  &lt;/a&gt;
  Number.prototype.toPrecision()
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;toPrecision(precision)&lt;/em&gt;: this method formats the specified number to a the given precision  Where &lt;code&gt;1 &amp;lt;= precision  &amp;lt;= 100&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toPrecision&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;//3.141592653589793&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toPrecision&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toPrecision&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// 3.14&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toPrecision&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#numberisfinite"&gt;
  &lt;/a&gt;
  Number.isFinite()
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;isFinite(num)&lt;/em&gt;: is a static method that checks if the given number is finite.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;isFinite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;isFinite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;isFinite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Aya Bouchiha&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;isFinite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;Infinity&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;isFinite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kc"&gt;Infinity&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;isFinite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;NaN&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;toFixed(digits)&lt;/em&gt; returns as a string the specified number rounded to a given number of decimals.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;isInteger(num)&lt;/em&gt;: checks if the given value is an integer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;isNaN(num)&lt;/em&gt;: checks if the given value is not a number.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;toPrecision(len)&lt;/em&gt;:  formats the specified number to the given precision.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;isFinite(num)&lt;/em&gt;: checks if the given number is finite.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.w3schools.com/"&gt;www.w3schools.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://developer.mozilla.org/en-US/"&gt;www.developer.mozilla.org&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To Contact Me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;email:&lt;a href="mailto:developer.aya.b@gmail.com"&gt;developer.aya.b@gmail.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;telegram: &lt;a href="https://t.me/AyaBouchiha"&gt;Aya Bouchiha&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have a great day&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Semantic Versioning and Changelog</title>
      <author>Walter Nascimento</author>
      <pubDate>Tue, 27 Jul 2021 00:31:09 +0000</pubDate>
      <link>https://dev.to/walternascimentobarroso/semantic-versioning-and-changelog-32ad</link>
      <guid>https://dev.to/walternascimentobarroso/semantic-versioning-and-changelog-32ad</guid>
      <description>&lt;p&gt;&lt;a href="https://medium.com/walternascimentobarroso-pt/versionamento-sem%C3%A2ntico-e-changelog-74f3ed425034"&gt;[Clique aqui para ler em português]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All projects should have a semantic versioning, so it would facilitate the use of specific versions as dependencies and old versions for specific platforms or even avoid that bug that appeared in the X.Y.Z version of the project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#semantic-versioning"&gt;
  &lt;/a&gt;
  Semantic Versioning
&lt;/h2&gt;

&lt;p&gt;Simple set of rules and requirements that determine how version numbers are assigned and in turn incremented.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;MAJOR:&lt;/strong&gt; when you make incompatible API changes;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;MINOR:&lt;/strong&gt; when you add backward-compatible functionality;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;PATCH:&lt;/strong&gt; when you fix backward compatible bugs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can read more about the specification at: &lt;a href="https://semver.org/"&gt;https://semver.org/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#changelog"&gt;
  &lt;/a&gt;
  Changelog
&lt;/h2&gt;

&lt;p&gt;When you are going to update a project and want to know what has changed, you go after all the previous releases and the changelog is a file that makes this easier for you and your users.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-make-a-good-changelog"&gt;
  &lt;/a&gt;
  How to make a good changelog?
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#fundamental-principles"&gt;
  &lt;/a&gt;
  Fundamental principles
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Changelogs are for humans, not machines.&lt;/li&gt;
&lt;li&gt;There must be an entry for each version.&lt;/li&gt;
&lt;li&gt;Changes of the same type must be grouped together.&lt;/li&gt;
&lt;li&gt;Versions and sections must be linked (with links).&lt;/li&gt;
&lt;li&gt;The latest version comes first.&lt;/li&gt;
&lt;li&gt;The release date of each version is displayed.&lt;/li&gt;
&lt;li&gt;Mention whether you follow semantic versioning.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#types-of-changes"&gt;
  &lt;/a&gt;
  Types of changes
&lt;/h4&gt;

&lt;p&gt;Create your tags to help view the changelog, if you need help here are some patterns:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;You can read more about it at: &lt;a href="https://keepachangelog.com/"&gt;https://keepachangelog.com/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h2&gt;

&lt;p&gt;If you have any questions, complaints or tips, you can leave them here in the comments. I will be happy to answer!&lt;/p&gt;

&lt;p&gt;😊😊See you! 😊😊&lt;/p&gt;

</description>
      <category>changelog</category>
      <category>project</category>
      <category>management</category>
    </item>
    <item>
      <title>Introducing Grok (VSCode Extension) - Mind Map for Development</title>
      <author>James Wu</author>
      <pubDate>Tue, 27 Jul 2021 00:26:10 +0000</pubDate>
      <link>https://dev.to/james_c_wu/introducing-grok-vscode-extension-mind-map-for-development-4ogh</link>
      <guid>https://dev.to/james_c_wu/introducing-grok-vscode-extension-mind-map-for-development-4ogh</guid>
      <description>&lt;p&gt;Hi everyone, &lt;br&gt;
We built Grok internally for our engineering team at our startup, AdaptiLab, and we've really enjoyed using and improving it. That startup was recently acquired by CoderPad and after receiving positive feedback from devs from other companies using the tool, we decided to start working on Grok fulltime.&lt;/p&gt;

&lt;p&gt;We recently release a public version of Grok to the VSCode marketplace. Grok helps developer teams organize and understand their codebase. You can create visual and navigable "Flows" in the IDE with code, markdown, and image cells. Use these Flows to track work and context while developing or refactoring, and share Flows with teammates or in PRs to give information and explain decisions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u4KNxjED--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ghw236ij1bblgmmmdgk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u4KNxjED--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ghw236ij1bblgmmmdgk.png" alt="Graph Flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We recently released a feature that will allow users to save Flows directly to the repo (as a .grok.json file). Once this file is committed, teammates can pull from the repo and view or edit the Flow from their Grok extension. This allows asynchronous collaboration on top of Grok Flows. &lt;/p&gt;

&lt;p&gt;If you'd like to learn more about Grok, please checkout our website at: &lt;a href="https://www.trygrok.com/"&gt;https://www.trygrok.com/&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;You can also download Grok directly from the VSCode Marketplace at: &lt;a href="https://marketplace.visualstudio.com/items?itemName=Adaptilab.grok"&gt;https://marketplace.visualstudio.com/items?itemName=Adaptilab.grok&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please let me know if you have any questions and we'd really appreciate any feedback on ways we can improve the tool. Thanks!&lt;/p&gt;

</description>
      <category>tooling</category>
      <category>vscode</category>
      <category>productivity</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Rails ActiveRecord Data Types</title>
      <author>Amirul Asyraf</author>
      <pubDate>Tue, 27 Jul 2021 00:23:38 +0000</pubDate>
      <link>https://dev.to/asyraf/rails-activerecord-data-types-32ip</link>
      <guid>https://dev.to/asyraf/rails-activerecord-data-types-32ip</guid>
      <description>&lt;p&gt;I usually curios to know about &lt;strong&gt;Data Types for ActiveRecord&lt;/strong&gt;, but the &lt;a href="https://guides.rubyonrails.org/active_record_migrations.html"&gt;Active Record Migration&lt;/a&gt; documentation itself does not have that information.&lt;/p&gt;

&lt;p&gt;So, I do some Google search and here is the TL;DR.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-activerecord-data-types-available-in-rails-6"&gt;
  &lt;/a&gt;
  The ActiveRecord data types available in Rails 6;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:primary_key&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:string&lt;/code&gt;: &lt;strong&gt;short text&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:text&lt;/code&gt;: &lt;strong&gt;long text&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:integer&lt;/code&gt;: &lt;strong&gt;whole numbers&lt;/strong&gt; [-4, 0, 9, 772]&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:float&lt;/code&gt;: &lt;strong&gt;double-precision floating-point numbers&lt;/strong&gt; [3244.90]&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:decimal&lt;/code&gt;: &lt;strong&gt;high-precision floating-point numbers&lt;/strong&gt; [3244.2342343789212]&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:datetime&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:time&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:date&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:binary&lt;/code&gt;: &lt;strong&gt;1 / 0&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:boolean&lt;/code&gt;: &lt;strong&gt;true or false&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These data types are used in instances such as &lt;strong&gt;migrations&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change&lt;/span&gt;
  &lt;span class="n"&gt;create_table&lt;/span&gt; &lt;span class="ss"&gt;:categories&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt; &lt;span class="ss"&gt;:title&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;boolean&lt;/span&gt; &lt;span class="ss"&gt;:is_subcategory&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt; &lt;span class="ss"&gt;:permalink&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;timestamps&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#specific-dbms-data-type"&gt;
  &lt;/a&gt;
  Specific DBMS Data Type
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/rails/rails/blob/25f6a8e84fb6c27f489fc3e593656ddb72f25613/activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb#L16"&gt;&lt;strong&gt;MySQL&lt;/strong&gt; Data Types&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;NATIVE_DATABASE_TYPES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="ss"&gt;primary_key: &lt;/span&gt;&lt;span class="s2"&gt;"bigint auto_increment PRIMARY KEY"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;string:      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"varchar"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;limit: &lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;text:        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"text"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;integer:     &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"int"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;limit: &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;float:       &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"float"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;limit: &lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;decimal:     &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"decimal"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;datetime:    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"datetime"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;timestamp:   &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"timestamp"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;time:        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"time"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;date:        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"date"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;binary:      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"blob"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;blob:        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"blob"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;boolean:     &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"tinyint"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;limit: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;json:        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"json"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://github.com/rails/rails/blob/25f6a8e84fb6c27f489fc3e593656ddb72f25613/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb#L119"&gt;&lt;strong&gt;PostgreSQL&lt;/strong&gt; Data Types&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;NATIVE_DATABASE_TYPES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="ss"&gt;primary_key: &lt;/span&gt;&lt;span class="s2"&gt;"bigserial primary key"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;string:      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"character varying"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;text:        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"text"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;integer:     &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"integer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;limit: &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;float:       &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"float"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;decimal:     &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"decimal"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;datetime:    &lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="c1"&gt;# set dynamically based on datetime_type&lt;/span&gt;
        &lt;span class="ss"&gt;timestamp:   &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"timestamp"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;timestamptz: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"timestamptz"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;time:        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"time"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;date:        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"date"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;daterange:   &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"daterange"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;numrange:    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"numrange"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;tsrange:     &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"tsrange"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;tstzrange:   &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"tstzrange"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;int4range:   &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"int4range"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;int8range:   &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"int8range"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;binary:      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"bytea"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;boolean:     &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"boolean"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;xml:         &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"xml"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;tsvector:    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"tsvector"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;hstore:      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"hstore"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;inet:        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"inet"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;cidr:        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"cidr"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;macaddr:     &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"macaddr"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;uuid:        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"uuid"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;json:        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"json"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;jsonb:       &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"jsonb"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;ltree:       &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"ltree"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;citext:      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"citext"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;point:       &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"point"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;line:        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"line"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;lseg:        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"lseg"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;box:         &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"box"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;path:        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"path"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;polygon:     &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"polygon"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;circle:      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"circle"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;bit:         &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"bit"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;bit_varying: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"bit varying"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;money:       &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"money"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;interval:    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"interval"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="ss"&gt;oid:         &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"oid"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#rails-data-types-mapping-to-different-db-data-types"&gt;
  &lt;/a&gt;
  &lt;a href="https://stackoverflow.com/questions/17918117/rails-4-list-of-available-datatypes/25702629#25702629"&gt;Rails data types mapping to different DB data types:&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It is important to know not only the types but the mapping of these types to the database types, too:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IzfHqfqv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/data_types_1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IzfHqfqv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/data_types_1.png" alt="Data type mapping 1"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yVhmFuoW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/data_types_2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yVhmFuoW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/data_types_2.png" alt="Data type mapping 2"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#the-easy-way"&gt;
  &lt;/a&gt;
  The easy way ✌️
&lt;/h3&gt;

&lt;p&gt;You can access this list everytime you want (even if you don't have Internet access) through:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;generate&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The end&lt;/p&gt;




&lt;p&gt;resources;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://michaelsoolee.com/rails-activerecord-data-types/"&gt;1&lt;/a&gt; &lt;a href="https://blog.corsego.com/rails-activerecord-data-types"&gt;2&lt;/a&gt; &lt;a href="https://blog.ifyouseewendy.com/blog/2015/08/10/data-types-in-rails/"&gt;3&lt;/a&gt; &lt;a href="https://stackoverflow.com/questions/17918117/rails-4-list-of-available-datatypes"&gt;4&lt;/a&gt; &lt;a href="https://stackoverflow.com/questions/3956186/where-is-the-documentation-page-for-activerecord-data-types"&gt;5&lt;/a&gt; &lt;a href="https://edgeguides.rubyonrails.org/active_record_postgresql.html"&gt;6&lt;/a&gt; &lt;a href="https://stackoverflow.com/a/30132729/12595487"&gt;7&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>database</category>
    </item>
  </channel>
</rss>
