<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Fastify CRUD API with Authentication</title>
      <author>Elijah Trillionz</author>
      <pubDate>Thu, 05 Aug 2021 10:30:14 +0000</pubDate>
      <link>https://dev.to/elijahtrillionz/fastify-crud-api-with-authentication-2p</link>
      <guid>https://dev.to/elijahtrillionz/fastify-crud-api-with-authentication-2p</guid>
      <description>&lt;p&gt;Hi there! Today's article is a continuation of my previous article on Fastify.&lt;/p&gt;

&lt;p&gt;We will improve on our &lt;a href="https://dev.to/elijahtrillionz/build-a-crud-api-with-fastify-688"&gt;CRUD API&lt;/a&gt; in this article. You should check out the previous article else I don't think you'll be able to follow along.&lt;/p&gt;

&lt;p&gt;Or you can just clone &lt;a href="https://github.com/Elijah-trillionz/fastify-api"&gt;this repo&lt;/a&gt;, and follow along.&lt;/p&gt;

&lt;p&gt;What are we introducing? Today's article is going to focus on authentication. How would we easily protect routes in Fastify? &lt;a href="https://www.fastify.io/docs/latest/"&gt;Fastify's documentation&lt;/a&gt; is very detailed, I recommend you go through the docs after reading this article.&lt;/p&gt;

&lt;p&gt;Quickly let's go into our app and get things started. If you cloned the API's repo, you wanna make sure you run &lt;code&gt;npm install&lt;/code&gt; to install all dependencies and then test all endpoints in the &lt;em&gt;test.http&lt;/em&gt; file to ensure it's working.&lt;/p&gt;

&lt;p&gt;In the previous article, I didn't talk about installing &lt;strong&gt;fastify-auth&lt;/strong&gt;. But in the API's repo, &lt;strong&gt;fastify-auth&lt;/strong&gt; is a dependency along with several others like &lt;strong&gt;jsonwebtoken&lt;/strong&gt;, &lt;strong&gt;fastify-swagger&lt;/strong&gt; (which we will get to in a second). So if you haven't installed the above dependencies you should do so now because we will be using them in this article.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's get started&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-and-registering-the-admins-routes"&gt;
  &lt;/a&gt;
  Creating and Registering the Admins Routes
&lt;/h2&gt;

&lt;p&gt;The first thing we want to do before protecting routes is to have a form of registering and logging in admins to the app (when connected to the front-end of course). We will have a route for registering admins, and for logging them in.&lt;/p&gt;

&lt;p&gt;We are not connecting this API to a database, so like we did with the &lt;code&gt;posts&lt;/code&gt; array in &lt;em&gt;cloud/posts.js&lt;/em&gt;, that is how we would do the same for the admins.&lt;/p&gt;

&lt;p&gt;We will have a simple array of admins in a file, have it exported and used whenever and however we want. The array can be empty initially or you can add placeholders. I will leave mine empty.&lt;/p&gt;

&lt;p&gt;When a user creates an account, his/her details are appended to the array. As soon as he/she logs in a token will be generated for him/her. It is with this token he/she can access protected routes like that of deleting posts.&lt;/p&gt;

&lt;p&gt;Simple right!&lt;/p&gt;

&lt;p&gt;Alright then, let's start by creating our database array. In the &lt;strong&gt;cloud&lt;/strong&gt; folder, create a file called &lt;em&gt;admins.js&lt;/em&gt;, and add the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;admins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;johndoe_360&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;johndoe@gmail.com_&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;341&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sarahjohnson&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sarah@websitename.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sarahCodes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;admins&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;strong&gt;routes&lt;/strong&gt; folder, create a file called &lt;em&gt;admins.js&lt;/em&gt; and create a function called &lt;code&gt;adminRoute&lt;/code&gt;. This function is our route plugin that we will register in &lt;em&gt;server.js&lt;/em&gt; in a minute. This function usually takes three parameters i.e &lt;em&gt;fastify&lt;/em&gt;, &lt;em&gt;options&lt;/em&gt;, and &lt;em&gt;done&lt;/em&gt;. Find more explanation on this in the previous article or in Fastify's docs.&lt;/p&gt;

&lt;p&gt;We will create all of our admins' routes in this function. And just before the closure of the function, we wanna make sure we call &lt;code&gt;done()&lt;/code&gt; to signify that we are done.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;adminRoutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// all our routes will appear here&lt;/span&gt;

  &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;adminRoutes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before we start creating routes, let's register this &lt;code&gt;adminRoutes&lt;/code&gt; in &lt;em&gt;server.js.&lt;/em&gt; Just after the &lt;code&gt;fastify.register(require('./routes/posts'));&lt;/code&gt; add this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./routes/admins&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That should register your route and get you going, you can test it's working with a simple route e.g&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the code above inside the &lt;code&gt;adminRoutes&lt;/code&gt; function in &lt;em&gt;routes/admins.js&lt;/em&gt; and test your enpoint.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-all-admins"&gt;
  &lt;/a&gt;
  Get all Admins
&lt;/h2&gt;

&lt;p&gt;This may not be useful in a real-time app, but just in case you want to get all admins, we can use the &lt;code&gt;GET&lt;/code&gt; method to do that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-the-route-in-routesadminsjs"&gt;
  &lt;/a&gt;
  Create the Route in &lt;em&gt;routes/admins.js&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;In place of our test route we made in &lt;code&gt;adminRoutes&lt;/code&gt; function, we should add this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/admins&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getAdminsOpts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's create the &lt;code&gt;getAdminsOpts&lt;/code&gt; object. This object as always should go outside of the &lt;code&gt;adminRoutes&lt;/code&gt; function. Create and add the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getAdminsOpts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getAdminsSchema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getAdminsHandler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-the-schema-in-schemasadminsjs"&gt;
  &lt;/a&gt;
  Create the Schema in &lt;em&gt;schemas/admins.js&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;This file has not been created yet, so we will create it now. In &lt;strong&gt;controllers/schemas&lt;/strong&gt; folder, create a file called a &lt;em&gt;admins.js&lt;/em&gt;. In this file create an object called &lt;code&gt;getAdminsOpts&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With this schema, we want to filter out what to send to the client from our array of admins. For example, you wouldn't want to send the password of each admin to the client. So this is the easy way to do it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getAdminsSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;array&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;typeString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// typeString will be created soon&lt;/span&gt;
          &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;typeString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At the beginning of this file, create a variable called &lt;code&gt;typeString&lt;/code&gt; and assign &lt;code&gt;{ type: 'string' }&lt;/code&gt; to it.&lt;/p&gt;

&lt;p&gt;Now let's export &lt;code&gt;getAdminsSchema&lt;/code&gt; out of the &lt;em&gt;schemas/admins.js&lt;/em&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getAdminsSchema&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-the-handler-in-handlersadminsjs"&gt;
  &lt;/a&gt;
  Create the Handler in &lt;em&gt;handlers/admins.js&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;This file has not been created yet, so let's do that now. In &lt;strong&gt;controllers/handlers&lt;/strong&gt; folder, create a file called &lt;em&gt;admins.js&lt;/em&gt;. This file will have all the handler functions of our admin routes.&lt;/p&gt;

&lt;p&gt;Let's create our first handler, which will return all the admins we have, then we will export it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;admins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../cloud/admins&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// import the admins array&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getAdminsHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;admins&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getAdminsHandler&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Import &lt;code&gt;getAdminsHandler&lt;/code&gt; and &lt;code&gt;getAdminsSchema&lt;/code&gt; into your &lt;em&gt;routes/admins.js&lt;/em&gt; as objects.&lt;/p&gt;

&lt;p&gt;Now save your files and test your new route.&lt;/p&gt;

&lt;p&gt;There is a route I am going to skip, that is getting an admin, if this API was for production, I definitely would have made it. But it's not so we wouldn't need it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#register-an-admin"&gt;
  &lt;/a&gt;
  Register an Admin
&lt;/h2&gt;

&lt;p&gt;Let's create accounts for our new admins. So far I believe you have grasped a lot about creating routes with Fastify, so I am going to speed up the process a little bit.&lt;/p&gt;

&lt;p&gt;I will just show you what your schema should look like and what your handler should do.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Schema&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;registerAdminSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;typeString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;typeString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;typeString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;typeString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Handler&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;registerAdminHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;admins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;admins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// you can hash the password if you want&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Account created successfully&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#log-in-admin"&gt;
  &lt;/a&gt;
  Log in Admin
&lt;/h2&gt;

&lt;p&gt;When we log in an admin, we would send a token to the client. This token will be generated using JsonWebToken (JWT). It is only with this access token the user can access protected (private) routes.&lt;/p&gt;

&lt;p&gt;There are currently no protected routes, but we would make some posts' routes private in a moment.&lt;/p&gt;

&lt;p&gt;First, let's see what the schema for this route should look like and how the handler should function&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Schema&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loginAdminSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;typeString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;typeString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;typeString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Handler&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// at the beginning of the file, import jwt and assign to a variable&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jwt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jsonwebtoken&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loginAdminHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;admin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;admins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;})[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This admin doesn't exist&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// check if password is correct&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Invalid credentials&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// sign a token&lt;/span&gt;
  &lt;span class="nx"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my_jwt_secret&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;expiresIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;86400&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

      &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first thing we did was bring in jwt, you should install it first if you haven't. Use &lt;code&gt;npm i jsonwebtoken&lt;/code&gt; to install it.&lt;br&gt;
Then we did some verification to make sure the user exists and the given password is the correct password.&lt;br&gt;
Lastly, we signed a token that will expire in three days with a payload of just the admin's id, you can add username and scope if you want.&lt;/p&gt;

&lt;p&gt;If we had used it with a database and then had to get the data asynchronously using &lt;code&gt;async/await&lt;/code&gt; we would have run into some Fastify errors. This is what I mean&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loginAdminHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;admin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Admins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="c1"&gt;// assumming we used mongodb&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This admin doesn't exist&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// check if password is correct&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Invalid credentials&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// sign a token&lt;/span&gt;
    &lt;span class="nx"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my_jwt_secret&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;expiresIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;86400&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Server error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should note that the token we are signing is being done asynchronously. So that means our &lt;code&gt;reply.send&lt;/code&gt; is inside an async function that is inside another async function. This can confuse Fastify to give you an error like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gy5efjyk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s6b2t7khd2rdli0s5iov.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gy5efjyk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s6b2t7khd2rdli0s5iov.png" alt="Fastify asyncawait error"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Solving this is simple. We just need to tell Fastify to wait for a reply in an async function. We usually do this in the root async function i.e down the try block add &lt;code&gt;await reply&lt;/code&gt;. That will solve the problem.&lt;/p&gt;

&lt;p&gt;So you would have something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loginAdminHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;admin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Admins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="c1"&gt;// assumming we used mongodb&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This admin doesn't exist&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// check if password is correct&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Invalid credentials&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// sign a token&lt;/span&gt;
    &lt;span class="nx"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my_jwt_secret&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;expiresIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;86400&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Server error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#making-private-routes"&gt;
  &lt;/a&gt;
  Making Private Routes
&lt;/h2&gt;

&lt;p&gt;This is the simple part. Some of our routes are going to be restricted to a specific type of users. These routes are from the last article I made. Go check it out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Private Routes&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;/api/posts/new&lt;/em&gt; : adding a post&lt;br&gt;
&lt;em&gt;/api/posts/edit/:id&lt;/em&gt; : updating a post&lt;br&gt;
&lt;em&gt;/api/posts/:id&lt;/em&gt; : deleting a post&lt;/p&gt;

&lt;p&gt;These are the routes we will make private.&lt;/p&gt;

&lt;p&gt;What makes a route private is the authentication that restricts unauthorized users from gaining access. If access is granted, these users can perform any action within the routes with the same authentication.&lt;/p&gt;

&lt;p&gt;This means that we would need to authenticate the user for each of our private routes and this authentication needs to be done before any action can be performed.&lt;/p&gt;

&lt;p&gt;With Fastify this is easy, Fastify has a plugin for easier authentication, and this authentication will be done in the preHandler function (in our routes opts).&lt;/p&gt;

&lt;p&gt;With the fastify-auth plugin, we will tell fastify that whoever doesn't have a token should be rejected.&lt;/p&gt;

&lt;p&gt;To do that first thing we'd do is register the &lt;code&gt;fastify-auth&lt;/code&gt; plugin using any Fastify instance.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// in routes/posts.js, at the bottom of the postRoutes function add this&lt;/span&gt;
&lt;span class="nx"&gt;fastify&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fastify-auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;after&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;privatePostRoutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// we will create the privatePostRoutes later&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next thing is to create an authentication function. This function is what Fastify will use to validate (authenticate) the user. In our app, we need the user to have a valid token. This token would come from the request header&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// create this function in an auth folder in controllers and export it&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;verifyToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my_jwt_secret&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;decoded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Unauthorized&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;decoded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// pass in the user's info&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because we passed an error to done, Fastify will not give that user any access.&lt;/p&gt;

&lt;p&gt;You would notice we didn't check if there is a token before verifying the token. This is because in our route's schema we restrict whoever doesn't have a token as part of the request.&lt;/p&gt;

&lt;p&gt;Now let's apply the &lt;code&gt;verifyToken&lt;/code&gt; function to a route. You should do this in the &lt;code&gt;preHandler&lt;/code&gt; property in routes opts. This is the function Fastify will run first before running the &lt;code&gt;handler&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Import the &lt;code&gt;verifyToken&lt;/code&gt; into our &lt;em&gt;routes/posts.js&lt;/em&gt; file. Create a function outside of the &lt;code&gt;postRoutes&lt;/code&gt; function called &lt;code&gt;privatePostRoutes&lt;/code&gt;, pass fastify as the only parameter. Now cut and paste all our private routes from &lt;code&gt;postRoutes&lt;/code&gt; to &lt;code&gt;privatePostRoutes&lt;/code&gt;. You should have something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postRoutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// get all posts&lt;/span&gt;
  &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getPostsOpts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// get a post&lt;/span&gt;
  &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/posts/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getPostOpts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;fastify&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fastify-auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;after&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;privatePostRoutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;privatePostRoutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// create a new post&lt;/span&gt;
  &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/posts/new&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;addPostOpts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// update a post&lt;/span&gt;
  &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/posts/edit/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updatePostOpts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// delete a post&lt;/span&gt;
  &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/posts/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;deletePostOpts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, let's add the preHandlers to our private route opts. Each of our preHandlers will contain a function from &lt;code&gt;fastify-auth&lt;/code&gt; that checks if the user is authenticated using our &lt;code&gt;verifyToken&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;privatePostRoutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// create a new post&lt;/span&gt;
  &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/posts/new&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;preHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;verifyToken&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;addPostOpts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// update a post&lt;/span&gt;
  &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/posts/edit/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;preHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;verifyToken&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;updatePostOpts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// delete a post&lt;/span&gt;
  &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/posts/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;preHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;verifyToken&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;deletePostOpts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When a user is unauthorized, Fastify will return a 401 error with our customized message. If you are going to use the same auth function for more than one route, instead of importing it into each of the routes files, you can make the auth function available to every file in the API using &lt;code&gt;fastify.decorate&lt;/code&gt;. In &lt;code&gt;server.js&lt;/code&gt; import &lt;code&gt;verifyToken&lt;/code&gt; and add this before your routes registering&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;decorate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;verifyToken&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;verifyToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// the string can be any name you like&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can remove the &lt;code&gt;verifyToken&lt;/code&gt; function we created in &lt;em&gt;routes/posts.js&lt;/em&gt; and add this to our preHandlers&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;privatePostRoutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// create a new post&lt;/span&gt;
  &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/posts/new&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;preHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;verifyToken&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;addPostOpts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// same thing goes for the other routes&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Something we should add is the headers schema that will return an error whenever there is no token provided as part of the request's header.&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;schemas/posts.js&lt;/em&gt;, create an object called &lt;code&gt;headerSchema&lt;/code&gt;. Pass in the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;headerSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;token&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;typeString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For every of our private route's schema, add the &lt;code&gt;headerScheema&lt;/code&gt; object like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addPostSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;headerSchema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;typeString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;typeString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;typeString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// sending a simple message as string&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your API is ready to go. Finally, let's talk about fastify-swagger. Fastify-swagger basically gives us documentation of our API, the endpoints, methods, and we can also test our endpoints with it.&lt;/p&gt;

&lt;p&gt;We will register it as a plugin and then we are good to go. In our &lt;em&gt;server.js&lt;/em&gt; file, add this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fastify-swagger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;exposeRoute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;routePrefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/docs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;swagger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;info&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Fastify-api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Visit &lt;code&gt;http://localhost:your-port/docs&lt;/code&gt; to see the docs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Great job if you finished this project. Now you should start building more with Fastify. &lt;a href="https://github.com/Elijah-trillionz/fastify-auth-api"&gt;Source of our Fastify CRUD API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading. See you next time. Don't forget to &lt;a href="https://buymeacoffee/elijahtrillionz"&gt;buy me a coffee&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>codenewbie</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Free and open source Laravel admin dashboard interface</title>
      <author>Zoltán Szőgyényi</author>
      <pubDate>Thu, 05 Aug 2021 10:23:39 +0000</pubDate>
      <link>https://dev.to/themesberg/free-and-open-source-laravel-admin-dashboard-interface-2ena</link>
      <guid>https://dev.to/themesberg/free-and-open-source-laravel-admin-dashboard-interface-2ena</guid>
      <description>&lt;p&gt;&lt;a href="https://themesberg.com/product/laravel/volt-admin-dashboard-template"&gt;Volt Laravel Dashboard&lt;/a&gt; features dozens of handcrafted UI elements tailored for Bootstrap 5 and an out of the box Laravel backend. &lt;/p&gt;

&lt;p&gt;The Livewire integration allows you to build dynamic interfaces easier without leaving the comfort of your favourite framework. &lt;/p&gt;

&lt;p&gt;If you combine this even further with Alpine.js, you get the perfect combo for your next big project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-higlights"&gt;
  &lt;/a&gt;
  Project higlights
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;100+ handcrafted UI components tailored for Bootstrap 5 with Vanilla JS. This means buttons, alerts, modals, datepickers and everything in between&lt;/li&gt;
&lt;li&gt;11 example pages to get you started&lt;/li&gt;
&lt;li&gt;3 lightweight plugins: datepicker, notification and charts library&lt;/li&gt;
&lt;li&gt;Sass files &amp;amp; Gulp commands&lt;/li&gt;
&lt;li&gt;fully-functional authentication system, register and user profile editing features built with Laravel
Livewire &amp;amp; Alpine.js integration&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#free-for-personal-and-commercial-projects"&gt;
  &lt;/a&gt;
  Free for personal and commercial projects
&lt;/h2&gt;

&lt;p&gt;Whether you're working on a side project or delivering to a client, with Volt Dashboard Laravel you can do both. Volt Dashboard Laravel is &lt;a href="https://github.com/themesberg/volt-laravel-dashboard"&gt;released under MIT license&lt;/a&gt;, so you can use it for personal and commercial projects for free. Just start coding.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;p&gt;If you don't already have an Apache local environment with PHP and MySQL, use one of the following links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Windows: &lt;a href="https://updivision.com/blog/post/beginner-s-guide-to-setting-up-your-local-development-environment-on-windows"&gt;https://updivision.com/blog/post/beginner-s-guide-to-setting-up-your-local-development-environment-on-windows&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Linux: &lt;a href="https://howtoubuntu.org/how-to-install-lamp-on-ubuntu"&gt;https://howtoubuntu.org/how-to-install-lamp-on-ubuntu&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Mac: &lt;a href="https://wpshout.com/quick-guides/how-to-install-mamp-on-your-mac/"&gt;https://wpshout.com/quick-guides/how-to-install-mamp-on-your-mac/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, you will need to install Composer: &lt;a href="https://getcomposer.org/doc/00-intro.md"&gt;https://getcomposer.org/doc/00-intro.md&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#laravel"&gt;
  &lt;/a&gt;
  Laravel
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Download the project’s zip then copy and paste volt-dashboard-master folder in your projects folder. Rename the folder to your project’s name&lt;/li&gt;
&lt;li&gt;Make sure you have Node and Composer locally installed.
3.Run the following command in order to download all the project dependencies. &lt;code&gt;composer install&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;In your terminal run &lt;code&gt;npm install&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Copy &lt;code&gt;.env.example&lt;/code&gt; to &lt;code&gt;.env&lt;/code&gt; and updated the configurations (mainly the database configuration)&lt;/li&gt;
&lt;li&gt;In your terminal run &lt;code&gt;php artisan key:generate&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;php artisan migrate --seed&lt;/code&gt; to create the database tables and seed the roles and users tables&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;php artisan storage:link&lt;/code&gt; to create the storage symlink (if you are using &lt;strong&gt;Vagrant&lt;/strong&gt; with &lt;strong&gt;Homestead&lt;/strong&gt; for development, remember to ssh into your virtual machine and run the command from there).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;Register a user or login using &lt;a href="mailto:admin@volt.com"&gt;admin@volt.com&lt;/a&gt; and secret and start testing the Laravel app (make sure to run the migrations and seeders for these credentials to be available).&lt;br&gt;
Make sure to run the migrations and seeders for the above credentials to be available.&lt;/p&gt;

&lt;p&gt;Make sure to run the migrations and seeders for the above credentials to be available.&lt;/p&gt;

&lt;p&gt;Besides the dashboard and the auth pages this application also has an edit profile page. All the necessary files (controllers, requests, views) are installed out of the box and all the needed routes are added to &lt;code&gt;routes/web.php&lt;/code&gt;. Keep in mind that all of the features can be viewed once you login using the credentials provided above or by registering your own user.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#dashboard"&gt;
  &lt;/a&gt;
  Dashboard
&lt;/h3&gt;

&lt;p&gt;You can access the dashboard either by using the "&lt;strong&gt;Dashboard&lt;/strong&gt;" link in the left sidebar or by adding &lt;strong&gt;/dashboard&lt;/strong&gt; in the URL.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#sign-in"&gt;
  &lt;/a&gt;
  Sign in
&lt;/h3&gt;

&lt;p&gt;You have the option to log in using the email and password. To access this page, just click the "&lt;strong&gt;Page examples/ Sign in&lt;/strong&gt;" link in the left sidebar or add &lt;strong&gt;/login&lt;/strong&gt; in the URL.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;app/Http/Livewire/Auth/Login.php&lt;/code&gt; handles the log in process and validation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   protected $rules = [
        'email' =&amp;gt; 'required|email',
        'password' =&amp;gt; 'required',
    ];

    public function login()
    {
        $credentials = $this-&amp;gt;validate();
        return auth()-&amp;gt;attempt($credentials)
                ? redirect()-&amp;gt;intended('/profile')
                : $this-&amp;gt;addError('email', trans('auth.failed'));
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#sign-up"&gt;
  &lt;/a&gt;
  Sign up
&lt;/h3&gt;

&lt;p&gt;You have the option to register an user using the email and password. To access this page, just click the "&lt;strong&gt;Page examples/ Sign up&lt;/strong&gt;" link in the left sidebar or add &lt;strong&gt;/register&lt;/strong&gt; in the URL.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;app/Http/Livewire/Auth/Register.php&lt;/code&gt; handles the register process and validation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    public function register()
    {
        $this-&amp;gt;validate([
            'email' =&amp;gt; 'required',
            'password' =&amp;gt; 'required|same:passwordConfirmation|min:6',
        ]);

        $user = User::create([
            'email' =&amp;gt;$this-&amp;gt;email,
            'password' =&amp;gt; Hash::make($this-&amp;gt;password),
            'remember_token' =&amp;gt; Str::random(10),
        ]);

        auth()-&amp;gt;login($user);

        return redirect('/profile');
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#forgot-password"&gt;
  &lt;/a&gt;
  Forgot password
&lt;/h3&gt;

&lt;p&gt;You have the option to send an email containing the password reset link to an user. To access this page, just click the "&lt;strong&gt;Page examples/ Forgot password&lt;/strong&gt;" link in the left sidebar or add &lt;strong&gt;/forgot-password&lt;/strong&gt; in the URL.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;app/Http/Livewire/ForgotPassword.php&lt;/code&gt; handles the email submission process.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    public function recoverPassword() {
        $this-&amp;gt;validate();
        $user=User::where('email', $this-&amp;gt;email)-&amp;gt;first();
        $this-&amp;gt;notify(new ResetPassword($user-&amp;gt;id));
        $this-&amp;gt;mailSentAlert = true;
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;app/Notifications/ResetPassword.php&lt;/code&gt; handles the email submission itself. Here you can edit the overall layout of the email.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    public function toMail($notifiable)
    {
        $url = URL::signedRoute('reset-password', ['id' =&amp;gt; $this-&amp;gt;token]);
        return (new MailMessage)
                    -&amp;gt;subject('Reset your password')
                    -&amp;gt;line('Hey, did you forget your password? Click the button to reset it.')
                    -&amp;gt;action('Reset Password', $url)
                    -&amp;gt;line('Thank you for using our application!');
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#reset-password"&gt;
  &lt;/a&gt;
  Reset password
&lt;/h3&gt;

&lt;p&gt;The email sent through the forgot password process will send the user to an unique link containing the password reset form. To access an example of this page, just click the "&lt;strong&gt;Page examples/ Reset password&lt;/strong&gt;" link in the left sidebar or add &lt;strong&gt;/reset-password-example&lt;/strong&gt; in the URL.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;app/Http/Livewire/ResetPassword.php&lt;/code&gt; handles the password reset process and validation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
    public function resetPassword() {
        $this-&amp;gt;validate();
        $existingUser = User::where('email', $this-&amp;gt;email)-&amp;gt;first();
        if($existingUser &amp;amp;&amp;amp; $existingUser-&amp;gt;id == $this-&amp;gt;urlId) {
            $existingUser-&amp;gt;update([
                'password' =&amp;gt; Hash::make($this-&amp;gt;password)
            ]);
            $this-&amp;gt;isPasswordChanged = true;
            $this-&amp;gt;wrongEmail = false;
        }
        else {
            $this-&amp;gt;wrongEmail = true;
        }
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#user-profile"&gt;
  &lt;/a&gt;
  User Profile
&lt;/h3&gt;

&lt;p&gt;You have the option to edit the current logged in user's profile information (name, email, profile picture) and password. To access this page, just click the "&lt;strong&gt;Profile&lt;/strong&gt;" link in the left sidebar or add &lt;strong&gt;/profile&lt;/strong&gt; in the URL.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;app/Http/Livewire/Profile.php&lt;/code&gt; handles the update of the user information and password.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    public function mount() { $this-&amp;gt;user = auth()-&amp;gt;user(); }

    public function save()
    {
        $this-&amp;gt;validate();

        $this-&amp;gt;user-&amp;gt;save();

        $this-&amp;gt;showSavedAlert = true;

        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you input the wrong data when editing the profile, don't worry. Validation rules have been added to prevent this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    protected $rules = [
        'user.first_name' =&amp;gt; 'max:15',
        'user.last_name' =&amp;gt; 'max:20',
        'user.birthday' =&amp;gt; 'date_format:Y-m-d',
        'user.email' =&amp;gt; 'email',
        'user.phone' =&amp;gt; 'numeric',
        'user.gender' =&amp;gt; '',
        'user.address' =&amp;gt; 'max:20',
        'user.number' =&amp;gt; 'numeric',
        'user.city' =&amp;gt; 'max:20',
        'user.zip' =&amp;gt; 'numeric',
    ];

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h2&gt;

&lt;p&gt;The documentation for Volt is hosted on our &lt;a href="https://volt-laravel-admin-dashboard.updivision.com/documentation/getting-started/overview/index.html"&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Demo: &lt;a href="https://volt-laravel-admin-dashboard.updivision.com/dashboard"&gt;https://volt-laravel-admin-dashboard.updivision.com/dashboard&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Download Page: &lt;a href="https://themesberg.com/product/laravel/volt-admin-dashboard-template"&gt;https://themesberg.com/product/laravel/volt-admin-dashboard-template&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Documentation: &lt;a href="https://volt-laravel-admin-dashboard.updivision.com/documentation/getting-started/overview/index.html"&gt;https://volt-laravel-admin-dashboard.updivision.com/documentation/getting-started/overview/index.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;License Agreement: &lt;a href="https://themesberg.com/licensing"&gt;https://themesberg.com/licensing&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Support: &lt;a href="https://themesberg.com/contact"&gt;https://themesberg.com/contact&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Issues: &lt;a href="https://github.com/themesberg/volt-laravel-admin-dashboard/issues"&gt;Github Issues Page&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dashboards:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#upgrade-to-pro"&gt;
  &lt;/a&gt;
  Upgrade to Pro
&lt;/h2&gt;

&lt;p&gt;Take front-end development to the next level by upgrading to the PRO version of Volt Laravel Admin Dashboard featuring over 3 times more components, plugin and pages and 5 times more Laravel features. You also get 6 months of premium support and free updates. Check out &lt;a href="https://themesberg.com/product/laravel/volt-pro-admin-dashboard-template"&gt;Volt Pro Premium Laravel Admin Dashboard&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#licensing"&gt;
  &lt;/a&gt;
  Licensing
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Copyright 2021 Themesberg (Crafty Dwarf LLC) (&lt;a href="https://themesberg.com"&gt;https://themesberg.com&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Themesberg &lt;a href="https://themesberg.com/licensing#mit"&gt;license&lt;/a&gt; (MIT License)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://themesberg.com/themes"&gt;More themes&lt;/a&gt; from Themesberg&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://themesberg.com/templates/free"&gt;Free themes&lt;/a&gt; from Themesberg&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://themesberg.com/templates/laravel/"&gt;Bootstrap Themes, Templates &amp;amp; UI Kits&lt;/a&gt; from Themesberg&lt;/li&gt;
&lt;li&gt;&lt;a href="https://themesberg.com/affiliate"&gt;Affiliate Program&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://themesberg.com/"&gt;Themesberg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://updivision.com"&gt;UPDIVISION&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>laravel</category>
      <category>opensource</category>
      <category>showdev</category>
    </item>
    <item>
      <title>How to use Promise in JavaScript</title>
      <author>Taimoor Sattar</author>
      <pubDate>Thu, 05 Aug 2021 10:09:56 +0000</pubDate>
      <link>https://dev.to/taimoorsattar7/how-to-use-promise-in-javascript-16f8</link>
      <guid>https://dev.to/taimoorsattar7/how-to-use-promise-in-javascript-16f8</guid>
      <description>&lt;p&gt;Promise in JavaScript is the way to wait for a certain action to process or complete. The promise has the following states:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Pending&lt;/strong&gt;: incomplete (initial state), neither fulfilled nor rejected.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fulfilled&lt;/strong&gt;: The process was successfully completed.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Rejected&lt;/strong&gt;: The process failed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, where the promise is useful? We can use promise in JavaScript in a different situation. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wait for the response from the HTTP request &lt;/li&gt;
&lt;li&gt;async and await function&lt;/li&gt;
&lt;li&gt;Schedule Task e.g. &lt;a href="https://taimoorsattar.dev/blogs/settimeout-and-setinterval-using-javascript"&gt;setTimeout and setInterval&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can use &lt;a href="https://taimoorsattar.dev/blogs/request-data-using-javascript-fetch-api"&gt;fetch in JavaScript&lt;/a&gt; to retrieve the data from a certain API endpoint. The fetch in JavaScript is a promise that returns the data if the request is successfully processed.&lt;/p&gt;

&lt;p&gt;Let's take an example. We have 1st person that's giving the promise and 2nd person that's waiting for the promise to fulfill.&lt;/p&gt;

&lt;p&gt;In JavaScript, we can define the promise as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Exception!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above, we define the promise that waits for 0.3 seconds and returns the pass or fails message based on the boolean logic (true or false).&lt;/p&gt;

&lt;p&gt;Now, to wait for the promise to complete, we can write code in JavaScript as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;myPromise&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; and bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Promise completed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, the following callback function runs:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.then&lt;/code&gt;: Executes when the process is successfully completed&lt;br&gt;
&lt;code&gt;.catch&lt;/code&gt;: Executes when the process is failed&lt;br&gt;
&lt;code&gt;.finally&lt;/code&gt;: execute at every condition&lt;/p&gt;



&lt;p&gt;Moving further... Let's say, we have more than one person that is giving the promise. We can define in JavaScript as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const promise1 = Promise.resolve("great");
const promise2 = new Promise((resolve, reject) =&amp;gt; {
  setTimeout(resolve, 300, 'Yesss!!!');
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use &lt;code&gt;Promise.all&lt;/code&gt; that returns a promise which resolves after all of the given promises have either fulfilled or rejected. We can write in JavaScript as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Promise.all([promise1, promise2]).then((values) =&amp;gt; {
  console.log(values);
})
.catch(error =&amp;gt; {
  console.error(error.message)
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code will log the following in the console:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;["great","Yesss!!!"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;The previous example works OK if all the promises resolve successfully. But... let's say, If one of the promises is rejected, the overall &lt;strong&gt;Promise.all&lt;/strong&gt; will be rejected even if every other promise is resolved successfully.&lt;/p&gt;

&lt;p&gt;Let say, If we are waiting for many promises. Some promises got fulfilled and some are rejected. In JavaScript, we can define promise as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;p1_delayed_resolution1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;p2_immediate_rejection&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;Promise.all&lt;/code&gt;, we can use the &lt;code&gt;.catch&lt;/code&gt; statement to handle the error of each promise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
  &lt;span class="nx"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="nx"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// "p1_delayed_resolution"&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// "Error: p2_immediate_rejection"&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
    </item>
    <item>
      <title>How to setup a clean laptop</title>
      <author>Asmit Malakannawar</author>
      <pubDate>Thu, 05 Aug 2021 09:57:33 +0000</pubDate>
      <link>https://dev.to/asmit2952/how-to-setup-a-clean-laptop-4h9j</link>
      <guid>https://dev.to/asmit2952/how-to-setup-a-clean-laptop-4h9j</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b8HHoobq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3da0e7nuqlzl23c7r0t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b8HHoobq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3da0e7nuqlzl23c7r0t.png" alt="Screenshot (78)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All right so, last week I had to wipe this laptop and I thought to myself that I should share how to setup a clean laptop and I know some of you guys are into that as well so here we go...&lt;/p&gt;

&lt;p&gt;For my personal use, I format them. I don't rely on app removal system as I don't feel like it's clean enough. There's always some kind of bloatware that's just stuck inside you can truly remove unless you straight up format it.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#formattingfresh-install"&gt;
  &lt;/a&gt;
  Formatting/Fresh Install:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;I do the install in &lt;a href="https://computerinfobits.com/windows-10-without-internet/#:~:text=Installing%20Windows%2010%20without%20an,can%20begin%20the%20installation%20process."&gt;offline mode&lt;/a&gt; (without internet) so I don't have to log in with a Microsoft account.&lt;/li&gt;
&lt;li&gt;I turn off Cortana, history and disable all the Microsoft stuff.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The next thing I do is I remove as much software as I can&lt;br&gt;
even after that fresh install. Then to install my regular software I use &lt;a href="https://ninite.com/"&gt;Ninite&lt;/a&gt;. It's a a package management software which is used to download and install programs so you can have your popular apps load up all at once.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#apps"&gt;
  &lt;/a&gt;
  Apps:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;I remove every app I can.&lt;/li&gt;
&lt;li&gt;Don't remove Cortana, MS Store, or Windows defender with 3rd party apps. That'll break stuff.&lt;/li&gt;
&lt;li&gt;I use &lt;a href="https://ninite.com/"&gt;Ninite&lt;/a&gt; to get an installer package. It's clean and free of malware/bloatware&lt;/li&gt;
&lt;li&gt;I don't bother with 3rd party virus apps. Most of them are awful.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now the next step is that I go to Startup menu (in Task Manager) and disable everything I can so it doesn't boot up with anything I don't want and it keeps the system fast.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_TzUuFxW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pnd0xkygyworq7yavyrz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_TzUuFxW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pnd0xkygyworq7yavyrz.png" alt="Screenshot (79)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And then I go into my privacy settings and turn off everything that I can and I then go into the background apps and I turn off&lt;br&gt;
everything that I do not use. So the end result is hopefully a system that is clean-ish.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UexAe50_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjsuptwnhif4rynvrvbp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UexAe50_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjsuptwnhif4rynvrvbp.png" alt="Screenshot (80)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now when it comes to a device that I rely on for everyday use, I try to keep it as clean and as simple as possible. Now in terms of the aesthetics I do spend a little bit of time on this&lt;br&gt;
stuff. &lt;/p&gt;

&lt;p&gt;I like my icons centered right in the middle of the screen so I do this thing with the center taskbar and because it's built into Windows and you don't need any kind of third-party application to do this. And they have this as default in Windows 11 🥳.&lt;/p&gt;

&lt;p&gt;It's a good 30-second thing you right-click the&lt;br&gt;
taskbar you go into the settings and you do three things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Unlock the taskbar then you set its location to the bottom.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then you set the taskbar buttons to have hidden labels.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jg5yDxrs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yw627anmi7px7vbao61b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jg5yDxrs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yw627anmi7px7vbao61b.png" alt="Screenshot (81)"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Then you want to right-click the taskbar again you'll go to the Toolbars at the top and turn on the &lt;code&gt;Links&lt;/code&gt; and then you'll see a
&lt;code&gt;Links&lt;/code&gt; section appear on the right side of the screen you want to drag that over to the left past the app icons as well as turning off the titles on that links section. Then you can freely move that taskbar left and right so you slide it to the middle then lock it back up and then now you have this simple clean taskbar that has a centered group of icons.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9UHayWp---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3waui7yq5753cdlnxo0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9UHayWp---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3waui7yq5753cdlnxo0.png" alt="Screenshot (82)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Links&lt;/code&gt; 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6OW_x741--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gv9dmujtmqwoahb4psjf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6OW_x741--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gv9dmujtmqwoahb4psjf.png" alt="Screenshot (83)"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#centering-taskbar"&gt;
  &lt;/a&gt;
  Centering Taskbar:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;I turn off the search bar,  Cortana and the task view buttons.&lt;/li&gt;
&lt;li&gt;When you center the app icons, keep in mind that open apps will add to the tail end of it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now the last thing is this thing up there: A clock. So that&lt;br&gt;
is &lt;a href="https://www.rainmeter.net/"&gt;Rainmeter&lt;/a&gt;. This is a third-party application now. It's a really lightweight application with almost no CPU usage. So this is just a simple date and time I have running.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#rainmeter"&gt;
  &lt;/a&gt;
  Rainmeter:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The skin I use is Mond Clock. And I use my own font (Quicksand) with it.&lt;/li&gt;
&lt;li&gt;The ones with heavy animations tend to use a ton of resources. Avoid those if you need to keep it light.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So yeah, basically that's how I setup a clean Windows laptop and if you have any doubts ask in the comments section below.&lt;/p&gt;

&lt;p&gt;Peace!!😉✌&lt;/p&gt;

</description>
      <category>windows</category>
      <category>ui</category>
      <category>rainmeter</category>
    </item>
    <item>
      <title>8 Projects to Build to Master Your Front-End Skills 🥇🏆</title>
      <author>Madza</author>
      <pubDate>Thu, 05 Aug 2021 09:48:07 +0000</pubDate>
      <link>https://dev.to/madza/8-projects-to-build-to-master-your-front-end-skills-4gnc</link>
      <guid>https://dev.to/madza/8-projects-to-build-to-master-your-front-end-skills-4gnc</guid>
      <description>&lt;p&gt;I've always believed that the best way to learn is by doing. Recruiters prefer practical projects over theoretical knowledge, as well.&lt;/p&gt;

&lt;p&gt;Over the span of a year, I created 8 web app and game clones. I decided to share them, so community can get some inspiration to build as well. &lt;/p&gt;

&lt;p&gt;In order to explore and compare how various front end solutions work, I tried to use different stacks, varying from Vanilla HTML to React, NextJS and Svelte. &lt;/p&gt;

&lt;p&gt;For each project a link to deployed project as well as the source code will be provided. Give it a 🌟 on my &lt;a href="https://github.com/madzadev"&gt;GitHub&lt;/a&gt; if you liked it.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#calculator"&gt;
  &lt;/a&gt;
  Calculator
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jEzEYE_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.madza.dev/_next/image%3Furl%3Dhttps://images.ctfassets.net/zlsyc9paq6sa/4qRjISjiWcXbf71Xdjib5N/a8e300ee23fb8dd6a09bc8eef8652400/O3CKScM.gif%26w%3D1080%26q%3D70" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jEzEYE_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.madza.dev/_next/image%3Furl%3Dhttps://images.ctfassets.net/zlsyc9paq6sa/4qRjISjiWcXbf71Xdjib5N/a8e300ee23fb8dd6a09bc8eef8652400/O3CKScM.gif%26w%3D1080%26q%3D70" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#live-project-source-on-github"&gt;
  &lt;/a&gt;
  &lt;a href="https://calculator-madza.netlify.app/"&gt;💻 Live project&lt;/a&gt; / &lt;a href="https://github.com/madzadev/calculator"&gt;🔗 Source on GitHub&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;/h3&gt;

&lt;p&gt;First I wanted to create some practical app that each of us use use in our daily routines. A calculator seemed to be a nice fit.&lt;/p&gt;

&lt;p&gt;It has come in handy from time to time.&lt;/p&gt;

&lt;p&gt;Features include:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Add, subtract, multiply, divide&lt;/li&gt;
&lt;li&gt; Support decimal values&lt;/li&gt;
&lt;li&gt; Calculate percentages&lt;/li&gt;
&lt;li&gt; Invert the values&lt;/li&gt;
&lt;li&gt; Reset functionality&lt;/li&gt;
&lt;li&gt; Format larger numbers&lt;/li&gt;
&lt;li&gt; Output resize based on length&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The project is written in  &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#weather-app"&gt;
  &lt;/a&gt;
  Weather App
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PGiG0inz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/http://images.ctfassets.net/zlsyc9paq6sa/3uBrJ07WSM40FpolgjInHY/7d886cb4187b52194bf9b63c183a1d3a/1627637330_x.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PGiG0inz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/http://images.ctfassets.net/zlsyc9paq6sa/3uBrJ07WSM40FpolgjInHY/7d886cb4187b52194bf9b63c183a1d3a/1627637330_x.gif" alt="enter link description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#live-project-source-on-github"&gt;
  &lt;/a&gt;
  &lt;a href="https://weather-app-madza.netlify.app/"&gt;💻 Live project&lt;/a&gt; / &lt;a href="https://github.com/madzadev/weather-app"&gt;🔗 Source on GitHub&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;/h3&gt;

&lt;p&gt;With this next app my aim was to be able to check the weather conditions across the world. I used Openweather API to fetch data from their site.&lt;/p&gt;

&lt;p&gt;To make it a bit appealing to the eye, I decided to combine it with some icon graphics that correspond to the conditions displayed.&lt;/p&gt;

&lt;p&gt;Features include:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Search functionality&lt;/li&gt;
&lt;li&gt;Metric vs Imperial system&lt;/li&gt;
&lt;li&gt;Current local time and date&lt;/li&gt;
&lt;li&gt;Temperatures and humidity&lt;/li&gt;
&lt;li&gt;Wind speed and direction&lt;/li&gt;
&lt;li&gt;Sunrise and sunset times&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The project is written in &lt;a href="https://nextjs.org/"&gt;NextJS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Icons are taken from  &lt;a href="https://flaticon.com/"&gt;Flaticon&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#breakout"&gt;
  &lt;/a&gt;
  Breakout
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B2xWVoGN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.madza.dev/_next/image%3Furl%3Dhttps://images.ctfassets.net/zlsyc9paq6sa/29NfY5BfVuO3LpeHwRYV4R/e83a19c8a847e7a5d431c7cc74864a22/c4uaKqL.gif%26w%3D1080%26q%3D70" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B2xWVoGN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.madza.dev/_next/image%3Furl%3Dhttps://images.ctfassets.net/zlsyc9paq6sa/29NfY5BfVuO3LpeHwRYV4R/e83a19c8a847e7a5d431c7cc74864a22/c4uaKqL.gif%26w%3D1080%26q%3D70" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#live-project-source-on-github"&gt;
  &lt;/a&gt;
  &lt;a href="https://breakout-madza.netlify.app/"&gt;💻 Live project&lt;/a&gt; / &lt;a href="https://github.com/madzadev/breakout"&gt;🔗 Source on GitHub&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Breakout_(video_game)"&gt;Breakout&lt;/a&gt;  is an arcade game originally developed and published by  &lt;a href="https://en.wikipedia.org/wiki/Atari"&gt;Atari&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In Breakout, the goal is to destroy all the bricks at the top. A ball bounces off the top and two sides of the screen. When a brick is hit, the ball bounces back and the brick is destroyed.&lt;/p&gt;

&lt;p&gt;The player loses a turn when the ball touches the bottom of the screen; to prevent this from happening, the player has a horizontally movable paddle to bounce the ball upward, keeping it in play.&lt;/p&gt;

&lt;p&gt;Features include:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Moving paddle + ball&lt;/li&gt;
&lt;li&gt; Bricks generation&lt;/li&gt;
&lt;li&gt; Collision detection&lt;/li&gt;
&lt;li&gt; Score keeping&lt;/li&gt;
&lt;li&gt; Level system&lt;/li&gt;
&lt;li&gt; Lives tracking&lt;/li&gt;
&lt;li&gt; Game over / Reset&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The project is written in &lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2048"&gt;
  &lt;/a&gt;
  2048
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZNJTbbH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.madza.dev/_next/image%3Furl%3Dhttps://images.ctfassets.net/zlsyc9paq6sa/44dvlE4XsjnPYxhYV0BokW/4e59dee4fd0952312a2e4072c61cecee/Tn8VS0npqE.gif%26w%3D1080%26q%3D70" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZNJTbbH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.madza.dev/_next/image%3Furl%3Dhttps://images.ctfassets.net/zlsyc9paq6sa/44dvlE4XsjnPYxhYV0BokW/4e59dee4fd0952312a2e4072c61cecee/Tn8VS0npqE.gif%26w%3D1080%26q%3D70" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#live-project-source-on-github"&gt;
  &lt;/a&gt;
  &lt;a href="https://2048-madza.netlify.app/"&gt;💻 Live project&lt;/a&gt; / &lt;a href="https://github.com/madzadev/2048"&gt;🔗 Source on GitHub&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/2048_(video_game)"&gt;2048&lt;/a&gt;  is a single-player sliding tile puzzle game initially written by Italian web developer  &lt;a href="https://github.com/gabrielecirulli"&gt;Gabriele Cirulli&lt;/a&gt;  in 2014.&lt;/p&gt;

&lt;p&gt;It's played played on a plain 4×4 grid, with numbered tiles that slide when a player moves them using the four arrow keys. Every turn, a new tile randomly appears in an empty spot on the board.&lt;/p&gt;

&lt;p&gt;The objective of the game is to slide numbered tiles on a grid to combine them to create a tile with the number 2048.&lt;/p&gt;

&lt;p&gt;Features include:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Slide tiles on X and Y axis&lt;/li&gt;
&lt;li&gt; Sum tile values on collision&lt;/li&gt;
&lt;li&gt; Color scheme for specific values&lt;/li&gt;
&lt;li&gt; Score keeping&lt;/li&gt;
&lt;li&gt; Best score memory&lt;/li&gt;
&lt;li&gt; Winner detection&lt;/li&gt;
&lt;li&gt; Game over / Reset&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The project is written in  &lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#memory-game"&gt;
  &lt;/a&gt;
  Memory Game
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EZ0qy2Bw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://images.ctfassets.net/zlsyc9paq6sa/1vw5KguANULQqNkPDNuAOP/d5e179fafd5f620b0b26a31dfc33cd5a/1627636877_x.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EZ0qy2Bw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://images.ctfassets.net/zlsyc9paq6sa/1vw5KguANULQqNkPDNuAOP/d5e179fafd5f620b0b26a31dfc33cd5a/1627636877_x.gif" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#live-project-source-on-github"&gt;
  &lt;/a&gt;
  &lt;a href="https://memory-game-madza.netlify.app/"&gt;💻 Live project&lt;/a&gt; / &lt;a href="https://github.com/madzadev/memory-game"&gt;🔗 Source on GitHub&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;/h3&gt;

&lt;p&gt;Memory games comes in different forms and variations.&lt;/p&gt;

&lt;p&gt;I decided to go with traditional approach, where users have to remember the positions of the cards and open two exact images sequentially to score points. Once all the cards are opened user is victorious.&lt;/p&gt;

&lt;p&gt;I used Unsplash API to fetch images from their site.&lt;/p&gt;

&lt;p&gt;Features include:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Moves tracking&lt;/li&gt;
&lt;li&gt;Match percentage&lt;/li&gt;
&lt;li&gt;Win state detection&lt;/li&gt;
&lt;li&gt;Reset functionality&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The project is written in &lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tic-tac-toe"&gt;
  &lt;/a&gt;
  Tic Tac Toe
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--476pF3JC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://images.ctfassets.net/zlsyc9paq6sa/3HTYWmjkvJK2Tlgeublqdb/b4068de81576fb6998400d273cd14c47/1627997372_x.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--476pF3JC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://images.ctfassets.net/zlsyc9paq6sa/3HTYWmjkvJK2Tlgeublqdb/b4068de81576fb6998400d273cd14c47/1627997372_x.gif" alt="enter link description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#live-project-source-on-github"&gt;
  &lt;/a&gt;
  &lt;a href="https://tictactoe-madza.netlify.app/"&gt;💻 Live project&lt;/a&gt; / &lt;a href="https://github.com/madzadev/tic-tac-toe"&gt;🔗 Source on GitHub&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;/h3&gt;

&lt;p&gt;Tic-Tac-Toe is a very popular two-player game, where users take turns marking 'X'es or 'O's in a 3×3 grid. It's been played in different environments starting from classical pen and paper to many UI-different versions online.&lt;/p&gt;

&lt;p&gt;The player who succeeds in placing three of their marks in a diagonal, horizontal, or vertical row is the winner.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Built-in moves calculation&lt;/li&gt;
&lt;li&gt;Winner detection&lt;/li&gt;
&lt;li&gt;Reset functionality&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The project is written in &lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rock-paper-scissors"&gt;
  &lt;/a&gt;
  Rock Paper Scissors
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3W04ifcc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://images.ctfassets.net/zlsyc9paq6sa/2qyEJJ1co1Aur3T6nq7QDM/3b4953c69237d5270736651087cb89f6/1628153331_x.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3W04ifcc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://images.ctfassets.net/zlsyc9paq6sa/2qyEJJ1co1Aur3T6nq7QDM/3b4953c69237d5270736651087cb89f6/1628153331_x.gif" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#live-project-source-on-github"&gt;
  &lt;/a&gt;
  &lt;a href="https://rockpaperscissors-madza.netlify.app/"&gt;💻 Live project&lt;/a&gt; / &lt;a href="https://github.com/madzadev/rock-paper-scissors"&gt;🔗 Source on GitHub&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;/h3&gt;

&lt;p&gt;Rock-paper-scissors originated in China and spread with increased contact with East Asia, while developing different variants in signs over time.&lt;/p&gt;

&lt;p&gt;A player who decides to play rock will beat another player who has chosen scissors, but will lose to one who has played paper; a play of paper will lose to a play of scissors. If both players choose the same shape, it's a tie. &lt;/p&gt;

&lt;p&gt;Features include:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Round tracking&lt;/li&gt;
&lt;li&gt; Score keeping&lt;/li&gt;
&lt;li&gt; Choice display&lt;/li&gt;
&lt;li&gt; Computer selection&lt;/li&gt;
&lt;li&gt; Winner detection&lt;/li&gt;
&lt;li&gt; Reset functionality&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The project is written in &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Icons are taken from  &lt;a href="https://icons8.com/"&gt;Icons8&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#landing-page"&gt;
  &lt;/a&gt;
  Landing Page
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5TaV2wj9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://images.ctfassets.net/zlsyc9paq6sa/5BIbaao5okRUJ5FDw3GuwV/f3474889b7c6ff8eeffec142bf2d342d/1628151891_x.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5TaV2wj9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://images.ctfassets.net/zlsyc9paq6sa/5BIbaao5okRUJ5FDw3GuwV/f3474889b7c6ff8eeffec142bf2d342d/1628151891_x.gif" alt="enter link description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#live-project-source-on-github"&gt;
  &lt;/a&gt;
  &lt;a href="https://landing-page-madza.vercel.app/"&gt;💻 Live project&lt;/a&gt; / &lt;a href="https://github.com/madzadev/landing-page"&gt;🔗 Source on GitHub&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;/h3&gt;

&lt;p&gt;This landing page was created as a temporary placeholder for my personal domain while I was working on my portfolio. It's designed keeping simplicity in mind for both setup and UI.&lt;/p&gt;

&lt;p&gt;Since I no longer host it on my personal domain, I decided to make a template from it, so other devs looking for a landing site could benefit as well.&lt;/p&gt;

&lt;p&gt;I also made a  &lt;a href="https://madza.dev/blog/create-a-landing-page-in-less-than-100-lines-incl-css"&gt;tutorial&lt;/a&gt;  on how to create it from a scratch.&lt;/p&gt;

&lt;p&gt;Features include:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Info about the dev&lt;/li&gt;
&lt;li&gt; Icons linking to social media&lt;/li&gt;
&lt;li&gt; Interactive hover effects&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The project is written in  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML"&gt;HTML&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS"&gt;CSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Icons are taken from  &lt;a href="https://icons8.com/"&gt;Icons8&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/p&gt;




&lt;p&gt;Writing has always been my passion and it gives me pleasure to help and inspire people. If you have any questions, feel free to reach out!&lt;/p&gt;

&lt;p&gt;Connect me on &lt;a href="https://twitter.com/madzadev"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/madzadev/"&gt;LinkedIn&lt;/a&gt; and &lt;a href="https://github.com/madzadev"&gt;GitHub&lt;/a&gt;!&lt;br&gt;
For more projects like these, check out my &lt;a href="https://madza.dev/code"&gt;portfolio&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>react</category>
      <category>nextjs</category>
      <category>svelte</category>
    </item>
    <item>
      <title>JavaScript Promises - Explain Like I'm Five</title>
      <author>Tapas Adhikary</author>
      <pubDate>Thu, 05 Aug 2021 09:16:57 +0000</pubDate>
      <link>https://dev.to/atapas/javascript-promises-explain-like-i-m-five-525g</link>
      <guid>https://dev.to/atapas/javascript-promises-explain-like-i-m-five-525g</guid>
      <description>&lt;p&gt;&lt;em&gt;If you found this article helpful, you will most likely find my tweets useful too. So make sure you follow me on &lt;a href="https://twitter.com/tapasadhikary"&gt;Twitter&lt;/a&gt; for more information about web development and content creation. This article was originally published on my &lt;a href="https://blog.greenroots.info/"&gt;Blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;Hello friends 👋, welcome to the first article of my brand new series, &lt;a href="https://blog.greenroots.info/series/javascript-promises"&gt;Demystifying JavaScript Promises - A New Way to Learn&lt;/a&gt;. JavaScript &lt;code&gt;promises&lt;/code&gt; are very special. As web developers, we hardly have a way to avoid learning about it. Believe me, if not you; your interviewers indeed love promises 😉!&lt;/p&gt;

&lt;p&gt;On the other hand, If we take a poll on the "&lt;em&gt;Hardest JavaScript concept someone is dealing with?&lt;/em&gt;" you would see 'promise' is making its way towards the top of the list. Don't you believe me? Here is a recent poll result 🙂. &lt;/p&gt;

&lt;p&gt;On LinkedIn&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l3Uhgxib--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627646972904/YkCVwr3Lq.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l3Uhgxib--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627646972904/YkCVwr3Lq.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="LinkedIn Poll.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On Twitter&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LSYes4vd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627697087269/kR5hg-zXR.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LSYes4vd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627697087269/kR5hg-zXR.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="Twitter Poll.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hence it certainly makes &lt;code&gt;promises&lt;/code&gt; 'the topic' of discussion. In this series, you will learn about JavaScript &lt;code&gt;Promises&lt;/code&gt; from beginners to advanced levels. We will cover,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is &lt;code&gt;Promise&lt;/code&gt; and its characteristics?&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Promise Chain&lt;/code&gt; with examples.&lt;/li&gt;
&lt;li&gt;How to deal with &lt;code&gt;errors&lt;/code&gt; in Promises?&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Mistakes&lt;/code&gt; you may make in using Promises.&lt;/li&gt;
&lt;li&gt;How to prepare for your (promise) &lt;code&gt;interviews&lt;/code&gt;?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This article will cover the basic understanding of JavaScript promise and its characteristics, mainly in a beginner-friendly way.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-jack-and-jill-story"&gt;
  &lt;/a&gt;
  The Jack and Jill Story
&lt;/h2&gt;

&lt;p&gt;The "&lt;a href="https://www.google.com/search?q=%22jack+and+jill+went+up+the+hill%22"&gt;Jack and Jill Went Up the Hill...&lt;/a&gt;" rhyme has two primary characters, Jack the small boy and his sister Jill. Let's twist the story. Let's introduce their grandparents.&lt;/p&gt;

&lt;p&gt;So, Jack &amp;amp; Jill &lt;code&gt;promise&lt;/code&gt; their grandparents to &lt;code&gt;fetch&lt;/code&gt; some water from the well at the top of the hill. They started on their mission to get it. In the meantime, the grandparents are busy discussing the daily routine, and they want to start cooking once the kids are back with the water.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9jdKf22O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627629551099/bYoH_AGML.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9jdKf22O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627629551099/bYoH_AGML.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="The Jack and Jill Story"&gt;&lt;/a&gt;&lt;br&gt;
💡 &lt;em&gt;The illustration above is my improvisation on the famous Jack and Jill rhyme. Any similarities of it with anything in this world are purely coincidental.&lt;/em&gt; 🙂&lt;/p&gt;

&lt;p&gt;Now there are two possibilities,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jack and Jill come down with the water, and the cooking starts.&lt;/li&gt;
&lt;li&gt;"Jack fell down and broke his crown. And Jill came tumbling after." - In this case, Jack and Jill return, but unfortunately, they do not get the water.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this short story, there is a &lt;code&gt;promise&lt;/code&gt; of getting the water using the activity of fetching it. The promise can get fulfilled(getting the water) by the kids or reject due to the disaster. Please note, while Jack and Jill were working on &lt;code&gt;executing&lt;/code&gt; the promise, the grandparents were not sitting idle. They were planning the day.&lt;/p&gt;

&lt;p&gt;The JavaScript promises also work similarly. As developers, we create them to fetch something(data from a data store, configurations, and many more). Usually, the fetching may not happen instantly. We want to fetch things &lt;em&gt;asynchronously&lt;/em&gt;. It means we do not want the application to wait for the response, but we can continue to work on the response when it is available.&lt;/p&gt;

&lt;p&gt;Hence our analogy table may look like this,&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;In Real Life(with JavaScript)&lt;/th&gt;
&lt;th&gt;In Our Story&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Promise&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Water fetching by Jack 👦 and Jill 👧&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Executor Function&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Fetch the Water 🏃‍♀️ 🏃‍♂️&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Activity&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Fetch 🧶&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Expected data in response&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Water 💧&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Consumers&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Grandparents 👵 👴&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;resolve/fulfilled&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;✔️ Successfully get the water for cooking&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;reject/rejected&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;❌ Disaster(error) in getting the water&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Task after getting the data successfully&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Cooking 🍚&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Don't worry if some of the terms looking new or confusing to you. We will revisit it at the end of this article.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#promise-in-javascript"&gt;
  &lt;/a&gt;
  Promise in JavaScript
&lt;/h2&gt;

&lt;p&gt;A &lt;code&gt;promise&lt;/code&gt; is a JavaScript object that allows you to make asynchronous(aka async) calls. It produces a value when the async operation completes successfully or produces an error if it doesn't complete.&lt;/p&gt;

&lt;p&gt;You can create promise using the constructor method,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    
    &lt;span class="c1"&gt;// Do something and either resolve or reject&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to pass a function to the &lt;code&gt;Promise Constructor&lt;/code&gt;. That function is called the &lt;code&gt;executor function&lt;/code&gt;(Remember, fetching the water?). The executor function takes two arguments, &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt;. These two are callback functions for the executor to announce an outcome.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;resolve&lt;/code&gt; method indicates successful completion of the task(fetching water), and the &lt;code&gt;reject&lt;/code&gt; method indicates an error(the disaster). You do not implement the resolve/reject method. JavaScript provides it to you. You need to call them from the executor function.&lt;/p&gt;

&lt;p&gt;So, in case of the &lt;em&gt;Jack and Jill&lt;/em&gt; story, the &lt;code&gt;executor&lt;/code&gt; function may look like,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Example of the &lt;code&gt;resolve&lt;/code&gt;:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Got the water&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;water&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// An assurance of getting the water successfully&lt;/span&gt;
 &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Example of the &lt;code&gt;reject&lt;/code&gt;:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// OOPS, Jack fell down and broke his crown. &lt;/span&gt;
      &lt;span class="c1"&gt;// And Jill came tumbling after.&lt;/span&gt;
      &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Disaster&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Throwing and error&lt;/span&gt;
 &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-promise-object-and-states"&gt;
  &lt;/a&gt;
  The Promise object and States
&lt;/h2&gt;

&lt;p&gt;In the &lt;em&gt;Jack and Jill&lt;/em&gt; story, the grandparents were not waiting for the kids to fetch the water. They were planning the day in the meantime. But Jack and Jill informed them in both the cases of getting the water successfully or meeting with the disaster. Also, the grandparents were the consumers of the water to cook the food.&lt;/p&gt;

&lt;p&gt;Similarly, the promise object should be capable of informing the consumers when the execution has been started, completed (resolved), or returned with error (rejected).&lt;/p&gt;

&lt;p&gt;A promise object has the following internal properties,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;state: This property can have the following values,

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;pending&lt;/strong&gt;: When the execution function starts. In our story, when Jack and Jill start to fetch the water.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;fulfilled&lt;/strong&gt;: When the promise resolves successfully. Like, Jack and Jill are back with the water.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;rejected&lt;/strong&gt;: When the promise rejects. Example. Jack and Jill couldn't complete the mission. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;result: This property can have the following values,

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;undefined&lt;/strong&gt;: Initially, when the state value is &lt;code&gt;pending&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;value&lt;/strong&gt;: When the promise is resolved(value).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;error&lt;/strong&gt;: When the promise is rejected.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A promise that is either resolved or rejected is called settled.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6dLW4wSu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627641022869/AElwEIAHJ.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6dLW4wSu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627641022869/AElwEIAHJ.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="states_2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So the consumers(like the grandparents) need to rely on the &lt;code&gt;promise&lt;/code&gt; object to know the state and value/error.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#handling-promises-by-the-consumers"&gt;
  &lt;/a&gt;
  Handling Promises by the Consumers
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;promise&lt;/code&gt; object returned by the &lt;code&gt;new Promise&lt;/code&gt; constructor has it all. A consumer can use it to know the &lt;code&gt;state&lt;/code&gt;(pending, fulfilled, or rejected)  and the possible outcomes(&lt;code&gt;value&lt;/code&gt; or &lt;code&gt;error&lt;/code&gt;) from it.&lt;/p&gt;

&lt;p&gt;But hold on. These properties are internal. They are code-inaccessible, but they are inspectable. It means that we will be able to inspect the &lt;code&gt;state&lt;/code&gt; and &lt;code&gt;result&lt;/code&gt; property values using a debugger tool, but we will not be able to access them directly using the program.&lt;/p&gt;

&lt;p&gt;So then? That's where we have three important handler methods, &lt;code&gt;.then()&lt;/code&gt;, &lt;code&gt;.catch()&lt;/code&gt;, and &lt;code&gt;.finally()&lt;/code&gt;. These methods help us create a link between the &lt;code&gt;executor&lt;/code&gt; and the consumer when a promise resolves or rejects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_baM3ZHM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627642705813/znXVJQ6QO.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_baM3ZHM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627642705813/znXVJQ6QO.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="executor-consumer.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-then-promise-handler"&gt;
  &lt;/a&gt;
  The .then() Promise Handler
&lt;/h3&gt;

&lt;p&gt;We get a &lt;code&gt;.then()&lt;/code&gt; method from every promise. The sole purpose of this method is to let the consumer know about the outcome of a promise. It accepts two functions as arguments, &lt;code&gt;result&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are just interested in the successful outcome, you can chose to pass only one argument,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similarly, if you are interested in only the error, pass &lt;code&gt;null&lt;/code&gt; as the value for the first argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is a bit odd syntax to pass a &lt;code&gt;null&lt;/code&gt; explicitly for an error case. That's where we have an alternative called the &lt;code&gt;.catch()&lt;/code&gt; method we will see soon. &lt;/p&gt;

&lt;p&gt;Also note, you can do three very exceptional things inside the &lt;code&gt;.then()&lt;/code&gt; method,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can &lt;code&gt;return&lt;/code&gt; another &lt;code&gt;promise&lt;/code&gt; from it.&lt;/li&gt;
&lt;li&gt;You can &lt;code&gt;return&lt;/code&gt; a value including &lt;code&gt;undefined&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You can &lt;code&gt;throw&lt;/code&gt; an error.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These three points will be the basis of learning the &lt;code&gt;Promise Chain&lt;/code&gt; in the future article. Now, let's write the code for Jack and Jill, fulfilling the promise of getting water to their grandparents.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 1. Create a Promise to fetch the water&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="c1"&gt;// Pretend a delay of 2 sec to fetch it!&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Fetched the water. Let's resolve the promise&lt;/span&gt;
      &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hurray! Fetched the Water.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// 2. Function to Set up the handler to handle a promise result.&lt;/span&gt;
&lt;span class="c1"&gt;// It is to inform the grandparents when the result is available.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;grandParentsCooking&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// The handler function to handle the resolved promise&lt;/span&gt;
  &lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Fetched the water. Now grandparents can start the cooking&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`cooking rice with the &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// 3. Calling the function to activate the set up.&lt;/span&gt;
&lt;span class="nx"&gt;grandParentsCooking&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Output,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;cooking rice with the Hurray! Fetched the Water.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, three things happen in the above code,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We create the promise. In the executor function, we delay 2 seconds to pretend an async call(actually, climbing hills and fetching water takes a lot more!). Then we resolve the promise saying, 'Hurray! Fetched the Water.'&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We have set up an information mechanism for the grandparents to know when the water is fetched successfully. We use the &lt;code&gt;.then()&lt;/code&gt; handler for this purpose. Once they get the water, they start cooking. Note, here we define it, not calling it yet.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Activating the handler by calling the function.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#the-catch-promise-handler"&gt;
  &lt;/a&gt;
  The .catch() Promise Handler
&lt;/h3&gt;

&lt;p&gt;You can use this handler method to handle errors (rejections) from promises. As we discussed already, it is a much better syntax to handle the error situation than handling it using the &lt;code&gt;.then()&lt;/code&gt; method. So let us now handle the "Jack fell down..." situation using JavaScript promise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 1. Create the promise&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Reject it as the disaster happend.&lt;/span&gt;
      &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack fell down and broke his crown. And Jill came tumbling after.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// 2. Inform grandparents &lt;/span&gt;
&lt;span class="c1"&gt;// but this time we are using the .catch&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;grandParentsCooking&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`OMG &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// 3. Call the function&lt;/span&gt;
&lt;span class="nx"&gt;grandParentsCooking&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Output,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sqyvv3pA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627645477331/rNEXP6U9O.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sqyvv3pA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627645477331/rNEXP6U9O.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A few points to note,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We use the &lt;code&gt;reject&lt;/code&gt; method in the above code to reject the promise.&lt;/li&gt;
&lt;li&gt;You can pass any type of argument to the &lt;code&gt;reject&lt;/code&gt; method like the &lt;code&gt;resolve&lt;/code&gt; method. However, it is recommended to use the &lt;code&gt;Error&lt;/code&gt; objects. We will discuss it in detail in the future article on error handling with promise.&lt;/li&gt;
&lt;li&gt;We use the &lt;code&gt;.catch()&lt;/code&gt; handler to handle the rejection. In the real world, you will have both &lt;code&gt;.then()&lt;/code&gt; and &lt;code&gt;.catch()&lt;/code&gt; methods to handle the resolve and reject scenarios. We will learn it in the promise chaining article of the series.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-finally-promise-handler"&gt;
  &lt;/a&gt;
  The .finally() Promise Handler
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;.finally()&lt;/code&gt; handler method performs cleanups like stopping a loader, closing a live connection, and so on. Irrespective of whether a promise resolves or rejects, the &lt;code&gt;.finally()&lt;/code&gt; method will be called.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Loading...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Getting the promise&lt;/span&gt;
&lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getPromise&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Promise Settled and loading is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The vital point to note, the &lt;code&gt;.finally()&lt;/code&gt; method passes through the result or error to the next handler, which can call a &lt;code&gt;.then()&lt;/code&gt; or &lt;code&gt;.catch()&lt;/code&gt; again. It is convenient, and we will see many examples of it in the promise chain article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-summary"&gt;
  &lt;/a&gt;
  In Summary
&lt;/h2&gt;

&lt;p&gt;To Summarize,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Promise&lt;/code&gt; is an important building block for the asynchronous concept in JavaScript.&lt;/li&gt;
&lt;li&gt;You can create a promise using the constructor function.&lt;/li&gt;
&lt;li&gt;The constructor accepts an executor function as an argument and returns a promise object.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;promise&lt;/code&gt; object has two internal properties, state and result. These properties are not code-accessible.&lt;/li&gt;
&lt;li&gt;The consumer of a promise can use the &lt;code&gt;.then()&lt;/code&gt;, &lt;code&gt;.catch()&lt;/code&gt;, and &lt;code&gt;.finally()&lt;/code&gt; methods to handle promises.&lt;/li&gt;
&lt;li&gt;The Promise is better understood using examples, like the &lt;em&gt;Jack and Jill&lt;/em&gt; Story.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope now you will be able to relate to the analogy table better.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;In Real Life(with JavaScript)&lt;/th&gt;
&lt;th&gt;In Our Story&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Promise&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Water fetching by Jack 👦 and Jill 👧&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Executor Function&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Fetch the Water 🏃‍♀️ 🏃‍♂️&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Activity&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Fetch 🧶&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Expected data in response&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Water 💧&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Consumers&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Grandparents 👵 👴&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;resolve/fulfilled&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;✔️ Successfully get the water for cooking&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;reject/rejected&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;❌ Disaster(error) in getting the water&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Task after getting the data successfully&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Cooking 🍚&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;That's all for now. Please stay tuned for the second article of the series. We will learn about the &lt;code&gt;Promise Chain&lt;/code&gt; with another story.&lt;/p&gt;



&lt;br&gt;
I hope you enjoyed this article or found it helpful. Let's connect. Please find me on &lt;a href="https://twitter.com/tapasadhikary"&gt;Twitter(@tapasadhikary)&lt;/a&gt;, sharing thoughts, tips, and code practices. 

&lt;p&gt;You may also like,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.greenroots.info/what-exactly-is-javascript-tagged-template-literal"&gt;What exactly is JavaScript Tagged Template Literal?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.greenroots.info/a-practical-guide-to-object-destructuring-in-javascript"&gt;A practical guide to object destructuring in JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.greenroots.info/explain-me-like-i-am-five-what-are-es6-symbols"&gt;Explain Me Like I am Five: What are ES6 Symbols?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>node</category>
    </item>
    <item>
      <title>Important Docker Commands To Know As A Beginner</title>
      <author>Rohith V</author>
      <pubDate>Thu, 05 Aug 2021 09:00:22 +0000</pubDate>
      <link>https://dev.to/rohithv07/important-docker-commands-to-know-as-a-beginner-2mng</link>
      <guid>https://dev.to/rohithv07/important-docker-commands-to-know-as-a-beginner-2mng</guid>
      <description>&lt;h2&gt;
  &lt;a href="#commands-to-remember-"&gt;
  &lt;/a&gt;
  Commands to remember :
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;docker run&lt;/code&gt; :- runs a command in a new container . &lt;code&gt;docker run = docker create + docker start&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;docker run -p &amp;lt;localhostport&amp;gt;:&amp;lt;containerport&amp;gt; &amp;lt;imagename/id&amp;gt;&lt;/code&gt; :- running on ports&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;docker ps&lt;/code&gt; :- to list all the running containers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;docker ps --all&lt;/code&gt; :- list all the container ever created&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;docker system prune&lt;/code&gt; :- to delete all the containers ever created along with some other properties&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;docker logs &amp;lt;container-id&amp;gt;&lt;/code&gt; :- to get the logs&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;docker start&lt;/code&gt; :- start stopped container&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;docker stop&lt;/code&gt; :- stop the container - gets a sigterm message - terminate signal&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;docker kill&lt;/code&gt; :- kills the container or stops the container instantly&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;docker exec -it &amp;lt;container id&amp;gt; &amp;lt;command&amp;gt;&lt;/code&gt; :- Execute an additional command in container. &lt;code&gt;-it&lt;/code&gt; makes us to provide the input. &lt;code&gt;-it equivalent to -i -t&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;docker exec -it &amp;lt;container id&amp;gt; sh&lt;/code&gt; :- provides access to the terminal inside the context of the container&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;docker build .&lt;/code&gt; :- build an image from a Docker file&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;docker-compose up&lt;/code&gt; :- aggregates the output of each container. Similar to docker run myimage&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;docker-compose up --build&lt;/code&gt; :- similar to docker build and docker run. Rebuilds the container after making any changes to the file &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;docker-compose up -d&lt;/code&gt; :- starts the containers in the background and leaves them running&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;docker-compose down&lt;/code&gt; :- stops the running containers at the same time&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;docker-compose ps&lt;/code&gt; :- show the status of the containers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;docker commit&lt;/code&gt; :- manual image generation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;docker build -f &amp;lt;filename&amp;gt; .&lt;/code&gt; :- to run a dockerfile with some different name&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;docker pull&lt;/code&gt; :- pulls an image from registry&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;docker push&lt;/code&gt; :- pushes an image to registry&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;docker search&lt;/code&gt; :- search for an image in Docker Hub&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;docker history&lt;/code&gt; :- shows the history of the image&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;docker info&lt;/code&gt; :- shows system wide information&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;docker rm&lt;/code&gt; :- remove one or more containers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;docker rmi&lt;/code&gt; :-remove one or more images&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;docker pause&lt;/code&gt; :- pauses all processes within one or more containers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;docker unpause&lt;/code&gt; :- unpause all processes within one or more containers&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://rohithv07.github.io/Docker/"&gt;Docker Quick Commands&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Rohithv07"&gt;
        Rohithv07
      &lt;/a&gt; / &lt;a href="https://github.com/Rohithv07/Docker"&gt;
        Docker
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      My Workplay on Docker and Kubernetes. Ref : https://github.com/Rohithv07/DockerCasts
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Docker and Kubernetes&lt;/h1&gt;
&lt;p&gt;My Workplay on docker&lt;/p&gt;
&lt;h2&gt;
Commands to remember :&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;docker run&lt;/code&gt; :- runs a command in a new container . &lt;code&gt;docker run = docker create + docker start&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;docker run -p &amp;lt;localhostport&amp;gt;:&amp;lt;containerport&amp;gt; &amp;lt;imagename/id&amp;gt;&lt;/code&gt; :- running on ports&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;docker ps&lt;/code&gt; :- to list all the running containers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;docker ps --all&lt;/code&gt; :- list all the container ever created&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;docker system prune&lt;/code&gt; :- to delete all the containers ever created along with some other properties&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;docker logs &amp;lt;container-id&amp;gt;&lt;/code&gt; :- to get the logs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;docker start&lt;/code&gt; :- start stopped container&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;docker stop&lt;/code&gt; :- stop the container - gets a sigterm message - terminate signal&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;docker kill&lt;/code&gt; :- kills the container or stops the container instantly&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;docker exec -it &amp;lt;container id&amp;gt; &amp;lt;command&amp;gt;&lt;/code&gt; :- Execute an additional command in container. &lt;code&gt;-it&lt;/code&gt; makes us to provide the input. &lt;code&gt;-it equivalent to -i -t&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;docker exec -it &amp;lt;container id&amp;gt; sh&lt;/code&gt; :- provides access to the terminal…&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Rohithv07/Docker"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


</description>
      <category>docker</category>
      <category>devops</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>6 reasons to use Tailwind over traditional CSS</title>
      <author>npm run dev</author>
      <pubDate>Thu, 05 Aug 2021 08:46:50 +0000</pubDate>
      <link>https://dev.to/npmrundev/6-reasons-to-use-tailwind-over-traditional-css-1nc3</link>
      <guid>https://dev.to/npmrundev/6-reasons-to-use-tailwind-over-traditional-css-1nc3</guid>
      <description>&lt;h2&gt;1. Tiny bundle size = incredible performance&lt;/h2&gt;

&lt;p&gt;When in development mode, the size of Tailwind's output is pretty large. This is by design: Every possible class is generated at this stage so you don't need to wait for a build process to finish when you want to use something.&lt;/p&gt;

&lt;p&gt;Once Tailwind CSS is put into production mode, however, it will &lt;strong&gt;purge&lt;/strong&gt; any classes which aren't used with a tool called PurgeCSS. This works by searching through your project files for the names of the classes, keeping only those which are used. You can configure which file paths it will search through in your &lt;code&gt;tailwind.config.js&lt;/code&gt; in the &lt;code&gt;purge&lt;/code&gt; array.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// tailwind.config.js
module.exports = {
  purge: [
    './src/components/**/**/*.jsx',
    './src/layout/**/**/*.jsx',
    './src/pages/**/**/*.jsx',
  ],
  theme: {},
  variants: {},
  plugins: [],
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It's quite easy to get a very small CSS bundle size without even trying, which really helps in getting your performance score up. You'd be pretty hard pressed to get a bundle size over 10kb, so websites that use Tailwind tend to load very quickly without needing much optimisation on the CSS front - so long as the rest of the site is also optimised.&lt;/p&gt;

&lt;p&gt;All you need to do is make sure you always reference classes by their full name, not by building names using JavaScript.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// bad
&amp;lt;div className={ 'bg-' + props.isDark ? 'neutral-dark' : 'neutral-light' }&amp;gt;

// good
&amp;lt;div className={ props.isDark ? 'bg-neutral-dark' : 'bg-neutral-light' }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, while this would go mostly unnoticed on faster machines, the simplicity of Tailwind classes, in that they aren't built using &lt;a href="https://csswizardry.com/2011/09/writing-efficient-css-selectors/"&gt;complex selectors&lt;/a&gt;, means your browser is a little bit faster when parsing and rendering CSS. This helps with performance on slower computers and old phones. As someone whose phone was already slow when I bought it 6 years ago, I'll take any improvement I can get.&lt;/p&gt;

&lt;h2&gt;2. Prototype and build quickly&lt;/h2&gt;

&lt;p&gt;With regular SCSS, you need to write custom classes for every single element on your page. While it can offer finer control, writing custom classes takes a decent amount of time: You have to add the class in the HTML, then create it in the CSS, and then write out every property in long format. Then you have to wait for the CSS to build before you can see the result - plus, if you need to make more changes you'll need to rebuild every time, which can take valuable seconds and interrupt your flow.&lt;/p&gt;

&lt;p&gt;Tailwind CSS takes out those extra steps and gives you a simple, snappy developer experience when styling elements. You see the element you want to style, add the properties it needs using shorthand, and the changes appear very quickly without having to wait for a CSS bundle. Your attention can stay in one place so you aren't switching around to different files constantly, and the whole process just feels &lt;em&gt;simple&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I can understand that it may take a while to learn all the shorthand. There's some good tools to help with this, chiefly the &lt;a href="https://tailwindcss.com/docs"&gt;official docs&lt;/a&gt; or &lt;a href="https://twitter.com/nerdcave"&gt;@nerdcave&lt;/a&gt;'s &lt;a href="https://nerdcave.com/tailwind-cheat-sheet"&gt;Tailwind cheat sheet&lt;/a&gt;. But to be honest, after spending a week or so using it you will have remembered most of the important stuff. There's a couple of weird gotchas, such as not having classes for &lt;code&gt;flex-basis&lt;/code&gt;, but there's always reason: In this case, you can just use the width attributes such as &lt;code&gt;w-1/2&lt;/code&gt; in its stead. It just takes a little bit of time, but has the potential to save a whole lot more.&lt;/p&gt;

&lt;p&gt;I've used Tailwind in some production sites that had very tight deadlines and I have to say, it definitely took a lot of pressure off when it came to styling up the frontend. If you're on a tight deadline, Tailwind could make life a little easier.&lt;/p&gt;

&lt;h2&gt;3. It handles CSS variables automatically&lt;/h2&gt;

&lt;p&gt;Tailwind generates a file called &lt;code&gt;tailwind.config.js&lt;/code&gt;. This file contains all your settings for your theme, including colours, widths, spacing (used for padding, margins and similar properties), fonts and so on. Your entire CSS bundle and all the classes you use will be based on this file.&lt;/p&gt;

&lt;p&gt;Each property can be assigned a name which will be how you can refer to the classes associated. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// tailwind.config.js

colors: {
  brand: {
    DEFAULT: '#f0000',   // bg-brand
    primary: '#f0000',   // bg-brand-primary
    secondary: '#f0000'  // bg-brand-secondary
}

// other ways to use these colours
.text-brand
.border-brand-secondary&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you can change all these properties any time you like, the names will stay the same unless you change them. So Tailwind will handle all of your CSS variables - it influences the entire look of your site. &lt;em&gt;This &lt;/em&gt;is your source of truth - if a brand colour changes, or you need to change the fonts everywhere, &lt;code&gt;tailwind.config.js&lt;/code&gt; is where you can do that.&lt;/p&gt;

&lt;h2&gt;4. Eliminates scope leak&lt;/h2&gt;

&lt;p&gt;One of the traits people love of BEM and why it's so popular today, is that the naming system classes are built to represent the structure of a component. While making it easy to read and understand, developers also benefit from a side effect of this structure: Since the layout is easy to understand, you can write classes without using CSS selectors.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// this
.block {
  &amp;amp;__element { ... }
  &amp;amp;__element--modifier { ... }
}

// not this
.block {
  &amp;amp; &amp;gt; .element {
    &amp;amp;.modifier { ... }
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem with CSS selectors is they introduce complexity into CSS where components become very dependent on a particular HTML structure. Since generic CSS classes such as &lt;code&gt;.container&lt;/code&gt; can repeat a lot, using these names can lead to overlap, where changing one class will affect many other classes. It's one of the main reasons we use BEM, because it makes this structure clear and flattens every class to the top-level scope so nothing depends on anything else. Working without a CSS methodology like this can lead to headaches, and keeping it as simple as possible means more people can understand it more easily.&lt;/p&gt;

&lt;p&gt;The way utility-first CSS works is by embracing this idea: Don't have anything depend on anything else. In Tailwind classes are single purpose, generally made up of only one or two CSS properties, and they never depend on each other except for intentional exceptions, such as the group hover feature. You really don't even need to think about scope leak, because unless you add those selectors yourself with custom CSS, the option to nest classes in complex selectors isn't really built in.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// this is all tailwind classes are
.w-1/2 {
  width: 50%;
}
.mx-auto {
  margin-left: auto;
  margin-right: auto;
}&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;// using hover groups
&amp;lt;div class="group bg-white hover:bg-black"&amp;gt;
  &amp;lt;h3 class="text-grey group-hover:text-black group-hover:underline"&amp;gt;Title&amp;lt;/h3&amp;gt;
  &amp;lt;p class="text-grey group-hover:text-black"
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What I really like about it is that there's no need for vague, overly specific or generally throwaway class names. You don't need to name every text style, every random CSS shape or flourish. Again, you're still free to comment the HTML if you need to, but sometimes there's no need to name every class that only has &lt;code&gt;display: flex&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What if I still need to use selectors?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Of course, there are times when selectors may be the best option, such as for styling WYSIWYG blocks, but generally avoiding selectors can help to maintain an easy to read and understand codebase. Remember you can still use SCSS alongside Tailwind if you prefer. If you do need to use selectors, prefixes can help to keep track of what's custom CSS and what's not. I like to use this method for WYSIWYGs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// typography.scss

.t-wysiwyg {
   &amp;amp; p {
     font-size: 12px;
   }
   &amp;amp; strong {
     @apply font-bold;
   }
}

.t-wysiwyg--contact { ... }&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;5. SCSS is still there if you need it&lt;/h2&gt;

&lt;p&gt;It's good to keep in mind that you don't need to use Tailwind CSS &lt;em&gt;instead of&lt;/em&gt; SCSS. There will still be times when you need to create an element that uses :&lt;code&gt;before&lt;/code&gt; and &lt;code&gt;:after&lt;/code&gt; elements, or when you need a custom keyframe animation. When this happens, you can just use SCSS or any other preprocesser in the exact same way you did before - no need to make a choice between the two.&lt;/p&gt;

&lt;p&gt; I prefer to use Tailwind for all the heavy lifting, and for elements that need CSS features I can switch over to SCSS. This allows me to work much faster while still achieving a high level of quality, customisation and detail.&lt;/p&gt;

&lt;p&gt;The simplicity of using shorthand classes over long, descriptive class names does feel freeing. There's no denying that BEM or a similar methodology's class names are helpful - you're informed on exactly what a class is meant to do. At least, that's the theory. The issue is that when &lt;em&gt;every&lt;/em&gt; element needs to have a unique class name, you end up with some vague, strange, or downright daft classes. It can be difficult to get used to not having classes described, but once you have a good understanding of the syntax it's just like reading regular CSS, and you can always comment your HTML with a description of what the class is.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;-- Contact Section - 2 column, 1 column on mobile --&amp;gt;
&amp;lt;div class="flex flex-row items-center"&amp;gt;
  &amp;lt;-- Map --&amp;gt;
  &amp;lt;div class="w-full tablet:w-1/2"&amp;gt;
    &amp;lt;img src="map.jpg" /&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;-- Content --&amp;gt;
  &amp;lt;div class="w-full tablet:w-1/2"&amp;gt;
    &amp;lt;h3&amp;gt;&amp;lt;/h3&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;ul&amp;gt;&amp;lt;/ul&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;6. Works great with JavaScript frameworks&lt;/h2&gt;

&lt;p&gt;It should be known that Tailwind is not going to be DRY when used in an environment where you'll be copy and pasting HTML, so don't expect things to go well if you're working with plain HTML files. Once you start copy and pasting like this, you no longer have a central source of truth where you can change the way your components look, since the source of truth for your website styling is no longer tied to CSS files.&lt;/p&gt;

&lt;p&gt;Modern JavaScript frameworks are where Tailwind's features can really shine. This is because frameworks like Vue or React are based around creating reusable components, in order to minimise the amount of HTML that needs to be written. These components are the building blocks of your application, and can be a simple container or a large component composed of smaller components.&lt;/p&gt;

&lt;p&gt;These components are stored in their own custom files which combine HTML and JS, and in Vue you have the option to combine your CSS into a single file as well. This means your sources of truth no longer need to be separated by file type, they can all exist in the same file which handles a single component. This is what's known as component-based development, which JavaScript frameworks embrace with open arms: we've seen styled-components, CSS-in-JS, and now Tailwind, all of which help to contain all the CSS related to a component within that component. They can still be split out into different files, but if you want to make a change to that component you will be going straight to that component's folder instead of three separate locations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sV9P7Jub--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://npmrundev.files.wordpress.com/2021/08/filez.png%3Fw%3D275" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sV9P7Jub--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://npmrundev.files.wordpress.com/2021/08/filez.png%3Fw%3D275" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've written about this concept more in my other post, &lt;a href="https://wordpress.com/post/npmrundev.wordpress.com/114"&gt;Learning to love Tailwind&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I'll be the first to admit that Tailwind CSS probably isn't the right choice in every situation. It has some really fantastic features, it's really speedy and it compiles down to ridiculous file sizes, but it requires a totally different mindset and set of tools to take advantage of these features without getting frustrated.&lt;/p&gt;

&lt;p&gt;I've noticed a lot of teams, particularly those building headless sites with frontend frameworks, are adopting Tailwind and solutions like it. I think we're still in the early days of this approach and there's a lot to figure out, but the potential is huge. I'm excited to see where it goes in future.&lt;/p&gt;

</description>
      <category>css</category>
      <category>tailwindcss</category>
      <category>react</category>
      <category>vue</category>
    </item>
    <item>
      <title>A Next.js complete beginner tutorial using the Spotify API</title>
      <author>Salma Alam-Naylor</author>
      <pubDate>Thu, 05 Aug 2021 08:43:14 +0000</pubDate>
      <link>https://dev.to/whitep4nth3r/a-next-js-complete-beginner-tutorial-using-the-spotify-api-3756</link>
      <guid>https://dev.to/whitep4nth3r/a-next-js-complete-beginner-tutorial-using-the-spotify-api-3756</guid>
      <description>&lt;p&gt;In this video I'm joined by Ebonie, otherwise known as &lt;a href="https://twitter.com/metalandcoffee_"&gt;MetalAndCoffee_&lt;/a&gt; — web developer, Metal DJ and Twitch streamer — to set up a new project in Next.js to curate music recommendations using the Spotify API.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/XPnBp0LwCFY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This video tutorial takes an in-depth look at the structure of a Next.js application for complete beginners. I also include a demonstration of some tips and tricks on how to make your project more accessible and how to improve the developer experience, including &lt;a href="https://whitep4nth3r.com/blog/how-to-set-up-new-next-js-projects-with-bash-script"&gt;How I set up my new Next.js projects with a handy bash script&lt;/a&gt; and &lt;a href="https://whitep4nth3r.com/blog/how-to-avoid-using-relative-path-imports-next-js"&gt;How to avoid using relative path imports in Next.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the project we use &lt;a href="https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation"&gt;getStaticProps()&lt;/a&gt; to fetch data from Spotify at build-time to generate static pages that work without JavaScript on the client. We also use &lt;a href="https://nextjs.org/docs/basic-features/data-fetching#getstaticpaths-static-generation"&gt;getStaticPaths()&lt;/a&gt; to generate over 100 dynamic routes at build time using data from the Spotify API. It works really well!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  Source code
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/metalandcoffee/metal-music-curations"&gt;View the code for this project on GitHub.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#video-outline"&gt;
  &lt;/a&gt;
  Video outline
&lt;/h2&gt;

&lt;p&gt;Click on the links below to jump to the relevant sections of the video.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XPnBp0LwCFY&amp;amp;t=31s"&gt;Project description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XPnBp0LwCFY&amp;amp;t=62s"&gt;Why use Next.js?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XPnBp0LwCFY&amp;amp;t=65s"&gt;Structuring a Next.js application with dynamic routes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XPnBp0LwCFY&amp;amp;t=180s"&gt;Exploring the Next.js app folder structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XPnBp0LwCFY&amp;amp;t=196s"&gt;The Next.js pages directory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XPnBp0LwCFY&amp;amp;t=246s"&gt;The Next.js API directory and serverless functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XPnBp0LwCFY&amp;amp;t=368s"&gt;The Next.js public directory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XPnBp0LwCFY&amp;amp;t=396s"&gt;The Next.js styles directory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XPnBp0LwCFY&amp;amp;t=410s"&gt;Adding a custom _document.js file to add a lang attribute on the HTML tag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XPnBp0LwCFY&amp;amp;t=493s"&gt;Adding a jsconfig.json to avoid relative path imports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XPnBp0LwCFY&amp;amp;t=532s"&gt;Getting started by editing pages/index.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XPnBp0LwCFY&amp;amp;t=551s"&gt;The Next.js Head component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XPnBp0LwCFY&amp;amp;t=577s"&gt;What you get with CSS Modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XPnBp0LwCFY&amp;amp;t=690s"&gt;The structure of a Next.js page file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XPnBp0LwCFY&amp;amp;t=718s"&gt;Data fetching with Next.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XPnBp0LwCFY&amp;amp;t=742s"&gt;Setting up getStaticProps() and passing data to a page component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XPnBp0LwCFY&amp;amp;t=875s"&gt;Working with environment variables and .env files in Next.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XPnBp0LwCFY&amp;amp;t=935s"&gt;Using JavaScript fetch to get a list of genres from Spotify in getStaticProps()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XPnBp0LwCFY&amp;amp;t=1091s"&gt;Setting up getStaticPaths() to generate dynamic routes with data from Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XPnBp0LwCFY&amp;amp;t=1412s"&gt;Using dynamic route params to fetch track recommendations from Spotify in getStaticProps()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XPnBp0LwCFY&amp;amp;t=1506s"&gt;Using Next.js Link to enable client-side transitions between page routes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XPnBp0LwCFY&amp;amp;t=1677s"&gt;Creating a React component to render Spotify track information&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XPnBp0LwCFY&amp;amp;t=1765s"&gt;Using Next Image to optimize images with lazy loading, source set and preventing cumulative layout shift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XPnBp0LwCFY&amp;amp;t=2020s"&gt;CSS Module file naming conventions and structuring your projects for scale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XPnBp0LwCFY&amp;amp;t=2147s"&gt;Rebuilding your site on the server when data changes using Incremental Static Regeneration (ISR)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This video was recorded &lt;a href="https://twitch.tv/whitep4nth3r"&gt;live on Twitch&lt;/a&gt; on Friday 30th July 2021.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>Introduction to Generators in JavaScript</title>
      <author>Parth Patil</author>
      <pubDate>Thu, 05 Aug 2021 08:37:56 +0000</pubDate>
      <link>https://dev.to/parth2412/introduction-to-generators-in-javascript-5hn8</link>
      <guid>https://dev.to/parth2412/introduction-to-generators-in-javascript-5hn8</guid>
      <description>&lt;p&gt;Generators are an advanced concept in javascript but are quite easy to understand. Generators are special functions in javascript which can return multiple values on demand unlike regular functions which can only return one value. &lt;/p&gt;

&lt;p&gt;Unlike normal functions, the execution of a generator function can be stopped &lt;strong&gt;midway&lt;/strong&gt; and can be resumed. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-create-a-generator-function"&gt;
  &lt;/a&gt;
  How to create a generator function
&lt;/h2&gt;

&lt;p&gt;There is a special syntax for creating a generation function which is not much different from the normal function syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;generatorFunction&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The * after the function keyword is what makes this function a generator function. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-the-generator-function-created-above"&gt;
  &lt;/a&gt;
  How to use the generator function created above
&lt;/h2&gt;

&lt;p&gt;Another keyword yield is introduced here. You can think of yield as the return keyword but for generator functions. Let's take an example here&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;generatorFunction&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Start&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Midway&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Stop&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;gen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;generatorFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// logs 7&lt;/span&gt;
&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// logs 8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see what's happening here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We define a generator function which first yields (returns) the number 7 and then next yields the number 8. We also added a couple of console logs.&lt;/li&gt;
&lt;li&gt;We call the generatorFunction here and store the return value in the variable &lt;code&gt;gen&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Normally when using normal functions you will expect the &lt;code&gt;gen&lt;/code&gt; variable to hold the value 7. &lt;/li&gt;
&lt;li&gt;But that's not the case for generators.  The &lt;code&gt;gen&lt;/code&gt; variable doesn't store the value yielded by the generator, instead it stores a &lt;code&gt;Generator&lt;/code&gt; object returned by &lt;code&gt;generatorFunction&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;gen&lt;/code&gt; object has a method &lt;code&gt;next()&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;The first call of the &lt;code&gt;gen.next()&lt;/code&gt; method starts the execution of the generator function and when it reaches a &lt;code&gt;yield&lt;/code&gt;, it stops the function there and returns an object which has 2 properties &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;done&lt;/code&gt;.   &lt;strong&gt;Value&lt;/strong&gt; is the yielded value and &lt;strong&gt;done&lt;/strong&gt; is a boolean which tells us whether the generator function is done completely executing or not&lt;/li&gt;
&lt;li&gt;So in the above example, when &lt;code&gt;gen.next()&lt;/code&gt; is called for the first time, the generator function starts executing. "Start" is logged to the console and then the generator yields a value of 7. That's when it stops the function and returns an object, which (in this case) will be &lt;code&gt;{ value : 7 , done : false }&lt;/code&gt;. &lt;strong&gt;value&lt;/strong&gt; is the yielded value which is 7. &lt;strong&gt;done&lt;/strong&gt; is &lt;code&gt;false&lt;/code&gt; because the generator is not completely executed yet; there are still some lines of code in the function yet to be executed. "7" is logged to the console.&lt;/li&gt;
&lt;li&gt;The next (second) call of the &lt;code&gt;gen.next()&lt;/code&gt; method resumes the generator function from the point it stopped at before. Thus, "Midway" is logged to the console and then the generator yields a value of 8. It stops the function there and returns  &lt;code&gt;{ value: 8, done: false}&lt;/code&gt; since the yielded value is 8 and the function is still not done executing. "8" is logged to the console.&lt;/li&gt;
&lt;li&gt;"Stop" is never logged to the console since we never call &lt;code&gt;gen.next()&lt;/code&gt; again&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;In the above example, if we call &lt;code&gt;gen.next()&lt;/code&gt; for a third time, "Stop" will be logged on the console and the object returned would be &lt;code&gt;{value : undefined, done : true}&lt;/code&gt;. Notice how this time the done property is true? That's because all the code of the generator is done executing. Whereas the value property is undefined? That's because no value has been yielded by the generator. If you keep calling &lt;code&gt;gen.next()&lt;/code&gt; after this, the result will always be &lt;code&gt;{value : undefined, done : true}&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A generator object cannot be restarted. Once it's done completely executing, you cannot restart it. If you want to run a generator function again make a new &lt;code&gt;Generator&lt;/code&gt; object by calling &lt;code&gt;generatorFunction&lt;/code&gt; and store it in a new variable. Then you can work with that variable.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Example :&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newGen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;generatorFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newGen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newResult&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// logs 7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Node.js Event Emitter</title>
      <author>Taslan Graham</author>
      <pubDate>Thu, 05 Aug 2021 08:33:12 +0000</pubDate>
      <link>https://dev.to/taslangraham/node-js-event-emitter-fed</link>
      <guid>https://dev.to/taslangraham/node-js-event-emitter-fed</guid>
      <description>&lt;p&gt;Node's event-driven architecture allows us to execute certain actions when something happens. This is done via objects (called "emitters") which can &lt;em&gt;emit &lt;/em&gt;named events that cause functions ("listeners") to be executed. Objects that emit events are instances of node's EventEmitter class, made available via the &lt;code&gt;events&lt;/code&gt; module. In this article we'll look at node's event emitter.&lt;/p&gt;

&lt;h2&gt;Creating an Emitter&lt;/h2&gt;

&lt;p&gt;Let's create an event to explore some of basic concepts with node's EventEmitter&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Require in the events module &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;events&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;carEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;events&lt;/code&gt; module provides us with the &lt;code&gt;EventEmitter&lt;/code&gt; class. We then create an instance of &lt;code&gt;EventEmitter &lt;/code&gt;called &lt;code&gt;carEvent&lt;/code&gt;. Now let's explore some of the methods available to us.&lt;/p&gt;

&lt;h2&gt;Adding a listener&lt;/h2&gt;

&lt;p&gt;As mentioned earlier listeners are callbacks that gets executed when we emit a named event. Here's how you'd create an event listener on our &lt;code&gt;carEvent&lt;/code&gt; emmiter.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;carEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Started the car.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are registering a listener for the event named &lt;em&gt;start&lt;/em&gt;. This will be executed when we emit an event of said name.&lt;/p&gt;

&lt;p&gt;We can also add multiple listeners to a single event. Let's add another:&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;carEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Car started. Ready to go!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we'll emit events to trigger these listeners.&lt;/p&gt;

&lt;h2&gt;Emitting an Event&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;All listeners for an event will be called synchronously in the order in which they were registered.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We trigger the listener(s) for an event by calling the &lt;code&gt;emit()&lt;/code&gt; method with the name of the event as the first argument. Any  subsequent arguments will be passed on as arguments to the listeners. &lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;carEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello! &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Started the car.&lt;/span&gt;
&lt;span class="c1"&gt;// Car started. Ready to go!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above we emitted the &lt;em&gt;start&lt;/em&gt; event  which resulted in all listeners attached to the &lt;em&gt;start&lt;/em&gt; event being executed. Now lets update our second listener to make it accept an argument. &lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;carEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Car started. Ready to go!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we emit the &lt;em&gt;start &lt;/em&gt;event and get the following:&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;carEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Started the car.&lt;/span&gt;
&lt;span class="c1"&gt;// Hello! Car started. Ready to go!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Removing a listener from an event&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;removeListener()&lt;/code&gt; method removes a listener from an event. This takes the name of the event, and the handler function to be removed as arguments. Calls to this method only removes a single instance of a listener, so if you have a listener that was added multiple times then you'd have to call the  &lt;code&gt;removeListener()&lt;/code&gt; method multiple times to remove each listener.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Called listener function&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Add listener to event&lt;/span&gt;
&lt;span class="nx"&gt;carEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Emit event&lt;/span&gt;
&lt;span class="nx"&gt;carEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Called listener function&lt;/span&gt;

&lt;span class="c1"&gt;// Remove listener&lt;/span&gt;
&lt;span class="nx"&gt;carEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Emit event again&lt;/span&gt;
&lt;span class="c1"&gt;// Nothing happens, event was removed&lt;/span&gt;
&lt;span class="nx"&gt;carEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;removeListener&lt;/code&gt; method emits an event,  &lt;code&gt;removeListener&lt;/code&gt;,  after the listener has being removed. &lt;/p&gt;

&lt;h2&gt;More methods&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;on()&lt;/code&gt; and &lt;code&gt;emit() &lt;/code&gt;methods are the most commons ones used when when working with event emitters in node. However, lets take a look at some other useful methods available to us.&lt;/p&gt;

&lt;h4&gt;Once&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;once()&lt;/code&gt; method adds a listener that will be executed only, you guessed it :) , once.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Adds a listener to be executed once&lt;/span&gt;
&lt;span class="nx"&gt;carEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stop&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when emit the &lt;em&gt;stop &lt;/em&gt; event, node will remove the listener(from list of listeners attached to the event) then invoke it.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Executes the first time we emit the stop event&lt;/span&gt;
&lt;span class="nx"&gt;carEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stop&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Stopping....&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Stopping....&lt;/span&gt;

&lt;span class="c1"&gt;// Emit the stop event a second time&lt;/span&gt;
&lt;span class="c1"&gt;// Nothing happens&lt;/span&gt;
&lt;span class="nx"&gt;carEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stop&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Stopping....&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h4&gt;setMaxListeners&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;setMaxListeners()&lt;/code&gt; method allows you to set to the maximum number of listeners that can be attached to a single event. The value can be set to &lt;code&gt;Infinity&lt;/code&gt; (or &lt;code&gt;0&lt;/code&gt;) to indicate an unlimited number of listeners.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Sets a maximum of two listeners for any event on the carEvent emitter&lt;/span&gt;
&lt;span class="nx"&gt;carEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setMaxListeners&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we add more than two listeners to any event then we'll get a warning like the following:&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Add thre listeners to a single event&lt;/span&gt;
&lt;span class="nx"&gt;carEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;eventA&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;){});&lt;/span&gt;
&lt;span class="nx"&gt;carEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;eventA&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;){});&lt;/span&gt;
&lt;span class="nx"&gt;carEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;eventA&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;){});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;pre&gt;(node:17787) Warning: Possible EventEmitter memory leak detected. 3 eventA listeners added. Use emitter.setMaxListeners() to increase limit&lt;/pre&gt;



&lt;h4&gt;listeners&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;listeners()&lt;/code&gt; method returns an array of the listeners registered for an event.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;listeners&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;carEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listeners&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;listeners&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// [ [Function], [Function] ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h4&gt;eventNames&lt;/h4&gt;

&lt;p&gt;Returns an array listing the name of events for which the emitter has registered listeners.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;carEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eventNames&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// [ 'start', 'stop', 'eventA' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h2&gt;Extending The EventEmitter Class&lt;/h2&gt;

&lt;p&gt;We can create our own objects that has its own set of properties and methods along with the ones provided by node's &lt;code&gt;EventEmitter&lt;/code&gt;.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;events&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;brand&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;brand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;brand&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;turnRadioOn&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;radio turned on&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above we created a class that inherits from the &lt;code&gt;EventEmitter&lt;/code&gt; class as well as having two properties(&lt;em&gt;brand, and year&lt;/em&gt;) of its own along with a method,&lt;em&gt; turnRadioOn&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Now instances of the &lt;code&gt;Car&lt;/code&gt; class will have access to both the properties and methods on the &lt;code&gt;Car &lt;/code&gt;class as well as all the ones inherited from the  &lt;code&gt;EventEmitter&lt;/code&gt; class.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;BMW&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2021&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Adds a listener&lt;/span&gt;
&lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;brand&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; started&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Emit the event&lt;/span&gt;
&lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// BMW started&lt;/span&gt;

&lt;span class="c1"&gt;// Call method defined on Car class&lt;/span&gt;
&lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;turnRadioOn&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// radio turned on&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Node's EventEmitter allows us to create objects with listeners that gets executed when we emit an event that the listener is registered to. &lt;br&gt;We covered methods including the &lt;code&gt;on()&lt;/code&gt;, &lt;code&gt;emit()&lt;/code&gt;,  &lt;code&gt;removeListener()&lt;/code&gt; methods. We also looked at how we can extend the &lt;code&gt;EventEmitter&lt;/code&gt;when creating our own classes.&lt;/p&gt;

&lt;p&gt;Did you find this useful? Let me know if the comments. Until next time, &lt;em&gt;think, learn, create, repeat!&lt;/em&gt;&lt;/p&gt;



</description>
      <category>node</category>
      <category>eventdriven</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>10 Super easy CSS Shapes for beginners</title>
      <author>MD JUNAID ALAM</author>
      <pubDate>Thu, 05 Aug 2021 08:23:32 +0000</pubDate>
      <link>https://dev.to/metajunaid/10-super-easy-css-shapes-for-beginners-19kf</link>
      <guid>https://dev.to/metajunaid/10-super-easy-css-shapes-for-beginners-19kf</guid>
      <description>&lt;p&gt;Hello there,&lt;/p&gt;

&lt;p&gt;In this post we will be talking about creating basic shapes in HTML &amp;amp; CSS. Many beginners face issues while working with CSS, so I have got 10 CSS shapes that we can create easily.&lt;/p&gt;

&lt;p&gt;So, without further delay. Let's Begin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-square"&gt;
  &lt;/a&gt;
  1. Square
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RtJvVu4M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmow6edzzitp0kosw5vd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RtJvVu4M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmow6edzzitp0kosw5vd.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="square"&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.square {
  height: 100px;
  width: 100px;
  background-color: #d1bb03;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-rectangle"&gt;
  &lt;/a&gt;
  2. Rectangle
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_usn1qxU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bepzoskthk9ocn0c677x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_usn1qxU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bepzoskthk9ocn0c677x.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="rectangle"&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.rectangle {
  height: 100px;
  width: 150px;
  background-color: #d11bbb;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-rounded-rectangle"&gt;
  &lt;/a&gt;
  3. Rounded Rectangle
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TRkwt5hI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dn4d3l1twxuccej9alul.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TRkwt5hI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dn4d3l1twxuccej9alul.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="rounded-rectangle"&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.rounded-rectangle {
  height: 100px;
  width: 150px;
  border-radius: 25px;
  background-color: #0fbd9c;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-circle"&gt;
  &lt;/a&gt;
  4. Circle
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OmULKDxb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6a3pwhm3ma5i4v4vny72.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OmULKDxb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6a3pwhm3ma5i4v4vny72.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="circle"&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.circle {
  height: 100px;
  width: 100px;
  border-radius: 50%;
  background-color: #00a913;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-oval"&gt;
  &lt;/a&gt;
  5. Oval
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YAYoncb0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vkre9j6xyuj739q9q94t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YAYoncb0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vkre9j6xyuj739q9q94t.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="oval"&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.oval {
  height: 100px;
  width: 150px;
  border-radius: 50%;
  background-color: #f95670;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#6-half-circle"&gt;
  &lt;/a&gt;
  6. Half Circle
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KgvMFqZK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/66d9rphpzb22a6qfdlqt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KgvMFqZK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/66d9rphpzb22a6qfdlqt.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="half-circle"&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.half-circle {
  height: 75px;
  width: 150px;
  background-color: #cdef00;
  border-radius: 50% /100% 100% 0 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#7-triangle"&gt;
  &lt;/a&gt;
  7. Triangle
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UR0yIpv1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/35botbjje3vdplm7yx5j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UR0yIpv1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/35botbjje3vdplm7yx5j.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="triangle"&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.triangle {
  height: 0;
  width: 0;
  border: 50px solid transparent;
  border-bottom: 100px solid #252aff;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#8-cone"&gt;
  &lt;/a&gt;
  8. Cone
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vNrqini8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y7jlqpisvwghiugitqp8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vNrqini8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y7jlqpisvwghiugitqp8.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="cone"&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.cone {
  height: 0;
  width: 0;
  border: 50px solid transparent;
  border-bottom: 100px solid #27aaff;
  border-radius: 50%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#9-heart"&gt;
  &lt;/a&gt;
  9. Heart
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9hx0HEtD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y55k1qwxj34vy4strh7g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9hx0HEtD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y55k1qwxj34vy4strh7g.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="heart"&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.heart {
  height: 60px;
  width: 60px;
  background-color: #c51a08;
  transform: rotate(45deg);
  position: relative;
}
.heart::before, .heart::after {
  content: '';
  background-color: inherit;
  height: inherit;
  width: inherit;
  display: block;
  position: absolute;
  border-radius: 50%;
}

.heart::before{
  bottom: 30px;
}
.heart::after {
  right: 30px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#10-callout"&gt;
  &lt;/a&gt;
  10. Callout
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jHPXXik0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ve9ir3k4ch9rojii6vvz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jHPXXik0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ve9ir3k4ch9rojii6vvz.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="callout"&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.callout {
  height: 80px;
  width: 150px;
  background-color: #660077;
  border-radius: 10px;
  position: relative;
}
.callout::after {
  content: '';
  border: 15px solid transparent;
  border-top: 30px solid #660077;
  position: absolute;
  bottom: -30px;
  right: 0px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Feel free to add your thoughts in comments.&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
