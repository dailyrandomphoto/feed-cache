<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Contribute to Codename One during Hacktoberfest</title>
      <author>Shai Almog</author>
      <pubDate>Sat, 02 Oct 2021 13:09:44 +0000</pubDate>
      <link>https://dev.to/codenameone/contribute-to-codename-one-during-hacktoberfest-2e4b</link>
      <guid>https://dev.to/codenameone/contribute-to-codename-one-during-hacktoberfest-2e4b</guid>
      <description>&lt;p&gt;&lt;strong&gt;It‚Äôs Hacktoberfest time! üéÉ Contribute to Codename One for Hacktoberfest to give back to open-source this October.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We‚Äôre excited that Codename One is participating in Hacktoberfest this year. Now in its eighth year, Hacktoberfest is a global online festival aiming to drive contribution and involvement in open source projects.&lt;/p&gt;

&lt;p&gt;We encourage contributions from the Hacktoberfest community. People of all backgrounds and skill levels are welcome!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-hacktoberfest"&gt;
  &lt;/a&gt;
  What is Hacktoberfest?
&lt;/h2&gt;

&lt;p&gt;Hacktoberfest is a month-long global celebration of open source software run by DigitalOcean with a strong focus on encouraging contributions to open source projects.&lt;/p&gt;

&lt;p&gt;From senior developers to students learning to code; open source enthusiasts of all skill levels can participate.&lt;/p&gt;

&lt;p&gt;The rules are simple: create a minimum of 4 quality Pull Requests on GitHub to any open source project repo during the whole month of October and have them accepted by a maintainer.&lt;/p&gt;

&lt;p&gt;By completing this challenge, you will earn your Hacktoberfest üëï swag or help plant a üå≤ tree. Just make sure to &lt;a href="https://hacktoberfest.digitalocean.com/register"&gt;register&lt;/a&gt; first!&lt;/p&gt;

&lt;p&gt;üëâ Learn more about Hacktoberfest &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-contribute-to-codename-one"&gt;
  &lt;/a&gt;
  Why Contribute to Codename One?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#history"&gt;
  &lt;/a&gt;
  History
&lt;/h3&gt;

&lt;p&gt;Codename One is a revolutionary mobile development solution started by ex-Sun Microsystems developers based on work that started within Sun. Codename One delivers the Write Once Run Anywhere (WORA) promise of Java for mobile devices by intelligently cross compiling to native code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#established-amp-mature"&gt;
  &lt;/a&gt;
  Established &amp;amp; Mature
&lt;/h3&gt;

&lt;p&gt;Codename One version 1.0 was released in 2012. It was the first solution to build native iPhone apps in Java and is still the most mature, performant and stable cross-platform mobile toolkit on the market.&lt;/p&gt;

&lt;p&gt;It is now being used by many well-known organizations including banks, government agencies and startups.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#free-amp-open-source"&gt;
  &lt;/a&gt;
  Free &amp;amp; Open Source
&lt;/h3&gt;

&lt;p&gt;The core of Codename One is free and open source. GPL + CE licensed so it is free to use with commercial projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#community"&gt;
  &lt;/a&gt;
  Community
&lt;/h3&gt;

&lt;p&gt;Codename One has a consolidated and active community of developers and enthusiasts. &lt;/p&gt;

&lt;p&gt;If you are a true believer in Java and the power of cross-platform, you can help make Codename One even better! üôå&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-contribute-to-codename-one"&gt;
  &lt;/a&gt;
  How to Contribute to Codename One?
&lt;/h2&gt;

&lt;p&gt;Before you start working on something, we would suggest talking to us in the cn1 &lt;a href="https://www.reddit.com/r/cn1/"&gt;subreddit&lt;/a&gt; or asking a question on &lt;a href="http://stackoverflow.com/tags/codenameone"&gt;stack overflow with the codenameone tag&lt;/a&gt;. You can also contact us via the chat widget on our website.&lt;/p&gt;

&lt;p&gt;To make it easier to start contributing to Codename One, we‚Äôve outlined some guidelines in our &lt;a href="https://github.com/codenameone/CodenameOne/blob/master/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt; file available at our GitHub repository.&lt;/p&gt;

&lt;p&gt;Steps to Contribute:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Visit &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;Hacktoberfest website&lt;/a&gt; and sign in with your GitHub account ‚úÖ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Choose your favorite &lt;a href="https://github.com/codenameone/CodenameOne/labels/Hacktoberfest"&gt;Codename One issue&lt;/a&gt; and submit your Pull Request üë®‚Äçüíª&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Wait for your PR to be reviewed and merged üíï&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; To make issues easier to discover, we have tagged them with relevant labels üè∑Ô∏è i.e. Hacktoberfest, good first issue etc.&lt;/p&gt;

&lt;p&gt;Best of luck and Happy Hacktoberfest! üéÉ&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>opensource</category>
      <category>java</category>
      <category>mobile</category>
    </item>
    <item>
      <title>Nodejs Best Practices(part 1- Introduction)</title>
      <author>ADJARO OGAGA</author>
      <pubDate>Sat, 02 Oct 2021 12:27:19 +0000</pubDate>
      <link>https://dev.to/ogagacodes/nodejs-best-practices-part-1-introduction-49fl</link>
      <guid>https://dev.to/ogagacodes/nodejs-best-practices-part-1-introduction-49fl</guid>
      <description>&lt;p&gt;I once heard a colleague ask, 'how do you survive with javascript(js), so many libraries. Nodejs, Reactjs, Angularjs, Vuejs, expressjs. Terrible, I pity you guys. Infact I know there is probably another js cooking', laughing hysterically. &lt;br&gt;
Hmmmmmmmmm. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TM26FlCC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/syqexxfcsjlu0xb5irzs.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TM26FlCC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/syqexxfcsjlu0xb5irzs.jpg" alt="A man sighing"&gt;&lt;/a&gt;&lt;br&gt;
Well, in this series we will embark on a gradual understanding of concepts in Nodejs that most junior Nodejs developers struggle with. What better place to start than how to structure your code!!&lt;br&gt;
But for starter, just what is nodejs?&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#what-is-nodejs"&gt;
  &lt;/a&gt;
  What is Nodejs?
&lt;/h1&gt;

&lt;p&gt;I forgave my colleague for saying nodejs is a Javascript library, because he is wrong and nodejs is not a Javascript library.&lt;br&gt;
Technical Jargon: &lt;strong&gt;Nodejs is runtime environment for javascript on the server. It uses the javascript v8 engine, hence it's a single threaded, event driven environment.&lt;/strong&gt; &lt;br&gt;
Well!! If you understand that , good for you. But let's talk to the lay men( no disrespect intended).&lt;br&gt;
During the early days of Js, Js can only power the web, meaning Javascript could only be run in the browser, strictly for websites interactivity, then came Nodejs passionately designed by My Very Respected colleague Ryan Dahl, making it possible to write code that servers understand. Take it that Nodejs is a microwave that made cooking with plates(Javascript) possible. You won't place your plate on a gas fire. But with the microwave plates can now be used to cook meals.&lt;br&gt;
How this happens: Nodejs is a bunch of many smaller instructions written in C, C++ and of course javascript. Instructions that make it possible so the servers(other computers connected to your computer) that have the v8 engine installed can in turn run your custom instructions. Confusing?? Ok its like a tanker that has to be fueled to deliver it's product, fuel. Javascript needs Javascript to run Javascript in a computer. Lol. How funny? Well, I promise as we proceed you'll get the point, if you haven't already.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#setting-up-a-nodejs-application"&gt;
  &lt;/a&gt;
  Setting Up A Nodejs Application
&lt;/h1&gt;

&lt;p&gt;Tools you Need&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Nodejs:
Download at &lt;a href="https://nodejs.org/en/download/"&gt;Get Nodejs&lt;/a&gt;
The instructions are quite clear, but if you have any 
difficulty, please drop in comment section below&lt;/li&gt;
&lt;li&gt;A Code Editor (I will use vscode throughout this tutorial)
Download at &lt;a href="https://code.visualstudio.com/download"&gt;Get VsCode&lt;/a&gt;.
I really hope most of those reading this already are familiar with these tools, hence we shall not deliberate on setting up these tools. But as I have stated, I am here to help.
OK.. Now let build our firsT server.
Steps&lt;/li&gt;
&lt;li&gt;Create a folder
2.Open vscode and open the folder&lt;/li&gt;
&lt;li&gt;Press (control and backtick) to open an integrated terminal in vscode). Make sure your'e in the folder, the run
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init -Y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;npm comes with nodejs, so you don't need to install it. Then if you have the challenge of command not recognized or some kindaa error, share please, but for windows my best guess is you have to update your path variable. Check this resource &lt;a href="https://www.computerhope.com/issues/ch000549.htm"&gt;Update Path Variable&lt;/a&gt; for that.&lt;/p&gt;

&lt;p&gt;Moving on....&lt;br&gt;
STEP 4 : For this tutorial, since we more concerned with best practices, we will be using a nodejs library and many other helper libraries to make things easy. I choose koa.js. Also note we will also make our api requests using graphql. Now let ride.....&lt;br&gt;
Make sure you're still in the folder you ran npm init from. Now run the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i koa koa-mount graphql -S
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For now these are all we need. Now lets write a basic sever.&lt;br&gt;
Create a file index.mjs, and copy the code below and paste&lt;/p&gt;

&lt;p&gt;index.mjs&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Koa from 'koa';
const app = new Koa();
// import {
  // response
app.use(ctx =&amp;gt; {
  ctx.body = 'Hello Koa';
});

  app.listen(8080, () =&amp;gt; {
      console.log("Server running.......")
  });


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point before running the application or even explaining each line, make sure you have done the following steps...&lt;br&gt;
1.Run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Added a start script in your package.json
"start":"node index.mjs"&lt;/li&gt;
&lt;li&gt;Made sure you're file is correctly named index.mjs not index.js.&lt;/li&gt;
&lt;li&gt;And make sure you have the below file structure
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zO2_FCp8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ap2w467bidz338gy4r40.png" alt="image"&gt;
Then run
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now pay attention to your console... You should see  "Server running..."&lt;br&gt;
Go to localhost:8080&lt;br&gt;
'Hello koa'&lt;br&gt;
Did you see that? If yes, weldone!!!&lt;br&gt;
You have built a nodejs server....&lt;br&gt;
Now is this just it? How boring! Relax and go over this again this is going get very interesting.. Part 2 loading.......&lt;/p&gt;

</description>
      <category>backend</category>
      <category>architecture</category>
      <category>node</category>
      <category>bestpractices</category>
    </item>
    <item>
      <title>Navigating an API from the terminal</title>
      <author>Jakub Roztocil</author>
      <pubDate>Sat, 02 Oct 2021 12:16:56 +0000</pubDate>
      <link>https://dev.to/pie/how-to-navigate-an-api-from-the-terminal-3bmg</link>
      <guid>https://dev.to/pie/how-to-navigate-an-api-from-the-terminal-3bmg</guid>
      <description>&lt;p&gt;Today, we'll be diving into &lt;a href="https://themoviedb.org"&gt;The Movie Database&lt;/a&gt; and learning how to navigate its API efficiently with &lt;a href="https://httpie.io"&gt;HTTPie&lt;/a&gt;, &lt;a href="https://stedolan.github.io/jq/"&gt;jq&lt;/a&gt;, and &lt;a href="https://github.com/simeji/jid"&gt;jid&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When it comes to movie and TV show data, the first thing that comes to mind is likely to be Amazon's IMDB service. IMDB lacks a public, supported REST API though. Historically people have used various URL scraping techniques and well-known paths to get data out of IMDB, but that is very fragile. The Movie Database, on the other hand, has a REST API for developers (with free access) and commercial licensing for money-making projects making it a useful resource.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dive-preparation"&gt;
  &lt;/a&gt;
  Dive preparation
&lt;/h2&gt;

&lt;p&gt;When you start from scratch working or playing with a new API, there are three important questions to answer up front:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-wheres-the-documentation"&gt;
  &lt;/a&gt;
  1. Where's the documentation?
&lt;/h3&gt;

&lt;p&gt;The first question's answer is easy enough ‚Äî &lt;code&gt;developers.themoviedb.org&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-whats-the-root-endpoint"&gt;
  &lt;/a&gt;
  2. What's the root endpoint?
&lt;/h3&gt;

&lt;p&gt;This should be answered by the documentation, but not always. The MovieDB docs don‚Äôt mention the root endpoint. Spoiler, the endpoint is &lt;code&gt;api.themoviedb.org&lt;/code&gt;. You'll only find that though after you have signed up as a user and requested an API key. It‚Äôs then that you are given an example URL with the API key:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://api.themoviedb.org/3/movie/550?api_key=7e23cee5bfb742e781fccc26b9e9009f
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-is-there-authentication-and-how-does-it-work"&gt;
  &lt;/a&gt;
  3. Is there authentication and how does it work?
&lt;/h3&gt;

&lt;p&gt;Yes, there is authentication in the form of an API key which is passed in the query parameter &lt;code&gt;api_key&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That's a fake API key we're showing so do remember to substitute it with your own API key if you are following along. You can obtain an API key by &lt;a href="https://www.themoviedb.org/signup"&gt;signing up for a TMDB account&lt;/a&gt; and &lt;a href="https://www.themoviedb.org/settings/api"&gt;requesting API access in the settings&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ready-to-httpie"&gt;
  &lt;/a&gt;
  Ready to HTTPie
&lt;/h2&gt;

&lt;p&gt;(If you haven‚Äôt already, now‚Äôs the time to &lt;a href="https://httpie.io/docs#installation"&gt;install HTTPie&lt;/a&gt; so that you can follow along.) Let's translate that URL to an HTTPie command first. We'll use the &lt;code&gt;https&lt;/code&gt; command to match the protocol from the URL. The first parameter, in the example and as defined in the API docs, is the endpoint and path like so. Let‚Äôs try just that, with no authentication:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;https api.themoviedb.org/3/movie/550
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run that, you'll get:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight http"&gt;&lt;code&gt;&lt;span class="k"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt; &lt;span class="m"&gt;401&lt;/span&gt; &lt;span class="ne"&gt;Unauthorized&lt;/span&gt;
&lt;span class="na"&gt;Content-Type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;application/json&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"status_code"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"status_message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Invalid API key: You must be granted a valid key."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"success"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The HTTP status reflects an unauthorised access but there‚Äôs also a dump of response headers and the JSON error response. All because we didn't include the &lt;code&gt;api_key&lt;/code&gt; value to authorise the request. That was deliberate, because it's a good idea to see what the error responses look like early on. With this API we get both an HTTP status code for a type of error, an explicit error message and &lt;code&gt;‚Äùsuccess‚Äù: false&lt;/code&gt; in the JSON body. The API‚Äôs own error codes are listed in the &lt;a href="https://www.themoviedb.org/documentation/api/status-codes"&gt;documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can add in our required authentication. With HTTPie, you can list headers and form values after the URL as name value pairs. What happens to them depends on the characters that separate them.&lt;/p&gt;

&lt;p&gt;If they are separated with a &lt;code&gt;:&lt;/code&gt; then they go into the HTTP request headers.&lt;/p&gt;

&lt;p&gt;If they are separated with an &lt;code&gt;=&lt;/code&gt; then they both go into a JSON body (and the request becomes a JSON body POST).&lt;/p&gt;

&lt;p&gt;And, this is the one we are interested in, if they are separated with an &lt;code&gt;==&lt;/code&gt; they get added to the query string parameters. This is what we want to do with the api_key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;https api.themoviedb.org/3/movie/550 &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nv"&gt;api_key&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;7e23cee5bfb742e781fccc26b9e9009f
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight http"&gt;&lt;code&gt;&lt;span class="k"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt; &lt;span class="ne"&gt;OK&lt;/span&gt;
&lt;span class="na"&gt;Content-Type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;application/json&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"adult"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"backdrop_path"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/rr7E0NoGKxvbkb89eR1GwfoYjpA.jpg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"belongs_to_collection"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"budget"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;63000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"genres"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Drama"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"homepage"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"http://www.foxmovies.com/movies/fight-club"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;550&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"imdb_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"tt0137523"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"original_language"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"en"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"original_title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Fight Club"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"overview"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"A ticking-time-bomb insomniac and a slippery soap salesman channel primal male aggression into a shocking new form of therapy."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"popularity"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;39.996&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"poster_path"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/pB8BM7pdSp6B6Ih7QZ4DrQ3PmJK.jpg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"production_companies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;711&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"logo_path"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/tEiIH5QesdheJmDAqQwvtN60727.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Fox 2000 Pictures"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"origin_country"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"US"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"production_countries"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"iso_3166_1"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"US"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"United States of America"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"release_date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1999-10-15"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"revenue"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100853753&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"runtime"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;139&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"spoken_languages"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"english_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"English"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"iso_639_1"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"en"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"English"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"status"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Released"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"tagline"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Mischief. Mayhem. Soap."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Fight Club"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"video"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"vote_average"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;8.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"vote_count"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;21654&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before we move on, a quick pro-tip: never forget that your command line shell can save you typing. Export the &lt;code&gt;api_key&lt;/code&gt; section as an environment variable like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;API_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"api_key==7e23cee5bfb742e781fccc26b9e9009f"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then you can just do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;https api.themoviedb.org/3/movie/550 &lt;span class="nv"&gt;$API_KEY&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#working-with-responses"&gt;
  &lt;/a&gt;
  Working with responses
&lt;/h2&gt;

&lt;p&gt;There's a lot of JSON in the response we just got and, thanks to HTTPie, it is both formatted and syntax-coloured for easier reading. That formatted and coloured view is the default when HTTPie is outputting to a console. If you want to page through the results, you would usually pipe the output through the &lt;code&gt;more&lt;/code&gt; or &lt;code&gt;less&lt;/code&gt; commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;https api.themoviedb.org/3/movie/550 &lt;span class="nv"&gt;$API_KEY&lt;/span&gt; | less
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But if you do that, you'll see unformatted, colour-less output. That is because the HTTPie default for output to a pipe or anything that isn't a console is to leave the content untouched for other commands to consume.&lt;/p&gt;

&lt;p&gt;If you want to force formatted output, add &lt;code&gt;--pretty=format&lt;/code&gt; to the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;https &lt;span class="nt"&gt;--pretty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;format api.themoviedb.org/3/movie/550 &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nv"&gt;$API_KEY&lt;/span&gt; | less
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can read the formatted results at your own pace. If you want the colour back too, use &lt;code&gt;--pretty=all&lt;/code&gt; and the &lt;code&gt;-R&lt;/code&gt; flag of the &lt;code&gt;less&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;https &lt;span class="nt"&gt;--pretty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;all api.themoviedb.org/3/movie/550 &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nv"&gt;$API_KEY&lt;/span&gt; | less &lt;span class="nt"&gt;-R&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll now get formatted and colourised output you can page through.&lt;/p&gt;

&lt;p&gt;There is one other difference between the defaults for output to the console and redirected output. Headers are output to the console, but skipped when outputting to another program through a pipe. If you want only headers output to a pipe, use the &lt;code&gt;-h&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;You can learn more about HTTPie's default options for terminal and redirected output in the &lt;a href="https://httpie.io/docs#terminal-output"&gt;Terminal Output&lt;/a&gt; section of the documentation. If you want to take direct control of what is output, check out the &lt;a href="https://httpie.io/docs#output-options"&gt;Output Options&lt;/a&gt;. They control which parts of the request/response exchange are output.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#digging-into-responses"&gt;
  &lt;/a&gt;
  Digging into responses
&lt;/h2&gt;

&lt;p&gt;If you're trying to work out the structure and content of an API's JSON responses, you can keep paging through the documentation and the paged output of &lt;code&gt;less&lt;/code&gt; or you can reach for more precise JSON parsing tools such as, &lt;a href="https://stedolan.github.io/jq/"&gt;jq&lt;/a&gt; and &lt;a href="https://github.com/simeji/jid"&gt;jid&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;jq&lt;/code&gt;, a command line JSON processor, you can write expressions to extract and format data from JSON streams. &lt;code&gt;jid&lt;/code&gt; is an interactive JSON digger which lets you use some of jq's expressions and auto-completion to explore JSON files. For example, if we run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;https api.themoviedb.org/3/movie/550 &lt;span class="nv"&gt;$API_KEY&lt;/span&gt; | jid
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Up comes a view of the JSON, formatted and colourised. Control-N and Control-P will let you page up and down through the returned data, but that's just the start.&lt;/p&gt;

&lt;p&gt;Say, for example, we are looking for which country the production occurred in. Start typing a name for a field like &lt;code&gt;pro&lt;/code&gt;, and you'll see &lt;code&gt;jid&lt;/code&gt; offers up &lt;code&gt;production_co&lt;/code&gt; as a potential autocomplete. Tap &lt;strong&gt;Tab&lt;/strong&gt; and you'll be able to alternate between &lt;code&gt;production_companies&lt;/code&gt; and &lt;code&gt;production_countries&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Hit return and &lt;code&gt;jid&lt;/code&gt; displays the contents of the production_companies array. Tap &lt;strong&gt;Tab&lt;/strong&gt; again and you'll be able to enter an array index &lt;code&gt;1&lt;/code&gt; and &lt;strong&gt;Tab&lt;/strong&gt; again to display just one entry from the array. Type &lt;code&gt;.&lt;/code&gt; and you can auto-complete through that entry‚Äôs field names. &lt;code&gt;jid&lt;/code&gt; is great for locating data in nested structures and the queries you use work in the command line with &lt;code&gt;jq&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now with these two tools to hand, you're ready to explore more of the MovieDB API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finding-more-about-a-movie"&gt;
  &lt;/a&gt;
  Finding more about a movie
&lt;/h2&gt;

&lt;p&gt;While there are endpoints for every movie under the /movie/ path ‚Äî they are located with an id ‚Äî there are also subsections to each movie entry for release dates, keywords, ratings, credits, all with a path that comes after the id. So if you want to get the credits for a movie, you'd call:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;https api.themoviedb.org/3/movie/550/credits &lt;span class="nv"&gt;$API_KEY&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This does seem to be a query for, potentially, just a small snippet of data. That's where &lt;code&gt;append_to_response&lt;/code&gt; in the &lt;a href="https://developers.themoviedb.org/3/getting-started/append-to-response"&gt;MovieDB API&lt;/a&gt; comes in. This lets you add, for particular endpoints like /movie, the various subsections. So, if we want a movie‚Äôs credits and images embedded into our response, we do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;https api.themoviedb.org/3/movie/550 &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nv"&gt;$API_KEY&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nv"&gt;append_to_response&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;credits,images
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It only costs us one request and merges all the data together into one JSON object.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finding-a-movie"&gt;
  &lt;/a&gt;
  Finding a movie
&lt;/h2&gt;

&lt;p&gt;What about finding a movie? For that, there's a search endpoint, &lt;code&gt;/search/movies&lt;/code&gt;. It takes a &lt;code&gt;query&lt;/code&gt; parameter which "must be URI-encoded". If your query value has a space in it, you can use quotes around the value and HTTPie will take care of URL-encoding the value for you. No hand-encoding spaces to &lt;code&gt;&amp;amp;20&lt;/code&gt; or similar. All we need to do is remember to put quotes around our value like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;https api.themoviedb.org/3/search/movie &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nv"&gt;$API_KEY&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nv"&gt;query&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;"O.C. and Stiggs"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That'll return JSON data designed for paginated search results. If we wanted to look up more about the movie, we'd want the id from the first result. For that we can pipe the results to &lt;code&gt;jq ".results[0].id"&lt;/code&gt; and we'll get the movie id. From there, it's a call to the &lt;code&gt;/movie/{id}&lt;/code&gt; to get the movie details:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ MOVIE_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;
    https api.themoviedb.org/3/search/movie &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="nv"&gt;$API_KEY&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="nv"&gt;query&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s1"&gt;'O.C. and Stiggs'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        | jq .results[0].id
&lt;span class="si"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;https api.themoviedb.org/3/movie/&lt;span class="nv"&gt;$MOVIE_ID&lt;/span&gt; &lt;span class="nv"&gt;$API_KEY&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or, if you want to pack it all into one line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;https &lt;span class="si"&gt;$(&lt;/span&gt;
    https api.themoviedb.org/3/search/movie &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="nv"&gt;$API_KEY&lt;/span&gt; &lt;span class="nv"&gt;query&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s1"&gt;'O.C. and Stiggs'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        | jq &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="s1"&gt;'.results[0] | "api.themoviedb.org/3/movie/\(.id)"'&lt;/span&gt;
&lt;span class="si"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;$API_KEY&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#discovering-movies"&gt;
  &lt;/a&gt;
  Discovering movies
&lt;/h2&gt;

&lt;p&gt;One of the richest API endpoints in The Movie DB API is /discover/movie. It lets you specify over thirty different properties for searching across films.&lt;/p&gt;

&lt;p&gt;So say you want the most popular science fiction movies on The Movie Database. Genres are represented in the API with an integer id so we need to look up what the id for ‚ÄúScience Fiction‚Äù is. The full genre list is available on another endpoint, &lt;code&gt;/genres/movie/list&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;https api.themoviedb.org/3/genre/movie/list &lt;span class="nv"&gt;$API_KEY&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight http"&gt;&lt;code&gt;&lt;span class="k"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt; &lt;span class="ne"&gt;OK&lt;/span&gt;
&lt;span class="na"&gt;Content-Type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;application/json&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"genres"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Action"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Adventure"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Animation"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;‚Ä¶&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can manually work your way through the list or use &lt;code&gt;jq&lt;/code&gt; to find the entry we are interested in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;https api.themoviedb.org/3/genre/movie/list &lt;span class="nv"&gt;$API_KEY&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    | jq &lt;span class="s1"&gt;'.genres[] | select(.name=="Science Fiction")'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;878&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Science Fiction"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So that tells us the genre id we are looking for is 878. Back at the /discover/movie endpoint, there‚Äôs a property called &lt;code&gt;with_genre&lt;/code&gt; which we‚Äôll set to 878. Another property available on the endpoint is &lt;code&gt;sort_by&lt;/code&gt; which takes a field name and a sort order. We‚Äôll set that to &lt;code&gt;popularity.desc&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;https api.themoviedb.org/3/discover/movie &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nv"&gt;with_genre&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;878 &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nv"&gt;sort_by&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;popularity.desc &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nv"&gt;$API_KEY&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight http"&gt;&lt;code&gt;&lt;span class="k"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt; &lt;span class="ne"&gt;OK&lt;/span&gt;
&lt;span class="na"&gt;Content-Type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;application/json&lt;/span&gt;

&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"page"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"results"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"adult"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"backdrop_path"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/9yBVqNruk6Ykrwc32qrK2TIE5xw.jpg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"genre_ids"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="mi"&gt;878&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;460465&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"original_language"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"en"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"original_title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Mortal Kombat"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"overview"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Washed-up MMA fighter Cole Young, unaware of his heritage, and hunted by Emperor Shang Tsung's best warrior, Sub-Zero, seeks out and trains with Earth's greatest champions as he prepares to stand against the enemies of Outworld in a high stakes battle for the universe."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"popularity"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;5817.001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"poster_path"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/xGuOF1T3WmPsAcQEQJfnG7Ud9f8.jpg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"release_date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2021-04-07"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Mortal Kombat"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"video"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"vote_average"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;7.7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"vote_count"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2266&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;‚Ä¶&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"total_pages"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"total_results"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The results are paginated and this is page 1 with 20 results a page. If we want to compress this down to a simple list, we can use &lt;code&gt;jq&lt;/code&gt; again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;https api.themoviedb.org/3/discover/movie &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nv"&gt;with_genre&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;878 &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nv"&gt;sort_by&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;popularity.desc &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nv"&gt;$API_KEY&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    | jq &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="s1"&gt;'.results[] | "\(.title) \(.popularity)"'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mortal Kombat 5817.001
Godzilla vs. Kong 3608.866
Tom Clancy's Without Remorse 4266.181
Nobody 2993.014
Vanquish 3156.355
Zack Snyder's Justice League 1992.158
‚Ä¶
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That snippet of jq just extracts and formats the title and popularity from the results array for each item. The &lt;code&gt;-r&lt;/code&gt; option just stops jq wrapping all its output in quotes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;Creating queries on The MovieDB API is quick thanks to HTTPie and with jq and jid, you can make sense of the results with the least amount of fuss.&lt;/p&gt;

&lt;p&gt;In the next part of this dive, we‚Äôll look at how TMDB‚Äôs API now handles user-generated lists and how HTTPie makes it simpler to explore.&lt;/p&gt;




&lt;p&gt;Written by &lt;a href="https://twitter.com/codepope"&gt;Dj Walker-Morgan&lt;/a&gt; and originally published on &lt;a href="https://httpie.io/blog/cli-api-diving"&gt;HTTPie blog&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>api</category>
      <category>cli</category>
      <category>httpie</category>
      <category>devtools</category>
    </item>
    <item>
      <title>Embed VSCode single file editor in your website.</title>
      <author>Kavindu Santhusa</author>
      <pubDate>Sat, 02 Oct 2021 11:45:07 +0000</pubDate>
      <link>https://dev.to/ksengine/embed-vscode-single-file-editor-in-your-website-176j</link>
      <guid>https://dev.to/ksengine/embed-vscode-single-file-editor-in-your-website-176j</guid>
      <description>&lt;p&gt;Today we're going to embed an code editor in website.&lt;br&gt;
I had chosen the most popular IDE Visual Studio Code.&lt;br&gt;
The Monaco Editor is the code editor that powers VS Code.&lt;br&gt;
So we can use it to build a single file code editor&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Rich IntelliSense, Validation
&lt;p&gt;&lt;code&gt;TypeScript, JavaScript, CSS, LESS, SCSS, JSON, HTML&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Basic Syntax Colorization
&lt;p&gt;&lt;code&gt;XML, PHP, C#, C++, Razor, Markdown, Diff, Java, VB, CoffeeScript, Handlebars, Batch, Pug, F#, Lua, Powershell, Python, Ruby, SASS, R, Objective-C&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mn30-gMR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5engj79t8or6xnw40y0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mn30-gMR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5engj79t8or6xnw40y0.jpg" alt="coding on laptop"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;This is an quick example for embed vscode.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ksenginew/embed/dyRLmrQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-explained"&gt;
  &lt;/a&gt;
  Example explained
&lt;/h2&gt;

&lt;p&gt;First create a container for editor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"width:100%;height:80vh;border:1px solid grey"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;width:100%;&lt;/code&gt; - takes full width&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;height:80vh;&lt;/code&gt; - takes 80% of the viewport height.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;border:1px solid grey&lt;/code&gt; - just a border.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then add loader for editor.&lt;br&gt;
Here I am using jsDelivr as my CDN.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/monaco-editor@0.27.0/min/vs/loader.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the working code part. add this code inside an script tag below above code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;vs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://cdn.jsdelivr.net/npm/monaco-editor@0.27.0/min/vs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vs/editor/editor.main&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;editor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;monaco&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;typescript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;automaticLayout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;require&lt;/code&gt; - AMD module loader(loads editor)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;require.config()&lt;/code&gt; - configure to use jsDelivr.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;value: code&lt;/code&gt; - code can be any code as string.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;language: "typescript"&lt;/code&gt; - set programming language of code for language features.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;automaticLayout: true&lt;/code&gt; - Makes it responsive.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then enjoy it.&lt;br&gt;
I hope to write more articles with advanced use cases of embedded editor. &lt;br&gt;
Follow üèÉ‚Äç‚ôÇÔ∏è me for more articles.&lt;br&gt;
Asküôè any question on comments section.&lt;br&gt;
Star‚≠ê me if you love this article.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;cover image by &lt;a href="https://unsplash.com/photos/oXlXu2qukGE?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditShareLink"&gt;Unsplash&lt;/a&gt;&lt;/sup&gt;&lt;br&gt;
&lt;sup&gt;image(laptop) by &lt;a href="https://unsplash.com/photos/m_HRfLhgABo?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditShareLink"&gt;Unsplash&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Happy Coding üë©‚Äçüíªüë©‚Äçüíªüë©‚Äçüíª...&lt;br&gt;
Thanks. ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>vscode</category>
    </item>
    <item>
      <title>The entropy of states</title>
      <author>Daniele Falchetti</author>
      <pubDate>Sat, 02 Oct 2021 11:21:10 +0000</pubDate>
      <link>https://dev.to/falcosan/the-entropy-of-states-5gbi</link>
      <guid>https://dev.to/falcosan/the-entropy-of-states-5gbi</guid>
      <description>&lt;h6&gt;
  &lt;a href="#to-read-the-article-in-other-languages-go-to-my-website-httpsaprogramacoblogtheentropyofstates"&gt;
  &lt;/a&gt;
  To read the article in other languages, go to my website: &lt;a href="https://aprograma.co/blog/the-entropy-of-states/"&gt;https://aprograma.co/blog/the-entropy-of-states/&lt;/a&gt;
&lt;/h6&gt;




&lt;h3&gt;
  &lt;a href="#can-the-entropy-change-the-perspective-of-our-project-or-even-ruin-it"&gt;
  &lt;/a&gt;
  Can the entropy change the perspective of our project or even ruin it?
&lt;/h3&gt;




&lt;p&gt;Those who program know what it means to manipulate data, explaining it briefly means to manipulate a certain value through mathematical processes (such as a function for example) to define a second value. If this process is replicated many times, inserted as a set and structured in the best way, then a program will be created. Generally, this is the standard way to program, but sometimes something is missing: the consciousness of entropy.&lt;/p&gt;

&lt;p&gt;Here is an example in temporal sequence:&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background:
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Dev is a good developer.&lt;/li&gt;
&lt;/ul&gt;



&lt;h5&gt;
  &lt;a href="#process"&gt;
  &lt;/a&gt;
  Process:
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Dev does some brainstorming thinking about the final vision of his project defining all his goals.&lt;/li&gt;
&lt;li&gt;Dev starts programming and becomes aware of what he will need to do in practice to make it all work.&lt;/li&gt;
&lt;li&gt;Dev finishes programming and releases his first version of his application.&lt;/li&gt;
&lt;li&gt;Dev is happy.&lt;/li&gt;
&lt;li&gt;Having done everything right, many people start using Dev's application.&lt;/li&gt;
&lt;li&gt;Dev's work is not finished, he needs to keep on improving by taking advantage of users' feedback and enthusiasm for the success of the project.&lt;/li&gt;
&lt;li&gt;Dev has succeeded, his application becomes super popular and attracts people from other platforms similar to the one created by him (he wins over the competition).&lt;/li&gt;
&lt;li&gt;Dev is an open source lover, his code is public and some contributors start submitting codes to fix or add features (useful, but difficult to manage beyond a certain volume).&lt;/li&gt;
&lt;li&gt;Dev can't control people and their ‚Äúsometimes‚Äù conflicting ideas.&lt;/li&gt;
&lt;li&gt;The social pressure is unsustainable and Dev, influenced by all this, is forced to revise the final vision of his project and replace it with a democratic vision.&lt;/li&gt;
&lt;/ol&gt;



&lt;p&gt;It‚Äôs not necessary to have an opinion about whether to change your plans is right or wrong, I think it's relative. The question is another, with this example, what I would like to share is how important it is to know and control the entropy. As a great developer, Dev has managed to do what we all desire, to achieve our goals. As I described, from a specific point in the process, entropy starts to be relevant, a variable that Dev had not considered. But what is entropy in this area? In the simplest possible way, entropy can be explained as a measure of chaos that remains unchanged or increases over time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JS4Qr5nj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://a.storyblok.com/f/106240/1191x731/add4813309/explication-entropy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JS4Qr5nj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://a.storyblok.com/f/106240/1191x731/add4813309/explication-entropy.png" alt="Img"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By checking this sketch I ask myself a question: is there a better way to capture the variables Z, S, and X and consequently manage them?&lt;/p&gt;

&lt;p&gt;To arrive to a possible answer, I first thought about answering myself through a smaller context, with fewer variables than those present in Dev's situation. As a great user of the Vue.js framework, I stopped to reflect on the store of this framework, Vuex.&lt;/p&gt;

&lt;p&gt;For those who don't know what I'm talking about, Vuex, Vue's store, is a set of globally defined variables, through which these variables can be changed or simply read.&lt;/p&gt;

&lt;p&gt;It is very easy to manipulate the data with Vuex but it is also risky because such data is accessible from any component/page/plugin... You must have the foresight to manage the various manipulations of the data correctly while maintaining zero entropy. In this case, to manage entropy it is necessary to define in each component a copy of the global data with an internal variable, so all the operations carried out on the new variable will remain in the context in which the latter was defined. This strategy is not always valid, if the modification of global data occurred in the Header component must be listened to by the Footer component, then we do nothing with the internal variable.&lt;/p&gt;



&lt;p&gt;OK .. extrapolating from the Vuex example I more or less achieve to understand that the best way to manage entropy is the abstraction.&lt;/p&gt;

&lt;p&gt;Now how do I apply the concept of abstraction to Dev's situation?&lt;/p&gt;

&lt;p&gt;Trying to get there with associations: if our Dev is the Vuex store, the contributors are the components/pages/plugins, and the feedback and ideas of the users of the Dev's application are the operations done on the global data, defining the "internal variable" would mean representing this process: creating various beta versions of Dev's application where each of them adopts one of the contributors' ideas.  These parallel versions, formed from dissatisfaction with the original vision of Dev's product, are consequently tested by some beta testers. These beta testers are composed of groups of people selected on the basis of a shared idea of what they think the philosophy of Dev's application should be. In the end, the version that is most popular with the public is chosen as Dev's application release 2.0.&lt;/p&gt;

&lt;p&gt;This representation, while utopian and ignorant of the limits of reality, is my response to the application of abstraction for entropy control.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>entropy</category>
      <category>database</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Chatwoot: The Better Way to Talk To Your Customers</title>
      <author>Adeyemi Adeshina </author>
      <pubDate>Sat, 02 Oct 2021 11:12:16 +0000</pubDate>
      <link>https://dev.to/iamadeyemiadex/chatwoot-the-better-way-to-talk-to-your-customers-8gd</link>
      <guid>https://dev.to/iamadeyemiadex/chatwoot-the-better-way-to-talk-to-your-customers-8gd</guid>
      <description>&lt;p&gt;All  paying and potential customers always want a swift and better way to communicate or engage with any company or business. Imagine a customer having some issues or concerns about doing your business with you and he wants to have some of his issues answered faster. &lt;/p&gt;

&lt;p&gt;A very poor and slower conversation may lead to loosing that customer and some other ones coming in. That's why customer engagement is one of the pillars of modern businesses to success.&lt;br&gt;
It's not enough to have a great product, every business must find a better way to talk to customers, and build bonds.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-beauty-of-chatwoot"&gt;
  &lt;/a&gt;
  The Beauty of Chatwoot
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;By making it easier for customers to engage in ways they find valuable, you‚Äôll strengthen their emotional investment in your brand. They will trust you more, and when they do, your business grows.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yes, I know you have seen more than enough customer engagement platforms. I have seen them too, and I have used quite a number of them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Chatwoot&lt;/strong&gt; is an open source customer engagement platform created to improve and properly structure conversations around B2B and P2B.&lt;/p&gt;

&lt;p&gt;Imagine your business having several social media engagement platforms such as Facebook, Instagram, Twitter, Whatsapp, Telegram etc. and all your customers send you messages via all these platforms. You will agree with me that managing conversations around all the platforms look so tedious, cumbersome and boring.  &lt;/p&gt;

&lt;p&gt;Rather than having to manage conversations everywhere, &lt;strong&gt;Chatwoot&lt;/strong&gt;, with its beautiful and easy to use dashborad, allows you to integrate all your social media platforms including your website seamlessly within few seconds. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Chatwoot&lt;/strong&gt; includes a live chat tool;  and out-of-the-box integrations with third-party platforms such as Slack, Shopify, Stripe and chatboot tools such as Rasa and DialogFlow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How To Begin&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;1.&lt;/strong&gt; Go to the Registration page and enter your details&lt;br&gt;
&lt;a href="https://app.chatwoot.com/app/auth/signup"&gt;Register Here&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hjVXdUan--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1uvwy7ehqy5b300z6nid.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hjVXdUan--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1uvwy7ehqy5b300z6nid.png" alt="Register_image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; After successful registration, you'll be redirected to your dashboard where you can integrate social media platforms and chat seamlessly. Remember to confirm your account in your registered email.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fxVAwmw9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/342umpcnzx4ufv5pu8nk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fxVAwmw9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/342umpcnzx4ufv5pu8nk.png" alt="chat_integration"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.chatwoot.com/"&gt;Learn more about Chatwoot&lt;/a&gt;&lt;/p&gt;

</description>
      <category>chatwoot</category>
      <category>customers</category>
      <category>chatbot</category>
    </item>
    <item>
      <title>How to install vscode in ubuntu using apt-get?</title>
      <author>abbazs</author>
      <pubDate>Sat, 02 Oct 2021 10:39:15 +0000</pubDate>
      <link>https://dev.to/abbazs/how-to-install-vscode-in-ubuntu-using-apt-get-2m8o</link>
      <guid>https://dev.to/abbazs/how-to-install-vscode-in-ubuntu-using-apt-get-2m8o</guid>
      <description>&lt;p&gt;To install vscode using apt-get:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# login to a shell as super user
sudo su
# Get the gpg key from microsoft
wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &amp;gt; packages.microsoft.gpg
install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/
rm packages.microsoft.gpg
# Create a file called vscode.list in /etc/apt/sources.list.d and add reference url
sh -c 'echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" &amp;gt; /etc/apt/sources.list.d/vscode.list'
# Install dependency packages
apt update &amp;amp;&amp;amp; apt install apt-transport-https code
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>apt</category>
      <category>vscode</category>
      <category>ubuntu</category>
    </item>
    <item>
      <title>Calling REST APIs from Dart and Flutter</title>
      <author>Jan Mewes</author>
      <pubDate>Sat, 02 Oct 2021 10:27:29 +0000</pubDate>
      <link>https://dev.to/janux_de/calling-rest-apis-from-dart-and-flutter-3f2i</link>
      <guid>https://dev.to/janux_de/calling-rest-apis-from-dart-and-flutter-3f2i</guid>
      <description>&lt;p&gt;When using API-based services, they often bring an SDK for some of the most popular languages, to facilitate the creation of apps using their API (e.g. &lt;a href="https://supabase.io/docs/reference/javascript/supabase-client"&gt;Supabase&lt;/a&gt; or &lt;a href="https://developers.google.com/google-ads/api/docs/client-libs"&gt;Google Ads&lt;/a&gt;). This blog post describes a concept for building your own SDK for consumption of any REST API, using the Dart programming language for use in an app using the Flutter framework.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Table of contents&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#terminology"&gt;Terminology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#context"&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#usage"&gt;Usage&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#package-dependency-declaration"&gt;Package dependency declaration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#instantiate-api-entry-point"&gt;Instantiate API entry point&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#collection-resources"&gt;Collection resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#singleton-resources"&gt;Singleton resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#error-handling"&gt;Error handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#usage-in-flutter-project"&gt;Usage in Flutter project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#testing"&gt;Testing&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#service-tests"&gt;Service tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#widget-tests"&gt;Widget tests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#implementation-details"&gt;Implementation details&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#overview"&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#payload-representations"&gt;Payload representations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tests"&gt;Tests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#terminology"&gt;
  &lt;/a&gt;
  Terminology
&lt;/h2&gt;

&lt;p&gt;The following table gives an overview of the abbreviations and technical terms used in the blog post.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Term&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;API&lt;/td&gt;
&lt;td&gt;Application Programming Interface; an interface of a software system that allows other software systems to use it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SDK&lt;/td&gt;
&lt;td&gt;Software Development Kit; a library that provides access to a third-party service for the respective programming language.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;REST API&lt;/td&gt;
&lt;td&gt;Short form for RESTful API which denotes a software architecture style based "representational state transfer".&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;KSCH&lt;/td&gt;
&lt;td&gt;Kirpal Sagar Charitable Hospital; the target domain of the app to be built.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Workflow&lt;/td&gt;
&lt;td&gt;A semi-automated business process.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#context"&gt;
  &lt;/a&gt;
  Context
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://github.com/ksch-workflows/backend/"&gt;backend&lt;/a&gt; service of the KSCH Workflows system provides &lt;a href="https://ksch-workflows.github.io/backend"&gt;a REST API&lt;/a&gt; for all the queries and commands which are needed for the apps in the KSCH workflows. The &lt;a href="https://github.com/ksch-workflows/ksch-dart-client"&gt;KSCH Dart Client&lt;/a&gt; facilitates it for all apps which use the Dart programming language to use that API by wrapping the low-level REST API with a high-level Dart API. The apps - e.g. the &lt;em&gt;&lt;a href="https://github.com/ksch-workflows/registration-desk/"&gt;Registration desk&lt;/a&gt;&lt;/em&gt;, &lt;em&gt;Pharmacy desk&lt;/em&gt;, and &lt;em&gt;Administration app&lt;/em&gt; - can then use the &lt;em&gt;KSCH Dart Client&lt;/em&gt; like any other Dart package.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6w7xeCNE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/spnon9800g0n900l2lom.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6w7xeCNE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/spnon9800g0n900l2lom.png" alt="Context diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the text below, the &lt;em&gt;KSCH Dart Client&lt;/em&gt; will also be referred to as "the SDK".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;Before the discussion of the internal structure of the &lt;em&gt;KSCH Dart Client&lt;/em&gt;, it will be shown how to use it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#package-dependency-declaration"&gt;
  &lt;/a&gt;
  Package dependency declaration
&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;KSCH Dart Client&lt;/em&gt; is a project-specific library that is of no use for the general Dart community. That's why the package is not published to the Dart package repository but is leveraging Dart's capability to declare dependencies directly on GitHub repositories.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;dependencies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;ksch_dart_client&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;git&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://github.com/ksch-workflows/ksch_dart_client&lt;/span&gt;
      &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;a85c7f0cb83087d13e207b1331bcf6f64676e995&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the system is in production use, &lt;a href="https://semver.org/"&gt;semantic versioning&lt;/a&gt; tags should be used instead of specific commit IDs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#instantiate-api-entry-point"&gt;
  &lt;/a&gt;
  Instantiate API entry point
&lt;/h3&gt;

&lt;p&gt;The next step in using the SDK is to create an instance of the &lt;code&gt;KschApi&lt;/code&gt; class. This class has a parameter for the base URL of the backend service so that it can be configured to be executed against the testing or production system.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;KschApi&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;KschApi&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'http://localhost:8080'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#collection-resources"&gt;
  &lt;/a&gt;
  Collection resources
&lt;/h3&gt;

&lt;p&gt;The first request to be done with the API is listing all patients with a GET request on the &lt;code&gt;/patients&lt;/code&gt; collection resource.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http GET /patients
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The basic idea of the SDK is that it provides a property in the &lt;code&gt;api&lt;/code&gt; object for every supported resource. So, in the case of this example, there is a &lt;code&gt;patients&lt;/code&gt; property. On its value is a method available for each operation that can be done on that resource. By calling this method, the HTTP call is triggered and delivers its response wrapped in a &lt;code&gt;Future&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;patients&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;list&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since collection resources are usually paged, the &lt;code&gt;list&lt;/code&gt; method can take the index of the page to be requested as an optional parameter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;late&lt;/span&gt; &lt;span class="n"&gt;PatientsResponsePayload&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;patients&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;list&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;page:&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;++);&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;patient&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;patients&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasNextPage&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#singleton-resources"&gt;
  &lt;/a&gt;
  Singleton resources
&lt;/h3&gt;

&lt;p&gt;For working with individual patients, the singleton resource can be used.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http GET /patients/${PATIENT_ID}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the help of Dart's &lt;a href="https://www.educative.io/edpresso/what-is-dart-call"&gt;&lt;code&gt;call&lt;/code&gt; method convention&lt;/a&gt; it is possible to invoke an object as a function. With this tool, a parameter can be passed to a collection resource for fluent access on a singleton resource below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;patients&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patientId&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;residentialAddress&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each resource may also have sub-resources. All resource path elements act as a builder and the HTTP call is triggered only in the final method call.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;patients&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patientId&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;visits&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;startVisit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;VisitType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;OPD&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#error-handling"&gt;
  &lt;/a&gt;
  Error handling
&lt;/h3&gt;

&lt;p&gt;When there is an error response from the API, i.e. a status code &amp;gt;= 400, then an exception will be raised.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usage-in-flutter-project"&gt;
  &lt;/a&gt;
  Usage in Flutter project
&lt;/h3&gt;

&lt;p&gt;To avoid any HTTP-related ideas and too much business logic within the frontend widgets, the SDK is wrapped in a service layer. For every service, there is an interface which is widgets uses. During application start the &lt;code&gt;main.dart&lt;/code&gt; file decides which service implementation should be used. Only that service implementation knows about the SDK and how to use it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RTG2m9gH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gzhnz5pt0xqptnwa6ymh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RTG2m9gH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gzhnz5pt0xqptnwa6ymh.png" alt="Service structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The SDK can now be used in any Dart project. To spare the Flutter code of dealing with the request details, the SDK can be wrapped into service classes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PatientServiceImpl&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;PatientService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;KschApi&lt;/span&gt; &lt;span class="n"&gt;_api&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;PatientServiceImpl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KschApi&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Patient&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;patientId&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;patients&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patientId&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Patient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The service can then be injected into the widget using e.g. &lt;a href="https://pub.dev/packages/get_it"&gt;get_it&lt;/a&gt; package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_RegisterPatientPageState&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RegisterPatientPage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;PatientService&lt;/span&gt; &lt;span class="n"&gt;patientService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GetIt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;I&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PatientService&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;();&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;WebScaffold&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="s"&gt;'Register patient'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="c1"&gt;// ...&lt;/span&gt;
      &lt;span class="nl"&gt;floatingActionButton:&lt;/span&gt; &lt;span class="n"&gt;FloatingActionButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;onPressed:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// ...&lt;/span&gt;
          &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;RegisterPatientResult&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;showDialog&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="c1"&gt;//...&lt;/span&gt;
              &lt;span class="o"&gt;);&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;createdPatient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;patientService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;patient&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;// ...&lt;/span&gt;
          &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;},&lt;/span&gt;
        &lt;span class="c1"&gt;// ...&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#service-tests"&gt;
  &lt;/a&gt;
  Service tests
&lt;/h3&gt;

&lt;p&gt;The service classes can be tested with the help of the &lt;a href="https://pub.dev/packages/nock"&gt;nock&lt;/a&gt; package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;late&lt;/span&gt; &lt;span class="n"&gt;PatientServiceImpl&lt;/span&gt; &lt;span class="n"&gt;patientService&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;setUpAll&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;init&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;setUp&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;nock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cleanAll&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="n"&gt;patientService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PatientServiceImpl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'http://localhost'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;});&lt;/span&gt;

  &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Should create patient in case of emergency'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;patientId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Uuid&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;v4&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;givenCreatePatientResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MinimalPatientResponse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patientId&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;toJson&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;patientService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patientId&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
  &lt;span class="o"&gt;});&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;givenCreatePatientResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;dynamic&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;nock&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'http://localhost'&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;post&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/api/patients'&lt;/span&gt;&lt;span class="o"&gt;)..&lt;/span&gt;&lt;span class="na"&gt;reply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#widget-tests"&gt;
  &lt;/a&gt;
  Widget tests
&lt;/h3&gt;

&lt;p&gt;For the unit tests of the Flutter widgets, it should be fairly simple to create mocks for the used services.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementation-details"&gt;
  &lt;/a&gt;
  Implementation details
&lt;/h2&gt;

&lt;p&gt;Next comes a description of how the SDK is working internally.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://github.com/ksch-workflows/ksch-dart-client"&gt;KSCH Dart Client&lt;/a&gt; as a small core with the &lt;code&gt;KschApi&lt;/code&gt; class and model classes to be able to interpret pagination and links in the response payloads. The &lt;code&gt;KschApi&lt;/code&gt; API provides an API for basic HTTP operations which can then be used by the resources. Further, it provides properties to the root resources.&lt;/p&gt;

&lt;p&gt;The resources themselves are a tree structure, i.e. every resource can have subresources. Further, they know about their respective path element. Just before the actual HTTP called on the &lt;code&gt;absolutePath&lt;/code&gt;, all the path elements of all ancestors are joined together.&lt;/p&gt;

&lt;p&gt;The bases classes for the collection resources and identity resources are almost the same, with the difference that &lt;br&gt;
identity resources know about their identification number.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GSeg1QF3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lp2glf4vitcyw2pyqphc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GSeg1QF3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lp2glf4vitcyw2pyqphc.png" alt="ksch-dart-client-uml"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#payload-representations"&gt;
  &lt;/a&gt;
  Payload representations
&lt;/h3&gt;

&lt;p&gt;The KSCH API uses JSON as the data format for request and response payloads. The code which does the mapping between JSON strings and Dart data types is generated with the help of the &lt;a href="https://pub.dev/packages/json_annotation"&gt;json_annotation&lt;/a&gt; library.&lt;/p&gt;

&lt;p&gt;The Dart data types are a model of the JSON data structures. By default, the JSON properties are mapped with the Dart properties. If this is not possible, e.g. because a property in the JSON data starts with an underscore, then the mapping can be configured with custom annotation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="nd"&gt;@JsonSerializable&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;VisitResponsePayload&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;@JsonKey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;name:&lt;/span&gt; &lt;span class="s"&gt;'_id'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;VisitType&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;opdNumber&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="n"&gt;timeStart&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;VisitResponsePayload&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;
    &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;opdNumber&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;timeStart&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;factory&lt;/span&gt; &lt;span class="n"&gt;VisitResponsePayload&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromJson&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="n"&gt;_$VisitResponsePayloadFromJson&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;toJson&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_$VisitResponsePayloadToJson&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The details of the &lt;code&gt;fromJson&lt;/code&gt; and &lt;code&gt;toJson&lt;/code&gt; methods are then generated from the Dart build runner.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dart run build_runner build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#tests"&gt;
  &lt;/a&gt;
  Tests
&lt;/h3&gt;

&lt;p&gt;The unit tests for the SDK act also as API tests for the &lt;a href="https://github.com/ksch-workflows/backend"&gt;backend&lt;/a&gt; API. The expectation is that the &lt;em&gt;backend&lt;/em&gt; has been locally started on port 8080. Then they are using the real API to make sure that all requests can be successfully executed and all responses successfully parsed. Later on, this test suite will also be included in the build process of the &lt;em&gt;backend&lt;/em&gt; to make sure that no unintended breaking API changes are made.&lt;/p&gt;

</description>
      <category>dart</category>
      <category>flutter</category>
      <category>rest</category>
    </item>
    <item>
      <title>How to Build a Predictive Machine Learning Site With React and Python (Part Two: API Development)</title>
      <author>Gospel Darlington</author>
      <pubDate>Sat, 02 Oct 2021 09:51:46 +0000</pubDate>
      <link>https://dev.to/daltonic/how-to-build-a-predictive-machine-learning-site-with-react-and-python-part-two-api-development-11d2</link>
      <guid>https://dev.to/daltonic/how-to-build-a-predictive-machine-learning-site-with-react-and-python-part-two-api-development-11d2</guid>
      <description>&lt;p&gt;What we‚Äôll be building.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l46f7FcO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://paper-attachments.dropbox.com/s_1CD2C958AAF0720EBE1D560F9B18ECFF16C7D1D38B4E842B6EED9F9393C36428_1633089584413_predictive-model-api.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l46f7FcO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://paper-attachments.dropbox.com/s_1CD2C958AAF0720EBE1D560F9B18ECFF16C7D1D38B4E842B6EED9F9393C36428_1633089584413_predictive-model-api.gif" alt="Hireable API"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sequel to the &lt;a href="https://dev.to/daltonic/how-to-build-a-predictive-machine-learning-site-with-react-and-python-part-one-model-development-117"&gt;last article&lt;/a&gt;, we will be building a machine learning API that will predict whether a candidate will or will not be hired based on his or her credentials. This is part two out of a three-part series we will be developing. This part is only concerned with developing the machine learning API. If you haven't read part one of this article you should do so before this one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Building a machine learning model with no deployment mechanism could be frustrating unless you just want to learn. But where is the beauty in that if you can't deploy it for the whole world to see and use? for your machine learning model to be useful you need to integrate it with an API. You don't know how to build a machine learning API? Don't worry, in this tutorial you will learn step-by-step how to develop a predictive machine learning API. We will utilize the machine learning model developed in the &lt;a href="https://dev.to/daltonic/how-to-build-a-predictive-machine-learning-site-with-react-and-python-part-one-model-development-117"&gt;part one&lt;/a&gt; of this series.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  Prerequisite
&lt;/h2&gt;

&lt;p&gt;To flow along in this tutorial, a good understanding of the following tools is required.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Fast API&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/daltonic/how-to-build-a-predictive-machine-learning-site-with-react-and-python-part-one-model-development-117"&gt;Part One&lt;/a&gt; of this tutorial&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-machine-learning-api"&gt;
  &lt;/a&gt;
  What is a Machine Learning API
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hFVkZ2qi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_1CD2C958AAF0720EBE1D560F9B18ECFF16C7D1D38B4E842B6EED9F9393C36428_1633093273963_laptop-6332544_960_720.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hFVkZ2qi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_1CD2C958AAF0720EBE1D560F9B18ECFF16C7D1D38B4E842B6EED9F9393C36428_1633093273963_laptop-6332544_960_720.jpg" alt="Image by Riekus from Pixabay"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will answer this question by defining the terminologies used here and also doing a brief coverage of the advantages associated with machine learning APIs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is an API&lt;/strong&gt;&lt;br&gt;
API stands for an &lt;strong&gt;a&lt;/strong&gt;pplication &lt;strong&gt;p&lt;/strong&gt;rograming &lt;strong&gt;i&lt;/strong&gt;nterface. To simply state, it is a piece of backend service that allows two or more computers to have communications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why combine machine learning with an API&lt;/strong&gt;&lt;br&gt;
It gives your model the platform to be accessed and used by millions of people all over the globe, else it will just be a piece of code sitting on your computer. Take this analogy to understand why you must combine a machine learning model with an API.&lt;/p&gt;

&lt;p&gt;An airplane needs an airport, this is where it will operate from and also be accessed by millions of passengers that frequent the airport. Without the airport, the airplane cannot serve the passengers. This is how important an API is to a machine learning model, without an API a machine learning model cannot be used online.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are the advantages of an API&lt;/strong&gt;&lt;br&gt;
The benefits are almost unlimited, the following are some advantages of combining a machine learning model with an API.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It helps people to access your model online.&lt;/li&gt;
&lt;li&gt;It helps other applications to utilize your model.&lt;/li&gt;
&lt;li&gt;It brings you profits by offering it as a service.&lt;/li&gt;
&lt;li&gt;It helps your model to gather more data from your users.&lt;/li&gt;
&lt;li&gt;It helps your model to collect more diversified inputs from people online.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These and more are some advantages of integrating a machine learning model with an API.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What technologies can achieve a machine learning API&lt;/strong&gt;&lt;br&gt;
There are a few programming languages and frameworks that can help you put together a machine learning model with an API. This also depends on your choice of programming language and framework. The most popular frameworks that can help you achieve a hybrid of a machine learning model and API are django, Flask, and FastAPI. All these frameworks are built upon the Python programming language. For the sake of this tutorial, we will be using the FastAPI framework, which is fast, lightweight, and simple to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-a-predictive-machine-learning-api"&gt;
  &lt;/a&gt;
  Building a Predictive Machine Learning API
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bORFNBUT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_1CD2C958AAF0720EBE1D560F9B18ECFF16C7D1D38B4E842B6EED9F9393C36428_1633156459395_laptop-1148958_960_720.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bORFNBUT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_1CD2C958AAF0720EBE1D560F9B18ECFF16C7D1D38B4E842B6EED9F9393C36428_1633156459395_laptop-1148958_960_720.jpg" alt="Image by Free-Photos from Pixabay"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the meat of this tutorial, you will be guided by the hand so ensure that you don't skip any step. Below are the procedures you need to follow to build a machine learning API.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Choosing a Development Environment&lt;/strong&gt;&lt;br&gt;
This step is important, the tools that you use will either help you accomplish your task on time or frustrates you with difficulties. For this tutorial, we will be using VScode for all the coding. This is because all the necessary toolings needed to both develop and test our API are all in one place. Below are some of the reasons we are choosing VScode for this work.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support for Python IntelliSense, Code Format tools, and Code Highlights.&lt;/li&gt;
&lt;li&gt;Support for Thunder Client Extention for testing our API.&lt;/li&gt;
&lt;li&gt;Support for an integrated terminal with splitting functionality.&lt;/li&gt;
&lt;li&gt;Support for integrated version control and more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Installing Development Dependencies&lt;/strong&gt;&lt;br&gt;
As earlier stated, we will be using the FastAPI framework which is built upon the Python programming language to code up our API. The following are the tools and libraries we will install for our development.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python 3.9.7&lt;/li&gt;
&lt;li&gt;Fastapi 0.68.1&lt;/li&gt;
&lt;li&gt;Uvicorn 0.15.0&lt;/li&gt;
&lt;li&gt;Scikit-learn 1.0&lt;/li&gt;
&lt;li&gt;Thunder Client&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, follow the below instruction to have them all installed on your computer.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Head to the VScode &lt;a href="https://code.visualstudio.com/download"&gt;site&lt;/a&gt; and download the appropriate version for your OS.&lt;/li&gt;
&lt;li&gt;Install the downloaded package on your computer.&lt;/li&gt;
&lt;li&gt;Head to the Python &lt;a href="https://www.python.org/downloads/"&gt;website&lt;/a&gt; and download &lt;strong&gt;Python version 3.9.7&lt;/strong&gt; or later.&lt;/li&gt;
&lt;li&gt;Install the Python package and add the path to your &lt;strong&gt;system variables&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Goto the directory from part one of this tutorial where you have your &lt;strong&gt;&lt;em&gt;model folder&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Create a new directory called &lt;strong&gt;api&lt;/strong&gt; &lt;em&gt;side-by-side&lt;/em&gt; with the model folder, It should look like this.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o596h7V6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Daltonic/predictive/raw/main/screenshots/api/2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o596h7V6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Daltonic/predictive/raw/main/screenshots/api/2.png" alt="Project Structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Open the &lt;strong&gt;&lt;em&gt;api folder&lt;/em&gt;&lt;/strong&gt; in VSCode and install the following libraries using the terminal.&lt;/p&gt;

&lt;p&gt;pip install fastapi&lt;br&gt;
pip install uvicorn[standard]&lt;br&gt;
pip install scikit-learn&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On VScode click on extensions and install &lt;strong&gt;&lt;em&gt;Thunder Client&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Congratulations, that is all that you will need for now, here is how your VScode should look, minus the theming.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vmVJecwr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_1CD2C958AAF0720EBE1D560F9B18ECFF16C7D1D38B4E842B6EED9F9393C36428_1633159892539_Screenshot%2B207.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vmVJecwr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_1CD2C958AAF0720EBE1D560F9B18ECFF16C7D1D38B4E842B6EED9F9393C36428_1633159892539_Screenshot%2B207.png" alt="VScode Project structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please make sure you are on the &lt;strong&gt;api&lt;/strong&gt; working directory, else just change the directory into it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Importing Libraries&lt;/strong&gt;&lt;br&gt;
Within the &lt;strong&gt;api folder&lt;/strong&gt;, create a new file named &lt;strong&gt;&lt;em&gt;"main.py"&lt;/em&gt;&lt;/strong&gt;, this is where all the programming logic will reside. Once you have created this file, paste the following code snippets inside it.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Importing necessary libraries
import uvicorn
import pickle
from pydantic import BaseModel
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The &lt;strong&gt;uvicorn&lt;/strong&gt; library is used to create a server having a host and port of your preference for communicating with our API via &lt;strong&gt;HTTP&lt;/strong&gt; requests and responses.&lt;/p&gt;

&lt;p&gt;We use the &lt;strong&gt;pickle&lt;/strong&gt; library to load up our trained model from part one of this series.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;&lt;em&gt;BaseModel&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;class from the **pydantic&lt;/strong&gt; library is used for defining our API request parameters. This is important for ensuring that we are sending the right data types to our trained machine learning model.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;FastAPI&lt;/strong&gt; library helps us define the routes and the functions a route will run when accessed by a client. It also helps us define the responses we give for a request.&lt;/p&gt;

&lt;p&gt;Lastly, the CORSMiddleware helps us define the domains that will get resources from our API. This is a very important configuration in a FastAPI project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Initializing the fast API&lt;/strong&gt;&lt;br&gt;
The following code block initializes the fastAPI, whitelist the domains origins that can access our API endpoints, and configures it as a middleware.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Initializing the fast API server
app = FastAPI()
origins = [
    "http://localhost.tiangolo.com",
    "https://localhost.tiangolo.com",
    "http://localhost",
    "http://localhost:8080",
    "http://localhost:3000",
]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Terrific job, now let‚Äôs advance to loading up our trained machine learning model from part one of this tutorial.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Loading up the Trained Model&lt;/strong&gt;&lt;br&gt;
Copy and paste the following codes on your VScode &lt;strong&gt;main.py&lt;/strong&gt; file.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Loading up the trained model
model = pickle.load(open('../model/hireable.pkl', 'rb'))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Using the pickle library, we are loading the trained model in combination with the Python &lt;strong&gt;open function&lt;/strong&gt;. Take note of the path to the trained pickle model, we are accessing it from the &lt;strong&gt;model folder&lt;/strong&gt;. Although, you can access your trained model from any directory provided that you specify it in the Python open function. However, for the sake of this tutorial, we should all follow the same style guide.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Defining the model input types&lt;/strong&gt;&lt;br&gt;
Again, copy and paste the codes below into your code editor.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Defining the model input types
class Candidate(BaseModel):
    gender: int
    bsc: float
    workex: int
    etest_p: float
    msc: float
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Base on the BaseModel class, we are defining a class called &lt;strong&gt;‚ÄúCandidate‚Äù&lt;/strong&gt;. By doing this we are instructing our model prediction route to only accept the data types that conform to the specifications in the Candidate class. This immensely helps us collect the right data types for our trained machine learning model and reduce errors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setting up the Home Route&lt;/strong&gt;&lt;br&gt;
This is a route that specifies what we respond to our users when they visit the home route. For this project, we will just give them a welcome message. Paste the following codes to your code editor.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Setting up the home route
@app.get("/")
def read_root():
    return {"data": "Welcome to online employee hireability prediction model"}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Setting up the Prediction Route&lt;/strong&gt;&lt;br&gt;
Now let's stitch all these codes together. Paste the following code on your editor and let me explain.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Setting up the prediction route
@app.post("/prediction/")
async def get_predict(data: Candidate):
    sample = [[
        data.gender,
        data.bsc,
        data.workex,
        data.etest_p,
        data.msc
    ]]
    hired = model.predict(sample).tolist()[0]
    return {
        "data": {
            'prediction': hired,
            'interpretation': 'Candidate can be hired.' if hired == 1 else 'Candidate can not be hired.'
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Firstly, when a user sends a post data to our prediction route, we use the Candidate class to bind it to the request body and extract the essential data we specified into a multi-dimensional array called &lt;strong&gt;‚Äúsample‚Äù&lt;/strong&gt;. Secondly, we give this array to our model for prediction and save the result in another variable called &lt;strong&gt;‚Äúhired‚Äù&lt;/strong&gt;. Lastly, we send a response back to the client with either &lt;em&gt;‚ÄúCandidate can be hired‚Äù&lt;/em&gt; or &lt;em&gt;‚ÄúCandidate can not be hired‚Äù&lt;/em&gt; base on the prediction of our model.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Configuring the Server Host and Port&lt;/strong&gt;&lt;br&gt;
Finally, we do a quick server configuration instructing the uvicorn library to start up our server on the specified host and port number whenever the &lt;strong&gt;main.py&lt;/strong&gt; file is executed. See the codes below.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Configuring the server host and port
if __name__ == '__main__':
    uvicorn.run(app, port=8080, host='0.0.0.0')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Congratulations, you have just built a machine learning API. Now let‚Äôs do quick testing to see if it's all good.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-the-api-endpoints"&gt;
  &lt;/a&gt;
  Testing the API Endpoints
&lt;/h2&gt;

&lt;p&gt;Adhere to the following instructions to test the API endpoints.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On the VScode interface, click on the Thunder Client.&lt;/li&gt;
&lt;li&gt;Create a new request.&lt;/li&gt;
&lt;li&gt;Select the post option.&lt;/li&gt;
&lt;li&gt;Enter "&lt;a href="http://localhost:8080/prediction"&gt;http://localhost:8080/prediction&lt;/a&gt;" on the address bar.&lt;/li&gt;
&lt;li&gt;Goto the body tab and supply the parameters below.&lt;/li&gt;
&lt;li&gt;Finally, click on send.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will have something like this if you had done the above steps correctly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1-hZcI6q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Daltonic/predictive/raw/main/screenshots/api/3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1-hZcI6q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Daltonic/predictive/raw/main/screenshots/api/3.png" alt="Testing the Prediction Route"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also send another request to the home route but use the GET method instead. You should get something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RneTrXFw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_1CD2C958AAF0720EBE1D560F9B18ECFF16C7D1D38B4E842B6EED9F9393C36428_1633166067545_Screenshot%2B208.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RneTrXFw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_1CD2C958AAF0720EBE1D560F9B18ECFF16C7D1D38B4E842B6EED9F9393C36428_1633166067545_Screenshot%2B208.png" alt="Testing the Home Route"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hurray, you have just completed two out of the three-part series on how to build a predictive machine learning model. In the third and last article for this series, you will learn how to consume this API using ReactJs. You can see the full source code on my &lt;a href="https://github.com/Daltonic/predictive/tree/main/api"&gt;Git Repo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In conclusion, preparing a deployable machine learning model in the past has been a pain on the neck but not anymore. You have seen how easy it is to do so with the FastAPI framework built upon the Python programming language. I believe that FastAPI is the first simple solution for developers to bridge the gap between machine learning and web development. In our next tutorial, we will see this in action by hooking it up with ReactJs. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-author"&gt;
  &lt;/a&gt;
  About Author
&lt;/h2&gt;

&lt;p&gt;Gospel Darlington is a remote &lt;strong&gt;Fullstack&lt;/strong&gt; web developer, prolific with technologies such as &lt;strong&gt;VueJs&lt;/strong&gt;, &lt;strong&gt;Angular&lt;/strong&gt;, &lt;strong&gt;ReactJs&lt;/strong&gt;, and &lt;strong&gt;API development&lt;/strong&gt;. He takes a huge interest in the development of high-grade and responsive web applications.&lt;/p&gt;

&lt;p&gt;Gospel Darlington currently works as a &lt;strong&gt;freelancer developing apps and writing tutorials&lt;/strong&gt; that teach other developers how to integrate software products into their projects.&lt;/p&gt;

&lt;p&gt;He spends his free time &lt;strong&gt;coaching young people&lt;/strong&gt; on how to be successful in life. His hobbies include inventing new recipes, book writing, songwriting, and singing. You can reach me on &lt;a href="https://daltonic.github.io/"&gt;Website&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/darlington-gospel-aa626b125/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://twitter.com/idaltonic"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.facebook.com/darlington.gospel01"&gt;Facebook&lt;/a&gt;, or &lt;a href="https://github.com/Daltonic"&gt;GitHub&lt;/a&gt; for any discussion.&lt;/p&gt;

</description>
      <category>python</category>
      <category>react</category>
      <category>machinelearning</category>
      <category>fastapi</category>
    </item>
    <item>
      <title>Ways to Make Money?</title>
      <author>Thu Htet Tun</author>
      <pubDate>Sat, 02 Oct 2021 09:49:07 +0000</pubDate>
      <link>https://dev.to/thuhtetdev/ways-to-make-money-19gc</link>
      <guid>https://dev.to/thuhtetdev/ways-to-make-money-19gc</guid>
      <description>&lt;p&gt;hello guys!&lt;/p&gt;

&lt;p&gt;I won't explain you with long and complicate words for that coz everybody can make money on their own way,&lt;br&gt;
so here's the key points to modify your mind.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Don't ever think about making money is hard&lt;/li&gt;
&lt;li&gt;You can make money right now but amount will be based on yours.&lt;/li&gt;
&lt;li&gt;You can't make money right now .. it takes time to make money.. but amount will be based on yours preparation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's all. &lt;br&gt;
Making money is not hard. Choose your way.&lt;/p&gt;

&lt;p&gt;For me, I'm not that rich now. But I can live on my own and currently follow that No.3 rule to set up my mind. I wanna make more income streams as much as I can. I'm currently working on a full time job but I wanna expand my income by teaching and sharing. &lt;br&gt;
After that, making passive incomes will be my final target.&lt;/p&gt;

&lt;p&gt;Think about what's your method to make money.&lt;br&gt;
Share in this comment section&lt;/p&gt;

&lt;p&gt;Thanks for your time.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>webdev</category>
      <category>career</category>
      <category>programming</category>
    </item>
    <item>
      <title>September 21 New launch and Updates for Developers  üöÄ | Video SDK</title>
      <author>Sagar Kava</author>
      <pubDate>Sat, 02 Oct 2021 09:45:45 +0000</pubDate>
      <link>https://dev.to/videosdk/september-21-new-launch-and-updates-for-developers-video-sdk-dae</link>
      <guid>https://dev.to/videosdk/september-21-new-launch-and-updates-for-developers-video-sdk-dae</guid>
      <description>&lt;p&gt;NEW! This is the September 2021 release announcement. Here is a list of all new enhancements and product updates on videosdk.live&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. User dashboard&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simplified API key creation and domain whitelisting.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Site tour&lt;/strong&gt; tutorial now available! Get a quick walkthrough of all features.&lt;/li&gt;
&lt;li&gt;Now join the &lt;a href="https://discord.gg/f2WsNDN9S5"&gt;Discord community&lt;/a&gt; from the console itself.&lt;/li&gt;
&lt;li&gt;Find the &lt;strong&gt;Quickstart&lt;/strong&gt; on the top right corner to get started with any SDK.&lt;/li&gt;
&lt;li&gt;Upfront payment credit is now visible on the homepage.&lt;/li&gt;
&lt;li&gt;And other minor bug fixes.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2. RTC Javascript prebuilt v0.1.12&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Join screen&lt;/strong&gt; now available with minimal configuration.&lt;/li&gt;
&lt;li&gt;Smoother navigation for 100+ participants.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#new-rtc-sdk-launch-ios-sdk-and-flutter-sdk"&gt;
  &lt;/a&gt;
  üöÄ New RTC SDK launch iOS SDK and Flutter SDK
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--41Yd_-ko--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/http://blog.videosdk.live/content/images/2021/10/giphy--2-.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--41Yd_-ko--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/http://blog.videosdk.live/content/images/2021/10/giphy--2-.gif" alt="September 2021 New launch and Updates for Developers üöÄ"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. iOS SDK v1.0.0 (NEW!)&lt;/strong&gt; üéâ&lt;/p&gt;

&lt;p&gt;We are launching the &lt;a href="https://docs.videosdk.live/docs/realtime-communication/sdk-reference/ios-sdk/setup"&gt;iOS Video call SDK&lt;/a&gt; this month which is completely compatible with our other SDKs. Visit our docs to start integrating right now!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Join or start the same meeting from iOS devices.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Manage and &lt;strong&gt;display participant videos&lt;/strong&gt; in a grid or list or any custom layout.&lt;/li&gt;
&lt;li&gt;Support for wired and wireless headsets for &lt;strong&gt;audio calling&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/videosdk-live/videosdk-rtc-ios-sdk-example"&gt;Code sample&lt;/a&gt; on iOS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2. Flutter SDK v0.0.4 (NEW!)&lt;/strong&gt; üéâ&lt;/p&gt;

&lt;p&gt;We are also launching the &lt;a href="https://pub.dev/packages/videosdk"&gt;Flutter Video call SDK&lt;/a&gt; this October which will be completely compatible with our other SDKs. The documentation is still a work in progress. Stay tuned for the update.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A single &lt;strong&gt;MeetingBuilder&lt;/strong&gt; widget for integrating the meeting.&lt;/li&gt;
&lt;li&gt;Manage and &lt;strong&gt;display participant videos&lt;/strong&gt; in a grid or list or any custom layout.&lt;/li&gt;
&lt;li&gt;Support for wired and wireless headsets for &lt;strong&gt;audio calling&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/videosdk-live/videosdk-rtc-flutter-sdk-example"&gt;Code sample&lt;/a&gt; on Flutter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Code Samples&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;New code samples released.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RTC SDK: &lt;a href="https://github.com/videosdk-live/videosdk-rtc-flutter-sdk-example"&gt;Flutter&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;RTC SDK:&lt;a href="https://github.com/videosdk-live/videosdk-rtc-ios-sdk-example"&gt;IOS&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can always &lt;a href="https://videosdk.live/contact"&gt;connect with us&lt;/a&gt; in case of any query or help. We are happy to assist you.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

&lt;p&gt;Videosdk.live presents you its Flutter and IOS Video SDK. Integrate easy-to-use real-time audio and video calling with this robust flutter video API and make experiences better with full flexibility and customization.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LqXM_prh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://blog.videosdk.live/content/images/2021/10/Video-SDK-for-Re.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LqXM_prh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://blog.videosdk.live/content/images/2021/10/Video-SDK-for-Re.png" alt="September 2021 New launch and Updates for Developers üöÄ"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>ios</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>why use model.findOne({})??</title>
      <author>ADJARO OGAGA</author>
      <pubDate>Sat, 02 Oct 2021 09:43:42 +0000</pubDate>
      <link>https://dev.to/ogagacodes/why-use-model-findone-5575</link>
      <guid>https://dev.to/ogagacodes/why-use-model-findone-5575</guid>
      <description>&lt;p&gt;Mongodb has undoubtedly become one of the most popular databases used with Nodejs. This is due to the possibility for storing decently, the varied types of data that can be dealt over the internet. For more information on just what mongodb is, and maybe a deep dive please visit their docs at &lt;a href="https://docs.mongodb.com/"&gt;Mongodb Documentation&lt;/a&gt;. &lt;br&gt;
But wait!!!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H1qjr6t_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tc03uikwl57oaf51nsrb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H1qjr6t_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tc03uikwl57oaf51nsrb.jpg" alt="A nerd asking you to wait"&gt;&lt;/a&gt;&lt;br&gt;
At this point I would like you to know that this article is meant for those that have worked with mongodb and maybe a backend framework like nodejs, python or java, its not really for beginners , that not withstanding if you're feeling a little curious please read on, as I would try my very best to make it as down to earth as possible. &lt;br&gt;
Just imagine there is a lorry load of phones, different types, manufacturers. Assuming there is a particular phone you need to get to the owner quickly, you know the make, the type, and details unique to just that phone. Then you start going through each pack, even with just a hundred pack, how tiring that will be!!! phew! I hate stress.. Who doesn't. What if, there was a way to quickly locate just that phone, maybe a magnetic device reader that can read phone types , manufacturers etc. Aha!! Easy right? Would still EVER go through the searching pack by pack way(algorithm)? No sane person will. Fact is, no business man will.&lt;br&gt;
Well, a database. any database as ypou might know a;lready, is a store for unique items. Not phone obviously, but what you ay see on your facebook profile. Your fullname, profile picture, even your posts must all be stored uniquely in a database. Mongodb is one such database. To get you details to your page, the databse has to be searched, just as yoo would search a lorry load of different phones. Just imagine having to search most of the over 5 billion users on facebook before your details comes to your page, that will be a hell of a time.&lt;br&gt;
 The good news is, mongodb like most other databases has inner mechanisms, just like the magnetic device you can use to search for a phone's deatils. Actually there are pre-built instructions that ship with mongodb to do the finding for you, they are called methods or functions. One of such is model.findOne(). There is also model.find(). Both do the same thing, but can you guess the difference? If you said findOne searches for one particular item, while find seraches through all untilit finds that one, your'e right. &lt;br&gt;
In summary use model.findOne() for quicker lookup, cleaner syntax. But the emphasis is on "SPEED". With just a few thousands stored data, using any will hardly have any difference. But the world is over 6 billion the last time I checked. So build with that in mind.     &lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>nosql</category>
      <category>database</category>
      <category>bestpractices</category>
    </item>
  </channel>
</rss>
