<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Best Tips For Becoming A Better JavaScript Coder</title>
      <author>Jason</author>
      <pubDate>Sat, 06 Nov 2021 05:28:43 +0000</pubDate>
      <link>https://dev.to/jasonsz/best-tips-for-becoming-a-better-javascript-coder-3m7f</link>
      <guid>https://dev.to/jasonsz/best-tips-for-becoming-a-better-javascript-coder-3m7f</guid>
      <description>&lt;p&gt;JavaScript is the language of the web development gods. Whether you are involved in creating websites, or simply improving user experience on existing ones, JavaScript is the boon (and bane, sometimes) of your existence. It is a very sought-after skill in the technical and web development sector, and thousands of graduates or about-to-graduate students can be seen working hard on improving their JavaScript skills. It is with good reason, too. Master JavaScript, and you will be able to create the best of the best websites, which are both visual treats, and performance machines.&lt;/p&gt;
&lt;br&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/best-tips-for-becoming-a-better-javascript-coder/"&gt;Best Tips For Becoming A Better JavaScript Coder&lt;/a&gt;&lt;/b&gt;

</description>
    </item>
    <item>
      <title>10 Awesome Github Repos Every Web Developer Should Know</title>
      <author>Jason</author>
      <pubDate>Sat, 06 Nov 2021 04:50:27 +0000</pubDate>
      <link>https://dev.to/jasonsz/10-awesome-github-repos-every-web-developer-should-know-19hc</link>
      <guid>https://dev.to/jasonsz/10-awesome-github-repos-every-web-developer-should-know-19hc</guid>
      <description>&lt;p&gt;&lt;span&gt;Here I list 10 excellent JavaScript based GitHub resources that will help you to understand the language better and help you to write clean code. This list is based on my personal preference. &lt;/span&gt;&lt;/p&gt;
&lt;span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;ReadUI&amp;amp;quot More: &lt;b&gt;&lt;a href="https://news.google.com/articles/CAIiEHRNZDbK-6L3wLhhd1mvgX8qGQgEKhAIACoHCAow7-ynCzDc978DMKOIlgc?hl=en-US&amp;amp;gl=US&amp;amp;ceid=US%3Aen"&gt;10 Awesome Github Repos Every Web Developer Should Know&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;

</description>
    </item>
    <item>
      <title>53 .new shortcuts to perform new actions in one step</title>
      <author>Ramesh chandra pola</author>
      <pubDate>Sat, 06 Nov 2021 03:57:50 +0000</pubDate>
      <link>https://dev.to/byteslash/53-new-shortcuts-to-perform-new-actions-in-one-step-m1</link>
      <guid>https://dev.to/byteslash/53-new-shortcuts-to-perform-new-actions-in-one-step-m1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hello-everyone"&gt;
  &lt;/a&gt;
  Hello everyone! 🧡
&lt;/h2&gt;

&lt;p&gt;Before we start, Let’s connect on  &lt;a href="https://twitter.com/POLARAMESHCHAN2"&gt;Twitter &lt;/a&gt; and also follow me here for more useful blogs.&lt;br&gt;
In this article, we will see .new link shortcuts to perform actions in one simple step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's get started 🚀
&lt;/h2&gt;

&lt;p&gt;Here are some handful of .new shortcuts which save yours &lt;strong&gt;100+ hrs&lt;/strong&gt;. 😱.&lt;/p&gt;

&lt;p&gt;Don't worry, I am here to save your time. For that, I just need your feedback and support 🙌🧡. &lt;/p&gt;

&lt;p&gt;Excited right?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nriOQ5FE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635851424787/2QfxJ9pts.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nriOQ5FE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635851424787/2QfxJ9pts.gif" alt="giphy.gif" width="250" height="186"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-new"&gt;
  &lt;/a&gt;
  What's .new?
&lt;/h2&gt;

&lt;p&gt;.new links are shortcuts to your favourite actions on the websites you love. Instead of typing the full URL or searching for it, you can simply enter the .new shortcut.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If u want to create a GitHub repository just type &lt;code&gt;repo.new&lt;/code&gt; and then boom🚀.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If u are new to this shortcut, you might have tried this right? 😉🙌.&lt;br&gt;
In the same way, we have 100's of shortcuts for Posting, creating, linking, designing, recording etc... it’s all possible with action-based .new links. &lt;br&gt;
But here I will share &lt;strong&gt;53&lt;/strong&gt;  .new link shortcuts of most daily using websites that can help you get things done faster.&lt;br&gt;
You can also check all shortcuts on &lt;a href="https://whats.new/"&gt;What's new&lt;/a&gt; website.&lt;/p&gt;

&lt;p&gt;Looks interesting right? yes, If you have your own website and want to register .new Domain for your users. So you can also apply to register your own .new-Domain. For that just type &lt;code&gt;get.new&lt;/code&gt; ( shortcut for registering a shortcut 😂).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#here-the-list-starts"&gt;
  &lt;/a&gt;
  Here the list starts:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;folder.new  → Create a new notebook for your API on RunKit.&lt;/li&gt;
&lt;li&gt;docs.new → Create a New Google Doc.&lt;/li&gt;
&lt;li&gt;jam.new   → Start a new Jamboard with Google.&lt;/li&gt;
&lt;li&gt;form.new → New Google form.&lt;/li&gt;
&lt;li&gt;slide.new → New Google slide.&lt;/li&gt;
&lt;li&gt;site.new   → New Google site.&lt;/li&gt;
&lt;li&gt;sheet.new → New Google sheet.&lt;/li&gt;
&lt;li&gt;keep.new → New Google note.&lt;/li&gt;
&lt;li&gt;cal.new → New Google Calendar event.&lt;/li&gt;
&lt;li&gt;meet.new → New meeting room with Google meet.&lt;/li&gt;
&lt;li&gt;repo.new → New GitHub repository.&lt;/li&gt;
&lt;li&gt;gist.new → New GitHub gist.&lt;/li&gt;
&lt;li&gt;pen.new → New Codepen project.&lt;/li&gt;
&lt;li&gt;csb.new → New code sandbox project.&lt;/li&gt;
&lt;li&gt;js.new → Create a new JavaScript project using.&lt;/li&gt;
&lt;li&gt;ts.new → Create a new Typescript project with CodeSandbox.&lt;/li&gt;
&lt;li&gt;react.new → Create a new React project with CodeSandbox.&lt;/li&gt;
&lt;li&gt;vue.new → Create a new vue.js project with CodeSandbox.&lt;/li&gt;
&lt;li&gt;ng.new → Create a new Angular project with CodeSandbox.&lt;/li&gt;
&lt;li&gt;svelte.new → Create a new Svelte project using CodeSandbox.&lt;/li&gt;
&lt;li&gt;next.new → New NextJS project using stackblitz.&lt;/li&gt;
&lt;li&gt;flutter.new → Prototype your app using Flutter's online editor.&lt;/li&gt;
&lt;li&gt;api.new → New Node.js API endpoint from Runkit.&lt;/li&gt;
&lt;li&gt;story.new → New Medium story.&lt;/li&gt;
&lt;li&gt;design.new →Create a new Canva design.&lt;/li&gt;
&lt;li&gt;snippet.new → Create a new snippet on Codespace.&lt;/li&gt;
&lt;li&gt;playlist.new → Create a new Spotify playlist.&lt;/li&gt;
&lt;li&gt;podcast.new → New Anchor podcast episode.&lt;/li&gt;
&lt;li&gt;discord.new → Create a new discord server.&lt;/li&gt;
&lt;li&gt;notion.new → Create a new page in Notion.&lt;/li&gt;
&lt;li&gt;sign.new → Fill and sign PDFs &amp;amp; forms with Adobe.&lt;/li&gt;
&lt;li&gt;compresspdf.new → Compress PDF documents with Adobe.&lt;/li&gt;
&lt;li&gt;mergepdf.new → Combine PDFs into one file.&lt;/li&gt;
&lt;li&gt;pdftoword.new → Convert PDFs to Word documents with Adobe.&lt;/li&gt;
&lt;li&gt;link.new → New Create link using bitly.&lt;/li&gt;
&lt;li&gt;websitebuilder.new → Build a website with GoDaddy.&lt;/li&gt;
&lt;li&gt;wix.new → Create a new Website using WIX.&lt;/li&gt;
&lt;li&gt;logo.new → Create a new logo for with Adobe Spark.&lt;/li&gt;
&lt;li&gt;photo.new → Edit an image using Adobe Photoshop online.&lt;/li&gt;
&lt;li&gt;luma.new → Create an event page for your Zoom event with Luma.&lt;/li&gt;
&lt;li&gt;pdf.new → Convert anything to PDF.&lt;/li&gt;
&lt;li&gt;board.new → Collaborate remotely on an online whiteboard.&lt;/li&gt;
&lt;li&gt;ppt.new → Create a new presentation using PowerPoint.&lt;/li&gt;
&lt;li&gt;excel.new → Create a spreadsheet using Excel.&lt;/li&gt;
&lt;li&gt;docx.new → Create a new document using Word.&lt;/li&gt;
&lt;li&gt;todoist.new → Create a new task using todoist.&lt;/li&gt;
&lt;li&gt;action.new → Set up a new workspace to manage your Chrome tabs.&lt;/li&gt;
&lt;li&gt;kahoot.new → Create an online quiz using Kahoot.&lt;/li&gt;
&lt;li&gt;bitcoin.new → Buy, sell, and trade Bitcoin on eToro.&lt;/li&gt;
&lt;li&gt;ionic.new → New ionic project using ionic framework.&lt;/li&gt;
&lt;li&gt;sql.new → Write SQL queries for your data in other applications.&lt;/li&gt;
&lt;li&gt;deploy.new → Deploy a new vercel project.&lt;/li&gt;
&lt;li&gt;matlab.new → Use MATLAB through your web browser.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's all for today! 😁 You have reached the end of the article 😍&lt;/p&gt;

&lt;p&gt;If you found this article helpful, please like and share it 🧡. &lt;/p&gt;

&lt;p&gt;Don’t forget to share this article with your friends or colleagues. I'm Ramesh Chandra Pola who loves to build projects and share valuable tips in my Blogs. Feel free to connect with me on  &lt;a href="https://twitter.com/POLARAMESHCHAN2"&gt;Twitter&lt;/a&gt;. &lt;/p&gt;

</description>
    </item>
    <item>
      <title>What's new in C# 10.0</title>
      <author>G.L Solaria</author>
      <pubDate>Sat, 06 Nov 2021 03:35:42 +0000</pubDate>
      <link>https://dev.to/glsolaria/whats-new-in-c-100-4l3n</link>
      <guid>https://dev.to/glsolaria/whats-new-in-c-100-4l3n</guid>
      <description>&lt;p&gt;C# was first released around 20 years ago and recently the pace of releases has increased with new releases being unveiled every year for the past 4 years.&lt;/p&gt;

&lt;p&gt;C# 10.0 is likely to be launched with .NET 6.0 at &lt;a href="https://www.dotnetconf.net/"&gt;.NET Conf 2021&lt;/a&gt; coming up on November 9 (with the conference concluding on November 11). So I thought I would summarise some of the new features introduced in C# 10.0. But first a bit of history ...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#language-evolution"&gt;
  &lt;/a&gt;
  Language Evolution
&lt;/h1&gt;

&lt;p&gt;Initially C# was released every few years. Each release typically included a signature feature that required significant thought in how to use it. For example, C# 2.0 introduced Generics, C# 3.0 introduced LINQ, C# 5.0 introduced async/await for asynchronous programming. &lt;/p&gt;

&lt;p&gt;With the latest releases now happening every year, they are focusing more on code simplification with smaller updates. Big new features, however, are now likely to evolve over a few releases. For example, pattern matching continues to evolve now spanning 4 releases. Records is another example of this evolutionary approach. &lt;/p&gt;

&lt;p&gt;The C# language design also moved from a closed, secret development model to an open development model around 2013. Now you can even contribute to the &lt;a href="https://github.com/dotnet/csharplang"&gt;C# language design forum hosted on GitHub&lt;/a&gt; to help further evolve the language. Design meetings and road-maps are published on the site publicly to enable open discussions and feedback.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#new-features"&gt;
  &lt;/a&gt;
  New Features
&lt;/h1&gt;

&lt;p&gt;I have chosen not to describe all proposed features of C# 10.0 because this would be a very long post (it's very long already!). If you are interested in the full list of proposals, see the &lt;a href="https://github.com/dotnet/csharplang/blob/main/Language-Version-History.md"&gt;C# Language Version History&lt;/a&gt;. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#file-scoped-namespace-declarations"&gt;File scoped namespace declarations&lt;/a&gt; which is a dispenses with the wasteful indentation and braces that comes with namespace declarations thereby removing one level of indentation and braces for all C# files.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#global-using-directives"&gt;Global using directives&lt;/a&gt; which allow you to define using directives centrally so that they do not need to be defined in every file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#constant-interpolated-strings"&gt;Constant interpolated strings&lt;/a&gt; which allows interpolated strings to be able to be declared constant where possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#extended-property-patterns"&gt;Extended property patterns&lt;/a&gt; which simplifies the use of nested properties in pattern matching statements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#lambda-improvements"&gt;Lambda improvements&lt;/a&gt; which include the ability for attributes to be defined on lambdas, ability to use var when defining lambdas, and the ability to specify the return type of a lambda.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#caller-argument-expression"&gt;Caller argument expression&lt;/a&gt; which adds a new attribute to help identify expression information at compile time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#record-structs"&gt;Record structs&lt;/a&gt; which evolves the C# 9.0 record class reference-type to add a new record struct value-type to manipulate small records efficiently.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#incremental-generators"&gt;Incremental generators&lt;/a&gt; which takes source code generators to the next level allowing for generation of not just source code. It also allows for improved generation performance.  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#improved-definite-assignment-analysis"&gt;Improved definite assignment analysis&lt;/a&gt; which fixes a few obscure cases where the compiler would complain that a variable had not been initialised.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#file-scoped-namespace-declarations"&gt;
  &lt;/a&gt;
  File scoped namespace declarations
&lt;/h1&gt;

&lt;p&gt;Instead of ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;WhatsNew10&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;... you can dispense with the top level braces by declaring the namespace using the following ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;WhatsNew10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#global-using-directives"&gt;
  &lt;/a&gt;
  Global using directives
&lt;/h1&gt;

&lt;p&gt;The using directive imports all types from the specified namespace.&lt;/p&gt;

&lt;p&gt;Adding the keyword "global" to the directive in any code file will import those namespace types and make the types available to all code in the project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Implicit global using directives are also created by the compiler depending on the .NET 6.0 project SDK type. The implicit usings for 2 of the major project types are shown below ...&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
  &lt;tr&gt;
    &lt;th&gt;Project SDK Type&lt;/th&gt;
    &lt;th&gt;Implicit Global Usings&lt;/th&gt;
  &lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
  &lt;tr&gt;
    &lt;td rowspan="7"&gt;Microsoft.NET.Sdk&lt;/td&gt;
    &lt;td&gt;System&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;System&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;System.IO&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;System.Net.Linq&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;System.Net.Http&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;System.Threading&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;System.Threading.Tasks&lt;/td&gt;&lt;/tr&gt;

  &lt;tr&gt;
    &lt;td rowspan="10"&gt;Microsoft.NET.Sdk.Web&lt;/td&gt;
    &lt;td&gt;System&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;System.Net.Http.Json&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Microsoft.AspNetCore.Builder&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Microsoft.AspNetCore.Hosting&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Microsoft.AspNetCore.Http&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Microsoft.AspNetCore.Routing&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Microsoft.Extensions.Configuration&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Microsoft.Extensions.DependencyInjection&lt;/td&gt;&lt;/tr&gt; 
  &lt;tr&gt;&lt;td&gt;Microsoft.Extensions.Hosting&lt;/td&gt;&lt;/tr&gt; 
  &lt;tr&gt;&lt;td&gt;Microsoft.Extensions.Logging&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;So together with the C# 9.0 &lt;a href="https://github.com/dotnet/csharplang/blob/main/proposals/csharp-9.0/top-level-statements.md"&gt;Top Level Statements&lt;/a&gt; feature, the complete code file for a Program.cs can look like this ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!);
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#constant-interpolated-strings"&gt;
  &lt;/a&gt;
  Constant interpolated strings
&lt;/h1&gt;

&lt;p&gt;The following use of the constant keyword is now permitted for interpolated strings where previously a compile error would be generated ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;$"Hello world"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s3&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;$"&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt; C#10"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#extended-property-patterns"&gt;
  &lt;/a&gt;
  Extended property patterns
&lt;/h1&gt;

&lt;p&gt;Consider the following ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;aa&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Property1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"foo"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Property2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aa&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Property1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;Property2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To use pattern matching on an instance of B you previously had to ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;isFoo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt; &lt;span class="k"&gt;switch&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Property2&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Property1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;... but you can do this more simply now by ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt; &lt;span class="k"&gt;switch&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Property2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Property1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"foo"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#lambda-improvements"&gt;
  &lt;/a&gt;
  Lambda improvements
&lt;/h1&gt;

&lt;p&gt;Automatic inference of the type of a lambda is a nice simplification introduced in C# 10.0.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;Func&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;isFooInC9&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ss&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ss&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// C# 9.0&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;isFooIn10&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;ss&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ss&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="c1"&gt;// C# 10.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lambdas can also have attributes defined on them so instead of ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;HttpGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt; &lt;span class="nf"&gt;GetFoo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Name"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapAction&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;Func&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;&lt;span class="n"&gt;GetFoo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;... you can now write ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapAction&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nf"&gt;HttpGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Name"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The return type of a lambda can also now be explicitly specified ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="c1"&gt;// foo is type Func&amp;lt;Int32&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// bar is type Func&amp;lt;Int64&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are a few other improvements including direct lambda invocation and enhanced overload resolution that can be reviewed in the &lt;a href="https://github.com/dotnet/csharplang/blob/main/proposals/csharp-10.0/lambda-improvements.md"&gt;proposal for lambda improvements&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#caller-argument-expression"&gt;
  &lt;/a&gt;
  Caller Argument Expression
&lt;/h1&gt;

&lt;p&gt;You can now get an expression as a string by ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Writes "(1 == 2 ? true : false) is False" to the console.&lt;/span&gt;
&lt;span class="nf"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; 

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;CallerArgumentExpression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"result"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"(&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;) is &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#record-structs"&gt;
  &lt;/a&gt;
  Record Structs
&lt;/h1&gt;

&lt;p&gt;Record classes introduced in C# 9.0 are useful because it makes it easier to create immutable objects that are thread-safe (by using the init keyword instead of the set keyword). Record classes are also helpful because the compiler creates some nice value-like built-in methods like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;equality operators, &lt;/li&gt;
&lt;li&gt;a numeric hash code based on the property values (so you can use the record in a hash-based collections for fast look-ups), and &lt;/li&gt;
&lt;li&gt;a way to convert the values of the record properties to a string.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Record structs also provide those compiler generated record built-ins (unlike plain structs which only generate getters and setters). Record classes, however, are reference types so instances of the type are allocated within the heap. Record structs, on the other hand, are value types so they are allocated on the stack. This means record structs can be manipulated efficiently. &lt;/p&gt;

&lt;p&gt;So now we can create an immutable record struct in one nice line of code ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Fiz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Faz&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;... and use it ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;foo1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Fiz&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Fizzy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Faz&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Fazzy"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;foo2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Fiz&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Fizzy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Faz&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Fazzy"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;foo3&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;foo1&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Faz&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Zazzy"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;foo1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Foo { Fiz = Fizzy, Faz = Fazzy }&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;foo2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Foo { Fiz = Fizzy, Faz = Fazzy }&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;foo3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Foo { Fiz = Fizzy, Faz = Zazzy }&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;foo1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetHashCode&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 129686175&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;foo2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetHashCode&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 129686175&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;foo3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetHashCode&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 784730341&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="n"&gt;foo1&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;foo2&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// True&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="n"&gt;foo1&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;foo3&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#incremental-generators"&gt;
  &lt;/a&gt;
  Incremental generators
&lt;/h1&gt;

&lt;p&gt;Source generators were introduced in .NET 5 which lets ...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;C# developers inspect user code and generate new C# source files that can be added to a compilation. This is done via a new kind of component that we’re calling a Source Generator. (&lt;a href="https://devblogs.microsoft.com/dotnet/introducing-c-source-generators/"&gt;Introducing C# Source Generators&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Incremental generators are a new feature that allows for the generation of source code, artefacts and embedded files. Pipelines can be implemented that use cached data to perform further transformations thereby improving performance. &lt;/p&gt;

&lt;p&gt;I admit I don't fully understand how to use this feature and I will be looking forward to .NET Conf for some simple explanations and examples.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#improved-definite-assignment-analysis"&gt;
  &lt;/a&gt;
  Improved definite assignment analysis
&lt;/h1&gt;

&lt;p&gt;Definite assignment analysis is the static analysis done by the compiler to ensure that variables are assigned before they are used. C and C++ don't have this feature although Java does.&lt;/p&gt;

&lt;p&gt;There were a few interesting cases that previously gave an error and are now okay with C# 10.0. The cases are obscure but if you are really interested, you can &lt;a href="https://github.com/dotnet/csharplang/blob/main/proposals/csharp-10.0/improved-definite-assignment.md"&gt;delve into the cases&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;So there have been some nice simplifications proposed for C# 10.0. They are continuing to evolve features such as pattern matching and records in response to developer feedback which I think is good to see. C# might even survive another 20 years!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=JOdGFLNDbBs"&gt;Chat with Mads Torgersen who has worked on the language for over 16 years&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/csharplang/blob/main/Language-Version-History.md"&gt;Features added in C# language versions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>csharp</category>
    </item>
    <item>
      <title>vscode editor on browser for github repo</title>
      <author>aakas</author>
      <pubDate>Sat, 06 Nov 2021 03:35:36 +0000</pubDate>
      <link>https://dev.to/aakas/vscode-editor-on-browser-for-github-repo-f3a</link>
      <guid>https://dev.to/aakas/vscode-editor-on-browser-for-github-repo-f3a</guid>
      <description>&lt;p&gt;Today I learned about the on browser vscode editor for github repo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So all you have to do is search for a github repo, and press a "." key in your keyboard.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Voila! you will get a vscode editor on your browser.&lt;/p&gt;

&lt;p&gt;I am totally amused and excited to find this trick.&lt;br&gt;
I believe it will be totally useful for many developers out there.&lt;/p&gt;

</description>
      <category>github</category>
      <category>vscode</category>
    </item>
    <item>
      <title>40+ Projects You Can Do to Become a Front-End Master [Beginners - Advance]</title>
      <author>Jason</author>
      <pubDate>Sat, 06 Nov 2021 03:26:30 +0000</pubDate>
      <link>https://dev.to/jasonsz/40-projects-you-can-do-to-become-a-front-end-master-beginners-advance-1m7n</link>
      <guid>https://dev.to/jasonsz/40-projects-you-can-do-to-become-a-front-end-master-beginners-advance-1m7n</guid>
      <description>&lt;p&gt;&lt;span&gt;If you are a developer or just getting started with the process, then you must already be aware of how important the role of &lt;/span&gt;&lt;span&gt;developing live projects&lt;/span&gt;&lt;span&gt; are. It will not only improve your coding skills but will also help you develop a passion for it. You can start by taking up online tutorials to learn a skill or two, but it must lead to starting to build the programs eventually.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/9-projects-you-can-do-to-become-a-front-end-master/&amp;amp;ved=2ahUKEwilofe-rvjzAhVGbysKHR-RCv4QFnoECAUQAQ&amp;amp;usg=AOvVaw2t7-_QAPDVzRhEVlb4h7WW"&gt;40+ Projects You Can Do to Become a Front-End Master [Beginners - Advance]&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Use Static Analysis tools to my Static Site Generator</title>
      <author>MizuhoOkimoto</author>
      <pubDate>Sat, 06 Nov 2021 03:16:58 +0000</pubDate>
      <link>https://dev.to/okimotomizuho/use-static-analysis-tools-to-my-static-site-generator-7bj</link>
      <guid>https://dev.to/okimotomizuho/use-static-analysis-tools-to-my-static-site-generator-7bj</guid>
      <description>&lt;p&gt;Static analysis tools help maintain the quality of your source code by fixing formatting issues, finding suspicious coding structures, and alerting you to common errors.&lt;br&gt;
I added &lt;a href="https://prettier.io/"&gt;Prettier&lt;/a&gt; and &lt;a href="https://eslint.org/"&gt;ESLint&lt;/a&gt; to my Static Site Generator(SSG) using JavaScript, so I would like to show how I implemented them step by step.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#oneadd-a-source-code-formatter-prettier"&gt;
  &lt;/a&gt;
  1️⃣Add a Source Code Formatter: Prettier
&lt;/h2&gt;

&lt;p&gt;Prettier is one of the tools for applying a consistent code style throughout your code base.&lt;br&gt;
First of all, I set it up as follows using npm.&lt;br&gt;
&lt;code&gt;npm install --save-dev --save-exact prettier&lt;/code&gt;&lt;br&gt;
Second, I created a prettierignore file directly under the project and added the following files that do not need to be formatted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Ignore artifacts:
build
coverage
node_modules
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I also created prettierrc.json file and added a Basic Configuration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "trailingComma": "es5",
  "tabWidth": 4,
  "semi": false,
  "singleQuote": true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Third, I added the following script inside my package.json so that Prettier can be executed in one step from the command line.&lt;br&gt;
&lt;code&gt;"prettier": "npx prettier --write ."&lt;/code&gt; &lt;br&gt;
Finally, I ran Prettier with &lt;code&gt;npm run prettier&lt;/code&gt;, and it fixed my format based on the configurations above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; node-ssg@1.0.0 prettier
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; npx prettier &lt;span class="nt"&gt;--write&lt;/span&gt; &lt;span class="nb"&gt;.&lt;/span&gt;
dist&lt;span class="se"&gt;\t&lt;/span&gt;est.html 137ms
doc&lt;span class="se"&gt;\t&lt;/span&gt;est.md 84ms
index.html 471ms
package-lock.json 172ms
package.json 17ms
pajama-ssg.js 271ms
README.md 101ms
tempGenerator.js 11ms
yargsConfig.js 17ms
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After I checked if my program still worked, and it was perfect! Yay!😇&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#twoadd-a-linter-eslist"&gt;
  &lt;/a&gt;
  2️⃣Add a Linter: ESList
&lt;/h2&gt;

&lt;p&gt;ESLint aims to improve code consistency and avoid bugs. Open Source projects can involve multiple people in a project so it's a very useful tool.&lt;br&gt;
Again, I started with the installation with npm.&lt;br&gt;
&lt;code&gt;npm install eslint --save-dev&lt;/code&gt;&lt;br&gt;
Next, I set the configuration file using the --init flag(&lt;code&gt;npx eslint --init&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;PS C:&lt;span class="se"&gt;\U&lt;/span&gt;sers&lt;span class="se"&gt;\M&lt;/span&gt;izuho&lt;span class="se"&gt;\D&lt;/span&gt;esktop&lt;span class="se"&gt;\O&lt;/span&gt;SD600&lt;span class="se"&gt;\p&lt;/span&gt;ajama-ssg&amp;gt; npx eslint &lt;span class="nt"&gt;--init&lt;/span&gt;
√ How would you like to use ESLint? · problems
√ What &lt;span class="nb"&gt;type &lt;/span&gt;of modules does your project use? · esm
√ Which framework does your project use? · none
√ Where does your code run? · browser
√ What format &lt;span class="k"&gt;do &lt;/span&gt;you want your config file to be &lt;span class="k"&gt;in&lt;/span&gt;? · JavaScript
Successfully created .eslintrc.js file &lt;span class="k"&gt;in &lt;/span&gt;C:&lt;span class="se"&gt;\U&lt;/span&gt;sers&lt;span class="se"&gt;\M&lt;/span&gt;izuho&lt;span class="se"&gt;\D&lt;/span&gt;esktop&lt;span class="se"&gt;\O&lt;/span&gt;SD600&lt;span class="se"&gt;\p&lt;/span&gt;ajama-ssg
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From  --init flag, it created .eslintrc.js file for me with the code below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;commonjs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;es2021&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;extends&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eslint:recommended&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;parserOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;ecmaVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I added this &lt;code&gt;"semi": ["error", "always"]&lt;/code&gt; inside the &lt;code&gt;rules&lt;/code&gt; to enforce consistent use of semicolons.&lt;/p&gt;

&lt;p&gt;Like Prettier, by creating .eslintignore file in the root directory, I instructed ESLint to ignore certain files and directories.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Ignore the build directories for next
build
coverage
package.json
package-lock
node_modules
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And I added the following to the package.json file to easily run ESLint from the command line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"eslint": "eslint --config .eslintrc.js",
"lint": "npm run eslint",
"eslint-fix": "eslint --config .eslintrc.js --fix"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I used the above options based on the official site, and a lecture by my professor. &lt;br&gt;
&lt;code&gt;--f&lt;/code&gt;: "This option instructs ESLint to try to fix as many issues as possible. The fixes are made to the actual files themselves and only the remaining unfixed issues are output."&lt;br&gt;
&lt;code&gt;-c, --config&lt;/code&gt;: "This option allows you to specify an additional configuration file for ESLint (see Configuring ESLint for more)." There are many other options on the official site: &lt;a href="https://eslint.org/docs/user-guide/command-line-interface"&gt;https://eslint.org/docs/user-guide/command-line-interface&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I ran ESLint &lt;code&gt;npx eslint .&lt;/code&gt;, and I got many errors...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;   19:11  error  &lt;span class="s1"&gt;'removeDir'&lt;/span&gt; is not defined  no-undef
   49:5   error  &lt;span class="s1"&gt;'process'&lt;/span&gt; is not defined    no-undef
   64:5   error  &lt;span class="s1"&gt;'files'&lt;/span&gt; is not defined      no-undef
   89:17  error  &lt;span class="s1"&gt;'process'&lt;/span&gt; is not defined    no-undef
   97:13  error  &lt;span class="s1"&gt;'lines'&lt;/span&gt; is already defined  no-redeclare
   98:13  error  &lt;span class="s1"&gt;'title'&lt;/span&gt; is already defined  no-redeclare
    ...
   2:18  error  &lt;span class="s1"&gt;'tempGenerate'&lt;/span&gt; is not defined  no-undef
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I didn't notice that I already declared 'lines' and 'title', so I deleted &lt;code&gt;var&lt;/code&gt; for the error.&lt;br&gt;
I added &lt;code&gt;/* global process, files process */&lt;/code&gt; on top of the main JavaScript file. However, 'removeDir' became an error and my program had an error and couldn't run.&lt;br&gt;
I've searched everywhere to fix the problem and I decided to add this instead &lt;code&gt;/* eslint-disable no-undef */&lt;/code&gt;, and it ran without errors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#threeeditor-integration-adding-vscode-folder"&gt;
  &lt;/a&gt;
  3️⃣Editor Integration: adding .vscode folder
&lt;/h2&gt;

&lt;p&gt;I created a .vscode folder that shares settings, task configurations, and debug configurations and integrates tools with the Visual Studio Code. I stored extensions.json and settings.json in it. In extensions.json, I added extensions inside the  Recommendation and added user and workspace settings to settings.json.(my .vscode folder&lt;a href="https://github.com/MizuhoOkimoto/pajama-ssg/tree/main/.vscode"&gt;https://github.com/MizuhoOkimoto/pajama-ssg/tree/main/.vscode&lt;/a&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fouradd-a-cintributingmd-and-update-readmemd"&gt;
  &lt;/a&gt;
  4️⃣Add a CINTRIBUTING.md and Update README.md
&lt;/h2&gt;

&lt;p&gt;For future contributors, I added a CONTRIBUTING.md file and updated README.md file as well. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fivesquash-commit-merge-push"&gt;
  &lt;/a&gt;
  5️⃣Squash, Commit, Merge, Push
&lt;/h2&gt;

&lt;p&gt;I checked if my project still worked and pushed it. However, I was working on this project after I finished 3 jobs and it was very late. My brain didn't work properly and I made mistakes again when I rebase and I even lost my changes 🙉 I have decided to watch some lectures again and check the documents as well. Phew... I had to make other commits and squash, but I could implement tools and configurations!😇&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whitecheckmarkconclusion"&gt;
  &lt;/a&gt;
  ✅Conclusion
&lt;/h2&gt;

&lt;p&gt;I installed Prettier and ESLint as a extension on my Visual Studio Code, but I didn't know how they work or how to use/share them with other people. I'm really enjoying to keep my project updated. I would like to add huskey(Git Pre-Commit Hook) too, at some point! &lt;/p&gt;

&lt;p&gt;Links🔗&lt;br&gt;
&lt;a href="https://github.com/MizuhoOkimoto/pajama-ssg"&gt;Pajama-ssg&lt;/a&gt; | &lt;a href="https://prettier.io/"&gt;Prettier&lt;/a&gt; | &lt;a href="https://eslint.org/"&gt;ESLint&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.toConfiguring%20ESLint"&gt;Configuring ESLint&lt;/a&gt; | &lt;a href="https://code.visualstudio.com/docs/getstarted/settings"&gt;VSC:User and Workspace Settings&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Photo by Dan-Cristian Pădureț on Unsplash)&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>javascript</category>
      <category>git</category>
      <category>vscode</category>
    </item>
    <item>
      <title>Introduction to Github.dev</title>
      <author>capscode</author>
      <pubDate>Sat, 06 Nov 2021 02:40:14 +0000</pubDate>
      <link>https://dev.to/capscode/introduction-to-githubdev-24al</link>
      <guid>https://dev.to/capscode/introduction-to-githubdev-24al</guid>
      <description>&lt;p&gt;Hello Devs,&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#have-you-tried-githubdev-"&gt;
  &lt;/a&gt;
  Have you tried github.dev ?
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;yes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;let me know&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;give it a try&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#so-whats-githubdev-"&gt;
  &lt;/a&gt;
  So, whats github.dev ?
&lt;/h3&gt;

&lt;p&gt;it is basically a online vs code editor for your github repos and its really amazing and fast.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-access-it-"&gt;
  &lt;/a&gt;
  How to access it ?
&lt;/h3&gt;

&lt;p&gt;Just open any of your repo and replace github.com with github.dev and that it, now you can able to edit your code and commit your code in online VS code.&lt;/p&gt;

&lt;p&gt;lets discuss the shortcut to open VS code directly from your github repo,&lt;br&gt;
open any of your github repo and press dot (.) from your keyboard and here you go.&lt;/p&gt;

&lt;p&gt;Below is a demo, do checkout this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r-ktlorF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nmr1mnmefik2b0dri0qq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r-ktlorF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nmr1mnmefik2b0dri0qq.gif" alt="demo" width="" height=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope its a nice and informative read for you.&lt;br&gt;
VISIT &lt;a href="https://www.capscode.in/blog"&gt;https://www.capscode.in/blog&lt;/a&gt; TO LEARN MORE...&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br&gt;
CapsCode&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>github</category>
      <category>devops</category>
      <category>javascript</category>
    </item>
    <item>
      <title>50+ JavaScript Projects for Beginners – Easy Ideas to Get Started Coding JS [Beginners - Advance] (Updated)</title>
      <author>Jason</author>
      <pubDate>Sat, 06 Nov 2021 02:18:18 +0000</pubDate>
      <link>https://dev.to/jasonsz/50-javascript-projects-for-beginners-easy-ideas-to-get-started-coding-js-beginners-advance-updated-4n9h</link>
      <guid>https://dev.to/jasonsz/50-javascript-projects-for-beginners-easy-ideas-to-get-started-coding-js-beginners-advance-updated-4n9h</guid>
      <description>&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;The best way to learn a new programming language is to build projects.

I have created a list of 40 beginner friendly project tutorials in Vanilla JavaScript, React, and TypeScript.

My advice for tutorials would be to watch the video, build the project, break it apart and rebuild it your own way. Experiment with adding new features or using different methods.

That will test if you have really learned the concepts or not.

You can click on any of the projects listed below to jump to that section of the article.

&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/40-javascript-projects-for-beginners/&amp;amp;ved=2ahUKEwiB9tj0rPjyAhUMX30KHZQ5CG0QFnoECAgQAQ&amp;amp;usg=AOvVaw26RDQjHugdhbATVS83LI83"&gt;50+ JavaScript Projects for Beginners – Easy Ideas to Get Started Coding JS

&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>50+ Nodejs Projects for Beginners – Easy Ideas to Get Started Coding Nodejs [Beginners - Advance] </title>
      <author>Jason</author>
      <pubDate>Sat, 06 Nov 2021 01:54:47 +0000</pubDate>
      <link>https://dev.to/jasonsz/50-nodejs-projects-for-beginners-easy-ideas-to-get-started-coding-nodejs-beginners-advance-31ce</link>
      <guid>https://dev.to/jasonsz/50-nodejs-projects-for-beginners-easy-ideas-to-get-started-coding-nodejs-beginners-advance-31ce</guid>
      <description>&lt;p&gt;If you have decided to build your career in &lt;span&gt;NodeJS &lt;/span&gt;development, we have gathered a list of &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; for all node enthusiasts to build highly scalable &lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/nodejs-project-for-beginners/&amp;amp;ved=2ahUKEwiOlt_I6e7zAhXXb30KHRuwBEIQFnoECAUQAQ&amp;amp;usg=AOvVaw1LC_Y25wyupI6_tdH89kg1" rel="noreferrer noopener"&gt;web applications&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These best &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; will help you gain knowledge about core node concepts, train your skill level, build a superb work portfolio, and get hired for your dream job.&lt;/p&gt;
&lt;p&gt;When you start building your first projects, it’s highly recommended for beginners in coding to create a repository for each of your projects so you will be able to learn &lt;em&gt;git&lt;/em&gt; and show your coding expertise to future employers. &lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/nodejs-project-for-beginners/&amp;amp;ved=2ahUKEwiOlt_I6e7zAhXXb30KHRuwBEIQFnoECAUQAQ&amp;amp;usg=AOvVaw1LC_Y25wyupI6_tdH89kg1"&gt;50+ Nodejs Projects for Beginners – Easy Ideas to Get Started Coding Nodejs &lt;/a&gt;&lt;/b&gt; &lt;/p&gt;






</description>
    </item>
    <item>
      <title>40+ ReactJS Projects for Beginners – Easy Ideas to Get Started Coding [Beginners - Advance] </title>
      <author>Jason</author>
      <pubDate>Sat, 06 Nov 2021 01:52:50 +0000</pubDate>
      <link>https://dev.to/jasonsz/40-reactjs-projects-for-beginners-easy-ideas-to-get-started-coding-beginners-advance-33mm</link>
      <guid>https://dev.to/jasonsz/40-reactjs-projects-for-beginners-easy-ideas-to-get-started-coding-beginners-advance-33mm</guid>
      <description>&lt;p&gt;If you have decided to build your career in &lt;span&gt;ReactJS &lt;/span&gt;development, we have gathered a list of &lt;span&gt;reactJS projects for beginners&lt;/span&gt; for all react enthusiasts to build highly scalable &lt;a rel="noreferrer noopener"&gt;web applications&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These best &lt;span&gt;ReactJS projects for beginners&lt;/span&gt; will help you gain knowledge about core react concepts, train your skill level, build a superb work portfolio, and get hired for your dream job.&lt;/p&gt;
&lt;p&gt;When you start building your first projects, it’s highly recommended for beginners in coding to create a repository for each of your projects so you will be able to learn &lt;em&gt;git&lt;/em&gt; and show your coding expertise to future employers. &lt;/p&gt;
&lt;p&gt;Read More : &lt;b&gt;&lt;a href="https://www.codelivly.com/best-reactjs-projects-for-beginners/"&gt;40+ ReactJS Projects for Beginners – Easy Ideas to Get Started Coding&lt;/a&gt;&lt;/b&gt;  &lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to Add Custom Filters to Administrate Dashboards</title>
      <author>Nicholas Dill</author>
      <pubDate>Sat, 06 Nov 2021 01:46:40 +0000</pubDate>
      <link>https://dev.to/nicholasdill/how-to-add-custom-filters-to-administrate-dashboards-2gj6</link>
      <guid>https://dev.to/nicholasdill/how-to-add-custom-filters-to-administrate-dashboards-2gj6</guid>
      <description>&lt;p&gt;Administrate is one of my favorites Rails gems. &lt;/p&gt;

&lt;p&gt;It gives you a CRUD interface for your entire database in seconds.&lt;/p&gt;

&lt;p&gt;This means any admin user can log in and get access to our database records from the browser. They can create, read, update, or delete data without having to write any code, scripts, or SQL. (Don't worry you can limit which tables can be updated or deleted too.)&lt;/p&gt;

&lt;p&gt;One problem is Administrate doesn't come with any kind of filtering and it can be hard to find specific records or records that meet certain conditions. You can sort columns alphabetically but when you have large sets of data this really doesn't help much.&lt;/p&gt;

&lt;p&gt;There are a couple steps needed to add our own custom filters on top of Administrate, but its just a few new lines of code in a few places and I'll dive deep into why and how it works.&lt;/p&gt;

&lt;p&gt;If you want to skip the explanation and just want the code, &lt;a href="#solution"&gt;it's right here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-we-will-cover"&gt;
  &lt;/a&gt;
  What We Will Cover
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#filters"&gt;How to apply custom filters to our Administrate data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#session"&gt;Storing filters in the user's session&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#query-params"&gt;Passing query parameters to update the user's session&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#applying-filters"&gt;Display the Administrate view using the current filters&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a id="filters"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-filter-records-in-administrate"&gt;
  &lt;/a&gt;
  How to Filter Records in Administrate
&lt;/h2&gt;

&lt;p&gt;When we land on an Administrate page, the request is routed to an admin controller. &lt;/p&gt;

&lt;p&gt;Just like any other Rails controller, our admin controller is responsible for querying the database and passing this data to the view to render it on the page.&lt;/p&gt;

&lt;p&gt;Administrate gives us a method called &lt;code&gt;scoped_resource&lt;/code&gt;. This method pulls our data from the database and we can add additional conditions to filter out data or organize it in a different way. This method allows us to filter our query any way we like.&lt;/p&gt;

&lt;p&gt;Inside this method we see a variable called &lt;code&gt;resource_class&lt;/code&gt;. This is inferred from the controller you are looking at. For example, the Admin::UsersController references your User model so the &lt;code&gt;resource_class&lt;/code&gt; would evaluate to &lt;code&gt;Users.all&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Our solution will add a few lines of logic to this method so that we can filter our Administrate views based on variables that we set in the current user's session. &lt;/p&gt;

&lt;p&gt;If you aren't familiar with how session storage works within Rails, fear not. We'll jump into this next.&lt;/p&gt;

&lt;p&gt;Plus you can copy the code below and change it for your specific use case and it should work out of the box.&lt;/p&gt;

&lt;p&gt;Here's an example of the &lt;code&gt;scoped_resource&lt;/code&gt; method you will override in the controller.&lt;/p&gt;

&lt;p&gt;This example returns a query result that applies different filters based on the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;scoped_resource&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;super_admin?&lt;/span&gt;
    &lt;span class="n"&gt;resource_class&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="n"&gt;resource_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;private: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code we are saying if you are logged in as a super admin, Administrate should return all records. &lt;/p&gt;

&lt;p&gt;BUT if you aren't, only return records where the &lt;code&gt;private: false&lt;/code&gt; condition is met. &lt;/p&gt;

&lt;p&gt;In this example we're assuming the resource has a field called private and any records marked private are only viewable to super admin users.&lt;/p&gt;

&lt;p&gt;This is how you can apply filters to Administrate views. Add your desired conditions to this method and we will exclude any records that don't match.&lt;/p&gt;

&lt;p&gt;&lt;a id="session"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#storing-filters-in-the-users-session"&gt;
  &lt;/a&gt;
  Storing Filters in the User's Session
&lt;/h2&gt;

&lt;p&gt;The previous example above demonstrates how to filter records in Administrate, but it's not dynamic. Meaning we can't click a button to turn this filter on or off. It's just tied to whether or not we are a super admin. &lt;/p&gt;

&lt;p&gt;In order to let users toggle certain filters we need to store some kind of on/off state somewhere. &lt;/p&gt;

&lt;p&gt;This is what Rails session storage is really good at.&lt;/p&gt;

&lt;p&gt;The Rails session is kind of like a dictionary or hash that every visitor gets. We can store and modify variables specific to each user.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-use-session-variables"&gt;
  &lt;/a&gt;
  How to Use Session Variables
&lt;/h3&gt;

&lt;p&gt;We can update the data stored in a user's session by accessing the session hash and updating the entry for a certain key or attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:filter_published&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This would update the &lt;code&gt;filter_published&lt;/code&gt; entry and set it to true only for this user.&lt;/p&gt;

&lt;p&gt;Since session storage uses a hash, we read from this hash as we would any other normal hash. It should look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:filter_published&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last point I'll make here is that Rails session storage is a backend mechanism. In other words we have to hit the backend again or make an API call to update the user's session data.&lt;/p&gt;

&lt;p&gt;Let's wire up the frontend to set filters on the user's session on the backend.&lt;/p&gt;

&lt;p&gt;&lt;a id="query-params"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#passing-query-parameters-to-update-the-users-session"&gt;
  &lt;/a&gt;
  Passing Query Parameters to Update the User's Session
&lt;/h2&gt;

&lt;p&gt;For a quick recap, we can currently customize our Administrate views by modifying the query in the &lt;code&gt;scoped_resource&lt;/code&gt; method of our admin controller.&lt;/p&gt;

&lt;p&gt;We can also update the user's session to store and persist any custom filters that are enabled or disabled.&lt;/p&gt;

&lt;p&gt;Now we need to tell the backend which of our filters we want to toggle so we can make the expected change in the user's session.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#query-parameter-basics"&gt;
  &lt;/a&gt;
  Query Parameter Basics
&lt;/h3&gt;

&lt;p&gt;Query Parameters are the extra attributes added at the end of a URL. You have probably seen a link resembling something like &lt;code&gt;https://testsuite.io/send-emails-from-rails?ref=testsuite&amp;amp;view=focused&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That link will route you to &lt;code&gt;https://testsuite.io/send-emails-from-rails&lt;/code&gt; but it also adds &lt;code&gt;?ref=testsuite&amp;amp;filter=true&lt;/code&gt;. The latter portion contains the query parameters.&lt;/p&gt;

&lt;p&gt;This tells the server to render the expected page but to take into account the &lt;code&gt;ref=testsuite&lt;/code&gt; and &lt;code&gt;filter=true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can follow the same approach to pass our desired filters to Administrate so that we can customize our Administrate views.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-pass-query-parameters"&gt;
  &lt;/a&gt;
  How to Pass Query Parameters
&lt;/h3&gt;

&lt;p&gt;First, we need a link that appends our desired query parameters. &lt;/p&gt;

&lt;p&gt;If we use a Rails &lt;code&gt;link_to&lt;/code&gt; helper method it could look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Published Filter'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;admin_blog_posts_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;published: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="s1"&gt;'admin-filter'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will generate a link with the text "Published Filter".&lt;br&gt;
The link will point to the &lt;code&gt;admin_blog_posts_path&lt;/code&gt; which evaluates to &lt;code&gt;/admin/blog_posts&lt;/code&gt;.&lt;br&gt;
Our route helper, the &lt;code&gt;admin_blog_posts_path(published: true)&lt;/code&gt; also passes the &lt;code&gt;published: true&lt;/code&gt; key/value pair - those are the query parameters!&lt;/p&gt;

&lt;p&gt;The resulting HTML would look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/admin/blog_posts?published=true"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"admin--filter"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Published Filter
&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now we have a link that we can click to view our blog posts (or whatever model you desire to add custom filters to in Administrate).&lt;/p&gt;

&lt;p&gt;If we want to allow multiple types of filters or add buttons to apply custom ordering, we can add more buttons that pass different query parameters.&lt;/p&gt;

&lt;p&gt;&lt;a id="applying-filters"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#display-the-administrate-view-using-the-current-filters"&gt;
  &lt;/a&gt;
  Display the Administrate view using the current filters
&lt;/h2&gt;

&lt;p&gt;Now that we are passing our query parameters to the backend, our controller can save our filters in the user's session.&lt;/p&gt;

&lt;p&gt;In the admin controller that we are filtering, we need to save our query parameters in the user's session storage. It is as easy as updating the session hash with the desired key and value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:published&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:published&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:published&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;blank?&lt;/span&gt;
&lt;span class="c1"&gt;# Save the published filter to the user's session if it was passed as a query parameter&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use the same strategy to clear and erase our current filters too:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:published&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:clear&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# Erase and reset our filter if we pass the clear=true query parameter&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now everything should be wired correctly and we can get back to the &lt;code&gt;scoped_resource&lt;/code&gt; method. This is were it all started and now we have the buttons and session storage setup to persist any filters that we want to set.&lt;/p&gt;

&lt;p&gt;To apply a custom filter on our Administrate view, we need to check if we saved a value in the user's session storage.&lt;/p&gt;

&lt;p&gt;The below example shows how to check the session storage, and modify the &lt;code&gt;resource_class&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;scoped_resource&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:published&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;resource_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;published: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="n"&gt;resource_class&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We look up the published attribute in the user's session storage and if &lt;code&gt;session[:published]&lt;/code&gt; evaluates to true, then we apply the &lt;code&gt;.where(published: true)&lt;/code&gt; condition to our database query. Otherwise, we pull the data normally and nothing is filtered.&lt;/p&gt;

&lt;p&gt;&lt;a id="solution"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#final-solution"&gt;
  &lt;/a&gt;
  Final Solution
&lt;/h2&gt;

&lt;p&gt;Here's all the code without diving into explanations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-add-buttons-to-your-administrate-view-that-append-the-desired-filters-as-query-parameters"&gt;
  &lt;/a&gt;
  1. Add buttons to your Administrate view that append the desired filters as query parameters
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Published'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;admin_blog_posts_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;published: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="s1"&gt;'admin--filter'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Clear Filters'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;admin_blog_posts_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;clear: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="s1"&gt;'admin--filter'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-save-the-query-parameters-to-the-users-session"&gt;
  &lt;/a&gt;
  2. Save the query parameters to the user's session
&lt;/h3&gt;

&lt;p&gt;This code can live in the admin controller that you are calling. Be sure to call it before &lt;code&gt;scoped_resource&lt;/code&gt; so that we update the session before we apply any filters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:published&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:clear&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# Erase and reset our filter if we pass the clear=true query parameter&lt;/span&gt;

&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:published&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:published&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:published&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;blank?&lt;/span&gt;
&lt;span class="c1"&gt;# Save the published filter to the user's session if it was passed as a query parameter&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-apply-the-filters-to-the-raw-scopedresource-endraw-method"&gt;
  &lt;/a&gt;
  3. Apply the filters to the &lt;code&gt;scoped_resource&lt;/code&gt; method
&lt;/h3&gt;

&lt;p&gt;Inside of our &lt;code&gt;scoped_resource&lt;/code&gt; method, we can check for any filters we saved in our session and apply them to our query.&lt;/p&gt;

&lt;p&gt;This will apply a custom filter on our Administrate view and only show us resources that have their published field set to true.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;scoped_resource&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:published&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;resource_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;published: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="n"&gt;resource_class&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#optional-style-buttons"&gt;
  &lt;/a&gt;
  Optional: Style buttons
&lt;/h2&gt;

&lt;p&gt;Typically Administrate interfaces are only used by your internal team. &lt;/p&gt;

&lt;p&gt;It's intended for administrative users so the design might not be a high priority, but you can make your filter buttons look good with just a few lines of CSS. Here's a class you can paste into your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
  &lt;span class="nc"&gt;.admin--filter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f3f6f9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your Administrate controller isn't going to import your stylesheet by default since it doesn't extend your normal page layout in &lt;code&gt;views/layouts/application.html.erb&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;This layout is typically imported by all your other views and sets up basic things like your meta tags, font imports, and your CSS stylesheets. But since Administrate doesn't extend your &lt;code&gt;application_controller.html.erb&lt;/code&gt; it also doesn't inherit this layout. So your normal fonts and styles won't be accessible on any of your Administrate views.&lt;/p&gt;

&lt;p&gt;A couple of ways around this are to either explicitly add this layout to your Administrate controllers, or to add these styles directly to your Administrate views.&lt;/p&gt;

&lt;p&gt;I find the approach with views faster and easier (granted perhaps not the best long-term solution).&lt;/p&gt;

&lt;p&gt;You have to override the default Administrate view anyway to add your filter buttons so sprinkling in a little bit of CSS in the same view isn't a big deal.&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
    </item>
  </channel>
</rss>
