<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>🆕 feature in the Luos release 2.0.0: embedded packages to simplify portability</title>
      <author>Emanuel Allely</author>
      <pubDate>Thu, 14 Oct 2021 08:02:42 +0000</pubDate>
      <link>https://dev.to/luos/feature-in-the-luos-release-200-embedded-packages-to-simplify-portability-3p1i</link>
      <guid>https://dev.to/luos/feature-in-the-luos-release-200-embedded-packages-to-simplify-portability-3p1i</guid>
      <description>&lt;p&gt;🆕 New feature in the Luos release 2.0.0: Packages to simplify portability&lt;/p&gt;

&lt;p&gt;Packages allow you to store your embedded code features on sharable folders. So you can move those easily from one project to another and share them with the community.&lt;/p&gt;

&lt;p&gt;We have big plans for this feature so keep in touch... &lt;a href="https://docs.luos.io/pages/luos-technology/package/package.html"&gt;more information about packages&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>embedded</category>
      <category>luos</category>
      <category>release</category>
    </item>
    <item>
      <title>10 Tools to measure Core Web Vitals</title>
      <author>Conti</author>
      <pubDate>Thu, 14 Oct 2021 07:23:28 +0000</pubDate>
      <link>https://dev.to/producthackers/10-tools-to-measure-core-web-vitals-2829</link>
      <guid>https://dev.to/producthackers/10-tools-to-measure-core-web-vitals-2829</guid>
      <description>&lt;p&gt;In May 2020 Google announced &lt;strong&gt;Core Web Vitals&lt;/strong&gt; as the center of how a web has to behave in front of a user, a lot has been written since then, a lot. The &lt;em&gt;3 vitals&lt;/em&gt; has been explained deeply all over the Internet, so I will not talk about them. Nowadays, the most important part of these metrics is how to measure and evaluate them in the most effective way, so which tools do we have at our hand to do that?&lt;/p&gt;

&lt;p&gt;Before that I want to make sure that you really understand the difference between two concepts, &lt;strong&gt;Field data&lt;/strong&gt; vs &lt;strong&gt;Lab data&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I am going to paste a very good explanation took from &lt;a href="https://developers.google.com/speed/docs/insights/v5/about"&gt;Page Speed Insights doc page&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The field data is a historical report about how a particular URL has performed, and represents anonymized performance data from users in the real-world on a variety of devices and network conditions. The lab data is based on a simulated load of a page on a single device and fixed set of network conditions. As a result, the values may differ.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So, &lt;strong&gt;Field data&lt;/strong&gt; is data tracked whenever a user visits our page, could it be from a super fast PC/Mac or a slow 2G/3G connection, which will offer very different metrics. It is very good to analyze real-world user experience issues&lt;/p&gt;

&lt;p&gt;And &lt;strong&gt;Lab data&lt;/strong&gt; is basically about having some computers at google datacenter executing Lighthouse on every page. It is good for debugging performance issues and capturing tips which need deeper study.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tools"&gt;
  &lt;/a&gt;
  Tools
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#in-browser-lighthouse"&gt;In browser Lighthouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lighthouse-cli"&gt;Lighthouse cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lhci"&gt;LHCI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#core-web-vitals-chrome-built-it-extension"&gt;Core Web Vitals Chrome built it extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#web-vitals-chrome-extension"&gt;Web Vitals Chrome extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chrome-dev-tools-performance"&gt;Chrome dev tools performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#page-speed-insights"&gt;Page Speed Insights&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#google-search-console"&gt;Google Search console&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#crux-dashboard"&gt;CrUX Dashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#webpagetest"&gt;Webpagetest&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#in-browser-lighthouse"&gt;
  &lt;/a&gt;
  In browser Lighthouse
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NMC-iY3J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ir2zujxqueos2cfe6h7l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NMC-iY3J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ir2zujxqueos2cfe6h7l.png" alt="In browser Lighthouse"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Local Lab data&lt;/strong&gt; on demand, but it is not really recommended since browser extensions have great negative impact on the report results.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lighthouse-cli"&gt;
  &lt;/a&gt;
  Lighthouse cli
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IRTDRmc2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/enu51cop8bk6o50fc995.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IRTDRmc2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/enu51cop8bk6o50fc995.png" alt="Lighthouse cli"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Local Lab data&lt;/strong&gt; on demand, and the only way I would recommend to execute &lt;strong&gt;Lighthouse&lt;/strong&gt;, since it uses a clean Chromium window to execute the test. Check it out &lt;a href="https://github.com/GoogleChrome/lighthouse"&gt;here&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lhci"&gt;
  &lt;/a&gt;
  LHCI
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uL0T56c0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/betvgo2b2x25jwodrf0x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uL0T56c0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/betvgo2b2x25jwodrf0x.png" alt="LHCI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lab data&lt;/strong&gt; on demand and unattended. This version of &lt;strong&gt;Lighthouse&lt;/strong&gt; is oriented to be integrated in a &lt;strong&gt;continuous integration&lt;/strong&gt; workflow to check your metrics before deploying to production. However, you could also use it as command executed in a &lt;strong&gt;cron&lt;/strong&gt; to check an environment performance over the time. I use the latter to check production performance each 12 hours, since there are third parties adding and removing dynamic content that could affect UX. Check its repo &lt;a href="https://github.com/GoogleChrome/lighthouse-ci"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#core-web-vitals-chrome-built-it-extension"&gt;
  &lt;/a&gt;
  Core Web Vitals Chrome built it extension
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z62HfDEy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fv6qd6gfc2f8703p085t.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z62HfDEy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fv6qd6gfc2f8703p085t.gif" alt="Core Web Vitals Chrome built it extension"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Local Field data&lt;/strong&gt; on demand, as a native extension of Chrome browser. Very useful to detect issues in real-time. Doing a Lighthouse report after viewing this, could give you insights to solve those issues. In order to show the overlay we have two options:&lt;br&gt;
a) &lt;code&gt;Open Dev tools -&amp;gt; use Run Command option -&amp;gt; type "Core web vitals"&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;b) Keyboard shortcuts: &lt;code&gt;CMD + Option + I -&amp;gt; CMD + SHIFT + P -&amp;gt; type "Core web vitals"&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web-vitals-chrome-extension"&gt;
  &lt;/a&gt;
  Web Vitals Chrome extension
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d8pPhVUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1qrcr97q6rpor188mkvo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d8pPhVUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1qrcr97q6rpor188mkvo.png" alt="Web Vitals Chrome extension"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Local Field data&lt;/strong&gt; vs &lt;strong&gt;Field data&lt;/strong&gt; comparison in realtime. Very useful extension since it is showing data from that moment and retrieve &lt;strong&gt;Field data&lt;/strong&gt; from &lt;a href="https://developers.google.com/web/tools/chrome-user-experience-report"&gt;Chrome UX Report&lt;/a&gt;. You may download it from &lt;a href="https://chrome.google.com/webstore/detail/web-vitals/ahfhijdlegdabablpippeagghigmibma?hl=en"&gt;Chrome web store&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#chrome-dev-tools-performance"&gt;
  &lt;/a&gt;
  Chrome dev tools performance
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U8yQVYxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlanm53tx3c2hdzc412y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U8yQVYxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlanm53tx3c2hdzc412y.png" alt="Chrome dev tools performance"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WFIpAXaW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ias9mvnac2yzcngc74bi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WFIpAXaW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ias9mvnac2yzcngc74bi.png" alt="Chrome dev tools performance"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Very useful to &lt;strong&gt;debug&lt;/strong&gt; possible issues related to Web Vitals, since you can check at the very right moment an issue appeared.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#page-speed-insights"&gt;
  &lt;/a&gt;
  Page Speed Insights
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iZAXnKC2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g64ujmvnju02fwp58uzo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iZAXnKC2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g64ujmvnju02fwp58uzo.png" alt="Page Speed Insights"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is &lt;a href="https://developers.google.com/speed/pagespeed/insights/"&gt;THE tool&lt;/a&gt; from google to compare &lt;strong&gt;Field data&lt;/strong&gt; and &lt;strong&gt;Lab data&lt;/strong&gt; regarding performance scoring. It is like an empowered Lighthouse. PSI’s data is updated daily with the trailing 28-day period.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#google-search-console"&gt;
  &lt;/a&gt;
  Google Search console
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZhdhcYTF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8dlabg2tlhjzhzy6owjx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZhdhcYTF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8dlabg2tlhjzhzy6owjx.png" alt="Screenshot 2021-10-13 at 17.46.22"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3-PEYleb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3uxkwsap3y69a238rilo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3-PEYleb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3uxkwsap3y69a238rilo.png" alt="Screenshot 2021-10-13 at 17.46.29"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Google Search Console page experience data is fed with PSI's data, so you can easily monitor every day the trailing period and receive alerts related to Web Vitals issues. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#crux-dashboard"&gt;
  &lt;/a&gt;
  CrUX Dashboard
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qrqH_FUi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73fp7olc9ikg5pls1bth.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qrqH_FUi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73fp7olc9ikg5pls1bth.png" alt="Screenshot 2021-10-13 at 17.54.28"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Building a &lt;a href="https://developers.google.com/web/tools/chrome-user-experience-report"&gt;Chrome UX Report&lt;/a&gt; should be one of your priorities to study Web Vitals deeply, since is going to give insights form the last month and detect trends.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#webpagetest"&gt;
  &lt;/a&gt;
  Webpagetest
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3JqV2MKv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hb5mf81ns1wrbgslkrys.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3JqV2MKv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hb5mf81ns1wrbgslkrys.png" alt="Screenshot 2021-10-13 at 18.05.47"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.webpagetest.org/"&gt;Webpagetest&lt;/a&gt; is a long live citizen of the Internet and has been always very resourceful. It offers Web Vitals with very detailed reports with &lt;strong&gt;Field data&lt;/strong&gt; and &lt;strong&gt;Lab data&lt;/strong&gt; comparison, so give it a try. &lt;/p&gt;

&lt;p&gt;I hope you enjoyed this content ;)&lt;/p&gt;

</description>
      <category>webvitals</category>
      <category>pagespeedinsights</category>
      <category>lighthouse</category>
      <category>webpagetest</category>
    </item>
    <item>
      <title>Deep dive Angular : Performance des templates</title>
      <author>Denis SOURON</author>
      <pubDate>Thu, 14 Oct 2021 07:00:21 +0000</pubDate>
      <link>https://dev.to/younup/deep-dive-angular-performance-des-templates-2fal</link>
      <guid>https://dev.to/younup/deep-dive-angular-performance-des-templates-2fal</guid>
      <description>&lt;p&gt;La performance est un sujet récurrent quand on parle de frontend. Les principaux acteurs (librairies/frameworks Javascript) y font tous référence dès la page d'accueil. Angular est connu pour intégrer un bundle plus complet mais plus lourd que ses concurrents directs. Même si ces différentes technologies n'embarquent pas les mêmes fonctionnalités, il reste une problématique à résoudre pour tous : le rendu HTML. Nous allons analyser ensemble le fonctionnement d'Angular dans trois cas précis : la gestion des blocs statiques, la mise à jour du DOM et la mise en cache de valeurs. Cet article se rapproche de ce qui a été fait par Grafikart en comparant Vue à React : &lt;a href="https://grafikart.fr/tutoriels/vuejs-perf-react-1941"&gt;https://grafikart.fr/tutoriels/vuejs-perf-react-1941&lt;/a&gt;. Certains exemples de code sont volontairement proches pour se donner des éléments de comparaison avec React et Vue.&lt;/p&gt;

&lt;p&gt;Disclaimer : L'objectif de ce Deep dive est d'étudier la performance des templates Angular et de comparer leur fonctionnement avec ceux des concurrents directs. La performance d'un framework frontend ne peut et ne doit se résoudre à cette analyse. De même, elle ne peut s'en soustraire.&lt;/p&gt;

&lt;p&gt;Précision technique : La notion de template en Angular peut faire référence à la partie d'un composant écrite en HTML, mais aussi à un &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;. Ce double sens peut parfois rendre le propos confus. Si tel est le cas, vous pouvez bien évidemment m'en faire part directement, cela n'en sera que bénéfique pour les prochains lecteurs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#les-blocs-statiques"&gt;
  &lt;/a&gt;
  Les blocs statiques
&lt;/h2&gt;

&lt;p&gt;Pour commencer, partons d'un simple template comme celui-ci et essayons de l'analyser :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
    &amp;lt;h1&amp;gt;Hello world&amp;lt;/h1&amp;gt;
    &amp;lt;div *ngIf="foo === 'bar'"&amp;gt;Lorem ipsum dolor sit amet&amp;lt;/div&amp;gt;
    &amp;lt;p&amp;gt;{{ value }}&amp;lt;/p&amp;gt;
  `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Le code produit par la compilation Angular est un peu plus fourni. Voici la partie qui concerne AppComponent avec quelques ajustements pour la lisibilité (build en mode développement, renommage des imports webpack, suppression des symboles 'ɵ').&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;AppComponent_div_2_Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rf&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;angularCore&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;elementStart&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;angularCore&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Lorem ipsum dolor sit amet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;angularCore&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;elementEnd&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;AppComponent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fac&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;AppComponent_Factory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;AppComponent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cm"&gt;/*@__PURE__*/&lt;/span&gt; &lt;span class="nx"&gt;angularCore&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;defineComponent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;selectors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app-root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="na"&gt;decls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;consts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ngIf&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;AppComponent_Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rf&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;angularCore&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;elementStart&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;angularCore&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;angularCore&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;elementEnd&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]();&lt;/span&gt;
        &lt;span class="nx"&gt;angularCore&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;template&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AppComponent_div_2_Template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;angularCore&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;elementStart&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;p&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;angularCore&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;angularCore&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;elementEnd&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rf&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;angularCore&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;advance&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;angularCore&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;property&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ngIf&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;angularCore&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;advance&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;angularCore&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;textInterpolate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="na"&gt;directives&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;angularCommon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NgIf&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="na"&gt;encapsulation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Deux éléments importants sont à noter sur le code que l'on peut observer. Premièrement, on peut remarquer une fonction qui contient le contenu du *ngIf (cf. &lt;code&gt;AppComponent_div_2_Template&lt;/code&gt;). Ce n'est pas surprenant, souvenez-vous que l'astérisque sur les directives est un sucre syntaxique pour un bloc avec &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; (pour rappel &lt;a href="https://angular.io/guide/structural-directives#structural-directive-shorthand"&gt;https://angular.io/guide/structural-directives#structural-directive-shorthand&lt;/a&gt;). En fait, une fonction de rendu sera créée pour chaque &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; dans notre application. Cela veut dire que le rendu est non seulement découpé au niveau des composants, mais également en fonction des &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; présents dans l'application.&lt;/p&gt;

&lt;p&gt;Pour le deuxième aspect qui nous intéresse, concentrons-nous sur une portion de code que l'on n'a assez peu l'occasion de voir quand on fait du développement web : &lt;code&gt;(rf &amp;amp; 1)&lt;/code&gt; et &lt;code&gt;(rf &amp;amp; 2)&lt;/code&gt;. Oui il s'agit bien d'une opération bit à bit. Je vous rassure, nous n'entrerons pas dans les détails ici. Toutefois, selon vous, à quoi pourrait servir ces conditions dans les fonctions de rendu ? Regardons ensemble le code pour essayer d'en déduire les subtilités.&lt;/p&gt;

&lt;p&gt;Dans la partie &lt;code&gt;rf &amp;amp; 1&lt;/code&gt;, on peut identifier la création d'un &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; avec son contenu &lt;code&gt;"Hello world"&lt;/code&gt;, puis un template et enfin un &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;. Ces éléments ressemblent beaucoup à ce qu'on a déclaré dans notre composant. Dans le deuxième bloc (&lt;code&gt;rf &amp;amp; 2&lt;/code&gt;), si on met de côté l'instruction opaque &lt;code&gt;"advance"&lt;/code&gt;, il ne reste que le &lt;code&gt;ngIf&lt;/code&gt; et l'interpolation &lt;code&gt;{{ value }}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Si maintenant je vous dis que la variable &lt;code&gt;rf&lt;/code&gt; vient de RenderFlag, vous devriez avoir une bonne idée de ce qu'il se passe. En fait, en Angular les fonctions de rendu contiennent deux blocs d'instructions, un premier pour la création du template et le deuxième pour les mises à jour dudit template.&lt;/p&gt;

&lt;p&gt;Que dire de tout ça ? Tout d'abord, on peut voir que les blocs statiques sont définis dans la partie création (cf. &lt;code&gt;rf &amp;amp; 1&lt;/code&gt; =&amp;gt; Partie "création" de la fonction de rendu) et qu'ils ne sont pas modifiés lors des mises à jour du template (cf. &lt;code&gt;rf &amp;amp; 2&lt;/code&gt;). C'est plutôt un bon point pour Angular, qui bénéficie comme VueJS d'une détection automatique des contenus statiques, contrairement à React qui requiert l'usage de &lt;code&gt;React.memo()&lt;/code&gt; et d'un composant dédié. Demi-point bonus pour Angular par rapport à VueJS, les contenus statiques ne sont créés que s'ils sont visibles, là où en VueJS tous ces contenus sont générés dès la création du composant même s'ils sont masqués par un &lt;code&gt;v-if&lt;/code&gt;. La seconde conclusion que l'on peut tirer concerne les rerendu ou plutôt l'absence de rerendu mais je vous propose de traiter ça plus en détails dans le chapitre suivant.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#les-mises-%C3%A0-jour-de-template"&gt;
  &lt;/a&gt;
  Les mises à jour de template
&lt;/h2&gt;

&lt;p&gt;NB : Etant donné que les illustrations de code à partir de maintenant peuvent être conséquentes, un commit avec les composants et un extrait du build en mode développement sera fourni en guise d'exemple.&lt;/p&gt;

&lt;p&gt;Avec un découpage des composants à partir des &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;, Angular isole les problématiques de création et de mise à jour très finement. Si bien que les optimisations faites au niveau des composants sont aussi valables pour les templates. C'est notamment le cas de la différenciation entre les propriétés qui provoquent une mise à jour du template et celles qui sont externes. Ainsi, comme VueJS et React (via memo), Angular ne va pas faire de rendu (ou plutôt d'update si on se fie à l'analyse du chapitre précédent) pour les composants enfants dont les entrées n'ont pas été modifiées. Cependant, comme nous l'avons vu auparavant, Angular est également capable de limiter les mises à jour aux éléments pertinents parmi le template parent et chaque &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Pas vraiment convaincu par ces explications ? Vérifions ensemble avec un exemple :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Commençons par lancer l'&lt;a href="https://github.com/Brack0/angular-template-performance/tree/5113f29f796c232c5e41d4788ffe97d58ca1b8d6"&gt;application préparée pour l'occasion&lt;/a&gt;, puis saisissons '&lt;em&gt;compteur&lt;/em&gt;' dans le champ de recherche pour activer la condition du &lt;code&gt;*ngIf&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Deux boutons s'affichent comme prévu : '&lt;em&gt;Incrémenter&lt;/em&gt;' et '&lt;em&gt;Ajouter un item&lt;/em&gt;'&lt;/li&gt;
&lt;li&gt;En cliquant sur le bouton '&lt;em&gt;Incrémenter&lt;/em&gt;', on déclenche la fonction &lt;code&gt;AppComponent_div_7_Template_button_click_3_listener()&lt;/code&gt; (d'après le fichier &lt;code&gt;main.js&lt;/code&gt; reporté dans les &lt;a href="https://github.com/Brack0/angular-template-performance/blob/5113f29f796c232c5e41d4788ffe97d58ca1b8d6/src/assets/main.js"&gt;assets&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Remarquer le contenu du &lt;code&gt;*ngIf&lt;/code&gt; est dans la fonction &lt;code&gt;AppComponent_div_7_Template()&lt;/code&gt; et que celui du &lt;code&gt;*ngFor&lt;/code&gt; est dans &lt;code&gt;AppComponent_tr_16_Template()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Voici ce que l'on obtient en regardant le Flamegraph associé à notre clic :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F1nWvslK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Brack0/angular-template-performance/5113f29f796c232c5e41d4788ffe97d58ca1b8d6/src/assets/update-template-flamegraph.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F1nWvslK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Brack0/angular-template-performance/5113f29f796c232c5e41d4788ffe97d58ca1b8d6/src/assets/update-template-flamegraph.png" alt="Flamegraph when updating a template"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;En y regardant de plus près, on peut effectivement distinguer les étapes dans le fonctionnement d'Angular (cycle de vie, étapes de rafraichissement, détections de différences, validations, etc). De plus, on retrouve des éléments connus comme la fonction &lt;code&gt;AppComponent_div_7_Template_button_click_3_listener()&lt;/code&gt; associée au clic sur le bouton, mais aussi des fonctions de rendu comme &lt;code&gt;AppComponent_Template()&lt;/code&gt; et &lt;code&gt;AppComponent_div_7_Template()&lt;/code&gt;. Pourtant, il n'y a aucune trace de la fonction &lt;code&gt;AppComponent_tr_16_Template()&lt;/code&gt;. Même en cherchant bien, il nous est impossible de trouver un appel de la fonction qui fait le rendu du contenu du &lt;code&gt;*ngFor&lt;/code&gt; ! Ce qui veut dire que le contenu du &lt;code&gt;*ngFor&lt;/code&gt; n'est pas impacté par les actions satellites. Pour être exact, la fonction &lt;code&gt;AppComponent_tr_16_Template()&lt;/code&gt; ne s'est pas déclenchée car il y a eu un contrôle sur le tableau &lt;code&gt;items&lt;/code&gt; qui est en paramètre du &lt;code&gt;*ngFor&lt;/code&gt;. Dans notre cas, pas de changements sur &lt;code&gt;items&lt;/code&gt; donc pas d'appel à la fonction. A l'inverse, la mutation, l'ajout ou la suppression d'éléments aurait provoqué un appel à &lt;code&gt;AppComponent_tr_16_Template()&lt;/code&gt; et une mise à jour du template.&lt;/p&gt;

&lt;p&gt;Donc ça voudrait dire qu'à chaque mise à jour des templates Angular va vérifier un par un chaque élément de chaque tableau pour détecter d'éventuels changements, ce n'est pas terrible pour les performances non ? Non effectivement et on peut le constater rapidement si on utilise beaucoup de &lt;code&gt;*ngFor&lt;/code&gt; sans précaution. Mais rassurez-vous, je vous liste ci-dessous trois méthodes que vous connaissez peut-être déjà pour réduire efficacement les détections de changements sur les tableaux :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Utiliser la fonction trackBy pour simplifier les comparaisons entre les éléments&lt;/li&gt;
&lt;li&gt;Isoler la boucle &lt;code&gt;*ngFor&lt;/code&gt; dans un composant utilisant la stratégie &lt;em&gt;OnPush&lt;/em&gt; avec le tableau en &lt;code&gt;@Input()&lt;/code&gt;, seuls les changements de référence du tableau déclencheront un rendu par défaut (libre à vous ensuite de forcer d'autres rendus si besoin)&lt;/li&gt;
&lt;li&gt;Sortir de zone.js quand vous risquez de provoquer beaucoup de mise à jour des templates sur une courte période (&lt;a href="https://angular.io/api/core/NgZone#runOutsideAngular"&gt;https://angular.io/api/core/NgZone#runOutsideAngular&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Avant de finir cette section sur &lt;del&gt;le rerendu&lt;/del&gt; la mise à jour des templates Angular, vous pouvez retrouver &lt;a href="https://github.com/Brack0/angular-template-performance/tree/9719bb1f0a4c6322672028d1e31a6cc8ef02e722"&gt;ici&lt;/a&gt; un exemple qui met en avant la stratégie &lt;em&gt;OnPush&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;En analysant le comportement d'Angular, on constate que le Framework répond à la problématique initiale : éviter les rendus et les rafraichissements inutiles. Néanmoins, il est difficile de dire si la solution est plus efficace que celle proposée par React et VueJS. D'un côté, on a un découpage fin et beaucoup d'efforts sur la détection de changement ; de l'autre, un peu moins de vérifications et l'utilisation du VirtualDOM pour limiter les mises à jour du DOM. Quelques pistes de réponse sur ce fameux benchmark : &lt;a href="https://krausest.github.io/js-framework-benchmark/index.html"&gt;https://krausest.github.io/js-framework-benchmark/index.html&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mise-en-cache-des-valeurs-calcul%C3%A9es-dans-les-templates"&gt;
  &lt;/a&gt;
  Mise en cache des valeurs calculées dans les templates
&lt;/h2&gt;

&lt;p&gt;Si vous avez déjà fait un peu d'Angular, vous savez que les optimisations que j'ai mentionnées précédemment ne s'applique pas dans un cas précis : les fonctions dans les templates. Qu'elles soient explicites (&lt;code&gt;*ngIf="isValid()&lt;/code&gt;) ou implicites (&lt;code&gt;{{ a * b + c }}&lt;/code&gt;), les fonctions peuvent également causer des problèmes de performance. A chaque raffraichissement de l'application, toutes les fonctions présentes dans les composants affichés sont réévaluées. Dans certains cas cela peut être désastreux. Imaginez un tableau de données avec 500 lignes et des colonnes contenant des dates (date de début, date de fin, date de sortie, date de création, etc). Les performances s'écroulent quand chaque évènement de scroll provoque un formatage de toutes les dates du tableau.&lt;/p&gt;

&lt;p&gt;Vous pouvez constater par vous-même, en reprenant &lt;a href="https://github.com/Brack0/angular-template-performance/tree/5113f29f796c232c5e41d4788ffe97d58ca1b8d6"&gt;le code du chapitre précédent&lt;/a&gt;, que l'ajout d'un item dans le tableau provoque un recalcul de &lt;code&gt;{{ count * 2 }}&lt;/code&gt; (constater l'appel à &lt;code&gt;ɵɵtextInterpolate2&lt;/code&gt;, &lt;code&gt;textBindingInternal&lt;/code&gt;, &lt;code&gt;updateTextNode&lt;/code&gt; puis &lt;code&gt;setValue&lt;/code&gt; dans le Flamegraph).&lt;/p&gt;

&lt;p&gt;Alors comment faire pour traiter les besoins de valeurs calculées sans faire exploser les performances, le nombre d'attributs et le nombre de fonctions utilitaires dans nos composants ? La réponse d'Angular s'appelle un &lt;code&gt;Pipe&lt;/code&gt; et se base sur deux concepts : les références (souvenez-vous, la stratégie &lt;em&gt;OnPush&lt;/em&gt; aime bien ça également) et la mise en cache. En prenant &lt;a href="https://github.com/Brack0/angular-template-performance/tree/ff5b6a6962341e562aa61810658148824080debe"&gt;le dernier commit qui nous intéresse&lt;/a&gt;, vous devriez maintenant constater que l'ajout d'un élément dans le tableau ne provoque plus de calcul de &lt;code&gt;{{ count * 2 }}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ni Angular, ni React, ni VueJS ne se démarque sur cet aspect. Les trois Frameworks permettent d'utiliser des méthodes directement dans les templates, avec les défauts de performance mentionnés plus haut. De plus, chacun propose une solution de mise en cache des valeurs : &lt;code&gt;Pipe&lt;/code&gt; pour Angular, &lt;code&gt;useMemo()&lt;/code&gt; pour React et &lt;code&gt;computed()&lt;/code&gt; pour VueJS&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#angular-est-sousestim%C3%A9-"&gt;
  &lt;/a&gt;
  Angular est sous-estimé ?
&lt;/h2&gt;

&lt;p&gt;Résumons. Angular est capable d'isoler les contenus statiques pour éviter de les regénérer. De plus, au lieu de regénérer des morceaux plus ou moins conséquents en utilisant un Virtual DOM, il va analyser finement les templates à mettre à jour. Même si les méthodes diffèrent, l'objectif est identique : limiter les modifications du DOM au strict minimum car elles peuvent s'avérer couteuses. Enfin, pour la gestion des valeurs calculées, tout le monde est à la même enseigne en proposant une méthode directe mais peu performante et une méthode optimisée avec de la mise en cache.&lt;/p&gt;

&lt;p&gt;Quelle surprise de découvrir qu'Angular soit aussi pointu et précis sur la gestion des templates. Pour être honnête, je m'attendais à avoir un système complexe et lourd. Même si cela ne fait pas d'Angular le meilleur Framework car il a toujours ses défauts et il ne convient pas à tous, le cœur  du Framework, à savoir le rendu d'élément HTML, a des atouts face aux stars du moment, React et VueJS. De quoi peut-être vous (re)donner envie de l'utiliser ?&lt;/p&gt;




&lt;p&gt;Cover by &lt;a href="https://unsplash.com/@yanneskiefer?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Yannes Kiefer&lt;/a&gt; on &lt;a href="https://unsplash.com/t/nature?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>performance</category>
      <category>angular</category>
      <category>french</category>
    </item>
    <item>
      <title>code&lt;math.c&gt;</title>
      <author>Francisco Eyram IHOU</author>
      <pubDate>Thu, 14 Oct 2021 06:42:01 +0000</pubDate>
      <link>https://dev.to/franetse7/codemathc-420l</link>
      <guid>https://dev.to/franetse7/codemathc-420l</guid>
      <description>&lt;p&gt;Affichage d'un programme base sur les structure de données&lt;/p&gt;

</description>
      <category>database</category>
      <category>programming</category>
    </item>
    <item>
      <title>Make a Responsive Contact us page template using HTML and CSS</title>
      <author>keshavs759</author>
      <pubDate>Thu, 14 Oct 2021 06:39:34 +0000</pubDate>
      <link>https://dev.to/keshavs759/make-a-responsive-contact-us-page-template-using-html-and-css-3om1</link>
      <guid>https://dev.to/keshavs759/make-a-responsive-contact-us-page-template-using-html-and-css-3om1</guid>
      <description>&lt;p&gt;In this article, we will discover how to make a responsive contact page design in HTML and CSS and look at some of the other responsive contact us page design that you can try for free.&lt;/p&gt;

&lt;p&gt;The contact us page is one of the most important pages on your website. Because it provides a convenient location for visitors to locate all of your contact information, your 'Contact Us' page is critical for converting website visitors into customers. After all, what good is it if someone is really interested in your goods and services but is unable to contact you?&lt;/p&gt;

&lt;p&gt;Aside from potential consumers, your Contact Us page allows investors and advertising to contact you, and we all know how critical both of these entities are to a company's success.&lt;/p&gt;

&lt;p&gt;As we know that the main motive of making a contact page is to provide your website visitors a way to contact you. It can be done by creating a contact form or by simply creating a static page that shows your contact details and address.&lt;/p&gt;

&lt;p&gt;With basic knowledge of HTML, you can make a contact us page design. You can create a form with some input fields like name, email, message, tel, etc. after that you write some back-end logic in any server-side programming language to get those inputs and send them to the respective address.&lt;/p&gt;

&lt;p&gt;Another way is by simply creating an HTML page that holds the information about your organization like, telephone, email, address, etc.&lt;/p&gt;

&lt;p&gt;There are many contacts us page designs available throughout the internet but most of them are made with bootstrap and some are paid. This contacts us page design is free to download and use. You can see the HTML code for this contact us page design below. If you wish you can download this design from this link. &lt;/p&gt;

&lt;p&gt;I recommend you to watch this video along with the code below. It will help you to understand the code better.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/smSm5lXzCCM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Following is the HTML code with CSS to make a contact us page design on your own,&lt;/p&gt;

&lt;p&gt;Code for contact landing page&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/_vidyasheela/embed/rNwQorx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

&lt;p&gt;Code for contact form&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/_vidyasheela/embed/vYZQvzd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

&lt;p&gt;For more such website components you can visit this &lt;a href="https://vidyasheela.com/website-components.php"&gt;link&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>css</category>
    </item>
    <item>
      <title>Payment Applications 101: Introduction to Payment Applications</title>
      <author>Mwenda Harun Mbaabu</author>
      <pubDate>Thu, 14 Oct 2021 06:38:02 +0000</pubDate>
      <link>https://dev.to/grayhat/payment-applications-101-introduction-to-payment-applications-2j3</link>
      <guid>https://dev.to/grayhat/payment-applications-101-introduction-to-payment-applications-2j3</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LBMCuqVX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sp1lmuo34n5fu5bouy7u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LBMCuqVX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sp1lmuo34n5fu5bouy7u.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What are payment applications? Given 5 minutes to explain payment applications in your own words, what would you say? &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>docker</category>
      <category>python</category>
      <category>devops</category>
    </item>
    <item>
      <title>OpenSource/HTML</title>
      <author>Francisco Eyram IHOU</author>
      <pubDate>Thu, 14 Oct 2021 06:13:29 +0000</pubDate>
      <link>https://dev.to/franetse7/opensourcehtml-47ck</link>
      <guid>https://dev.to/franetse7/opensourcehtml-47ck</guid>
      <description>&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/franetse7/embed/jOLbOJL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
    <item>
      <title>API Testing - How to run API Tests in vREST NG Application?</title>
      <author>Dheeraj Aggarwal</author>
      <pubDate>Thu, 14 Oct 2021 06:11:25 +0000</pubDate>
      <link>https://dev.to/dheerajaggarwal/api-testing-how-to-run-api-tests-in-vrest-ng-application-45gj</link>
      <guid>https://dev.to/dheerajaggarwal/api-testing-how-to-run-api-tests-in-vrest-ng-application-45gj</guid>
      <description>&lt;p&gt;This video #tutorial explains how you may run your API tests quickly and see the results side by side in vREST NG Application.&lt;/p&gt;

&lt;p&gt;vREST NG is a script less API test automation tool. It helps you to write maintainable test cases quickly for functional and regression testing of APIs. You can download and install the vREST NG application directly on Windows, OSX, and Linux via our website.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Video Link:&lt;/strong&gt; &lt;a href="https://youtu.be/rIOFNiUhBvo"&gt;https://youtu.be/rIOFNiUhBvo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;API Testing Tutorials Playlist:&lt;/strong&gt; &lt;a href="https://youtube.com/playlist?list=PLmua155_WrDzt1AbB6iV5Lsw_Z7QrzZZ0"&gt;https://youtube.com/playlist?list=PLmua155_WrDzt1AbB6iV5Lsw_Z7QrzZZ0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Important Links:&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://vrest.io/?utm_source=devto&amp;amp;utm_medium=devto-desc&amp;amp;utm_campaign=video"&gt;vREST NG Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discord.gg/NtRa7kw"&gt;Community Chat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://meetings.hubspot.com/dheeraj-aggarwal"&gt;Book a Live Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Please do like and share if you found this video helpful and let the voice heard by the testing community. Also, let us know your feedback by commenting on this post.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>tutorial</category>
      <category>apitesting</category>
      <category>vrest</category>
    </item>
    <item>
      <title>How to Build a Command Line Interface (CLI) Application with Node.JS👨‍🎓🤓.</title>
      <author>Lokesh_Choudhary</author>
      <pubDate>Thu, 14 Oct 2021 06:08:47 +0000</pubDate>
      <link>https://dev.to/lokeshchoudharylc/how-to-build-a-command-line-interface-cli-application-with-nodejs-2o2p</link>
      <guid>https://dev.to/lokeshchoudharylc/how-to-build-a-command-line-interface-cli-application-with-nodejs-2o2p</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-a-command-line-interface-cli-application"&gt;
  &lt;/a&gt;
  What is a Command Line Interface (CLI) Application?
&lt;/h2&gt;

&lt;p&gt;CLI tools allow you to run certain tasks or operations right from your terminal or command line prompt. As a developer , chances are you spend most of your time in your terminal, typing in commands to help you get around some tasks. A good example of commonly used applications include npm , Create React App , Vue CLI etc.&lt;br&gt;
In this tutorial you will create a CLI todo list application by using Node JS.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-the-project"&gt;
  &lt;/a&gt;
  Setting up the project
&lt;/h2&gt;

&lt;p&gt;First , create a directory that will hold the CLI application:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    mkdir todo-list-cli
    cd todo-list-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Next, we will initialize our Node.js project&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This will create a &lt;em&gt;package.json&lt;/em&gt; file with defaults. Once that is done you need to install some packages that will help create our CLI application. These are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.npmjs.com/package/commander"&gt;commander&lt;/a&gt;:This package makes creating the CLI application easier. It provides functions that will allow you to set the commands, options and more&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.npmjs.com/package/chalk"&gt;chalk&lt;/a&gt;:This package lets us print colored messages to the console. It will help us make our CLI application look nice and pretty&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.npmjs.com/package/conf"&gt;conf&lt;/a&gt;:This package allows us to save persistent information on the user’s machine. We will be using it to save the user’s todo list&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To install these packages, run:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    npm i commander chalk conf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Once installation is done, you are ready to start the development of the CLI tool.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-a-cli-application"&gt;
  &lt;/a&gt;
  Creating a CLI Application
&lt;/h2&gt;

&lt;p&gt;Firstly start by creating &lt;code&gt;index.js&lt;/code&gt; in the root of the project. This will be the main entry of the application.&lt;/p&gt;

&lt;p&gt;Next, to create the basic configurations, and functionalities, we can use &lt;code&gt;commander&lt;/code&gt;. First, let's require &lt;code&gt;program&lt;/code&gt; from &lt;code&gt;commander&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const {program} = require('commander')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To declare a command, &lt;em&gt;commander&lt;/em&gt; provides the following functions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;command&lt;/code&gt;: takes a string that defines the command.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;description&lt;/code&gt;: describes the command for the user. This is helpful when the user uses the &lt;strong&gt;--help&lt;/strong&gt; option.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;option&lt;/code&gt;: the options that this command can take, if any.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;action&lt;/code&gt;: particular action to execute, when command is executed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you are wondering what about the commands for the CLI?&lt;/p&gt;

&lt;p&gt;You need the following commands:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;todo list: this will list the tasks in the user’s to-do list&lt;/li&gt;
&lt;li&gt;todo add: this will add a new task to the user’s to-do list&lt;/li&gt;
&lt;li&gt;todo mark-done: this will mark specific tasks or all tasks as done in the list&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-list-command"&gt;
  &lt;/a&gt;
  Creating the List Command
&lt;/h2&gt;

&lt;p&gt;The list command will just show the list of tasks that the user has added before. It will not take any options. You should be able to run it by running the following command in your terminal:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    todo list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now in &lt;em&gt;index.js&lt;/em&gt;, add the following below the code we added earlier:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    program
          .command('list)
          .description('List all the TODO tasks')
          .action(list)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;In this the &lt;code&gt;command&lt;/code&gt; function is used to declare the command in CLI application. The argument you pass is a string.The &lt;code&gt;description&lt;/code&gt; function is used to describe this command to the user when they run the application with the &lt;code&gt;--help&lt;/code&gt; option. Finally, the &lt;code&gt;action&lt;/code&gt; is assigned to a function called &lt;code&gt;list&lt;/code&gt;, which you will create shortly.&lt;/p&gt;

&lt;p&gt;Now, create a new directory called &lt;code&gt;commands&lt;/code&gt;. And a file &lt;code&gt;list.js&lt;/code&gt; in it, which will hold the function that will run when the user runs &lt;code&gt;todo list&lt;/code&gt; in the terminal.&lt;/p&gt;

&lt;p&gt;For storing and reading the tasks, you will use the &lt;code&gt;conf&lt;/code&gt; package. It has the following functions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;set&lt;/code&gt;: this sets the information under a specific key&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;get&lt;/code&gt;: this gets the information that is set under a specific key&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Lets start by requiring conf in &lt;code&gt;commands/list.js&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    const conf = new (require('conf'))()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Next, you need to implement and export the function for use in &lt;code&gt;index.js&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    function list(){

    }
    module.exports = list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now, specify the key &lt;code&gt;todo-list&lt;/code&gt; inside the list function under which the data will be &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;get&lt;/code&gt; using the &lt;em&gt;conf package&lt;/em&gt;. &lt;code&gt;todo-list&lt;/code&gt; will be an array of objects.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    const todoList = conf.get('todo-list')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Next, if todo data is already in the &lt;code&gt;todo-list&lt;/code&gt;, you need to loop over them and display them in the terminal, done tasks will have green color and yellow for the tasks that are not done.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;todo-list&lt;/code&gt; is empty, which means user does not have any tasks, you need to show a message in red indicating that they don't have any tasks.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    const todoList = conf.get('todo-list')

    if (todoList &amp;amp;&amp;amp; todoList.length) {
      //user has tasks in todoList
    } else {
      //user does not have tasks in todoList
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;To show color in our terminal, as mentioned before you will use &lt;code&gt;chalk&lt;/code&gt;. Let's require it in the &lt;code&gt;commands/list.js&lt;/code&gt;.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    const conf = new (require('conf'))()
    const chalk = require('chalk')

    //rest of our code
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Next, you will use &lt;code&gt;chalk&lt;/code&gt; in the &lt;strong&gt;else&lt;/strong&gt; part first. You need to show the user that they don't have any tasks in the todo list. To display message in red using &lt;code&gt;chalk&lt;/code&gt; :&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    else {
      //user does not have tasks in todoList
      console.log(
      chalk.red.bold('You don\'t have any tasks yet.')
     )
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now, you need to display a message in green if the user does have tasks. First, you need to show a message that details the color meaning of the tasks.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    if (todoList &amp;amp;&amp;amp; todoList.length) {
     console.log(
        chalk.blue.bold('Tasks in green are done. Tasks in yellow are still not done.')
     )
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now, the second step is to loop over the tasks in the &lt;code&gt;todoList&lt;/code&gt; and for each task, check if it's done then display green, if not then yellow.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    todoList.forEach((task, index) =&amp;gt; {
         if (task.done) {
             console.log(
                 chalk.greenBright(`${index}. ${task.text}`)
             )
         } else {
             console.log(
                 chalk.yellowBright(`${index}. ${task.text}`)
            )
          }
     })
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now the &lt;code&gt;list&lt;/code&gt; function is done and you can use it in &lt;code&gt;index.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The full code till now is:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    const conf = new (require('conf'))()
    const chalk = require('chalk')
    function list () {
        const todoList = conf.get('todo-list')
        if (todoList &amp;amp;&amp;amp; todoList.length) {
            console.log(
                chalk.blue.bold('Tasks in green are done. Tasks in yellow are still not done.')
            )
            todoList.forEach((task, index) =&amp;gt; {
                if (task.done) {
                    console.log(
                        chalk.greenBright(`${index}. ${task.text}`)
                    )
                } else {
                    console.log(
                        chalk.yellowBright(`${index}. ${task.text}`)
                    )
                }
            })
        } else {
            console.log(
                chalk.red.bold('You don\'t have any tasks yet.')
            )
        }
    }
    module.exports = list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now, in the &lt;code&gt;index.js&lt;/code&gt; require the &lt;code&gt;list&lt;/code&gt; function.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    const list = require('./commands/list')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Then, at the end of file add the following:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    program.parse()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This is important for &lt;code&gt;commander&lt;/code&gt; as the input of the user need to be parsed to figure out which command the user is running and execute it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-the-application"&gt;
  &lt;/a&gt;
  Testing the Application
&lt;/h2&gt;

&lt;p&gt;The first step is to add the following in the &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    "bin":{
        "todo":"index.js"
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;code&gt;todo&lt;/code&gt; will be used in the terminal when running commands from our todo CLI. You can change it to whatever you want. It is pointing at index.js, as this is your main point of entry.&lt;/p&gt;

&lt;p&gt;Now, you have to globally install the package on your machine.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    npm i -g
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Once it is done you can run the application right from your terminal.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    todo --help
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;You will see the following in your terminal:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    Usage: todo [options] [command]

    Options:
      -h, --help           display help for command

    Commands:
      list                 List all the TODO tasks
      help [command]       display help for command
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;If you run the list command:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    todo list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;It will just show the message that you don't have any task yet.&lt;br&gt;
Let's implement a new command that is &lt;code&gt;add&lt;/code&gt; command.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-command"&gt;
  &lt;/a&gt;
  Add Command
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;add&lt;/code&gt; command will take one argument, which will be the text/title of the task.The command will look.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    todo add "Make CLI App"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now, you need to declare &lt;code&gt;add&lt;/code&gt; command in &lt;code&gt;index.js&lt;/code&gt; under the &lt;code&gt;list&lt;/code&gt; command, not after the &lt;code&gt;program.parse()&lt;/code&gt;, add the the following:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    program
        .command('add &amp;lt;task&amp;gt;')
        .description('Add a new TODO task')
        .action(add)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The command function has add  where  is the argument the user need to pass. In commander a required argument is , whereas if it’s optional, you use [ARG_NAME]. Also, the name given to the argument is same as name of the parameter passed to the function in action.&lt;/p&gt;

&lt;p&gt;Now, just like the &lt;code&gt;list&lt;/code&gt; command you need to implement the add function. Let’s create the file &lt;code&gt;commands/add.js&lt;/code&gt; with the following :&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    const conf = new (require('conf'))()
    const chalk = require('chalk')

    function add (task) {

    }

    module.exports = add
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;In the &lt;code&gt;add&lt;/code&gt; function, a &lt;code&gt;task&lt;/code&gt; parameter is passed, which will be passed by the user.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;add&lt;/code&gt; function will store the task in the &lt;code&gt;todo-list&lt;/code&gt; array using &lt;code&gt;conf&lt;/code&gt;. And a success message in green will be displayed using &lt;code&gt;chalk&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First, you will use the &lt;code&gt;get&lt;/code&gt; function to get the &lt;code&gt;todo-list&lt;/code&gt; and then push a new task to the &lt;code&gt;todo-list&lt;/code&gt; array.&lt;/p&gt;

&lt;p&gt;The entire code for the &lt;code&gt;add&lt;/code&gt; function is:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    function add (task) {
        //get the current todo-list
        let todosList = conf.get('todo-list')

        if (!todosList) {
            //default value for todos-list
            todosList = []
        }

        //push the new task to the todos-list
        todosList.push({
            text: task,
            done: false
        })

        //set todos-list in conf
        conf.set('todo-list', todosList)

        //display message to user
        console.log(
            chalk.green.bold('Task has been added successfully!')
        )
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now, go back to &lt;code&gt;index.js&lt;/code&gt; and require the &lt;code&gt;add&lt;/code&gt; function:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    const add = require('./commands/add')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Let's test this command in the terminal:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    todos add "Make CLI App"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;You will get a message "Task has been added successfully!" in green. To check that added task, run in your terminal:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    todo list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Try adding some more tasks to see the list grow.&lt;/p&gt;

&lt;p&gt;Now will add the &lt;code&gt;mark-done&lt;/code&gt; command which will mark a task as done.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#markdone-command"&gt;
  &lt;/a&gt;
  mark-done command
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;mark-done&lt;/code&gt; command, takes a &lt;code&gt;--tasks&lt;/code&gt; option followed by at least one index of the tasks user want to mark as done it mark those as done, but by default will mark all tasks as done if not index is specified.&lt;/p&gt;

&lt;p&gt;Example command:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    todo mark-done --tasks 1 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;For the simplicity of the tutorial, the indices of tasks to mark them done are used.But in a real-life use case application, you would probably use unique IDs for the tasks.&lt;/p&gt;

&lt;p&gt;Now, declare &lt;code&gt;mark-done&lt;/code&gt; command under the &lt;code&gt;add&lt;/code&gt; command:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    program
        .command('mark-done')
        .description('Mark commands done')
        .option('-t, --tasks &amp;lt;tasks...&amp;gt;', 'The tasks to mark done. If not specified, all tasks will be marked done.')
        .action(markDone)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;In this command the option function. The first parameter is the format of the option &lt;code&gt;-t, --tasks&lt;/code&gt; means that the user can use either &lt;code&gt;-t&lt;/code&gt; or &lt;code&gt;--tasks&lt;/code&gt; to pass this option.  means that more than one task can be provided, but as the &amp;lt;&amp;gt; is used which means it is required. The second parameter is the description of the option. This is useful when the user types &lt;code&gt;todo mark-done --help&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Now, just like previous commands you need to implement the &lt;code&gt;markDone&lt;/code&gt; function. Let’s create the file &lt;code&gt;commands/markDone.js&lt;/code&gt; with the following :&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    const conf = new (require('conf'))()
    const chalk = require('chalk')

    function markDone({tasks}) {

    }
    module.exports = markDone
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;You can see that the markDone function takes an object that includes a &lt;code&gt;tasks&lt;/code&gt; property. If the &lt;code&gt;-t&lt;/code&gt; or &lt;code&gt;--tasks&lt;/code&gt; option is passed to the command, &lt;code&gt;tasks&lt;/code&gt; will be an array of the values passed by the user. If not, it will be undefined.&lt;/p&gt;

&lt;p&gt;What we need to do inside the &lt;code&gt;markDone&lt;/code&gt; function is to &lt;code&gt;get&lt;/code&gt; the &lt;code&gt;todo-list&lt;/code&gt; array from &lt;code&gt;conf&lt;/code&gt;. If &lt;code&gt;todo-list&lt;/code&gt; is not empty, you need to loop over it. And mark only the tasks of the indices the user enters as done. If &lt;code&gt;tasks&lt;/code&gt; indices is undefined, then mark all tasks as done.&lt;/p&gt;

&lt;p&gt;The complete code for &lt;code&gt;markDone&lt;/code&gt; is :&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    function markDone({tasks}) {
        let todosList = conf.get('todo-list')

        if (todosList) {
            //loop over the todo list tasks
            todosList = todosList.map((task, index) =&amp;gt; {
                //check if the user specified the tasks to mark done
                if (tasks) {
                    //check if this task is one of the tasks the user specified
                    if (tasks.indexOf(index.toString()) !== -1) {
                        //mark only specified tasks by user as done
                        task.done = true
                    }
                } else {
                    //if the user didn't specify tasks, mark all as done
                    task.done = true
                }
                return task
            });

            //set the new todo-list
            conf.set('todo-list', todosList)
        }

        //show the user a message
        console.log(
            chalk.green.bold('Tasks have been marked as done successfully')
        )
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;First check if the &lt;code&gt;todoList&lt;/code&gt; is empty or not, if not loop over &lt;code&gt;todosList&lt;/code&gt; inside &lt;code&gt;map&lt;/code&gt; function. And then check if &lt;code&gt;tasks&lt;/code&gt; is defined, which means if the user has passed any specific tasks to mark as done.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;tasks&lt;/code&gt; is defined, then you need to check if the current task item is in the tasks by checking if the index is in the tasks array. Note that &lt;code&gt;index.toString()&lt;/code&gt; is used because the tasks array will hold the indices as strings.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;tasks&lt;/code&gt; is not defined, then, as mentioned before, mark all items as done. After loop completion you get the the updated list, you need to set &lt;code&gt;todo-list&lt;/code&gt; using &lt;code&gt;conf.set&lt;/code&gt; to the new array. In the end, show the user a success message.&lt;/p&gt;

&lt;p&gt;Finally, go back to &lt;code&gt;index.js&lt;/code&gt; and require &lt;code&gt;markDone&lt;/code&gt; function:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    const markDone = require('./commands/markDone')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now, test it out. By running:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    todo mark-done
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;If everything is correct, you can run &lt;code&gt;todo list&lt;/code&gt; and see that all items are in green now.&lt;/p&gt;

&lt;p&gt;Next, try to add a few more tasks then mark those done using their indices, an example command to mark a single task as done:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    todo mark-done -t 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;To mark multiple tasks:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    todo mark-done -t 1 3 5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;You can now play with the commands then check which are marked done and which aren’t using the &lt;code&gt;todos list&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Our CLI Application is done! todo-list-cli now allows the user to add tasks, view them, and mark them done.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Congratulations, you learned how to create a CLI Application using Node.JS. The number of possible projects are are endless, so go create something more awesome!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>node</category>
      <category>npm</category>
    </item>
    <item>
      <title>React basics: Passing data between components</title>
      <author>Chris Bongers</author>
      <pubDate>Thu, 14 Oct 2021 06:07:34 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/react-basics-passing-data-between-components-1m6n</link>
      <guid>https://dev.to/dailydevtips1/react-basics-passing-data-between-components-1m6n</guid>
      <description>&lt;p&gt;Passing data between components in React is a very powerful concept.&lt;/p&gt;

&lt;p&gt;In this article, we'll look at the following two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sending data from a parent to a child&lt;/li&gt;
&lt;li&gt;Sending data from a child to parent&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For this concept, we'll need to use the &lt;code&gt;useState&lt;/code&gt; hook. You haven't seen that hook until now. I will write about it in detail another time.&lt;/p&gt;

&lt;p&gt;Our result of today will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S57ZJfxt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633416020523/rI8ACJ_Nh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S57ZJfxt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633416020523/rI8ACJ_Nh.gif" alt="React basics: Passing data between components"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sending-data-from-a-parent-to-a-child-component-in-react"&gt;
  &lt;/a&gt;
  Sending data from a parent to a child component in React
&lt;/h2&gt;

&lt;p&gt;The most effortless data flow in React is passing data top-down so from a parent component to the child components.&lt;/p&gt;

&lt;p&gt;Let's use our current example as a starting point.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/rebelchris/react-basics/tree/list"&gt;Download the GitHub repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this repo, we build a simple bookshelf with a couple of books on it.&lt;/p&gt;

&lt;p&gt;In the last example, we looped our books, but we want to pass these books as an object.&lt;/p&gt;

&lt;p&gt;We can pass them to our bookshelf by setting the params like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Bookshelf&lt;/span&gt; &lt;span class="na"&gt;books&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Bookshelf&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then all we need to do is change our bookshelf code to look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Book&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Book&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Bookshelf&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Book&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This separates our data a bit more, and we can create multiple bookshelves with their own set of books now.&lt;/p&gt;

&lt;p&gt;The cool part about doing this is that it can also be done on a specific action.&lt;/p&gt;

&lt;p&gt;Let's head back to our &lt;code&gt;App.js&lt;/code&gt; file and set a new state to show you what I mean by that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setBooks&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note we named this &lt;code&gt;books&lt;/code&gt; as well, so rename the top data set as &lt;code&gt;booksData&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we can add a button that &lt;code&gt;onClick&lt;/code&gt; will load our books.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setBooks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;booksData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Load the books&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And there you go now our books are only loaded when we click the button.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sending-data-from-a-child-to-a-parent-component-in-react"&gt;
  &lt;/a&gt;
  Sending data from a child to a parent component in React
&lt;/h2&gt;

&lt;p&gt;Now that we can send data from our parent component to our child let's see how it would work the other way around.&lt;/p&gt;

&lt;p&gt;What we want to achieve is that we have an option to know which book was clicked.&lt;/p&gt;

&lt;p&gt;However, for this approach, the parent component must have a way to receive this data.&lt;/p&gt;

&lt;p&gt;Let's open up our &lt;code&gt;Bookshelf.js&lt;/code&gt; code as this acts as our parent for the actual books.&lt;br&gt;
Add a new state to keep track of the current book.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;currentBook&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCurrentBook&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can show the current book if it's set:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;currentBook&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Currently reading: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;currentBook&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the last thing we want to do is pass the set function to our book component like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Book&lt;/span&gt;
  &lt;span class="na"&gt;setCurrentBook&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setCurrentBook&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside the book component, we need to accept this function as a parameter.&lt;br&gt;
And we can add an &lt;code&gt;onClick&lt;/code&gt; handler to invoke this function and pass the title back.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCurrentBook&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCurrentBook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There you go. We can now bind data in two ways.&lt;br&gt;
From parent to child, and the other way around.&lt;/p&gt;

&lt;p&gt;You can find the complete code on &lt;a href="https://github.com/rebelchris/react-basics/tree/data"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
    </item>
    <item>
      <title>Easy and Quick Single DIV Spinning Dots Loading Status Animation using Vanilla CSS Only</title>
      <author>Designing Coder</author>
      <pubDate>Thu, 14 Oct 2021 05:45:38 +0000</pubDate>
      <link>https://dev.to/designingcoder/easy-and-quick-single-div-spinning-dots-loading-status-animation-using-vanilla-css-only-chj</link>
      <guid>https://dev.to/designingcoder/easy-and-quick-single-div-spinning-dots-loading-status-animation-using-vanilla-css-only-chj</guid>
      <description>&lt;p&gt;&lt;em&gt;If you prefer video over text then there is a YouTube video at the end of the article. Let's go step-by-step and build our loading animation.&lt;/em&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step1-setting-up-theme"&gt;
  &lt;/a&gt;
  Step-1: Setting up theme
&lt;/h2&gt;

&lt;p&gt;Let's first set up the theme and position our animation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"loading"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;    &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;midnightblue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nc"&gt;.loading&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The circle you see is for the reference, we will remove it later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step2-adding-the-dots"&gt;
  &lt;/a&gt;
  Step-2: Adding the dots
&lt;/h2&gt;

&lt;p&gt;We will use box-shadow which will help us add more circles or dots without adding any extra &lt;code&gt;div&lt;/code&gt;. We will position them around our previous circle.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;     &lt;span class="nc"&gt;.loader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="err"&gt;...&lt;/span&gt;
      &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;-3em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="m"&gt;2.25em&lt;/span&gt; &lt;span class="m"&gt;-2.25em&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.875&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="m"&gt;3em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.75&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="m"&gt;2.25em&lt;/span&gt; &lt;span class="m"&gt;2.25em&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.625&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;3em&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="m"&gt;-2.25em&lt;/span&gt; &lt;span class="m"&gt;2.25em&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.375&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="m"&gt;-3em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="m"&gt;-2.25em&lt;/span&gt; &lt;span class="m"&gt;-2.25em&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.125&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We no longer need the first circle(&lt;code&gt;background: white;&lt;/code&gt;), we can remove it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step3-animation"&gt;
  &lt;/a&gt;
  Step-3: Animation
&lt;/h2&gt;

&lt;p&gt;We just need to the div to keep rotating as per our need, which is a one-liner coder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;    &lt;span class="nc"&gt;.loading&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;...&lt;/span&gt;
      &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;spin&lt;/span&gt; &lt;span class="m"&gt;1.2s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;spin&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-360deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have our single div loading status animation ready. Thank you for reading.&lt;br&gt;&lt;br&gt;
Please feel free to drop you opinion or any helpful tips.&lt;/p&gt;

&lt;p&gt;Feel free to connect on Social Media: &lt;a href="https://designingcoder.github.io"&gt;https://designingcoder.github.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Ds7296HzaKU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>css</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>13 of Darkest Design Patterns You Can Find on Internet</title>
      <author>OpenReplay Tech Blog</author>
      <pubDate>Thu, 14 Oct 2021 05:24:35 +0000</pubDate>
      <link>https://dev.to/asayerio_techblog/13-of-darkest-design-patterns-you-can-find-on-internet-b1o</link>
      <guid>https://dev.to/asayerio_techblog/13-of-darkest-design-patterns-you-can-find-on-internet-b1o</guid>
      <description>&lt;p&gt;&lt;em&gt;by author &lt;a href="https://blog.openreplay.com/authors/craig-buckler"&gt;Craig Buckler&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The worst web design patterns are not just for Halloween: &lt;em&gt;they stay with us for years!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Some dark patterns are unintentional but most trick you into doing something you didn't intend. You'll eventually see though the manipulation but it's often too late. As a developer, you have the ghost-busting skills to prevent these spooky problems...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-nefarious-notifications"&gt;
  &lt;/a&gt;
  1. Nefarious Notifications
&lt;/h2&gt;

&lt;p&gt;Newsletter sign-ups, push notifications, "lets chat" widgets, and survey prompts &lt;em&gt;could&lt;/em&gt; be useful but implementations are awful.&lt;/p&gt;

&lt;p&gt;Why do sites prompt you to subscribe the moment you access for the first time? You have no idea whether the content is relevant or useful. Unsurprisingly, most people click "no" when faced with the prompt.&lt;/p&gt;

&lt;p&gt;There's nothing wrong with these notifications but users are more likely to appreciate the suggestion after they've engaged with the site first. Perhaps show a prompt at the end of the article or after a few visits. And never prompt users to sign-up for a newsletter when they click a link in the newsletter!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-broken-browsers"&gt;
  &lt;/a&gt;
  2. Broken Browsers
&lt;/h2&gt;

&lt;p&gt;Even those with minimal technology experience understand the browser's back button. Why do sites break standard web functionality by opening new tabs or expiring pages? There is no technical reason to break browser controls. Doing so leads to design problems, fragile systems, and confused users.&lt;/p&gt;

&lt;p&gt;Further "features" to avoid:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;disabling the right-click/long-tap menu&lt;/li&gt;
&lt;li&gt;disabling copy or adding further text&lt;/li&gt;
&lt;li&gt;disabling bookmarking by not updating the URL in a Single Page App.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#3-diabolical-disabling-of-password-paste"&gt;
  &lt;/a&gt;
  3. Diabolical Disabling of Password Paste
&lt;/h2&gt;

&lt;p&gt;Disabling paste for any reason is unnecessary but it's especially problematic on password fields. Yet you'll encounter this issue on large sites such as major international banks.&lt;/p&gt;

&lt;p&gt;The practice is probably implemented for "security" reasons. If the user cannot paste, they cannot reuse a password. The practice also stops people using a password manager so it's impossible to use more secure long random strings.&lt;/p&gt;

&lt;p&gt;Never disable paste: it's less work and improves system security.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-phantom-password-policies"&gt;
  &lt;/a&gt;
  4. Phantom Password Policies
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;"Your password must be between 7 and 12 characters and requires at one uppercase character, two non-consecutive numbers, and a ! or $ symbol."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Companies apply these rules for two reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The system is insecurely storing the password as plain text in a database with specific character restrictions, or&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A security "expert" suggested that it stops people using easy passwords such as "password". This is correct - but it also stops people using more complex passwords and provides a handy template for brute-force cracking bots.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A long minimum length is the best way to enforce strong passwords because each character exponentially increases complexity and cracking time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-spooky-scrolljacking"&gt;
  &lt;/a&gt;
  5. Spooky Scroll-Jacking
&lt;/h2&gt;

&lt;p&gt;Showing animations or other effects as the page scrolls can be an engaging experience but be wary of:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Over-using animations. Animating everything is a distraction and highlights nothing. One or two subtle effects to show important messages is preferable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Breaking the context. Scrolling should not lead to an unexpected actions such as content disappearing, modal dialogs, form submissions, redirects to other pages, etc.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Animation can also cause motion sickness so use the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion"&gt;CSS &lt;code&gt;prefers-reduced-motion&lt;/code&gt; media query&lt;/a&gt; to disable effects according to the user's preferences.&lt;/p&gt;

&lt;p&gt;There's also a special place in hell for infinite-scrolling pages! Auto-loading seemingly random content without the user's consent wastes bandwidth, makes it difficult to bookmark pages, and makes it impossible to reach contact information in the page footer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-creepy-content-jump"&gt;
  &lt;/a&gt;
  6. Creepy Content Jump
&lt;/h2&gt;

&lt;p&gt;Reading articles on a smartphone can be a frustrating experience. You're engrossed in the text when it jumps off-screen and you lose your place. You may even click the wrong button or link the moment the page moves. Some readers will give up and leave.&lt;/p&gt;

&lt;p&gt;Content jumps occur when an image or iframe loads above the viewport scroll point. The browser inserts the content once it has determined the dimensions and the page height grows. A 300 pixel height image loaded above the current position pushes the content down 300 pixels.&lt;/p&gt;

&lt;p&gt;Google's Cumulative Layout Shift (CLS) metric measures content jumps and penalizes sites accordingly. Technical solutions include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Adding &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes to HTML &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; elements or using the CSS &lt;code&gt;aspect-ratio&lt;/code&gt; property to reserve space before an asset loads.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Setting dimensions of container elements which enclose slower-loading ads, images, and social media widgets.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Optimizing web fonts and using similarly-sized fallbacks to minimize layout shifts.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Requesting larger assets earlier using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/preload"&gt;preload&lt;/a&gt; in your HTML &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not inserting elements at the top of the page unless they're triggered by a user action.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Considering CSS &lt;a href="https://developer.mozilla.org/docs/Web/CSS/CSS_Containment"&gt;containment&lt;/a&gt; to optimize the rendering of content blocks.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#7-alarming-app-installs"&gt;
  &lt;/a&gt;
  7. Alarming App Installs
&lt;/h2&gt;

&lt;p&gt;Some sites and social networks often prompt you to install their app when clicking an email alert about a new message, follower, article, transaction, etc. The link opens in a web page with two buttons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A massive "Download Our App" button which leads to an AppStore where you must approve, download, install, and launch the app before logging in, accessing the system, then returning to the original alert to start again.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A microscopic "continue in mobile web" link which performs the action.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There's nothing wrong in having an app which offers more functionality or a slicker UI than the website (even though some just collect more personal data!) But promoting that app at the start of every interaction is frustrating. Some users may install it to stop the nagging but others will unsubscribe.&lt;/p&gt;

&lt;p&gt;Consider offering the app infrequently at appropriate times. Perhaps give up if the user shows zero interest after a dozen prompts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-strange-shopping-cart-additions"&gt;
  &lt;/a&gt;
  8. Strange Shopping Cart Additions
&lt;/h2&gt;

&lt;p&gt;A list of related or recommended products can be useful … adding them to the user's cart without their consent is not!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;At best, a small proportion of users will notice the extra item and decide it's useful enough to buy.&lt;/li&gt;
&lt;li&gt;A larger proportion will remove it.&lt;/li&gt;
&lt;li&gt;Some will not notice and a proportion of those will demand a refund.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These activities increase sales at the expense of customer support, goodwill, and ongoing return purchases. Dealing with complaints and refunds can wipe out any short-term profitability gains.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-supernatural-stock-scarcity"&gt;
  &lt;/a&gt;
  9. Supernatural Stock Scarcity
&lt;/h2&gt;

&lt;p&gt;It's useful to know when an item's in-stock but some sites stretch the credibility to breaking point. The more information they give, the less believable their claims:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"BUY NOW! 1 item in stock, 26 were bought today, and 423 people are viewing!"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can even encounter these high-pressure tactics when buying infinitely-available digital products.&lt;/p&gt;

&lt;p&gt;Users soon become suspicious when items remain in stock for many days. Will they reconsider their purchase when they cannot trust the marketing messages?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-creepy-cookie-cancellations"&gt;
  &lt;/a&gt;
  10. Creepy Cookie Cancellations
&lt;/h2&gt;

&lt;p&gt;The EU's General Data Protection Regulation (GDPR) requires sites to show opt-out options for non-essential cookies and other tracking technologies. Other countries have similar rules.&lt;/p&gt;

&lt;p&gt;Most site visitors click "agree" and move on. Opting out should be just as easy yet some sites require you to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;wade through pages/tabs of jargon before finding the options&lt;/li&gt;
&lt;li&gt;click hundreds of opt-out checkboxes, and&lt;/li&gt;
&lt;li&gt;wait for up to a minute while they "process your preferences" (manually, perhaps?)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These dark patterns are on the fringes of legality so be wary of fines or increased lawyer costs. Making it difficult to opt-out also gives the impression you have something to hide.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-woeful-web-performance"&gt;
  &lt;/a&gt;
  11. Woeful Web Performance
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://httparchive.org/reports/page-weight"&gt;httparchive.org&lt;/a&gt; reports that the average web page takes seven seconds to load on a desktop device, twenty seconds on mobile, makes 70 HTTP requests, and downloads more 2MB of data. &lt;a href="https://www.websitecarbon.com/"&gt;websitecarbon.com&lt;/a&gt; claims that every page view emits 1.3g of CO² into the atmosphere.&lt;/p&gt;

&lt;p&gt;No one wants a slow site but adding features is often a higher priority than addressing performance. Given it's possible to create a &lt;a href="https://js13kgames.com/games/q1k3/index.html"&gt;playable Quake clone in 13Kb&lt;/a&gt;, you have to question why two paragraphs of text on an "About us" page requires 154 times more code?&lt;/p&gt;

&lt;p&gt;Addressing performance requires a combination of techniques but there is one rule to remember: &lt;em&gt;don't send so much stuff!&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#12-scary-social-media"&gt;
  &lt;/a&gt;
  12. Scary Social Media
&lt;/h2&gt;

&lt;p&gt;Social media widgets such as "Like" buttons look innocent but each one adds hundreds of kilobytes of JavaScript code to the page. It affects performance and is a security risk given they run with the same permissions as the site's own JavaScript. The widgets track users even if they're not clicked -- &lt;em&gt;which they're not&lt;/em&gt;. Fewer than 1% of people will click one.&lt;/p&gt;

&lt;p&gt;The widgets are also unnecessary. Social media sites provide standard "sharing" links which are lightweight and have no performance, security, or privacy risk:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Email: &lt;code&gt;mailto:?subject=[title]&amp;amp;body=[url]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Twitter: &lt;code&gt;https://twitter.com/share?url=[url]&amp;amp;text=[title]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Facebook: &lt;code&gt;https://www.facebook.com/sharer.php?u=[url]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;LinkedIn: &lt;code&gt;https://www.linkedin.com/shareArticle?url=[url]&amp;amp;title=[title]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Reddit: &lt;code&gt;https://reddit.com/submit?url=[url]&amp;amp;title=[title]&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;[url]&lt;/code&gt; is the current page URL and &lt;code&gt;[title]&lt;/code&gt; is the main heading. You could open them in popup windows like the real widgets but it's up to you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#13-chilling-captchas"&gt;
  &lt;/a&gt;
  13. Chilling CAPTCHAs
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Completely Automated Public Turing test to tell Computers and Humans Apart&lt;/strong&gt; help to prevent bots from accessing or scraping web systems. You may be asked to enter indecipherable text or click squares which contain buses. &lt;em&gt;(Does a coach count? What about a toy bus? Is there a bus in the distance out of shot?!)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;CAPTCHAs have three problems:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;They're difficult for able-bodied humans with 20:20 vision. How do those with visual or other impairments cope?&lt;/li&gt;
&lt;li&gt;They must become more difficult as AI techniques improve.&lt;/li&gt;
&lt;li&gt;They place the onus for security on users -- &lt;em&gt;not the site owners who benefit most!&lt;/em&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;CAPTCHAs are overkill on most websites. Better alternatives include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hidden honeypot fields which block form submission when bots add data.&lt;/li&gt;
&lt;li&gt;Checking that keyboard events such as &lt;code&gt;input&lt;/code&gt; or &lt;code&gt;keydown&lt;/code&gt; fire appropriately.&lt;/li&gt;
&lt;li&gt;Checking the time it takes to complete and submit a form -- a human will take more time than a bot.&lt;/li&gt;
&lt;li&gt;A two-stage submission process which asks the user to confirm their data before it's sent.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These methods are easy for humans but halt the majority of bots. It becomes necessary to reprogram them with techniques specific to your site.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-weird-wide-web"&gt;
  &lt;/a&gt;
  The Weird Wide Web
&lt;/h2&gt;

&lt;p&gt;The web is a fantastic resource but dubious practices can taint user experience. Sites use dark patterns because they work -- but they're only effective over the short-term. Visitors eventually become wise to the techniques and go elsewhere.&lt;/p&gt;

&lt;p&gt;Avoid confusing people, build trust in your brand, and you'll retain customers without having to resort to dark patterns.&lt;/p&gt;

&lt;p&gt;Happy Halloween!&lt;/p&gt;

</description>
      <category>design</category>
      <category>webdev</category>
      <category>halloween</category>
    </item>
  </channel>
</rss>
