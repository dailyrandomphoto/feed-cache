<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>sticky navbar on scroll reactJS [Updated]</title>
      <author>Abod Micheal (he/him)</author>
      <pubDate>Sat, 25 Sep 2021 08:47:09 +0000</pubDate>
      <link>https://dev.to/abodmicheal/sticky-navbar-on-scroll-reactjs-updated-ngj</link>
      <guid>https://dev.to/abodmicheal/sticky-navbar-on-scroll-reactjs-updated-ngj</guid>
      <description>&lt;p&gt;I gave a tutorial on how to add sticky navbar onscroll in react js, and most people got problem in adding the code to their project and I decided to create a library which would be much easier. &lt;br&gt;
GIT &lt;a href="https://github.com/abodmicheal/react-js-stickynav"&gt;https://github.com/abodmicheal/react-js-stickynav&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;NPM &lt;br&gt;
&lt;a href="https://www.npmjs.com/package/react-js-stickynav"&gt;https://www.npmjs.com/package/react-js-stickynav&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#reactjsstickynav"&gt;
  &lt;/a&gt;
  react-js-stickynav
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;A simple react js nav bar onscroll&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/react-js-stickynav"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ACAaNA3I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/react-js-stickynav.svg" alt="NPM"&gt;&lt;/a&gt; &lt;a href="https://standardjs.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--atFcFrlw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/code_style-standard-brightgreen.svg" alt="JavaScript Style Guide"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;
  &lt;a href="https://i.giphy.com/media/zX9bxvB59xUnuudEMm/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/zX9bxvB59xUnuudEMm/giphy.gif"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install"&gt;
  &lt;/a&gt;
  Install
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save&lt;/span&gt; react-js-stickynav
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;length = navigation length , which is the length you want you want your sticky Nav to appear&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StickyNav&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-js-stickynav&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-js-stickynav/dist/index.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt; &lt;span class="na"&gt;jsx&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`
        .nav {
          transition: all 0.1s linear;
          position: fixed;
          z-index: 2000;
          padding: 20px;
        }
        .scrollNav {
          transition: all 0.5s ease-in;
          z-index: 2000;
          background: #ffffff;
          width: 100%;
          border-bottom: 1px solid #dddddd;
        }
        .styl {
          padding-top: 80px;
        }
      `&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StickyNav&lt;/span&gt; &lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'40'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;insert your Navbar Component here&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StickyNav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'styl'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Creating a Single-Page App in React using React Router by kirupa |
          filed under Learning React Now that you've familiarized yourself with
          the basics of how to work with React, let's kick things up a few
          notches. What we are going to do is use React to build a simple
          single-page app (also referred to as SPA by the cool kids...and people
          living in Scandinavia). Like we talked about in our React introduction
          forever ago, single-page apps are different from the more traditional
          multi-page apps that you see everywhere. The biggest difference is
          that navigating a single-page app doesn't involve going to an entirely
          new page. Instead, your pages (commonly known as views in this
          context) typically load inline within the same page itself: When you
          are loading content inline, things get a little challenging. The hard
          part is not loading the content itself. That is relatively easy. The
          hard part is making sure that single-page apps behave in a way that is
          consistent with what your users are used to. More specifically, when
          users navigate your app, they expect that: The URL displayed in the
          address bar always reflects the thing that they are viewing. They can
          use the browser's back and forward buttons...successfully. They can
          navigate to a particular view (aka deep link) directly using the
          appropriate URL. With multi-page apps, these three things come for
          free. There is nothing extra you have to do for any of it. With
          single-page apps, because you aren't navigating to an entirely new
          page, you have to do real work to deal with these three things that
          your users expect to just work. You need to ensure that navigating
          within your app adjusts the URL appropriately. You need to ensure your
          browser's history is properly synchronized with
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h5&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Creating a Single-Page App in React using React Router by kirupa |
          filed under Learning React Now that you've familiarized yourself with
          the basics of how to work with React, let's kick things up a few
          notches. What we are going to do is use React to build a simple
          single-page app (also referred to as SPA by the cool kids...and people
          living in Scandinavia). Like we talked about in our React introduction
          forever ago, single-page apps are different from the more traditional
          multi-page apps that you see everywhere. The biggest difference is
          that navigating a single-page app doesn't involve going to an entirely
          new page. Instead, your pages (commonly known as views in this
          context) typically load inline within the same page itself: When you
          are loading content inline, things get a little challenging. The hard
          part is not loading the content itself. That is relatively easy. The
          hard part is making sure that single-page apps behave in a way that is
          consistent with what your users are used to. More specifically, when
          users navigate your app, they expect that: The URL displayed in the
          address bar always reflects the thing that they are viewing. They can
          use the browser's back and forward buttons...successfully. They can
          navigate to a particular view (aka deep link) directly using the
          appropriate URL. With multi-page apps, these three things come for
          free. There is nothing extra you have to do for any of it. With
          single-page apps, because you aren't navigating to an entirely new
          page, you have to do real work to deal with these three things that
          your users expect to just work. You need to ensure that navigating
          within your app adjusts the URL appropriately. You need to ensure your
          browser's history is properly synchronized with
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h5&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--syPc6Wx9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/abodmicheal/react-js-stickynav/main/Capture.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--syPc6Wx9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/abodmicheal/react-js-stickynav/main/Capture.PNG"&gt;&lt;/a&gt;&lt;br&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7YG0Je8l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/abodmicheal/react-js-stickynav/main/Capture2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7YG0Je8l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/abodmicheal/react-js-stickynav/main/Capture2.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#license"&gt;
  &lt;/a&gt;
  License
&lt;/h2&gt;

&lt;p&gt;MIT © &lt;a href="https://github.com/abodmicheal/react-js-stickynav"&gt;abodmicheal&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>help</category>
      <category>techtalks</category>
    </item>
    <item>
      <title>Have you tried functional programming?</title>
      <author>Madza</author>
      <pubDate>Sat, 25 Sep 2021 08:12:04 +0000</pubDate>
      <link>https://dev.to/madza/have-you-tried-functional-programming-11gg</link>
      <guid>https://dev.to/madza/have-you-tried-functional-programming-11gg</guid>
      <description>&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Functional_programming"&gt;Functional programming&lt;/a&gt; is a programming paradigm where programs are constructed by applying and composing functions.&lt;/p&gt;

&lt;p&gt;Some of the most popular programming languages include &lt;a href="https://www.haskell.org/"&gt;Haskell&lt;/a&gt;, &lt;a href="https://clojure.org/"&gt;Clojure&lt;/a&gt;, &lt;a href="https://www.scala-lang.org/"&gt;Scala&lt;/a&gt;, &lt;a href="https://www.erlang.org/"&gt;Erlang&lt;/a&gt;, &lt;a href="https://fsharp.org/"&gt;F#&lt;/a&gt;, &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt;, etc.&lt;/p&gt;

&lt;p&gt;Have you ever tried Functional programming?&lt;br&gt;
Do you prefer it over Procedural or OOP paradigms?&lt;br&gt;
What are some practical examples you have built with it?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>programming</category>
      <category>haskell</category>
      <category>rust</category>
    </item>
    <item>
      <title>What calendar app do you use?</title>
      <author>Madza</author>
      <pubDate>Sat, 25 Sep 2021 07:37:29 +0000</pubDate>
      <link>https://dev.to/madza/what-calendar-app-do-you-use-2kjh</link>
      <guid>https://dev.to/madza/what-calendar-app-do-you-use-2kjh</guid>
      <description>&lt;p&gt;During our busy dev schedules a well-configured calendar app is essential tool as it helps you to organize your daily workflow, set reminders on approaching events and so on.&lt;/p&gt;

&lt;p&gt;I've been using &lt;a href="https://calendar.google.com/"&gt;Google Calendar&lt;/a&gt; for a long time and recently added the &lt;a href="https://chrome.google.com/webstore/detail/checker-plus-for-google-c/hkhggnncdpfibdhinjiegagmopldibha"&gt;Checker Plus&lt;/a&gt; extension so I have access to it from my browser bar.&lt;/p&gt;

&lt;p&gt;What calendar app do you use and what are your favorite features about it? Any productivity tips you would recommend?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>productivity</category>
      <category>calendar</category>
    </item>
    <item>
      <title>JavaScript Best Practices for Beginners</title>
      <author>Syed Afroz Pasha</author>
      <pubDate>Sat, 25 Sep 2021 07:26:32 +0000</pubDate>
      <link>https://dev.to/syedafrozpasha/javascript-best-practices-for-beginners-11ec</link>
      <guid>https://dev.to/syedafrozpasha/javascript-best-practices-for-beginners-11ec</guid>
      <description>&lt;p&gt;Let us quickly discuss some of the best practices which you can follow while working with JavaScript. I have covered some of the basic stuff which we will be using often in our day-to-day programming.&lt;/p&gt;

&lt;p&gt;Let’s get started.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#always-define-variables-using-let-or-const"&gt;
  &lt;/a&gt;
  Always define variables using let or const
&lt;/h3&gt;

&lt;p&gt;By defining variables using &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt;, we can avoid problems such as&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Pollution of global variables and namespaces&lt;/strong&gt;: Let’s say your application uses a global variable &lt;code&gt;title&lt;/code&gt;. In some other part of your code, you have defined a variable &lt;code&gt;title&lt;/code&gt; (without &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt;) again, but this variable is specific to that function and it is nowhere related to the global variable &lt;code&gt;title&lt;/code&gt;. Then there might be a chance this title variable might mutate (change) the global value.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WOyjbtOw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8bpuxdemzv5quddvabs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WOyjbtOw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8bpuxdemzv5quddvabs.png" alt="Pollution of global variables"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If we define the variables using &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt;, the variable will be blocked scoped meaning it’s only available to that block of code. Hence it will not be able to change the global variable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0yuNzZzP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/of2c3kp6f5lpe9c8xagd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0yuNzZzP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/of2c3kp6f5lpe9c8xagd.png" alt="Remediation for pollution of global variables"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Exposing sensitive data&lt;/strong&gt;: Let’s say you are storing the API key in a global variable (which you defined without &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt;), then this API key will be stored in the global object (&lt;code&gt;window&lt;/code&gt;) and can be easily accessed by anyone visiting your site.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GmDWVAx2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ailjp7w3jc4qz6rbyebq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GmDWVAx2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ailjp7w3jc4qz6rbyebq.png" alt="Sensitive data can be accessed from the global object (window)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Again if we define the variables using &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt;, the variable will be blocked scoped and it will not be exposed to the global object (&lt;code&gt;window&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#always-define-conditions-correctly"&gt;
  &lt;/a&gt;
  Always define conditions correctly
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;If you want to check a variable for falsy values (&lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, an empty string), simply use NOT operator (&lt;code&gt;!&lt;/code&gt;) instead of checking each and every falsy value.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m-kPb-2O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g96zgwb6zsjp9q9kbg6v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m-kPb-2O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g96zgwb6zsjp9q9kbg6v.png" alt="Checking falsy values"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you want to check if a key/value is present in an object. You can safely check one by one if that key/value exists using AND operator (&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U_Cz1HnS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6bu22s9zplamfjivvlw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U_Cz1HnS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6bu22s9zplamfjivvlw.png" alt="Checking if object key/value exists or not"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can also use optional chaining to check whether a key/value is present in an object or not.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oO754zen--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kd6u9y9zv7bwpx3olf2q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oO754zen--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kd6u9y9zv7bwpx3olf2q.png" alt="Optional Chaining"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#semicolon"&gt;
  &lt;/a&gt;
  Semicolon
&lt;/h3&gt;

&lt;p&gt;Before we dive deep, here is an activity for you. Can you guess what will be the output of the below function?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uWYv2Fh4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kld2t6vem77knu7cmvse.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uWYv2Fh4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kld2t6vem77knu7cmvse.png" alt="What will be the output of the console?"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;: The output will be &lt;code&gt;undefined&lt;/code&gt; 😲. But how? This is because of automatic semicolon insertion at the time JavaScript parses the code. If the code is not formatted correctly like in the above example, JavaScript will add a semicolon(&lt;code&gt;;&lt;/code&gt;) to the end of the return statement (&lt;code&gt;return;&lt;/code&gt;) and it thinks that no value is returned. So returns back value as &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Automatic Semicolon Insertion (ASI)&lt;/strong&gt;: At the time of parsing the code, JavaScript automatically inserts a semicolon at the end of each token. This sometimes may cause unexpected behavior of code.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r9Svnn7---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8pdq3h1cz481ko920qye.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r9Svnn7---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8pdq3h1cz481ko920qye.png" alt="Automatic Semicolon Insertion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is also recommended to add a semicolon at the end of each statement of the code to avoid ASI problems.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#brackets"&gt;
  &lt;/a&gt;
  Brackets
&lt;/h3&gt;

&lt;p&gt;People from different programming language backgrounds tend to start the brackets in the next line. But in JavaScript, this can cause unexpected behavior of the code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Never start the bracket in the next line.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cSFSqb6b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wk63l2qdhbi8mtgriu2a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cSFSqb6b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wk63l2qdhbi8mtgriu2a.png" alt="BAD Brackets"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Always start the bracket just after the end of the statement (in the same line).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tfBGxfun--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atup7d9lwhkclevysh9f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tfBGxfun--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atup7d9lwhkclevysh9f.png" alt="GOOD bracket"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;We can avoid these problems, by formatting the code using &lt;a href="https://prettier.io/"&gt;Prettier&lt;/a&gt; or any other formatting tools/libraries.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#template-literals"&gt;
  &lt;/a&gt;
  Template Literals
&lt;/h3&gt;

&lt;p&gt;Template literal is used to define a string value. Template literals are enclosed by the backtick and dynamic values/placeholder can be passed using the dollar symbol &lt;code&gt;${dynamicValue}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EjbnIJib--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0idpppngxagb4xr5q3h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EjbnIJib--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0idpppngxagb4xr5q3h.png" alt="Example for Template Literal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Below are some of the use cases of template literals.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Template literals can be used to define dynamic HTML content.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ecWEzv3J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vkkfppk48bbkg34uvaai.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ecWEzv3J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vkkfppk48bbkg34uvaai.png" alt="Defining dynamic HTML content using template literals"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Template literals can be used to define database queries&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QckRHrnm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wlwwmfc6y0rhb0pm25g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QckRHrnm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wlwwmfc6y0rhb0pm25g.png" alt="Defining DB queries using template literals"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Template literals can be used to define dynamic shorts URLs (single line).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DT6K_Jy1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gd6mvl6klprw1dhqkpqq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DT6K_Jy1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gd6mvl6klprw1dhqkpqq.png" alt="Defining short URLs using template literals"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Do not use&lt;/strong&gt; template literals to define long URLs with multi-lines.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pgVCdiI1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8g7pt7q32wmp4w5wx2sy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pgVCdiI1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8g7pt7q32wmp4w5wx2sy.png" alt="Avoid template literals for long multi-line URLs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;We can avoid most of the problems discussed in this article by using linters and code formatters. Here are some of the popular linters and code formatters.&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;Linters&lt;/strong&gt;: &lt;a href="https://eslint.org/"&gt;ESLint&lt;/a&gt; , &lt;a href="https://www.jslint.com/"&gt;JSLint&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;Code formatters&lt;/strong&gt;: &lt;a href="https://prettier.io/"&gt;Prettier&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That’s all I have for today. Hope you enjoyed it. 😉&lt;/p&gt;

&lt;p&gt;You also check out my article on &lt;a href="https://dev.to/syedafrozpasha/naming-variables-functions-and-classes-in-javascript-41m4"&gt;Naming variables and functions in JavaScript&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you for stopping by. If you like the content do support me and follow me for more content like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/SyedAfrozPasha"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ch-X4ay0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520coffee%26emoji%3D%26slug%3DSyedAfrozPasha%26button_colour%3DFFDD00%26font_colour%3D000000%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3Dffffff"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Connect with me on &lt;a href="https://www.linkedin.com/in/syedafrozpasha/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://twitter.com/SyedAfroz_Pasha"&gt;Twitter&lt;/a&gt;, and &lt;a href="https://github.com/SyedAfrozPasha"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How to run JavaScript in Visual Studio Code</title>
      <author>Syed Saadullah Shah</author>
      <pubDate>Sat, 25 Sep 2021 07:06:34 +0000</pubDate>
      <link>https://dev.to/wpsyed/how-to-run-javascript-in-visual-studio-code-51l1</link>
      <guid>https://dev.to/wpsyed/how-to-run-javascript-in-visual-studio-code-51l1</guid>
      <description>&lt;p&gt;VS code is a text editor made by Microsoft and it is an open-source project. It has extensions and other features for debugging your javascript, which we will talk about in this post.&lt;/p&gt;

&lt;p&gt;Installing vs code is easy, just visit vs code's website and get the installer here: &lt;a href="https://code.visualstudio.com/download"&gt;https://code.visualstudio.com/download&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After you install vs code, you can create a new file (ctrl+n), name it something like "test". For this example we use test.js. You can also click on the folder icon and add the javascript there:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;html &amp;gt; &amp;lt; body &amp;gt; &amp;lt;!-- // --&amp;gt;&amp;lt;!-- Placeholder for VS Code generated HTML / --&amp;gt; &amp;lt; script src = &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &amp;gt;&amp;lt;/ script &amp;gt; &amp;lt;/ body &amp;gt; &amp;lt;/ html&amp;gt;
&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that's done, put "console.log('hello world')" in your javascript file! The console will pop up automatically when you click on the vs code's running tab. In the vs code window, you'll see something that says "Attach". Once you click on attach, a new vs code window will pop up and it will run your javascript file!&lt;/p&gt;

&lt;p&gt;VS code also has extensions so you can debug your javascript better. Such as debugging multiple browsers at once or have a debugger tell vs code what to do when an exception is thrown. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.javascript"&gt;To view, a list of some vs code extensions visit:&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-web-server-in-vs-code"&gt;
  &lt;/a&gt;
  Creating a Web Server in VS Code
&lt;/h2&gt;

&lt;p&gt;Now that's over with let's get into how to create a web server with vs code! You're going to want to drag and drop 2 files into vs code they are index.html and app.js. Open vs code's "settings" by right-clicking on the file name vs setting :&lt;/p&gt;

&lt;p&gt;Click on settings, then go to "ignored files" and add ".git":&lt;/p&gt;

&lt;p&gt;Then you want to click on "open vs editor window here", so vs code knows how to run your program:&lt;/p&gt;

&lt;p&gt;Now you can edit your index.html file! You can also see that vs code has already added some stuff for us since it opens automatically:(but we're not going to use this yet)&lt;/p&gt;

&lt;p&gt;VS code will try to help you out with minimal errors by telling you that vs code has attached itself to your app.js file, it also tells you that vs code's &lt;a href="https://wpsyed.com"&gt;debugger is running&lt;/a&gt; on port 9229.&lt;/p&gt;

&lt;p&gt;To run vs code, click on the vs code running tab and click "F5" or hit "F5". To debug HTML files, go under Tools/HTML sub vs sub ctrl+p sub debug or hit F5 :&lt;/p&gt;

&lt;p&gt;You can edit index.html, app.js, and any other files in there! Also if you want vs code to automatically open this folder after closing it just do:&lt;/p&gt;

&lt;p&gt;Right Click-&amp;gt; Open Folder Here&lt;/p&gt;

&lt;p&gt;The end! Enjoy javascript debugging with vs code!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>vscode</category>
      <category>devops</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Most Useful Visual Studio Code Shortcuts To Improve Your Productivity</title>
      <author>Yogesh Chavan</author>
      <pubDate>Sat, 25 Sep 2021 07:06:22 +0000</pubDate>
      <link>https://dev.to/myogeshchavan97/most-useful-visual-studio-code-shortcuts-to-improve-your-productivity-2kh4</link>
      <guid>https://dev.to/myogeshchavan97/most-useful-visual-studio-code-shortcuts-to-improve-your-productivity-2kh4</guid>
      <description>&lt;p&gt;Visual Studio Code is the most widely used and most loved code editor for application development.&lt;/p&gt;

&lt;p&gt;So in this article, we will see some of the widely used shortcuts which make developers' life easy and coding faster. So let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-quickly-search-file"&gt;
  &lt;/a&gt;
  1. Quickly Search File
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#on-mac"&gt;
  &lt;/a&gt;
  On Mac
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Cmd&lt;/code&gt; + &lt;code&gt;P&lt;/code&gt; : Search file by name&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#on-windows"&gt;
  &lt;/a&gt;
  On Windows
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;P&lt;/code&gt; : Search file by name&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--neaGAxq9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632552240822/BK7fYMir2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--neaGAxq9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632552240822/BK7fYMir2.gif" alt="find_file.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-quickly-delete-the-current-line"&gt;
  &lt;/a&gt;
  2. Quickly Delete The Current Line
&lt;/h2&gt;

&lt;p&gt;To delete the current line where the cursor is present, you can use the following shortcut.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#on-mac"&gt;
  &lt;/a&gt;
  On Mac
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Cmd&lt;/code&gt; + &lt;code&gt;X&lt;/code&gt; : Delete current line&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#on-windows"&gt;
  &lt;/a&gt;
  On Windows
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;X&lt;/code&gt; : Delete current line&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vbCBXLi7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632552264989/tmLtoMXulg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vbCBXLi7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632552264989/tmLtoMXulg.gif" alt="delete_line.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-add-multiple-cursors-for-text-selection"&gt;
  &lt;/a&gt;
  3. Add Multiple Cursors for Text Selection
&lt;/h2&gt;

&lt;p&gt;This is one of my favorite shortcuts. If you want to change the similar text at multiple places, then you can use the multiple cursors shortcut.&lt;/p&gt;

&lt;p&gt;For that, first, manually select the text you want to replace or change and then press the following shortcuts depending on your operating system and then you can type anything that you want to add or replace with.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#on-mac"&gt;
  &lt;/a&gt;
  On Mac
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Cmd&lt;/code&gt; + &lt;code&gt;D&lt;/code&gt; : Select next matching text&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Cmd&lt;/code&gt; + &lt;code&gt;U&lt;/code&gt; : Undo the last selected matching text&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#on-windows"&gt;
  &lt;/a&gt;
  On Windows
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;D&lt;/code&gt; : Select next matching text&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;U&lt;/code&gt; : Undo the last selected matching text&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JioL4El1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632552282790/U1euOIuD3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JioL4El1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632552282790/U1euOIuD3.gif" alt="multiple_cursors.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-navigate-back-and-forth-between-the-files"&gt;
  &lt;/a&gt;
  4. Navigate Back and Forth Between the Files
&lt;/h2&gt;

&lt;p&gt;To Goto any function or component, we do &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;Click&lt;/code&gt; but later we can lose track of where we came from. Therefore, we can use the following shortcut to know where our cursor was last time.&lt;/p&gt;

&lt;p&gt;This shortcut comes really handy when debugging code when jumping between the code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#on-mac"&gt;
  &lt;/a&gt;
  On Mac
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;-&lt;/code&gt; : navigate backward&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;-&lt;/code&gt; : navigate forward&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#on-windows"&gt;
  &lt;/a&gt;
  On Windows
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Alt&lt;/code&gt; + &lt;code&gt;←&lt;/code&gt;  :  navigate backward&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Alt&lt;/code&gt; +  &lt;code&gt;→&lt;/code&gt; : navigate forward&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0wdCzq5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632552298738/rS4FvQsEZ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0wdCzq5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632552298738/rS4FvQsEZ.gif" alt="move_back_forth.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-toggle-sidebar"&gt;
  &lt;/a&gt;
  5. Toggle Sidebar
&lt;/h2&gt;

&lt;p&gt;I like to code in full-screen mode in VS Code so there is less distraction.&lt;/p&gt;

&lt;p&gt;You can easily toggle the sidebar using the following shortcut.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#on-mac"&gt;
  &lt;/a&gt;
  On Mac
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Cmd&lt;/code&gt; + &lt;code&gt;B&lt;/code&gt; : Hide/Show Sidebar&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#on-windows"&gt;
  &lt;/a&gt;
  On Windows
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;B&lt;/code&gt; : Hide/Show Sidebar&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---MPqRTMD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632552320640/qM__PqsSk.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---MPqRTMD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632552320640/qM__PqsSk.gif" alt="toggle_sidebar.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This shortcut also comes in handy when comparing changes done in the file and cannot be seen clearly because of the small size window as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Li_qSAsv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632552335373/zx3eyDID9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Li_qSAsv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632552335373/zx3eyDID9.gif" alt="toggle_compare.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-open-integrated-terminal"&gt;
  &lt;/a&gt;
  6. Open Integrated Terminal
&lt;/h2&gt;

&lt;p&gt;Instead of opening a separate terminal/command prompt, using this shortcut, you can open a terminal that is integrated right into the VS Code.&lt;/p&gt;

&lt;p&gt;This keyboard shortcut is the same for windows and Mac.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Ctrl&lt;/code&gt; + `: ( Ctrl + tilde character which is just before the digit 1 on the keyboard)&lt;/p&gt;

&lt;p&gt;Once one terminal is opened, you can open another terminal by clicking the + sign.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CSReitbr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632552355227/jOjlV42Y-.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CSReitbr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632552355227/jOjlV42Y-.gif" alt="integrated_terminal.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The nice thing about opening an integrated terminal is that the terminal automatically opens in your project folder so you don't need to use the &lt;code&gt;cd&lt;/code&gt; command to navigate to your project folder. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-navigate-to-specific-line-number-in-a-file"&gt;
  &lt;/a&gt;
  7. Navigate to Specific Line Number In a File
&lt;/h2&gt;

&lt;p&gt;If some error occurs in the application, you might see the filename along with the line number being displayed.&lt;/p&gt;

&lt;p&gt;If the file is larger it's tedious to scroll up and down to go to a specific line. So instead you can use the following shortcut to directly go to that specific line.&lt;/p&gt;

&lt;p&gt;This keyboard shortcut is the same for windows and Mac.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;G&lt;/code&gt; - Go to specific line number&lt;/p&gt;

&lt;p&gt;After pressing the above shortcut, a palette will open with &lt;code&gt;:&lt;/code&gt; already added to it. Enter the line number you want to go to and hit enter to go directly to that line.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Yr8rJhs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632552379336/Jgm5p-ueP.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Yr8rJhs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632552379336/Jgm5p-ueP.gif" alt="goto_line.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-search-text-in-all-the-files"&gt;
  &lt;/a&gt;
  8. Search Text In All The Files
&lt;/h2&gt;

&lt;p&gt;If you want to search for some text in all the files in the project, use the following shortcut.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#on-mac"&gt;
  &lt;/a&gt;
  On Mac
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Cmd&lt;/code&gt; + &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;F&lt;/code&gt; : Search text in files&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#on-windows"&gt;
  &lt;/a&gt;
  On Windows
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;F&lt;/code&gt; : Search text in files&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MRXXKuaT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632552397597/J4Fsbatd0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MRXXKuaT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632552397597/J4Fsbatd0.gif" alt="find_all.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see in the above Gif, we have clicked on the &lt;code&gt;Aa&lt;/code&gt; icon, If we want to search for the exact match for the text.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-add-or-remove-single-line-comment"&gt;
  &lt;/a&gt;
  9. Add or Remove Single Line Comment
&lt;/h2&gt;

&lt;p&gt;Using this shortcut you can quickly add or remove the single-line comment.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#on-mac"&gt;
  &lt;/a&gt;
  On Mac
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Cmd&lt;/code&gt; + &lt;code&gt;/&lt;/code&gt; :  Toggle the single-line comment&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#on-windows"&gt;
  &lt;/a&gt;
  On Windows
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;/&lt;/code&gt; : Toggle the single-line comment&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8ADr9Ega--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632552418634/Fkw1o1U39.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ADr9Ega--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632552418634/Fkw1o1U39.gif" alt="toggle_comment.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-quickly-move-lines-up-and-down"&gt;
  &lt;/a&gt;
  10. Quickly Move Lines Up And Down
&lt;/h2&gt;

&lt;p&gt;Using this shortcut you can quickly move any line after or before any other line.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#on-mac"&gt;
  &lt;/a&gt;
  On Mac
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Option&lt;/code&gt; + &lt;code&gt;↓&lt;/code&gt; :  Move line down&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Option&lt;/code&gt; + &lt;code&gt;↑&lt;/code&gt; :  Move line up&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#on-windows"&gt;
  &lt;/a&gt;
  On Windows
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Alt&lt;/code&gt; + &lt;code&gt;↓&lt;/code&gt; :  Move line down&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Alt&lt;/code&gt; + &lt;code&gt;↑&lt;/code&gt; :  Move line up&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p9tap2pb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632552451865/XI1VS5Y5G.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p9tap2pb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632552451865/XI1VS5Y5G.gif" alt="move_line_up_down.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-duplicate-lines"&gt;
  &lt;/a&gt;
  11. Duplicate Lines
&lt;/h2&gt;

&lt;p&gt;Using this shortcut you can quickly duplicate lines of code to avoid writing repetitive code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#on-mac"&gt;
  &lt;/a&gt;
  On Mac
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Option&lt;/code&gt; + &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;↓&lt;/code&gt; :  Duplicate line down&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Option&lt;/code&gt; + &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;↑&lt;/code&gt; :  Duplicate line up&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#on-windows"&gt;
  &lt;/a&gt;
  On Windows
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;Alt&lt;/code&gt; + &lt;code&gt;↓&lt;/code&gt; :  Duplicate line down&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;Alt&lt;/code&gt; + &lt;code&gt;↑&lt;/code&gt; :  Duplicate line up&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gfFXSQiW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632552468313/FUzI1iA_0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gfFXSQiW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632552468313/FUzI1iA_0.gif" alt="duplicate_lines.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#12-reopen-closed-filetab"&gt;
  &lt;/a&gt;
  12. Reopen Closed File/Tab
&lt;/h2&gt;

&lt;p&gt;Sometimes by mistake, we close any open file or tab which so in that case, you can use this shortcut to re-open that closed tabs. You can keep pressing this shortcut until your desired file is not opened.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#on-mac"&gt;
  &lt;/a&gt;
  On Mac
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Cmd&lt;/code&gt; + &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;T&lt;/code&gt; :  Re-open closed tab&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#on-windows"&gt;
  &lt;/a&gt;
  On Windows
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;T&lt;/code&gt; :  Re-open closed tab&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bv1nUTKF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632552490586/sgvlsfOiG.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bv1nUTKF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632552490586/sgvlsfOiG.gif" alt="reopen_tab.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#13-quickly-get-a-list-of-declarations-and-functions-in-a-file"&gt;
  &lt;/a&gt;
  13. Quickly Get A List of Declarations And Functions In a File
&lt;/h2&gt;

&lt;p&gt;This shortcut is the same for Windows and Mac and is really useful to find any function or declaration when the file contents are larger.&lt;/p&gt;

&lt;p&gt;Just press &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;G&lt;/code&gt; and remove the &lt;code&gt;:&lt;/code&gt; and type @ and you will see the list of declarations and functions.&lt;/p&gt;

&lt;p&gt;Then you can either type for quickly find the thing you want to navigate through the list using arrow keys.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l-3Tq_Yh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632552510708/JETFAuVT4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l-3Tq_Yh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632552510708/JETFAuVT4.gif" alt="find_declarations.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#14-find-all-keyboard-shortcuts"&gt;
  &lt;/a&gt;
  14. Find All Keyboard Shortcuts
&lt;/h2&gt;

&lt;p&gt;In addition to the above shortcuts, VS Code has a lot of other shortcuts which you can see by following the below steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Press &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;P&lt;/code&gt; (Windows) or &lt;code&gt;Cmd&lt;/code&gt; + &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;P&lt;/code&gt; (Mac)&lt;/li&gt;
&lt;li&gt;Search for the &lt;code&gt;shortcut&lt;/code&gt; text&lt;/li&gt;
&lt;li&gt;Select the menu &lt;code&gt;Preferences: Open Keyboard Shortcuts&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KlpXshvr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632552531770/q_oVpVT0p.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KlpXshvr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632552531770/q_oVpVT0p.gif" alt="shortcuts.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, you can see a list of all the available shortcuts and also edit the key binding for any of the shortcuts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h3&gt;

&lt;p&gt;Check out my recently published &lt;a href="https://master-redux.yogeshchavan.dev/"&gt;Mastering Redux&lt;/a&gt; course.&lt;/p&gt;

&lt;p&gt;In this course, you will build 3 apps along with a food ordering app and you'll learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic and advanced Redux&lt;/li&gt;
&lt;li&gt;How to manage the complex state of array and objects&lt;/li&gt;
&lt;li&gt;How to use multiple reducers to manage complex redux state&lt;/li&gt;
&lt;li&gt;How to debug Redux application&lt;/li&gt;
&lt;li&gt;How to use Redux in React using react-redux library to make your app reactive.&lt;/li&gt;
&lt;li&gt;How to use redux-thunk library to handle async API calls and much more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and then finally we'll build a complete &lt;a href="https://www.youtube.com/watch?v=2zaPDfCKAvM"&gt;food ordering app&lt;/a&gt; from scratch with stripe integration for accepting payments and deploy it to the production.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/3w0DGum"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Taa9-Eif--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gist.github.com/myogeshchavan97/98ae4f4ead57fde8d47fcf7641220b72/raw/c3e4265df4396d639a7938a83bffd570130483b1/banner.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Want to stay up to date with regular content regarding JavaScript, React, Node.js? &lt;a href="https://www.linkedin.com/in/yogesh-chavan97/"&gt;Follow me on LinkedIn&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/myogeshchavan97"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xG4nnUnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/default-yellow.png"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>node</category>
      <category>vscode</category>
    </item>
    <item>
      <title>I Design, You build! - Frontend Challenge #1</title>
      <author>Zernonia</author>
      <pubDate>Sat, 25 Sep 2021 07:03:59 +0000</pubDate>
      <link>https://dev.to/zernonia/i-design-you-build-frontend-challenge-1-158a</link>
      <guid>https://dev.to/zernonia/i-design-you-build-frontend-challenge-1-158a</guid>
      <description>&lt;h2&gt;
  &lt;a href="#challenge"&gt;
  &lt;/a&gt;
  Challenge
&lt;/h2&gt;

&lt;p&gt;Awesome &lt;strong&gt;Gradient, 3D&lt;/strong&gt; Space design with different kind of &lt;em&gt;Design Flavor&lt;/em&gt;. Create a homepage following the design. Fulfill Target and/or Extra below:&lt;/p&gt;

&lt;p&gt;Target:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;🎯 Target : User can see the similar design&lt;/li&gt;
&lt;li&gt;🎯 Target : Responsive design&lt;/li&gt;
&lt;li&gt;🎯 Target : On mobile, when I select the hamburger menu, I can see a navigation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Extra:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;🌟 Extra : Background blur  &lt;code&gt;tips: backdrop-filter: blur();&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;🌟 Extra : Animation, hover animation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;📃 Icon : &lt;a href="https://icones.js.org/collection/all"&gt;https://icones.js.org/collection/all&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📃 Hosting: &lt;a href="https://vercel.com/"&gt;https://vercel.com/&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;⚠ It will defeat the purpose of learning if you just copy and paste someone else's answer 😭!&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#start-coding"&gt;
  &lt;/a&gt;
  Start Coding!
&lt;/h2&gt;

&lt;p&gt;If you are ready to take on the challenge, then&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Bookmark this post so that you can submit it easier.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Right-click&lt;/strong&gt; &lt;a href="https://www.figma.com/file/hDcipE9zMuiDsYAkjcQuKw/Space?node-id=0%3A1"&gt;here&lt;/a&gt; and open &lt;strong&gt;Open link in a New Tab&lt;/strong&gt; to see the Figma Design.&lt;/li&gt;
&lt;li&gt;Enjoy coding! 🤩&lt;/li&gt;
&lt;li&gt;Come back to submit!&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;All the &lt;strong&gt;images&lt;/strong&gt; and &lt;strong&gt;assets&lt;/strong&gt; are free to use, and can be exported from the Figma Design.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.figma.com/file/hDcipE9zMuiDsYAkjcQuKw/Space?node-id=0%3A1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hevQhRsY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/akqho6affec7298p6hu7.png" alt="Zernonia Space Design"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#submission"&gt;
  &lt;/a&gt;
  Submission
&lt;/h2&gt;

&lt;p&gt;Once you've completed, come back to this post, and submit your solution using the following &lt;code&gt;template&lt;/code&gt; in the comment section. You are encouraged to &lt;strong&gt;comment&lt;/strong&gt; and &lt;strong&gt;upvotes&lt;/strong&gt; other's answer!&lt;/p&gt;

&lt;p&gt;Thank you!💘&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Feedback: This is awesome!

Demo: &amp;lt;url&amp;gt;
Github: &amp;lt;url&amp;gt;
Tech-Stack: Vue, TailwindCSS
Learning Outcome: 
  1. 
  2.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h2&gt;

&lt;p&gt;I share these design freely so that anyone who wanted to practice or challenge Web design be able to do so without paying other platform (&lt;em&gt;ahem) to get their **Figma Design&lt;/em&gt;*🎨 file. &lt;/p&gt;

&lt;p&gt;You are free to use the Design you've created in your portfolio. No copyright claims or anything.&lt;/p&gt;

&lt;p&gt;But if you are loving my work, you are most welcomed to follow me on &lt;code&gt;Dev.to&lt;/code&gt; and &lt;a href="https://twitter.com/zernonia"&gt;Twitter&lt;/a&gt; 😄&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-your-time-and-attention"&gt;
  &lt;/a&gt;
  Thank you for your time and attention!
&lt;/h3&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>Functions in JavaScript</title>
      <author>Dharmarajsinh Jethva </author>
      <pubDate>Sat, 25 Sep 2021 06:52:28 +0000</pubDate>
      <link>https://dev.to/gokukun/functions-in-javascript-3mp8</link>
      <guid>https://dev.to/gokukun/functions-in-javascript-3mp8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#functions-a-brief-history"&gt;
  &lt;/a&gt;
  Functions - A Brief History
&lt;/h2&gt;

&lt;p&gt;In the advent of programming, we created our systems using routines and subroutines. This, later, transformed to the creation of systems using programs, subprograms and functions. And, these days, we're only left with functions, at least that's what the majority of the programming community knows and works with everyday.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-functions-why-are-they-needed"&gt;
  &lt;/a&gt;
  What are Functions? Why are they needed?
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Functions&lt;/em&gt; are a group of statements, packaged as a single entity, that performs a certain task. They can be called upon or "invoked" many times. They can receive zero or more inputs and return zero or more outputs.&lt;/p&gt;

&lt;p&gt;For example, let's say we want to square a few numbers.&lt;/p&gt;

&lt;p&gt;An implementation without the use of functions would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;number2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;square_of_number2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;number2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;number2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;square_of_number2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;number3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;square_of_number3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;number3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;number3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;square_of_number3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's look at an implementation that is created using functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;square_of_number2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;square_of_number3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code looks so much cleaner just by comparing the above two methods.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-creating-functions"&gt;
  &lt;/a&gt;
  Advantages of Creating Functions
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Code looks clean and organized.&lt;/li&gt;
&lt;li&gt;DRY principle is followed.&lt;/li&gt;
&lt;li&gt;Enable reuse of code in the program.&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#ways-of-creating-functions-in-js"&gt;
  &lt;/a&gt;
  Ways of creating Functions in JS
&lt;/h2&gt;

&lt;p&gt;There are 4 ways of creating functions in JavaScript, each with their own unique subtleties. The order below denotes my preference of using these methods, from most used to never used.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Function Declarations (always named)&lt;/li&gt;
&lt;li&gt;Function Expressions (can be named or anonymous)&lt;/li&gt;
&lt;li&gt;Arrow Functions (always anonymous)&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;Function&lt;/code&gt; constructor (don't ever do it; security reasons and performance issues)&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#function-declaration"&gt;
  &lt;/a&gt;
  Function Declaration
&lt;/h2&gt;

&lt;p&gt;To &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#defining_functions"&gt; quote MDN &lt;/a&gt;,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A function definition (also called a function declaration, or function statement) consists of the function keyword, followed by:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The name of the function.&lt;/li&gt;
&lt;li&gt;A list of parameters to the function, enclosed in parentheses and separated by commas.&lt;/li&gt;
&lt;li&gt;The JavaScript statements that define the function, enclosed in curly brackets, {...}.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, if any JS statement starts literally with the &lt;em&gt;&lt;code&gt;function&lt;/code&gt;&lt;/em&gt; keyword, then it's a Function Declaration.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-prefer-using-function-declaration"&gt;
  &lt;/a&gt;
  Why prefer using Function Declaration?
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Standard syntax (found across languages)&lt;/li&gt;
&lt;li&gt;Only way to define a function which hoists&lt;/li&gt;
&lt;li&gt;Has a name attached to it; more readable error stack traces
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;calculateSquare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// hoisting&lt;/span&gt;
&lt;span class="c1"&gt;// OUTPUT: 4&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;calculateSquare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#parameters-amp-arguments"&gt;
  &lt;/a&gt;
  Parameters &amp;amp; Arguments
&lt;/h2&gt;

&lt;p&gt;The placeholder which accepts a value as an input in the function is called a Parameter.&lt;br&gt;
When declaring a function, we specify it's parameters.&lt;/p&gt;

&lt;p&gt;In the previous example code, &lt;code&gt;number&lt;/code&gt; is a parameter.&lt;/p&gt;

&lt;p&gt;The value passed into the function while it's being invoked is called an argument.&lt;/p&gt;

&lt;p&gt;In the previous example code, the value &lt;code&gt;2&lt;/code&gt; is an argument.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#default-parameters"&gt;
  &lt;/a&gt;
  Default Parameters
&lt;/h3&gt;

&lt;p&gt;Parameters can be assigned a default value. This default value is used when an argument value isn't passed into the function or if &lt;code&gt;undefined&lt;/code&gt; is passed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;defaultParamFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;param1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;some value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;defaultParamFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// no argument is passed&lt;/span&gt;
&lt;span class="c1"&gt;// OUTPUT: 'some value'&lt;/span&gt;

&lt;span class="nx"&gt;defaultParam&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;overridden&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// argument is passed&lt;/span&gt;
&lt;span class="c1"&gt;// OUTPUT: 'overridden'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#function-expressions"&gt;
  &lt;/a&gt;
  Function Expressions
&lt;/h2&gt;

&lt;p&gt;A different approach to creating a function is by using the Function Expressions syntax.&lt;/p&gt;

&lt;p&gt;These can be of 2 types: &lt;strong&gt;Named&lt;/strong&gt; Function Expressions and &lt;strong&gt;Anonymous&lt;/strong&gt; Function Expressions.&lt;/p&gt;

&lt;p&gt;Named Function Expressions are very uncommon. Very rarely encountered but should be used the most.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// named function expression&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;variable_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;function_name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// anonymous function expression&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;another_variable_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;My advice is to always name any and all functions expressions. The same reasoning that is used for why one should always use function declaration follows here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-use-named-function-expressions"&gt;
  &lt;/a&gt;
  Why use named function expressions?
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;More self documenting code&lt;/li&gt;
&lt;li&gt;More debuggable stack traces&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#iifes-immediately-invoked-function-expressions"&gt;
  &lt;/a&gt;
  IIFEs (Immediately Invoked Function Expressions)
&lt;/h2&gt;

&lt;p&gt;As the name suggests, these are function expressions which are invoked/called immediately where they're defined.&lt;/p&gt;

&lt;p&gt;The syntax involves wrapping the function into a set of parentheses () and then invoking it with another set of parentheses ().&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// function definition is wrapped in parentheses&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;immediately_invoked&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)();&lt;/span&gt; &lt;span class="c1"&gt;// notice the invoking set of parentheses&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Arguments can also be passed to IIFEs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;iife&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// argument 1 passed here&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#arrow-functions"&gt;
  &lt;/a&gt;
  Arrow Functions
&lt;/h2&gt;

&lt;p&gt;With arrow functions, &lt;code&gt;function&lt;/code&gt; keyword isn't used to define a function. Instead, a fat arrow &lt;code&gt;=&amp;gt;&lt;/code&gt; is used to define a function.&lt;/p&gt;

&lt;p&gt;Arrow functions are anonymous by definition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// syntax for defining an arrow function&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;function_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// more characters&lt;/span&gt;
    &lt;span class="c1"&gt;// function body&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// syntax for a normal function declaration&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;function_name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// less characters&lt;/span&gt;
    &lt;span class="c1"&gt;// function body&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't use arrow functions as a generic replacement of function declaration just because they &lt;em&gt;seem&lt;/em&gt; shorter to write. Because if we just compare the two defined functions in the above example, it's clearly visible that arrow functions take more characters to write them as compared to writing the same function in Function Declaration way (compare the characters in the first line of declaration).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-use-arrow-functions-why"&gt;
  &lt;/a&gt;
  Don't use Arrow Functions. Why?
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;They are syntactically anonymous which means while debugging, stack traces show errors in these functions as "Anonymous Function"&lt;/li&gt;
&lt;li&gt;It doesn't have a &lt;code&gt;this&lt;/code&gt; keyword. It binds &lt;code&gt;this&lt;/code&gt; lexically.(More about this in future posts)&lt;/li&gt;
&lt;li&gt;They only &lt;em&gt;seem&lt;/em&gt; shorter at a glance but take almost as much as or more characters than a function declaration.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#arrow-function-iifes"&gt;
  &lt;/a&gt;
  Arrow Function IIFEs
&lt;/h2&gt;

&lt;p&gt;IIFEs can also be defined using the arrow function syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// notice the first wrapping parenthesis&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#function-constructor"&gt;
  &lt;/a&gt;
  Function Constructor
&lt;/h2&gt;

&lt;p&gt;Functions can also be created using the Function Constructor syntax. But, it's advised not to use this syntax at all unless absolutely necessary. This creates function dynamically in the scope and these functions are only available to be called in the global scope.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// syntax

const variable_name = new Function('arg1', 'arg2', ..., 'argN', 'functionBody');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;square_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;return number*number;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;square_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// OUTPUT: 4&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fun fact: Function constructor can be invoked with or without the &lt;code&gt;new&lt;/code&gt; keyword.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#declaration-vs-expression-vs-arrow"&gt;
  &lt;/a&gt;
  Declaration vs Expression vs Arrow
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
// 01 Function Declaration
function function_name() {
    // body
}

// 02-a Function Expression (Named)

var variable_name = function function_name() {
        // body
}


// 02-b Function Expression (Anonymous)

var variable_name = function() {
        // body
}


// 03 Anonymous Arrow Function

var variable_name = () =&amp;gt; {
    // body
}

// 04 Function Constructor

var variable_name = new Function('param_name', 'function body');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To summarize, there are 4 different ways of creating functions in JavaScript. &lt;/p&gt;

&lt;p&gt;But, (in my opinion) prefer using Function Declaration over other types of function designs. Named Function Expression can also be used. Don't use Anonymous Function Expression and Arrow Function unless absolutely necessary and definitely not as a generic replacement for Function Declaration. Never use Function Constructor to create a function.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>functions</category>
      <category>lexicalscope</category>
    </item>
    <item>
      <title>Helm: Kubernetes package manager</title>
      <author>Piyush Bagani</author>
      <pubDate>Sat, 25 Sep 2021 06:29:29 +0000</pubDate>
      <link>https://dev.to/piyushbagani15/helm-kubernetes-package-manager-4ocb</link>
      <guid>https://dev.to/piyushbagani15/helm-kubernetes-package-manager-4ocb</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-helm-"&gt;
  &lt;/a&gt;
  What is Helm ??
&lt;/h2&gt;

&lt;p&gt;Helm is the first application package manager running atop Kubernetes. It allows describing the application structure through convenient helm-charts and managing it with simple commands. &lt;/p&gt;

&lt;p&gt;Helm provides the same basic feature set as many of the package managers you may already be familiar with, such as Debian’s apt, or Python’s pip.&lt;/p&gt;

&lt;p&gt;Helm can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install software.&lt;/li&gt;
&lt;li&gt;Automatically install software dependencies.&lt;/li&gt;
&lt;li&gt;Upgrade software.&lt;/li&gt;
&lt;li&gt;Configure software deployments.&lt;/li&gt;
&lt;li&gt;Fetch software packages from repositories.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Helm helps you to manage Kubernetes applications. Helm Charts helps you to install, manage and upgrade even the most complex applications. Helm is a third part tool that manages K8s package.&lt;/p&gt;

&lt;p&gt;Package in Kubernetes is known as Charts. Either we can download Charts from some repository or we can create our own custom chart. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#in-this-article-we-will-create-own-custom-chart"&gt;
  &lt;/a&gt;
  In this article we will create own custom chart.
&lt;/h3&gt;

&lt;p&gt;For this Interesting We'll use AWS Cloud for setting up Kubernetes Master and Kubernetes Slave. If you are interested in setting up this cluster you can read one of my another &lt;a href="https://dev.to/piyushbagani15/configuring-kubernetes-multinode-cluster-over-aws-using-ansible-2fhe"&gt;blog&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#here-well-integrate-jenkins-with-helm"&gt;
  &lt;/a&gt;
  Here We'll integrate Jenkins with Helm.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xXETyIJ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e502992lxlpfdf4nv5p0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xXETyIJ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e502992lxlpfdf4nv5p0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-helm"&gt;
  &lt;/a&gt;
  Installing Helm
&lt;/h3&gt;

&lt;p&gt;We have to install Helm in client side. Most common and preferred way is to install it from binary.&lt;br&gt;
Here you will find the link for downloading the binary of Helm Version 3&lt;br&gt;
&lt;a href="https://get.helm.sh/helm-v3.5.2-linux-amd64.tar.gz"&gt;https://get.helm.sh/helm-v3.5.2-linux-amd64.tar.gz&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j5tTNzsf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9xcl4jm6ofm81nnfwna6.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j5tTNzsf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9xcl4jm6ofm81nnfwna6.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Copy the directory linux-amd64/helm to /usr/bin/&lt;br&gt;
We can check the version of Helm by the below command.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;helm version
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;After setting up K8s Cluster let’s start creating our own custom charts. Create a workspace where we will create Charts.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vTUc90iy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57yi3m50h8dqi53s2il9.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTUc90iy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57yi3m50h8dqi53s2il9.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Configuration file for the chart is Chart.yaml. We have to create Chart.yaml and it is compulsory to have capital ‘C’ in Chart.yaml.&lt;/p&gt;

&lt;p&gt;Content inside Chart.yaml is as follows&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vTUc90iy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57yi3m50h8dqi53s2il9.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTUc90iy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57yi3m50h8dqi53s2il9.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create template directory inside your workspace.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R5eAcsRh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/elaw72cqvg9zitk9errp.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R5eAcsRh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/elaw72cqvg9zitk9errp.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next we can create deployment.yaml by the command provided below. In this deployment code we are using the Jenkins image. The yaml code for deployment.yaml will look like as below&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2GSPjG18--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pycv55ufw0h1p5bb9nqv.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2GSPjG18--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pycv55ufw0h1p5bb9nqv.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now Let's install the helm chart.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0kuxtecs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibe9e15o8v4vpfbx7utc.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0kuxtecs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibe9e15o8v4vpfbx7utc.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Let’s check whether the pods are running or not? and also we can check is 'none' services running apart from kubernetes of type Cluster-Ip.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J1wJ4FVk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sq54tuph97nccuvws8z8.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J1wJ4FVk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sq54tuph97nccuvws8z8.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CWuTzpQG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/71erbwxmzmc7fwfdy6sq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CWuTzpQG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/71erbwxmzmc7fwfdy6sq.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we will expose the Jenkins server and the service.yaml is as below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3NYYk7KU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x3xitry1m6o9hy64w9an.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3NYYk7KU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x3xitry1m6o9hy64w9an.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Let’s see the new services has launched or not?&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DfDkgJCg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lrnn21rv3jxyi6kjzk4v.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DfDkgJCg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lrnn21rv3jxyi6kjzk4v.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Now we can check that our Jenkins server is publicly accessible or not. By hitting to the "&lt;a href="http://public_ip_address:exposed_port"&gt;http://public_ip_address:exposed_port&lt;/a&gt;"&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tW2LWdTm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fyr7ckuw6x9sy2jhjsvl.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tW2LWdTm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fyr7ckuw6x9sy2jhjsvl.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
For getting the password of running Jenkins server, we will do login inside the pod and view the file that contains the Jenkins server password.&lt;br&gt;
Location of the password file is /var/jenkins_home/secrets/initialAdminPassword&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YMEhESuP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1yvri1zs6uwwo2he3e3c.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YMEhESuP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1yvri1zs6uwwo2he3e3c.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Now from the above file we can copy the password and paste it in the above displayed page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_2SDj2XE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6h6xzoxx15nwi6ctubxt.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_2SDj2XE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6h6xzoxx15nwi6ctubxt.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Voila, We did it, Now further you can configure it according to the requirements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thats-all-for-now"&gt;
  &lt;/a&gt;
  That’s all for now.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading-the-article"&gt;
  &lt;/a&gt;
  Thanks for reading the Article.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#happy-helming"&gt;
  &lt;/a&gt;
  Happy Helming!
&lt;/h3&gt;

</description>
      <category>kubernetes</category>
      <category>helm</category>
      <category>charts</category>
      <category>devops</category>
    </item>
    <item>
      <title>Loading WordPress posts in Next.js</title>
      <author>Chris Bongers</author>
      <pubDate>Sat, 25 Sep 2021 06:26:26 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/loading-wordpress-posts-in-next-js-46md</link>
      <guid>https://dev.to/dailydevtips1/loading-wordpress-posts-in-next-js-46md</guid>
      <description>&lt;p&gt;We had a look at how we can use &lt;a href="https://daily-dev-tips.com/posts/wordpress-headless-cms-graphql/"&gt;WordPress as a headless CMS with GraphQL&lt;/a&gt; as our database point.&lt;/p&gt;

&lt;p&gt;We'll let's take that and use that knowledge to create a front-end in Next.js.&lt;/p&gt;

&lt;p&gt;Our goal for today is to load our WordPress posts in a Next.js front-end by querying the GraphQL endpoint.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-graphql-api-call"&gt;
  &lt;/a&gt;
  Creating the GraphQL API call
&lt;/h2&gt;

&lt;p&gt;Let's start by adding a &lt;code&gt;.env&lt;/code&gt; file to our project. This is a file where we can set up variables specific to the platform we are on.&lt;/p&gt;

&lt;p&gt;Create this &lt;code&gt;.env&lt;/code&gt; file in the root of your project and add the WordPress URL like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;WP_URL=http://localhost:8000/graphql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's also create a folder called &lt;code&gt;lib&lt;/code&gt;. It's where we will add our functions and calls.&lt;/p&gt;

&lt;p&gt;Inside this &lt;code&gt;lib&lt;/code&gt; folder, create a file called &lt;code&gt;api.js&lt;/code&gt;. This file will act as the main source of our API communication.&lt;/p&gt;

&lt;p&gt;The first thing we need in this file is the WordPress URL we just set.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;API_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WP_URL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we want a generic GraphQL request. Since we can send a specific query with each GraphQL request, we can create one generic API call.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;API_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Failed to fetch API&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we'll create a function to retrieve all posts by using the function above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getLatestPosts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;`
      query AllPosts {
        posts(first: 10, where: { orderby: { field: DATE, order: DESC } }) {
          edges {
            node {
              id
              title
              excerpt
              featuredImage {
                node {
                  sourceUrl
                }
              }
            }
          }
        }
      }
    `&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function will use our fetchAPI function and pass a GraphQL query to it.&lt;br&gt;
This query will ask for ten posts ordered by date and fetch some specific fields.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#using-the-data-on-the-homepage"&gt;
  &lt;/a&gt;
  Using the data on the homepage
&lt;/h2&gt;

&lt;p&gt;The next step we need to do is call this data and render it on the homepage.&lt;/p&gt;

&lt;p&gt;Let's use the &lt;a href="https://daily-dev-tips.com/posts/nextjs-page-options-and-how-they-work/"&gt;&lt;code&gt;getStaticProps&lt;/code&gt;&lt;/a&gt; again to fetch the data on build time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;getLatestPosts&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../lib/api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;latestPosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getLatestPosts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;latestPosts&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We call the &lt;code&gt;getLatestPosts&lt;/code&gt; function on our &lt;code&gt;lib/api.js&lt;/code&gt; file and return those posts as props.&lt;/p&gt;

&lt;p&gt;Now we need to modify our Home function actually to retrieve these posts props.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;latestPosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;edges&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Render&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can wrap our existing elements into multiple ones bases on the posts and add the data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;edges&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
      &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;max-w-xs mx-2 my-2 overflow-hidden rounded shadow-lg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;
        &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;w-full&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;featuredImage&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sourceUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;px-6 py-4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mb-2 text-xl font-bold&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
          &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-base text-grey-darker&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;dangerouslySetInnerHTML&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="na"&gt;__html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;excerpt&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And with that, we now have our WordPress posts rendered on our homepage!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x1Pzx2xL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631945456524/1JhFhvWQZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x1Pzx2xL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631945456524/1JhFhvWQZ.png" alt="Homepage WordPress posts in Next.js"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want a detailed view of the complete code, check out the &lt;a href="https://github.com/rebelchris/next-tailwind/tree/wordpress-posts-home"&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>wordpress</category>
      <category>nextjs</category>
      <category>react</category>
    </item>
    <item>
      <title>Learning Python- Intermediate course: Day 32, The Menubutton Widget</title>
      <author>Aatmaj</author>
      <pubDate>Sat, 25 Sep 2021 06:25:59 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-intermediate-course-day-32-the-menubutton-widget-4l0j</link>
      <guid>https://dev.to/aatmaj/learning-python-intermediate-course-day-32-the-menubutton-widget-4l0j</guid>
      <description>&lt;h2&gt;
  &lt;a href="#today-let-us-learn-about-the-menubutton-widget"&gt;
  &lt;/a&gt;
  Today let us learn about the menubutton widget.
&lt;/h2&gt;




&lt;h2&gt;
  &lt;a href="#menubutton-widget"&gt;
  &lt;/a&gt;
  Menubutton widget
&lt;/h2&gt;

&lt;p&gt;The menubutton widget is a drop down type of widget. It looks similar to the listbox widget. The menubutton widget is dropped down once the menubutton button is clicked.&lt;/p&gt;




&lt;p&gt;Here is a sample program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tkinter&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;master&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Tk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geometry&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"300x200"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;MB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Menubutton&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Favorite data analysis"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;MB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;menu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;Menu&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;MB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tearoff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;MB&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"menu"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;MB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;menu&lt;/span&gt;

&lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IntVar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;two&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IntVar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;MB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;menu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_checkbutton&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Classification"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;MB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;menu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_checkbutton&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Regression"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;two&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;MB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mainloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;MB = Menubutton ( master, text="" )&lt;/code&gt; Create a menubutton with text and the window frame parameters.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;MB.menu =  Menu ( MB, tearoff = 0 )&lt;/code&gt; &lt;code&gt;MB["menu"] =  MB.menu&lt;/code&gt; Create a menu object and configure it with the menubutton.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;MB.menu.add_checkbutton ( label="Classification",&lt;br&gt;
                      variable=one )&lt;/code&gt; Add a button to the menubutton and control it using the &lt;code&gt;Intvar()&lt;/code&gt; classes. This is very similar to how we operated on checkboxes and radiobuttons. In case you have missed it, you can check it out &lt;a href="https://dev.to/aatmaj/learning-python-intermediate-course-day-23-intvar-and-radio-buttons-164k"&gt;here&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aBEDeQ6U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rsihy1p6d9sohvnfxztq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aBEDeQ6U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rsihy1p6d9sohvnfxztq.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zR1_VbZg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uodtuaresrhmirfrz44p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zR1_VbZg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uodtuaresrhmirfrz44p.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YJfP330b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2329jh7qvwvls1onf6nc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YJfP330b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2329jh7qvwvls1onf6nc.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IVTdrwl2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yu0wly4kfx4tnhk2sjbg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IVTdrwl2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yu0wly4kfx4tnhk2sjbg.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y1LkHlgx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kcjiw65bs2t6bmqodg2q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y1LkHlgx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kcjiw65bs2t6bmqodg2q.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-tearoff-parameter-the-raw-tearoff-endraw-parameter-is-present-if-we-want-to-remove-the-window-and-create-a-subwindow-for-the-parameters-for-example-removing-the-raw-tearoff-endraw-parameter-to-the-default-settings-will-show-a-result-like-this"&gt;
  &lt;/a&gt;
  The tearoff parameter. The &lt;code&gt;tearoff&lt;/code&gt; parameter is present if we want to remove the window and create a sub-window for the parameters. For example, removing the &lt;code&gt;tearoff&lt;/code&gt; parameter to the default settings will show a result like this-
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P07v3v9X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sgslkb1rpcjz231l4sur.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P07v3v9X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sgslkb1rpcjz231l4sur.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BowOrrNk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8vmg6foz4mp6mddggpzf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BowOrrNk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8vmg6foz4mp6mddggpzf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But if we click on the horizontal dotted line, the dropdown tears apart into a different window&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J7_lvZSi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymc00hm4m1aaubtunc0z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J7_lvZSi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymc00hm4m1aaubtunc0z.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2jOxX30W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77zazani5timfbjl5x2u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2jOxX30W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77zazani5timfbjl5x2u.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oNnjfvzT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4w4w3n7qdqop8pgn3ft.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oNnjfvzT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4w4w3n7qdqop8pgn3ft.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
We can create multiple windows in such manner.&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--trXLiTBS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arfuzy28zjoqvsq49kea.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--trXLiTBS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arfuzy28zjoqvsq49kea.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary-of-the-week"&gt;
  &lt;/a&gt;
  Summary of the week
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/aatmaj/learning-python-intermediate-course-day-29-sliders-in-tkinter-5a6d"&gt;Learning Python- Intermediate course: Day 29, Sliders in Tkinter&lt;/a&gt; We covered sliders in Tkinter. Slider is a type of widget which lets the user choose variable values in a graphical and interactive manner. We saw how to set various parameters like the interval length, length and orientation of the slider. We saw the getter and setter methods of the widget.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/aatmaj/learning-python-intermediate-course-day-30-spinbox-and-labelbox-1b35"&gt;Learning Python- Intermediate course: Day 30, Spinbox and Labelbox&lt;/a&gt;- We checked out the spinbox and the labelbox widgets. The spinbox widget is a widget which is used to get input from the user navigated through up and down keys. The listbox is a menu type widget which helps the users select from a list of items. We also saw the various types of parameters of the listbox widget, for example the types of selections and length of the listbox. We saw the getter and setter methods of the widget. The type of selection of the listboxes include &lt;code&gt;BROWSE&lt;/code&gt; &lt;code&gt;SINGLE&lt;/code&gt; &lt;code&gt;MULTIPLE&lt;/code&gt; and &lt;code&gt;EXTENDED&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/aatmaj/learning-python-intermediate-course-day-31-coordinate-positions-4eah"&gt;Learning Python- Intermediate course: Day 31, Coordinate positions&lt;/a&gt; In this part, we made a sample practice program to calculate the discount prices. In this, we used both the spinbox and the slider widgets. In order to place the widgets around in the desired manner, wee used coordinate placing using the &lt;code&gt;.place()&lt;/code&gt; method. Using this method, we placed the widgets in proper x and y coordinates.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;So friends that was all for this week. Hope you all are having fun 👍&lt;/p&gt;

</description>
      <category>learningpython</category>
      <category>python</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>ODD-EVEN Number using Recursion in JS 🚀</title>
      <author>Shubham Jadhav</author>
      <pubDate>Sat, 25 Sep 2021 05:54:10 +0000</pubDate>
      <link>https://dev.to/dev_shubham/odd-even-number-using-recursion-in-js-2l3g</link>
      <guid>https://dev.to/dev_shubham/odd-even-number-using-recursion-in-js-2l3g</guid>
      <description>&lt;p&gt;Hello Guys, Today is this article we are taking about Recursion. &lt;br&gt;
 We are solving and understanding a problem by using Recursion in JavaScript.&lt;/p&gt;

&lt;p&gt;👉 Problem :- Find odd-even number using Recursion ? &lt;/p&gt;

&lt;p&gt;Let's start today's article... &lt;/p&gt;

&lt;p&gt;• What is recursion? &lt;br&gt;
=&amp;gt; Recursion mean calling itself till condition not true. A function call itself that's function called Recursive function. &lt;/p&gt;

&lt;p&gt;• How to find odd even number in JavaScript? &lt;br&gt;
=&amp;gt; We are finding odd-even number by dividing 2. When the reminder is 0 it's mean the number is even or reminder is 1, it is odd number. Right... &lt;/p&gt;

&lt;p&gt;We are using same logic in today's solving problem using recursion but different. &lt;/p&gt;

&lt;p&gt;👉 Let's start solving problems&lt;/p&gt;

&lt;p&gt;• First we create a function and pass one parameter. As following 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cNVwKbAp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmci707lxv50i6tn23n8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cNVwKbAp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmci707lxv50i6tn23n8.jpg" alt="img1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;• We are using same logic as we use always to find odd even number but in this problem we are consider if the parameter's value is 0 it is even or if it's value is 1 it means number is odd. &lt;/p&gt;

&lt;p&gt;• See following code to better understand, we are using if-else condition. 👇&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mJdnHXfQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ir7tmt0r97la5xcfq0d7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mJdnHXfQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ir7tmt0r97la5xcfq0d7.jpg" alt="img2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;• Now time to use recursion function but before using recursion we simply decrease parameter 'num' value by 2.&lt;br&gt;
Because odd and even number difference is 2 for example 1 and 3 difference is 2 and also 2 and 4 difference is 2. See below 👇&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dSAEeqPd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33q7fenkp7afg02f32mh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dSAEeqPd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33q7fenkp7afg02f32mh.jpg" alt="img3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;• In the above code, in a line number 14 we are calling a function that's mean it will call itself till when given condition not true. &lt;/p&gt;

&lt;p&gt;• Let's check the output 👇&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4tNd9oi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/thaycqa2egdrbxi8qezm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4tNd9oi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/thaycqa2egdrbxi8qezm.jpg" alt="img4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🙏 Thanks for reading...&lt;br&gt;
👉 Stay with us for more.... &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
