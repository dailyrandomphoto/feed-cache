<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Solving Four Kubernetes Networking Challenges</title>
      <author>Michael Bogan</author>
      <pubDate>Tue, 18 Jan 2022 16:56:50 +0000</pubDate>
      <link>https://dev.to/mbogan/solving-four-kubernetes-networking-challenges-49lp</link>
      <guid>https://dev.to/mbogan/solving-four-kubernetes-networking-challenges-49lp</guid>
      <description>&lt;p&gt;One of the main responsibilities of &lt;a href="https://konghq.com/learning-center/kubernetes/what-is-kubernetes/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;Kubernetes&lt;/a&gt; is to share nodes between applications. Networking is a fundamental requirement since those applications need to communicate with one another and the outside world.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZKvvnN0g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/olvmy8t3x5xbxw7l96cl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZKvvnN0g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/olvmy8t3x5xbxw7l96cl.png" alt="A Kubernetes-hosted Distributed Application Architecture" width="603" height="402"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Requests from outside a Kubernetes cluster usually go through a router or &lt;a href="https://konghq.com/learning-center/api-gateway/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;API gateway&lt;/a&gt; responsible for proxying them to the appropriate services. The responsibility of Kubernetes networking is to provide the underlying communication layer, enabling requests to reach their intended destinations.&lt;/p&gt;

&lt;p&gt;Distributed applications spread across many nodes. When there are multiple replicas of each application, Kubernetes handles &lt;a href="https://thenewstack.io/how-does-service-discovery-work-in-kubernetes/#:~:text=The%20services%20model%20in%20Kubernetes,%2C%20aspect%20of%20microservices%3A%20discovery.&amp;amp;text=Kubernetes%20refers%20to%20these%20key,with%20a%20set%20of%20pods."&gt;service discovery&lt;/a&gt; and communication between the &lt;a href="https://kubernetes.io/docs/concepts/services-networking/service/"&gt;service&lt;/a&gt; and Pods. Inside a Pod, containers can communicate easily and transparently. Inside a cluster, Pods can connect to other Pods, made possible through a combination of virtual network interfaces, bridges, and routing rules through an &lt;a href="https://en.wikipedia.org/wiki/Overlay_network"&gt;overlay network&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Despite the transparent handling, however, Kubernetes networking is more complex than it seems. &lt;strong&gt;Deploying across multiple clouds, maintaining multiple environments, and ensuring reliable and scalable network policies are significant challenges.&lt;/strong&gt; Not all of these complexities are natively addressed by Kubernetes. In this article, we’ll look at how to tackle those challenges.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-basics-of-kubernetes-networking"&gt;
  &lt;/a&gt;
  The Basics of Kubernetes Networking
&lt;/h2&gt;

&lt;p&gt;In Kubernetes, &lt;a href="https://kubernetes.io/docs/concepts/workloads/pods/"&gt;Pods&lt;/a&gt; are responsible for handling container-to-container communication. Pods leverage network namespaces with their own network resources (interfaces and routing tables). Inside a Pod, containers share these resources, allowing them to communicate via localhost.&lt;/p&gt;

&lt;p&gt;Pod-to-Pod communication must meet the following Kubernetes requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pods need to communicate without &lt;a href="https://en.wikipedia.org/wiki/Network_address_translation"&gt;network address translation (NAT)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Nodes need to be able to communicate with Pods without NAT.&lt;/li&gt;
&lt;li&gt;The IP address that a Pod can see assigned to itself must match the IP that other Pods see.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a href="https://github.com/containernetworking/cni"&gt;Container Network Interface (CNI)&lt;/a&gt; includes a specification for writing network plugins to configure network interfaces. This allows you to create &lt;a href="https://en.wikipedia.org/wiki/Overlay_network"&gt;overlay networks&lt;/a&gt; that satisfy Pod-to-Pod communication requirements.&lt;/p&gt;

&lt;p&gt;A &lt;a href="https://kubernetes.io/docs/concepts/services-networking/service/"&gt;service&lt;/a&gt; is a Kubernetes abstraction that allows Pods to expose and receive requests. It provides a service discovery mechanism through Pod labels and basic load balancing capabilities. Applications running inside Pods can easily use services to connect to other applications running in the cluster. Requests from outside the cluster can be routed through &lt;a href="https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/"&gt;Ingress controllers&lt;/a&gt;. These controllers will use &lt;a href="https://kubernetes.io/docs/concepts/services-networking/ingress/"&gt;Ingress&lt;/a&gt; resources to configure routing rules, usually leveraging &lt;a href="https://kubernetes.io/docs/concepts/services-networking/service/"&gt;services&lt;/a&gt; to facilitate routing to the correct applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nontrivial-challenges"&gt;
  &lt;/a&gt;
  Non-Trivial Challenges
&lt;/h2&gt;

&lt;p&gt;While these networking capabilities provide the foundational building blocks for Kubernetes managed workloads, the dynamic and complex nature of &lt;a href="https://konghq.com/blog/cloud-native-infrastructure/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;cloud native&lt;/a&gt; systems presents several challenges.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#servicetoservice-communication-reliability"&gt;
  &lt;/a&gt;
  Service-to-Service Communication Reliability
&lt;/h4&gt;

&lt;p&gt;In distributed systems, business functions are divided into multiple, autonomous services running over a cluster of nodes, Pods, and containers. A microservice architecture introduces the need for services to communicate over the network.&lt;/p&gt;

&lt;p&gt;The volatility and elastic nature of the cloud require constant monitoring of the Kubernetes cluster and rerouting in case of failures. With ephemeral Pods and continual rerouting of resources, reliable service-to-service communication is not a given.&lt;/p&gt;

&lt;p&gt;Efficient load balancing algorithms need to assign traffic to available replicas and isolate the overloaded ones. Similarly, service failure means client requests need to be retried and timed out gracefully. Complex scenarios might need &lt;a href="https://en.wikipedia.org/wiki/Circuit_breaker"&gt;circuit breakers&lt;/a&gt; and load-shedding techniques to handle surges in demand and failures. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#elaborate-multicloud-deployments"&gt;
  &lt;/a&gt;
  Elaborate Multi-Cloud Deployments
&lt;/h4&gt;

&lt;p&gt;Complex, large-scale systems are often divided into multiple environments, with different parts deployed to different cloud platforms. These heterogeneous environments need to communicate with one another.&lt;/p&gt;

&lt;p&gt;Even within the same cloud tenancy—or on-premise—the same workload can run in different environments (development, staging, and production). Though separated, these environments sometimes need to communicate with one another. For example, a staging environment may need to emulate the production workload and rigorously test the application before it goes live. With successful testing, both code and data may need to migrate from it. &lt;/p&gt;

&lt;p&gt;A seamless migration can be challenging in such cases. Also, there may be cases where a team simultaneously supports both VM and Kubernetes-hosted services. Or, perhaps a team designs systems that support multi-cloud—or at least multi-region—deployments for reliability, specifying the complex network configurations and elaborate ingress and egress rules.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#service-discovery"&gt;
  &lt;/a&gt;
  Service Discovery
&lt;/h4&gt;

&lt;p&gt;When running Kubernetes in cloud-native environments, it’s easy to scale services by spawning several replicas across multiple nodes. These application replicas are ephemeral—instantiated and destroyed as Kubernetes deems necessary. It’s non-trivial for &lt;a href="https://konghq.com/learning-center/microservices/"&gt;microservices&lt;/a&gt; in the application to keep track of all these changes to IP addresses and ports. Nonetheless, these microservices need an efficient way to find service replicas. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#network-rules-scalability"&gt;
  &lt;/a&gt;
  Network Rules Scalability
&lt;/h4&gt;

&lt;p&gt;Security best practices and industry regulations like the &lt;a href="https://en.wikipedia.org/wiki/Payment_Card_Industry_Data_Security_Standard"&gt;Payment Card Industry Data Security Standard (PCI DSS)&lt;/a&gt; enforce strict networking rules. These rules dictate strict communication constraints between services.&lt;/p&gt;

&lt;p&gt;Kubernetes has the concept of &lt;a href="https://kubernetes.io/docs/concepts/services-networking/network-policies/"&gt;Network Policies&lt;/a&gt;. These allow you to control traffic at the IP address or port level. You can specify the rules that would enable a Pod to communicate with other services using labels and selectors.&lt;/p&gt;

&lt;p&gt;As your system of microservices grows in number, reaching hundreds or thousands of services, network policy management becomes a complex, tedious, and error-prone process. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-kong-ingress-controller-can-help"&gt;
  &lt;/a&gt;
  How Kong Ingress Controller Can Help
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://konghq.com/solutions/kubernetes-ingress/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;Kubernetes Ingress Controller (KIC)&lt;/a&gt; from Kong is an &lt;a href="https://kubernetes.io/docs/concepts/services-networking/ingress/"&gt;Ingress&lt;/a&gt; implementation for Kubernetes. This Ingress controller, powered by &lt;a href="https://konghq.com/kong/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;Kong Gateway&lt;/a&gt;, acts as a cloud native, platform-agnostic, scalable API gateway. It’s built for hybrid and multi-cloud environments and optimized for microservices and distributed architectures.&lt;/p&gt;

&lt;p&gt;The KIC allows for creating a configuration of routing rules, health checks, and load balancing, and it supports a variety of &lt;a href="https://docs.konghq.com/hub/"&gt;plugins&lt;/a&gt; that provide advanced functionality. This wide range of capabilities can help address the challenges we’ve discussed.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#reliable-servicetoservice-communication"&gt;
  &lt;/a&gt;
  Reliable Service-to-Service Communication
&lt;/h4&gt;

&lt;p&gt;Kubernetes &lt;a href="https://kubernetes.io/docs/concepts/services-networking/service/"&gt;services&lt;/a&gt; provide simple load balancing capabilities (Round Robin). One of the core features of KIC is to load balance between replicas of the same application. It can use algorithms like weighted connections or least connections, or even sophisticated, custom implementations. These algorithms leverage the service registry of KIC to provide efficient routing. &lt;/p&gt;

&lt;p&gt;With KIC, you can easily configure retries when a service is down, sensible timeouts, rerouting requests to healthy service instances, or error handling. You can also implement failure patterns such as circuit breaking and load-shedding to smooth and throttle traffic.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#simpler-multicloud-environments-deployments"&gt;
  &lt;/a&gt;
  Simpler Multi-Cloud Environments Deployments
&lt;/h4&gt;

&lt;p&gt;Multi-environment and heterogeneous infrastructure deployments demand complex network policies and routing configurations. &lt;a href="https://docs.konghq.com/gateway/"&gt;Kong Gateway&lt;/a&gt;, built into KIC, addresses many of these challenges. &lt;/p&gt;

&lt;p&gt;Kong Gateway allows &lt;a href="https://docs.konghq.com/gateway/2.6.x/get-started/quickstart/configuring-a-service/#main"&gt;service registration&lt;/a&gt; independent of where services are deployed. With a registered service, you’ll be able to &lt;a href="https://docs.konghq.com/gateway/2.6.x/get-started/quickstart/configuring-a-service/#2-add-a-route-for-the-service"&gt;add routes&lt;/a&gt;, and KIC will be ready to proxy requests to your service. Additionally, while complex systems can sometimes communicate with different protocols (REST versus gRPC), you can easily configure KIC to support multiple protocols.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://docs.konghq.com/hub/plugins/overview/"&gt;plugin system&lt;/a&gt; allows you to extend the functionality of KIC for more complex scenarios. &lt;a href="https://docs.konghq.com/hub/"&gt;Kong Plugin Hub&lt;/a&gt; contains a strong collection of useful and battle-tested plugins, and KIC also enables &lt;a href="https://docs.konghq.com/gateway/2.6.x/plugin-development/"&gt;you to develop&lt;/a&gt; and use whatever plugin best suits your needs.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#enhanced-service-discovery"&gt;
  &lt;/a&gt;
  Enhanced Service Discovery
&lt;/h4&gt;

&lt;p&gt;As mentioned, KIC tracks available instances through its registry of services. As services integrate with KIC, they can self-register and report their availability. This registration can also be done through third-party registration services. By taking advantage of the service registry, KIC can proxy client requests to the proper backends at any time.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#scalable-network-rules"&gt;
  &lt;/a&gt;
  Scalable Network Rules
&lt;/h4&gt;

&lt;p&gt;Although enforcing network rules through &lt;a href="https://kubernetes.io/docs/concepts/services-networking/network-policies/"&gt;Network Policies&lt;/a&gt; can be complicated, KIC can &lt;a href="https://docs.konghq.com/kubernetes-ingress-controller/2.0.x/guides/getting-started-istio/#main"&gt;easily integrate&lt;/a&gt; with &lt;a href="https://konghq.com/learning-center/service-mesh/what-is-a-service-mesh/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;service mesh&lt;/a&gt; implementations like the CNCF’s &lt;a href="https://kuma.io/"&gt;Kuma&lt;/a&gt; or &lt;a href="https://istio.io/"&gt;Istio&lt;/a&gt; with &lt;a href="https://konghq.com/blog/istio-gateway/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;Kong Istio Gateway&lt;/a&gt;, extending the capabilities of &lt;a href="https://kubernetes.io/docs/concepts/services-networking/network-policies/"&gt;Network Policies&lt;/a&gt; and guaranteeing additional security. &lt;/p&gt;

&lt;p&gt;With &lt;a href="https://kuma.io/docs/1.4.1/security/certificates/"&gt;authentication and authorization&lt;/a&gt; policies, you’ll be able to enhance network security in a secure, consistent, and automated way. Moreover, you can use &lt;a href="https://kuma.io/docs/1.4.1/policies/general-notes-about-kuma-policies/"&gt;network policies and service mesh policies together&lt;/a&gt; to provide an even better security posture.&lt;/p&gt;

&lt;p&gt;An added benefit of the service mesh integration is that it allows for deployment patterns like canary deployments and blue/green deployments. It also enhances observability with reliable metrics and traces. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Kubernetes can handle common networking tasks, making it easier for developers and operators to onboard services. However, with large and complex cloud-native systems, networking concerns are rarely simple. Organizations want to split &lt;a href="https://konghq.com/learning-center/microservices/monolith-vs-microservices/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;monoliths&lt;/a&gt; into microservices, but they need to address unique concerns such as efficient load balancing or fault tolerance. Similarly, enabling seamless service migrations and transitions between different environments is not easy. Kubernetes networking capabilities need to be extended to support a wider range of scenarios.&lt;/p&gt;

&lt;p&gt;KIC can efficiently tackle many of these challenges. It offers a broad range of functionality, including advanced routing and load balancing rules, complex ingress and egress rules, and fault tolerance measures. You can greatly improve service discovery with the service registry of KIC, which can track all available instances of each service. The easy integration with KIC and service meshes can help establish strong network security policies and leverage different deployment patterns.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>devops</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Why Load Balancing Is Important</title>
      <author>Ifihan Olusheye</author>
      <pubDate>Tue, 18 Jan 2022 16:52:50 +0000</pubDate>
      <link>https://dev.to/ifihan/why-load-balancing-is-important-50kn</link>
      <guid>https://dev.to/ifihan/why-load-balancing-is-important-50kn</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  INTRODUCTION
&lt;/h3&gt;

&lt;p&gt;Modern high-traffic websites must handle hundreds of thousands, if not millions of the concurrent user or client requests when returning accurate text, images, video, or device data in a timely and consistent manner. As a result of this amount of requests, such websites might lag and eventually crash. The use of load balancers can prevent such events from occurring.&lt;/p&gt;

&lt;p&gt;A load balancer is a system that distributes network or application traffic through several servers by acting as a reverse proxy. With a load balancer,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User requests or network load are distributed through many servers in an optimal manner.&lt;/li&gt;
&lt;li&gt;Allows you to add or remove servers as needed, depending on demand.&lt;/li&gt;
&lt;li&gt;Sends requests to only online repositories, ensuring high availability and reliability.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#so-what-is-load-balancing"&gt;
  &lt;/a&gt;
  So, what is Load balancing?
&lt;/h4&gt;

&lt;p&gt;Load balancing is the process of evenly spreading incoming network traffic among a collection of backend servers, often referred to as a server farm or server pool. As the name implies, it is a process of balancing the load on a server, and load in this context refers to requests.&lt;/p&gt;

&lt;p&gt;Some several techniques or algorithms can be utilized depending on their use. Some of them are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Least connection: This approach takes the actual server load into account. The latest request is forwarded to the site that has the fewest pending requests at any given time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hash: Requests are distributed based on a key you choose, such as the client's IP address or the file URL.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;IP Hash: The client's IP address is used to decide which server will receive the message.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#why-is-load-balancing-important"&gt;
  &lt;/a&gt;
  Why is load balancing important?
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Load balancing improves service availability and helps prevent downtimes. &lt;/li&gt;
&lt;li&gt;To maximize the use of resources and reduce the response time.&lt;/li&gt;
&lt;li&gt;A load balancer prevents the entire network from failing if a server from a server cluster fails.&lt;/li&gt;
&lt;li&gt;A load balancer helps to manage traffic flow on a website.&lt;/li&gt;
&lt;li&gt;Add flexibility to the network. For example, a site can be upgraded without downtime while using load balancers.&lt;/li&gt;
&lt;li&gt;It improves scalability.&lt;/li&gt;
&lt;li&gt;Load balancers improve the capacity of existing servers.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In conclusion, it is good practice to use and advisable to use load balancers if you plan on having a high-traffic website or application.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>programming</category>
      <category>backend</category>
    </item>
    <item>
      <title>How to run GUI apps trough WSL?</title>
      <author>Ivaylo Ivanov</author>
      <pubDate>Tue, 18 Jan 2022 16:49:22 +0000</pubDate>
      <link>https://dev.to/ivayloiv/how-to-run-gui-apps-trough-wsl-9oa</link>
      <guid>https://dev.to/ivayloiv/how-to-run-gui-apps-trough-wsl-9oa</guid>
      <description>&lt;p&gt;Hi, guys today I will show you how to run GUI apps through &lt;strong&gt;WSL&lt;/strong&gt;. As you know by default &lt;strong&gt;WSL 1&lt;/strong&gt; offers just a terminal of the selected Linux distro but in &lt;strong&gt;WSL 2&lt;/strong&gt; there are some changes and you are going to be able to run GUI applications through WLS 2 directly in windows. Without further due let's hop into the topic.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#note-if-you-have-wsl-1-installed-skip-to-step-2-otherwise-follow-the-steps-as-it-is"&gt;
  &lt;/a&gt;
  Note: If you have wsl 1 installed skip to step 2, otherwise follow the steps as it is.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#1-installing-wsl"&gt;
  &lt;/a&gt;
  1. Installing &lt;strong&gt;WSL&lt;/strong&gt;.
&lt;/h2&gt;

&lt;p&gt;In case to install the &lt;strong&gt;WSL&lt;/strong&gt; (windows subsystem for Linux), you will need administrator permissions on your machine. After that, you will have to open the windows PowerShell as administrator and activate the wsl feature. To that just paste this command in ht PowerShell and hit enter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;dism.exe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;/online&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;/enable-feature&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;/featurename:Microsoft-Windows-Subsystem-Linux&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;/all&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;/norestart&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the command has been executed successfully restart your machine and continue to step 2.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-enabling-virtual-machine-feature-and-installing-wsl-2-version"&gt;
  &lt;/a&gt;
  2. Enabling Virtual Machine Feature and installing &lt;strong&gt;WSL 2&lt;/strong&gt; version.
&lt;/h2&gt;

&lt;p&gt;After everyone has &lt;strong&gt;WSL&lt;/strong&gt; installed, in case to switch to &lt;strong&gt;WSL 2&lt;/strong&gt; you will need to enable A special built-in virtual machine for &lt;strong&gt;wsl 2&lt;/strong&gt;. To do that just paste this into your PowerShell (opened as administrator)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;dism.exe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;/online&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;/enable-feature&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;/featurename:VirtualMachinePlatform&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;/all&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;/norestart&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After you have enabled the virtual machine feature, it is time to install the &lt;strong&gt;WSL&lt;/strong&gt; version 2. To do that, download the latest kernel update &lt;a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi"&gt;here&lt;/a&gt;. It is an official Microsoft executable, that you can run just by double-clicking after you install it. It is time for the final step - Running GUI apps through &lt;strong&gt;WSL&lt;/strong&gt; on windows.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-running-gui-apps-through-wsl"&gt;
  &lt;/a&gt;
  3. Running GUI apps through &lt;strong&gt;WSL&lt;/strong&gt;.
&lt;/h2&gt;

&lt;p&gt;We are almost finished this is the last step to do, I promise. To be able to run any graphical app through &lt;strong&gt;WSL&lt;/strong&gt; you will need a graphics card driver in addition. You can download the special driver for either &lt;a href="https://developer.nvidia.com/51006-gameready-win11-win10-dch-64bit-international"&gt;GeForce&lt;/a&gt; or &lt;a href="https://developer.nvidia.com/51006_quadro_win11_win10-dch_64bit_international"&gt;Quadro&lt;/a&gt; series graphics cards. Wait for it to download, then install it by double-clicking. After it is installed it is good to practice rebooting your machine. After you have it rebooted you can install any application on your WSL Linux Distro, for example, "Firefox".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;firefox
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the installation is completed you can simply run the application, in our case, it is firefox so we are going to run it by typing in the command line &lt;code&gt;firefox&lt;/code&gt;. Wait for it for some time because it is the first launch and if everything has been set up as it should, you should be prompted with the firefox application directly on your windows screen, running through &lt;strong&gt;WSL&lt;/strong&gt;. &lt;br&gt;
Congratulations you have successfully set up &lt;strong&gt;WSL 2&lt;/strong&gt; and enabled GUI on trough &lt;strong&gt;WSL&lt;/strong&gt;. 🎉🎺🎉&lt;/p&gt;

&lt;p&gt;If you have any questions, just leave a comment, I will answer as soon as possible.&lt;/p&gt;

</description>
      <category>wsl</category>
      <category>linux</category>
      <category>tutorial</category>
      <category>bash</category>
    </item>
    <item>
      <title>How to Make Link Previews Look Nice on Twitter</title>
      <author>Florian (mnml.wtf)</author>
      <pubDate>Tue, 18 Jan 2022 16:42:12 +0000</pubDate>
      <link>https://dev.to/mnml/how-to-make-link-previews-look-nice-on-twitter-55lc</link>
      <guid>https://dev.to/mnml/how-to-make-link-previews-look-nice-on-twitter-55lc</guid>
      <description>&lt;p&gt;Today I shared a tweet containing a link to a post on my website. I expected Twitter to do some magic and make the link preview look great as I was used to from other tweets. However, the link was displayed just as a text link. &lt;/p&gt;

&lt;p&gt;After some googling I found out that in order for link previews to look nice on Twitter you need to add some Open-Graph data to your website and tell Twitter how to render the link preview.&lt;/p&gt;

&lt;p&gt;The page I wanted to share was &lt;a href="https://mnml.wtf/notes/product-love"&gt;https://mnml.wtf/notes/product-love&lt;/a&gt; (I also &lt;a href="https://dev.to/mnml/products-and-tools-i-love-and-use-regularly-44dd"&gt;shared in on DEV here&lt;/a&gt;). &lt;/p&gt;

&lt;p&gt;This is what I needed to add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:card"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"summary_large_image"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:site"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"@mnmlwtf"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:creator"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"@mnmlwtf"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:title"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Product Love"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:url"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"https://mnml.wtf/notes/product-love"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:image"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"https://mnml.wtf/static/og/product-love.png"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's go through these meta tags one by one:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;twitter:card&lt;/code&gt; tells Twitter to render a large image as link preview instead of a small image&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;twitter:site&lt;/code&gt; and &lt;code&gt;twitter:creator&lt;/code&gt; let Twitter know that I am the author of the content&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;og:title&lt;/code&gt; contains the post title as it should be rendered on social media&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;og:url&lt;/code&gt; is the URL to to the page on my website&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;og:image&lt;/code&gt; is an image I created in Figma, it looks like this:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4mxCZZ51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1pg1pjeyrqdn918dd5m9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4mxCZZ51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1pg1pjeyrqdn918dd5m9.png" alt="The image used as  raw `og:image` endraw " width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#invalidate-twitters-cache"&gt;
  &lt;/a&gt;
  Invalidate Twitter's Cache
&lt;/h2&gt;

&lt;p&gt;Since I already had shared the link and Twitter had tried to fetch all these meta tags I needed to invalidate Twitter's cache to make sure it checked my page again for these meta information. &lt;/p&gt;

&lt;p&gt;I did this by submitting my post's URL on this tool: &lt;a href="https://cards-dev.twitter.com/validator"&gt;https://cards-dev.twitter.com/validator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The nice thing about it is that it instantly renders a tweet preview so you immediately know if everything looks as it should:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZD-59RlK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a14x5uwstkgjyp7l7o47.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZD-59RlK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a14x5uwstkgjyp7l7o47.png" alt="Tweet Preview" width="880" height="709"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>twitter</category>
      <category>tutorial</category>
      <category>writing</category>
    </item>
    <item>
      <title>Production Ready React</title>
      <author>Joel Warrington</author>
      <pubDate>Tue, 18 Jan 2022 15:54:13 +0000</pubDate>
      <link>https://dev.to/jobber/production-ready-react-14hg</link>
      <guid>https://dev.to/jobber/production-ready-react-14hg</guid>
      <description>&lt;p&gt;&lt;strong&gt;A pragmatic guide to maintainable React components powered by GraphQL.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Writing performant, testable, and readable React can be thought of as an art, but instead, I hope to convince you that it can instead be achieved with a simple toolkit 🔧 , a few recipes 🧾 , and some examples 🧪 .&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#starting-with-graphql"&gt;
  &lt;/a&gt;
  Starting with GraphQL
&lt;/h2&gt;

&lt;p&gt;One common approach and pitfall is to start implementation from the front-end and work backward towards your GraphQL API. In my experience, this can lead towards less-than-ideal schema design, negatively impacting the GraphQL experience for any other consumer of your API, where types end up as sacks of data void of any meaning and without purpose.&lt;/p&gt;

&lt;p&gt;Things to consider include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How will other frontend views get this data?&lt;/li&gt;
&lt;li&gt;How will nullability be applied?&lt;/li&gt;
&lt;li&gt;Will the data make sense to other developers?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Starting with GraphQL will not only be better for your schema, but it will also be better and crucial for you and your team when building maintainable front-end systems. To start building your GraphQL API and building a truly resilient schema, you should almost certainly consult &lt;a href="https://book.productionreadygraphql.com"&gt;Production Ready GraphQL&lt;/a&gt;, and a worthy companion tutorial; &lt;a href="https://github.com/Shopify/graphql-design-tutorial/blob/master/TUTORIAL.md"&gt;Designing a GraphQL API&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-the-jump"&gt;
  &lt;/a&gt;
  Making the jump
&lt;/h2&gt;

&lt;p&gt;Now that we've got a production-ready GraphQL schema, how do we implement its consuming counterpart? Let's start with the most fundamental components in our larger application and explore some of the first tools in your toolbox 🔧 ; component composition and GraphQL fragments.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Fragments let you construct sets of fields, and then include them in queries where you need to.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Fragments can be used to achieve one concept commonly used in React; collocation, where you're able to contain all of the data needed from a component alongside your logic, styling, and rendering.&lt;/p&gt;

&lt;p&gt;In practice, you're able to create a component that doesn't need to query its data but instead provides an interface to how it should receive its data when used in other components (hence, component composition).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 🧪&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;A small component that receives all of its data from props and defines how it expects to receive data using a GraphQL fragment.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#is-this-thing-on"&gt;
  &lt;/a&gt;
  Is this thing on?
&lt;/h2&gt;

&lt;p&gt;To build maintainable and shippable React, you'll want to test functionality in isolation in a way that makes it very clear when things break so that you and your team will be confident with every release.&lt;/p&gt;

&lt;p&gt;Testing React components isn't as hard as it's made to be, especially with modern-day tools such as &lt;a href="https://testing-library.com/docs/react-testing-library/intro/"&gt;React Testing Library&lt;/a&gt;, and &lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt;, which take out all the guesswork of rendering and interacting with a component. Jest will act as the test runner and provide the overall structure of your unit tests, while React Testing Library will provide the methods needed to accurately assert functionality.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#user-functionality"&gt;
  &lt;/a&gt;
  User functionality
&lt;/h3&gt;

&lt;p&gt;Getting started with &lt;a href="https://testing-library.com/docs/react-testing-library/intro/"&gt;React Testing Library&lt;/a&gt; is quick and no different than writing unit tests for functions and classes. Every test case should start by rendering a component with the render method and destructuring the return to get access to the rendered result, and document queries such as getByText, getByLabel (see the &lt;a href="https://testing-library.com/docs/react-testing-library/cheatsheet/#queries"&gt;query cheat sheet&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 🧪&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;An example test file using React Testing Library and our previously defined &lt;code&gt;Message&lt;/code&gt; component. Showing how one could test user functionality with predictable results.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#cloudy-with-a-chance-of-bugs"&gt;
  &lt;/a&gt;
  Cloudy with a chance of bugs ⛅🐜🐛
&lt;/h3&gt;

&lt;p&gt;Jest uses a package called &lt;a href="https://istanbul.js.org/"&gt;Istanbul&lt;/a&gt; to provide test coverage metrics such as statement, branch, function, and line coverage so that you can understand and enforce the quality of your test suite, providing more confidence in releases.&lt;/p&gt;

&lt;p&gt;It's highly recommended you set coverage thresholds that make you comfortable and don't burden you with covering every test case and flow, and subsequently integrate coverage tests into your CI/CD pipeline and block failing builds.&lt;/p&gt;

&lt;p&gt;To get started and collect test coverage, you can run the following command (or add the --coverage argument to your existing node test script):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx jest &lt;span class="nt"&gt;--coverage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Some things to keep in mind when trying to achieve high coverage:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;test units should interact with your component using every variation&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;if&lt;/strong&gt; and &lt;strong&gt;early return&lt;/strong&gt; statements need to be considered and both or multiple paths need to be tested&lt;/li&gt;
&lt;li&gt;optional chaining (&lt;strong&gt;?.&lt;/strong&gt;) gets increasingly harder to test the longer the chain and GraphQL type nullability should be a factor to consider when building your component&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At Jobber, our test coverage targets sit around 85%!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#putting-the-pieces-together"&gt;
  &lt;/a&gt;
  Putting the pieces together 🧩
&lt;/h2&gt;

&lt;p&gt;Now that we've defined our component and how it will get its data, how can we use it at scale and alongside other components? Let's take a look at the loader concept and how to bubble up your fragment!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 🧪&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;Multiple components showing how one can reuse and build larger components made up of smaller components that implement fragment collocation and data fetching (using a loader component). Using the previously defined &lt;code&gt;Message&lt;/code&gt; component.&lt;/em&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;




&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Using the &lt;code&gt;loader&lt;/code&gt; pattern, we can easily implement and test our &lt;code&gt;Conversation&lt;/code&gt; component and handle query transformation in our loader component. In addition, we don't need to mock as much using &lt;code&gt;MockedProvider&lt;/code&gt; from Apollo (&lt;a href="https://www.apollographql.com/docs/react/development-testing/testing/"&gt;see testing react components using Apollo&lt;/a&gt;). In addition, queries or fragments will be much easier to add when using a tool such as &lt;a href="https://www.graphql-code-generator.com/"&gt;GraphQL Code Generator&lt;/a&gt; our Typescript types become very easy to implement!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-jobber"&gt;
  &lt;/a&gt;
  About Jobber
&lt;/h2&gt;

&lt;p&gt;Interested in React &amp;amp; GraphQL? Consider joining Jobber or contributing to our open-source design system &lt;a href="https://atlantis.getjobber.com/"&gt;Atlantis&lt;/a&gt;. We're hiring for remote positions across Canada at all software engineering levels! &lt;/p&gt;

&lt;p&gt;Our awesome Jobber technology teams span across Payments, Infrastructure, AI/ML, Business Workflows &amp;amp; Communications. We work on cutting edge &amp;amp; modern tech stacks using React, React Native, Ruby on Rails, &amp;amp; GraphQL. &lt;/p&gt;

&lt;p&gt;If you want to be a part of a collaborative work culture, help small home service businesses scale and create a positive impact on our communities, then visit our careers site to learn more!help small home service businesses scale and create a positive impact on our communities, then visit our &lt;a href="https://getjobber.com/about/careers?utm_source=devto&amp;amp;utm_medium=social&amp;amp;utm_campaign=eng_blog"&gt;careers&lt;/a&gt; site to learn more!&lt;/p&gt;

</description>
      <category>react</category>
      <category>graphql</category>
      <category>webdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>What is OpenAPI?</title>
      <author>Anthony Lio</author>
      <pubDate>Tue, 18 Jan 2022 15:43:51 +0000</pubDate>
      <link>https://dev.to/bump/what-is-openapi-1p6</link>
      <guid>https://dev.to/bump/what-is-openapi-1p6</guid>
      <description>&lt;p&gt;OpenAPI is a standard for describing APIs (Application Programming Interfaces). The OpenAPI specification (or OAS) defines an open and independent description format for API services and allows both humans and computers to discover and understand how an API works and how to interact with it, without the need to look at the source code. More specifically, OpenAPI allows to describe, develop, test, and document APIs conforming to the REST architecture, to create RESTful APIs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-bit-of-history-from-swagger-to-openapi"&gt;
  &lt;/a&gt;
  A bit of history: From Swagger to OpenAPI
&lt;/h2&gt;

&lt;p&gt;To avoid any misunderstanding, we may have to explain the difference between OpenAPI and Swagger. Until version 3.0, this specification was still called Swagger before being renamed to OpenAPI specification.&lt;/p&gt;

&lt;p&gt;In 2016, the OpenAPI specification became a separate project from Swagger, now supervised by the &lt;a href="https://www.openapis.org/"&gt;OpenAPI Initiative&lt;/a&gt;, an open-source project under the &lt;a href="https://linuxfoundation.org/"&gt;Linux Foundation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The name Swagger is still very popular even if most people are now using OpenAPI under the hood. Habits are hard to break!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#definitions"&gt;
  &lt;/a&gt;
  Definitions
&lt;/h2&gt;

&lt;p&gt;Sometimes the terms we come across differ from one source to another, and it can be a bit confusing. Here is a quick reminder to understand correctly every concept and call a cat a cat.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GpjeR0H5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://storage.googleapis.com/bump-blog-resources/what-is-openapi/bump-api-call.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GpjeR0H5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://storage.googleapis.com/bump-blog-resources/what-is-openapi/bump-api-call.gif" alt="Call a cat a cat gif" width="640" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#openapi-specification"&gt;
  &lt;/a&gt;
  OpenAPI specification
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Also known as OpenAPI specs / OAS&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The OpenAPI specification is the standard for describing a RESTful API. It can be seen as your guide for writing the API definition following the OpenAPI rules.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#openapi-definition"&gt;
  &lt;/a&gt;
  OpenAPI definition
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Also known as OpenAPI file / OpenAPI document / OpenAPI description / OpenAPI contract&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The OpenAPI definition describes exactly how your API works. The OpenAPI definition is written following the OpenAPI specification.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#openapi-documentation"&gt;
  &lt;/a&gt;
  OpenAPI documentation
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Also known as OpenAPI reference&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The OpenAPI documentation is human-readable documentation for your API based on your OpenAPI definition. Your documentation can be automatically generated from your OpenAPI definition to avoid the pain of writing it by hand.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#major-differences-between-openapi-20-30-31"&gt;
  &lt;/a&gt;
  Major differences between OpenAPI 2.0, 3.0, 3.1
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#versions"&gt;
  &lt;/a&gt;
  Versions
&lt;/h3&gt;

&lt;p&gt;In the 2.0 specification, a property called “&lt;code&gt;swagger&lt;/code&gt;” indicated which version of the specification you are using. In OpenAPI 3.0, this is replaced by a new “&lt;code&gt;openapi&lt;/code&gt;” property:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;"swagger": "2.0"&lt;/code&gt;  line is thus transformed into &lt;code&gt;"openapi": "3.0.0"&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#structural-changes"&gt;
  &lt;/a&gt;
  Structural changes
&lt;/h3&gt;

&lt;p&gt;The following image sums up the main structural changes between 2.0 and 3.0. As you can see a simplification effort has been made to group each concern in a more logical way.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zJeB9ETV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/bump-blog-resources/what-is-openapi/OpenAPI-2-versus-OpenAPI-3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zJeB9ETV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/bump-blog-resources/what-is-openapi/OpenAPI-2-versus-OpenAPI-3.png" alt="openapi 2 versus openapi 3" width="880" height="519"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to get more into the details about what changed between OpenAPI 3.0 and 3.1, you can have a look at our dedicated article &lt;a href="https://bump.sh/blog/changes-in-openapi-3-1"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#format"&gt;
  &lt;/a&gt;
  Format
&lt;/h2&gt;

&lt;p&gt;OpenAPI definition can be written both in YAML and JSON formats.&lt;/p&gt;

&lt;p&gt;These formats were chosen because they are easy for a human to read and write, and easy for machines to parse. In practice, YAML is the most used format adopted to write OpenAPI definitions. Like it or not, YAML is easier to read than JSON mainly because it reduces the use of markup tags. Also, it is a format that is widely used to write any sort of software configuration.&lt;/p&gt;

&lt;p&gt;Here is an example of a simple OpenAPI (3.0.2) definition endpoint written in YAML :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;/previews&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;post&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;summary&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Create a preview&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
      &lt;span class="s"&gt;Create a preview for a given documentation file. The preview will have a unique&lt;/span&gt;
      &lt;span class="s"&gt;temporary URL, and will be active for 30 minutes.&lt;/span&gt;
    &lt;span class="na"&gt;security&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[]&lt;/span&gt;
    &lt;span class="na"&gt;requestBody&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;$ref&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#/components/requestBodies/Preview"&lt;/span&gt;
    &lt;span class="na"&gt;responses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;201"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Success"&lt;/span&gt;
        &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;application/json"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;$ref&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#/components/schemas/Preview"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#openapi-simple-definition-structure"&gt;
  &lt;/a&gt;
  OpenAPI simple definition structure
&lt;/h2&gt;

&lt;p&gt;Your OpenAPI definition lets you describe your REST API:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Define general information about your API: description, terms of use, license, contact, etc…&lt;/li&gt;
&lt;li&gt;Authentication methods &lt;code&gt;HTTP&lt;/code&gt;, &lt;code&gt;API keys&lt;/code&gt;, &lt;code&gt;OAuth 2&lt;/code&gt;, &lt;code&gt;OpenID&lt;/code&gt;, etc…&lt;/li&gt;
&lt;li&gt;Available endpoints &lt;code&gt;/users&lt;/code&gt;, etc…&lt;/li&gt;
&lt;li&gt;Since OpenAPI 3.1, &lt;a href="https://bump.sh/blog/changes-in-openapi-3-1#webhooks-support"&gt;available webhooks&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Available operations on each endpoint: &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, etc…&lt;/li&gt;
&lt;li&gt;Input and output parameters for each operation&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#openapi-benefits"&gt;
  &lt;/a&gt;
  OpenAPI benefits
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#designfirst"&gt;
  &lt;/a&gt;
  Design-First
&lt;/h3&gt;

&lt;p&gt;In a design-first world, OpenAPI allows you to describe your whole API from endpoints to examples before even writing the first line of code.&lt;/p&gt;

&lt;p&gt;Using this approach, the API definition is the cornerstone of your API and becomes the single source of truth in your organization. Code is based on what has been validated during the design phase and the documentation is generated and synced with the API definition.&lt;/p&gt;

&lt;p&gt;Your team can collaborate at every step of the API design phase and leverage their workflow:&lt;/p&gt;

&lt;p&gt;Business and product teams can specify new features that meet consumers needs and a technical writer or an engineer can create or update the OpenAPI definition. Teams can &lt;a href="https://bump.sh/blog/api-design-first-with-bump-diff#collaborating-on-api-design"&gt;discuss the changes&lt;/a&gt;, test the impacts and validate them.&lt;/p&gt;

&lt;p&gt;The API design process is boosted: frontend and backend developers can use the OpenAPI file to start working on the implementation, even if this is not the final version of the document.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#codefirst"&gt;
  &lt;/a&gt;
  Code-first
&lt;/h3&gt;

&lt;p&gt;Obviously, we can’t talk about Design-First without mentioning the historical approach of Code-First, as it can have some benefits as well.&lt;/p&gt;

&lt;p&gt;If you need to deploy an API fast for a MVP, internal use or with few endpoints, spending time on API design before you start coding may not be necessary and may slow your delivery time.&lt;/p&gt;

&lt;p&gt;As developers, we have our rooted habits and Code-First follows the historical development process. We put ourselves directly into coding, without the need to learn yet another language or design tools to create our APIs. Sometimes it is a great time saver.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tools-for-openapi"&gt;
  &lt;/a&gt;
  Tools for OpenAPI
&lt;/h2&gt;

&lt;p&gt;There are many tools to help you get the most out of OpenAPI, at every step of the API life cycle, here is a selection of our preferred ones:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#editors"&gt;
  &lt;/a&gt;
  Editors
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mermade.github.io/openapi-gui/"&gt;OpenAPI-GUI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stoplight.io/studio/"&gt;Stoplight studio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://editor.swagger.io/"&gt;Swagger editor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://insomnia.rest/"&gt;Insomnia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#linters"&gt;
  &lt;/a&gt;
  Linters
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/wework/speccy"&gt;Speccy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/stoplightio/spectral"&gt;Spectral&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://bump.sh/api-documentation"&gt;Bump.sh&lt;/a&gt; 💙&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/swagger-api/swagger-ui"&gt;Swagger UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Redocly/redoc"&gt;Redoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://readme.com/"&gt;Readme&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#mocking"&gt;
  &lt;/a&gt;
  Mocking
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/stoplightio/prism"&gt;Prism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/danielgtaylor/apisprout"&gt;APISprout&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.postman.com/api-platform/api-testing/"&gt;Postman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://microcks.io/"&gt;Microcks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#clients-generator"&gt;
  &lt;/a&gt;
  Clients generator
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/OpenAPITools/openapi-generator"&gt;OpenAPI Generator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#observability"&gt;
  &lt;/a&gt;
  Observability
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.akitasoftware.com/"&gt;Akita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://useoptic.com/"&gt;Optic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Besides the ones mentioned above, here is an amazing and more exhaustive list of curated tools for OpenAPI: &lt;a href="https://openapi.tools/"&gt;&lt;/a&gt;&lt;a href="https://openapi.tools/"&gt;https://openapi.tools/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#give-it-a-try"&gt;
  &lt;/a&gt;
  Give it a try
&lt;/h2&gt;

&lt;p&gt;Now that you know what OpenAPI is, try it out and get inspired by existing OpenAPI definitions to create your own.&lt;br&gt;
Here are some examples of public API definitions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/meilisearch/specifications/main/open-api.yaml"&gt;Meilisearch API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gitlab.com/gitlab-org/gitlab/-/raw/master/doc/api/openapi/openapi.yaml"&gt;Gitlab API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.bump.sh/source.json"&gt;Bump API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can use any of those URL in our dedicated preview box right below this article.&lt;/p&gt;

&lt;p&gt;Have fun with OpenAPI! ✨&lt;/p&gt;

</description>
      <category>openapi</category>
      <category>api</category>
      <category>swagger</category>
      <category>apidocumentation</category>
    </item>
    <item>
      <title>How to use really long environment variables in Netlify functions</title>
      <author>Salma Alam-Naylor</author>
      <pubDate>Tue, 18 Jan 2022 15:38:28 +0000</pubDate>
      <link>https://dev.to/whitep4nth3r/how-to-use-really-long-environment-variables-in-netlify-functions-1el2</link>
      <guid>https://dev.to/whitep4nth3r/how-to-use-really-long-environment-variables-in-netlify-functions-1el2</guid>
      <description>&lt;p&gt;Regardless of what stage you’re at in your development career, you’ve probably given or received this particular piece of advice: do not store secrets and API keys in your code repositories. Instead, use environment variables!&lt;/p&gt;

&lt;p&gt;Popular front end JavaScript frameworks such as React, Next.js, Vue.js and Gatsby have built-in support for using environment variables with &lt;code&gt;.env&lt;/code&gt; files, and Netlify allows you to manage environment variables for your projects via the Netlify UI, CLI or configuration files. But there is a tiny catch. Due to the limitations of AWS Lambda under the hood, &lt;strong&gt;stored environment variable values that exceed a maximum length of 256 characters cannot be used in Netlify serverless functions&lt;/strong&gt;. This might sound like bad news if, for example, you need to store a private key as an environment variable for use in your functions files. &lt;/p&gt;

&lt;p&gt;But all is not lost! We can harness the power of a handy Netlify build plugin to allow you to use longer environment variables in your functions files. Let’s take a look.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;This guide assumes you are familiar with Netlify functions and have configured the location of your Netlify functions folder either in the Netlify UI or with a &lt;code&gt;netlify.toml&lt;/code&gt; build configuration file in your repository. If you’re new to Netlify serverless functions, &lt;a href="https://docs.netlify.com/functions/overview/"&gt;check out the official documentation to learn more&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-the-plugin"&gt;
  &lt;/a&gt;
  Installing the plugin
&lt;/h2&gt;

&lt;p&gt;We’re going to install the &lt;a href="https://github.com/bencao/netlify-plugin-inline-functions-env"&gt;netlify-plugin-inline-functions-env&lt;/a&gt; plugin by &lt;strong&gt;bencao&lt;/strong&gt;. This will inline build-time environment variables into Netlify function code, making them available at run-time. This build plugin does not affect your source code, edit your environment variables stored in Netlify, or expose your environment variables to a client. All transformed code lives on the Netlify servers and is only changed at build-time when you push a deployment to your site.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation-via-the-netlify-ui"&gt;
  &lt;/a&gt;
  Installation via the Netlify UI
&lt;/h3&gt;

&lt;p&gt;On the Netlify UI dashboard, click on Plugins. Search for “Inline functions environment variables” and press enter. Click the install button next to the plugin in the list.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FpHi5FVU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rf37sl1rxcdf7sm8z5xj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FpHi5FVU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rf37sl1rxcdf7sm8z5xj.png" alt="A screenshot of the Netlify UI showing the inline functions environment variables in the plugin list" width="880" height="674"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Choose which site you’d like to add the plugin to, and confirm.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z90K7ik5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mtl3w1pbww7wjoz95hwk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z90K7ik5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mtl3w1pbww7wjoz95hwk.png" alt="A screenshot of the next step of the plugin installation process, asking where I would like to install the plugin. In the search box is whitep4nth3r.com showing the UI is ready for me to select my site." width="880" height="705"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Technically, you’re now good to go! All environment variables that you use in your Netlify function files will now be inlined at build-time. This means that function code that looks like this in your repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I'm inlining my environment variables!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;myEnvVar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REALLY_LONG_ENV_VAR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;will be transformed to this at build-time — and stored on Netlify servers — when you push your code to Netlify:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I'm inlining my environment variables!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;myEnvVar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;KYwvDpY5yNzMnvHqQMF3pgp7QPNC4rAtrZhnz44RDKBYcyU3JLGRuCGvBHEK38Smu5XkBCNZjyNGWkRLZZX8zUBePeGvnd6krczZ...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, you might want more control over which environment variables are transformed. Let’s look at how we can do that with a Netlify configuration file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-build-plugin-options"&gt;
  &lt;/a&gt;
  Configuring build plugin options
&lt;/h2&gt;

&lt;p&gt;Build plugin options can be configured in your code with a Netlify configuration file. If you don’t have a configuration file in your repository already, create a &lt;code&gt;netlify.toml&lt;/code&gt; file at the root of your project. To learn more about configuration files with Netlify, &lt;a href="https://docs.netlify.com/configure-builds/file-based-configuration/"&gt;check out our official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Add the following to your &lt;code&gt;netlify.toml&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[[plugins]]
package = "netlify-plugin-inline-functions-env"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you already have a &lt;code&gt;netlify.toml&lt;/code&gt; file which currently uses plugins, make sure to add the full code snippet above, including &lt;code&gt;[[plugins]]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To specify environment variables you’d like the build plugin to include, use the &lt;code&gt;include&lt;/code&gt; option.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[[plugins]]
package = "netlify-plugin-inline-functions-env"
  [plugins.inputs]
  include = ["REALLY_LONG_ENV_VAR"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To configure the build plugin to transform all environment variables by default, but exclude specific values, use the &lt;code&gt;exclude&lt;/code&gt; option.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[[plugins]]
package = "netlify-plugin-inline-functions-env"
  [plugins.inputs]
  exclude = ["DO_NOT_TRANSFORM_ME"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Commit and push your &lt;code&gt;netlify.toml&lt;/code&gt; file changes to create a new deployment on Netlify. The environment variables you specified to include via the build plugin options will be converted to plain text and inlined with your function code — all behind the scenes on the server without affecting your committed code! You can now use super-long environment variables in your Netlify projects!&lt;/p&gt;

&lt;p&gt;For further reading, &lt;a href="https://docs.netlify.com/configure-builds/build-plugins/"&gt;check out the official documentation on the power of build plugins&lt;/a&gt; and if this article helped you out, &lt;a href="https://twitter.com/netlify"&gt;let us know on Twitter&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>netlify</category>
      <category>node</category>
    </item>
    <item>
      <title>OSCP and CRL: what could go wrong?</title>
      <author>Cossack Labs</author>
      <pubDate>Tue, 18 Jan 2022 15:38:05 +0000</pubDate>
      <link>https://dev.to/cossacklabs/oscp-and-crl-what-could-go-wrong-4kf3</link>
      <guid>https://dev.to/cossacklabs/oscp-and-crl-what-could-go-wrong-4kf3</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Read this post to learn everything to know about TLS certificate revocation protocols: OCSP and CRL. &lt;br&gt;
How to use OCSP and CRL for validating TLS certificates in Go apps? Even though Golang has native support for TLS, it has extremely limited support for OCSP and CRL. So, what should you do then?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Online_Certificate_Status_Protocol"&gt;OCSP (Online Certificate Status Protocol)&lt;/a&gt;, &lt;a href="https://datatracker.ietf.org/doc/html/rfc6960"&gt;RFC6960&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Certificate_revocation_list"&gt;CRL (Certificate Revocation List)&lt;/a&gt;, &lt;a href="https://datatracker.ietf.org/doc/html/rfc5280"&gt;RFC5280&lt;/a&gt; provide a way to verify whether the TLS certificate was revoked by a Certificate Authority before the app establishes secure communication with a service that uses this certificate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zCkRumPn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rp9i805jn9alflc7nu14.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zCkRumPn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rp9i805jn9alflc7nu14.png" alt="OCSP and CRL" width="880" height="744"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-could-go-wrong-in-using-ocsp-and-crl"&gt;
  &lt;/a&gt;
  What could go wrong in using OCSP and CRL?
&lt;/h2&gt;

&lt;p&gt;Here's just a quick list:&lt;/p&gt;

&lt;p&gt;🔴  &lt;strong&gt;Establishing session before validating the TLS certificate&lt;/strong&gt; (don't be tempted to "optimise" things if OCSP and CRL cause visible delays in the application work).&lt;br&gt;
🔴  &lt;strong&gt;Unreachable CRL / OCSP responders&lt;/strong&gt; (this could destabilise the whole solution, as applications can be stuck in limbo, not communicating with other services while validating the certificates).&lt;br&gt;
🔴  &lt;strong&gt;Accepting "Unknown" status as valid&lt;/strong&gt; (if the application treats OCSP "Unknown" status as "the certificate is still valid", it might continue talking to the already malicious service, treating it as a valid).&lt;br&gt;
🔴  &lt;strong&gt;Certificate revocation checks are too rare&lt;/strong&gt; (balance performance and security, mind a threat model and security requirements).&lt;br&gt;
🔴  &lt;strong&gt;Lack of signature validation&lt;/strong&gt; (it's essential to verify the CRL response signature to prevent potential attackers from tampering with the list).&lt;br&gt;
🔴  &lt;strong&gt;CRL cache poisoning&lt;/strong&gt; (if CRL is cached in a local file without any integrity checks, the application won't recognise that the file was changed).&lt;br&gt;
🔴  &lt;strong&gt;Delta CRLs&lt;/strong&gt; (if implemented poorly, issues with network connectivity might result in the application not receiving some delta CRLs and continuing to trust the revoked certificates).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-needs-ocsp-and-crl"&gt;
  &lt;/a&gt;
  Who needs OCSP and CRL?
&lt;/h2&gt;

&lt;p&gt;We stumbled upon intricacies in OCSP and CRL when building &lt;a href="https://www.cossacklabs.com/acra/"&gt;Acra database security suite&lt;/a&gt;, an application that sits between the app and the database and encrypts/decrypts sensitive data. The support of OCSP and CRL is crucial for Acra to prevent unauthorised connections from malicious or misconfigured apps to sensitive data. &lt;/p&gt;

&lt;p&gt;To meet our security model, we had to implement OCSP/CRL verification in Golang ourselves. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#see-ocsl-and-crl-implementation-examples"&gt;
  &lt;/a&gt;
  See OCSL and CRL implementation examples
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 As it was not easy but interesting task, we put our findings into a new engineering blog post: &lt;a href="https://www.cossacklabs.com/blog/tls-validation-implementing-ocsp-and-crl-in-go/"&gt;TLS validation: implement OCSP and CRL verifiers in Go&lt;/a&gt;. Follow the link to learn more about OCSP/CRL design, implementation and security tips, example code and popular mistakes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you're a Golang engineer that works closely with TLS, our blog post will give you lots of moments to think about. &lt;/p&gt;

&lt;p&gt;To illustrate everything we’ve posted above, we created minimalistic OCSP and CRL implementations in Go. &lt;/p&gt;

&lt;p&gt;Check out the &lt;a href="https://cossacklabs.com/blog/tls-validation-implementing-ocsp-and-crl-in-go/#ocsp-crl-live-examples"&gt;4. Live examples&lt;/a&gt; chapter with all the scripts to generate TLS certificates, OCSP responder based on OpenSSL, and Golang server-side and client-side apps. Feel free to review and run examples to see how the verification works with valid and revoked certificates.&lt;/p&gt;

</description>
      <category>security</category>
      <category>go</category>
      <category>development</category>
      <category>encryption</category>
    </item>
    <item>
      <title>Convince me that Web3 is the worst</title>
      <author>Ben Halpern</author>
      <pubDate>Tue, 18 Jan 2022 15:37:43 +0000</pubDate>
      <link>https://dev.to/ben/convince-me-that-web3-is-the-worst-3b4n</link>
      <guid>https://dev.to/ben/convince-me-that-web3-is-the-worst-3b4n</guid>
      <description>&lt;p&gt;Just for the fun of it, I want to hear everyone's arguments for why Web3 is not, or should not be the future.&lt;/p&gt;

&lt;p&gt;In case you need a better understanding of what we're talking about here:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/narottam04" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5QLDKQV8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--w8o-R6Cl--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/540306/ae8f12de-c8b6-47a5-a3cc-02030460ee04.jpeg" alt="narottam04"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/narottam04/web-10-web-20-web-30-explained-591n" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Web 1.0, Web 2.0 &amp;amp; Web3 Explained &lt;/h2&gt;
      &lt;h3&gt;Narottam04 ・ Dec 24 '21 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#blockchain&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#web3&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/dabit3" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gYALFAE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--YawV5F9h--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/126437/41231eb2-054b-4417-bc35-814e491a2d5d.jpeg" alt="dabit3"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/dabit3/defining-the-web3-stack-39ef" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Defining the web3 stack&lt;/h2&gt;
      &lt;h3&gt;Nader Dabit ・ Dec 23 '21 ・ 11 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#web3&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#blockchain&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#ethereum&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;This shouldn't be personal, or aggressive. Keep it light, and give me your argument.&lt;/p&gt;

</description>
      <category>web3</category>
      <category>webdev</category>
      <category>healthydebate</category>
      <category>discuss</category>
    </item>
    <item>
      <title>WEBCode.run Private Endpoints on Observablehq.com Released!</title>
      <author>Tom Larkworthy</author>
      <pubDate>Tue, 18 Jan 2022 15:27:20 +0000</pubDate>
      <link>https://dev.to/tomlarkworthy/webcoderun-private-endpoints-on-observablehqcom-released-8n</link>
      <guid>https://dev.to/tomlarkworthy/webcoderun-private-endpoints-on-observablehqcom-released-8n</guid>
      <description>&lt;h1&gt;
  &lt;a href="#webcoderun-private-endpoints-released"&gt;
  &lt;/a&gt;
  &lt;a href="https://webcode.run"&gt;WEBCode.run&lt;/a&gt; Private Endpoints Released
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/HqITeIFlRXI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://webcode.run"&gt;WEBCode.run&lt;/a&gt; is growing! We have added our first paid feature which will help support it long term. WEBCode is bootstrapped so this is a big milestone!&lt;/p&gt;

&lt;p&gt;For those that do not know, &lt;a href="https://webcode.run"&gt;WEBCode.run&lt;/a&gt; allows you to run serverless compute workloads from within &lt;a href="https://observablehq.com"&gt;Observable&lt;/a&gt; notebooks. Until now, notebooks containing &lt;a href="https://webcode.run"&gt;WEBCode.run&lt;/a&gt; handlers had to be public so that WEBCode's compute layer could read the code. Not anymore!&lt;/p&gt;

&lt;p&gt;We have added a new feature for Observable &lt;a href="https://observablehq.com/@observablehq/getting-started-with-teams"&gt;Team&lt;/a&gt; accounts that allows public access to serverless endpoints while keeping the source code private. We feel this feature best suits commercial teams, and thus, is a perfect fit for a paid tier. Find out more on the &lt;a href="https://webcode.run"&gt;webcode.run website&lt;/a&gt; or contact &lt;a href="//mailto://sales@webcode.run"&gt;sales@webcode.run&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For those that want to use WEBCode to build transparent open source services, they can continue do so at no charge.&lt;/p&gt;

&lt;p&gt;As part of the work in providing a paid tier, we have updated the &lt;a href="https://webcode.run"&gt;website&lt;/a&gt; significantly. You can also email me at &lt;a href="//mailto://tom@webcode.run"&gt;tom@webcode.run&lt;/a&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coming-soon"&gt;
  &lt;/a&gt;
  Coming soon
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://webcode.run"&gt;WEBCode.run&lt;/a&gt; enables running HTTP services with excellent performance and observability from within a notebook. In the coming months we will demonstrate why this is an important primitive. &lt;a href="https://webcode.run"&gt;WEBCode.run&lt;/a&gt; is a connection technology for something larger, it enables completely self documenting projects to be bundled into a single encapsulated artifact. In the coming months the focus will be on delivering preconfigured artifacts you can one click fork to self-host and customize.&lt;/p&gt;

&lt;p&gt;In our vision of the future, source level customization and self-hosting at the service level is a single click away. This is only possible when the backend and frontend + all the extras (documentation, monitoring) are a single forkable artifact, &lt;a href="https://webcode.run"&gt;WEBCode.run&lt;/a&gt; &lt;em&gt;with&lt;/em&gt; &lt;a href="https://observablehq.com"&gt;Observablehq.com&lt;/a&gt; are able to deliver this.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#support-us-on-product-hunt"&gt;
  &lt;/a&gt;
  Support us on Product Hunt
&lt;/h3&gt;

&lt;p&gt;We are launching the paid tier and &lt;a href="https://webcode.run"&gt;webcode.run&lt;/a&gt; on Product Hunt. Help us get to #1 with some love &lt;a href="https://www.producthunt.com/posts/webcode-run"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#follow-the-newsletter"&gt;
  &lt;/a&gt;
  Follow the newsletter
&lt;/h3&gt;

&lt;p&gt;I am going to start posting webcode.run updates to a &lt;a href="https://webcode.substack.com/"&gt;newsletter&lt;/a&gt;, so this is another option you can stay up to date&lt;/p&gt;

</description>
      <category>programming</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>devops</category>
    </item>
    <item>
      <title>What is DevOps? REALLY understand it</title>
      <author>Techworld with Nana</author>
      <pubDate>Tue, 18 Jan 2022 15:18:45 +0000</pubDate>
      <link>https://dev.to/techworld_with_nana/what-is-devops-really-understand-it-29j7</link>
      <guid>https://dev.to/techworld_with_nana/what-is-devops-really-understand-it-29j7</guid>
      <description>&lt;p&gt;A &lt;strong&gt;detailed look&lt;/strong&gt; at what DevOps really is with the goal to clarify all questions and doubts around it ✅&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is the written version of &lt;a href="https://youtu.be/0yWAtQ6wYNM"&gt;my new youtube video&lt;/a&gt;&lt;/em&gt; ✍️ 🙂&lt;/p&gt;

&lt;p&gt;DevOps has been gaining a lot of popularity and is taking over the traditional way of software development.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zDgVNd7_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqovjuv73o31hhxxpjfm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zDgVNd7_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqovjuv73o31hhxxpjfm.png" alt="DevOps popularity" width="880" height="478"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#difficulty-to-define-devops"&gt;
  &lt;/a&gt;
  Difficulty to define DevOps
&lt;/h1&gt;

&lt;p&gt;However, "DevOps" term itself is so broad and includes so many things that it became difficult to exactly define it and clearly set the boundaries of DevOps compared to other IT fields. So this post tries to answer the question of "what DevOps is" in detail.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;simplest definition&lt;/strong&gt; is that &lt;code&gt;"DevOps is an intersection of Development and Operations"&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;But where do boundaries of DevOps start and end?  Which part of development is not DevOps? Or what part of operations is not DevOps? And why was there even a need for something between development and operations? 🙉&lt;/p&gt;

&lt;p&gt;Development and Operations are &lt;strong&gt;two main components in the whole application release process&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TAMU1HNE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jr07ly5zuwj5r9lxhhoc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TAMU1HNE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jr07ly5zuwj5r9lxhhoc.png" alt="Dev and Ops in Application Release Process" width="880" height="558"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So let's look in detail at this release process starting from the very beginning!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#application-release-process"&gt;
  &lt;/a&gt;
  Application Release Process
&lt;/h1&gt;

&lt;p&gt;Whenever we're developing an application, we always have the &lt;strong&gt;same process of delivering that application to the end users&lt;/strong&gt;. So this is the main goal no matter if you use waterfall or agile or whatever approach. At its core: 1) you create an application 2) and you want to deliver it to your end users so that they can use it. 👩‍💻&lt;/p&gt;

&lt;p&gt;So let's say you have a great idea about a cool application. You define its functionality or in other words what features it will have,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;you &lt;strong&gt;code&lt;/strong&gt; it,&lt;/li&gt;
&lt;li&gt;you &lt;strong&gt;test&lt;/strong&gt; it &lt;/li&gt;
&lt;li&gt;and now that you have a tested application you want to actually &lt;strong&gt;deploy&lt;/strong&gt; it on a public server and let users access it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For that you &lt;strong&gt;build and package your application&lt;/strong&gt; in some kind of executable form so that it can run. You configure the public server with all the needed stuff like installing any tools the application needs and deploy your application there, you configure firewall rules to allow access to the application on the server and you have launched, users can start using it! 🚀 &lt;/p&gt;

&lt;p&gt;So that's the &lt;strong&gt;simplified basis of any application release&lt;/strong&gt;, but that's not the end of the journey. While in use, you of course have to check in on your application:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Is everything running fine?&lt;/li&gt;
&lt;li&gt;Are users experiencing any issues?&lt;/li&gt;
&lt;li&gt;Maybe there are bugs in the application that you didn't catch when testing&lt;/li&gt;
&lt;li&gt;Can application handle high user loads?&lt;/li&gt;
&lt;li&gt;etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZdaYEJO9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/or18fr416kiktxlqljtk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZdaYEJO9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/or18fr416kiktxlqljtk.png" alt="Typical Software Release Process" width="880" height="178"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So after launching it, you have to actually make sure that your application is accessible and usable by end users and if there are any issues for users, of course you should fix them. &lt;/p&gt;

&lt;p&gt;Now that was the initial launch of your application, but the application development is not done yet. If you see users like your application you would want to make it even cooler, add new features, maybe optimize the performance by getting better servers or making your application faster and so on. So you still have a lot of things to do and every time you improve your application either the code itself or the server configuration you want to make this improvement accessible to the end users immediately.&lt;/p&gt;

&lt;p&gt;So after the initial launch you do multiple updates to your application and to keep track of these updates you version those changes.&lt;/p&gt;

&lt;p&gt;And &lt;strong&gt;you do that over and over again&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;you have an idea of improvement&lt;/li&gt;
&lt;li&gt;you implement it in code&lt;/li&gt;
&lt;li&gt;you test it&lt;/li&gt;
&lt;li&gt;build and package it&lt;/li&gt;
&lt;li&gt;you deploy it&lt;/li&gt;
&lt;li&gt;and once released, you observe it in the production to see whether there are any new improvement possibilities or any issues that need to be fixed right away&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So this gives you a process of &lt;strong&gt;continuous delivery of changes&lt;/strong&gt; an endless cycle of improvements to your application.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;And DevOps is about making this process of continuous delivery &lt;strong&gt;fast&lt;/strong&gt; and with &lt;strong&gt;minimal errors and bugs&lt;/strong&gt;:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bhYSBHIO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxctyhjeuwgfmm8qvbh3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bhYSBHIO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxctyhjeuwgfmm8qvbh3.png" alt="DevOps fast and minimal errors" width="880" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So with DevOps improvements get created and delivered to users fast, but also those improvements are of high quality and well tested.  And that is a &lt;strong&gt;big challenge: quickly delivering high quality code&lt;/strong&gt;. 😳&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#challenges-devops-tries-to-solve"&gt;
  &lt;/a&gt;
  Challenges DevOps tries to solve
&lt;/h1&gt;

&lt;p&gt;Now let's see what are exactly the &lt;strong&gt;challenges that teams may face during this process and which DevOps tries to solve&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;During this whole release process we have roadblocks and frictions:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qoLExefo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oive77i2sl300jq79qmk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qoLExefo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oive77i2sl300jq79qmk.png" alt="Roadblocks and frictions" width="880" height="460"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now what are the frictions and roadblocks in the release process? 🤔&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-miscommunication-and-lack-of-collaboration-%EF%B8%8F"&gt;
  &lt;/a&gt;
  1) Miscommunication and Lack of Collaboration ⛔️
&lt;/h3&gt;

&lt;p&gt;First and the most important challenge is &lt;strong&gt;miscommunication and lack of collaboration between developers and operations&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So releasing application has two main parts: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;you code the application&lt;/li&gt;
&lt;li&gt;you deploy and run the application&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Developers are responsible for coding. Operations are responsible for running the application.&lt;/p&gt;

&lt;p&gt;And between these two there might be a gap of: "I wrote an application, but I can't run it" or "I'm running the application, but i don't know how it works" 🙇🏻‍♂️:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8TODphl0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rmky5r045jz19q2kfasu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8TODphl0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rmky5r045jz19q2kfasu.png" alt="Miscommunications between devs and ops" width="880" height="393"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So developers would code without considering where or how the code will be deployed, while operations would try to deploy without really understanding what and why they are deploying or how the application even works. And this would result in miscommunications between these two.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
Developers finish coding but the deployment guide for the operations team is not good enough or well-documented enough, so operations team struggles deploying it, so release takes longer.&lt;/p&gt;

&lt;p&gt;This kind of miscommunication could cause &lt;strong&gt;stretching the release periods for days and weeks&lt;/strong&gt; and in complex badly maintained projects maybe even month.&lt;/p&gt;

&lt;p&gt;So between the developer is done with the feature and operation starts deploying it, there is &lt;strong&gt;no clearly defined automated process of handover&lt;/strong&gt;. It's based on a complex bureaucratic process of what checklists 📝 need to be completed and what needs to be documented and who needs to manually approve what for the release and so on. So no streamlines or automated processes here. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-conflict-of-interest-%EF%B8%8F"&gt;
  &lt;/a&gt;
  2) Conflict of Interest ⛔️
&lt;/h3&gt;

&lt;p&gt;Apart from miscommunications between development and operations, in a traditional setup, where one team is only responsible for development and other team only for operations, these two have seemingly &lt;strong&gt;different incentives&lt;/strong&gt; that make it hard for them to work together.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers want to push out new features fast&lt;/strong&gt;, while &lt;strong&gt;operations want to make sure those changes don't break anything&lt;/strong&gt;, because operations are incentivized to maintain stability in production. Their main focus is to make sure the application is available, doesn't crash, doesn't show 500 errors to the users and so on.&lt;/p&gt;

&lt;p&gt;This means that &lt;strong&gt;operations need to resist the speed of release&lt;/strong&gt; and check all the aspects of a new release to make sure it's 100% safe, which again slows down the process, especially considering that operations don't really understand the code or the application. So it's even more effort for them to evaluate this new release.&lt;/p&gt;

&lt;p&gt;So even though the main &lt;strong&gt;common goal&lt;/strong&gt; of everyone in a company should be to deliver high quality applications to the end users fast, in practice the &lt;strong&gt;more immediate goals&lt;/strong&gt; are for each role to do their job. And developers job is to quickly create new features and push them out, operations job is to maintain the system stability and resist new changes being pushed out: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rfEyACwg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4j7zx8paqaptjoepzzuz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rfEyACwg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4j7zx8paqaptjoepzzuz.png" alt="Conflict of Interest" width="880" height="432"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This gives us a &lt;strong&gt;conflict of interest&lt;/strong&gt; and this kind of setup naturally makes it difficult for those two to collaborate. 🤷‍♀️&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-security-%EF%B8%8F"&gt;
  &lt;/a&gt;
  3) Security ⛔️
&lt;/h3&gt;

&lt;p&gt;Another showstopper when releasing a feature is Security. Just like operations team carefully evaluates and changes to make sure they won't affect system stability, security team will &lt;strong&gt;evaluate any changes to make sure they don't affect systems security&lt;/strong&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iB-1v-fe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gkdjibblmch1ie87e0hx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iB-1v-fe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gkdjibblmch1ie87e0hx.png" alt="Security Release Showstopper" width="880" height="381"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And in a traditional setup this is the same &lt;strong&gt;manual bureaucratic process as operations&lt;/strong&gt;, which takes days or weeks and slows down the release process. &lt;/p&gt;

&lt;p&gt;And as I mentioned DevOps is about removing any roadblocks that slow down the process, so it includes this one as well.&lt;/p&gt;

&lt;p&gt;However, even though this is part of the DevOps solution, there was a separate term created for that called "DevSecOps" in order to highlight and just remind the teams of the &lt;strong&gt;importance of security&lt;/strong&gt;, because it somehow got left out.&lt;/p&gt;

&lt;p&gt;I actually have a separate dedicated video on DevSecOps, which you can also check out if you're interested: &lt;a href="https://youtu.be/nrhxNNH5lt0"&gt;DevSecOps explained&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#4-application-testing-%EF%B8%8F"&gt;
  &lt;/a&gt;
  4) Application Testing ⛔️
&lt;/h3&gt;

&lt;p&gt;Now adding to the list of show stoppers is application testing. In many projects there are separate teams or roles for testers, who test the application changes on different levels:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;like testing just the feature&lt;/li&gt;
&lt;li&gt;testing the whole application,&lt;/li&gt;
&lt;li&gt;testing on multiple environments etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And &lt;strong&gt;often these tests are done manually&lt;/strong&gt;, when teams cannot totally rely only on their automated tests and only after manual testing is done, can the change be released:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l_yJcP0z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ff236g54d0m3espzcxi6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l_yJcP0z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ff236g54d0m3espzcxi6.png" alt="Application Testing slowing down release process" width="880" height="342"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Even though this may not be done by development or operations role, but rather a separate tester role, this is an important part of the release process and may also slow it down considerably!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#5-manual-work-%EF%B8%8F"&gt;
  &lt;/a&gt;
  5) Manual Work ⛔️
&lt;/h3&gt;

&lt;p&gt;As I mentioned, &lt;strong&gt;many of the tasks&lt;/strong&gt; during the release process like testing, security checks, deployment etc &lt;strong&gt;used to be done manually&lt;/strong&gt;. 🙇🏻‍♂️&lt;/p&gt;

&lt;p&gt;For example, operations would do most of the operations tasks manually, either by directly executing commands on the servers to install tools, configure stuff, do patches or have scripts or small programs they execute. But in both cases this is manual work:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1fV6Gu_s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ovdcosbbyt6inw8y5yom.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1fV6Gu_s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ovdcosbbyt6inw8y5yom.png" alt="Manual Work in release process" width="880" height="446"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Drawbacks of manual work&lt;/em&gt;&lt;br&gt;
This &lt;strong&gt;manual work is slow and more error prone&lt;/strong&gt;, because of human error plus with manual work you have a disadvantage that knowledge sharing is very difficult, because people who do the tasks would have to document it and others would have to read it. &lt;/p&gt;

&lt;p&gt;It's also very &lt;strong&gt;intransparent&lt;/strong&gt;, because it's hard to trace, who executed what when and finally when infrastructure configuration and so on was done manually, if something happens to the infrastructure, it may be really &lt;strong&gt;hard to recover and replicate the exact state&lt;/strong&gt; fast. You would have to remember exactly what was done on the servers, in which order to get to that previous infrastructure state. 🤦🏽‍♀️&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#devops-tries-to-remove-these-roadblocks"&gt;
  &lt;/a&gt;
  DevOps tries to remove these roadblocks ✅
&lt;/h3&gt;

&lt;p&gt;So you see the &lt;strong&gt;main characteristic&lt;/strong&gt; of all these issues is that they all &lt;strong&gt;slow down the release cycle&lt;/strong&gt; and create roadblocks on the way. And you also see in case of security and testing, that DevOps may even go over only development or only operations responsibilities and tasks:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---HZZDcmg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2h5sn5s8nwl8a4x58fi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---HZZDcmg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2h5sn5s8nwl8a4x58fi.png" alt="DevOps including Development, Operations, Testing and Security" width="880" height="487"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's why to understand DevOps &lt;strong&gt;instead of focusing on the name and what it means, we're focusing on what it tries to achieve&lt;/strong&gt;: 💡&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;DevOps tries to remove all these roadblocks and things that slow down the release process, whatever that may be and instead of manual inefficient processes helps create fully automated streamlined processes for release cycles.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And this can be done step by step, removing one roadblock at a time until you have a fully optimized and automated DevOps process, that makes your application release super easy. 🚀&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ovyyypy3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rkcc6nsfofig1xxnvjs6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ovyyypy3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rkcc6nsfofig1xxnvjs6.png" alt="DevOps tries to remove all roadblocks" width="880" height="454"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#devops-concept-as-a-solution"&gt;
  &lt;/a&gt;
  DevOps Concept as a Solution
&lt;/h1&gt;

&lt;p&gt;So how does DevOps help achieve this and solve all these challenges? 👀&lt;/p&gt;

&lt;p&gt;Well, by the &lt;strong&gt;official definition&lt;/strong&gt; and this was the original idea of DevOps:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;DevOps defines a combination of cultural philosophies, practices and tools for doing that.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So DevOps is not just one set of tools or one specific concept, it's a &lt;strong&gt;combination of anything that creates the process of releasing the software fast and with high quality&lt;/strong&gt;. And the main part of the concept was that developers and operations people should work together more often, talk to each other more often and collaborate better to achieve that.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#devops-in-practice-devops-as-a-separate-role"&gt;
  &lt;/a&gt;
  DevOps in Practice: DevOps as a separate Role
&lt;/h1&gt;

&lt;p&gt;But actually this definition is too broad and too high level and makes it hard to imagine how it works in practice. 🙉 So it's just not specific enough. So naturally different companies implemented DevOps in different ways. So the &lt;strong&gt;actual implementation of DevOps looked pretty different from company to company&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But since companies started adopting it, gradually it got a more concrete form with some of the common patterns across many companies and one of these patterns was that &lt;strong&gt;DevOps evolved into an actual role called a "Devops Engineer"&lt;/strong&gt;, where either developers are doing DevOps as a job next to development or operations are doing it or someone is doing DevOps exclusively as their only job.&lt;/p&gt;

&lt;p&gt;And a set of technologies that were used to implement the DevOps principles became &lt;strong&gt;DevOps technologies&lt;/strong&gt;, which now DevOps engineers would need to learn:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QX89fHEM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bxu1cmk44tnl4p8ov16b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QX89fHEM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bxu1cmk44tnl4p8ov16b.png" alt="DevOps Engineer Role and DevOps Tools" width="880" height="489"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And I understand that many people are resisting the idea of DevOps engineer and the creators of the DevOps concept didn't see it used this way, but the reality is often different from the theory. We see that concept was adjusted and bent to meet the needs of the end goal and DevOps engineer role is what came out of it. 🤷‍♀️&lt;/p&gt;

&lt;p&gt;And that DevOps role is responsible for creating a streamlined release process without any roadblocks slowing down the release and that's why in the &lt;strong&gt;center of DevOps is the well-known Continuous Integration / Continuous Delivery process&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#devops-in-practice-how-to-become-a-devops-engineer"&gt;
  &lt;/a&gt;
  DevOps in Practice: How to become a DevOps Engineer
&lt;/h1&gt;

&lt;p&gt;Check out my other blog article to see:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3f3BcUx7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t9mw2nnlf1yizqntt5fe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3f3BcUx7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t9mw2nnlf1yizqntt5fe.png" alt="Overview DevOps in Practice" width="880" height="389"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/techworld_with_nana" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WechM825--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--_H3FtWZg--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/319175/d2dd8825-6a90-429a-ba3e-70b5c3e19557.png" alt="techworld_with_nana"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/techworld_with_nana/devops-roadmap-2021-how-to-become-a-devops-engineer-1n9p" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;DevOps Roadmap - How to become a DevOps Engineer&lt;/h2&gt;
      &lt;h3&gt;Techworld with Nana ・ Jan 17 '21 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cloud&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;After reading this, you may be thinking, these are a lot of things to learn and it may be hard to know, where to start or what to learn first or what resources to use. 🤯&lt;/p&gt;

&lt;p&gt;Well, there are many resources out there to learn individual DevOps technologies, 👍 I actually cover many of the DevOps technologies on &lt;a href="https://www.youtube.com/channel/UCdngmbVKX1Tgre699-XLlUA"&gt;my Youtube channel&lt;/a&gt;. 😊&lt;br&gt;
But ideally you want to &lt;strong&gt;follow a well-structured step-by-step roadmap and more importantly learn how to use these technologies together in combination&lt;/strong&gt;, because that's what DevOps engineers do. They use and integrate multiple technologies together to create DevOps processes and of course you want to learn all these with &lt;strong&gt;actual real-life project examples to know how it will look like in a real job&lt;/strong&gt;. And very few courses and learning resources offer this and that's exactly &lt;strong&gt;why we created a &lt;a href="https://www.techworld-with-nana.com/devops-bootcamp"&gt;complete DevOps Bootcamp&lt;/a&gt;&lt;/strong&gt;  with a clear structure and lots of hands-on projects.&lt;/p&gt;

&lt;p&gt;So if you're thinking about becoming a DevOps engineer or slowly transitioning into DevOps you can definitely check out our DevOps bootcamp 🚀&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#devops-vs-sre-how-sre-fits-into-the-whole-devops-process"&gt;
  &lt;/a&gt;
  DevOps vs SRE - How SRE fits into the whole DevOps process
&lt;/h1&gt;

&lt;p&gt;To get a full picture of DevOps I want to mention one more concept, which is SRE or &lt;strong&gt;S&lt;/strong&gt;ite &lt;strong&gt;R&lt;/strong&gt;eliability &lt;strong&gt;E&lt;/strong&gt;ngineering and how it fits into DevOps.&lt;/p&gt;

&lt;p&gt;We just learned that there are two definitions of DevOps&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the original definition, which is &lt;strong&gt;more high level&lt;/strong&gt; and more broad and doesn't specify how exactly DevOps should be implemented&lt;/li&gt;
&lt;li&gt;and a &lt;strong&gt;more practical one&lt;/strong&gt;, which evolved over time with its own DevOps engineer role.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So when we compare DevOps with SRE it's important to know &lt;strong&gt;which definition of DevOps we're using for this comparison&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;1. First broader definition of DevOps vs. SRE&lt;/em&gt;&lt;br&gt;
DevOps is a more high-level concept that defines &lt;strong&gt;what needs to be done&lt;/strong&gt; to achieve the automated streamlined release process, while SRE is more specific about &lt;strong&gt;how to exactly implement this process&lt;/strong&gt; and how to implement DevOps principles.&lt;/p&gt;

&lt;p&gt;So many people would say that &lt;strong&gt;SRE is a specific implementation of the DevOps concepts&lt;/strong&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y9zZ00ro--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fi34pvwmn158xq6un2kt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y9zZ00ro--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fi34pvwmn158xq6un2kt.png" alt="SRE implementing DevOps" width="880" height="352"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;2. Practical DevOps vs. SRE&lt;/em&gt;&lt;br&gt;
But as we saw DevOps itself also became more practical with its own role and specific technologies and ways to implement it. So what's the comparison here? 🤔&lt;br&gt;
Well, in many companies this practical DevOps implementation became &lt;strong&gt;more focused and concentrated on the speed of delivery&lt;/strong&gt; for the application changes and of course even though it's part of the DevOps principles to not only release fast, but release quality code many DevOps teams in practice again seemed to optimize more for the speed than reliability.&lt;/p&gt;

&lt;p&gt;So as a great &lt;strong&gt;complementary part of DevOps, SRE emerged with the same principles and goals in mind&lt;/strong&gt;, which is release quality code fast, but as the name suggests &lt;strong&gt;more focused on reliability and keeping systems stable&lt;/strong&gt;, while allowing for fast changes:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jj7W89CI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ls53su3l74rlf9mg8g7k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jj7W89CI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ls53su3l74rlf9mg8g7k.png" alt="SRE complementary to DevOps" width="880" height="373"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So SRE is its own role with its own set of tools for making systems reliable. So these two were kind of parallel developments and are now often seen as &lt;strong&gt;two sides of the same coin&lt;/strong&gt; and it's not uncommon for teams to have both DevOps engineer and SRE helping implement the DevOps principles.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Own 'What is SRE' video coming soon.. 🎬&lt;/strong&gt;&lt;br&gt;
This was just a short look at SRE to understand it in comparison to DevOps, but since I have received many questions about what SRE is, I will release its own follow-up video on SRE in the next weeks to explain in more detail like how SRE works in practice, what are the tasks and responsibilities of a Site Reliability engineer and so on.&lt;/p&gt;




&lt;p&gt;For DevOps I hope I could clarify all your questions about it. If not leave a comment in the video and I will try to answer them 😊&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#good-luck-on-your-devops-journey"&gt;
  &lt;/a&gt;
  Good luck on your DevOps journey! 🎉 💪
&lt;/h3&gt;




&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 😍 for more content:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCdngmbVKX1Tgre699-XLlUA?sub_confirmation=1"&gt;YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.instagram.com/techworld_with_nana/"&gt;Instagram - for behind-the-scenes and previews&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/Njuchi_"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/groups/techworldwithnana"&gt;Private FB group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//linkedin.com/in/nana-janashia"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>devops</category>
      <category>beginners</category>
      <category>development</category>
      <category>sre</category>
    </item>
    <item>
      <title>What to pursure after graduation?</title>
      <author>Trishiraj</author>
      <pubDate>Tue, 18 Jan 2022 15:16:41 +0000</pubDate>
      <link>https://dev.to/trishiraj/what-to-pursure-after-graduation-hkb</link>
      <guid>https://dev.to/trishiraj/what-to-pursure-after-graduation-hkb</guid>
      <description>&lt;p&gt;If you've just graduated as a computer science major and if Programming is something you are interested in, Then you should try and focus on any one of these.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Data Scientist - Learn and specialise more in DSA based problems. Platforms like LeetCode can help you become a better competitive programmer with good tests over algorithm knowledge.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Web Development (Vue/React) - The world of web is immensely huge and has everything you need as far as you choose the right tool. Else it can get overwhelming sometimes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;App development (Native/PWA/Flutter) - There was a time when native app development was the only way to go but now that you have amazing hybrid app tools and PWA with regards to web development. I think it's safe to say learning web development can strike two goals in one shot.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UI/UX Design (Figma/Adobe XD) - If you've seen enough of boring UIs out there and would like to kick it up a notch, it would be a good start to study different design concepts like "Material design, neuromorphism, Flat design" and then play with it as you see fit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;API handling &amp;amp; Testing (Postman/Swagger/Php/Node/Laravel) - If you're to work for a company you would definitely need to handle the backend for their given frontend application. Being able to create - test and handle API is a good start. You might have heard the term "REST" in a lot of places, now is a good time to learn more about it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Database/Backend services (Cloud services, Mongo, Redis etc) - Depending on the type of frontend you are working on, it's essential to choose the right backend to handle the flow within the application, else it would be a cumbersome work trying to deal with it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AI/ML - To put it straight, AI and ML are definitely not on the easier domains with regards to the above mentioned titles. This takes a lot of patience, practice and effort to pull it through. If you do manage to pull it through then consider that there's nothing stopping you from getting you what you need in this domain.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AR/VR - If you haven't heard about the hype of Metaverse, NFT and what not. You are either living under a cave or you've become a wise person. None the less, dealing with AR/VR can be quite some fun if things tend to workd right. A good place to start would be modelling your 3D objects (Blender) and using AR tools like Google's ARcore.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let me know what you think! Would love to know what you're pursuing right now and how it got started!&lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>devjournal</category>
      <category>motivation</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
