<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>1 + '2'? 3? 12! </title>
      <author>Tom Smykowski</author>
      <pubDate>Tue, 14 Dec 2021 20:02:52 +0000</pubDate>
      <link>https://dev.to/tomaszs2/1-2-3-12-fl2</link>
      <guid>https://dev.to/tomaszs2/1-2-3-12-fl2</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/-8m3emUdL7M"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to find log4j vulnerable dependencies quickly across your codebase</title>
      <author>Prosper Otemuyiwa</author>
      <pubDate>Tue, 14 Dec 2021 19:59:57 +0000</pubDate>
      <link>https://dev.to/sourcegraph/how-to-find-log4j-vulnerable-dependencies-quickly-across-your-codebase-32oj</link>
      <guid>https://dev.to/sourcegraph/how-to-find-log4j-vulnerable-dependencies-quickly-across-your-codebase-32oj</guid>
      <description>&lt;p&gt;To quickly determine which of your projects depend on the vulnerable versions of log4j, run these queries on Sourcegraph:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gradle"&gt;
  &lt;/a&gt;
  Gradle
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;org\.apache\.logging\.log4j' 2\.((0|1|2|3|4|5|6|7|8|9|10|11|12|13|14)(\.[0-9]+))
lang:gradle patterntype:regexp count:all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Search Query:&lt;/strong&gt; &lt;a href="https://sourcegraph.com/search?q=context:global+lang:gradle+org%5C.apache%5C.logging%5C.log4j%5B%27%22%5D+2%5C.%280%7C1%7C2%7C3%7C4%7C5%7C6%7C7%7C8%7C9%7C10%7C11%7C12%7C13%7C14%29%28%5C.%5B0-9%5D%2B%29&amp;amp;patternType=regexp&amp;amp;_ga=2.65718382.1309499576.1639448422-1144514160.1639448422"&gt;Gradle&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mavin"&gt;
  &lt;/a&gt;
  Mavin
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;log4j\.version&amp;gt;2\.((0|1|2|3|4|5|6|7|8|9|10|11|12|13|14)(\.[0-9]+))&amp;lt;/log4j\.version&amp;gt;
file:pom\.xml patterntype:regexp count:all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Search Query:&lt;/strong&gt; &lt;a href="https://sourcegraph.com/search?q=context:global+file:pom.xml+%3Clog4j%5C.version%3E2%5C.%280%7C1%7C2%7C3%7C4%7C5%7C6%7C7%7C8%7C9%7C10%7C11%7C12%7C13%7C14%29%28%5C.%5B0-9%5D%2B%29%3C/log4j%5C.version%3E&amp;amp;patternType=regexp&amp;amp;_ga=2.67232849.1309499576.1639448422-1144514160.1639448422"&gt;Mavin&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ivy"&gt;
  &lt;/a&gt;
  Ivy
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;org="org\.apache\.logging\.log4j".*rev="2\.((0|1|2|3|4|5|6|7|8|9|10|11|12|13|14)(\.[0-9]+))"
file:ivy\.xml patterntype:regexp count:all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Search Query:&lt;/strong&gt; &lt;a href="https://sourcegraph.com/search?q=context:global+file:ivy.xml+org%3D%22org%5C.apache%5C.logging%5C.log4j%22+rev%3D%222%5C.%280%7C1%7C2%7C3%7C4%7C5%7C6%7C7%7C8%7C9%7C10%7C11%7C12%7C13%7C14%29%28%5C.%5B0-9%5D%2B%29%22&amp;amp;patternType=regexp&amp;amp;_ga=2.67232849.1309499576.1639448422-1144514160.1639448422"&gt;Ivy&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sbtscala"&gt;
  &lt;/a&gt;
  SBT(Scala)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;org.apache.logging.log4j" % "2.((0|1|2|3|4|5|6|7|8|9|10|11|12|13|14)(\.[0-9]+))
file:\.sbt$ patterntype:regexp count:all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Search Query:&lt;/strong&gt; &lt;a href="https://sourcegraph.com/search?q=context:global+file:%5C.sbt%24+%22org.apache.logging.log4j%22+%25+%222%5C.%280%7C1%7C2%7C3%7C4%7C5%7C6%7C7%7C8%7C9%7C10%7C11%7C12%7C13%7C14%29%28%5C.%5B0-9%5D%2B%29&amp;amp;patternType=regexp&amp;amp;_ga=2.259589194.1309499576.1639448422-1144514160.1639448422"&gt;Scala&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bazel"&gt;
  &lt;/a&gt;
  Bazel
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;org\.apache\.logging\.log4j: 2.((0|1|2|3|4|5|6|7|8|9|10|11|12|13|14)(\.[0-9]+))
lang:bazel patterntype:regexp count:all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Search Query:&lt;/strong&gt; &lt;a href="https://sourcegraph.com/search?q=context:global+lang:bazel+org%5C.apache%5C.logging%5C.log4j:+2%5C.%280%7C1%7C2%7C3%7C4%7C5%7C6%7C7%7C8%7C9%7C10%7C11%7C12%7C13%7C14%29%28%5C.%5B0-9%5D%2B%29&amp;amp;patternType=regexp&amp;amp;_ga=2.96651487.1309499576.1639448422-1144514160.1639448422"&gt;Bazel&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#any-file-containing-orgapachelogginglog4j-followed-by-a-vulnerable-version-number"&gt;
  &lt;/a&gt;
  Any file containing org.apache.logging.log4j followed by a vulnerable version number
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;org\.apache\.logging\.log4j 2.((0|1|2|3|4|5|6|7|8|9|10|11|12|13|14)(\.[0-9]+))
patterntype:regexp count:all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Search Query:&lt;/strong&gt; &lt;a href="https://sourcegraph.com/search?q=context:global+org%5C.apache%5C.logging%5C.log4j+2%5C.%280%7C1%7C2%7C3%7C4%7C5%7C6%7C7%7C8%7C9%7C10%7C11%7C12%7C13%7C14%29%28%5C.%5B0-9%5D%2B%29&amp;amp;patternType=regexp&amp;amp;_ga=2.17986943.777352015.1639448382-1702082279.1639448382&amp;amp;_gac=1.13996357.1636895801.Cj0KCQiAhMOMBhDhARIsAPVml-GU6W22T_XZ_khgKhGR4BWZj1Bq85dwPR4AfI1Ju6PKl17Dt7qWnc0aAihpEALw_wcB"&gt;Any file containing org.apache.logging.log4j followed by a vulnerable version number&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#search-your-organizations-private-code"&gt;
  &lt;/a&gt;
  Search your organization’s private code
&lt;/h3&gt;

&lt;p&gt;On &lt;a href="https://sourcegraph.com"&gt;Sourcegraph Cloud&lt;/a&gt;, run the queries linked above in your user search context &lt;strong&gt;(context:@username)&lt;/strong&gt;, after you’ve synced all of the org repositories you want to search &lt;strong&gt;(in Settings &amp;gt; Account &amp;gt; Your repositories)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;On a &lt;a href="https://docs.sourcegraph.com/?_ga=2.15375984.777352015.1639448382-1702082279.1639448382&amp;amp;_gac=1.153587914.1636895801.Cj0KCQiAhMOMBhDhARIsAPVml-GU6W22T_XZ_khgKhGR4BWZj1Bq85dwPR4AfI1Ju6PKl17Dt7qWnc0aAihpEALw_wcB#quick-install"&gt;self-hosted Sourcegraph instance&lt;/a&gt;, copy and paste those queries above into the search box on your instance. After pasting, ensure the .* (regexp search) button is on for queries that contain regular expressions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#indepth-log4j-0day-fixes-and-mitigations"&gt;
  &lt;/a&gt;
  In-depth Log4j 0-day fixes and mitigations
&lt;/h2&gt;

&lt;p&gt;For in-depth info on Log4j Log4Shell 0-day, check out this &lt;a href="https://about.sourcegraph.com/blog/log4j-log4shell-0-day/?utm_medium=social&amp;amp;utm_source=twitter&amp;amp;utm_campaign=blog"&gt;excellent article on finding, fixing, and track affected codebase.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Finding and fixing vulnerabilities in your codebase can be challenging, but with the right tools, you can speed up the process and secure your codebase in minimal time.&lt;/p&gt;




&lt;p&gt;Have suggestions or questions? Leave a comment, or join our &lt;a href="https://about.sourcegraph.com/community/?utm_medium=social&amp;amp;utm_source=devto&amp;amp;utm_campaign=slacklaunch"&gt;Community Slack Space&lt;/a&gt; where our team will be happy to answer any questions you may have about Sourcegraph.&lt;/p&gt;

</description>
      <category>security</category>
      <category>programming</category>
      <category>computerscience</category>
      <category>devops</category>
    </item>
    <item>
      <title>Why all the Suspense? Understanding Async Consistency in JavaScript Frameworks</title>
      <author>Ryan Carniato</author>
      <pubDate>Tue, 14 Dec 2021 19:54:19 +0000</pubDate>
      <link>https://dev.to/this-is-learning/why-all-the-suspense-understanding-async-consistency-in-javascript-frameworks-3kdp</link>
      <guid>https://dev.to/this-is-learning/why-all-the-suspense-understanding-async-consistency-in-javascript-frameworks-3kdp</guid>
      <description>&lt;p&gt;I had someone recently reach out to me to ask "What is Suspense in the general sense?" They said all they could find was &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt; resources. And I told them that made sense they coined the term. But looking around I realized it was more than that.&lt;/p&gt;

&lt;p&gt;When I look at the topic as explained in most articles it talks about the symptoms of the Suspense component but not really what it is. So I'm going to try to show today why it is so much more than a component that renders placeholders.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consistency-in-user-interfaces"&gt;
  &lt;/a&gt;
  Consistency in User Interfaces
&lt;/h2&gt;

&lt;p&gt;Consistent display of information is a fundamental expectation of a good user interface. If you show users inconsistent information within the same page(without indicating it) it erodes trust.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1AxcE-zF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxd9x6okpctcrs8j04kh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1AxcE-zF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxd9x6okpctcrs8j04kh.png" alt="Inconsistent Avatar" width="700" height="385"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;From Michel Westrate's &lt;a href="https://medium.com/hackernoon/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254"&gt;Becoming Fully Reactive: An in-depth explanation of MobX&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If your avatar is updated in one place and not another can you trust that what you are reading is up to date? You might be tempted to reload the browser page just in case. If the count of comments doesn't match the number of comments you see, even if the number is smaller you might assume you are missing something. But there are more consequential glitches, what about prices on products not matching?&lt;/p&gt;

&lt;p&gt;This goes beyond what you can see. What happens if the internal state of our web app doesn't match what we are displaying to the end-user. Could that cause them to make decisions they otherwise would not make? Decisions of consequence? And could they not even be aware of it if you are showing them one thing and doing another?&lt;/p&gt;

&lt;p&gt;Sure on the web, we are accustomed to the fact that what we see might not be the latest. There is always a delay to send it over the wire compared to the current state of the backend. While this can lead to things being out of date and certain requests we make being rejected, but inconsistent interfaces could put us in a scenario where the application believes it is doing the right thing and passes validation and it is only the end user left unaware.&lt;/p&gt;

&lt;p&gt;Luckily, we have tools built for this. Generally, modern UI libraries and frameworks are all built with consistency in mind.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#consistency-in-frameworks"&gt;
  &lt;/a&gt;
  Consistency in Frameworks
&lt;/h2&gt;

&lt;p&gt;The simplest form of consistency is ensuring that derived state stays in sync with its source state. For instance if you had a state &lt;code&gt;count&lt;/code&gt; a state &lt;code&gt;doubleCount&lt;/code&gt; would always be in fact double that count. In a reactive library we often refer to this as &lt;code&gt;glitch-free&lt;/code&gt; execution. It might look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doubleCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Different frameworks have different ways to ensure this relationship holds. In &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt; state updates aren't applied immediately in so you continue to see the previous state until a time that &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt; applies all the state at the same time. Reactive libraries like Vue or &lt;a href="https://solidjs.com"&gt;Solid&lt;/a&gt; tend to more aggressively update so that on the next line after an update not only is the source data updated but all derived data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// React&lt;/span&gt;
&lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;doubleCount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1, 2&lt;/span&gt;

&lt;span class="c1"&gt;// Solid&lt;/span&gt;
&lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;doubleCount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 20, 40&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this scenario, the difference is inconsequential as in both cases they are consistent. In the end, it has a similar result. Looking from the outside state updates are atomic, applying in all places at the same time.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#async-consistency"&gt;
  &lt;/a&gt;
  Async Consistency
&lt;/h2&gt;

&lt;p&gt;The thing is with glitch-free libraries whether the updates happen now or sometime later they all get applied synchronously. All updates are with the same tick and they all see each other. This is essential to have consistency guarantees. But what happens if everything cannot be calculated synchronously?&lt;/p&gt;

&lt;p&gt;This is a pretty hard problem and it's been the subject of many academic papers. Even stuff related to JavaScript ecosystem like &lt;a href="http://people.seas.harvard.edu/~chong/pubs/pldi13-elm.pdf"&gt;this paper on Elm from 2013&lt;/a&gt;. But to illustrate the problem consider our &lt;code&gt;count&lt;/code&gt; and &lt;code&gt;doubleCount&lt;/code&gt; again but pretend we need to go to the server to calculate &lt;code&gt;doubleCount&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Not real React code, just for illustrative purposes&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doubleCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchDoubleCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// somewhere else:&lt;/span&gt;
&lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now our &lt;code&gt;count&lt;/code&gt; would start at 1 and &lt;code&gt;doubleCount&lt;/code&gt; would initially be undefined while it was fetching putting us in an inconsistent state. At some point later when it resolved &lt;code&gt;doubleCount&lt;/code&gt; would be 2 and we would be consistent again. This happens later when we set &lt;code&gt;count&lt;/code&gt; to 20. &lt;code&gt;doubleCount&lt;/code&gt; would be value 1 until it settled at 40. If you were logging this in a &lt;code&gt;useEffect&lt;/code&gt; you might see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That isn't unexpected but it isn't consistent. And here lies the problem. There are only 3 possible outcomes to prevent our users from seeing this inconsistent state:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-bail-out"&gt;
  &lt;/a&gt;
  1. Bail out
&lt;/h3&gt;

&lt;p&gt;Show something instead of the inconsistent state. Some sort of loading indicator to hide the inconsistency from the end-user and let things settle in the background until it is ready to be displayed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-stay-in-the-past"&gt;
  &lt;/a&gt;
  2. Stay in the Past
&lt;/h3&gt;

&lt;p&gt;Don't apply any of the changes and continue to show things as they were until the new content is ready to be displayed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-predict-the-future"&gt;
  &lt;/a&gt;
  3. Predict the Future
&lt;/h3&gt;

&lt;p&gt;Apply the changes immediately and show the future value while the asynchronous state is updating, and then when it is done replace it (but it should already be the same thing).&lt;/p&gt;




&lt;p&gt;Well, the first one is relatively easy compared to the others as a general solution. We do it all the time. We might apply the source changes right away and then show a loading indicator until we are ready to show updated content. And many people and libraries saw Suspense and stopped there.&lt;/p&gt;

&lt;p&gt;But what if we wanted to do more. Removing content and replacing it after some time can be a rather jarring user experience. I think all of us would love to live in the future but there is a certain unpracticality in this unless the user is performing a mutation. These "optimistic updates" are a great tool but they aren't perfect and aren't always applicable. If you are just trying to fetch the latest data, well you don't have what you haven't received yet.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gKOYsB3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t438cxofqb58i1zrf2bi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gKOYsB3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t438cxofqb58i1zrf2bi.jpg" alt="Image description" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So let's stay in the past. The tricky part is how do we trigger the upcoming async requests if we don't apply any data changes?&lt;/p&gt;

&lt;p&gt;Well, we can make a copy of the state we wish to update in the future. Like we can have &lt;code&gt;count&lt;/code&gt;, and &lt;code&gt;futureCount&lt;/code&gt; and have &lt;code&gt;doubleCount&lt;/code&gt; be derived from &lt;code&gt;futureCount&lt;/code&gt; instead and only apply &lt;code&gt;futureCount&lt;/code&gt;'s value back to &lt;code&gt;count&lt;/code&gt; when everything has resolved. But this gets tricky. What if there are more than one thing fetching and multiple different sources. We'd need to clone everything downstream of that change.&lt;/p&gt;

&lt;p&gt;And that's what is being done more or less with &lt;a href="https://github.com/reactwg/react-18/discussions/41"&gt;Transitions&lt;/a&gt; in &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt; or &lt;a href="https://solidjs.com"&gt;Solid&lt;/a&gt;. Concurrent Rendering exists so that the app can stay in one state while we are safe to render a new updated reality and only commit those changes when everything is settled. It is a systematic way of staying consistent in the past until we are ready.&lt;/p&gt;

&lt;p&gt;Why concurrency though? Well, you are still displaying UI to the end-user so you don't want it to just stop working completely. Things like animations and other non-destructive interactions. It means more work reconciling the changes in the end but ultimately this is an end-user experience feature.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#putting-it-all-together"&gt;
  &lt;/a&gt;
  Putting it all Together
&lt;/h2&gt;

&lt;p&gt;Suddenly &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt;'s decision for &lt;code&gt;setState&lt;/code&gt; to stay in the past doesn't look so unusual. You don't know what might cause asynchronous derived state downstream so you would need to hedge on the side of not updating until you know. That being said these frameworks still have explicit opt-in to concurrent rendering for the same reason.&lt;/p&gt;

&lt;p&gt;Picturing writing a component that creates and updates some state. It would be very unusual if some downstream child component that received the props was responsible for isolating your state change in a Concurrent Transition by virtue of that state being a dependency. This behavior needs to be opt-in.&lt;/p&gt;

&lt;p&gt;And similarly, it may be important to be able to opt out of this behavior. Sometimes some amount of inconsistency is warranted or even desirable. For example, if you need to see the data as fast as possible.&lt;/p&gt;

&lt;p&gt;All in all, Suspense and Transitions provide very useful tools for handling the problem of making our user interfaces consistent. That's a big benefit to end-users. It isn't about performance. It isn't just about data fetching. It's about making it easier to create UIs that users can trust, that behave in expected ways, and that offer a smooth experience no matter how they navigate your web application.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>solidjs</category>
    </item>
    <item>
      <title>Go Channel Patterns - Drop</title>
      <author>b0r</author>
      <pubDate>Tue, 14 Dec 2021 19:40:44 +0000</pubDate>
      <link>https://dev.to/b0r/go-channel-patterns-drop-4k19</link>
      <guid>https://dev.to/b0r/go-channel-patterns-drop-4k19</guid>
      <description>&lt;p&gt;To improve my Go Programming skills and become a better Go engineer, I have recently purchased an excellent on-demand education from &lt;a href="https://www.ardanlabs.com/education/"&gt;Ardan Labs&lt;/a&gt;. Materials are created by an expert Go engineer, &lt;a href="https://twitter.com/goinggodotnet"&gt;Bill Kennedy&lt;/a&gt;.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ohpow5Jt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1349881840220450826/pGwOq5tz_normal.jpg" alt="Bill Kennedy : MIA/-5 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Bill Kennedy : MIA/-5
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @goinggodotnet
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Check out my conversation with &lt;a href="https://twitter.com/MGallagher2010"&gt;@MGallagher2010&lt;/a&gt;. He tells a really interesting story about how he cultivated a business being a technical recruiter. One of the best I know. &lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/in5XQRbHCE"&gt;ardanlabs.buzzsprout.com/1466944/968101…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:18 PM - 09 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1468963384280293380" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1468963384280293380" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1468963384280293380" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;I have decide to record my process of learning how to write more idiomatic code, following Go best practices and design philosophies. &lt;/p&gt;

&lt;p&gt;This series of posts will describe channel patterns used for orchestration/signaling in Go via goroutines.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#drop-pattern"&gt;
  &lt;/a&gt;
  Drop Pattern
&lt;/h2&gt;

&lt;p&gt;The main idea behind &lt;strong&gt;Drop Pattern&lt;/strong&gt; is to have a limit on the amount of work that can be done at any given moment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F_EKElmM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7pnsyvq3q0m19sa3tws.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F_EKElmM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7pnsyvq3q0m19sa3tws.png" alt="Drop Pattern" width="880" height="353"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a buffered channel that provides signaling semantic&lt;/li&gt;
&lt;li&gt;a number of worker goroutines&lt;/li&gt;
&lt;li&gt;a manager goroutine that:

&lt;ul&gt;
&lt;li&gt;takes the work and sends it to the worker goroutine&lt;/li&gt;
&lt;li&gt;if there is more work than worker goroutines can process and buffered channel is full, manager goroutine will drop the work&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;In &lt;strong&gt;Drop Pattern&lt;/strong&gt; we have a limited amount of work (&lt;code&gt;capacity&lt;/code&gt;) we can do in a day.&lt;/p&gt;

&lt;p&gt;We have predefined number of &lt;code&gt;employees&lt;/code&gt; that will do the work (&lt;code&gt;worker&lt;/code&gt; goroutines).&lt;/p&gt;

&lt;p&gt;We also have a &lt;code&gt;manager&lt;/code&gt; (&lt;code&gt;main&lt;/code&gt; goroutine) that generates work (or gets work from some predefined list of work). &lt;/p&gt;

&lt;p&gt;&lt;code&gt;Manager&lt;/code&gt; notifies employee about the work via communication channel &lt;code&gt;ch&lt;/code&gt;. &lt;code&gt;Employee&lt;/code&gt; gets the work from the communication channel &lt;code&gt;ch&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Communication channel &lt;code&gt;ch&lt;/code&gt; is capable of holding a limited amount of work "in the queue" (&lt;code&gt;buffered channel&lt;/code&gt;). We say a channel has a limited &lt;code&gt;capacity&lt;/code&gt;. Once channel &lt;code&gt;ch&lt;/code&gt; is full, &lt;code&gt;manager&lt;/code&gt; can't send new work and instead decides to &lt;strong&gt;DROP&lt;/strong&gt; that unit of work and tries to send a new unit of work to the channel (maybe this time there is some space on the &lt;code&gt;ch&lt;/code&gt;). &lt;code&gt;Manager&lt;/code&gt; will do that as long as there is available work to do.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#use-case"&gt;
  &lt;/a&gt;
  Use Case
&lt;/h4&gt;

&lt;p&gt;Good use case for this pattern would be a DNS server. A DNS server has a limited capacity, or limited amount of requests that it can process at any given moment. If there are more requests sent to the DNS server we can decide to overload and kill the server, or to &lt;strong&gt;DROP&lt;/strong&gt; new requests until DNS server has capacity to process the request.&lt;/p&gt;

&lt;p&gt;Feel free to try the example on &lt;a href="https://play.golang.com/p/vTnynyXgs_l"&gt;Go Playground&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"time"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// capacity&lt;/span&gt;
    &lt;span class="c"&gt;// max number of active requests at any given moment&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="nb"&gt;cap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;

    &lt;span class="c"&gt;// buffered channel is used to determine when we are at capacity&lt;/span&gt;
    &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;cap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// a worker goroutine&lt;/span&gt;
    &lt;span class="c"&gt;// e.g. an employee&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// for-range loop used to check for new work on communication channel `ch`&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"employee : received signal :"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;

    &lt;span class="c"&gt;// amount of work to do&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt;

    &lt;span class="c"&gt;// range over collection of work, one value at the time&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// select-case allow us to perform multiple channel operations&lt;/span&gt;
        &lt;span class="c"&gt;// at the same time, on the same goroutine&lt;/span&gt;
        &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c"&gt;// signal/send work into channel&lt;/span&gt;
        &lt;span class="c"&gt;// start getting goroutines busy doing work&lt;/span&gt;
        &lt;span class="c"&gt;// e.g. manager sends work to employee via buffered communication channel&lt;/span&gt;
        &lt;span class="c"&gt;//      if buffer is full, default case is executed&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="s"&gt;"paper"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"manager : sent signal :"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;// if channel buffer is full, drop the message&lt;/span&gt;
        &lt;span class="c"&gt;// allow us to detect that we are at capacity&lt;/span&gt;
        &lt;span class="c"&gt;// e.g. manager drops the unit of work&lt;/span&gt;
        &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"manager : dropper data :"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// once last piece of work is submitted, close the channel&lt;/span&gt;
    &lt;span class="c"&gt;// worker goroutines will process everything from the buffer&lt;/span&gt;
    &lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"manager : sent shutdown signal"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Second&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go run main.go

manager : sent signal : 0
manager : sent signal : 1
manager : sent signal : 2
manager : sent signal : 3
manager : sent signal : 4
...
manager : dropper data : 101
manager : dropper data : 102
...
employee : received signal : paper
employee : received signal : paper
...
employee 0 : received shutdown signal
...
employee : received signal : paper
employee : received signal : paper
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, drop channel pattern was described. In addition, simple implementation and use case were provided.&lt;/p&gt;

&lt;p&gt;Readers are encouraged to check out excellent &lt;a href="https://www.ardanlabs.com/education/"&gt;Ardan Labs&lt;/a&gt; education materials to learn more.&lt;/p&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.ardanlabs.com/"&gt;Ardan Labs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pexels.com/photo/radio-telescope-against-sky-with-stars-6325001/"&gt;Cover image by Igor Mashkov from Pexels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://habr.com/ru/company/ua-hosting/blog/490750/"&gt;Fan out picture&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>go</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Dev Environments: An Essential Tool for Software Quality</title>
      <author>Francesco Ciulla</author>
      <pubDate>Tue, 14 Dec 2021 19:39:39 +0000</pubDate>
      <link>https://dev.to/tinystacks/dev-environments-an-essential-tool-for-software-quality-gpd</link>
      <guid>https://dev.to/tinystacks/dev-environments-an-essential-tool-for-software-quality-gpd</guid>
      <description>&lt;p&gt;There are many steps on the road to DevOps maturity. Recently, I've been covering some of the most basic concepts,  &lt;a href="https://blog.tinystacks.com/stacks-stages-aws"&gt;such as stacks, stages, and Infrastructure as Code&lt;/a&gt;. Today. I'll stick to these foundational steps and talk about on-demand dev stacks. I'll focus on why dev stacks are perhaps the most important first step teams can take on their DevOps journey. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#your-application-on-demand"&gt;
  &lt;/a&gt;
  Your Application, On Demand
&lt;/h2&gt;

&lt;p&gt;First, let's recap some concepts from my last article. One of the great benefits of moving to a cloud platform like AWS is Infrastructure as Code. With Infrastructure as Code, you can spin up the architecture your application needs - network topology, Web servers, databases, file storage, load balancers, etc. - by programming it. &lt;/p&gt;

&lt;p&gt;Before Infrastructure as Code, standing up a new version of an app usually meant manually configuring and tending to every component of the system. It was tedious and error-prone. Defining your architecture in a programming language like Python or in a declarative language like  &lt;a href="https://aws.amazon.com/cloudformation/"&gt;AWS CloudFormation&lt;/a&gt; means you can deploy and re-deploy your application over and over, consistently and without fear. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stacks-stages-and-environments"&gt;
  &lt;/a&gt;
  Stacks, Stages, and Environments
&lt;/h2&gt;

&lt;p&gt;Before I dive in, let's get clear on our terminology.&lt;/p&gt;

&lt;p&gt;Using Infrastructure as Code, you can deploy a &lt;strong&gt;stack&lt;/strong&gt; - your application plus all its supporting infrastructure - quickly and easily. Once you can deploy a stack, you can deploy multiple stacks - &lt;strong&gt;stages&lt;/strong&gt; - for various purposes - e.g., a single stack for production, plus other stacks for development and testing.&lt;/p&gt;

&lt;p&gt;People in software development talk a lot about &lt;strong&gt;environments&lt;/strong&gt; - e.g., production environments vs. dev environments. In our view, "environment" encompasses a specific runtime for your application that may or may not be hosted in the cloud. For many development teams, dev environments reside on a developer's desktop or laptop. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#production-stacks-and-dev-stacks"&gt;
  &lt;/a&gt;
  Production Stacks and Dev Stacks
&lt;/h2&gt;

&lt;p&gt;Many teams are drawn to Infrastructure as Code to streamline their production deployments. And indeed, repeatable production employments can greatly enhance application quality. Standing up new production stacks opens the door to numerous advanced deployment strategies such as  &lt;a href="https://whatis.techtarget.com/definition/canary-canary-testing"&gt;canary testing&lt;/a&gt; and  &lt;a href="https://martinfowler.com/bliki/BlueGreenDeployment.html"&gt;blue/green deployments&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;But Infrastructure as Code can improve quality before your team even pushes to production. You can use the same code you use to stand up a production stacks to stand up development stacks as well!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-a-dev-stack"&gt;
  &lt;/a&gt;
  Why a Dev Stack?
&lt;/h2&gt;

&lt;p&gt;Personal dev environments are becoming increasingly standardized with tools such as  &lt;a href="https://www.gitpod.io/"&gt;Gitpod&lt;/a&gt; and  &lt;a href="https://github.com/features/codespaces"&gt;Codespaces&lt;/a&gt;. As your team moves more toward standing up stacks, the difference between personal dev environments and dev stacks starts to fade. &lt;/p&gt;

&lt;p&gt;Dev stacks allow development teams to test their changes end to end before they're ever pushed to production. Using Infrastructure as Code, teams are assured that what they're testing is (apart from a few small config changes) identical to what will run in production. &lt;/p&gt;

&lt;p&gt;Having a central dev stack for your team is great. However, giving developers their own fully deployed stacks makes it even easier to test changes before they ever hit main. &lt;/p&gt;

&lt;p&gt;With individual dev stacks, your developers can deploy individual changes faster. This leads to greater flexibility and reliability over grouping many changes together into a single deployment. In addition, when building on cloud services, testing against a live service is better than attempting to replicate that service on a laptop.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-official-dev-stage"&gt;
  &lt;/a&gt;
  The "Official" Dev Stage
&lt;/h2&gt;

&lt;p&gt;If your team hasn't started using dev stacks yet, the first step is to make a shared stack. This will be the start of your &lt;strong&gt;application pipeline&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;A pipeline is a series of stages through which you can push code changes, with each stage gradually widening your user base. On large and long-running projects, pipelines can involve multiple stages and become fairly complicated. However, a simple pipeline consisting of just a dev and a prod stage is a solid start for teams just dipping their toes into the DevOps waters. &lt;/p&gt;

&lt;p&gt;To create a dev stage, you first need to create a full application stack using a language such as AWS CloudFormation. Your stack should define everything that your application needs to run. &lt;/p&gt;

&lt;p&gt;If you already have this for your production stack, then you're almost there! You may need to make a few adjustments based on how you want to launch your dev stack. You have a couple of choices here. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#launch-in-same-aws-account-as-prod"&gt;
  &lt;/a&gt;
  Launch in Same AWS Account as Prod
&lt;/h3&gt;

&lt;p&gt;The simplest strategy is launching your dev stack in the same stack as your prod account. To do this, you'll need to parameterize your Infrastructure as Code deployment so that it uses different prefixes or suffixes for resource names. This will avoid naming collisions with your prod stack. &lt;/p&gt;

&lt;p&gt;AWS CloudFormation makes this easy through the use of parameters. And actually, you don't even need to define your own parameters! You can use  &lt;a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/pseudo-parameter-reference.html"&gt;CloudFormation's pseudo-parameters&lt;/a&gt; - predefined metadata parameters - to implement this quickly and easily. &lt;/p&gt;

&lt;p&gt;For example, assume you are defining an S3 bucket name and want to make sure it's distinct from your production bucket. Using CloudFormation, you can use the name of your stack as a prefix for the bucket name. In the example below (YAML), we use a regular CloudFormation stack parameter, AppVersion, and the full stack name as a pseudo-parameter to construct a unique name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;BucketName: !Sub "{$AWS:StackName}-${AppVersion}"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#launch-in-separate-aws-account"&gt;
  &lt;/a&gt;
  Launch in Separate AWS Account
&lt;/h3&gt;

&lt;p&gt;However, it's not a great idea to mix stacks in a single account. Ideally, you want your production stack hosted in its own AWS account. This allows you to place additional restrictions on access to production. Such restrictions are almost a necessity if your team handles personally identifiable information on customers in prod. &lt;/p&gt;

&lt;p&gt;If you launch your dev stack in a separate account, you don't need to worry about name conflicts. The only thing you should have to parameterize in this context are publicly facing values, such as your application's DNS endpoint. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-dev-stack-per-developer"&gt;
  &lt;/a&gt;
  A Dev Stack Per Developer
&lt;/h2&gt;

&lt;p&gt;Creating a central dev stack is definitely a huge step forward. However, there's still room for improvement! &lt;/p&gt;

&lt;p&gt;A central dev stack is fine for integrating changes that are getting close to production quality. Ideally, however, you want devs to be able to test in their own stacks before committing to a common Git branch. This reduces merge conflicts and helps ensure high-quality code early in the development process. &lt;/p&gt;

&lt;p&gt;If you already have code for launching a dev stack, launching individual dev stacks for developers shouldn't involve much additional work. The major issue is tracking stacks and controlling costs. Giving your entire dev team unfettered access to an AWS account - even a non-production one - can leave you scrambling to control your cloud spend. &lt;/p&gt;

&lt;p&gt;One approach is to use  &lt;a href="https://aws.amazon.com/controltower/"&gt;AWS Control Tower&lt;/a&gt;. Control Tower works in conjunction with  &lt;a href="https://aws.amazon.com/organizations/"&gt;AWS Organizations&lt;/a&gt;, which enables the creation and management of multiple AWS accounts under a single master account. You can use Control Tower in conjunction with  &lt;a href="https://aws.amazon.com/servicecatalog/"&gt;AWS Service Catalog&lt;/a&gt; to offer your dev stack as a service catalog offering that developers can install into their accounts. You can even go one step farther and deploy the stack automatically as part of the account vending process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defining-your-branching-strategy-with-dev-stacks"&gt;
  &lt;/a&gt;
  Defining Your Branching Strategy with Dev Stacks
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://blog.tinystacks.com/stacks-stages-aws"&gt;As I discussed in my last article&lt;/a&gt;, it's important when creating your CI/CD pipeline to work out a branching strategy. One of the simplest strategies is to use  &lt;a href="https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow"&gt;feature branches&lt;/a&gt; for development work. In feature branching, devs create a branch per feature. Developers use pull requests to request integration of their work into main.&lt;/p&gt;

&lt;p&gt;Feature branching has several benefits. By using pull requests, other team members can review and vet a set of changes before they are integrated into the main branch. The entire process keeps your project's main branch clean and in a buildable, deployable state. &lt;/p&gt;

&lt;p&gt;Whatever branching strategy you choose, there's little doubt that giving developers their own fully deployed stacks makes it easier to test changes before they ever hit main. The result is faster deployments and more reliable code. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tinystacks-makes-dev-stacks-easy"&gt;
  &lt;/a&gt;
  TinyStacks Makes Dev Stacks Easy
&lt;/h2&gt;

&lt;p&gt;Here at TinyStacks, we’re all about helping you deploy and manage your stacks in the cloud. We make it easy to transfer from a personal dev environment on your laptop into a development stage with a stack consistent with your production stack. Contact us today to find out more!&lt;/p&gt;

</description>
      <category>devops</category>
      <category>programming</category>
      <category>codenewbie</category>
      <category>tooling</category>
    </item>
    <item>
      <title>Top 4 Deep Learning Networks You Should Know</title>
      <author>images.cv</author>
      <pubDate>Tue, 14 Dec 2021 19:38:58 +0000</pubDate>
      <link>https://dev.to/imagescv/top-4-deep-learning-networks-you-should-know-1f06</link>
      <guid>https://dev.to/imagescv/top-4-deep-learning-networks-you-should-know-1f06</guid>
      <description>&lt;p&gt;Deep learning has become a very popular topic in recent years. Its popularity is due to its ability to train neural nets and perform classification tasks with high accuracy, even without the need for human intervention. Deep learning networks can also be trained on their own, which means they don't require pre-labeled data like other types of machine learning algorithms. Here are 5 deep neural networks that you should know about:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Convolutional Neural Network (CNN)&lt;/strong&gt;&lt;br&gt;
The first deep learning network you should know about is the Convolutional Neural Network (CNN). CNNs are used for image recognition and have been shown to be very effective in this domain. They are also used for other tasks such as natural language processing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Recurrent Neural Network (RNN)&lt;/strong&gt;&lt;br&gt;
The second deep learning network you should know about is the Recurrent Neural Network (RNN). RNNs are used for tasks such as language modeling and machine translation. They are also effective at predicting the next word in a sentence.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Long Short-Term Memory (LSTM)&lt;/strong&gt;&lt;br&gt;
The third deep learning network you should know about is the Long Short-Term Memory (LSTM) network. LSTMs are used for tasks such as speech recognition and natural language processing. They are also effective at predicting the next word in a sentence.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Deep Belief Network (DBN)&lt;/strong&gt;&lt;br&gt;
The fourth deep learning network you should know about is the Deep Belief Network (DBN). DBNs are used for tasks such as image recognition and natural language processing. They are also effective at predicting the next word in a sentence.&lt;/p&gt;




&lt;p&gt;As you can see, there are many different types of deep learning networks that you can use for various tasks. So, which one should you use? Well, that depends on the task at hand. But, in general, it's a good idea to try out several different types of deep learning networks and see which one gives you the best results.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; provide you with an easy way to build image datasets.&lt;br&gt;
15K+ categories to choose from&lt;br&gt;
Consistent folders structure for easy parsing&lt;br&gt;
Advanced tools for dataset pre-processing: image format, data split, image size and data augmentation.&lt;/p&gt;

&lt;p&gt;👉Visit &lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; to learn more&lt;/p&gt;

</description>
      <category>deeplearning</category>
    </item>
    <item>
      <title>The hidden trap of debugger</title>
      <author>Mario Russo</author>
      <pubDate>Tue, 14 Dec 2021 19:28:41 +0000</pubDate>
      <link>https://dev.to/rmarioo/the-hidden-trap-of-debugger-gfi</link>
      <guid>https://dev.to/rmarioo/the-hidden-trap-of-debugger-gfi</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;"Debugging is like being the detective in a crime movie where you are also the murderer." - Filipe Fortes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#how-it-started-a-false-illusion"&gt;
  &lt;/a&gt;
  How it started: a false illusion
&lt;/h2&gt;

&lt;p&gt;When i had my first programming experience i was not aware of the possibility of using a debugger.&lt;br&gt;
It happened that i had to understand why my software was not working as expected , so the only way i had to understand what was going on was to add some print statements all around the code.&lt;br&gt;
Later I learnt that i can use the debugger as a tool to inspect variables and understand the status of my software in a specific time.&lt;br&gt;
I thought &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"I can troubleshoot without adding new code!! &lt;br&gt;
I will be faster than before!"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#how-is-going"&gt;
  &lt;/a&gt;
  How is going
&lt;/h2&gt;

&lt;p&gt;After years working on many and more complex projects  i almost totally change my mind, and realised that actually &lt;em&gt;&lt;strong&gt;the debugger slowed me down!&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
To be clear i still think that in few specific simple cases it is worth to leverage the debugger but in complex cases i think there are better alternatives.&lt;br&gt;
What happened ? &lt;br&gt;
I was thinking that &lt;em&gt;debugger was the only way to troubleshoot issues&lt;/em&gt; so i used it all the times.&lt;br&gt;
If i come back to the my most stressful working times almost all of them were moment in which i was trying to understand the code ,spending hours in long debugging sessions inspecting tons of line of code variables and stack trace.&lt;br&gt;
Can you remember your most stressful working time ? &lt;br&gt;
Can you remember if in those moment you were in long debugging sessions ? &lt;br&gt;
Probably you were trying to &lt;a href="https://www.slideshare.net/MarioRusso6/escape-the-legacy-code-matrix-vimercate"&gt;escape the legacy code matrix&lt;/a&gt; and you were stuck on the first phase: the &lt;em&gt;understanding&lt;/em&gt; phase&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#where-is-the-trap-"&gt;
  &lt;/a&gt;
  Where is the trap ?
&lt;/h2&gt;

&lt;p&gt;I will share now why in my opinion in complex use cases using the debugger actually slow us down and increase our stress and cognitive load  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Give up to learn the code&lt;/strong&gt; &lt;br&gt;
Using the debugger is like using a navigator for your car. It actually helps you but sometimes for some reason it dint work and when it happens you are totally lost because you don't know the path. &lt;br&gt;
Jumping soon to debugger prevent you to learn the code and to improve your reading and reverse engineering skills.&lt;br&gt;
Those are skill that you can acquire only reading more and more code written by someone else. The more you do the more you get better to understand it. An remember there are cases in which you cannot rely use the debugger so it is better to have an alternative.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Manual actions&lt;/strong&gt; &lt;br&gt;
Inspecting a lot of lines of code and variables require manual and very repetitive action like put breakpoint , enter inside function , go to next line , inspect variable, add watches etc..&lt;br&gt;
Manual action is &lt;em&gt;much slower&lt;/em&gt; then automatic action that could performed by computers.&lt;br&gt;
Keeping in mind a lot of variable values and application state &lt;em&gt;require high cognitive load and energy&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Repetitive actions&lt;/strong&gt; &lt;br&gt;
Imagine that you have the following type hierarchy&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;data class&lt;/span&gt; &lt;span class="nc"&gt;University&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;departments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Department&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;

&lt;span class="kd"&gt;data class&lt;/span&gt; &lt;span class="nc"&gt;Department&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Course&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;

&lt;span class="kd"&gt;data class&lt;/span&gt; &lt;span class="nc"&gt;Course&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;students&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;

&lt;span class="kd"&gt;data class&lt;/span&gt; &lt;span class="nc"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;country&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Country&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Country&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;ITALY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nc"&gt;SPAIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nc"&gt;FRANCE&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and you need to check more than one time if an university has students from Italy&lt;br&gt;
Every time you need to inspect the country of student in university you need to do at least 5 action like five clicks , inspect variable take notes or remember their values &lt;br&gt;
If you have to it 10 times , you will have to do 50 click or debugger inspections!.&lt;/p&gt;

&lt;p&gt;An alternative approach could be write a function like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;logItalianPresenceInUniversity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;university&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;University&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;that prints what you want to check. Few additional code to write and just 1 click to execute and check the result.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Lack of trust in tests&lt;/strong&gt; &lt;br&gt;
Someone said &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"A bug is just a missing test"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The purpose of our tests is to help us to define the behaviour of our system and help us to find issues.&lt;br&gt;
An alternative way to debugging to detect an issue is to &lt;em&gt;reproduce it by adding a new test&lt;/em&gt;. &lt;br&gt;
Now if we found a bug thanks to debugger we can call in trap to think "&lt;em&gt;test suite did not help me, so i will do the fix and forget the tests&lt;/em&gt;".&lt;br&gt;
So we may enter in this dangerous loop &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hj8GC_Bl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gidqt1y9ws9gp7v9lotw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hj8GC_Bl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gidqt1y9ws9gp7v9lotw.png" alt="debugger loop fix without tests" width="611" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-sample-case-microservice-with-many-data-transformations"&gt;
  &lt;/a&gt;
  A sample case: microservice with many data transformations
&lt;/h2&gt;

&lt;p&gt;Imagine a service exposing some functionality to the user that need to call other services to fulfil the request&lt;br&gt;
In complex cases there are many data adaptation between the &lt;a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller"&gt;controller&lt;/a&gt; and the call to the other services&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gseCqw4K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7n022wqz85lmo2ivwovt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gseCqw4K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7n022wqz85lmo2ivwovt.png" alt="A service with many adaptation steps" width="880" height="435"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's suppose that there is a bug in that service and some information that arrives from the external service is not sent back to the controller and the user.&lt;br&gt;
Your task is to spot it and fix it and you need to deep dive in many adaptation layers.&lt;br&gt;
Which options you have ?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1: Understand and document every little detail of the code&lt;/strong&gt;&lt;br&gt;
The safest option is to read carefully the code trying to understand it , taking notes and spot the missing point.&lt;br&gt;
This option is good but may require a lot of time and effort to deep dive in the code structure. In legacy systems or when you don't have much time &lt;em&gt;it can become an endless process&lt;/em&gt;. On other hand it on long term it &lt;em&gt;improve your skills to read the code&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2: Use the application with debugger&lt;/strong&gt;&lt;br&gt;
We could put a breakpoint on controller and on client and use the application. &lt;br&gt;
In our case having a lot of adaptation layers this will be take a lot of time with debugging session and so big effort.&lt;br&gt;
For non trivial cases this approach is probably the worst one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3: Use the application with probes in code&lt;/strong&gt;&lt;br&gt;
Here you can guess what is the idea.&lt;br&gt;
You can write some small probe functions to automatically check what would manually ask the debugger to do. Remember the &lt;code&gt;logItalianPresenceInUniversity&lt;/code&gt; function described above ? .&lt;/p&gt;

&lt;p&gt;My personal approach in this cases is &lt;br&gt;
&lt;em&gt;1. identify the start and end of code section to check&lt;/em&gt;&lt;br&gt;
in this case the controller and the client &lt;br&gt;
&lt;em&gt;2. Automatize checks by writing probes functions&lt;/em&gt; &lt;br&gt;
 Example add function that print if a data structure contains the data that i am looking for &lt;br&gt;
&lt;em&gt;3. Put probes in code and create a &lt;a href="https://devconnected.com/how-to-create-and-apply-git-patch-files/"&gt;git patch&lt;/a&gt; for local changes&lt;/em&gt; &lt;br&gt;
&lt;em&gt;4. Run the application and check the probes&lt;/em&gt;&lt;br&gt;
&lt;em&gt;5. Repeat step 3 until issue is found&lt;/em&gt;&lt;br&gt;
 A &lt;a href="https://en.wikipedia.org/wiki/Binary_search_algorithm#Procedure"&gt;binary search algorithm&lt;/a&gt; can limit the tries &lt;br&gt;
&lt;em&gt;6. Rollback local changes when done&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;In complex scenario i find this approach &lt;em&gt;faster&lt;/em&gt; , incremental and it require less cognitive load.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#issue-is-found-now-what"&gt;
  &lt;/a&gt;
  Issue is found now what?
&lt;/h2&gt;

&lt;p&gt;Regardless how i found my preference is: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;highlight the issue by writing a new test and watching it fail***&lt;/li&gt;
&lt;li&gt;Fix the text&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;When we have to find issues in code we have many option on the strategy to follow.&lt;br&gt;
Using the debugger is only one of them and in my opinion in some cases is not the best approach.&lt;br&gt;
Having more than one option we can choose the one that fit more our case.&lt;/p&gt;

&lt;p&gt;*** &lt;em&gt;Writing a new test can be hard in some cases you may need to break dependencies to isolate the section of code as described in &lt;a href="https://www.amazon.it/Working-Effectively-Legacy-Code-English-ebook/dp/B005OYHF0A"&gt;working effectively with legacy code&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>debugging</category>
      <category>feedbackloop</category>
      <category>programming</category>
    </item>
    <item>
      <title>Improving Application Availability with Pod Readiness Gates</title>
      <author>Martin Heinz</author>
      <pubDate>Tue, 14 Dec 2021 19:24:56 +0000</pubDate>
      <link>https://dev.to/martinheinz/improving-application-availability-with-pod-readiness-gates-29pb</link>
      <guid>https://dev.to/martinheinz/improving-application-availability-with-pod-readiness-gates-29pb</guid>
      <description>&lt;p&gt;Making sure your application running in Kubernetes is available and ready to serve traffic can be very easy with &lt;em&gt;Pod&lt;/em&gt; liveness and readiness probes. However, not all application are built to be able to use probes or in some cases require more complex readiness checks which these probes simply cannot perform. Is there however any other solution, if Pod probes just aren't good enough?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#readiness-gates"&gt;
  &lt;/a&gt;
  Readiness Gates
&lt;/h2&gt;

&lt;p&gt;The answer is obviously, yes. It's possible to implement complex custom readiness checks for Kubernetes Pods with help of &lt;em&gt;Readiness Gates&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Readiness gates allow us to create custom status condition types similar to &lt;code&gt;PodScheduled&lt;/code&gt; or &lt;code&gt;Initialized&lt;/code&gt;. Those conditions can then be used to evaluate Pod readiness.&lt;/p&gt;

&lt;p&gt;Normally, Pod readiness is determined only by readiness of all the containers in a Pod, meaning that if all containers are &lt;code&gt;Ready&lt;/code&gt;, then whole is &lt;code&gt;Ready&lt;/code&gt; too. If readiness gate is added to a Pod, then readiness of a Pod gets determined by readiness of all containers &lt;em&gt;and&lt;/em&gt; status of all readiness gate conditions.&lt;/p&gt;

&lt;p&gt;Let's look at an example, to get a better idea of how this work:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Pod&lt;/span&gt;
&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;readinessGates&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;conditionType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;www.example.com/some-gate-1"&lt;/span&gt;
&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;conditions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Ready&lt;/span&gt;
      &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;False"&lt;/span&gt;
      &lt;span class="na"&gt;lastProbeTime&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
      &lt;span class="na"&gt;lastTransitionTime&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2021-11-01T00:00:00Z&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ContainersReady&lt;/span&gt;
      &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;True"&lt;/span&gt;
      &lt;span class="na"&gt;lastProbeTime&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
      &lt;span class="na"&gt;lastTransitionTime&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2021-11-01T00:00:00Z&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;www.example.com/some-gate-1"&lt;/span&gt;
      &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;False"&lt;/span&gt;
      &lt;span class="na"&gt;lastProbeTime&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
      &lt;span class="na"&gt;lastTransitionTime&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2021-11-01T00:00:00Z&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above manifest shows a Pod with single readiness gate named &lt;code&gt;www.example.com/some-gate-1&lt;/code&gt;. Looking at the conditions in status stanza, we can see that the &lt;code&gt;ContainersReady&lt;/code&gt; condition is &lt;code&gt;True&lt;/code&gt;, meaning that all containers are ready, but the custom readiness gate condition is &lt;code&gt;False&lt;/code&gt; and therefore also Pod's &lt;code&gt;Ready&lt;/code&gt; condition must be &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you use &lt;code&gt;kubectl describe pod ...&lt;/code&gt; on such a pod you would also see the following in the &lt;em&gt;Conditions&lt;/em&gt; section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;...
Conditions:
  Type                     Status
  www.example.com/gate-1   False 
  Initialized              True 
  Ready                    False 
  ContainersReady          True 
  PodScheduled             True
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#rationale"&gt;
  &lt;/a&gt;
  Rationale
&lt;/h2&gt;

&lt;p&gt;We now know that it's possible to implement these additional readiness conditions, but are they really necessary though? Shouldn't it be enough to just leverage health checks using probes?&lt;/p&gt;

&lt;p&gt;In most cases probes should be sufficient, there are however situations where more complex readiness checks are necessary. Probably the most common use-case for readiness gates is to sync-up with external system such as cloud provider's load balancer. Example of that would be &lt;a href="https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.1/deploy/pod_readiness_gate/"&gt;AWS LoadBalancer&lt;/a&gt; or &lt;a href="https://cloud.google.com/kubernetes-engine/docs/concepts/container-native-load-balancing"&gt;Container-native load balancing&lt;/a&gt; in GKE. In these cases readiness gates allow us to make the workloads network aware.&lt;/p&gt;

&lt;p&gt;Another reason to use readiness gates is if you have external system that can perform more thorough health checks on your workloads using - for example - application metrics. This can help integrate your system into Kubernetes workload lifecycle without requiring changes to kubelet. It also allows the external system to subscribe to Pod condition changes and act upon on it, possibly applying changes to remediate any availability issues.&lt;/p&gt;

&lt;p&gt;Finally, readiness gates can be a lifesaver if you have legacy application deployed to Kubernetes which is not compatible with liveness or readiness probes, yet its readiness can be checked in a different way.&lt;/p&gt;

&lt;p&gt;For complete rationale for this feature, check out the original &lt;a href="https://github.com/kubernetes/enhancements/tree/master/keps/sig-network/580-pod-readiness-gates#motivation"&gt;KEP in GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-first-gate"&gt;
  &lt;/a&gt;
  Creating First Gate
&lt;/h2&gt;

&lt;p&gt;Enough talking, let's create our first readiness gate. All we need to do is add &lt;code&gt;readinessGates&lt;/code&gt; stanza in Pod &lt;code&gt;spec&lt;/code&gt; with the name of our desired condition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# kubectl run nginx \&lt;/span&gt;
&lt;span class="c1"&gt;#     --image=nginx \&lt;/span&gt;
&lt;span class="c1"&gt;#     --overrides='{"spec": {"readinessGates": [{"conditionType": "www.example.com/gate-1"}]}}'&lt;/span&gt;

&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Pod&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;readinessGates&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;conditionType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;www.example.com/gate-1&lt;/span&gt;
  &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx:latest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Adding the gate is easy, but updating is little more complicated. &lt;code&gt;kubectl&lt;/code&gt; subcommands don't support patching of object status, therefore we cannot use &lt;code&gt;kubectl patch&lt;/code&gt; set the condition to &lt;code&gt;True&lt;/code&gt;/&lt;code&gt;False&lt;/code&gt;. Instead, we have to use &lt;code&gt;PATCH&lt;/code&gt; HTTP request sent directly to API server.&lt;/p&gt;

&lt;p&gt;The simplest way to access cluster API server is using &lt;code&gt;kubectl proxy&lt;/code&gt;, which allows us to reach the server on &lt;code&gt;localhost&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl proxy &lt;span class="nt"&gt;--port&lt;/span&gt; 12345 &amp;amp;

curl &lt;span class="nt"&gt;-s&lt;/span&gt; http://localhost:12345/
curl &lt;span class="nt"&gt;-k&lt;/span&gt; &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s1"&gt;'Accept: application/json'&lt;/span&gt; http://localhost:12345/api/v1/namespaces/default/pods/nginx/status
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In addition to starting the proxy in the background, we also used &lt;code&gt;curl&lt;/code&gt; to check if the server is reachable and queried the server for manifest/status of the pod we will be updating.&lt;/p&gt;

&lt;p&gt;Now that we have a way to reach the API server, let's try updating the Pod status. Every readiness gate status condition defaults to &lt;code&gt;False&lt;/code&gt;, but let's start by explicitly setting it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Explicitly set status to "False"&lt;/span&gt;
curl &lt;span class="nt"&gt;-k&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s2"&gt;"Content-Type: application/json-patch+json"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nt"&gt;-X&lt;/span&gt; PATCH http://localhost:12345/api/v1/namespaces/default/pods/nginx/status &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nt"&gt;--data&lt;/span&gt; &lt;span class="s1"&gt;'[ { "op": "add", "path": "/status/conditions/-", "value": { "lastProbeTime": null, "lastTransitionTime": "2020-03-05T15:50:51Z", "status": "False", "type": "www.example.com/gate-1" }}]'&lt;/span&gt;


kubectl get pods &lt;span class="nt"&gt;-o&lt;/span&gt; wide
NAME    READY   STATUS    RESTARTS   AGE   IP           NODE                 NOMINATED NODE   READINESS GATES
nginx   1/1     Running   0          25s   10.244.0.6   kind-control-plane   &amp;lt;none&amp;gt;           0/1

kubectl describe pod nginx
...
Readiness Gates:
  Type                     Status
  www.example.com/gate-1   False 
Conditions:
  Type                     Status
  www.example.com/gate-1   False
  Initialized              True 
  Ready                    False 
  ContainersReady          True 
  PodScheduled             True
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this snippet we first used &lt;code&gt;PATCH&lt;/code&gt; request against API proxy server to apply JSON patch to &lt;code&gt;status.condition&lt;/code&gt; fields of the Pod. In this case we used &lt;code&gt;add&lt;/code&gt; operation because the status was not set yet. Additionally, you can also see that when we list the pods with &lt;code&gt;-o wide&lt;/code&gt;, the &lt;code&gt;READINESS GATES&lt;/code&gt; column shows &lt;code&gt;0/1&lt;/code&gt; indicating that the gate is set to &lt;code&gt;False&lt;/code&gt;. Same can be also seen in output of &lt;code&gt;kubectl describe&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, let's see how we can toggle the value to &lt;code&gt;True&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-k&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s2"&gt;"Content-Type: application/json-patch+json"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nt"&gt;-X&lt;/span&gt; PATCH http://localhost:12345/api/v1/namespaces/default/pods/nginx/status &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nt"&gt;--data&lt;/span&gt; &lt;span class="s1"&gt;'[{ "op": "replace", "path": "/status/conditions/0", "value": { "type": "www.example.com/gate-1", "status": "True" }}]'&lt;/span&gt;

kubectl get pods &lt;span class="nt"&gt;-o&lt;/span&gt; wide
NAME    READY   STATUS    RESTARTS   AGE   IP           NODE                 NOMINATED NODE   READINESS GATES
nginx   1/1     Running   0          58s   10.244.0.6   kind-control-plane   &amp;lt;none&amp;gt;           1/1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similarly to previous code snippet, we again use &lt;code&gt;PATCH&lt;/code&gt; request to update the condition, this time however we used &lt;code&gt;replace&lt;/code&gt; operation, specifically on the first condition in the list as specified by &lt;code&gt;/status/conditions/0&lt;/code&gt;. Be aware though, that the custom condition doesn't necessarily have to be first in the list so if you will be using some script to update conditions, then you should first check which condition you should be updating.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-client-libraries"&gt;
  &lt;/a&gt;
  Using Client Libraries
&lt;/h2&gt;

&lt;p&gt;Updating condition with &lt;code&gt;curl&lt;/code&gt; like we saw above works for simple scripts or quick manual updates, but generally you will probably need more robust solution. Considering that &lt;code&gt;kubectl&lt;/code&gt; is not an option here, your best bet will be one of the Kubernetes client libraries. For demonstration purposes let's see how it can be done in Python:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# pip install kubernetes
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;kubernetes&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;

&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_kube_config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;pod_manifest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"apiVersion"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"v1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"kind"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Pod"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"metadata"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"nginx"&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s"&gt;"spec"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;"readinessGates"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"conditionType"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"www.example.com/gate-1"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="s"&gt;"containers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
                    &lt;span class="s"&gt;"image"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"nginx"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"nginx"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;}]&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;v1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CoreV1Api&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_namespaced_pod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pod_manifest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_namespaced_pod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nginx"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;phase&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;"Pending"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Pod is 'Running'..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First thing we need to do is authenticate to the cluster and create the Pod. The authentication part is in this case done using &lt;code&gt;config.load_kube_config()&lt;/code&gt; which loads your credentials from &lt;code&gt;~/.kube/config&lt;/code&gt;, in general though it's better to use service accounts and tokens to authenticate to the cluster, sample for that can be found in &lt;a href="https://github.com/kubernetes-client/python/blob/master/kubernetes/README.md#getting-started"&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As for the second part - Pod creation - that's pretty straightforward, we just apply the pod manifest and then wait until it's status phase changes from &lt;code&gt;Pending&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With the Pod running, we can continue by setting its status to the initial &lt;code&gt;False&lt;/code&gt; value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;patch_namespaced_pod_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nginx"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;
    &lt;span class="s"&gt;"op"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"add"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"path"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"/status/conditions/-"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"lastProbeTime"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"lastTransitionTime"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"2020-03-05T15:50:51Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"status"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"False"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"www.example.com/gate-1"&lt;/span&gt;
    &lt;span class="p"&gt;}}])&lt;/span&gt;

&lt;span class="n"&gt;pod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_namespaced_pod_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nginx"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pod&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conditions&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"Ready"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;gate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"ReadinessGate '&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;gate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;' has readiness status: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;gate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;, Reason: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;gate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# ReadinessGate 'Ready' has readiness status: False, Reason: the status of pod readiness gate "www.example.com/gate-1" is not "True", but False.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In addition to setting the status, we also queried the cluster for the current Pod status after the update. We looked up the section that corresponds to the &lt;code&gt;Ready&lt;/code&gt; condition and printed its status.&lt;/p&gt;

&lt;p&gt;And finally, we can flip the value to &lt;code&gt;True&lt;/code&gt; with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;pod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_namespaced_pod_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nginx"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pod&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conditions&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"www.example.com/gate-1"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;gate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"ReadinessGate '&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;gate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;' has readiness status: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;gate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;, Reason: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;gate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# ReadinessGate 'www.example.com/gate-1' has readiness status: False, Reason: None.
&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;patch_namespaced_pod_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nginx"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;
    &lt;span class="s"&gt;"op"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"replace"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"path"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"/status/conditions/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"lastProbeTime"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"lastTransitionTime"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"2020-03-05T15:50:51Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"status"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"True"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"www.example.com/gate-1"&lt;/span&gt;
    &lt;span class="p"&gt;}}])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code here is very similar to the example earlier, this time however we look for condition of type &lt;code&gt;www.example.com/gate-1&lt;/code&gt;, we verify its current state with &lt;code&gt;print&lt;/code&gt; and then apply the change using &lt;code&gt;replace&lt;/code&gt; operation to the condition listed at &lt;code&gt;index&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;Both the shell scripts and Python code above demonstrate how you can go about implementing readiness gates and their updates. In real world application you will probably need a more robust solution though.&lt;/p&gt;

&lt;p&gt;The ideal solution for this would be custom controller which would watch pods, that have &lt;code&gt;readinessGate&lt;/code&gt; stanza set to relevant &lt;code&gt;conditionType&lt;/code&gt;s. The controller would be then able to update the condition(s) based on the observed state of the pod, whether it's based on custom pod metrics, external network state or whatever else.&lt;/p&gt;

&lt;p&gt;If you're thinking about implementing such controller, then you can get some inspiration from existing solutions such as the AWS and GKE load balancers mentioned earlier or the (now archived) &lt;a href="https://github.com/itaysk/kube-conditioner"&gt;&lt;code&gt;kube-conditioner&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;




</description>
      <category>kubernetes</category>
      <category>python</category>
      <category>devops</category>
      <category>cloudnative</category>
    </item>
    <item>
      <title>How to become a web developer in 2022, with coach Gandalf</title>
      <author>Damian Demasi</author>
      <pubDate>Tue, 14 Dec 2021 19:21:21 +0000</pubDate>
      <link>https://dev.to/colocodes/how-to-become-a-web-developer-in-2022-with-coach-gandalf-fl1</link>
      <guid>https://dev.to/colocodes/how-to-become-a-web-developer-in-2022-with-coach-gandalf-fl1</guid>
      <description>&lt;p&gt;In this blog post, I'll be discussing why you shouldn't trust on new year's resolutions, how overrated motivation is, tools to help you succeed in the path of learning web development, and the road I took and recommend (as of December 2021) taking to become a Web Developer.&lt;/p&gt;

&lt;p&gt;I will ask coach Gandalf for his opinions on different topics, and he will pour his wisdom and bluntness over us during the whole post.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/Cu0Iqwal4cPyU/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Cu0Iqwal4cPyU/giphy.gif" width="500" height="206"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-truth-about-new-years-resolutions"&gt;
  &lt;/a&gt;
  The truth about new year's resolutions
&lt;/h2&gt;

&lt;p&gt;🧑‍💻 - Hey, coach Gandalf, what do you feel about new year's resolutions?&lt;/p&gt;

&lt;p&gt;🧙‍♂️ - My dear little human, most of us have been there: a new year is coming, we feel this is our chance to stop some bad habits and start new ones, a perfect body and a perfect wallet are just around the corner. January 1st, we start doing that thing we planned on doing. A week later we find the first excuses on why we are permitted to skip a couple of days (or eat that tasty cake, or buy that nice mechanical keyboard -our third one-). Two weeks later we find ourselves sliding into bad habits once more, telling us that they are not as bad after all. Our motivation explodes into the air a few moments after liftoff, like a failed rocket launch 🚀💥. You don't believe me? Take a look at &lt;a href="https://www.outsideonline.com/health/training-performance/forget-motivation-and-focus-action/"&gt;this article&lt;/a&gt; describing why only 9% of people stick to their resolutions for a full year.&lt;/p&gt;

&lt;p&gt;🧑‍💻 - Hm... OK, maybe that's a bit too blunt, don't you think? I guess you are cranky because you ran out of tobacco for your pipeweed or something...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-motivation"&gt;
  &lt;/a&gt;
  But... motivation!
&lt;/h2&gt;

&lt;p&gt;🧑‍💻 - I'm motivated! But sometimes I don't feel like it...&lt;/p&gt;

&lt;p&gt;🧙‍♂️ - Allow me to be blunt once more: motivation is overrated. According to &lt;a href="https://jamesclear.com/motivation"&gt;this article&lt;/a&gt; by James Clear (the guy who wrote the great book &lt;a href="https://amzn.to/3osSJLI"&gt;Atomic Habits&lt;/a&gt;) describing how motivation works, &lt;strong&gt;motivation often comes after starting a new behaviour, not before&lt;/strong&gt;. You don't feel like it? You don't feel in the mood to start typing code, going through that Udemy course, writing that blog post (😉)? Guess what: we all feel like that most of the time. What we need to do is just start. We can say to ourselves "I will just do 10 minutes of this, and then I can drop it". Chances are that we are going to stick for more than 10 minutes, and the motivation will start growing &lt;strong&gt;after&lt;/strong&gt; we started working on the thing we &lt;em&gt;just don't feel like&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-focus-on-the-objective-focus-on-the-system-instead"&gt;
  &lt;/a&gt;
  Don't focus on the objective, focus on the system instead
&lt;/h2&gt;

&lt;p&gt;🧑‍💻 - Coach, I love setting goals!&lt;/p&gt;

&lt;p&gt;🧙‍♂️ - Do you know that people that reach their goals, and people that don't, have the same goals in common? (Laughs while exhaling smoke from his pipe.) I guess I'm a fan of James Clear because he's back with another great article: &lt;a href="https://jamesclear.com/goals-systems"&gt;Forget About Setting Goals. Focus on This Instead&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Goals can provide direction and even push you forward in the short term, but eventually, a well-designed system will always win. Having a system is what matters. Committing to the process is what makes the difference.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;🧙‍♂️ - Don't think too much about your objective, your goal. Instead, focus your full attention on the day to day tasks you need to do in order to achieve that goal. Our system could be a series of habits that enable us to learn to program. Waking up early and studying programming, taking some time each day to write code, bundling habits (from Atomic Habits), stopping chasing rabbit holes on the Internet, limiting our social network use, doing regular exercise and sleeping well to improve our cognitive stamina, are just some examples of what we could do.&lt;/p&gt;

&lt;p&gt;🧙‍♂️ - In the end, learning to program and becoming who we want to become does not depend on a new year starting or on an ambitious goal. It depends on what we are doing day in and day out to support our identity: we are now a programmer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/TcdpZwYDPlWXC/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/TcdpZwYDPlWXC/giphy.gif" width="400" height="200"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tools-to-help-us-maintain-consistency-along-the-way"&gt;
  &lt;/a&gt;
  Tools to help us maintain consistency along the way
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DZ49ghYU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639469986973/1zHgsFVgU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DZ49ghYU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639469986973/1zHgsFVgU.png" alt="Don't Panic" width="880" height="460"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🧑‍💻 - This looks that is going to be hard...&lt;/p&gt;

&lt;p&gt;🧙‍♂️ - This journey is not going to be easy, nor short. I can promise you moments of struggle, uncertainty, and despair. But don't panic! Not all who wander are lost. Here are some tools that are going to help you succeed in this path:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;🛠 &lt;strong&gt;Grit:&lt;/strong&gt; a ferocious determination to put in the work. Being able to be resilient and hardworking. Know in a very deep way what is what you want. (From the book: &lt;a href="https://amzn.to/3GH9Mjd"&gt;&lt;strong&gt;Grit&lt;/strong&gt;&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🛠 &lt;strong&gt;A growth mindset:&lt;/strong&gt; the view you adopt for yourself profoundly affects the way you lead your life. The hand you’re dealt is just the starting point for development. The growth mindset is based on the belief that your basic qualities are things you can cultivate through your efforts. (From the book: &lt;a href="https://amzn.to/3ETB6KB"&gt;&lt;strong&gt;Mindset&lt;/strong&gt;&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🛠 &lt;strong&gt;A strong identity and habits that support that identity:&lt;/strong&gt; habits shape your identity, and vice-versa. What type of person do you want to be? A programmer? What habits do a programmer have? Will he/she/them be binging Squid Game, or learning React to build an app?  (From the book: &lt;a href="https://amzn.to/3oRAYWm"&gt;&lt;strong&gt;Atomic Habits&lt;/strong&gt;&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🛠 &lt;strong&gt;Be able to do deep work:&lt;/strong&gt; the ability to perform activities in a state of distraction-free concentration that pushes your cognitive capabilities to their limit. (From the book: &lt;a href="https://amzn.to/3dQNkrK"&gt;&lt;strong&gt;Deep Work&lt;/strong&gt;&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yrQX-DAR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639469904177/bMsaxhBiQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yrQX-DAR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639469904177/bMsaxhBiQ.png" alt="Tools" width="880" height="460"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🧙‍♂️ - If you would like to learn a bit more about these tools, I would like to share with you four book summaries made by &lt;a href="https://www.optimize.me/pn"&gt;Brian Johnson&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;📓 &lt;a href="https://assets.optimize.me/philosophers-notes/downloads/pdfs/files/member/grit.pdf"&gt;Grit&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📓 &lt;a href="https://assets.optimize.me/philosophers-notes/downloads/pdfs/files/member/mindset.pdf"&gt;Mindset&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📓 &lt;a href="https://assets.optimize.me/philosophers-notes/downloads/pdfs/files/member/atomic-habits.pdf"&gt;Atomic Habits&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📓 &lt;a href="https://assets.optimize.me/philosophers-notes/downloads/pdfs/files/member/deep-work.pdf"&gt;Deep Work&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(You can find all these books in your favourite bookstore, of course.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-web-development-path"&gt;
  &lt;/a&gt;
  The web development path
&lt;/h2&gt;

&lt;p&gt;🧑‍💻 - Thanks for the useful tips, coach Gandalf. Where should I start my web development journey?&lt;/p&gt;

&lt;p&gt;🧙‍♂️ - Now that we have established how we can improve our chances of succeeding in learning web development, let's talk about what I think is the best path to follow. There are many tools and technologies to learn, and you can take a look at a &lt;a href="https://roadmap.sh/frontend"&gt;road map here&lt;/a&gt;. I think the best option is to start with the &lt;strong&gt;Front-end&lt;/strong&gt;, as it's the path that will have a not-so-steep learning curve (compared with DevOps or Back-end) and high demand for jobs.&lt;/p&gt;

&lt;p&gt;🧙‍♂️ - &lt;strong&gt;A word of caution:&lt;/strong&gt; many times you'll feel drawn to free resources. You should be careful! Many of the free resources are not as deep or thorough as you need them to be. They will leave gaps in your knowledge and you will lose time filling them. I think the best approach is to commit yourself to a comprehensive course, even if you have to pay for it. I'm a strong believer that Udemy is the best option for this. Pick a topic you are interested in learning and search for Udemy courses about it. Read comments, reviews, and recommendations. There is always a Udemy sale, so you shouldn't spend more than $35 for a full course (that usually has 45+ hours of content).&lt;/p&gt;

&lt;p&gt;🧙‍♂️ - One more thing: try not to jump around too much. Stick with the technology and content you are learning until the course or project is finished. This will prevent gaps from forming in your knowledge, and help you avoid &lt;strong&gt;&lt;a href="https://dev.to/davidmm1707/how-to-escape-from-tutorial-hell-and-never-come-back-bb6"&gt;tutorial hell&lt;/a&gt;&lt;/strong&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1st-step-git"&gt;
  &lt;/a&gt;
  1st step: Git
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yapcd2K1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639470471123/WHy7HLRQl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yapcd2K1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639470471123/WHy7HLRQl.png" alt="Git" width="880" height="129"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🧑‍💻 - So... what is the first step?&lt;/p&gt;

&lt;p&gt;🧙‍♂️ - Starting with &lt;strong&gt;Git&lt;/strong&gt; will allow you to become familiar with the terminal and the way in which software is built. You can create repositories from day 1, something that will look great on your GitHub profile. It will allow you to keep track of all your code and projects, and I think i's a great way to get your feet wet with the world of programming in general.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Steps:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Udemy course: &lt;a href="https://click.linksynergy.com/link?id=LO030NrbM0E&amp;amp;offerid=507388.221674&amp;amp;type=2&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fgit-complete%2F"&gt;Git Complete: The definitive, step-by-step guide to Git&lt;/a&gt;. Start your journey by taking this course. You can implement the concepts learned here during the rest of your student (and professional) path.&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#the-importance-of-building-stuff"&gt;
  &lt;/a&gt;
  The importance of building stuff
&lt;/h3&gt;

&lt;p&gt;🧙‍♂️ - During your journey, you will be tempted to absorb information as fast as possible to achieve that highly desired outcome: become a web developer. But please, don't just work on the theory. As soon as you start learning HTML and CSS (and JavaScript and React later on), you should be building your own projects. They can be small (just a button), medium (a website), or big (a full web application). Build, build and then build some more (and keep track of them on GitHub). This is how the information you are absorbing is going to be transformed into actual &lt;strong&gt;knowledge&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2nd-step-bootcamp-optional"&gt;
  &lt;/a&gt;
  2nd step: Bootcamp (optional)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MgD-K-CZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639470580360/yKWS8SJ-5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MgD-K-CZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639470580360/yKWS8SJ-5.png" alt="Bootcamp" width="880" height="129"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🧑‍💻 - Should I take a Bootcamp or just focus on each topic separately?&lt;/p&gt;

&lt;p&gt;🧙‍♂️ - If you are not in a hurry and you have spare time, taking a &lt;strong&gt;coding Bootcamp&lt;/strong&gt; will teach you the overall technologies involved in the web development journey. You are not going to learn those topics deeply, though, which means that you will have to study them after the Bootcamp. Most good Bootcamps are lengthy and require you to absorb many different topics in a cramped time frame.&lt;/p&gt;

&lt;p&gt;🧙‍♂️ - You have two main options when choosing a Bootcamp: doing it online, or doing in in-person. Usually, online ones are cheaper but require a greater commitment on your part in order to finish them. In-person Bootcamps are more expensive, but it's easier to finish them because you have paid a lot of money, and you have to go to a specific place at a certain date and time. Another pro for the in-person ones is that you will actually meet people in the same boat as you are. &lt;/p&gt;

&lt;p&gt;🧑‍💻 - I agree. I actually took a Bootcamp course on Udemy, and I found it very useful to gain an overall knowledge of the things involved in the web development process. The Bootcamp I took back in the day (2019-2020) had 405 lectures spread across 47 hours of content. This translated into almost 148 hours of actual study (I used a time tracker app to measure it). As I was working and studying at the same time, those 148 hours spread over 5 to 6 months. Initially, I estimated, at the most, half of that time, so beware.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Optional step:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Udemy course: &lt;a href="https://click.linksynergy.com/link?id=LO030NrbM0E&amp;amp;offerid=507388.625204&amp;amp;type=2&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fthe-web-developer-bootcamp%2F"&gt;The Web Developer Bootcamp 2022&lt;/a&gt;. This is the BootCamp I took and I can highly recommend it. Colt is a great teacher and the course has many projects that you can build.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Udemy course: &lt;a href="https://click.linksynergy.com/link?id=LO030NrbM0E&amp;amp;offerid=507388.1565838&amp;amp;type=2&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fthe-complete-web-development-bootcamp%2F"&gt;The Complete 2022 Web Development Bootcamp&lt;/a&gt;. I haven't taken Angela's course but I have read many positive comments from people (not only on the Udemy page) recommending it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Either one your choose, you can't go wrong.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3rd-step-html-and-css"&gt;
  &lt;/a&gt;
  3rd step: HTML and CSS
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S25Y4n80--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639470673176/devaYnb1m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S25Y4n80--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639470673176/devaYnb1m.png" alt="HTML &amp;amp; CSS" width="880" height="129"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🧑‍💻 - OK, I now know Git (and maybe I have finished a BootCamp). What's next?&lt;/p&gt;

&lt;p&gt;🧙‍♂️ - You still don't know what you don't know. You need to dive deep into HTML and CSS. In this step, you will learn about the correct structure an HTML document should have, accessibility (WAI-ARIA), new HTML5 elements you should use and which ones to avoid, how to style an HTML document, CSS custom properties, good practices, grid, flexbox, etc.&lt;/p&gt;

&lt;p&gt;🧙‍♂️ - If you previously took a BootCamp, chances are that you didn't learn these topics in a thorough way, so here is where we are diving deep into these concepts. There are many, many, resources from which you can choose to learn HTML and CSS, so do your research and choose wisely. I would suggest to you to choose good teaching materials, and not just what's free or fashionable.&lt;/p&gt;

&lt;p&gt;🧑‍💻 - I agree with you, Gandalf. I remember that I almost entered a "paralysis by analysis" stage when researching where or how I could get good quality teaching materials for HTML and CSS. I ended up selecting a free course, a book and a Udemy course, and I feel that those resources were some of the best I could have selected.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Steps:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;freeCodeCamp: &lt;a href="https://www.freecodecamp.org/learn/responsive-web-design/"&gt;&lt;strong&gt;Responsive Web Design Certification&lt;/strong&gt;&lt;/a&gt;. Start by taking this free course so you can have a basic and general idea about HTML and CSS.&lt;/li&gt;
&lt;li&gt;Book: &lt;a href="https://www.amazon.com/Learning-Web-Design-Beginners-JavaScript/dp/1491960205/ref=sr_1_1?keywords=learning+web+design&amp;amp;qid=1639425293&amp;amp;sr=8-1"&gt;&lt;strong&gt;Learning Web Design: A Beginner's Guide to HTML, CSS, JavaScript, and Web Graphics, 5th Edition&lt;/strong&gt;&lt;/a&gt;. After finishing the freeCodeCamp course, pick up this book. It is highly recommended because it will teach you important concepts such as how the Internet works, HTML, CSS, best practices, an introduction to JavaScript, and much more.&lt;/li&gt;
&lt;li&gt;Udemy course: &lt;a href="https://click.linksynergy.com/link?id=LO030NrbM0E&amp;amp;offerid=507388.1026604&amp;amp;type=2&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fadvanced-css-and-sass%2F"&gt;&lt;strong&gt;Advanced CSS and Sass: Flexbox, Grid, Animations and More!&lt;/strong&gt;
&lt;/a&gt;. Only take this course after having covered freeCodeCamp course and the Learning Web Design book if you have spare time and want to dive deeper into CSS and SASS.&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#4th-step-javascript"&gt;
  &lt;/a&gt;
  4th step: JavaScript
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B9vEB-y4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639470739764/5t_5ilWEO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B9vEB-y4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639470739764/5t_5ilWEO.png" alt="JavaScript" width="880" height="129"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🧑‍💻 - I now know how to build a repository of my code, create an HTML document and use CSS to style it. What now?&lt;/p&gt;

&lt;p&gt;🧙‍♂️ - The logical projection from here is learning &lt;strong&gt;JavaScript&lt;/strong&gt;. It's the universal programming language for websites and it is supported by all main web browsers. This is where the core of your journey should be focused on, and the stepping stone that you'll use to learn libraries and frameworks in the future. &lt;strong&gt;You should take your time in learning JavaScript&lt;/strong&gt;, and avoid jumping into a library or framework without feeling comfortable with JavaScript first.&lt;/p&gt;

&lt;p&gt;🧑‍💻 - I couldn't agree more! I'm now working professionally with React but I find myself using JavaScript code and concepts learned in this stage of my studies all the time.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Steps:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;freeCodeCamp: &lt;a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/"&gt;&lt;strong&gt;JavaScript Algorithms and Data Structures Certification&lt;/strong&gt;&lt;/a&gt;. Start by taking this free course so you can have a basic and general idea about JavaScript.&lt;/li&gt;
&lt;li&gt;Udemy course: &lt;a href="https://click.linksynergy.com/link?id=LO030NrbM0E&amp;amp;offerid=507388.851712&amp;amp;type=2&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fthe-complete-javascript-course%2F"&gt;&lt;strong&gt;The Complete JavaScript Course 2022: From Zero to Expert!&lt;/strong&gt;
&lt;/a&gt;. After finishing freeCodeCamp's course, take this one on Udemy. It's the best course I have ever taken on Udemy, and it will not only teach you JavaScript (in depth), but also programming concepts and best practices. This is a must-do!&lt;/li&gt;
&lt;li&gt;Book: &lt;a href="https://eloquentjavascript.net/"&gt;Eloquent JavaScript, 3rd edition&lt;/a&gt;. You can read this book in digital format for free, or you can buy it in physical format from Amazon. It's a great book, but a bit too technical for beginners. If you still have spare time, read it; if you don't want to spend more time in this section, skeep it and revisit it in the future. Most of the concepts covered in the book are also covered in the previous Udemy course.&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#5th-step-react"&gt;
  &lt;/a&gt;
  5th step: React
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UVD8MF0S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639470801892/c59KlGCA4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UVD8MF0S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639470801892/c59KlGCA4.png" alt="React" width="880" height="129"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🧑‍💻 - I feel like Neo when he said "I Know Kung Fu".&lt;/p&gt;

&lt;p&gt;🧙‍♂️ - Unfortunately, chances are that by now you were too focused on learning by absorbing information. What you should be doing by now is putting that knowledge into practice. This step is ideal for that. Now you are going to learn JavaScript's libraries and frameworks. You have a bunch of them to choose from, and the one you select should depend on what is being used in your area (a quick job search will tell you that). The top three you can choose from are:&lt;/p&gt;

&lt;p&gt;JavaScript libraries:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JavaScript frameworks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Vue&lt;/li&gt;
&lt;li&gt;Angular&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This might help you to get an idea of how they compare among themselves in terms of interest:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FfbduDWM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639427485732/eDlld2R3-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FfbduDWM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639427485732/eDlld2R3-.png" alt="React vs Vue vs Angular" width="880" height="526"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://trends.google.com/trends/explore?date=today%205-y&amp;amp;q=%2Fm%2F012l1vxv,vue,angular"&gt;Source&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;🧙‍♂️ - I recommend choosing React, as it is very used worldwide, and you can use it to design mobile or desktop applications in the future (using React Native) if that's something you are interested in.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Steps:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;freeCodeCamp: &lt;a href="https://www.freecodecamp.org/learn/front-end-development-libraries/"&gt;Front End Development Libraries Certification&lt;/a&gt;. Start by taking this freeCodeCamp course to get a feel of React. You will learn how web applications are built professionally, in the real world.&lt;/li&gt;
&lt;li&gt;Udemy course: &lt;a href="https://click.linksynergy.com/link?id=LO030NrbM0E&amp;amp;offerid=507388.1362070&amp;amp;type=2&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Freact-the-complete-guide-incl-redux%2F"&gt;React - The Complete Guide (incl Hooks, React Router, Redux)&lt;/a&gt;. Maximilian will teach you (and reinforce) programming concepts as well as React in depth. This is a very good, up to date, course, and I can recommend it.&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#6th-step-job-ready"&gt;
  &lt;/a&gt;
  6th step: Job Ready
&lt;/h3&gt;

&lt;p&gt;🧑‍💻 - OK, so, I have spent several months learning all of this and building many projects by myself (with Google's help). What should I do next?&lt;/p&gt;

&lt;p&gt;🧙‍♂️ - Once you have finished all these courses and built some applications and projects of your own, you are now ready to start applying for Front-end Development jobs. Now you should be building your portfolio, writing a good resume and LinkedIn profile, and reviewing the most important concepts learned so far.&lt;/p&gt;

&lt;p&gt;🧙‍♂️ - The whole path to get to this point will take you from 6 months to 1.5 years (or more), depending on your previous knowledge and how well you are learning the concepts you are presented with.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7th-step-going-backend"&gt;
  &lt;/a&gt;
  7th step: Going Back-end
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/10es4gkhzGC6zu/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/10es4gkhzGC6zu/giphy.gif" width="245" height="185"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🧙‍♂️ - The Front End Developer path is far from over, but by now you should feel comfortable enough to jump into the Back-end. But that is a story for some other time.&lt;/p&gt;

&lt;p&gt;🧑‍💻 - Thanks, coach Gandalf! I wish you were real so I could high-five you!&lt;/p&gt;

&lt;p&gt;🧙‍♂️ - Remember this: you are the hero of your story. Ask yourself: what would a hero do in my situation? How does a hero endure these obstacles, slay these dragons?&lt;/p&gt;




&lt;p&gt;🗞️ &lt;strong&gt;NEWSLETTER -&lt;/strong&gt; &lt;em&gt;If you want to hear about my latest articles and interesting software development content, &lt;a href="https://chipper-designer-8106.ck.page/1a819bffe8"&gt;subscribe to my newsletter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;🐦 &lt;strong&gt;TWITTER -&lt;/strong&gt; &lt;em&gt;Follow me on &lt;a href="https://twitter.com/DamianDemasi"&gt;Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>ASMR coding [ Node/ Express/ Pug Engine Web Design ] </title>
      <author>Bek Brace</author>
      <pubDate>Tue, 14 Dec 2021 19:13:37 +0000</pubDate>
      <link>https://dev.to/bekbrace/asmr-coding-node-express-pug-engine-web-design--50ml</link>
      <guid>https://dev.to/bekbrace/asmr-coding-node-express-pug-engine-web-design--50ml</guid>
      <description>&lt;p&gt;This is a No Talk coding session in my study in Poland on a rainy night with my cup of hot chocolate ☕ (hot chocolate + coding + Christmas spirit = Joy 😃 ) &lt;/p&gt;

&lt;p&gt;This is a coding video, where you can chill, have your hot/cold beverage and code along with me this awesome website using three different technologies :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Node js&lt;/li&gt;
&lt;li&gt;Express framework&lt;/li&gt;
&lt;li&gt;Pug template engine [ HTML preprocessor ]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Just coding quietly on my mechanical keyboard "Razer Ornata V2", and I invite you to join me:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/G0ocy9mkJuQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Hope you enjoy, guys&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#social-media"&gt;
  &lt;/a&gt;
  Social Media  
&lt;/h2&gt;

&lt;p&gt;Facebook : &lt;a href="https://www.facebook.com/bekbrace%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B/"&gt;https://www.facebook.com/bekbrace​​​​/&lt;/a&gt; &lt;br&gt;
Twitter : &lt;a href="https://twitter.com/BekBrace/"&gt;https://twitter.com/BekBrace/&lt;/a&gt;&lt;br&gt;
Instagram : &lt;a href="https://www.instagram.com/bek_brace/"&gt;https://www.instagram.com/bek_brace/&lt;/a&gt;&lt;br&gt;
GitHub profile : &lt;a href="https://github.com/BekBrace/%E2%80%8B%E2%80%8B%E2%80%8B"&gt;https://github.com/BekBrace/​​​&lt;/a&gt;&lt;br&gt;
Website : &lt;a href="https://bekbrace.com/"&gt;https://bekbrace.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reach out  : &lt;a href="mailto:info@bekbrace.com"&gt;info@bekbrace.com&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tools-used-in-video"&gt;
  &lt;/a&gt;
  Tools used in video:
&lt;/h2&gt;

&lt;p&gt;Microphone used in recording Blue Yeti&lt;br&gt;
To check it out on Amazon : &lt;a href="https://amzn.to/3lh6GdA"&gt;https://amzn.to/3lh6GdA&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Coding on Razer Ornata V2 keyboard&lt;br&gt;
To check it out on Amazon : &lt;a href="https://amzn.to/3xv3cZZ"&gt;https://amzn.to/3xv3cZZ&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#support"&gt;
  &lt;/a&gt;
  Support
&lt;/h2&gt;

&lt;p&gt;Join this channel to get access to perks:&lt;br&gt;
&lt;a href="https://www.youtube.com/channel/UC7EVSn5inapL20oPSwAwEUg/join"&gt;https://www.youtube.com/channel/UC7EVSn5inapL20oPSwAwEUg/join&lt;/a&gt;&lt;br&gt;
OR&lt;br&gt;
Become a Patron: &lt;a href="https://www.patreon.com/bekbrace"&gt;https://www.patreon.com/bekbrace&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Soft UI Dashboard - Start fast with Bootstrap 5, Django and Docker</title>
      <author>Sm0ke</author>
      <pubDate>Tue, 14 Dec 2021 19:10:50 +0000</pubDate>
      <link>https://dev.to/sm0ke/soft-ui-dashboard-start-fast-with-bootstrap-5-django-and-docker-49mc</link>
      <guid>https://dev.to/sm0ke/soft-ui-dashboard-start-fast-with-bootstrap-5-django-and-docker-49mc</guid>
      <description>&lt;p&gt;Hello Coders!&lt;/p&gt;

&lt;p&gt;This article presents an open-source Django starter that uses Bootstrap 5 for the frontend layer and Docker for deployment automation. &lt;strong&gt;&lt;a href="https://appseed.us/product/django-soft-ui-dashboard"&gt;Django Soft Dashboard&lt;/a&gt;&lt;/strong&gt; comes with all the bare minimum essentials required by a new simple dashboard powered by Django: authentication, integrated UI and deployment support. For newcomers, Django is a leading framework actively supported and versioned by programming experts and open-source enthusiasts. &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; Here are the links for fast runners: &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;👉 &lt;a href="https://django-soft-ui-dashboard.appseed-srv1.com/"&gt;Django Soft UI Dashboard&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://github.com/app-generator/django-soft-ui-dashboard"&gt;Django Soft UI Dashboard&lt;/a&gt; - source code &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;The permissive (MIT) license unlocks the usage for unlimited hobby &amp;amp; commercial products and eLearning activities. &lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Slrdei0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjxx8nu7telqiu4y4h4y.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Slrdei0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjxx8nu7telqiu4y4h4y.jpg" alt="Soft UI Dashboard, the VR page provided by an open-source starter powered by Django." width="880" height="471"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#product-features"&gt;
  &lt;/a&gt;
  ✨ Product Features
&lt;/h2&gt;

&lt;p&gt;In order to provide something useful and usable for developers, the codebase is provided with the latest stable Django version, &lt;code&gt;unopionated&lt;/code&gt; structure, and a &lt;code&gt;production-ready&lt;/code&gt; layer powered by Docker. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Up-to-date dependencies&lt;/code&gt;: &lt;strong&gt;Django 3.2.6 LTS&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;SCSS compilation&lt;/code&gt; - simple Gulp tooling &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DB Tools&lt;/code&gt;: &lt;strong&gt;SQLite&lt;/strong&gt;, Django Native ORM&lt;/li&gt;
&lt;li&gt;Session-Based Authentication, Forms validation&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Deployment&lt;/code&gt;: &lt;strong&gt;Docker&lt;/strong&gt;, Gunicorn / Nginx&lt;/li&gt;
&lt;li&gt;Support via Github (issues tracker) and &lt;a href="https://discord.gg/fZC6hup"&gt;Discord&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#how-to-use-the-product"&gt;
  &lt;/a&gt;
  ✨ How to use the product
&lt;/h2&gt;

&lt;p&gt;Probably the most easier way to start the product is to execute the Docker setup that is basically a &lt;code&gt;one-line&lt;/code&gt; command: &lt;/p&gt;

&lt;p&gt;👉 &lt;strong&gt;Step #1&lt;/strong&gt; - Clone/download &lt;a href="https://github.com/app-generator/django-soft-ui-dashboard"&gt;sources&lt;/a&gt; from Github&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/django-soft-ui-dashboard.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;django-soft-ui-dashboard
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;👉 &lt;strong&gt;Step #2&lt;/strong&gt; - Start the app in Docker&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up &lt;span class="nt"&gt;--build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, we should be able to access the app in the browser, register new users, and access the private pages provided by the app. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-docker-layer"&gt;
  &lt;/a&gt;
  ✨ The Docker Layer
&lt;/h2&gt;

&lt;p&gt;Docker is a popular virtualization software that executes our application using a &lt;code&gt;cross-platform&lt;/code&gt; sandboxed environment. In other words we can hope for a successful execution of our app on Windows, Ubuntu or CentOS without taking into account any OS specificities during the product deployment. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The architecture &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Django App managed by Gunicorn WSGI Server

&lt;ul&gt;
&lt;li&gt;Guninorn starts on port &lt;code&gt;5005&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Nginx as a proxy server 

&lt;ul&gt;
&lt;li&gt;exposes the public port &lt;code&gt;85&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;routes the client requests to inner port &lt;code&gt;5005&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Dockerfile&lt;/code&gt; does the following: 

&lt;ul&gt;
&lt;li&gt;upgrade the &lt;code&gt;PIP&lt;/code&gt; installer&lt;/li&gt;
&lt;li&gt;install app deps listed on &lt;code&gt;requirements.txt&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Migrate the database (aka &lt;code&gt;create tables&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;call Gunicorn to start the app&lt;/li&gt;
&lt;li&gt;Start Nginx and listen for new connections &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If all goes well, the app can be accessed on &lt;code&gt;http://localhost:85&lt;/code&gt; and the guest users are redirected to authenticate. &lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C1c18czM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rh2ovk4abuup5xk43sry.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C1c18czM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rh2ovk4abuup5xk43sry.png" alt="Soft UI Dashboard, login page powered by Django, a leading web framework written in Python." width="880" height="509"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;The manual build involves the classic steps recommended for all Python apps: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a &lt;code&gt;virtual environment&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;install the dependencies &lt;/li&gt;
&lt;li&gt;setup/migrate the database &lt;/li&gt;
&lt;li&gt;start the app using a development server &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's do this! &lt;/p&gt;




&lt;p&gt;👉 &lt;strong&gt;Step #1&lt;/strong&gt; - Clone the &lt;a href="https://github.com/app-generator/django-soft-ui-dashboard"&gt;sources&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/django-soft-ui-dashboard.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;django-soft-ui-dashboard
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;👉 &lt;strong&gt;Step #2&lt;/strong&gt; - Create a &lt;code&gt;virtual environment&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv &lt;span class="nb"&gt;env&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source env&lt;/span&gt;/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;👉 &lt;strong&gt;Step #3&lt;/strong&gt; - Install modules&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Install modules &lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;pip3 &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;👉 &lt;strong&gt;Step #4&lt;/strong&gt; - Migrate Database  (aka create tables)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py makemigrations
&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;👉 &lt;strong&gt;Step #5&lt;/strong&gt; - Start the app using Django embedded server&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Start the application (development mode)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py runserver 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default, Django starts on port &lt;code&gt;8000&lt;/code&gt; but we can easily change this with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Start the app - custom port&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# python manage.py runserver 9999&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, the app runs with &lt;code&gt;LIVE reload&lt;/code&gt; and we can write new code and track all errors in real time. &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! For more resources and support:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;AMA&lt;/code&gt; in the comments - I'm here on Dev almost daily &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://appseed.us/admin-dashboards/open-source"&gt;Free Dashboards&lt;/a&gt;&lt;/strong&gt; - index provided for &lt;code&gt;Django&lt;/code&gt;, Flask and &lt;strong&gt;React&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Follow me on &lt;a href="https://twitter.com/Sm0keDev"&gt;Twitter&lt;/a&gt; - for OSS posts only &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>boostrap5</category>
      <category>django</category>
      <category>docker</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Singleton Pattern</title>
      <author>Eyuel Berga Woldemichael</author>
      <pubDate>Tue, 14 Dec 2021 18:33:11 +0000</pubDate>
      <link>https://dev.to/eyuelberga/singleton-pattern-3cj3</link>
      <guid>https://dev.to/eyuelberga/singleton-pattern-3cj3</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Singleton pattern allows creation of only a single instance from a class&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;Consider a case where your application needs to access a shared resource from different places at various times. And also keep a consistent state between each access.&lt;/p&gt;

&lt;p&gt;The Singleton pattern solves this problem by creating a class that is responsible for creating and insuring only a single instance is created, while allowing direct access to the instantiated object.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#applicability"&gt;
  &lt;/a&gt;
  Applicability
&lt;/h2&gt;

&lt;p&gt;The Singleton pattern can be used in cases where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The class have exactly one accessible instance&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#structure"&gt;
  &lt;/a&gt;
  Structure
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JY-mvj-G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6jd7ve17stwg8eak3919.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JY-mvj-G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6jd7ve17stwg8eak3919.png" alt="Singleton pattern class diagram" width="205" height="127"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#participants"&gt;
  &lt;/a&gt;
  Participants
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Singleton:&lt;/strong&gt; defines an Instance operation that lets clients access its unique instance&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#collaborations"&gt;
  &lt;/a&gt;
  Collaborations
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Clients access a Singleton instance only through the &lt;code&gt;getInstance&lt;/code&gt; method.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#advantages"&gt;
  &lt;/a&gt;
  Advantages
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Can be sure of the number of instances&lt;/li&gt;
&lt;li&gt;Can globally access instance &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#disadvantages"&gt;
  &lt;/a&gt;
  Disadvantages
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Violates single responsibility principle. It is responsible for making sure that one instance is being created and also provide the core functionalities of the object itself.&lt;/li&gt;
&lt;li&gt;It is hard to unit test because global states are hard to isolate.&lt;/li&gt;
&lt;li&gt;Causes an object to be globally mutable which may not be desired in some cases.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;p&gt;Singletons can be implemented in numerous ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Eager initialization:&lt;/strong&gt; Object of class is created when it is loaded to the memory&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Lazy initialization:&lt;/strong&gt; In this method, object is created only if it is needed.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Thread Safe Singleton:&lt;/strong&gt; A thread safe singleton in created so that singleton property is maintained even in multi-threaded environment.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The money received by customers of the cafe is stored in a cash register. It is important that there is only one cash register per cafe, so that the income of the cafe is accurately known.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To solve this problem, we implement &lt;code&gt;CashRegister&lt;/code&gt; as a singleton. we make the constructor private so nobody can instantiate the class. And we implement a method &lt;code&gt;getInstance&lt;/code&gt; to be called by user to obtain instance of the class.&lt;/p&gt;


&lt;div class="ltag__replit"&gt;
  &lt;iframe height="550px" src="https://repl.it/@eyuelberga/Singleton-Pattern?lite=true"&gt;&lt;/iframe&gt;
&lt;/div&gt;


</description>
      <category>beginners</category>
      <category>java</category>
      <category>codenewbie</category>
      <category>computerscience</category>
    </item>
  </channel>
</rss>
