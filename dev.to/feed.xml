<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Web Components using UnknownHTMLElements for better semantic HTML</title>
      <author>Danny Engelman</author>
      <pubDate>Sat, 24 Apr 2021 16:25:29 +0000</pubDate>
      <link>https://dev.to/dannyengelman/web-components-using-unknownhtmlelements-for-better-semantic-html-5d8c</link>
      <guid>https://dev.to/dannyengelman/web-components-using-unknownhtmlelements-for-better-semantic-html-5d8c</guid>
      <description>&lt;h3&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  🥧 TL;DR;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;UnknownHTMLElement&lt;/code&gt; elements &lt;strong&gt;can&lt;/strong&gt; be used as Web Component building blocks&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;&amp;lt;pie-chart&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;progress-circle&amp;gt;&lt;/code&gt; Web Components, used in this post are available on &lt;a href="https://pie-meister.github.io"&gt;https://pie-meister.github.io&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#-raw-ltslicegt-endraw-is-an-unknownhtmlelement"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;slice&amp;gt;&lt;/code&gt; is an &lt;strong&gt;UnknownHTMLElement&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In &lt;a href="https://dev.to/dannyengelman/what-web-technologies-are-required-to-draw-a-pie-chart-in-2021-spoiler-alert-a-standard-web-component-will-do-1j56"&gt;my previous post&lt;/a&gt; &lt;br&gt;
I explained how to build a &lt;em&gt;vanilla JavaScript&lt;/em&gt; &lt;code&gt;&amp;lt;pie-chart&amp;gt;&lt;/code&gt; Web Component.&lt;/p&gt;

&lt;p&gt;With &lt;strong&gt;semantic HTML&lt;/strong&gt; creating a Pie Chart:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;pie-chart&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;slice&lt;/span&gt; &lt;span class="na"&gt;size=&lt;/span&gt;&lt;span class="s"&gt;"90"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"green"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;HTML&lt;span class="nt"&gt;&amp;lt;/slice&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;slice&lt;/span&gt; &lt;span class="na"&gt;size=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;  &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;JavaScript&lt;span class="nt"&gt;&amp;lt;/slice&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;slice&lt;/span&gt; &lt;span class="na"&gt;size=&lt;/span&gt;&lt;span class="s"&gt;"9"&lt;/span&gt;  &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;CSS&lt;span class="nt"&gt;&amp;lt;/slice&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/pie-chart&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N-glI370--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/MWUIQVe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N-glI370--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/MWUIQVe.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Experienced Web Developers commented &lt;code&gt;&amp;lt;slice&amp;gt;&lt;/code&gt; is &lt;strong&gt;not a valid HTML Element&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;slice&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;HTMLUnknownElement&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Neither is it a valid &lt;strong&gt;Custom Element&lt;/strong&gt;, because those always require &lt;strong&gt;at least one hyphen&lt;/strong&gt; in the tagname.&lt;/p&gt;

&lt;p&gt;That hyphen restriction is to prevent conflicts with any HTML tags the WHATWG might add &lt;em&gt;&lt;strong&gt;in the future&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Custom Element tag names:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;have to &lt;strong&gt;start with&lt;/strong&gt; a lowercase ASCII character&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;can't have uppercase&lt;/strong&gt; characters anywhere&lt;/li&gt;
&lt;li&gt;must contain at least one &lt;strong&gt;hyphen&lt;/strong&gt; - character&lt;/li&gt;
&lt;li&gt;UTF-8 characters, &lt;strong&gt;emojis&lt;/strong&gt; are allowed: &lt;code&gt;&amp;lt;a-🥧-chart&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;cannot be self closing: &lt;code&gt;&amp;lt;pie-chart/&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#what-is-the-value-of-using-raw-ltslicegt-endraw-"&gt;
  &lt;/a&gt;
  What is the value of using &lt;code&gt;&amp;lt;slice&amp;gt;&lt;/code&gt; ?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#-raw-ltpiechartgt-endraw-must-be-a-unique-custom-element-extended-from-htmlelement"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;pie-chart&amp;gt;&lt;/code&gt; must be a &lt;strong&gt;unique&lt;/strong&gt; Custom Element (extended from HTMLElement)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Scoped registries have been &lt;a href="https://github.com/WICG/webcomponents/issues/716"&gt;on the agenda for 4 years now&lt;/a&gt;. &lt;br&gt;
For now &lt;strong&gt;all&lt;/strong&gt; Custom Elements go into the same &lt;strong&gt;global &lt;em&gt;customElementsRegistry&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;That means &lt;code&gt;customElements.define("pie-chart")&lt;/code&gt; can only be called &lt;strong&gt;once&lt;/strong&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If an element &lt;strong&gt;with the same tag name&lt;/strong&gt; was already created, &lt;br&gt;
my &lt;code&gt;&amp;lt;pie-chart&amp;gt;&lt;/code&gt; element will throw an error:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aw_D0eJ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ICumcGD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aw_D0eJ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ICumcGD.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For a good UX (User eXperience) &lt;strong&gt;and&lt;/strong&gt; DX (Developer eXperience) 
my &lt;code&gt;&amp;lt;pie-chart&amp;gt;&lt;/code&gt; Web Component should test if it can be defined:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pie-chart&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// warn the user "my" Web Component doesn't work; another definition exists&lt;/span&gt;
    &lt;span class="c1"&gt;// warn the developer another Web Component with the same name exists&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pie-chart&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;h2&gt;
  &lt;a href="#to-raw-ltslicegt-endraw-or-to-raw-ltpieslicegt-endraw-that-is-the-question"&gt;
  &lt;/a&gt;
  To &lt;code&gt;&amp;lt;slice&amp;gt;&lt;/code&gt; or to &lt;code&gt;&amp;lt;pie-slice&amp;gt;&lt;/code&gt;, that is the question
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#-raw-ltslicegt-endraw-has-less-restrictions"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;slice&amp;gt;&lt;/code&gt; has less restrictions
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A &lt;strong&gt;duplicate&lt;/strong&gt; &lt;code&gt;&amp;lt;slice&amp;gt;&lt;/code&gt; can only be created by the WHATWG &lt;strong&gt;adding&lt;/strong&gt; &lt;code&gt;&amp;lt;slice&amp;gt;&lt;/code&gt; as standard HTML tag.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Till then. I know &lt;strong&gt;with 100% certainty&lt;/strong&gt; there will not be a naming conflict. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Because &lt;strong&gt;no 3rd party Developer&lt;/strong&gt; can create a valid &lt;code&gt;&amp;lt;slice&amp;gt;&lt;/code&gt; element:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eez5P-h5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/2s9uAII.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eez5P-h5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/2s9uAII.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Had I used a &lt;code&gt;&amp;lt;pie-slice&amp;gt;&lt;/code&gt; &lt;strong&gt;Custom Element&lt;/strong&gt;, &lt;br&gt;
it would have been an additional point of failure. &lt;br&gt;
I would have to add extra code to check if &lt;code&gt;&amp;lt;pie-slice&amp;gt;&lt;/code&gt; was defined &lt;strong&gt;by another developer&lt;/strong&gt;; like required for &lt;code&gt;&amp;lt;pie-chart&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#-raw-ltpieslicegt-endraw-versus-raw-ltslicegt-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;pie-slice&amp;gt;&lt;/code&gt; versus &lt;code&gt;&amp;lt;slice&amp;gt;&lt;/code&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;pie-slice&amp;gt;&lt;/code&gt; can have all the &lt;strong&gt;Web Components goodies&lt;/strong&gt;: &lt;code&gt;observedAttributes&lt;/code&gt; , &lt;code&gt;attributeChangedCallback&lt;/code&gt; etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;slice&amp;gt;&lt;/code&gt; will always be an UnknownHTMLElement. &lt;br&gt;
&lt;code&gt;observedAttributes&lt;/code&gt;-like behaviour can only be created by adding a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver"&gt;MutationObserver&lt;/a&gt; (&lt;em&gt;yes, works on Unknown Elements&lt;/em&gt;)&lt;br&gt;
You then get an extra bonus; because a MutationObserver can observe &lt;strong&gt;text Node&lt;/strong&gt; changes. &lt;br&gt;
A &lt;strong&gt;Custom Element&lt;/strong&gt; can not monitor the &lt;code&gt;innerHTML&lt;/code&gt; label.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#abusing-existing-html-tags"&gt;
  &lt;/a&gt;
  (ab)using &lt;strong&gt;existing&lt;/strong&gt; HTML tags
&lt;/h2&gt;

&lt;p&gt;We can test the "&lt;em&gt;WHATWG created a new HTML tag&lt;/em&gt;" scenario.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;progress&amp;gt;&lt;/code&gt; is an &lt;strong&gt;existing&lt;/strong&gt; HTML tag &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;And for those who don't know. &lt;br&gt;
Many standard HTML elements, &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;, &lt;strong&gt;&lt;em&gt;are&lt;/em&gt; Web Components&lt;/strong&gt; &lt;br&gt;
Browsers have different implementations; &lt;br&gt;
check out &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress"&gt;the &lt;code&gt;&amp;lt;progress&amp;gt;&lt;/code&gt; documentation page&lt;/a&gt; in Chrome, Firefox or Safari&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Similar to &lt;code&gt;&amp;lt;pie-chart&amp;gt;&lt;/code&gt; (and using the same Base Class, available on &lt;a href="https://pie-meister.github.io"&gt;https://pie-meister.github.io&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;This chart (modelled after a Google Analytics chart):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vC-CgDup--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/K8mAUHM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vC-CgDup--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/K8mAUHM.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;is created by the &lt;code&gt;&amp;lt;progress-circle&amp;gt;&lt;/code&gt; Web Component, from &lt;strong&gt;semantic HTML&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;progress-circle&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;progress&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"75%"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"green"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;SEO&lt;span class="nt"&gt;&amp;lt;/progress&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;progress&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"60%"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"orange"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Social&lt;span class="nt"&gt;&amp;lt;/progress&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;progress&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"65%"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"teal"&lt;/span&gt; &lt;span class="na"&gt;edge=&lt;/span&gt;&lt;span class="s"&gt;"black"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Maps&lt;span class="nt"&gt;&amp;lt;/progress&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;progress&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"50%"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"orangered"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Traffic&lt;span class="nt"&gt;&amp;lt;/progress&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/progress-circle&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This Web Component uses shadowDOM to display the chart, the semantic HTML remains &lt;strong&gt;invisible&lt;/strong&gt; in &lt;strong&gt;lightDOM&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Thus you do not see the &lt;code&gt;&amp;lt;progress&amp;gt;&lt;/code&gt; default behaviour&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you really, &lt;em&gt;really&lt;/em&gt; want a "NO JavaScript!" version, you have to change the HTML, CSS (and Web Component code) a bit to work with &lt;em&gt;something like&lt;/em&gt; this:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;progress&lt;/span&gt; &lt;span class="na"&gt;max=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"75"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"green"&lt;/span&gt; &lt;span class="na"&gt;label=&lt;/span&gt;&lt;span class="s"&gt;"SEO"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/progress&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;progress&lt;/span&gt; &lt;span class="na"&gt;max=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"60"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"orange"&lt;/span&gt; &lt;span class="na"&gt;label=&lt;/span&gt;&lt;span class="s"&gt;"Social"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/progress&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;progress&lt;/span&gt; &lt;span class="na"&gt;max=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"65"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"teal"&lt;/span&gt; &lt;span class="na"&gt;label=&lt;/span&gt;&lt;span class="s"&gt;"Maps"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/progress&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;progress&lt;/span&gt; &lt;span class="na"&gt;max=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"50"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"orangered"&lt;/span&gt; &lt;span class="na"&gt;label=&lt;/span&gt;&lt;span class="s"&gt;"Traffic"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Traffic&lt;span class="nt"&gt;&amp;lt;/progress&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;again, the &lt;code&gt;&amp;lt;progress&amp;gt;&lt;/code&gt; elements remains &lt;strong&gt;invisible&lt;/strong&gt; in lightDOM&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the resulting chart is displayed &lt;strong&gt;in shadowDOM&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I only have to safeguard a duplicate naming conflict for the &lt;code&gt;&amp;lt;progress-circle&amp;gt;&lt;/code&gt; Web Component.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As long as you can keep the output in &lt;strong&gt;invisible lightDOM&lt;/strong&gt;, &lt;br&gt;
you can (ab)use any &lt;strong&gt;existing HTML tag&lt;/strong&gt; for other purposes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#piemeistergithubio"&gt;
  &lt;/a&gt;
  &lt;a href="https://Pie-Meister.github.io"&gt;Pie-Meister.github.io&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;pie-chart&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;progress-circle&amp;gt;&lt;/code&gt; Web Components are available, as &lt;em&gt;unlicensed&lt;/em&gt; source code, on &lt;a href="https://pie-meister.github.io"&gt;https://pie-meister.github.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BakCPGiO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/F6MSps6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BakCPGiO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/F6MSps6.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code is an enhanced version of &lt;a href="https://dev.to/dannyengelman/what-web-technologies-are-required-to-draw-a-pie-chart-in-2021-spoiler-alert-a-standard-web-component-will-do-1j56"&gt;my previous &lt;code&gt;&amp;lt;pie-chart&amp;gt;&lt;/code&gt; post&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;instead of a SVG &lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt; Element, a &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; Element is used to draw slices. The &lt;code&gt;&amp;lt;progress-circle&amp;gt;&lt;/code&gt; can &lt;strong&gt;not&lt;/strong&gt; be created with &lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt; elements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Uses shadowDOM &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;uses ::part shadowParts for optional global styling&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;all in vanilla JavaScript, (way) &lt;strong&gt;under 2 kB&lt;/strong&gt; GZipped&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a &lt;strong&gt;starting point&lt;/strong&gt; for you own Web Components&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webcomponents</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Build Your First Reusable Components Using React</title>
      <author>Dimer</author>
      <pubDate>Sat, 24 Apr 2021 16:20:25 +0000</pubDate>
      <link>https://dev.to/dimer191996/build-your-first-reusable-components-using-react-41mg</link>
      <guid>https://dev.to/dimer191996/build-your-first-reusable-components-using-react-41mg</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0-JrczDS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ylogg4c1gmih190jrpg0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0-JrczDS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ylogg4c1gmih190jrpg0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;1.What are reusable components?&lt;br&gt;
2.Making a React component reusable&lt;br&gt;
4.Conclusion&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#what-are-reusable-components"&gt;
  &lt;/a&gt;
  What are reusable components?
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Reusable components are those React components that can be used multiple times in your application&lt;/strong&gt;&lt;/em&gt;. As a result, they need to be generic enough so that it’s free from complex business logic. If a component contains any complex logic inside it, not only does it become difficult to reuse, it also becomes less maintainable. &lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;React Hooks&lt;/a&gt; are the perfect fit for reusable component logic.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;I'm straight up beginner , So if am lying on this `article` feel free to tell me 😃&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Let Goooo!🦸‍♂️&lt;/p&gt;

&lt;p&gt;=&amp;gt; For example, the App component below has a button which can’t be reused since it has the onClick prop hardcoded in it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function handleClick(e) {
 // Some function which does fake API call
 fakeApiCall(e.target.value);
}

function App() {
 return (
   &amp;lt;div className="app"&amp;gt;
     &amp;lt;button className="button" onClick={handleClick}&amp;gt;
       Submit
     &amp;lt;/button&amp;gt;
   &amp;lt;/div&amp;gt;
 );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;😞 Here, there is no way in which we can modify the text Submit which is rendered on the button.&lt;/p&gt;

&lt;p&gt;😊Buuut Iiiif we want to make the above component reusable, we need to make it more generic. First, we can make a separate Button function which can be imported and reused multiple times in our application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function handleClick(e) {
 // Some function which does fake API call
 fakeApiCall(e.target.value);
}

function Button() {
 return (
   &amp;lt;button className="button" onClick={handleClick}&amp;gt;
     Submit
   &amp;lt;/button&amp;gt;
 );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we can reuse that Button component multiple times inside our App function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function App() {
 return (
   &amp;lt;div className="app"&amp;gt;
     &amp;lt;Button /&amp;gt;
     &amp;lt;Button /&amp;gt;
   &amp;lt;/div&amp;gt;
 );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code renders the following user interface like:&lt;/p&gt;




&lt;p&gt;|Submit | |Submit |&lt;/p&gt;




&lt;p&gt;🤔 As you can see  ladyzz and gentlemanzz , we are already reusing one component multiple times. But, we still need to make it more generic because we might want to do different tasks with one click of a button. We can do a form submit, form reset or do another API call to fetch some sh** tone of data, for example.&lt;/p&gt;

&lt;p&gt;Let’s extract the handleClick function from our Button component and pass it as a prop. Our Button component will now look like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Button(props) {
 return (
   &amp;lt;button className="button" onClick={props.handleClick}&amp;gt;
     Submit
   &amp;lt;/button&amp;gt;
 );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And our App component will look like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function handleClick(e) {
 // Some function which does fake API call
 fakeApiCall(e.target.value);
}

function App() {
 return (
   &amp;lt;div className="app"&amp;gt;
     &amp;lt;Button handleClick={handleClick} /&amp;gt;
   &amp;lt;/div&amp;gt;
 );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we can pass any function to the Button component through the handleClick prop. I highly suggest that you check your props using PropTypes.&lt;/p&gt;

&lt;p&gt;We can also use multiple Button components inside our App component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function handleAPICall(e) {
 // Do some API call
}

function handleFormReset(e) {
 // Reset some form data
}

function App() {
 return (
   &amp;lt;div className="app"&amp;gt;
     &amp;lt;Button handleClick={handleAPICall} /&amp;gt;
     &amp;lt;Button handleClick={handleFormReset} /&amp;gt;
   &amp;lt;/div&amp;gt;
 );
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alright, alright, alright 😎! As you can see, we have made our Button component even more flexible. We can also pass the text which is rendered on the button as a prop.&lt;/p&gt;

&lt;p&gt;Our Button component will now look like the following:&lt;br&gt;
🎶🎶Tanrara rara 🎶🎶 😎&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Button(props) {
 return (
   &amp;lt;button className="button" onClick={props.handleClick}&amp;gt;
     {props.label}
   &amp;lt;/button&amp;gt;
 );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;😎 And our App component will look like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function handleAPICall(e) {
 // Do some API call
}

function handleFormReset(e) {
 // Reset some form data
}

function App() {
 return (
   &amp;lt;div className="app"&amp;gt;
     &amp;lt;Button handleClick={handleAPICall} label="Submit"/&amp;gt;
     &amp;lt;Button handleClick={handleFormReset} label="Reset"/&amp;gt;
   &amp;lt;/div&amp;gt;
 );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It renders the following user interface like:&lt;/p&gt;




&lt;p&gt;|Submit | |Reset |&lt;/p&gt;




&lt;p&gt;It’s already very reusable. &lt;br&gt;
But 🖐️🔊 "hold on wait a minute "🔊⛔, we can also add certain additional props like whether to render an icon before the label of the button as well.&lt;/p&gt;

&lt;p&gt;To do that, we can change our Button component to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Button(props) {
  return (
    &amp;lt;button className="button" onClick={props.handleClick}&amp;gt;
      {props.icon} {props.label}
    &amp;lt;/button&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And, we need to pass that icon prop from our App component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Button
   handleClick={handleAPICall}
   label="Submit"
   icon={&amp;lt;i className="fas fa-arrow-alt-circle-right" /&amp;gt;}
 /&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above example uses &lt;a href="https://fontawesome.com/how-to-use/on-the-web/using-with/react"&gt;font-awesome&lt;/a&gt; but you can use any font you want zaddy.&lt;/p&gt;

&lt;p&gt;👇&lt;br&gt;
Also, it’s a good idea to render the icon prop only if it’s present. To do that, we just need to make the following changes to our Button component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Button(props) {
 return (
   &amp;lt;button className="button" onClick={props.handleClick}&amp;gt;
     {props.icon &amp;amp;&amp;amp; props.icon} {props.label}
   &amp;lt;/button&amp;gt;
 );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#our-component-is-very-much-reusable-at-this-moment-we-can-also-pass-another-additional-prop-called-type-which-can-control-whether-the-button-will-be-primary-or-secondary"&gt;
  &lt;/a&gt;
  😎 Our component is very much reusable at this moment. We can also pass another additional prop called type which can control whether the button will be primary or secondary.
&lt;/h2&gt;

&lt;p&gt;We need to make the following changes to our Button component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Button(props) {
 const className = `button ${props.type}`

 return (
   &amp;lt;button className={className} onClick={props.handleClick}&amp;gt;
     {props.icon &amp;amp;&amp;amp; props.icon} {props.label}
   &amp;lt;/button&amp;gt;
 );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we will be passing a type prop from our App component which will be passed to the className of the button.&lt;/p&gt;

&lt;p&gt;Our App component will now look like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function handleAPICall(e) {
 // Do some API call
}

function handleFormReset(e) {
 // Reset some form data
}

function App() {
 return (
   &amp;lt;div className="app"&amp;gt;
     &amp;lt;Button
       handleClick={handleAPICall}
       label="Submit"
       icon={&amp;lt;i className="fas fa-arrow-alt-circle-right" /&amp;gt;}
       type="primary"
     /&amp;gt;
     &amp;lt;Button handleClick={handleFormReset} label="Reset" type="secondary" /&amp;gt;
   &amp;lt;/div&amp;gt;
 );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We would also need to add a few lines of CSS to our application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.button.primary {
 background-color: #0886ff;
}

.button.secondary {
 background-color: #73a800;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we can distinguish between our #primary and #secondary buttons. It’s also a good idea now to add a #default #prop to our Button component so that it #renders #secondary buttons by #default. This is really helpful if we #forget to pass the #type #prop to our Button component. We need to make the following changes to our Button component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Button(props) {
 const className = `button ${props.type}`

 return (
   &amp;lt;button className={className} onClick={props.handleClick}&amp;gt;
     {props.icon &amp;amp;&amp;amp; props.icon} {props.label}
   &amp;lt;/button&amp;gt;
 );
}

Button.defaultProps = {
 type: "secondary"
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if we have another Button component which doesn’t have the type prop, it will be a secondary button:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div className="app"&amp;gt;
 &amp;lt;Button
   handleClick={handleAPICall}
   label="Submit"
   icon={&amp;lt;i className="fas fa-arrow-alt-circle-right" /&amp;gt;}
   type="primary"
 /&amp;gt;
 &amp;lt;Button handleClick={handleFormReset} label="Reset" type="secondary" /&amp;gt;
 &amp;lt;Button handleClick={handleFormReset} label="Click" /&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#i-will-be-back-"&gt;
  &lt;/a&gt;
  🤖 "I will be back "
&lt;/h6&gt;

&lt;p&gt;Follow me For Part II Tommmorrrrow , Honestly I just need a friends , but i will be back tho...&lt;/p&gt;

</description>
      <category>react</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Professionals never return React.Fragment. Coders do.</title>
      <author>Coding Bugs</author>
      <pubDate>Sat, 24 Apr 2021 16:16:08 +0000</pubDate>
      <link>https://dev.to/codbugs/professionals-never-return-react-fragment-coders-do-4kim</link>
      <guid>https://dev.to/codbugs/professionals-never-return-react-fragment-coders-do-4kim</guid>
      <description>&lt;p&gt;In my experience, more than 15 years of coding, programming, architecting, I've found people implementing code with &lt;strong&gt;no rules or standards&lt;/strong&gt; and, sometimes, people believing they follow some rules but, in reality, they are not applying by themselves. I was in that situation a lot of times and keep being sometimes as well. I've written this article to show what I think is a &lt;strong&gt;good practice&lt;/strong&gt; and makes us being &lt;strong&gt;good professionals&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The issue&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The following &lt;em&gt;React&lt;/em&gt; code renders a list of items in case of the array passed has them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;collection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt; &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do you think there is something wrong with the code? This code works perfectly fine, it creates a &lt;code&gt;li&lt;/code&gt; node with the number as the value. &lt;/p&gt;

&lt;p&gt;What happens if the array has no items in it? The &lt;code&gt;ul&lt;/code&gt; node &lt;strong&gt;will be rendered&lt;/strong&gt; as well but there won't be any &lt;code&gt;li&lt;/code&gt; node and &lt;strong&gt;no items in there&lt;/strong&gt;. This is not a big issue but something not completely well. &lt;/p&gt;

&lt;p&gt;We can modify the code in this way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// *** notice how the code is modified and complex increases&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; 
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;collection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt; &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Like the previous case, this code is working fine, it does what it is supposed to do. &lt;/p&gt;

&lt;p&gt;So, let me ask the same question as before, what happens if the array has no items in it? &lt;/p&gt;

&lt;p&gt;In this case, a &lt;code&gt;false&lt;/code&gt; value and no HTML node are returned. The issue here is that we return &lt;strong&gt;different kinds of items&lt;/strong&gt; depending on the &lt;code&gt;items&lt;/code&gt; property passed.&lt;/p&gt;

&lt;p&gt;Why is this an issue? In fact, this is just a &lt;strong&gt;concept issue&lt;/strong&gt; more than a coding issue. Returning the same kind of item in this function will make it easier for testing, make it easier to maintain, make it easier to read because it will be &lt;strong&gt;consistent&lt;/strong&gt; and other methods calling this one will receive exactly what they expect and won't have the necessity to check if retrieves a boolean or a component.&lt;/p&gt;

&lt;p&gt;The next code modification must have in mind this premise so it'll be like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// check if items is not empty&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isEmpty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// always return a React component&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isEmpty&lt;/span&gt;
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;collection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt; &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It seems that our code makes more sense now, doesn't it? We always return a component for any of the options or paths our code takes. If items is not empty, a &lt;code&gt;ul&lt;/code&gt; node is returned plus a &lt;code&gt;li&lt;/code&gt; node per item inside, a React component in fact. &lt;/p&gt;

&lt;p&gt;If there is no items, a &lt;code&gt;React.Fragment&lt;/code&gt; component is returned. Both of them are &lt;strong&gt;React components&lt;/strong&gt;, no need for callers to check it.&lt;/p&gt;

&lt;p&gt;As a &lt;strong&gt;professional programmers&lt;/strong&gt; that we are, we must &lt;em&gt;give meaning and name our objects&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;You may noticed we have few objects here in our code, an &lt;strong&gt;empty list&lt;/strong&gt; component, an &lt;strong&gt;item list&lt;/strong&gt; component, an &lt;strong&gt;item&lt;/strong&gt; component and a &lt;strong&gt;manager&lt;/strong&gt; component. Each of them with a &lt;strong&gt;unique responsibility&lt;/strong&gt; (following the &lt;em&gt;Single Responsibility&lt;/em&gt; principle that I'll talk in a future article) and a simple code easy to understand, to maintain and to test.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ListItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ItemList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ListItem&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;EmptyList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;No items in the list&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt; &lt;span class="c1"&gt;// or &amp;lt;React.Fragment /&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ListManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isEmpty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isEmpty&lt;/span&gt; 
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;EmptyList&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ItemList&lt;/span&gt; &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;collection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ListManager&lt;/span&gt; &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I think this code looks like much better than the first one. Reviewers'll see the person behind the code thought how to face the problem, the constraints, and the paths to take around of it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wrapping up&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As I wrote some paragraphs above, &lt;strong&gt;professional programmers&lt;/strong&gt; must give meaning to the code. Coding can be done by anyone, programming in a good way with sense are just a subject of professionals.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What do you think about the exercise made in this article? &lt;br&gt;
Hope this can be useful to you or just have fun reading it.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>JAVA Semester Project | Review Plsss! |  GN Tours and Services</title>
      <author>Gaurav Singh</author>
      <pubDate>Sat, 24 Apr 2021 15:51:56 +0000</pubDate>
      <link>https://dev.to/gauravsingh9356/java-semester-project-review-plsss-gn-tours-and-services-4fm7</link>
      <guid>https://dev.to/gauravsingh9356/java-semester-project-review-plsss-gn-tours-and-services-4fm7</guid>
      <description>&lt;p&gt;Finally, I have completed our project. This was my first Java project on this scale. Seriously, I had no idea about how far I will make it after I decided on this idea to implement. But at last, I am happy to share that I implemented more utilities than I initially thought!&lt;/p&gt;

&lt;p&gt;𝓖𝓝 𝓣𝓸𝓾𝓻𝓼 𝓪𝓷𝓭 𝓢𝓮𝓻𝓿𝓲𝓬𝓮𝓼&lt;/p&gt;

&lt;p&gt;𝐅𝐮𝐥𝐥𝐲 𝐋𝐨𝐚𝐝𝐞𝐝 𝐑𝐞𝐚𝐥 𝐖𝐨𝐫𝐥𝐝 𝐀𝐩𝐩𝐥𝐢𝐜𝐚𝐭𝐢𝐨𝐧 𝐭𝐨 𝐝𝐞𝐯𝐞𝐥𝐨𝐩 𝐚 𝐬𝐲𝐬𝐭𝐞𝐦 𝐭𝐡𝐚𝐭 𝐚𝐮𝐭𝐨𝐦𝐚𝐭𝐞𝐬 𝐭𝐡𝐞 𝐩𝐫𝐨𝐜𝐞𝐬𝐬𝐞𝐬 𝐚𝐧𝐝 𝐚𝐜𝐭𝐢𝐯𝐢𝐭𝐢𝐞𝐬 𝐨𝐟 𝐚 𝐭𝐫𝐚𝐯𝐞𝐥.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#functionalities"&gt;
  &lt;/a&gt;
  Functionalities:
&lt;/h2&gt;


&lt;li&gt;Fully Secured Authentication i.e. SignUp, Login, logout,Forget Password utilities. Encryption and Decryption of user passwords&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Loading Welcome Screen to user&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Registration&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;OTP Email Sending utility.&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Confimation Email Sending utility after successfull registration&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Update Details if user wants to update&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;View User Details&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Different Packages with different prices and offerings&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;View Hotels&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Book Package Utility&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Dynamic Hotels Integration with Database&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Book Hotel Utility&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;View booked Package and Hotel&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;No of person, AC/Non AC room, food/No food etc all utilities offerings and then dynamically calculation of prices&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;View Destination&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Payment with Stripe&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Chat Bot for answering FAQs&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Review Us utility includes user rating out of 5 and their comments about our services&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;About Us&lt;/li&gt;
&lt;h2&gt;
  &lt;a href="#used-tech"&gt;
  &lt;/a&gt;
  Used Tech:
&lt;/h2&gt;


&lt;li&gt;Java Swing for UI&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;MySQL for Database&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;AES Algorithm for encryption/decryption of passwords&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;JavaMail for sending email OTP&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Stripe API Payment Gateway &lt;/li&gt;
&lt;h2&gt;
  &lt;a href="#database-records"&gt;
  &lt;/a&gt;
  Database Records
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#database-travel"&gt;
  &lt;/a&gt;
  Database == Travel
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#tables"&gt;
  &lt;/a&gt;
  Tables:
&lt;/h4&gt;


&lt;li&gt;account for auth&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;customer for registration&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;bookpackage for booking of package&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;hotel for adding hotels in table and dynamically fetching them in UI&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;bookhotel for booking hotels&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;review for reviewing our services&lt;/li&gt;
&lt;h4&gt;
  &lt;a href="#if-liked-feel-free-to-star-itstarstruck"&gt;
  &lt;/a&gt;
  If liked feel free to star it!🤩
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://github.com/GauravSingh9356/GN_Tours_Services/tree/master"&gt;Github Code Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/feed/update/urn:li:activity:6785495647555469314/"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>devops</category>
      <category>showdev</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>10 Awesome 404 Page Not Found Page Designs</title>
      <author>Pawan Bhayde</author>
      <pubDate>Sat, 24 Apr 2021 15:43:27 +0000</pubDate>
      <link>https://dev.to/pawanbhayde/10-awesome-404-page-not-found-page-designs-5ig</link>
      <guid>https://dev.to/pawanbhayde/10-awesome-404-page-not-found-page-designs-5ig</guid>
      <description>&lt;h1&gt;
  &lt;a href="#fargo-404"&gt;
  &lt;/a&gt;
  Fargo 404
&lt;/h1&gt;

&lt;p&gt;Fargo-inspired 404 page for DailyUI #008&lt;/p&gt;

&lt;p&gt;Snow loosely based on &lt;a href="http://codepen.io/loktar00/pen/CHpGo"&gt;http://codepen.io/loktar00/pen/CHpGo&lt;/a&gt; and &lt;a href="http://php.quicoto.com/snow-html-canvas/"&gt;http://php.quicoto.com/snow-html-canvas/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/nw/embed/WQmxYY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#404-page-lost-in-space"&gt;
  &lt;/a&gt;
  404 Page - Lost In Space
&lt;/h1&gt;

&lt;p&gt;Coded my dribbble shot: &lt;a href="https://dribbble.com/shots/4330167-404-Page-Lost-In-Space"&gt;https://dribbble.com/shots/4330167-404-Page-Lost-In-Space&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Animated 404 Lost in Space Page.
CSS3 Keyframe animations used.
All the illustrations are hand-crafted in Adobe Illustrator.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/salehriaz/embed/erJrZM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#404-error-page"&gt;
  &lt;/a&gt;
  404 error page
&lt;/h1&gt;

&lt;p&gt;404 error SVG animation page&lt;br&gt;
anime.js&lt;/p&gt;

&lt;p&gt;error 404&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/uiswarup/embed/dyoyLOp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#yeti-404-page"&gt;
  &lt;/a&gt;
  Yeti 404 Page
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/dsenneff/embed/mjZgmN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#daily-ui-008-404-page"&gt;
  &lt;/a&gt;
  Daily UI #008 - 404 Page
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rafaelavlucas/embed/NWWQNjZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#404-page"&gt;
  &lt;/a&gt;
  404 Page
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/andrew-lawendy/embed/deOpMZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#404-page"&gt;
  &lt;/a&gt;
  404 page
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Navedkhan012/embed/vrWQMY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#cyberpunk-error-page"&gt;
  &lt;/a&gt;
  Cyberpunk Error page
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ltrademark/embed/xpgprZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#404"&gt;
  &lt;/a&gt;
  404
&lt;/h1&gt;

&lt;p&gt;Page not found &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/vineethtrv/embed/ZbKLmq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#404-error-example"&gt;
  &lt;/a&gt;
  404 Error Example
&lt;/h1&gt;

&lt;p&gt;From graphic design to web design. This 404 error example was designed by Yoga Perdana and we have converted into web with pure CSS and minimal HTML using CSS3 gradients and shadows. See more creative examples in the related pens.&lt;/p&gt;

&lt;p&gt;Hope you like it :)&lt;/p&gt;

&lt;p&gt;Read the full article &lt;a href="https://www.silocreativo.com/en/creative-examples-404-error-css/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ricardpriet/embed/qVZxNo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:-&lt;/strong&gt; visit my youtube channel for frontend tutorials&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;subscribe to my youtube channel :-&lt;/strong&gt; &lt;a href="https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg"&gt;https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resent post :-&lt;/strong&gt; &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/pawanbhayde" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bpN1Nik7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--9JCEgIY5--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/619463/7a66f3fc-82cb-499b-a22b-9b346123f937.png" alt="pawanbhayde image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pawanbhayde/7-way-to-find-in-array-using-javascript-4lhf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;7 Way To Find In Array Using Javascript&lt;/h2&gt;
      &lt;h3&gt;Pawan Bhayde ・ Apr 24 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>codepen</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>Notus React - Free Tailwind UI Kit</title>
      <author>Sm0ke</author>
      <pubDate>Sat, 24 Apr 2021 15:43:04 +0000</pubDate>
      <link>https://dev.to/sm0ke/notus-react-free-tailwind-ui-kit-2fn9</link>
      <guid>https://dev.to/sm0ke/notus-react-free-tailwind-ui-kit-2fn9</guid>
      <description>&lt;p&gt;This article presents an open-source UI Kit crafted with &lt;strong&gt;React and Tailwind&lt;/strong&gt;: &lt;em&gt;Notus React&lt;/em&gt;. The project is released under the MIT License on Github and curious minds can download and see this project in action with a few commands typed in the terminal. For newcomers, &lt;strong&gt;React&lt;/strong&gt; is an open-source library, probably the most popular one at the moment we speak, actively supported by the Facebook tech giant. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; TL;DR;&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.creative-tim.com/product/notus-react"&gt;Notus React&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://demos.creative-tim.com/notus-react/"&gt;Notus React&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;Free React Dashboards&lt;/a&gt; - a curated list | Dev.to&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g5b2ffUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/admin-dashboards/react-dashboards/master/media/notus-react-tailwind-intro.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g5b2ffUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/admin-dashboards/react-dashboards/master/media/notus-react-tailwind-intro.gif" alt="Notus React - Free Tailwind UI Kit, animated presentation."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Notus React is Free and Open Source. It features multiple HTML and React elements and it comes with dynamic components for React. By using the components and pages provided by this open-source React UI Kit, any developer with basic knowledge can code a new website quite fast.&lt;/p&gt;

&lt;p&gt;To compile and execute the project in a local environment, all we need is a decent NodeJS version plus Git, the popular versioning command tool to pull the sources directly from Github.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/creativetimofficial/notus-react/blob/main/README.md"&gt;README&lt;/a&gt; file provided in the source directory comes with a comprehensive setup regarding the build and kit execution.    &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fully Coded Components&lt;/strong&gt; - Notus React is built with over frontend 100 individual components, giving you the freedom to choose and combine. All components can take variations in colors that you can easily modify using Tailwind CSS classes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example Pages&lt;/strong&gt; - If you want to get inspiration or just show something directly to your clients, you can jump-start your development with our pre-built example pages. You will be able to quickly set up the basic structure for your web project.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Notus React&lt;/strong&gt; - Components&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8wg3gFeA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zkf9plgsj92qjbef3o7t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8wg3gFeA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zkf9plgsj92qjbef3o7t.png" alt="Notus React - Components."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Notus React&lt;/strong&gt; - Dashboard Page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yzCaNq81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zyn0a26jfl8sxse2gait.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yzCaNq81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zyn0a26jfl8sxse2gait.png" alt="Notus React - Dashboard Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Notus React&lt;/strong&gt; - Profile Page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jhHBPXl_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vqxxqetxgsmniphikuqa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jhHBPXl_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vqxxqetxgsmniphikuqa.png" alt="Notus React - Profile Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! For more resources, please access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/creativetimofficial/notus-react"&gt;Notus React&lt;/a&gt; - Source Code (MIT License) published on Github&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/admin-dashboards/open-source"&gt;Open-source Admin Dashboards&lt;/a&gt; - index provided by AppSeed &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>tailwindcss</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Learn Ruby 101: Variables, puts and gets</title>
      <author>Eric Chapman</author>
      <pubDate>Sat, 24 Apr 2021 15:15:37 +0000</pubDate>
      <link>https://dev.to/ericchapman/learn-ruby-101-variables-puts-and-gets-3k63</link>
      <guid>https://dev.to/ericchapman/learn-ruby-101-variables-puts-and-gets-3k63</guid>
      <description>&lt;p&gt;I develop in Javascript, Python, PHP and Ruby. By far Ruby is my favorite programming language. Together let start a journey and revisit our Ruby foundations. &lt;/p&gt;

&lt;h2&gt;You want to learn Ruby or your Ruby is a bit rusty?&lt;/h2&gt; 

&lt;p&gt;In this series we will start from the beginning and will learn every aspect of Ruby one step at a time. &lt;/p&gt;

&lt;p&gt;Each post will include some theory but also exercise and solution.&lt;/p&gt;

&lt;p&gt;If you have any questions/comments or your are new and need help, you can comment below or send me a message.&lt;/p&gt;

&lt;h2&gt;Run your Ruby code&lt;/h2&gt;

&lt;p&gt;No need to go through a complete install. Just go to this web site &lt;a href="https://replit.com/languages/ruby"&gt;https://replit.com/languages/ruby&lt;/a&gt; and start learning right now. You will have plenty of time to figure out the Ruby installation on your local machine later on...&lt;/p&gt;

&lt;h1&gt;Ruby Variables&lt;/h1&gt;

&lt;p&gt;If you’re new to programming, variables are the fundamental building blocks of a programming language as they are used to store different values that you want to process in your code.&lt;/p&gt;

&lt;p&gt;Once the variable is store in program memory, it can be use later on.&lt;/p&gt;

&lt;p&gt;For example let say you want to store the user name you can use a variable call name and set is value to Mike Taylor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike Taylor'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Ruby string is enclosed with quotation marks.&lt;/p&gt;

&lt;p&gt;The variable name we just created is a string variable. In Ruby we don't have to specified the variable type. &lt;/p&gt;

&lt;p&gt;Ruby is a Just-in-time (JIT) interpreted language. Which automatically recognizes the data type based on what variables are stored.&lt;/p&gt;

&lt;p&gt;Here are some Ruby basic variables type and how to create them&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# string&lt;/span&gt;
&lt;span class="n"&gt;full_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike Taylor'&lt;/span&gt;

&lt;span class="c1"&gt;# integer number&lt;/span&gt;
&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;

&lt;span class="c1"&gt;# float number&lt;/span&gt;
&lt;span class="n"&gt;book_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;15.80&lt;/span&gt;

&lt;span class="c1"&gt;# booleans&lt;/span&gt;
&lt;span class="n"&gt;active?&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;admin_user?&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ruby also have more advance variables type like array, hash, structure and class. We will cover all of those in details later.&lt;/p&gt;

&lt;h1&gt;Output&lt;/h1&gt;

&lt;p&gt;In Ruby it is possible to output information to the console/terminal.&lt;/p&gt;

&lt;p&gt;For example let's send our name variable to the console&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike Taylor'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The puts method will take any value we give him and print it to the console...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mike Taylor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Others example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike Taylor'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Hello World'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Hello'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hello World
Hello
Mike Taylor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see we can send multiple value to puts method      and he will display all of them.&lt;/p&gt;

&lt;p&gt;Another Ruby method very similar to puts is the method print. Print can display something to the console but will not send the line break after each print. Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike Taylor'&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Hello '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hello Mike Taylor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;Input&lt;/h1&gt;

&lt;p&gt;How about getting info from user. In Ruby we use the method gets to do just that&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Enter user name: '&lt;/span&gt;
&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;gets&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The console will then wait for user input:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Enter user name: _
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The gets method will return everything you type plus a line break characters. If you don't want to read the line break characters use the chomp method to remove that last character&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print 'Enter user name: '
name = gets.chomp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;Exercice&lt;/h1&gt;

&lt;p&gt;Create a little program that ask for user name and user age and save the result in name and age variable. &lt;/p&gt;

&lt;p&gt;Then display name and age variable in the console&lt;/p&gt;

&lt;p&gt;Solution&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Enter user name: '&lt;/span&gt;
&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;gets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chomp&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Enter user age: '&lt;/span&gt;
&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;gets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chomp&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'The user name is: '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'The user age is: '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;That's it for today. The journey just started, stay tune for the next post very soon. (later today or tomorrow)&lt;/p&gt;

&lt;p&gt;If you have any comments or questions please do so here or send me a message on twitter. &lt;/p&gt;

&lt;p&gt;I am new on twitter so if you want to make me happy&lt;br&gt;
Follow me: &lt;a href="https://twitter.com/justericchapman?ref_src=twsrc%5Etfw"&gt;Follow @justericchapman&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to Communicate between Components in Vue.js</title>
      <author>Sanchithasr</author>
      <pubDate>Sat, 24 Apr 2021 15:06:27 +0000</pubDate>
      <link>https://dev.to/sanchithasr/how-to-communicate-between-components-in-vue-js-kjc</link>
      <guid>https://dev.to/sanchithasr/how-to-communicate-between-components-in-vue-js-kjc</guid>
      <description>&lt;p&gt;Every framework has its own unique architecture but they have one thing in common. The entire page is divided into small components where the component has its own functionalities and UI. And sometimes, we need a way to communicate between these components.&lt;/p&gt;

&lt;p&gt;Generally, we use Vuex &lt;em&gt;(State management tool)&lt;/em&gt; to store the data and use it across components. But sometimes, we need a way to send the data from one component to another without using the Vuex store. In this article, we will learn the possible ways of achieving that.&lt;/p&gt;

&lt;p&gt;There are &lt;em&gt;five&lt;/em&gt; ways to send the data from one component to another:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-using-props-parent-to-child-communication"&gt;
  &lt;/a&gt;
  1. Using Props (Parent to Child Communication)
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#2-using-events-child-to-parent-communication"&gt;
  &lt;/a&gt;
  2. Using Events (Child to Parent Communication)
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#3-using-event-bus-communication-between-any-components"&gt;
  &lt;/a&gt;
  3. Using Event Bus (Communication between any components)
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#4-using-provideinject-parent-to-child-communication"&gt;
  &lt;/a&gt;
  4. Using provide/inject (Parent to Child Communication)
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#5-using-thisrefs-parent-to-child-communication"&gt;
  &lt;/a&gt;
  5. Using this.$refs (Parent to Child Communication)
&lt;/h4&gt;

&lt;p&gt;Let’s study them one by one and see how they work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-using-props-communication-from-parent-to-child-"&gt;
  &lt;/a&gt;
  1) Using Props (Communication from parent to child )
&lt;/h2&gt;

&lt;p&gt;One can send data from parent-to-child components using props. In the below example, we are sending the data from &lt;code&gt;parent. vue&lt;/code&gt; to &lt;code&gt;child. vue&lt;/code&gt; via the prop &lt;code&gt;message&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xlebk3Pw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AvkMroMXITfeTT4-Sj4xhIw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xlebk3Pw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AvkMroMXITfeTT4-Sj4xhIw.png" alt=""&gt;&lt;/a&gt;Child Component&lt;/p&gt;

&lt;p&gt;We have created a component that prints the &lt;code&gt;message&lt;/code&gt;. We have defined a variable in props called &lt;code&gt;message&lt;/code&gt; which we are rendering in the template.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ttzRkPbA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2A2Yruesi8xx3n3ia-rASyng.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ttzRkPbA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2A2Yruesi8xx3n3ia-rASyng.png" alt=""&gt;&lt;/a&gt;Parent Component&lt;/p&gt;

&lt;p&gt;While we nest the child component inside our parent component, we are binding the data we want to send by using the directive &lt;code&gt;v-bind&lt;/code&gt; and sending the data using props.&lt;/p&gt;

&lt;p&gt;Any time the parent changes the prop, the new value is sent to the child and rerendered.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-using-events-communication-from-child-to-parent-"&gt;
  &lt;/a&gt;
  2) Using Events (Communication from child to parent )
&lt;/h2&gt;

&lt;p&gt;This is similar to props but we are sending the data from child to parent and instead of using v-bind, we are using directive v-on for capturing.&lt;/p&gt;

&lt;p&gt;We have defined a variable in the child component which contains our message. We are sending the same to the parent component by firing an event from the child component.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;this.$emit(’name-of-the-event’, args1, args2, args3,...)&lt;/code&gt; is a way to fire the event. This is captured on the parent component using directive &lt;code&gt;v-on&lt;/code&gt;. Note that one should use the same event name they sent while capturing and can retrieve the arguments.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kcCVo4jo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AHLNvfMV9rDlRfKvCZbfOUw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kcCVo4jo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AHLNvfMV9rDlRfKvCZbfOUw.png" alt=""&gt;&lt;/a&gt;Child Component&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BMRIHyiP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2A3UbkRaQ48uF5F27euSZawQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BMRIHyiP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2A3UbkRaQ48uF5F27euSZawQ.png" alt=""&gt;&lt;/a&gt;Parent Component&lt;/p&gt;

&lt;p&gt;Any time the message in the child component changes, the new value is sent to the parent and rerendered.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-using-event-bus-communication-between-any-two-components"&gt;
  &lt;/a&gt;
  3) Using Event Bus (Communication between any two components)
&lt;/h2&gt;

&lt;p&gt;An event bus is used to communicate between any two components &lt;em&gt;(Components need not have a parent-child relationship)&lt;/em&gt;. This can be used when one needs to manually listen for events on a component instance.&lt;/p&gt;

&lt;p&gt;You can just send the data from one component using &lt;code&gt;this.$root.$emit(’name-of-emitter’, args1, args2, ...)&lt;/code&gt; and is captured using the same name like this &lt;code&gt;this.$root.$on(’name-of-emitter’, args1, args2, ...)&lt;/code&gt; in the other component.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--khRUeBdO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AGrGTB5Iqoc4kvXuqrd6ShQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--khRUeBdO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AGrGTB5Iqoc4kvXuqrd6ShQ.png" alt=""&gt;&lt;/a&gt;Child Component&lt;/p&gt;

&lt;p&gt;Note that we are using &lt;code&gt;mounted() {}&lt;/code&gt; to capture the event in &lt;em&gt;component-two. vue&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mc8FQVAx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2ADi37udfhpWNgT5F8L_o4UA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mc8FQVAx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2ADi37udfhpWNgT5F8L_o4UA.png" alt=""&gt;&lt;/a&gt;Parent Component&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-using-provideinject-parent-to-child-communication"&gt;
  &lt;/a&gt;
  4) Using Provide/Inject (Parent to child communication)
&lt;/h2&gt;

&lt;p&gt;This is used in the structure where you have deeply nested components and you only need something from the parent component in the deeply nested child.&lt;/p&gt;

&lt;p&gt;In that case, you still need to pass the prop down the whole component chain which might be annoying. For such cases, we can use the provide and inject pair.&lt;/p&gt;

&lt;p&gt;Although the example we have here is very simple, we are still sending a message from parent to child and hence it works.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AQMtj7-T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2A5GcGIjGnAigB29rEB4GQ9g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AQMtj7-T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2A5GcGIjGnAigB29rEB4GQ9g.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are using our parent component as a provider, sending the data, and injecting it into the child component using the same name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zGh5l3Ga--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2ARmHAwR9g-Tx2Y7xB0dv3Rg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zGh5l3Ga--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2ARmHAwR9g-Tx2Y7xB0dv3Rg.png" alt=""&gt;&lt;/a&gt;Child Component&lt;/p&gt;

&lt;p&gt;Parent components can serve as dependency providers for all its children, regardless of how deep the component hierarchy is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-using-thisrefs-parent-to-child-communication"&gt;
  &lt;/a&gt;
  5) Using this.$refs (Parent to Child Communication)
&lt;/h2&gt;

&lt;p&gt;This method is the least preferred way of making the communication but it is one of the options available.&lt;br&gt;
Despite the other methods, sometimes you might still need to directly access a child component. To achieve this you can assign a reference ID to the child component using the &lt;code&gt;ref&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3VWnFuFe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AV1KCRVj4sfbjmf3Cd8aJfA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3VWnFuFe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AV1KCRVj4sfbjmf3Cd8aJfA.png" alt=""&gt;&lt;/a&gt;Parent Component&lt;/p&gt;

&lt;p&gt;Here we are referencing the child component as &lt;em&gt;‘child’&lt;/em&gt; (&lt;code&gt;ref= child&lt;/code&gt;) (reference ID) and then capturing it using &lt;code&gt;this.$refs.child&lt;/code&gt;. We can access anything related to the child component in this way.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AKSRRex9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2All5GqlQ51uZ2xonYqffTgQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AKSRRex9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2All5GqlQ51uZ2xonYqffTgQ.png" alt=""&gt;&lt;/a&gt;ChildComponent&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zT-N5zYE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1500/1%2ApnRPnsSSv895CmErpaTBCw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zT-N5zYE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1500/1%2ApnRPnsSSv895CmErpaTBCw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;And that sums it up. Comment below if you know other ways of communication between components in Vue.js. Thank you.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>intermediate</category>
    </item>
    <item>
      <title>Why You Should Use TypeScript Over JavaScript in 2021 | A Simple Example</title>
      <author>Danny Adams</author>
      <pubDate>Sat, 24 Apr 2021 14:57:10 +0000</pubDate>
      <link>https://dev.to/doabledanny/why-you-should-use-typescript-over-javascript-in-2021-a-simple-example-3pfo</link>
      <guid>https://dev.to/doabledanny/why-you-should-use-typescript-over-javascript-in-2021-a-simple-example-3pfo</guid>
      <description>&lt;p&gt;This article was originally posted on &lt;a href="https://www.doabledanny.com/why-typescript-over-javascript"&gt;DoableDanny.com&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;I was recently making a meditation app called “&lt;a href="https://play.google.com/store/apps/details?id=com.doabledanny.atomicmeditation"&gt;Atomic Meditation&lt;/a&gt;” with React Native, and finally saw a strong reason to begin learning and using TypeScript over JavaScript for medium to larger size projects.&lt;/p&gt;

&lt;p&gt;Before we start, I should explain that if you’ve never used React Native before, you can still follow this article. I’ll explain what’s going on as we go. Also, if you’ve used ReactJS, React Native, for the purpose of this article, is identical!&lt;/p&gt;

&lt;p&gt;Let me show you how regular old JavaScript got me into a pickle...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-1-all-going-well"&gt;
  &lt;/a&gt;
  Day 1 – All Going Well
&lt;/h2&gt;

&lt;p&gt;In React Native there is something called Async Storage, which very simply allows you to store data permanently in your user’s mobile phone.&lt;/p&gt;

&lt;p&gt;e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;AsyncStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@key&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Async Storage only allows you to store strings, so to save a number, you would have to first convert it to a string.&lt;/p&gt;

&lt;p&gt;Below, we are using the ReactJS useState hook to declare a variable called sessionCount and set its initial state to 0, and a setSessionCount function that allows us to alter the state of sessionCount.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sessionCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSessionCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s say that the user completes a meditation session (recall that I was making a meditation app), and &lt;code&gt;sessionCount&lt;/code&gt; is keeping track of the total number of sessions that our user (who I will now refer to as Anxious Andy) has completed. We now need to add 1 to &lt;code&gt;sessionCount&lt;/code&gt;. So, &lt;code&gt;setSessionCount&lt;/code&gt; is called and 1 is added to the previous value. We then have to save this data as a string.&lt;/p&gt;

&lt;p&gt;We shall do all of this in a function, let’s call it &lt;code&gt;saveData&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// User completes a meditation…&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;saveData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setSessionCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newSessionCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="nx"&gt;AsyncStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@my_number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newSessionCount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;newSessionCount&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Everything goes well and A-little-less-anxious Andy calmly closes the app with a heightened sense of well-being.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-2-the-calm-before-the-storm"&gt;
  &lt;/a&gt;
  Day 2 – The Calm Before the Storm
&lt;/h2&gt;

&lt;p&gt;Anxious Andy retrieves a notification, reminding him it’s meditation time in 5 minutes. But he’s eager, so he goes straight to his room, pulls out his desk chair, sits comfortably (but alert), and opens up his &lt;a href="https://play.google.com/store/apps/details?id=com.doabledanny.atomicmeditation"&gt;Atomic Meditation app&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, when the app loads, Andy’s session data needs to be fetched from storage. In React, the useEffect hook allows us to execute a callback function when the component has mounted.&lt;/p&gt;

&lt;p&gt;In the callback function, we asynchronously get the data from storage and then setSessionCount to the data we get back (“1”).&lt;/p&gt;

&lt;p&gt;e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;AsyncStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@my_number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setSessionCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now Anxious Andy completes another meditation successfully, so 1 needs to be added to sessionCount to keep track of the total number of sessions that he’s completed.&lt;/p&gt;

&lt;p&gt;This new value is also saved permanently to storage – just as before.&lt;/p&gt;

&lt;p&gt;e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// User completes a meditation...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;saveData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setSessionCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newSessionCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="nx"&gt;AsyncStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@my_number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newSessionCount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;newSessionCount&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The user has now completed 2 meditation sessions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-3-the-storm"&gt;
  &lt;/a&gt;
  Day 3 – The Storm
&lt;/h2&gt;

&lt;p&gt;Anxious-no-more Andy pulls out his phone and opens the app for his 3rd straight session (he’s doing well).&lt;/p&gt;

&lt;p&gt;He wants to find out how well he’s doing, so he goes to the Stats Screen. “Ohh, lots of juicy statistics”, he murmurs to himself. “This app is awesome!”&lt;/p&gt;

&lt;p&gt;But his love for the app diminishes quickly…&lt;/p&gt;

&lt;p&gt;The app tells him he’s completed 11 sessions. He’s only completed 2!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8h6tju1W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4xzkquadfa24acjgd3qi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8h6tju1W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4xzkquadfa24acjgd3qi.png" alt="Stats screen with wrong value"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-went-wrong"&gt;
  &lt;/a&gt;
  What went wrong
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;In day 1&lt;/strong&gt;, we initially set &lt;code&gt;sessionCount&lt;/code&gt; to 0 (a number).&lt;/p&gt;

&lt;p&gt;The user completed a meditation, so we added 1. We then converted it to a string, “1”, and saved it to async storage (recall async storage only accepts strings).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In day 2&lt;/strong&gt;, we retrieved the session count from async storage and &lt;code&gt;setSessionCount&lt;/code&gt; to the value we received, “1” (a string).&lt;/p&gt;

&lt;p&gt;The user completed a meditation, so we added 1 to &lt;code&gt;sessionCount&lt;/code&gt;. But “1” + 1 in JavaScript is “11”, not 2.&lt;/p&gt;

&lt;p&gt;We forgot to convert the data we got back from storage back into an integer.&lt;/p&gt;

&lt;p&gt;The worst thing is that our program flagged no errors, this bug went freely unnoticed and caused us problems down the road. It can be difficult to find the source of problems like this!&lt;/p&gt;

&lt;p&gt;JavaScript allowed us to freely and unknowingly change the data type of a variable throughout our program.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution-typescript"&gt;
  &lt;/a&gt;
  The Solution – TypeScript
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-is-typescript"&gt;
  &lt;/a&gt;
  What is TypeScript?
&lt;/h3&gt;

&lt;p&gt;If you’re not familiar with TypeScript, basically it’s JavaScript with a few extra superpowers. Variables cannot change types – if they do, TypeScript will throw an error.&lt;/p&gt;

&lt;p&gt;Browsers can’t understand TypeScript, so all of your TypeScript files are compiled down in JavaScript files (or a single “bundle” JS file).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-use-typescript-with-react-native"&gt;
  &lt;/a&gt;
  How to use TypeScript with React Native
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://reactnative.dev/docs/typescript"&gt;Adding TypeScript to an existing React Native project&lt;/a&gt; is easy – an npm install and a couple of config files and it’s done!&lt;/p&gt;

&lt;p&gt;Now all I have to do is change my file from App.js to App.tsx to get automatic type checking.&lt;/p&gt;

&lt;p&gt;As soon as the file extension is changed, TypeScript throws a wobbler (English slang for tantrum) telling me that the &lt;code&gt;sessionCount&lt;/code&gt; variable which I initialised to a type of number is being assigned to a string:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jvMt4JPF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8goerv51uqnvzpx2s0zs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jvMt4JPF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8goerv51uqnvzpx2s0zs.png" alt="TypeScript error"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I now have to perform a check to make sure the data is not null, and then convert that data from a string to a number (using parseInt) to get rid of the error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;AsyncStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@my_number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setSessionCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;TypeScript forces us to write better, more robust code. Awesome!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#best-resource-to-learn-typescript"&gt;
  &lt;/a&gt;
  Best resource to learn TypeScript
&lt;/h3&gt;

&lt;p&gt;I learned TypeScript by following &lt;a href="https://www.youtube.com/watch?v=2pZmKW9-I_k&amp;amp;list=PL4cUxeGkcC9gUgr39Q_yD6v-bSyMwKPUI&amp;amp;ab_channel=TheNetNinja"&gt;The Net Ninja’s TypeScript series&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If I need to learn a new language or framework, my first call-to-action is to check if the Net Ninja has done a series on it. He's superb!&lt;/p&gt;

&lt;p&gt;Also, &lt;a href="https://www.typescriptlang.org/"&gt;the official TypeScript docs&lt;/a&gt; are pretty good.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We can now sleep a little easier knowing that our variables can’t freely change type throughout our program. Thanks TypeScript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; JavaScript is still great for smaller projects. But for medium to large projects, or small projects that have the potential to scale, TypeScript is probably a worthy investment. And if you know JavaScript, learning TypeScript isn’t difficult.&lt;/p&gt;

&lt;p&gt;If you enjoyed this article, then you can say thanks by checking out &lt;a href="https://play.google.com/store/apps/details?id=com.doabledanny.atomicmeditation"&gt;my Atomic Meditation app&lt;/a&gt;. Meditation is a great way to quieten the mind and cut away anxiety. The app is inspired by the bestselling book Atomic Habits, and is based on doing at least 2 minutes of meditation every day to develop a daily meditation habit. Please leave me a review if you enjoy it, it helps!&lt;/p&gt;

&lt;p&gt;Have a great day :)&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>react</category>
      <category>reactnative</category>
    </item>
    <item>
      <title>50 Projects in 50 Days, 3/5 there! 🌻50</title>
      <author>Chiara Mapelli</author>
      <pubDate>Sat, 24 Apr 2021 14:53:54 +0000</pubDate>
      <link>https://dev.to/chiaraintech/50-projects-in-50-days-3-5-there-50-5bnl</link>
      <guid>https://dev.to/chiaraintech/50-projects-in-50-days-3-5-there-50-5bnl</guid>
      <description>&lt;p&gt;Back at it, back to my projects. I am finally getting the hang of the majority of stuff, especially DOM manipulation, which is getting easier and easier, but also more complex...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;21st Project: Drag and Drop&lt;/strong&gt;&lt;br&gt;
The project gave me a basic understanding of the drag and drop functionality works.&lt;br&gt;
I have been exploring the HTML Drag and Drop API, and these events specifically: &lt;strong&gt;dragover&lt;/strong&gt;, &lt;strong&gt;dragenter&lt;/strong&gt;, &lt;strong&gt;dragleave&lt;/strong&gt; and &lt;strong&gt;drop&lt;/strong&gt;. In the HTML I identified which elements are draggable, and to do so I used the 'draggable' attribute and I set it to true.&lt;br&gt;
I just need to remember next time I do something similar, to ensure that I add preventDefault() to prevent and automatic rendering. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4vSqapv---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w2y0yade637iemmus1pb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4vSqapv---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w2y0yade637iemmus1pb.png" alt="Alt Text"&gt;&lt;/a&gt; &lt;em&gt;All the events I used to make this functionality.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;22nd Project: Drawing App&lt;/strong&gt;&lt;br&gt;
This project was a fun one, I got to learn about the Canvas API which is one of those things that I just kept putting off for no apparent reason (?!). In fact, it is quite enjoyable once you get the hang of it. In the Javascript code, two main methods are used to start with: the getElementById() method to get the reference of the  HTML element, and then the getContext() method to get the element's context (that is where the canvas will be rendered onto).&lt;/p&gt;

&lt;p&gt;The methods that I have used and studied are mainly offsetX, offsetY. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y29ZJTVN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hiovqk2ocevgvzq2a1st.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y29ZJTVN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hiovqk2ocevgvzq2a1st.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;I used mouse events to manipulate the canvas HTML element.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;23rd Project: Kinetic CSS Loader&lt;/strong&gt;&lt;br&gt;
Rather a short but mesmerising one, this one here. The main events happen in the CSS styling file, where I manipulate the element's class by using @keyframes and assigning variables so that the elements I need rotate as soon as they reach a certain degree. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SY6VvIkR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4xgmkevojonlbxm0nrmd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SY6VvIkR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4xgmkevojonlbxm0nrmd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;I applied an animation to the kinetic class, and then I used @keyframes to manage when to apply it to it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;24th Project: Content Placeholder&lt;/strong&gt;&lt;br&gt;
A new CSS property has been discovered! &lt;strong&gt;object-fit&lt;/strong&gt;. According to documentation, this property sets how the content of a replaced element should be resized to fit its container. In my case I used cover. It reminds me very much of &lt;strong&gt;background-size&lt;/strong&gt;, and it's actually quite its equivalent, though with object-fit we are targeting images instead.&lt;br&gt;
I am still amazed by &lt;strong&gt;linear-gradient&lt;/strong&gt; as a property, especially when animations come into play! I used keyframes to manage the animation at different degrees in its space.&lt;br&gt;
Finally, I found out about this cool &lt;strong&gt;Random User Generator API&lt;/strong&gt; (!!!!), which makes you put a random User profile should you need some quick dummy data. A bit like the good old Lorem, but at least you can understand what's happening here haha. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6P-z2pXB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ezczjq2albbw90tttwlc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6P-z2pXB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ezczjq2albbw90tttwlc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;The API in action.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;25th Project: Sticky Navbar&lt;/strong&gt;&lt;br&gt;
Back to something which used to be simple enough for me to be thought of as 'basic', which is now giving me a whole lotta different vibes. Apart from giving to the navbar a position of &lt;em&gt;fixed&lt;/em&gt;, I also manipulated the JavaScript so that the style was changed according to where in the window the nav bar found itself. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---jahxDZz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jx7s9dmusfcbl238cnlf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---jahxDZz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jx7s9dmusfcbl238cnlf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;26th Project: Vertical Slider&lt;/strong&gt;&lt;br&gt;
A lot of quirky calculations here and jumping from indexes to integers. I learnt that the &lt;em&gt;Element.clientHeight&lt;/em&gt; read-only property is zero for elements with no CSS or inline layout boxes; otherwise, it's the inner height of an element in pixels. It includes padding but excludes borders, margins, and horizontal scrollbars (if present) (thanks docs!).&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_PGkTGOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxyoo187qfb6m4y6sz8m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_PGkTGOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxyoo187qfb6m4y6sz8m.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;27th Project: Toast Notification&lt;/strong&gt;&lt;br&gt;
When I first started at my first job, I laughed when I saw a file called toast.js! Like, what the hell does it even mean? But I quickly learnt that it's nothing but a pop-up notification which comes up when some event gets triggered. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6rVCc3Gk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ofmd9vnxs2mc5lk1y04y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6rVCc3Gk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ofmd9vnxs2mc5lk1y04y.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;The createNotification method creates a div of class 'toast' and it makes it appear within the div/container of class 'toasts'. It then sets an interval of 3 seconds before it removes it from the DOM (i.e. it makes it disappear).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;28th Project: GitHub Profiles&lt;/strong&gt;&lt;br&gt;
A few things of notice here in this project:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The use of Axios instead of Fetch API (for better error handling, no need to parse the response into JSON format);&lt;/li&gt;
&lt;li&gt;The destructuring of res.data into only what I need, in this case {data} and concatenating strings to go to whatever link I need;&lt;/li&gt;
&lt;li&gt;Inserting stuff into the DOM using template literals from JS;&lt;/li&gt;
&lt;li&gt;Using try/catch refresh.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--teLTumuV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gr8wzlur7xnnyl6i5fkb.png" alt="Alt Text"&gt;&lt;em&gt;The function getUser accepts the username as a parameter and then queries the GitHub API by using the axis library. As you can see, there is no need to manually parse the JSON response after the data has been fetched as the format is already in place.&lt;/em&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;29th Project: Double-Heart Click&lt;/strong&gt;&lt;br&gt;
A very Insta-worth project, this one! An especially good refresher in terms of coordinates, great illustration here: &lt;a href="https://images1.programmersought.com/197/16/16ee7586e072b18147a89cc2a101a44d.png"&gt;https://images1.programmersought.com/197/16/16ee7586e072b18147a89cc2a101a44d.png&lt;/a&gt; to understand the difference between pageX and clientX, and between offsetLeft and offsetTop;&lt;br&gt;
and an interesting way to recreate the 'doubleclick' event. Instead of adding an actual ready-made'doubleclick' event, we used the timestamp to figure out whether the second click in a row was quick enough for it to be considered effectively a double click.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CSWUZ46Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvmwbnbl7iki4h2uvzcm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CSWUZ46Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvmwbnbl7iki4h2uvzcm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;I append the heart image/icon and then I remove it quickly after from the DOM (after 1 second).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;30th Project: Auto Text Effect&lt;/strong&gt;&lt;br&gt;
Very nice and useful small project when it comes to animated websites, as it deals with animating a title (e.g. for a hero banner or similar). It took me a while to understand the maths behind this (cough cough haha) but eventually it makes sense! I create an input which allows a number between 1 and 5, and that input will regulate how fast the title auto-complete itself speed-wise. The speed is managed by a setTimeout which takes as an argument the actual writeText function and uses as an interval the speed.&lt;/p&gt;

&lt;p&gt;I didn't know that I could simply add an event listener to an input element with the name of 'input', and then as long as I have the number attribute set to 'number' in the HTML code, I can obtain the number still using the usual e.target.value.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vH8KuYO8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w2qw2w49dv5reiitcs9z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vH8KuYO8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w2qw2w49dv5reiitcs9z.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;I manage how many letters and how fast the sentence will be written by setting a timeout which will take the function writeText and will proceed to type in the speed variable's terms.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Creating a SaaS in 2021 🚀💰</title>
      <author>Tony Lea</author>
      <pubDate>Sat, 24 Apr 2021 14:43:30 +0000</pubDate>
      <link>https://dev.to/tnylea/creating-a-saas-in-2021-3am1</link>
      <guid>https://dev.to/tnylea/creating-a-saas-in-2021-3am1</guid>
      <description>&lt;p&gt;Many developers have dreams of creating their own profitable Software as a Service. Mainly because it provides you with the freedom to work on the things you are super passionate about. It's also a good feeling to make money working on your own stuff.&lt;/p&gt;

&lt;p&gt;Each step you take toward building your SaaS will eventually lead to a successful product as long as you keep pushing forward. Eventually, you'll be making money to continue improving your product and dominating your niche 😉.&lt;/p&gt;

&lt;p&gt;In this post, I want to highlight &lt;strong&gt;five&lt;/strong&gt; actionable steps you can take towards building a SaaS application today!&lt;/p&gt;

&lt;p&gt;Let's dive into it. 😉 &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-craft-your-idea"&gt;
  &lt;/a&gt;
  1. Craft Your Idea 💡
&lt;/h1&gt;

&lt;p&gt;Coming up with an Idea for your SaaS is pretty fun 😃. Here are a few ways you can find an idea if you do not have one.&lt;/p&gt;

&lt;p&gt;One of the best ways to find an idea is by solving your own problem. Is there a repetitive task that you constantly find yourself doing? Many other people may be doing the same repetitive task, so if you can find a way to automate this and save people time, you may be very close to striking gold.&lt;/p&gt;

&lt;p&gt;Next, if there is a service with many customers yet you feel like many of their services are too complex, try creating a simplified version of that service, and you will start creating some buzz 🐝.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Need help with inspiration?&lt;/em&gt; Visit a few of these resources below for inspiration on finding an idea for your SAAS.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dribbble.com"&gt;Dribbble&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://producthunt.com"&gt;ProductHunt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://indiehackers.com"&gt;IndieHackers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://land-book.com"&gt;LandBook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.designspiration.com"&gt;DesignInspiration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#2-design-a-simple-logo"&gt;
  &lt;/a&gt;
  2. Design a simple logo 🧑‍🎨
&lt;/h1&gt;

&lt;p&gt;Logo design is pretty simple, and the logo you come up with in the early stages may change down the road. Don't spend too much time on this step ⏳.&lt;/p&gt;

&lt;p&gt;Here's a good thing to keep in mind when designing your logo. &lt;strong&gt;SIMPLICITY&lt;/strong&gt;. That's right! Keeping it simple and clean will help your brand looking memorable and professional. &lt;/p&gt;

&lt;p&gt;Sometimes all you need is a simple &lt;strong&gt;bold letter&lt;/strong&gt;. Facebook has the bold letter &lt;code&gt;f&lt;/code&gt;. ProductHunt has a simple letter &lt;code&gt;p&lt;/code&gt; inside a circle. Simplicity is key 🔑.&lt;/p&gt;

&lt;p&gt;You may also find it helpful to check out &lt;a href="https://thenounproject.com"&gt;TheNounProject&lt;/a&gt;. Slap a simple icon next to your SaaS name, and BOOM 💥 , you have yourself a simple and professional logo.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-find-your-domain"&gt;
  &lt;/a&gt;
  3. Find your domain 🔡
&lt;/h1&gt;

&lt;p&gt;Finding the right domain may seem difficult, but it's not. If you are having trouble finding a domain, here are some tricks that you may want to follow.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Try using some new TLD's such as &lt;code&gt;.co&lt;/code&gt;, &lt;code&gt;.so&lt;/code&gt;, &lt;code&gt;.io&lt;/code&gt;, &lt;code&gt;.dev&lt;/code&gt;, &lt;code&gt;.app&lt;/code&gt;, and many others.&lt;/li&gt;
&lt;li&gt;Add a filler word to the beginning or end. Try adding words like &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;use&lt;/code&gt;, &lt;code&gt;hello&lt;/code&gt; to the beginning of your domain. Try adding words like &lt;code&gt;now&lt;/code&gt;, &lt;code&gt;hq&lt;/code&gt;, &lt;code&gt;app&lt;/code&gt; to the end of your domain.&lt;/li&gt;
&lt;li&gt;Try to make it simple and memorable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Find something you are happy with and commit to it. If your app starts making millions, you can buy a better domain later. This happened with Basecamp; their name used to be basecamphq.com, and after they purchased basecamp.com. Clicky.com used to be GetClicky.com, and there are so many others that have done the same.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-build-your-saas-with-wave"&gt;
  &lt;/a&gt;
  4. Build your SaaS with Wave ⚒️
&lt;/h1&gt;

&lt;p&gt;When you are ready to start building your SaaS application and are familiar with Laravel, you may want to reach for a SaaS starter kit such as &lt;a href="https://devdojo.com/wave"&gt;Wave&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/PS-31xkcv8M"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Wave has all the main building blocks you will need for your SaaS, including Authentication, Billing, Plans, User Profiles, and so much more. Be sure to check out the &lt;a href="https://devdojo.com/wave/videos"&gt;official videos page&lt;/a&gt; to learn more about how to use Wave.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/thedevdojo/wave"&gt;Wave is 100% open source&lt;/a&gt; and free to use. If you would like to support the project and gain access to a few premium tools, you may want to consider upgrading to a &lt;a href="https://devdojo.com/pro"&gt;Pro Account&lt;/a&gt; 😉.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-design-your-saas-with-tails"&gt;
  &lt;/a&gt;
  5. Design your SaaS with Tails 🎨
&lt;/h1&gt;

&lt;p&gt;Designing your SaaS is easier than ever before with all the cool design tools available.&lt;/p&gt;

&lt;p&gt;If you are using &lt;a href="https://devdojo.com/wave"&gt;Wave&lt;/a&gt; to build your SaaS application, then you'll be able to design with ease using &lt;a href="https://tailwindcss.com"&gt;TailwindCSS&lt;/a&gt;. There is also a premium tool you can gain access to with a Pro account, called &lt;a href="https://devdojo.com/tails"&gt;Tails&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devdojo.com/tails"&gt;Tails is a Drag and Drop page builder&lt;/a&gt; that can help you craft the landing page of your dreams. I've created a quick video about how you can make/design your own SaaS using Tails in under 10 minutes. Check out the video below 🍿:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/w_rSMEeqhK0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Building your own SaaS is a Journey on its own. There can be times when it seems challenging, and you feel like you're not making much traction, but I guarantee that if you stay persistent, you will always end up on top.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You will never go down if you never give up.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Learning is all part of the process of growing a successful SaaS. Here at the DevDojo, we are building tools to help you as you embark on your Journey of SaaS creation. You can get started by using our awesome SaaS starter kit &lt;a href="https://devdojo.com/wave"&gt;Wave&lt;/a&gt;, and you can design your SaaS by using &lt;a href="https://devdojo.com/tails"&gt;Tails&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You have the potential to create amazing things. So, be sure to keep building, keep creating, and enjoy the Journey. ⛰️&lt;/p&gt;

</description>
      <category>saas</category>
      <category>indiehacker</category>
    </item>
    <item>
      <title>How To Pass AI-900 Azure AI Fundamentals</title>
      <author>omniasalah276</author>
      <pubDate>Sat, 24 Apr 2021 14:38:51 +0000</pubDate>
      <link>https://dev.to/omniasalah276/how-to-pass-ai-900-azure-ai-fundamentals-55n7</link>
      <guid>https://dev.to/omniasalah276/how-to-pass-ai-900-azure-ai-fundamentals-55n7</guid>
      <description>&lt;p&gt;Here is my experience in passing AI-900 Azure, I hope it will be useful.&lt;/p&gt;

&lt;p&gt;I am gonna to talk about the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is AI-900 Test ? &lt;/li&gt;
&lt;li&gt;How to book for the Test ?&lt;/li&gt;
&lt;li&gt;Content of the Test &lt;/li&gt;
&lt;li&gt;Resources I used&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-ai900-azure-microsoft-certification-"&gt;
  &lt;/a&gt;
  What Is AI-900 Azure Microsoft Certification ?
&lt;/h2&gt;

&lt;p&gt;Basically, this certification is designed to go over the fundamentals of machine learning and artificial intelligence in Azure, its good opportunity for both technical and non-technical backgrounds, As you don't need to have data science or software engineering experience but it will be much more helpful if you have some programming knowledge or experience. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-book-for-the-test-"&gt;
  &lt;/a&gt;
  How To Book For The Test ?
&lt;/h2&gt;

&lt;p&gt;you can book for the test &lt;a href="https://docs.microsoft.com/en-us/learn/certifications/exams/ai-900"&gt;here&lt;/a&gt;, till now the exam price is about 99 USD, the exam price varies from country to country, you can check your own.&lt;br&gt;
For me I got a scholarship to take the exam from the Ministry of Communications and Technology here in Egypt. We took the exam in &lt;a href="https://certiport.pearsonvue.com/"&gt;Certiport platform&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#content-of-the-test"&gt;
  &lt;/a&gt;
  Content Of The Test
&lt;/h2&gt;

&lt;p&gt;The AI-900 exam tests knowledge in five focus areas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Describe AI workloads and considerations (15-20%).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Identify features of common AI workloads.&lt;/li&gt;
&lt;li&gt;Identify guiding principles for responsible AI.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Describe fundamental principles of machine learning on Azure (30-35%).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Identify common machine learning types.&lt;/li&gt;
&lt;li&gt;Describe core machine learning concepts.&lt;/li&gt;
&lt;li&gt;Identify core tasks in creating a machine learning solution.&lt;/li&gt;
&lt;li&gt;Describe capabilities of no-code machine learning with Azure Machine Learning studio.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Describe features of computer vision workloads on Azure (15-20%).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Identify common types of computer vision solution.&lt;/li&gt;
&lt;li&gt;Identify Azure tools and services for computer vision tasks.&lt;/li&gt;
&lt;li&gt;Describe features of Natural Language Processing (NLP) 
workloads on Azure (15-20%).&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Describe features of Natural Language Processing (NLP) workloads on&lt;br&gt;
Azure (15-20%)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Identify features of common NLP Workload Scenarios.&lt;/li&gt;
&lt;li&gt;Identify Azure tools and services for NLP workloads.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Describe features of conversational AI workloads on Azure (15-20%).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Identify common use cases for conversational AI.&lt;/li&gt;
&lt;li&gt;Identify Azure services for conversational AI.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more illustration about how they are assessing those topics go &lt;a href="https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE4wGpB"&gt;here&lt;/a&gt;.&lt;br&gt;
Note: Sometimes they update the content of the exam. &lt;/p&gt;

&lt;p&gt;The test contains between 50 to 60 MCQ, T/F, and drag &amp;amp; drop questions and has a 60-minute time limit. The total score is 1000 you should at least score 700 to pass the exam.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources-i-used"&gt;
  &lt;/a&gt;
  Resources I used
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/learn/certifications/exams/ai-900"&gt;Microsoft Learning path&lt;/a&gt;&lt;br&gt;
I used the for steps about how to interact with azure.&lt;br&gt;
I recommend to sign up in &lt;a href="https://azure.microsoft.com/en-us/free/students/"&gt;Azure for Student&lt;/a&gt; to apply those steps.&lt;br&gt;
In general their Learning path is very good and almost covers everything.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://medium.com/bb-tutorials-and-thoughts/200-practice-questions-for-azure-ai-900-fundamentals-exam-e981d28ce91d"&gt;200 Practice Questions For Azure AI-900 Fundamentals Exam&lt;/a&gt;&lt;br&gt;
You can use it to summarize and make sure that you cover all about the theoretical part. For me I loved the way of putting those info in the form of questions and answers, it was very helpful for me and make the process of recall very easy.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Training Exams and examples&lt;br&gt;
I used this &lt;a href="https://www.itexams.com/info/AI-900"&gt;test&lt;/a&gt; and that &lt;a href="https://www.youtube.com/watch?v=fQhgRR_Vtus"&gt;video&lt;/a&gt; for testing myself. &lt;br&gt;
Also you can see a real exam from &lt;a href="https://pilegypt-my.sharepoint.com/personal/nh1_pilegypt_net/_layouts/15/onedrive.aspx?id=%2Fpersonal%2Fnh1%5Fpilegypt%5Fnet%2FDocuments%2FNew%20folder%2FAI%2D900%202%2FAI%2D900%2Emp4&amp;amp;parent=%2Fpersonal%2Fnh1%5Fpilegypt%5Fnet%2FDocuments%2FNew%20folder%2FAI%2D900%202&amp;amp;originalPath=aHR0cHM6Ly9waWxlZ3lwdC1teS5zaGFyZXBvaW50LmNvbS86djovZy9wZXJzb25hbC9uaDFfcGlsZWd5cHRfbmV0L0VZTTNCaTMwdjRCTnUzRjZkNkRBNkE0QnpfY1dRUlA2TkZvc1VoWVhBYUM2WGc%5FcnRpbWU9X0NIcUVpMEgyVWc"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It took me three days for preparing for the Exam. If you study well, you won't have any problem in passing the exam.&lt;br&gt;
Good luck!&lt;/p&gt;

</description>
      <category>azure</category>
      <category>ai</category>
      <category>machinelearning</category>
    </item>
  </channel>
</rss>
