<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>part 4: insertion, search in binary search tree0</title>
      <author>Aya Bouchiha</author>
      <pubDate>Mon, 28 Jun 2021 23:43:41 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/part-4-insertion-search-in-binary-search-tree-4h44</link>
      <guid>https://dev.to/ayabouchiha/part-4-insertion-search-in-binary-search-tree-4h44</guid>
      <description>&lt;p&gt;hi, this is part 4 of the tree data structure we'll explain binary search tree operations with their implementation such as insertion, and search.&lt;br&gt;
In the next post, we will talk about the deletion.&lt;br&gt;
#day_16&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#insertion-in-the-binary-search-tree"&gt;
  &lt;/a&gt;
  Insertion in the binary search tree
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Let's say we want to insert 17 in this binary search tree.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        20
      /    \
    12      23
  /   \    /  \
7     15  21   35
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Since 17 &amp;lt; 20, we will go to the left sub-tree.&lt;/li&gt;
&lt;li&gt;17 &amp;gt; 12, we will go the right.&lt;/li&gt;
&lt;li&gt;17 &amp;gt; 15 and the no more child in the right's why we will go to the right and insert it.
so this binary search tree above will be like this:
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        20
      /     \
    12       23
  /   \     /  \
7     15   21   35
        \
         17
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#the-insert-approach"&gt;
  &lt;/a&gt;
  The insert approach
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;We need to know that the inserted node will be always one of the binary search tree leaves.&lt;/li&gt;
&lt;li&gt;while the root is None(&lt;em&gt;null&lt;/em&gt;) store the previous root in a variable 

&lt;ol&gt;
&lt;li&gt;if the previousRoot is less than the elementToInsert moves to the root of the right sub-tree &lt;code&gt;root = root. right&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;else (&lt;em&gt;that means the previousRoot is greater than or equal the elementToInsert&lt;/em&gt;) move to the root of the left sub-tree &lt;code&gt;root = root. left&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;When the loop break (&lt;em&gt;stop&lt;/em&gt;), the previous root will be:

&lt;ol&gt;
&lt;li&gt;case 1:  &lt;code&gt;previousRoot = None&lt;/code&gt; if the binary search tree is empty. so the previousRoot will be the new Node &lt;code&gt;previousRoot = Node(elementToInsert)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;case 2:  &lt;code&gt;previousRoot &amp;lt; elementToInsert&lt;/code&gt; if the previousRoot is less than the elementToInsert, so the node will be the right child of the previousRoot &lt;code&gt;previousRoot.right = elementToInsert&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;case 3: &lt;code&gt;previousRoot &amp;gt;= elementToInsert&lt;/code&gt; if the previousRoot is greater than or equal the elementToInsert, so the node will be the left child of the previousRoot &lt;code&gt;previousRoot.left = elementToInsert&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#implementation-of-insert-using-python"&gt;
  &lt;/a&gt;
  Implementation of insert using python
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elementToInsert&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# new node
&lt;/span&gt;    &lt;span class="n"&gt;TheNewNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elementToInsert&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;previousRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;previousRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
        &lt;span class="c1"&gt;# if the root's value is less than elementToInsert
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;elementToInsert&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# the root variable will be the root of the right sub-tree
&lt;/span&gt;            &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;
        &lt;span class="c1"&gt;# if the root value is greater than or equal elementToInsert
&lt;/span&gt;        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# the root variable will be the root of the left sub-tree
&lt;/span&gt;            &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;
    &lt;span class="c1"&gt;# if the binary search tree is empty
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;previousRoot&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;previousRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TheNewNode&lt;/span&gt;
    &lt;span class="c1"&gt;# if the previous root value is greater than or equal the elementToInsert
&lt;/span&gt;    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;previousRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;elementToInsert&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# the new node will be its left child
&lt;/span&gt;        &lt;span class="n"&gt;previousRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TheNewNode&lt;/span&gt;
    &lt;span class="c1"&gt;# if the previous root value is less than the elementToInsert
&lt;/span&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
        &lt;span class="c1"&gt;# the new node will be its right child
&lt;/span&gt;        &lt;span class="n"&gt;previousRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TheNewNode&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;TheNewNode&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#search-in-the-binary-search-tree"&gt;
  &lt;/a&gt;
  Search in the binary search tree
&lt;/h2&gt;

&lt;p&gt;We want to search for example the number 21&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        20
      /    \
    12      23
  /   \    /  \
7     15  21   35
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;start from the root and compare its value with the wanted number (20 &amp;lt; 21), so we will go to the right sub-tree and compare its root with the wanted element.&lt;/li&gt;
&lt;li&gt;(23 &amp;gt; 21), that's why we will go to the left sub-tree and compare its root with the wanted element.&lt;/li&gt;
&lt;li&gt;since (21 == 21), will return the node&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#the-search-approach"&gt;
  &lt;/a&gt;
  the search approach
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;compare the root value with the wanted element. 

&lt;ul&gt;
&lt;li&gt;If the root is None (null) &lt;em&gt;that means the element is not found&lt;/em&gt; return False. &lt;/li&gt;
&lt;li&gt;Else If the root is equal to the wanted element return the root.&lt;/li&gt;
&lt;li&gt;Else If the root is greater than it, return the same function with these arguments:(root of the left sub-tree, wanted element)&lt;/li&gt;
&lt;li&gt;Else (that means the root is less than the wanted element)  return the same function with these arguments:(root of the right sub-tree, wanted element)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#implementation-of-the-search-algorithm-in-the-binary-search-tree"&gt;
  &lt;/a&gt;
  implementation of the search algorithm in the binary search tree
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="c1"&gt;# If there are no more nodes.
&lt;/span&gt;    &lt;span class="c1"&gt;# that means the node value will be None(null)
&lt;/span&gt;    &lt;span class="c1"&gt;# that means the wanted element doesn't exist
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# the wanted element is not found so return False
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="c1"&gt;# if the root value is equal to the wanted element
&lt;/span&gt;    &lt;span class="c1"&gt;# that means the wanted element is found
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;wantedElement&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# return the node
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
    &lt;span class="c1"&gt;# if the root value is smaller than  the wanted element
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;wantedElement&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# return the same function with the root of the right sub-tree
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;wantedElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# if the root value is greater than or equal the wanted element
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;wantedElement&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# return the same function with the root of the left sub-tree
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;wantedElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Happy coding! see you next post (&lt;em&gt;we will discuss deletion&lt;/em&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references-and-useful-resources"&gt;
  &lt;/a&gt;
  References and useful resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/insert-a-node-in-binary-search-tree-iteratively/"&gt;https://www.geeksforgeeks.org/insert-a-node-in-binary-search-tree-iteratively/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/binary-search-tree-data-structure/"&gt;https://www.geeksforgeeks.org/binary-search-tree-data-structure/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.javatpoint.com/insertion-in-binary-search-tree"&gt;https://www.javatpoint.com/insertion-in-binary-search-tree&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>algorithms</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Conviction to Code</title>
      <author>commdao</author>
      <pubDate>Mon, 28 Jun 2021 23:40:58 +0000</pubDate>
      <link>https://dev.to/commdao/conviction-to-code-1fph</link>
      <guid>https://dev.to/commdao/conviction-to-code-1fph</guid>
      <description>&lt;p&gt;I reached a &lt;em&gt;great&lt;/em&gt; milestone moment in this coding journey recently. &lt;/p&gt;

&lt;p&gt;For the past month and a half I've tried to buckle down on my routine and study habits. I know it's repeated often (and with good reason) to make your own projects. Don't &lt;em&gt;only&lt;/em&gt; follow along in a tutorial. And I've been trying to stick to that. I've also started writing some of the code with pen and paper, hoping to have it be better ingrained.&lt;/p&gt;

&lt;p&gt;But with coding being so different from most of the things I've done before, progress &lt;em&gt;felt&lt;/em&gt; stagnant still. A little different from imposter syndrome, but I'd get frustrated and just wonder &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;am I really ever going to be able to learn this coding stuff?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And then I remember, this feeling isn't so different at all. &lt;/p&gt;

&lt;p&gt;Well, I didn't come to that realization on my own. &lt;a href="https://youtu.be/vP2MNhC_Igw"&gt;WebDevSimplified has a video about not needing to memorize code.&lt;/a&gt; My mentor introduced a "simplified" function that really intimidating:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4qKN3C28--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11he8l4ltx5cqdz4ifxb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4qKN3C28--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11he8l4ltx5cqdz4ifxb.jpg" alt="Blurred Because Mentor Shame"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But he reminded me that the important thing isn't knowing every single component, and instead, simply being able to think through the process.&lt;/p&gt;

&lt;p&gt;And that's an experience that is very familiar. I had it when learning Japanese (a language very different from Spanish or French). Learning the writing system is a daunting task, but I excelled at speaking because I knew how to think through a conversation. &lt;/p&gt;

&lt;p&gt;I had it when starting my fitness journey. In the beginning, you might not know all the exercises and machines, but you probably have an idea of what you're hoping to work. And that small sense, even if completely misguided, can separate those who are feeling iffy on what they're doing vs. those who absolutely have no idea what they're doing.&lt;/p&gt;

&lt;p&gt;You don't have to know everything. And when you hit that moment where you don't know something-- yeah it can still suck. But knowing that you don't know something in particular, that's still an advantage.&lt;/p&gt;

&lt;p&gt;In fighting games I get overwhelmed by all the options available constantly. &lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PKR6G-FG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1407913151077650434/pu/img/J5iMq13ykrToIY_2.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--cgmpAdeo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1393392228358369282/CQNKDTkT_normal.jpg" alt="Jon Dao profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jon Dao
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/commdao"&gt;@commdao&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Found a &lt;a href="https://twitter.com/hashtag/BBCF"&gt;#BBCF&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/NintendoSwitch"&gt;#NintendoSwitch&lt;/a&gt; ranked match! I get bodied as expected... 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      04:07 AM - 24 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1407913201312833539" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1407913201312833539" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1407913201312833539" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;It's a very pulverizing genre, and it makes total sense why a lot of people would rather play something else. But it's super helpful for those who want to stick with it to know that's part of the process. You can't know all the options when you're new.&lt;/p&gt;

&lt;p&gt;Doing well doesn't even really show you how much you've learned. It's encountering the problem (again and again sometimes), and finding out how to get out of it... that's what it's all about.&lt;/p&gt;

&lt;p&gt;And eventually, all these options that used to feel overwhelming? They're going to feel pretty damn freeing when you can flex them. 💪&lt;/p&gt;




&lt;p&gt;I titled this post the way I did because of the plot from Dragon Zakura. One of the core themes is drawing out the sense of conviction, and I like that word a lot since "sense of belief" and "motivation" have been overtaken by toxic positivity.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2FJjwBv5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/BrA1uuiCIAEymvJ.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--cgmpAdeo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1393392228358369282/CQNKDTkT_normal.jpg" alt="Jon Dao profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jon Dao
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/commdao"&gt;@commdao&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      "On a test, there's always one right answer. If you don't find that right answer, you fail..." &lt;a href="https://twitter.com/hashtag/Quotes"&gt;#Quotes&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/DragonZakura"&gt;#DragonZakura&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      23:37 PM - 25 Jun 2014
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=481944238616494080" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=481944238616494080" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=481944238616494080" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;It's nice to be inspired. It's nice to have reminders for your self-esteem. Yet, those can be fleeting.&lt;/p&gt;

&lt;p&gt;With conviction, it's set. &lt;/p&gt;

&lt;p&gt;For now, after feeling pretty directionless for some time, I know I want to keep coding!  &lt;/p&gt;

</description>
      <category>motivation</category>
      <category>codenewbie</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>EVERYTHING About the Azure Pipelines Scale Set Agents (VMSS)</title>
      <author>Davide 'CoderDave' Benvegnù</author>
      <pubDate>Mon, 28 Jun 2021 23:29:32 +0000</pubDate>
      <link>https://dev.to/n3wt0n/everything-about-the-azure-pipelines-scale-set-agents-vmss-cp2</link>
      <guid>https://dev.to/n3wt0n/everything-about-the-azure-pipelines-scale-set-agents-vmss-cp2</guid>
      <description>&lt;p&gt;Today we are going to cover everything you need to know about the Scale Set Agents in Azure Pipelines, and how to use them to make your builds more elastic and flexible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;As usual, if you are a &lt;strong&gt;visual learner&lt;/strong&gt;, or simply prefer to watch and listen instead of reading, here you have &lt;strong&gt;the video with the whole explanation and demo&lt;/strong&gt;, which to be fair is much &lt;strong&gt;&lt;em&gt;more complete&lt;/em&gt;&lt;/strong&gt; than this post.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/3oILIG4i71g"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/3oILIG4i71g"&gt;Link to the video: https://youtu.be/3oILIG4i71g&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you rather prefer reading, well... let's just continue :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;p&gt;So, Scale Set Agents in Azure Pipelines.&lt;/p&gt;

&lt;p&gt;As the name says those are agents that you can install and run in Azure Virtual Machine Scale Sets, or VMSS.&lt;/p&gt;

&lt;p&gt;As such, they can be scaled horizontally automatically, to make your build faster, more elastic, and eventually more flexible.&lt;/p&gt;

&lt;p&gt;But Dave, I hear you asking, why would I bother to install my self-host agent in VMSS rather than using the Azure DevOps hosted agents instead? Can't I achieve the same flexibility just adding more hosted agents?&lt;/p&gt;

&lt;p&gt;The answers to these questions are not so obvious. Let me explain.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-scale-set-agents"&gt;
  &lt;/a&gt;
  Why Scale Set Agents?
&lt;/h3&gt;

&lt;p&gt;First of all, unlike Microsoft-hosted agents, you have flexibility over the size and the image of the machines on which agents run. When you use the hosted agents in fact, you depend on what Azure DevOps provides for you.&lt;/p&gt;

&lt;p&gt;What if you need more resources, like more CPU power or RAM for the operations you have to perform? Or what if you need to install some software or library in order to build your application?&lt;/p&gt;

&lt;p&gt;On the hosted agents you can't quite do it, can you?&lt;/p&gt;

&lt;p&gt;And apart from that, there may be situations in which even if you are ok with what the hosted agents provide you can use them because of the environment you operate in.&lt;/p&gt;

&lt;p&gt;Perhaps you depend on services or servers that are in a private network and therefore not reachable from internet. Or yet you may want to restrict network connectivity of agent machines and allow them to reach only approved sites.&lt;/p&gt;

&lt;p&gt;In all of these scenarios you could install the normal self-hosted agents and scale them manually. But as we will see in a moment the Scale Set Agents are a much better solution.&lt;/p&gt;

&lt;p&gt;Of course, this is if you are in Azure or you have an Azure Subscription. Let me know in the comment section below if you use other providers like GCP or AWS and would like to see how to scale your agents of those platforms as well.&lt;/p&gt;

&lt;p&gt;Alright, let's see now how to set Scale Set Agents up.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-virtual-machine-scale-set-with-proper-configuration"&gt;
  &lt;/a&gt;
  Create a Virtual Machine Scale Set with Proper Configuration
&lt;/h3&gt;

&lt;p&gt;First thing to do is, of course, to create a VMSS cluster that Pipelines can use.&lt;/p&gt;

&lt;p&gt;The virtual machine scale set must have the Azure's autoscaling disabled so that Azure Pipelines can determine how to perform scaling based on number of incoming pipeline jobs.&lt;/p&gt;

&lt;p&gt;To do it, you can use this script from Azure CLI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;az vmss create &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--name&lt;/span&gt; YOUR_POOL_NAME &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--resource-group&lt;/span&gt; RES_GROUP &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--image&lt;/span&gt; UbuntuLTS &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--vm-sku&lt;/span&gt; Standard_D2_v3 &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--storage-sku&lt;/span&gt; StandardSSD_LRS &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--authentication-type&lt;/span&gt; SSH &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--instance-count&lt;/span&gt; 2 &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--disable-overprovision&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--upgrade-policy-mode&lt;/span&gt; manual &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--single-placement-group&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--platform-fault-domain-count&lt;/span&gt; 1 &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--load-balancer&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To make sure this works properly, remember that &lt;code&gt;--disable-overprovision&lt;/code&gt; and &lt;code&gt;--upgrade-policy-mode manual&lt;/code&gt; are required.&lt;/p&gt;

&lt;p&gt;About &lt;code&gt;--load-balancer ""&lt;/code&gt;, Azure Pipelines doesn't require a load balancer to route jobs to the agents in the scale set agent pool, but configuring a load balancer is one way to get an IP address for your scale set agents that you could use for firewall rules.&lt;/p&gt;

&lt;p&gt;In the example I've created the scale set with a standard image, but most likely you would want to use an image with all the tools you need already installed. Good news, since this is a normal VMSS you can use any image you want.&lt;/p&gt;

&lt;p&gt;And the same is true for updating an image, you can use the usual tools and commands for upgrading your images and when done all the new agents will be created with the new image. Let me know in the comment section below if you want me to create a video to explain how to work with Azure Virtual Machine Scale Set&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-an-agent-pool-for-scale-set-in-azure-devops"&gt;
  &lt;/a&gt;
  Create an Agent Pool for Scale Set in Azure DevOps
&lt;/h3&gt;

&lt;p&gt;Alright, now that we have the Scale Set properly set, it's time to create an Agents Pool in Azure DevOps.&lt;/p&gt;

&lt;p&gt;To do so, just go to the Project (or Organization) settings, then Agent Pools, and then click on "Add Pool"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GyUoHWen--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kxuov76uxmttnsj2a9nw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GyUoHWen--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kxuov76uxmttnsj2a9nw.png" alt="Agent Pool"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In there, select &lt;em&gt;__Azure virtual machine scale set&lt;/em&gt;_ for the pool type. Then select the Azure subscription that contains the scale set, choose &lt;em&gt;Authorize&lt;/em&gt;, and choose the desired virtual machine scale set from that subscription. If you have an existing service connection you can choose that from the list instead of the subscription.&lt;/p&gt;

&lt;p&gt;There are there a number of options you can specify, which will influence how your Scale Set Agents will be scaled in and out. Check &lt;a href="https://youtu.be/3oILIG4i71g?t=316"&gt;this section of the video&lt;/a&gt; for a full explanation of those setting&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To configure a scale set agent pool, you must have either &lt;strong&gt;Owner&lt;/strong&gt; or &lt;strong&gt;User Access Administrator&lt;/strong&gt; permissions on the Azure selected subscription. If you have one of these permissions but get an error when you choose Authorize, it could be due to the fact that your user has only guest permission in the directory, or that it is not authorized to add applications in the directory. Either way, talk to your AAD admin.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Please note that the only service connection currently supported is using ARM with a service principal key. If you try to use an ARM service connection based either on a certificate credential or a Managed Identity, the process will fail with an error like this one:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Invalid Service Endpoint with Id &amp;lt;guid&amp;gt; and Scope &amp;lt;guid&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-an-agent-from-the-scale-set-agent-pool"&gt;
  &lt;/a&gt;
  Use an Agent from the Scale Set Agent Pool
&lt;/h3&gt;

&lt;p&gt;Using a scale set agent pool is similar to any other agent pool. You can use it in classic build, release, or YAML pipelines. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#classic-build-pipelines"&gt;
  &lt;/a&gt;
  Classic Build Pipelines
&lt;/h4&gt;

&lt;p&gt;Just change the pool in the Run options:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uSGwu_3b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nq31hieqhunx3r0mqph3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uSGwu_3b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nq31hieqhunx3r0mqph3.png" alt="Classic Build"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#classic-release-pipelines"&gt;
  &lt;/a&gt;
  Classic Release Pipelines
&lt;/h4&gt;

&lt;p&gt;Change the pool in the Agent options:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S-CQjHEv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8c1a8p3803jqgfzf08cb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S-CQjHEv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8c1a8p3803jqgfzf08cb.png" alt="Classic Release"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#yaml-pipelines"&gt;
  &lt;/a&gt;
  YAML Pipelines
&lt;/h4&gt;

&lt;p&gt;Change the YAML section in the Pipeline, Stage, or Job:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oeTBvDhl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86mxloigkndvdv2y16f5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oeTBvDhl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86mxloigkndvdv2y16f5.png" alt="YAML"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;User permissions, pipeline permissions, approvals, and all other checks work the same way as in any other agent pool.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scaling-in-and-out"&gt;
  &lt;/a&gt;
  Scaling in and out
&lt;/h3&gt;

&lt;p&gt;Ok, last thing I want to talk about is how Azure Pipelines manage the scale set and the agents in it. First, some theory.&lt;/p&gt;

&lt;p&gt;Azure Pipelines samples the state of the agents in the pool and virtual machines in the scale set every 5 minutes. The decision to scale in or out is based on the number of idle agents at that time. Fairly enough, an agent is considered idle if it is online and is not running a job.&lt;/p&gt;

&lt;p&gt;When needed, Azure Pipelines performs a scale out operation if either of the following conditions is satisfied:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The number of idle agents is lower than the number of standby agents you specify&lt;/li&gt;
&lt;li&gt;There are pipeline jobs waiting in the queue and no agents is in the idle state&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If one of these conditions is met, Azure Pipelines grows the number of VMs incrementally.&lt;/p&gt;

&lt;p&gt;Talking about scaling in, instead, Azure Pipelines scales in the agents when the number of idle agents exceeds the standby count for more than 30 minutes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ljc3VYpd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yld9gst5ydc1xg3s23t2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ljc3VYpd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yld9gst5ydc1xg3s23t2.png" alt="Delay"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To see a &lt;strong&gt;Complete Demo&lt;/strong&gt; of scaling agents in and out, check &lt;a href="https://youtu.be/3oILIG4i71g?t=608"&gt;this section of the video&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#limitations"&gt;
  &lt;/a&gt;
  Limitations
&lt;/h3&gt;

&lt;p&gt;At the time of writing, if you create a VMSS using Linux only Ubuntu is supported as OS for the Scale Set Agents. RedHad and Debian are not supported.&lt;/p&gt;

&lt;p&gt;And if you are using Windows 10 client, it does not support running the pipeline agent as a local user and therefore the agent cannot interact with the UI. The agent will run as Local Service instead.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;Let me know in the comments below if you are using or going to use the Scale Set agents in Azure Pipelines and what kind of problem they solve for you.&lt;/p&gt;

&lt;p&gt;You may also want to watch &lt;a href="https://youtu.be/rO-VKProMp8"&gt;this video here&lt;/a&gt;, in which I explain how to containerize your Azure Pipelines Agents for more flexibility.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
🌐 &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/3oILIG4i71g"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>azuredevops</category>
      <category>azure</category>
      <category>devops</category>
      <category>cicd</category>
    </item>
    <item>
      <title>Angular Router: empty paths, named outlets and a fix that came with Angular 11</title>
      <author>Andrei Gatej</author>
      <pubDate>Mon, 28 Jun 2021 21:53:05 +0000</pubDate>
      <link>https://dev.to/this-is-angular/angular-router-empty-paths-named-outlets-and-a-fix-that-came-with-angular-11-1hbl</link>
      <guid>https://dev.to/this-is-angular/angular-router-empty-paths-named-outlets-and-a-fix-that-came-with-angular-11-1hbl</guid>
      <description>&lt;p&gt;In this article, we are going to highlight the importance of a fix that came with the 11th version of Angular Router. We will do so by examining a scenario where the lack of that fix prevents an intuitive solution from working, as well as understanding why the fix in question solves the problem.&lt;br&gt;&lt;br&gt;
The reader doesn't need to have more than a basic knowledge of Angular Router. Although we will make use of some &lt;em&gt;advanced&lt;/em&gt; concepts like &lt;code&gt;UrlTree&lt;/code&gt;, &lt;code&gt;UrlSegmentGroup&lt;/code&gt;, they will be briefly described before being applied.  &lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article has been inspired by &lt;a href="https://stackoverflow.com/questions/68109583/passing-parameters-in-named-outlets-is-not-working/68137662#68137662"&gt;this Stack Overflow question&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Throughout the article we will not be using the example from the aforementioned Stack Overflow question. Instead, it will be a simpler example, so that it can better illustrate the problem we are trying to solve. Before going any further, we must be aware of how Angular Router resolves routes transitions. For that, we'll have to introduce the notion of &lt;code&gt;UrlTree&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#urltree"&gt;
  &lt;/a&gt;
  UrlTree
&lt;/h2&gt;

&lt;p&gt;Given a URL string, it will be converted into an equivalent &lt;code&gt;UrlTree&lt;/code&gt;, which Angular Router will further use to determine whether a configuration exists or not for that route. It can achieve that by traversing the given &lt;code&gt;Routes&lt;/code&gt; configuration array and the &lt;code&gt;UrlTree&lt;/code&gt; simultaneously. This is how the &lt;code&gt;UrlTree&lt;/code&gt; structure looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UrlTree&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cm"&gt;/* ... */&lt;/span&gt;
&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="cm"&gt;/** The root segment group of the URL tree */&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;UrlSegmentGroup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="cm"&gt;/** The query params of the URL */&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;queryParams&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="cm"&gt;/** The fragment of the URL */&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;as you can probably see, it already resembles a URL, since it has properties like &lt;code&gt;queryParams&lt;/code&gt; and &lt;code&gt;fragment&lt;/code&gt;. It looks like only the &lt;strong&gt;segments&lt;/strong&gt; of a URL are missing. For that, there is &lt;code&gt;UrlSegmentGroup&lt;/code&gt;, which looks as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UrlSegmentGroup&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* ... */&lt;/span&gt;
  &lt;span class="nl"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;UrlSegmentGroup&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="cm"&gt;/** The URL segments of this group. See `UrlSegment` for more information */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;segments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;UrlSegment&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="cm"&gt;/** The list of children of this group */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;UrlSegmentGroup&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and with this we can understand why it's called a &lt;code&gt;UrlTree&lt;/code&gt;, because a URL can apparently be seen as a &lt;strong&gt;tree of segments&lt;/strong&gt;. Now it comes the genuine question: why would you need a tree-like structure to represent the segments of a URL? The answer is because Angular Router also supports &lt;strong&gt;named outlets&lt;/strong&gt; and in fact, every property from the &lt;code&gt;children&lt;/code&gt; object form above represents a named outlet. It should also be mentioned that when no outlet is specified, the &lt;strong&gt;primary outlet&lt;/strong&gt; is used by default.&lt;br&gt;&lt;br&gt;
A &lt;code&gt;UrlSegment&lt;/code&gt; is used to represent a URL segment and for each segment it keeps track of the &lt;strong&gt;name&lt;/strong&gt; and the &lt;strong&gt;segment parameters&lt;/strong&gt;.&lt;br&gt;&lt;br&gt;
Let's see an example: given the URL &lt;code&gt;'foo/123/(a//named:b)'&lt;/code&gt;(where &lt;code&gt;named&lt;/code&gt; refers to a named outlet called &lt;code&gt;named&lt;/code&gt;), its equivalent &lt;code&gt;UrlTree&lt;/code&gt; will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;segments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="c1"&gt;// The root UrlSegmentGroup never has any segments&lt;/span&gt;
  &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;segments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;123&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
      &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;segments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt; &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;named&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;segments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt; &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A structure like the one from above is then used when traversing the &lt;code&gt;Routes&lt;/code&gt; configuration array. A configuration that would match the given URL would be this one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// app-routing.module.ts&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;loadChildren&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./foo/foo.module&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FooModule&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="err"&gt;​&lt;/span&gt;
  &lt;span class="c1"&gt;// foo.module.ts&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;outlet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;named&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;You can try out the above example &lt;a href="https://stackblitz.com/edit/routing-base-url-parser?file=src%2Fapp%2Fapp.module.ts"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now that we grasped the fundamentals of &lt;code&gt;UrlTree&lt;/code&gt;, it's time to see the problem we are trying to solve.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you'd like to read more about &lt;code&gt;UrlTree&lt;/code&gt;, I'd recommend having a look at &lt;a href="https://andreigatej.dev/blog/angular-router-urlree"&gt;Angular Router: Getting to know UrlTree, ActivatedRouteSnapshot and ActivatedRoute&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h2&gt;

&lt;p&gt;Suppose you are given a configuration that looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FooContainer1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FooContainer2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FooComponent1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;outlet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;pathMatch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;full&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DummyComponent1&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Can you think of a URL that would activate the &lt;code&gt;FooComponent1&lt;/code&gt; component?&lt;/p&gt;

&lt;p&gt;If your answer is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;[routerLink]=&lt;/span&gt;&lt;span class="s"&gt;"['/', { outlets: { test: [123] } }]"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then, whether you are correct or not depends on which version of Angular you're using. In both cases, the &lt;code&gt;UrlTree&lt;/code&gt; of the above is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;
  &lt;span class="nx"&gt;queryParams&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="nl"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="nl"&gt;segments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;123&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}]&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nl"&gt;segments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Angular versions earlier than 11, the above solution won't work and we will have to find another approach. In Angular 11 this is fixed. Let's see each case in detail.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-process-of-matching-raw-routes-endraw-with-raw-urlsegmentgroup-endraw-s"&gt;
  &lt;/a&gt;
  The process of matching &lt;code&gt;Routes&lt;/code&gt; with &lt;code&gt;UrlSegmentGroup&lt;/code&gt;s
&lt;/h3&gt;

&lt;p&gt;It is now worth talking about the &lt;em&gt;matching process&lt;/em&gt; between &lt;code&gt;Routes&lt;/code&gt; configuration and a &lt;code&gt;UrlSegmentGroup&lt;/code&gt;.&lt;br&gt;&lt;br&gt;
The number of segments(delimited by &lt;code&gt;/&lt;/code&gt;) in the &lt;code&gt;Route&lt;/code&gt;'s &lt;code&gt;path&lt;/code&gt; property does not have to be equal to the number of &lt;code&gt;UrlSegmentGroup.segments&lt;/code&gt;. In order for a &lt;code&gt;Route&lt;/code&gt; to be matched, the numbers of segments in the &lt;code&gt;path&lt;/code&gt; property must be less than or equal to the length of &lt;code&gt;UrlSegmentGroup.segments&lt;/code&gt;. If the previous condition is met, the some of the &lt;code&gt;UrlSegmentGroup.segments&lt;/code&gt; segments are said to be &lt;em&gt;consumed&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/angular/angular/blob/bbeac0727b8f267a47aba1ff1bcfc8cc5ca15b61/packages/router/src/recognize.ts#L185-L191"&gt;same logic&lt;/a&gt; applies in case of &lt;code&gt;{ path: '', }&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathMatch&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;full&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;segmentGroup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasChildren&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;segments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;NoMatch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;consumedSegments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="na"&gt;lastChild&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It was necessary to briefly introduce this notion because, based on the &lt;em&gt;consumed segments&lt;/em&gt;, there will be 3 cases:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;All the &lt;code&gt;UrlSegmentGroup.segments&lt;/code&gt; are consumed &lt;strong&gt;and&lt;/strong&gt; &lt;code&gt;UrlSegmentGroup.children&lt;/code&gt; is not empty:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;An example of this is even the one we have seen at the beginning of this article:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WR2bBOvZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Andrei0872/andreigatej.dev/master/static/angular-router-empty-path-and-named-outlets/case-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WR2bBOvZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Andrei0872/andreigatej.dev/master/static/angular-router-empty-path-and-named-outlets/case-1.png"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// The `UrlTree`&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;segments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="c1"&gt;// The root UrlSegmentGroup never has any segments&lt;/span&gt;
  &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;segments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;123&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
      &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;segments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt; &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;named&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;segments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt; &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// The configuration&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// app-routing.module.ts&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;loadChildren&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./foo/foo.module&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FooModule&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="err"&gt;​&lt;/span&gt;
  &lt;span class="c1"&gt;// foo.module.ts&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;outlet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;named&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Recall that &lt;code&gt;UrlSegmentGroup.children&lt;/code&gt;'s values are named outlets and their segments.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;All the &lt;code&gt;UrlSegmentGroup.segments&lt;/code&gt; are consumed &lt;strong&gt;and&lt;/strong&gt; &lt;code&gt;UrlSegmentGroup.children&lt;/code&gt; is empty:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo/bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and the URL is &lt;code&gt;foo/bar&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here's how the &lt;code&gt;UrlTree&lt;/code&gt; for &lt;code&gt;foo/bar&lt;/code&gt; looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;queryParams&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// It is empty&lt;/span&gt;
        &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="c1"&gt;// Both will be *consumed*&lt;/span&gt;
        &lt;span class="na"&gt;segments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;}]&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;segments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Not all of the &lt;code&gt;UrlSegmentGroup.segments&lt;/code&gt; have been consumed:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is the point where Angular 11 and Angular &amp;lt;11 are different.&lt;/p&gt;

&lt;p&gt;In this case, only a few parts of &lt;code&gt;UrlSegmentGroup.segments&lt;/code&gt; are consumed. In this case, if the current &lt;code&gt;Route&lt;/code&gt; object has either a &lt;code&gt;children&lt;/code&gt; property or &lt;code&gt;loadChildren&lt;/code&gt;, it will traverse the array found in one of these properties.&lt;/p&gt;

&lt;p&gt;The problem here with version earlier than 11 is that when traversing the new inner &lt;code&gt;Routes&lt;/code&gt; configuration array, it will &lt;strong&gt;not&lt;/strong&gt; take into account the current outlet name. Recall that an outlet's name is a property in the &lt;code&gt;UrlSegmentGroup.children&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;Coming back to our initial example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FooContainer1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FooContainer2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FooComponent1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;outlet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;pathMatch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;full&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DummyComponent1&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;[routerLink]=&lt;/span&gt;&lt;span class="s"&gt;"['/', { outlets: { test: [123] } }]"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because the &lt;code&gt;path&lt;/code&gt; is &lt;code&gt;''&lt;/code&gt;, the &lt;code&gt;UrlSegmentGroup.segments&lt;/code&gt; &lt;strong&gt;won't be consumed&lt;/strong&gt;(&lt;a href="https://github.com/angular/angular/blob/bbeac0727b8f267a47aba1ff1bcfc8cc5ca15b61/packages/router/src/recognize.ts#L185-L191"&gt;here's why&lt;/a&gt;). The way this is handled in earlier versions is to &lt;strong&gt;always&lt;/strong&gt; use the &lt;strong&gt;primary outlet name&lt;/strong&gt;, although the current outlet name might be different. Since the &lt;code&gt;UrlTree&lt;/code&gt; generated by the above &lt;code&gt;RouterLink&lt;/code&gt; looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;
  &lt;span class="nx"&gt;queryParams&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="nl"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;// No `primary` outlet here, only `test`.&lt;/span&gt;
      &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="nl"&gt;segments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;123&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}]&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nl"&gt;segments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;there won't be any match and the navigation will fail.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/angular/angular/blob/8.2.14/packages/router/src/apply_redirects.ts#L279-L281"&gt;This is the current implementation that prevents the above approach from working&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And &lt;a href="https://stackblitz.com/edit/angular-8-app-example-qeznoh?file=src%2Fapp%2Fapp.component.html"&gt;here&lt;/a&gt; is a StackBlitz app with our example and there you can see the navigation fails.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-fix-that-came-with-angular-11"&gt;
  &lt;/a&gt;
  The fix that came with Angular 11
&lt;/h3&gt;

&lt;p&gt;With this version, the exact problem that we had before(at the third case) is fixed. The way this is done is by using the current outlet name when in the third scenario occurs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackblitz.com/edit/angular-ivy-supznj?file=src%2Fapp%2Fapp.module.ts"&gt;Here&lt;/a&gt; is the our initial problem, but in Angular 11. As you can see, it's working.&lt;/p&gt;

&lt;p&gt;And &lt;a href="https://github.com/angular/angular/blob/master/packages/router/src/apply_redirects.ts#L321-L322"&gt;here&lt;/a&gt;'s the relevant source code that fixed the problem:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;
&lt;span class="c1"&gt;// `childConfig` in this case refers to the content of `children` property.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;matchedOnOutlet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getOutlet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;outlet&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;expanded$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expandSegment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;childModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;segmentGroup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;childConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;slicedSegments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;matchedOnOutlet&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;PRIMARY_OUTLET&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;outlet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's briefly visualize the process:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--quWGtWzy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Andrei0872/andreigatej.dev/master/static/angular-router-empty-path-and-named-outlets/case-3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--quWGtWzy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Andrei0872/andreigatej.dev/master/static/angular-router-empty-path-and-named-outlets/case-3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Because the outlet name won't always be &lt;code&gt;primary&lt;/code&gt; and since all the paths until &lt;code&gt;FooComponent1&lt;/code&gt; are &lt;code&gt;''&lt;/code&gt;, the first &lt;code&gt;children&lt;/code&gt; array will be traversed(denoted by&lt;code&gt;(1)&lt;/code&gt;), then the second &lt;code&gt;children&lt;/code&gt; array(denoted by &lt;code&gt;(2)&lt;/code&gt;) and there it will finally find the match.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Although the fix was a small one, it had a big impact. I had stumbled across a few bugs in the past which were caused by this, so personally I'm glad they eventually found a solution.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Credit goes to the Stack Overflow user Dina Flies, who posted the question.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The diagrams were made with &lt;a href="https://excalidraw.com/"&gt;Excalidraw&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>typescript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Comparing Vue.js to new JavaScript frameworks</title>
      <author>Matt Angelosanto</author>
      <pubDate>Mon, 28 Jun 2021 21:10:30 +0000</pubDate>
      <link>https://dev.to/logrocket/comparing-vue-js-to-new-javascript-frameworks-15hn</link>
      <guid>https://dev.to/logrocket/comparing-vue-js-to-new-javascript-frameworks-15hn</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/samson-omojola/"&gt;Samson Omojola&lt;/a&gt;&lt;/strong&gt; ✏️&lt;/p&gt;

&lt;p&gt;As frontend design becomes increasingly important for the success of an application, the need to work with the best frontend framework has become more of a necessity.&lt;/p&gt;

&lt;p&gt;Finding the best framework to solve specific problems within a project provides a better frontend design and user experience, helping brands and developers attract and keep more users.&lt;/p&gt;

&lt;p&gt;For developers working in JavaScript, Vue has become a popular and well-established framework. However, different projects require different solutions, and finding an alternative to Vue can propel a project forward with increased speed, performance, and community.&lt;/p&gt;

&lt;p&gt;In this post, we’ll compare Vue to Svelte, Riot, Hyperapp, and Alpine, some new, lesser-known JavaScript frameworks that have cultivated a following and provide useful features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-quick-vuejs-overview"&gt;
  &lt;/a&gt;
  A quick Vue.js overview
&lt;/h2&gt;

&lt;p&gt;Vue is an open source JavaScript framework that uses the Model-View-ViewModel (MVVM) design pattern that represents the three layers in Vue applications.&lt;/p&gt;

&lt;p&gt;If you are familiar with the &lt;a href="https://blog.logrocket.com/dont-underestimate-the-model-in-mvc/"&gt;popular Model-View-Controller (MVC) pattern&lt;/a&gt;, Vue performs the controller task by using the view model layer.&lt;/p&gt;

&lt;p&gt;In a Vue application, the model layer provides access to data. The logic for moving data from the model to the view and vice versa is housed by the view model layer.&lt;/p&gt;

&lt;p&gt;A Vue model can look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;model_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;js_frameworks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;Svelte&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;Riot&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;Hyperapp&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;Alpine&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The view model layer connects the view and model layers using two-way data binding. In Vue, a view model object can be instantiated as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;vm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; 
  &lt;span class="na"&gt;el&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;‘#&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;model_data&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the &lt;code&gt;el&lt;/code&gt; parameter connects the view model layer to any element in our view using the element’s ID. In this case, we bind our view model layer to an element whose ID attribute value is &lt;code&gt;app&lt;/code&gt;. The data parameter then connects the view model layer to the model. &lt;/p&gt;

&lt;p&gt;The view layer consists of the DOM and all its elements, displaying the data housed by the model layer to users. The corresponding view for the model and view model layers above looks like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;”app”&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;”framework&lt;/span&gt; &lt;span class="na"&gt;in&lt;/span&gt; &lt;span class="na"&gt;js_frameworks&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{framework}}&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The ID of the outermost div above corresponds with the ID specified in the view model layer, providing access to the data in the model in our view. We use Vue’s syntax &lt;code&gt;v-for&lt;/code&gt; to create a for loop to loop through the data and display it as a list.&lt;/p&gt;

&lt;p&gt;Now that we are familiar with Vue and how it works, let’s compare it with some new JavaScript frameworks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vuejs-vs-svelte"&gt;
  &lt;/a&gt;
  Vue.js vs. Svelte
&lt;/h2&gt;

&lt;p&gt;A common feature to consider when comparing frameworks is speed. In the case of Vue vs. Svelte, looking at how each framework builds and runs an app by manipulating the DOM provides this insight.&lt;/p&gt;

&lt;p&gt;Because Vue renders an app’s user interface through a virtual DOM, the enhanced copy makes manipulating it easier. And while this method is fast, compiling at runtime slows the loading process considerably.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.logrocket.com/should-you-use-svelte-in-production/"&gt;Svelte, however, solves this performance problem at build time&lt;/a&gt;. This JavaScript framework is known for its speed and performance. It comes with a compiler that converts the Svelte framework code to vanilla JavaScript when running a build on an app.&lt;/p&gt;

&lt;p&gt;When finishing building an app, all traces of Svelte vanish, leaving only vanilla JavaScript. And since browsers understand JavaScript, there’s no need to download a library, eliminating time originally spent downloading.&lt;/p&gt;

&lt;p&gt;Unlike Vue, Svelte makes changes to the DOM directly. Also, bundles with only vanilla JavaScript code are usually lighter than bundles that come with libraries.&lt;/p&gt;

&lt;p&gt;All these aspects work together to improve overall performance.&lt;/p&gt;

&lt;p&gt;While both Vue and Svelte have a simple, easy-to-understand syntax, Svelte requires slightly less code for implementing different functionalities.&lt;/p&gt;

&lt;p&gt;Svelte also ditches design patterns altogether, compared to Vue, which uses the MVVM design pattern. Instead, Svelte creates encapsulated components with all the HTML, CSS, and JavaScript on the same page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Samson&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{name}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;My&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/main&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/style&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the JavaScript code above, we created a variable that holds a string. In the HTML, an input box and paragraph are connected using two-way data binding using the &lt;code&gt;bind&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;The code gives us a text box with the text that &lt;code&gt;name&lt;/code&gt; holds. It inserts the text into the paragraph below the text box as well.&lt;/p&gt;

&lt;p&gt;If we change the value in the text box, the value that &lt;code&gt;name&lt;/code&gt; holds and the value inserted into the paragraph changes. In our style, we made the color of our paragraph text red.&lt;/p&gt;

&lt;p&gt;While some prefer Svelte’s simple approach of keeping code, markup, and styling in one place, it can often be seen as old-fashioned, and, depending on the project, Vue’s modern MVVM design pattern may be more preferable.&lt;/p&gt;

&lt;p&gt;Vue does have an upper hand when it comes to community, user base, and support. Since Svelte’s ecosystem is still growing, its users don’t have the resources, open source tools, plugins, and community support that Vue developers enjoy.&lt;/p&gt;

&lt;p&gt;Overall, both frameworks are considered easy to learn, have excellent documentation, and only require a basic knowledge of JavaScript to adopt.&lt;/p&gt;

&lt;p&gt;However, Svelte’s capabilities work seamlessly together to improve performance compared to Vue, with shorter loading times, greater memory space, and overall lightness.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vuejs-vs-riotjs"&gt;
  &lt;/a&gt;
  Vue.js vs. Riot.js
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://riot.js.org/"&gt;Riot.js prides itself as a light and simple UI library&lt;/a&gt; that helps developers hit the ground running when creating elegant UIs for their applications.&lt;/p&gt;

&lt;p&gt;Much like React, users can create custom tags in Riot. This is one of the library’s selling points because developers can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Create components like headers, navigation bars, buttons, and cards with HTML and JavaScript&lt;/li&gt;
&lt;li&gt;  Wrap the components in elements that can be uniquely named for readability&lt;/li&gt;
&lt;li&gt;  Reuse the components indefinitely&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another advantage of using Riot is its size. It advertises itself as a minimalistic framework, providing the bare minimum needed to create a frontend project. Since there are fewer features in this framework compared to Vue, there is less to learn and it loads quickly in browsers.&lt;/p&gt;

&lt;p&gt;Instead of the MVVM pattern that Vue uses, Riot uses the Model-View-Presenter (MVP) pattern. The model and the view work similarly to Vue’s model and view, but, in place of the view model layer, Riot uses a presenter layer to transfer data from the model to the view and vice versa.&lt;/p&gt;

&lt;p&gt;One major difference between Vue and Riot is that while Vue uses a virtual DOM to render an app’s UI, &lt;a href="https://v3.riotjs.now.sh/compare/#virtual-dom-vs-expressions-binding"&gt;Riot employs expressions binding&lt;/a&gt;, similar to AngularJS. This means that every time a change is made to the code, it goes to the DOM tree and updates the nodes.&lt;/p&gt;

&lt;p&gt;Expressions binding is beneficial for small and medium-sized apps but can cause performance issues for larger apps.&lt;/p&gt;

&lt;p&gt;One big advantage Vue has over Riot, however, is its community. Riot hasn’t been widely adopted yet, while Vue has been adopted by more mainstream companies and developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vuejs-vs-hyperapp"&gt;
  &lt;/a&gt;
  Vue.js vs. Hyperapp
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://blog.logrocket.com/the-question-of-why-in-single-page-application-frameworks-91383446d0f5#Hyperapp"&gt;Hyperapp is a super-lightweight framework&lt;/a&gt; for creating application frontends. Its total size is about 1KB, which boots up faster and requires less memory than Vue, an advantage that is highlighted when an app runs on low-end devices.&lt;/p&gt;

&lt;p&gt;One similarity between these frameworks is that they both use a virtual DOM.&lt;/p&gt;

&lt;p&gt;If you are building a complex app, Vue’s robust built-in features and community would serve you best. However, if you are looking for a framework that prioritizes simplicity with a straightforward API, you should give Hyperapp a try.&lt;/p&gt;

&lt;p&gt;Similar to React, Hyperapp supports JSX and allows developers to create reusable components to use with other frameworks. Note that when using JSX in Hyperapp, you must convert the JSX code into function calls with a compiler because browsers cannot interpret JSX.&lt;/p&gt;

&lt;p&gt;Compared to Vue, Hyperapp’s simplicity makes it easy to adopt. It encourages immutability and is less prone to errors than mutability, which Vue promotes.&lt;/p&gt;

&lt;p&gt;Like the other frameworks we’ve looked at so far, Hyperapp is not very popular. However, its small community actively works to improve the framework. At the time of this post, Hyperapp does not have a website and its documentation is not nearly as detailed as Vue’s. To learn more about &lt;a href="https://github.com/jorgebucaran/hyperapp/blob/main/docs/tutorial.md"&gt;how Hyperapp works, check out this simple tutorial&lt;/a&gt; that its creators developed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vuejs-vs-alpinejs"&gt;
  &lt;/a&gt;
  Vue.js vs. Alpine.js
&lt;/h2&gt;

&lt;p&gt;It’s easy to get started &lt;a href="https://github.com/alpinejs/alpine"&gt;building a project with Alpine&lt;/a&gt;. There are no installations required, and all you must include is its library in a project to start using it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/gh/alpinejs/alpine@v2.x.x/dist/alpine.min.js"&lt;/span&gt; &lt;span class="na"&gt;defer&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There’s no need for complex build tools, bundlers, and package managers.&lt;/p&gt;

&lt;p&gt;While Vue provides developers with a CDN as well, users cannot use single-file components. For large-sized Vue applications, it’s advisable to install it via npm.&lt;/p&gt;

&lt;p&gt;One great advantage of Alpine is that it is lightweight, making it unlikely that users experience any speed and performance issues. It’s heavily inspired by &lt;a href="https://blog.logrocket.com/using-tailwind-css-in-production/"&gt;Tailwind CSS&lt;/a&gt; because users can use JavaScript directly on the HTML markup using classes.&lt;/p&gt;

&lt;p&gt;Alpine is also newer than jQuery, so its approach to manipulating the DOM is more modern. Unlike Vue, with its virtual DOM, Alpine makes direct changes to the real DOM while building an application.&lt;/p&gt;

&lt;p&gt;In terms of syntax, &lt;a href="https://github.com/alpinejs/alpine/tree/v2.8.2#alpinejs"&gt;Alpine is very similar to Vue — an intentional move by its creator, Caleb Porzio.&lt;/a&gt; The syntax comes with 14 directives to sprinkle JavaScript into the HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x-data
x-init
x-show
x-bind
x-on
x-if
x-for
x-model
x-text
x-html
x-ref
x-transition
x-spread
x-cloak
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check out this &lt;a href="https://blog.logrocket.com/getting-started-with-alpine-js/"&gt;guide to learn how to use these Alpine directives&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Alpine is the perfect alternative for projects that Vue would be too heavy for, such as simple applications that only require a few functionalities.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We’ve taken a closer look at some of the new JavaScript frameworks that are growing rapidly, one day possibly posing strong competition to established frameworks like Vue.&lt;/p&gt;

&lt;p&gt;It is important to note that this post was not written to present any framework as better than Vue, rather it was written to expose readers to some lesser-known frameworks that might serve different needs, like lightness and simplicity.&lt;/p&gt;

&lt;p&gt;Check out these new frameworks and try using them in subsequent projects to see firsthand the advantages they present.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#experience-your-vue-apps-exactly-how-a-user-does"&gt;
  &lt;/a&gt;
  Experience your Vue apps exactly how a user does
&lt;/h2&gt;

&lt;p&gt;Debugging Vue.js applications can be difficult, especially when there are dozens, if not hundreds of mutations during a user session. If you’re interested in monitoring and tracking Vue mutations for all of your users in production, &lt;a href="https://www2.logrocket.com/vue-performance-monitoring"&gt;try LogRocket&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www2.logrocket.com/vue-performance-monitoring"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Rso_joi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://files.readme.io/00591d0-687474703a2f2f692e696d6775722e636f6d2f6a3049327856572e706e67.png" alt="LogRocket Dashboard Free Trial Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www2.logrocket.com/vue-performance-monitoring"&gt;LogRocket&lt;/a&gt; is like a DVR for web apps, recording literally everything that happens in your Vue apps including network requests, JavaScript errors, performance problems, and much more. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred.&lt;/p&gt;

&lt;p&gt;The LogRocket Vuex plugin logs Vuex mutations to the LogRocket console, giving you context around what led to an error, and what state the application was in when an issue occurred.&lt;/p&gt;

&lt;p&gt;Modernize how you debug your Vue apps — &lt;a href="https://www2.logrocket.com/vue-performance-monitoring"&gt;start monitoring for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>GraphQL v/s REST -  Conclusion</title>
      <author>tbaveja</author>
      <pubDate>Mon, 28 Jun 2021 20:09:09 +0000</pubDate>
      <link>https://dev.to/tbaveja/graphql-v-s-rest-conclusion-2mfk</link>
      <guid>https://dev.to/tbaveja/graphql-v-s-rest-conclusion-2mfk</guid>
      <description>&lt;p&gt;The objective of this blog is to explain and determine which among the REST and GraphQL could be a best fit depending upon your requirement and use-case. Let's start !&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If you're not aware of GraphQL, I would highly recommend you to checkout one of the below:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://www.linkedin.com/learning/learning-graphql"&gt;Awesome crash course&lt;/a&gt; by &lt;a class="mentioned-user" href="https://dev.to/eveporcello"&gt;@eveporcello&lt;/a&gt;
 on Linkedin Learning&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://www.youtube.com/watch?v=Y0lDGjwRYKw&amp;amp;list=PL4cUxeGkcC9iK6Qhn-QLcXCXPQUov1U7f"&gt;GraphQL Tutorial&lt;/a&gt; by Net Ninja on Youtube&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#similarities-between-graphql-and-rest"&gt;
  &lt;/a&gt;
  Similarities between GraphQL and REST
&lt;/h2&gt;

&lt;p&gt;GraphQL and REST essentially accomplish the same task, i.e., communicate with a server and retrieve data. Here are a few similarities between the two:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Both GraphQL and REST are based on the concept of a resource, and they specify IDs for those resources.&lt;/li&gt;
&lt;li&gt;Both GraphQL and REST rely on frameworks and libraries to handle the tiny networking details.&lt;/li&gt;
&lt;li&gt;Both can differentiate if an API request is intended to read data or write it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#why-graphql-"&gt;
  &lt;/a&gt;
  Why GraphQL ?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. One Unique Endpoint:&lt;/strong&gt; GraphQL exposes a single endpoint that allows you to access multiple resources.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. One request, Many resources:&lt;/strong&gt; Query one or more resources in the same request. This will avoid making multiple API calls for an operation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. No Over Fetching or Under Fetching:&lt;/strong&gt; The main advantage of GraphQl over REST is that REST responses contain too much data or sometimes not enough data, which creates the need for another request. GraphQL solves this problem by fetching only the exact and specific data in a single request.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Extending APIs:&lt;/strong&gt; Adding functionality wouldn't affect existing client GraphQL queries.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Bandwidth:&lt;/strong&gt; If your API is intended to be used on a mobile application or a large application like Facebook Newsfeed, use GraphQL since it offers better bandwidth usage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-rest-over-graphql-"&gt;
  &lt;/a&gt;
  Why REST over GraphQL ?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. Handling complex queries:&lt;/strong&gt; We have to specify everything we want to bring. “. If you’re not careful, a few big queries can bring your server down to its knees. In that sense, GraphQL’s greatest strength can also be its greatest weakness.”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Code vulnerability in GraphQL:&lt;/strong&gt; If an attacker wants to carry out a DDoS (Denial-of-service-attack) to an unprotected server, all he has to do is execute an expensive nested query to overload your server. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. HTTP Caching:&lt;/strong&gt; REST allows data to be cacheable, which might improve performance and scalability whereas, GraphQL uses a single endpoint and custom requests, so caching is complicated.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Error Reporting:&lt;/strong&gt; With REST, you can use API responses and build a monitoring system for error messages. But error reporting in GraphQL leaves a lot to be desired, with the ubiquitous “200 K Error — Something went wrong” message.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Data Formats:&lt;/strong&gt; REST APIs support various data formats (XML, JSON, HTML, plain text, etc.) whereas, GraphQL only supports JSON.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Rate Limiting:&lt;/strong&gt; Another problem with GraphQL is rate-limiting. In REST API, you can simply specify that we allow only this amount of requests in one day", but in GraphQL, it is difficult to specify this type of statement.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;If your API is intended to be used on a mobile application or a large application like Facebook Newsfeed, use GraphQL since it offers better bandwidth usage. Or, applications where we usually need nested data to be fetched. i.e. blog posts with their comments and people details.&lt;/p&gt;

&lt;p&gt;If you need caching and monitoring facilities in your API, use REST. Or, public APIs where we want to determine what to expose to the clients.&lt;/p&gt;

&lt;p&gt;You can also use a combination of GraphQL and REST for a project. It all depends on your data and performance requirements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#must-read"&gt;
  &lt;/a&gt;
  Must Read:
&lt;/h2&gt;

&lt;p&gt;Always try to follow and learn from case studies. Below are the case studies from Netflix Tech Blog:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://netflixtechblog.com/how-netflix-scales-its-api-with-graphql-federation-part-1-ae3557c187e2"&gt;https://netflixtechblog.com/how-netflix-scales-its-api-with-graphql-federation-part-1-ae3557c187e2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://netflixtechblog.com/our-learnings-from-adopting-graphql-f099de39ae5f"&gt;https://netflixtechblog.com/our-learnings-from-adopting-graphql-f099de39ae5f&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Learn Together, Grow Together !"&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;.&lt;br&gt;
That's It ! And don't forget to explore various tools available for GraphQL !&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y0jRFrfe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eq2zal0878wp735byq1c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y0jRFrfe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eq2zal0878wp735byq1c.png" alt="Cheers"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>rest</category>
      <category>webservices</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Side Projects - how do you choose a tech stack?</title>
      <author>Josefine Schfr</author>
      <pubDate>Mon, 28 Jun 2021 19:45:39 +0000</pubDate>
      <link>https://dev.to/josefine/side-projects-how-do-you-choose-a-tech-stack-2ie9</link>
      <guid>https://dev.to/josefine/side-projects-how-do-you-choose-a-tech-stack-2ie9</guid>
      <description>&lt;p&gt;To get my hands dirty and continue learning a little more holistically I have been wanting to get started on a side project for a long time. What’s been holding me back so far is the sheer abundance of options - I feel like a little kid at the candy store. Torn somewhere between frantically running around and completely paralysed. &lt;/p&gt;

&lt;p&gt;During the bootcamp I participated in, we created our own web app with React, Node &amp;amp; MongoDB and tested a little with Cypress. Deployment / Hosting was not part of the course. Now while these are probably solid options, these choices were made for me. Now I am wondering, if I am completely free to choose, how do I decide on the stack for a project? &lt;/p&gt;

&lt;p&gt;I get that this highly depends on the project’s requirements and personal preferences. But say I want to create a very basic portfolio page - think virtual business card, really nothing fancy as an MVP (else I will literally never even try this). &lt;/p&gt;

&lt;p&gt;I discussed this with colleagues and got pretty diverse (and sometimes confusing) answers. This these perspectives helped me a lot put my own research into perspective, I would love to hear from you: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How would you choose what to work with?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Based on what you would like to learn or rather something you already know well? &lt;/li&gt;
&lt;li&gt;How do you determine what tech stack is best suited for what you want to do?&lt;/li&gt;
&lt;li&gt;Do you rather try something new and shiny or do you have a ‘winning team’ you aren’t likely to change any time soon?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Literally any tip, opinion or resource is highly appreciated :) Thanks so much! &lt;/p&gt;

</description>
      <category>help</category>
      <category>discuss</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How much JavaScript to learn before learning React?</title>
      <author>Mehul Mohan</author>
      <pubDate>Mon, 28 Jun 2021 19:09:30 +0000</pubDate>
      <link>https://dev.to/mehulmpt/how-much-javascript-to-learn-before-learning-react-1b51</link>
      <guid>https://dev.to/mehulmpt/how-much-javascript-to-learn-before-learning-react-1b51</guid>
      <description>&lt;p&gt;How much JS should I know before I start learning React - this is a very common question I get asked all the time. In this blog post, I will breakdown a few myths and also list some very important topics/things you should know before you start React, or any other similar library/framework (Angular, Vue, etc.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-dont-need-to-learn-all-of-javascript"&gt;
  &lt;/a&gt;
  You don't need to learn all of JavaScript
&lt;/h2&gt;

&lt;p&gt;Stress on the keyword "all". A very important thing is that if your aim is to become, say a frontend developer (&lt;a href="https://codedamn.com/news/become-a-frontend-developer"&gt;a complete guide on it here&lt;/a&gt;), you don't want to spend month after month on only JavaScript preparation.&lt;/p&gt;

&lt;p&gt;The ideal mix that worked for me is to learn "just enough" to move on to React. This absolutely does not mean that you have learned JavaScript. This only means that you don't need to. JavaScript, like any programming language, can be vast, especially with all the tooling and ecosystem around it. Therefore, it is super important to get the core, fundamental understanding of JavaScript ready before you learn anything that involves JavaScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#should-i-learn-react-directly-without-javascript"&gt;
  &lt;/a&gt;
  Should I learn React directly without JavaScript?
&lt;/h2&gt;

&lt;p&gt;Different people might give different answers here. Don't get tricked by only one opinion (applies to this blog post too). In my opinion, the fastest way to learn and absorb React is to go through JavaScript, and not directly jumping on React.&lt;/p&gt;

&lt;p&gt;The reason for this is context switching. When you learn React, you will parallelly learn a lot of JavaScript too, all the time. If you come with a solid understanding of JavaScript to React, you will spend a lot of time in React methodologies and how to work inside a React codebase, best practices and libraries to choose. This is only possible if you aren't asking every minor detail about JavaScript syntax/code. If you do too much context switching from React to JavaScript learning, you'll eventually make less progress on both ends.&lt;/p&gt;

&lt;p&gt;However this also does not mean that you should over optimize your JavaScript learnings for React. You don't need to, for example, learn about Node.js or streams in Node.js to become a good React developer. You also don't need to learn about service workers and ES6 proxies for becoming a good React developer. A typical coding course might confuse you that you need those parts, but trust me, initially you don't. You can always "context switch" and come back to learn these things if needed.&lt;/p&gt;

&lt;p&gt;Okay, so if this is not required, then what is truly required before you move on to React?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#things-to-learn-before-learning-react"&gt;
  &lt;/a&gt;
  Things to learn before learning React
&lt;/h2&gt;

&lt;p&gt;Here's a compiled list of topics I believe you should know. I have divided these topics into 3 categories: Diamond, Gold, Silver.&lt;/p&gt;

&lt;p&gt;Diamond topics - absolutely mandatory and you should have a crystal clear solid understanding. They will haunt you back if you try to skip these.&lt;/p&gt;

&lt;p&gt;Gold - recommended to learn, but you can do some context switching and learn them on the "runtime"&lt;/p&gt;

&lt;p&gt;Silver - these might be advanced topics that are good to know under the hood things, but usually not needed in initial phase.&lt;/p&gt;

&lt;p&gt;Diamond topics are super important. I often think of this quote when people ask me can we start directly with React and learn JS later:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It isn't the mountains ahead to climb that wear you out; it's the pebble in your shoe.- Muhammad Ali&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#diamond-prerequisites-for-react"&gt;
  &lt;/a&gt;
  Diamond pre-requisites for React
&lt;/h3&gt;

&lt;p&gt;The points below are few things you can almost not afford to miss. If you have a weak understanding on these topics, they'll become bigger bottlenecks in your journey as and when you move ahead.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Using a computer, a browser.&lt;/li&gt;
&lt;li&gt;  Language syntax.&lt;/li&gt;
&lt;li&gt;  Programming fundamentals - variables, functions, loops, conditionals, how a program runs.&lt;/li&gt;
&lt;li&gt;  Working with a text editor like VSCode.&lt;/li&gt;
&lt;li&gt;  Understanding of HTML, CSS and how it connects to JavaScript with DOM API.&lt;/li&gt;
&lt;li&gt;  Basic operations with JavaScript - network requests, alerts, DOM changes, event listeners&lt;/li&gt;
&lt;li&gt;  Asynchronous behavior of JavaScript - Callbacks, promises, async/await.&lt;/li&gt;
&lt;li&gt;  Data structures and data types in JavaScript and how they differ from each other - string, boolean, undefined, null, objects, etc.&lt;/li&gt;
&lt;li&gt;  Ability to write simple standalone JS programs and functions (like calculating prime numbers, making 10 HTTP requests sequentially/parallelly using loops/promises, etc.)&lt;/li&gt;
&lt;li&gt;  Ability to google your problems, always.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have any additions to it, feel free to leave them in a comment below.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gold-prerequisites-for-react"&gt;
  &lt;/a&gt;
  Gold pre-requisites for React
&lt;/h3&gt;

&lt;p&gt;These things are not strictly required, but are recommended in order to create an even stronger steel framework of understanding.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  ES6+ syntax - how ES6 module system works, why &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt; were introduced, variable scoping concepts, function hoisting.&lt;/li&gt;
&lt;li&gt;  Linux command line - How to work with bash commands, creating folders, running scripts, deleting files, navigating around filesystem.&lt;/li&gt;
&lt;li&gt;  Git - How to deploy your projects to remote websites like GitHub using git from your command line.&lt;/li&gt;
&lt;li&gt;  Package manager understanding - how npm or yarn work, why are they even required, semantic versioning, lockfiles.&lt;/li&gt;
&lt;li&gt;  High level overview of additional tooling - webpack, babel, prettier, vscode.&lt;/li&gt;
&lt;li&gt;  Hosting providers you can use to deploy your static sites easily - netlify, vercel, github pages, heroku, etc.&lt;/li&gt;
&lt;li&gt;  Browser devtools like chrome devtools for debugging your code/errors or inspecting network requests.&lt;/li&gt;
&lt;li&gt;  Understanding about JSON/APIs/HTTP/REST practices in a little depth.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#silver-prerequisites-for-react"&gt;
  &lt;/a&gt;
  Silver pre-requisites for React
&lt;/h3&gt;

&lt;p&gt;These things are not required initially, but can really help you in long run becoming a great developer overall with your stack. In a nutshell, this section can come "after" learning React too.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  TypeScript with React - how to strongly type your code to catch more errors at development time&lt;/li&gt;
&lt;li&gt;  A clear structure of organizing your files/folders in a project.&lt;/li&gt;
&lt;li&gt;  CI/CD knowledge, for example, with GitHub actions for deploying new changes automatically.&lt;/li&gt;
&lt;li&gt;  Code testing to ship code confidently to production.&lt;/li&gt;
&lt;li&gt;  Stronger grip on best libraries in the ecosystem for their specific use case ( &lt;code&gt;react-query&lt;/code&gt;? &lt;code&gt;apollo-graphql&lt;/code&gt;? &lt;code&gt;tailwindcss&lt;/code&gt;? &lt;code&gt;next&lt;/code&gt;?)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#codedamns-frontend-learning-path"&gt;
  &lt;/a&gt;
  codedamn's frontend learning path
&lt;/h2&gt;

&lt;p&gt;The sad state of web development right now is that there's not a lot that needs to be learnt to become a great developer, but the content noise levels are all time high. The secret is to just a few things in depth.&lt;/p&gt;

&lt;p&gt;If you're looking to learn frontend web development, my personal recommendation is to research for any &lt;strong&gt;one&lt;/strong&gt; good complete source where you can learn from start to end, instead of being half pregnant on nine websites teaching you different things differently. We also provide a full blown &lt;a href="https://codedamn.com/learning-paths/fullstack"&gt;full-stack learning path roadmap&lt;/a&gt;, that covers frontend as close to 50% of the curriculum. Feel free to try it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This blog post should have given you a clarity on how much JavaScript you should be aware of before starting learning React. How to learn React properly? That's for another blog post. If the article helped you, feel free to subscribe to the developer newsletter below to receive weekly updates on more high quality articles here.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>Functools - The Power of Higher-Order Functions in Python</title>
      <author>Martin Heinz</author>
      <pubDate>Mon, 28 Jun 2021 18:59:40 +0000</pubDate>
      <link>https://dev.to/martinheinz/functools-the-power-of-higher-order-functions-in-python-3dg0</link>
      <guid>https://dev.to/martinheinz/functools-the-power-of-higher-order-functions-in-python-3dg0</guid>
      <description>&lt;p&gt;Python standard library includes many great modules that can help you make your code cleaner and simpler and &lt;code&gt;functools&lt;/code&gt; is definitely one of them. This module offers many useful higher order functions that act on or return other functions, which we can leverage to implement function caching, overloading, creating decorators and in general to make our code a bit more &lt;em&gt;functional&lt;/em&gt;, so let's take a tour of it and see all the things it has to offer...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#caching"&gt;
  &lt;/a&gt;
  Caching
&lt;/h2&gt;

&lt;p&gt;Let's start off with the simplest yet quite powerful functions of &lt;code&gt;functools&lt;/code&gt; module. These are caching functions (and also decorators) - &lt;code&gt;lru_cache&lt;/code&gt;, &lt;code&gt;cache&lt;/code&gt; and &lt;code&gt;cached_property&lt;/code&gt;. First of them - &lt;code&gt;lru_cache&lt;/code&gt; provides &lt;em&gt;least recently used&lt;/em&gt; cache of function results or in other words - &lt;em&gt;memoization&lt;/em&gt; of results:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;lru_cache&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;lru_cache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maxsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_with_cache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Not Found"&lt;/span&gt;


&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"https://google.com/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"https://martinheinz.dev/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"https://reddit.com/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"https://google.com/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"https://dev.to/martinheinz"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"https://google.com/"&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;get_with_cache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_with_cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache_info&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="c1"&gt;# CacheInfo(hits=2, misses=4, maxsize=32, currsize=4)
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_with_cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache_parameters&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="c1"&gt;# {'maxsize': 32, 'typed': False}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example we are doing GET requests and caching their results (up to 32 cached results) using &lt;code&gt;@lru_cache&lt;/code&gt; decorator. To see whether the caching really works we can inspect cache info of our function using &lt;code&gt;cache_info&lt;/code&gt; method, which shows number of cache hits and misses. The decorator also provides a &lt;code&gt;clear_cache&lt;/code&gt; and &lt;code&gt;cache_parameters&lt;/code&gt; methods for invalidating cached results and inspecting parameters respectively.&lt;/p&gt;

&lt;p&gt;If you want to have a bit more granular caching, then you can also include optional &lt;code&gt;typed=true&lt;/code&gt; argument, which makes it so that arguments of different types are cached separately.&lt;/p&gt;

&lt;p&gt;Another caching decorator in &lt;code&gt;functools&lt;/code&gt; is a function simply called &lt;code&gt;cache&lt;/code&gt;. It's a simple wrapper on top of the &lt;code&gt;lru_cache&lt;/code&gt; which omits the &lt;code&gt;max_size&lt;/code&gt; argument making it smaller and after as it doesn't need to evict old values.&lt;/p&gt;

&lt;p&gt;There's one more decorator that you can use for caching and it's called &lt;code&gt;cached_property&lt;/code&gt;. This one - as you can probably guess - is used for caching results of class attributes. This is very useful if you have property that is expensive to compute while also being immutable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cached_property&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;cached_property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Do something with supplied value...
&lt;/span&gt;        &lt;span class="c1"&gt;# Long computation that renders HTML page...
&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This simple example shows how we could use cached property to - for example - cache rendered HTML page which would get returned to user over-and-over again. Same could be done for certain database queries or long mathematical computations.&lt;/p&gt;

&lt;p&gt;Nice thing about &lt;code&gt;cached_property&lt;/code&gt; is that it runs only on lookups, therefore allowing us to modify the attribute. After the attribute is modified, the previously cached value won't be used, instead new value will be computed and cached. It's also possible to clear the cache, all we need to do is delete the attribute.&lt;/p&gt;

&lt;p&gt;I would end this section with a word of caution for all of the above decorators - do not use them if your function has any side effects or if it creates mutable objects with each call, as those are not the types of functions that you want to have cached.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comparing-and-ordering"&gt;
  &lt;/a&gt;
  Comparing and Ordering
&lt;/h2&gt;

&lt;p&gt;You probably already know that it's possible to implement comparison operators in Python such as &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt; or &lt;code&gt;==&lt;/code&gt; using &lt;code&gt;__lt__&lt;/code&gt;, &lt;code&gt;__gt__&lt;/code&gt; or &lt;code&gt;__eq__&lt;/code&gt;. It can be quite annoying to implement every single one of  &lt;code&gt;__eq__&lt;/code&gt;, &lt;code&gt;__lt__&lt;/code&gt;, &lt;code&gt;__le__&lt;/code&gt;, &lt;code&gt;__gt__&lt;/code&gt;, or &lt;code&gt;__ge__&lt;/code&gt; though. Luckily, &lt;code&gt;functools&lt;/code&gt; module includes &lt;code&gt;@total_ordering&lt;/code&gt; decorator that can help us with that - all we need to do, is implement &lt;code&gt;__eq__&lt;/code&gt; and one of the remaining methods and rest will be automatically provided by the decorator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;total_ordering&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;total_ordering&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__lt__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__eq__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# True
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# True
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# True
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# False
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above shows that even though we implemented only &lt;code&gt;__eq__&lt;/code&gt; and &lt;code&gt;__lt__&lt;/code&gt; we're able to use all of the rich comparison operations. The most obvious benefit of this is the convenience of not having to write all those extra magic methods, but probably more important is the reduction of code and it's improved readability.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overloading"&gt;
  &lt;/a&gt;
  Overloading
&lt;/h2&gt;

&lt;p&gt;Probably all of us were taught that function overloading isn't possible in Python, but there's actually an easy way to implement it using two functions in&lt;code&gt;functools&lt;/code&gt; module - &lt;code&gt;singledispatch&lt;/code&gt; and/or &lt;code&gt;singledispatchmethod&lt;/code&gt;. These functions help us implement what we would call &lt;em&gt;Multiple Dispatch&lt;/em&gt; algorithm, which is a way for dynamically-typed programming languages such Python to differentiate between types at runtime.&lt;/p&gt;

&lt;p&gt;Considering that function overloading is pretty big topic on its own, I dedicated a separate article to Python's &lt;code&gt;singledispatch&lt;/code&gt; and &lt;code&gt;singledispatchmethod&lt;/code&gt;, so if you want to know more about this, then you can read more about it &lt;a href="https://martinheinz.dev/blog/50"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#partial"&gt;
  &lt;/a&gt;
  Partial
&lt;/h2&gt;

&lt;p&gt;We all work with various external libraries or frameworks, many of which provide functions and interfaces that require us to pass in callback functions - for example for asynchronous operations or for event listeners. That's nothing new, but what if we need to also pass in some arguments along with the callback function. That's where &lt;code&gt;functools.partial&lt;/code&gt; comes in handy - &lt;code&gt;partial&lt;/code&gt; can be used to &lt;em&gt;freeze&lt;/em&gt; some (or all) of the function's arguments, creating new object with simplified function signature. Confusing? Let's look at some practical examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;output_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Result is: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Pool&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;

&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pool&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply_async&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"World"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above snippet demonstrates how we could use &lt;code&gt;partial&lt;/code&gt; to pass function (&lt;code&gt;output_result&lt;/code&gt;) along with its argument (&lt;code&gt;log=logger&lt;/code&gt;) as a callback function. In this case we use &lt;code&gt;multiprocessing.apply_async&lt;/code&gt; which asynchronously computes result of supplied function (&lt;code&gt;concat&lt;/code&gt;) and returns its result to the callback function. &lt;code&gt;apply_async&lt;/code&gt; will however always pass the result as a first argument and if we want to include any extra - as in this case &lt;code&gt;log=logger&lt;/code&gt; we have to use &lt;code&gt;partial&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This was fairly advanced use case, so a more basic example might be simply creating function that prints to &lt;code&gt;stderr&lt;/code&gt; instead of &lt;code&gt;stdout&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;

&lt;span class="n"&gt;print_stderr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;print_stderr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"This goes to standard error output"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this simple trick we created a new callable (function) that will always pass the &lt;code&gt;file=sys.stderr&lt;/code&gt; keyword argument to &lt;code&gt;print&lt;/code&gt;, allowing us to simplify our code by not having to specify the keyword argument every time.&lt;/p&gt;

&lt;p&gt;And one last example for a good measure. We can also use &lt;code&gt;partial&lt;/code&gt; to utilize little known feature of &lt;code&gt;iter&lt;/code&gt; function - it's possible to create an iterator by passing callable and a sentinel value to &lt;code&gt;iter&lt;/code&gt;, which can be useful in following application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;

&lt;span class="n"&gt;RECORD_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;

&lt;span class="c1"&gt;# Read binary file...
&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"file.data"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"rb"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;records&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RECORD_SIZE&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;records&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Do something with the record...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Usually, when reading a file, we want to iterate over lines, but in case of binary data, we might want to iterate over fixed-sized records instead. This can be done by creating callable using &lt;code&gt;partial&lt;/code&gt; that reads specified chuck of data and passing it to &lt;code&gt;iter&lt;/code&gt; which then creates iterator out of it. This iterator then calls &lt;code&gt;read&lt;/code&gt; function until end of file is reached always taking only specified chuck of data (&lt;code&gt;RECORD_SIZE&lt;/code&gt;). Finally, when the end of file is reached &lt;em&gt;sentinel value&lt;/em&gt; (&lt;code&gt;b''&lt;/code&gt;) is returned and iteration stops.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#decorators"&gt;
  &lt;/a&gt;
  Decorators
&lt;/h2&gt;

&lt;p&gt;We already spoke about some decorators in the previous sections but not about decorators for creating more decorators, though. One such decorator is &lt;code&gt;functools.wraps&lt;/code&gt;, to understand why we need it, let's first take a look at the following example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;actual_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;"""Inner function within decorator, which does the actual work"""&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Before Calling &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"After Calling &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;actual_func&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;decorator&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""Says hello to somebody"""&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Hello, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Martin"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Before Calling greet
# Hello, Martin!
# After Calling greet
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This example shows how you could implement a simple decorator - we wrap the function that does the actual task (&lt;code&gt;actual_func&lt;/code&gt;) with outer &lt;code&gt;decorator&lt;/code&gt; function which becomes the decorator that we can then attach to other functions - as for example with &lt;code&gt;greet&lt;/code&gt; function here. When the &lt;code&gt;greet&lt;/code&gt; function is called you will see that it prints both the messages from &lt;code&gt;actual_func&lt;/code&gt; as well as its own. Everything looks fine, no problem here, right? But, what if we try the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# actual_func
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Inner function within decorator, which does the actual work
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we inspect name and docstring of the decorated function we find that it was replaced by the values from inside the decorator function. That's not good - we can't have all our function names and docs overwritten every time we use some decorator. So, how do we solve this? - With &lt;code&gt;functools.wraps&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;wraps&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;actual_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;"""Inner function within decorator, which does the actual work"""&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Before Calling &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"After Calling &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;actual_func&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;decorator&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""Says hello to somebody"""&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Hello, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# greet
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Says hello to somebody
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only job of &lt;code&gt;wraps&lt;/code&gt; function is to copy name, docstring, argument list, etc. to prevent them from being overwritten. And considering that &lt;code&gt;wraps&lt;/code&gt; is also a decorator we can just slap it onto our &lt;code&gt;actual_func&lt;/code&gt; and the problem is solved!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reduce"&gt;
  &lt;/a&gt;
  Reduce
&lt;/h2&gt;

&lt;p&gt;Last but not least in the &lt;code&gt;functools&lt;/code&gt; module is &lt;code&gt;reduce&lt;/code&gt;. You might know it from other languages as &lt;code&gt;fold&lt;/code&gt; (Haskell). What this function does, is take a iterable and &lt;em&gt;reduce&lt;/em&gt; (or fold) all its values into single one. This has many different applications, so here are some of them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# Use `sum` function from standard library instead
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="c1"&gt;# 6
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# 24
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="c1"&gt;# 20
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# olleh
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see from the above code, &lt;code&gt;reduce&lt;/code&gt; can simplify and oftentimes compress code into single line that would otherwise be much longer. With that said, overusing this function just for sake of shortening code, making &lt;em&gt;"clever"&lt;/em&gt; or making it more &lt;em&gt;functional&lt;/em&gt; is usually a bad idea as it gets ugly and unreadable really quickly, so in my opinion - use it sparingly.&lt;/p&gt;

&lt;p&gt;Also considering that usage of &lt;code&gt;reduce&lt;/code&gt; generally produces one-liners it's ideal candidate for &lt;code&gt;partial&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="c1"&gt;# 6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally if you need not only the final &lt;em&gt;reduced&lt;/em&gt; result, but also intermediate ones, then you can use &lt;code&gt;accumulate&lt;/code&gt; instead - function from another great module &lt;code&gt;itertools&lt;/code&gt;. This is how you can use it to compute running maximum:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;accumulate&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;accumulate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="c1"&gt;# [3, 4, 4, 4, 5, 6, 9, 9, 9]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;As you could see here, &lt;code&gt;functools&lt;/code&gt; features a lot of useful functions and decorators that can make you life easier, but this module is really just a tip of an iceberg. As I mentioned in the beginning Python standard library includes many modules that can help you build better code, so besides &lt;code&gt;functools&lt;/code&gt; which we explored here, you might also want to checkout other modules such as &lt;code&gt;operator&lt;/code&gt; or &lt;code&gt;itertools&lt;/code&gt; (I wrote article about this one too, you can check it out &lt;a href="https://martinheinz.dev/blog/16"&gt;here&lt;/a&gt;) or just go straight to &lt;a href="https://docs.python.org/3/py-modindex.html"&gt;Python module index&lt;/a&gt; and click on whatever catches your attention and I'm sure you will find something useful in there.&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Jasonette Docker Android APK Builder</title>
      <author>Camilo</author>
      <pubDate>Mon, 28 Jun 2021 18:54:54 +0000</pubDate>
      <link>https://dev.to/clsource/jasonette-docker-android-apk-builder-135o</link>
      <guid>https://dev.to/clsource/jasonette-docker-android-apk-builder-135o</guid>
      <description>&lt;p&gt;For the &lt;a href="https://github.com/jasonelle/docker"&gt;Jasonette&lt;/a&gt; project. I created a simple &lt;em&gt;Dockerfile&lt;/em&gt; and a &lt;em&gt;Makefile&lt;/em&gt; with some commands to help building Android APK both in release and debug mode. &lt;/p&gt;

&lt;p&gt;It includes everything you would need like Gradle, JVM and Android SDK.&lt;/p&gt;

&lt;p&gt;Additionally it includes Windows cmd files as an alternative to the Makefiles.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/jasonelle"&gt;
        jasonelle
      &lt;/a&gt; / &lt;a href="https://github.com/jasonelle/docker"&gt;
        docker
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🐳 A helper tool to compile Jasonette Android using Docker
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="adoc"&gt;
&lt;h1&gt;
Jasonelle Android Setup Tools&lt;/h1&gt;
&lt;div id="user-content-preamble"&gt;
&lt;div&gt;
&lt;div&gt;
&lt;p&gt;These are a bunch of scripts and docker files that will help you
developing apps with Jasonette in Android.&lt;/p&gt;
&lt;/div&gt;
&lt;div id="user-content-toc"&gt;
&lt;div id="user-content-toctitle"&gt;Table of Contents&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jasonelle/docker/main/README.adoc/#directory-structure"&gt;Directory Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/jasonelle/docker/main/README.adoc/#installation"&gt;Installation&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jasonelle/docker/main/README.adoc/#linuxmac"&gt;Linux/Mac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jasonelle/docker/main/README.adoc/#windows"&gt;Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/jasonelle/docker/main/README.adoc/#android"&gt;Android&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jasonelle/docker/main/README.adoc/#jasonette"&gt;Jasonette&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/jasonelle/docker/main/README.adoc/#keystore-creation"&gt;Keystore Creation&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jasonelle/docker/main/README.adoc/#example-build-gradle"&gt;Example build.gradle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jasonelle/docker/main/README.adoc/#edit-your-files"&gt;Edit your files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jasonelle/docker/main/README.adoc/#edit-your-settings"&gt;Edit your settings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/jasonelle/docker/main/README.adoc/#commands"&gt;Commands&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jasonelle/docker/main/README.adoc/#installation-command"&gt;Installation Command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jasonelle/docker/main/README.adoc/#download-and-unzip-the-android-directory"&gt;Download and unzip the android directory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jasonelle/docker/main/README.adoc/#create-android-keystore"&gt;Create Android Keystore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jasonelle/docker/main/README.adoc/#build-android-apk-in-debug-mode"&gt;Build Android APK in Debug Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jasonelle/docker/main/README.adoc/#build-android-apk-in-release-mode"&gt;Build Android APK in Release Mode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jasonelle/docker/main/README.adoc/#license"&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jasonelle/docker/main/README.adoc/#credits"&gt;Credits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h2 id="user-content-directory-structure"&gt;
Directory Structure&lt;/h2&gt;
&lt;div&gt;
&lt;div&gt;
&lt;p&gt;When unzipping you can see the following directory structure:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;. (root)
├── Dockerfile
├── Makefile
├── app
│   ├── build
│   ├── file
│   ├── keys
│   └── settings
├── docs
├── jasonette
└── tools
    └── windows&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h2 id="user-content-installation"&gt;
Installation&lt;/h2&gt;
&lt;div&gt;
&lt;div&gt;
&lt;p&gt;The only requirement is &lt;em&gt;Docker Desktop&lt;/em&gt; at least &lt;em&gt;v20.10.0&lt;/em&gt;. You can read the installation docs at
&lt;a href="https://docs.docker.com/get-docker/" rel="nofollow"&gt;https://docs.docker.com/get-docker/&lt;/a&gt;. Be sure that is up and running before installing the &lt;em&gt;Jasonelle Android Setup Tools&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id="user-content-linuxmac"&gt;
Linux/Mac&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;&lt;em&gt;Linux&lt;/em&gt; and &lt;em&gt;Mac&lt;/em&gt; use the &lt;a href="https://en.wikipedia.org/wiki/Make_(software)" rel="nofollow"&gt;Make&lt;/a&gt;…&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/jasonelle/docker"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


</description>
      <category>docker</category>
      <category>android</category>
      <category>bash</category>
      <category>devops</category>
    </item>
    <item>
      <title>Why you need to use React-Query in your React/React Native project</title>
      <author>Benjamin Daniel</author>
      <pubDate>Mon, 28 Jun 2021 18:53:58 +0000</pubDate>
      <link>https://dev.to/benjamindaniel/why-you-need-to-use-react-query-in-your-react-react-native-project-2oog</link>
      <guid>https://dev.to/benjamindaniel/why-you-need-to-use-react-query-in-your-react-react-native-project-2oog</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Have you had issues with managing server state? or find yourself writing long and funny looking code that just fetches data from the server? I honestly think you need to look at react-query if you fall into any of this category.&lt;/p&gt;

&lt;p&gt;Server state is state that's actually stored on the server then is temporarily store in the client for quick-access (like user data, transaction data)&lt;/p&gt;

&lt;p&gt;React's lack of standard data-fetching paradigm has led to the creation of several state management libraries. However, these libraries do not fully support handling async data(server state) properly. Async data is typically handled at the component level where each state associated to it is usually tracked i.e loading, error, data, refreshing e.t.c. as the number of server states tracked increases, the difficulty in managing server state increases.&lt;/p&gt;

&lt;p&gt;React Query is a library that effectively  helps manage and keep track of server state. In this article, I would be highlighting how to use react-query and why you should use it in your next application&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;React Query is often described as the missing data-fetching library for React, but in more technical terms, it makes fetching, caching, synchronising and updating server state in your React applications a breeze.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;You need basic knowledge of the technologies listed below&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;React hooks(elementary)&lt;/li&gt;
&lt;li&gt;State Management libraries (elementary)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-use-react-query"&gt;
  &lt;/a&gt;
  Why use React Query?
&lt;/h2&gt;

&lt;p&gt;In a simple network request/call, the three server states that are of utmost importance are the loading, error and data server states. Using state management libraries to store these is not entirely efficient as the whole application doesn't need to know about these states as it is only relevant in the components that needs it.&lt;/p&gt;

&lt;p&gt;A typical app global state looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;globalState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
    &lt;span class="na"&gt;appSettings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;appVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// yes I am a thug&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;transactions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
      &lt;span class="na"&gt;transactionLoading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;transactionError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One question I ask myself before adding a state to a Global state management library is "Does the app need to know about this data?" and typically, almost all server states don't pass this test. My app doesn't need to know when the transaction is loading or giving an error, because this state is most likely used in one component. As these server states aren't needed globally, the next best decision is to create hooks to help manage basic server states. Although, this doesn't remove the difficulty in handling multiple server states like caching, refreshing, retrying, etc. React Query provides a consistent and straightforward way of managing server state as all of this have been abstracted into the library.&lt;/p&gt;

&lt;p&gt;Talk is cheap, Let's get dirty!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i react-query
&lt;span class="c"&gt;# or&lt;/span&gt;
yarn add react-query
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#specimen-one"&gt;
  &lt;/a&gt;
  Specimen One
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// https://codesandbox.io/s/reverent-sunset-rxwgl?file=/src/App.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getRepos&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;repoData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://api.github.com/repos/tannerlinsley/react-query&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;repoData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;getRepos&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Loading...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;An error has occurred: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Traditional way of handling server State&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;👀 &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers_count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;✨ &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stargazers_count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;🍴 &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forks_count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;QueryClientProvider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

 &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="na"&gt;client&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Example&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;QueryClientProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;repoData&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
     &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://api.github.com/repos/tannerlinsley/react-query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
       &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
     &lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Loading...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;An error has occurred: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;👀 &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers_count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;✨ &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stargazers_count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;🍴 &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forks_count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Comparing the functions shows how the useQuery hook eliminates setting three different state, using a useEffect, catch errors and finally setting loading to false, handling all of this can be quite cumbersome and the &lt;strong&gt;ethos&lt;/strong&gt; of react-query begins to manifest when multiple state are managed like an infinite list or paginated server state, refetching the query.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#specimen-two"&gt;
  &lt;/a&gt;
  Specimen Two
&lt;/h2&gt;

&lt;p&gt;Let's take a look at the &lt;a href="https://react-query.tanstack.com/examples/rick-morty"&gt;Rick and Morty&lt;/a&gt; example in the docs, as I think this is a more concise example to highlight how much complexity react-query removes from your application.&lt;/p&gt;

&lt;p&gt;In &lt;a href="https://codesandbox.io/s/github/tannerlinsley/react-query/tree/master/examples/rick-morty?file=/src/Episodes.js:362-368"&gt;Examples.js&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// https://codesandbox.io/s/github/tannerlinsley/react-query/tree/master/examples/rick-morty?file=/src/Episodes.js:0-903&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Typography&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@material-ui/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;RouterLink&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./fetch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Episodes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;episodes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://rickandmortyapi.com/api/episode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;loading&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Loading...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Error :(&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Typography&lt;/span&gt; &lt;span class="na"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"h2"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Episodes&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Typography&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;episode&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;article&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;episode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;RouterLink&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`/episodes/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;episode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Typography&lt;/span&gt; &lt;span class="na"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"h6"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;episode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;episode&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; - &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;episode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;em&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;episode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;airDate&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;em&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Typography&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;article&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The episodes data is fetched and rendering is conditionally based on status (the loading server state, isn't used here as there are some flaws with using loading as a server state, you can check out Kent Dodds article here&lt;a href="https://kentcdodds.com/blog/stop-using-isloading-booleans"&gt;https://kentcdodds.com/blog/stop-using-isloading-booleans&lt;/a&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;episodes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://rickandmortyapi.com/api/episode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The "episodes" string is called the &lt;a href="https://react-query.tanstack.com/guides/query-keys"&gt;Query Keys&lt;/a&gt; that helps keep track and manage the data's cache. The query key should be unique to the query data. If you leave the page then return, the data will be fetched immediately from the cache (please note that the data doesn't persist when the application closes) and will be re-fetched in the background, these are one of the &lt;a href="https://react-query.tanstack.com/guides/important-defaults"&gt;defaults&lt;/a&gt; in react-query and is worth taking a look as it might bite you if as a Beginner.&lt;/p&gt;

&lt;p&gt;Most of the other data fetching request in this example will follow this flow, where we try to fetch data from a server, if it is in the cache we get the data then it fetches the data in the background if not it fetch the data in the foreground, all of this pristine server state handling and the methods it exposes are the things that make react-query the right tool to use for server state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;So here are reasons you need to use react-query in your React/React Native project are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You don't write long exhaustive code that helps manage server state, react-query intuitively helps you write cleaner and shorter code as all of that management is abstracted into react-query.&lt;/li&gt;
&lt;li&gt;The application is almost always updated with the most recent server state.&lt;/li&gt;
&lt;li&gt;You don't have to deal with useEffects.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://react-query.tanstack.com"&gt;React Query Docs&lt;/a&gt;&lt;br&gt;
&lt;a href="https://kentcdodds.com/blog/stop-using-isloading-booleans"&gt;https://kentcdodds.com/blog/stop-using-isloading-booleans&lt;/a&gt;&lt;br&gt;
&lt;a href="https://kentcdodds.com/blog/application-state-management-with-react#server-cache-vs-ui-state"&gt;https://kentcdodds.com/blog/application-state-management-with-react#server-cache-vs-ui-state&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://twitter.com/tkdodo?s=21"&gt;Dominik&lt;/a&gt;, &lt;a href="https://twitter.com/bamiogunfemi?s=21"&gt;Arafah&lt;/a&gt;, and &lt;a href="https://twitter.com/lulunwenyi?s=21"&gt;Lulu&lt;/a&gt; for reviewing.&lt;/p&gt;

&lt;p&gt;Photo by Anni Roenkae from Pexels&lt;/p&gt;

</description>
      <category>react</category>
      <category>reactnative</category>
      <category>reactquery</category>
      <category>datafetching</category>
    </item>
    <item>
      <title>Create an executable JAR file on VS Code n Command line</title>
      <author>ROHIT KUMAR</author>
      <pubDate>Mon, 28 Jun 2021 18:29:26 +0000</pubDate>
      <link>https://dev.to/rohitk570/create-an-executable-jar-file-on-vs-code-n-command-line-154b</link>
      <guid>https://dev.to/rohitk570/create-an-executable-jar-file-on-vs-code-n-command-line-154b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#so-what-exactly-is-jar"&gt;
  &lt;/a&gt;
  So what exactly is JAR?
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;Jar (&lt;em&gt;Java Archive&lt;/em&gt;)&lt;/strong&gt; tool of &lt;em&gt;JDK&lt;/em&gt; used to package one or more &lt;code&gt;Java class files&lt;/code&gt; and associated metadata and resources (text, images, etc.) into one file to distribute application software or libraries on the Java platform &lt;del&gt;And&lt;/del&gt; it provides the facility to create the executable jar file which calls the main method of the class if you double click it.&lt;/p&gt;

&lt;p&gt;Simply speaking, this is a format for archiving data. This is similar to you using WinRAR or WinZIP.&lt;br&gt;
You can read Oracle documentation on jar &lt;a href="https://docs.oracle.com/javase/tutorial/deployment/jar/appman.html"&gt;here&lt;/a&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#in-this-article"&gt;
  &lt;/a&gt;
  In this article,
&lt;/h3&gt;

&lt;p&gt;We will learn how to create an executable jar file, we will take a Java application and explore two ways to run it as a jar, just by double clicking on it. Using &lt;strong&gt;VsCode&lt;/strong&gt; &amp;amp; &lt;strong&gt;Command line&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What does it mean when we say that the file is an &lt;strong&gt;executable JAR file&lt;/strong&gt;?&lt;br&gt;
Well, when you double click on the JAR file, it automatically calls the main method of the program And if program have JAVA GUI such as &lt;code&gt;frames&lt;/code&gt;, panel present inside the main method, that would also be executed.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#visualstudiocode"&gt;
  &lt;/a&gt;
  &lt;a href="https://code.visualstudio.com/"&gt;VisualStudioCode&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;VS Code is a more flexible IDE in today’s competition, so its important to know to create jar file here which will get our job done faster with ease.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to learn more about VsCode and other text editors you can go through this &lt;em&gt;Blogpost&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/cenacr007_harsh" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gHAd0jjF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--nO18I-lK--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/641726/d1caf43e-4478-42c3-8ac3-f3b2980d031b.png" alt="cenacr007_harsh"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/cenacr007_harsh/best-ide-s-and-text-editors-31i0" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Best IDE’s and Text Editors!&lt;/h2&gt;
      &lt;h3&gt;KUMAR HARSH ・ Jun 24 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;NOW, Follow the following steps:-&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1download-the-extension"&gt;
  &lt;/a&gt;
  1.Download the extension
&lt;/h4&gt;

&lt;p&gt;In VsCode marketplace install extension &lt;a href="https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack"&gt;Java Extension Pack&lt;/a&gt; which includes set of extensions needed for configuring java enviroment in vscode or you can just download &lt;a href="https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-dependency"&gt;Project Manager for Java&lt;/a&gt;  extension which is just needed here &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--92ysQl4K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3iqbbdbvmmaxs97hqri.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--92ysQl4K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3iqbbdbvmmaxs97hqri.png" alt="extension pack"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#2write-your-java-program"&gt;
  &lt;/a&gt;
  2.Write your Java program
&lt;/h4&gt;

&lt;p&gt;I am using my java code of calculator ,a gui application using AWT&lt;br&gt;
NOTE:-application needs to have a class with a main method. This class provides our entry point into the application &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sVWluHjo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d2ul5zev06y0ovd5ocvn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sVWluHjo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d2ul5zev06y0ovd5ocvn.png" alt="MAIN"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#3export-jar-file"&gt;
  &lt;/a&gt;
  3.Export jar file
&lt;/h4&gt;

&lt;p&gt;In order to compile the code by packing JAR inside Vscode, at bottom left corner you will find and option &lt;code&gt;JAVA PROJECTS&lt;/code&gt; there you will find and symbol saying &lt;code&gt;EXPORT JAR&lt;/code&gt;. &lt;em&gt;Click it&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zmwQd-lF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2inboa3dwqd0ruc9kop3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zmwQd-lF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2inboa3dwqd0ruc9kop3.png" alt="export jar"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;IMP&lt;/strong&gt;: now its a very important task it will ask you to specify &lt;code&gt;main class&lt;/code&gt; just provide the main class ,here &lt;code&gt;MyCalc&lt;/code&gt;&lt;br&gt;
this class provide the entry point so its important to mention.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE:-Otherwise the jar file will become, normal jarfile not an executable ones &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--unpolzIe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o6rx1nycqgwl0hmo94bd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--unpolzIe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o6rx1nycqgwl0hmo94bd.png" alt="MAIN METHOD ASKING"&gt;&lt;/a&gt;&lt;br&gt;
NOW ENJOY  your &lt;em&gt;EXECUTABLE JAR FILE&lt;/em&gt; has been created ,here &lt;code&gt;CALC.jar&lt;/code&gt; you can go to your directories and just &lt;code&gt;double click&lt;/code&gt; it or choose and option ,open with &lt;code&gt;JAVA(TM) Platform SE Binary&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--02VRqGVi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lz755kxexlw0y2pfdejh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--02VRqGVi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lz755kxexlw0y2pfdejh.jpg" alt="FINAL"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#command-line"&gt;
  &lt;/a&gt;
  &lt;a href="https://en.wikipedia.org/wiki/Cmd.exe"&gt;Command line&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;NOW using command line you should know the jar tool ,provides certain &lt;code&gt;switches&lt;/code&gt; with which we can create an executable jarfile&lt;br&gt;
some of them are as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;c&lt;/strong&gt; creates new archive file&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;v&lt;/strong&gt; generates verbose output. It displays the included or 
     extracted resource on the standard output.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;m&lt;/strong&gt; includes manifest information from the given mf file.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;f&lt;/strong&gt; specifies the archive file name&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;x&lt;/strong&gt; extracts files from the archive file&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Write the java file and then and then follow the following step:-&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#1compile-java-code"&gt;
  &lt;/a&gt;
  1.Compile java code
&lt;/h4&gt;

&lt;p&gt;We can do this with &lt;code&gt;javac&lt;/code&gt; from the command line:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;javac MyCalc.java&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;javac&lt;/code&gt; command creates &lt;code&gt;MyCalc.class&lt;/code&gt; in the current directory. If you have multiple java file compile them too, We can now package that into a jar file.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#2creating-manifest-file"&gt;
  &lt;/a&gt;
  2.Creating manifest file
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;A manifest file is essential as it sets an entry points,to our application which main class that we are going to execute to the jarfile.&lt;/li&gt;
&lt;li&gt;So, Create a manifest file with &lt;strong&gt;.MF&lt;/strong&gt; extensions in same directories ,so that not needed to set class path explicitly&lt;/li&gt;
&lt;li&gt;You need to write Main-Class, then colon, then space, then classname which you want to make an entry point (here &lt;code&gt;MyCalc&lt;/code&gt;) then press enter.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE:It's important that we end our manifest file with a newline.Otherwise &lt;del&gt;&lt;em&gt;no main manifest attribute&lt;/em&gt;&lt;/del&gt; error is thrown.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;now save the .MF file here &lt;code&gt;manifest.MF&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g7MhO5A_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cyxhw9d0icnlppn5fo9v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g7MhO5A_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cyxhw9d0icnlppn5fo9v.png" alt="manidestt"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#3creating-the-executable-jar"&gt;
  &lt;/a&gt;
  3.Creating the executable jar
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Open the Command Prompt, write the command using jar tool switches provided&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;using &lt;code&gt;jar&lt;/code&gt; command&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;jar -cvfm &amp;lt;jarfilename.jar&amp;gt; &amp;lt;manifestfile&amp;gt; &amp;lt;classname.class&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Command order shouldn't be change&lt;/strong&gt;&lt;br&gt;
    1.&lt;code&gt;jar&lt;/code&gt; command to create a jar file.&lt;br&gt;
    2.switch&lt;code&gt;c&lt;/code&gt; used to indicates we are creating new file&lt;br&gt;
    3.switch&lt;code&gt;v&lt;/code&gt; generates verbose output information&lt;br&gt;
    4.switch&lt;code&gt;f&lt;/code&gt; tell about the jarfile name we are creating &lt;br&gt;
    5.switch&lt;code&gt;m&lt;/code&gt; it includes the manifest information&lt;br&gt;
Hence, the corresponding filename are  also written in the same order ,and if there is  multiple class files, then include them too.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;example
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QsFx1A91--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jx72zq0gajwmjdzoipwe.png" alt="CMD"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#4running-the-jar"&gt;
  &lt;/a&gt;
  4.Running the Jar
&lt;/h4&gt;

&lt;p&gt;NOW ,we can use the &lt;code&gt;-jar&lt;/code&gt; option of the java command to run our application since executable jarfile has been created.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;java -jar CALC.jar&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;here I named my jarfile as &lt;code&gt;CALC.jar&lt;/code&gt;&lt;br&gt;
now our application will be executed after this command &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7N9jqBBH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9xnieibrb3c4uu52014.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7N9jqBBH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9xnieibrb3c4uu52014.png" alt="application"&gt;&lt;/a&gt;&lt;br&gt;
OR&lt;br&gt;
You can run this, just by &lt;em&gt;DOUBLE CLICKING&lt;/em&gt; as our main motive of making our jar file executable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;And that's it.&lt;/em&gt;&lt;/strong&gt; Now you can also run your jarfile with an ease just by clicking it. &lt;br&gt;
If you would like to &lt;strong&gt;download &amp;amp; run&lt;/strong&gt; my &lt;strong&gt;&lt;code&gt;CALC.jar&lt;/code&gt;&lt;/strong&gt; you can find &lt;a href="https://github.com/Rohit570git-hub/Basic-Calculator"&gt;here&lt;/a&gt;&lt;br&gt;
as to show how one can easily share ,justifying its properties that import anywhere it is required.&lt;br&gt;
AND&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#you-can-check-my-blogpost-where-i-had-explained-how-i-created-this-basic-calculator-using-java-awt"&gt;
  &lt;/a&gt;
  You can check my Blogpost where I had explained how I created this basic calculator using java AWT
&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/rohitk570" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WZnEeVue--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--qH-iTMcY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/644632/b4a6465f-4130-4b96-b490-ee60cb169e9c.jpg" alt="rohitk570"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/rohitk570/creating-a-calculator-using-java-awt-16ll" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Creating a Calculator using Java AWT&lt;/h2&gt;
      &lt;h3&gt;ROHIT KUMAR ・ Jun 18 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#java&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#guiapplication&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;With this I will end my articles here,&lt;br&gt;
Hope you all find it valuable, and if you have any doubt ,then you ask me just by &lt;em&gt;commenting below.&lt;/em&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#if-the-program-runs-youre-done-happy-coding"&gt;
  &lt;/a&gt;
  If the program runs, you're done! Happy coding!
&lt;/h3&gt;

&lt;h1&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank You!
&lt;/h1&gt;

&lt;p&gt;You can follow me on:&lt;br&gt;
&lt;a href="https://twitter.com/RohitK_570"&gt;Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/rohitk570/"&gt;Linkedin&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>tutorial</category>
      <category>vscode</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
