<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>A major release, tons of bug fixes and amazing new contributors - Signal #03</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Fri, 06 Aug 2021 12:31:02 +0000</pubDate>
      <link>https://dev.to/signoz/a-major-release-tons-of-bug-fixes-and-amazing-new-contributors-signal-03-4k7i</link>
      <guid>https://dev.to/signoz/a-major-release-tons-of-bug-fixes-and-amazing-new-contributors-signal-03-4k7i</guid>
      <description>&lt;p&gt;Welcome to Signal #03 - our monthly product update!&lt;/p&gt;

&lt;p&gt;It's that time of the month when we update our community to what we've been up to recently. This month, we left behind a trail of squashed bugs, tiny but mighty product improvements, and onboarded new contributors for our journey ahead.&lt;/p&gt;

&lt;p&gt;We are also working on a big update on metrics ingestion for SigNoz that will massively increase the scope of performance monitoring using SigNoz. More details inside 👇&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-we-shipped"&gt;
  &lt;/a&gt;
  What we shipped?
&lt;/h2&gt;

&lt;p&gt;This month, we are excited to announce that our latest release had contributions from 10 awesome contributors. Release link: &lt;a href="https://github.com/SigNoz/signoz/releases/tag/v0.3.3"&gt;v0.3.3&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#regex-pattern-matching-enabled-for-tags"&gt;
  &lt;/a&gt;
  Regex pattern matching enabled for tags
&lt;/h3&gt;

&lt;p&gt;Some of our users wanted to see 4xx errors quickly. So we have enabled regex pattern matching in our trace filters. Now users can apply generic regex operations to any of their tags.&lt;br&gt;
&lt;a href="https://github.com/SigNoz/signoz/pull/249"&gt;Link to the issue&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QTNLKdDD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8gle02ntroqigg5lpt4j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QTNLKdDD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8gle02ntroqigg5lpt4j.png" alt="You can use regex patterns for filtering traces"&gt;&lt;/a&gt;Apply regex operations on trace filters&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#frontend-improvements"&gt;
  &lt;/a&gt;
  Frontend Improvements
&lt;/h3&gt;

&lt;p&gt;Flamegraphs and Gantt charts make a champion combo for debugging latency issues on our dashboard. We improved the experience slightly, where selecting a trace in the flamegraph highlights the corresponding span in the Gantt chart view.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z4KQZ2mA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nmmlf68f4jdpno857k63.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z4KQZ2mA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nmmlf68f4jdpno857k63.png" alt="Selecting a trace in the flamegraph highlights the corresponding span in the gantt charts"&gt;&lt;/a&gt;When you select a trace in the flamegraph, corresponding span in the Gantt chart gets highlighted&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#readmemd-translation-to-chinese"&gt;
  &lt;/a&gt;
  Readme.md translation to Chinese
&lt;/h3&gt;

&lt;p&gt;We recently conducted a &lt;a href="https://signoz.io/blog/getting-to-know-our-4000-plus-stargazers-on-github/"&gt;deep dive&lt;/a&gt; into our stargazers and found out that the top 5 countries where our stargazers belong are from US, India, Brazil, China, and Germany.&lt;/p&gt;

&lt;p&gt;To make our GitHub repo more accessible, we raised requests for getting our readme.md translated to different languages. &lt;a href="https://github.com/tonyqus"&gt;Tony Qu&lt;/a&gt;, a 15+ year .NET veteran, helped translate our readme.md to Chinese, and we couldn't be happier. 🤓&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WOkwla_4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rzreosk921s7mmtj3ela.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WOkwla_4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rzreosk921s7mmtj3ela.png" alt="Countries from which our stargazers belong"&gt;&lt;/a&gt;SigNoz's stargazers belong to nations worldwide&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#featured-issue"&gt;
  &lt;/a&gt;
  Featured Issue
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#charts-for-4xx-status-codes"&gt;
  &lt;/a&gt;
  Charts for 4xx status codes
&lt;/h3&gt;

&lt;p&gt;As we mentioned earlier, users requested to visualize 4xx as errors and be highlighted in the SigNoz dashboard. Currently, we have solved it by enabling regex operations on tags. However, we would love to have your inputs on how to visualize it better. Any UI/UX suggestion is welcomed on the &lt;a href="https://github.com/SigNoz/signoz/issues/222"&gt;issue&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#readmemd-translations"&gt;
  &lt;/a&gt;
  Readme.md translations
&lt;/h3&gt;

&lt;p&gt;We still have many languages to cover for our readme.md translation. If any of you can help us with &lt;a href="https://github.com/SigNoz/signoz/issues/240"&gt;German&lt;/a&gt; or &lt;a href="https://github.com/SigNoz/signoz/issues/238"&gt;Portugese&lt;/a&gt; translations, that would be great.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#cypress-framework-for-e2e-testing"&gt;
  &lt;/a&gt;
  Cypress Framework for E2E testing
&lt;/h3&gt;

&lt;p&gt;Cypress is a Javascript-based end-to-end testing framework that provides users with a fast and reliable test framework. We are looking forward to implementing it as our front-end testing framework. If you have any thoughts around it, please consider commenting on the &lt;a href="https://github.com/SigNoz/signoz/issues/226"&gt;issue&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#whats-upcoming"&gt;
  &lt;/a&gt;
  What's upcoming?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#metrics-ingestion-pipeline"&gt;
  &lt;/a&gt;
  Metrics Ingestion Pipeline
&lt;/h3&gt;

&lt;p&gt;With metrics ingestion pipeline, users should be able to send and visualize metrics like Dosckerstats, JMX metrics from target Mbeans server, cluster-level metrics from the Kubernetes API server, and visualize these on SigNoz UI.&lt;/p&gt;

&lt;p&gt;This update will increase the scope of application performance monitoring manifolds. We will come out with specific tutorials on how to monitor these metrics once we launch the update.&lt;/p&gt;

&lt;p&gt;You can find the complete list of receivers for which metrics ingestion pipeline will work &lt;a href="https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#signoz-news"&gt;
  &lt;/a&gt;
  SigNoz News
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#frontend-best-practices"&gt;
  &lt;/a&gt;
  Frontend Best Practices
&lt;/h3&gt;

&lt;p&gt;We recently had our monthly community call. Community calls can be joined by anyone who wants to participate.&lt;/p&gt;

&lt;p&gt;The agenda was to discuss the best practices we should follow in our frontend code, specifically around test frameworks to use, styling guides for PRs, and localization.&lt;/p&gt;

&lt;p&gt;Some frameworks that are used in large scale companies like Uber and Verizon were suggested for our frontend development workflow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jest - a Javascript testing framework&lt;/li&gt;
&lt;li&gt;Cypress framework - a JavaScript-based end-to-end testing framework built on top of Mocha&lt;/li&gt;
&lt;li&gt;RTL for component testing and integration testing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can watch the complete call recordings here 👇&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/aoOpQ3r84Dw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you want to join future community calls, then you can join our &lt;a href="https://bit.ly/signoz-slack"&gt;slack channel&lt;/a&gt;. We give out all updates there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#from-our-blog"&gt;
  &lt;/a&gt;
  From our blog
&lt;/h2&gt;

&lt;p&gt;Monitoring your Spring Boot application with OpenTelemetry was never this easy. OpenTelemetry provides a Java JAR agent that can be attached to any Java 8+ application. The JAR agent can detect a number of &lt;a href="https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/main/docs/supported-libraries.md"&gt;popular libraries and frameworks&lt;/a&gt; and instrument it right out of the box. You don't need to add any code for that.&lt;/p&gt;

&lt;p&gt;You can read the full blog here👇&lt;br&gt;
&lt;a href="https://signoz.io/blog/opentelemetry-spring-boot/"&gt;Monitor your Spring Boot application with OpenTelemetry and SigNoz&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contributors"&gt;
  &lt;/a&gt;
  Contributors
&lt;/h2&gt;

&lt;p&gt;Shoutout to our new contributors &lt;a href="https://github.com/Vimalraj571"&gt;Vimal&lt;/a&gt;, &lt;a href="https://github.com/tonyqus"&gt;Tony&lt;/a&gt;, and &lt;a href="https://github.com/rahulrana95"&gt;Rahul&lt;/a&gt;, for improving SigNoz and making our community more awesome. 🥳  🎉&lt;/p&gt;

&lt;p&gt;We also wanted to express our gratitude to &lt;a href="https://www.linkedin.com/in/lalitkale/"&gt;Lalit Kale&lt;/a&gt; and &lt;a href="https://www.linkedin.com/in/rameshwarshelge/"&gt;Rameshwar Shelge&lt;/a&gt; for giving active inputs around &lt;a href="https://github.com/SigNoz/signoz/discussions/208"&gt;testing&lt;/a&gt; and strategizing &lt;a href="https://github.com/SigNoz/signoz/discussions/218"&gt;performance benchmarks for SigNoz&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you for taking out the time to read this issue :) If you have any feedback or want any changes with the format, please create an &lt;a href="https://github.com/SigNoz/signoz/issues"&gt;issue&lt;/a&gt;.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>This survey among 60+ hiring managers reveals: Don't waste your time on a (React) portfolio website</title>
      <author>Johannes Kettmann</author>
      <pubDate>Fri, 06 Aug 2021 12:14:43 +0000</pubDate>
      <link>https://dev.to/profydev/this-survey-among-60-hiring-managers-reveals-don-t-waste-your-time-on-a-react-portfolio-website-17ge</link>
      <guid>https://dev.to/profydev/this-survey-among-60-hiring-managers-reveals-don-t-waste-your-time-on-a-react-portfolio-website-17ge</guid>
      <description>&lt;p&gt;You can see it all the time: In the hope of landing a job, new developers put in hour after hour creating their portfolio website. They have a great design in mind with a cool color palette, fancy animations, and a great UX.&lt;/p&gt;

&lt;p&gt;But after weeks of work, the result looks more like... eh.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why all this effort? It seems like everyone in the industry believes that you need a portfolio website to get a job.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Actually, not everyone. Many developers (including myself) get great jobs without ever having a personal website. Even if they are self-taught (again including myself).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So the crucial question is: What do the people involved in the hiring process think?&lt;/strong&gt; These people are the gatekeepers. You have to spark their interest to get a job. If they don't care about your personal website why build it at all?&lt;/p&gt;

&lt;p&gt;To answer this question I went out and conducted a survey among recruiters and hiring managers. &lt;strong&gt;The results are clear: you don't need a personal website to get a job. On the contrary, it can even backfire.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So before you start (or continue) wasting a lot of time on your portfolio website let's talk about&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The results of the survey&lt;/li&gt;
&lt;li&gt;Why portfolio websites often turn into a huge time-sink&lt;/li&gt;
&lt;li&gt;How they can even hurt your chances of getting a job&lt;/li&gt;
&lt;li&gt;4 alternatives to a portfolio website that have a higher impact on your job search&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#i-gathered-answers-from-60-hiring-managers-turns-out-a-portfolio-website-wont-get-you-a-job"&gt;
  &lt;/a&gt;
  I gathered answers from 60+ hiring managers. Turns out, a portfolio website won't get you a job
&lt;/h2&gt;

&lt;p&gt;My personal experience with portfolio websites is clear: many of my colleagues never had one. Neither did I. Still we found great jobs. &lt;/p&gt;

&lt;p&gt;But this is not objective, is it? Does this personal experience hold true for others as well?&lt;/p&gt;

&lt;p&gt;To dig deeper I reached out to 300+ recruiters and React team leads who are involved in the hiring process. I asked them two questions.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Imagine this situation:&lt;/p&gt;

&lt;p&gt;You see two job applications by developers without professional experience. Both resumes include a link to their GitHub profile and a list of portfolio projects. One developer also mentions a personal website. How would you rate the following questions from 0 to 5?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Would you look at the personal website?&lt;/li&gt;
&lt;li&gt;Would the chances of the dev without a personal website be lower?&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hold your breath. Here are the results:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: If you're involved in hiring developers feel free to take the survey yourself. &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLSeKfZz_2Qm9joauNNlMvE2_PI6a9Se6ilqdZNf-56WQdF3sMg/viewform?usp=sf_link"&gt;Follow this link to get to the survey on Google Forms.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cQuiuvve--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://profy.dev/images/portfolio-website-survey/hiring-managers-look-at-react-developer-portfolio-website.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cQuiuvve--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://profy.dev/images/portfolio-website-survey/hiring-managers-look-at-react-developer-portfolio-website.png" alt="Hiring managers would look at your React portfolio website"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_cSP1TDs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://profy.dev/images/portfolio-website-survey/hiring-managers-dont-value-react-developer-portfolio-website.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_cSP1TDs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://profy.dev/images/portfolio-website-survey/hiring-managers-dont-value-react-developer-portfolio-website.png" alt="A React portfolio website does not increase your chances of getting a job"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The results are clear. The overwhelming majority of hiring managers look at your website... but don't give a crap.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now you're right. Reality isn't black and white. Not everyone rated the second question with a 0. A considerable number voted with a 1 or 2. Some even higher.&lt;/p&gt;

&lt;p&gt;At the same time, the framing of the survey was quite open and left some questions: How does the portfolio website look like? Are the GitHub projects of one dev better than the others?&lt;/p&gt;

&lt;p&gt;So the question "Would the dev without a personal website have lower chances?" unsurprisingly was often answered with:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It depends.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Luckily, many of the hiring managers were so nice and provided deeper insights. That's what we'll discuss in the rest of this article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#theres-still-a-slight-chance-that-a-portfolio-website-helps-me-get-a-job-why-not-give-it-a-try-and-build-one"&gt;
  &lt;/a&gt;
  There's still a slight chance that a portfolio website helps me get a job. Why not give it a try and build one?
&lt;/h2&gt;

&lt;p&gt;You're right. Depending on the hiring manager a portfolio website might give you a bonus. But why is that? Let's hear two of the more positive voices:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CHrTSv2A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2obmes1hjplpde1d9wjz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CHrTSv2A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2obmes1hjplpde1d9wjz.png" alt="Quote by Jason M - Team Lead: &amp;quot;Your personal website is a showcase of who you are. If you're not willing to put in the work to make yourself stand out and give me a glimpse at how passionate you are about development then I'd rather give the opportunity to someone who is. Anyone can learn to code but you can't teach someone how to enjoy what they're doing.&amp;quot;"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--497A_qec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g6mcq8pu5l2qgkw9ji3u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--497A_qec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g6mcq8pu5l2qgkw9ji3u.png" alt='Quote by Renato Sinohara - Tech Lead Style Team: "It depends on both. The GitHub projects and the personal website. A good personal page will either show nice projects or a creative page that stands out. But that is, by definition, rare. Both things can also be found on GitHub. For a developer without much experience, the personal factor would matter more than usual."'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The key takeaways here are that a website can show&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;character&lt;/li&gt;
&lt;li&gt;creativity&lt;/li&gt;
&lt;li&gt;dedication and passion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, these are all important points. Especially for devs without much experience. Your character is important to fit into the team. Creativity is crucial for solving problems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But most importantly, a Junior developer needs to grow.&lt;/strong&gt; In their first years, they have to learn a ton. This can be very difficult. Or exciting depending on the perspective. In any case, dedication and passion get them through this time.&lt;/p&gt;

&lt;p&gt;If you can convince a hiring manager that you're dedicated, passionate, and willing to learn you will get a step ahead. And a portfolio website may help with that.&lt;/p&gt;

&lt;p&gt;At the same time, as Renato mentions, &lt;strong&gt;all of this can be found in GitHub projects as well&lt;/strong&gt;. And from my perspective projects on GitHub are superior to a personal website. By a lot. But we'll come to that later.&lt;/p&gt;

&lt;p&gt;For now, let's have a look at &lt;strong&gt;two reasons why you shouldn't build a portfolio website&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reason-1-a-portfolio-website-can-become-a-huge-timesink"&gt;
  &lt;/a&gt;
  Reason 1: A portfolio website can become a huge time-sink
&lt;/h3&gt;

&lt;p&gt;When I build a website from scratch this is what typically happens:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I have a design in mind which looks really cool.&lt;/li&gt;
&lt;li&gt;I start writing code, create the markup, and style it with CSS.&lt;/li&gt;
&lt;li&gt;A few hours in, I'm done with maybe 10% of what I planned. And what I created &lt;em&gt;looks like crap&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;I start moving elements pixel by pixel, add a border here, change a color there. All in the browser's dev tools.&lt;/li&gt;
&lt;li&gt;The layout still looks like crap. So I search for nice-looking websites, professional designs, or any other example that I could copy.&lt;/li&gt;
&lt;li&gt;After days of work, the website looks okay-ish. But nothing I'd be proud of. And I still need to make it responsive and cross-browser compatible...&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you have experienced something similar you know one of the biggest drawbacks of creating a portfolio website from scratch:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can spend a lot of time getting everything straight.&lt;/strong&gt; Usually much more than expected.&lt;/p&gt;

&lt;p&gt;The question is: Do you really want to invest all this time in a portfolio website? Even if the most important people don't care? The people who decide whether you get the job or not.&lt;/p&gt;

&lt;p&gt;You probably got it. Time-wise a portfolio website is a risky investment. But you might think: "I got time. And it's still an opportunity to practice my coding skills."&lt;/p&gt;

&lt;p&gt;Ok. But there's another problem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reason-2-a-portfolio-website-may-hurt-your-chances-of-getting-a-job"&gt;
  &lt;/a&gt;
  Reason 2: A portfolio website may hurt your chances of getting a job
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KDDlzy-2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3cu557fpn3zwc7fvlyf2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KDDlzy-2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3cu557fpn3zwc7fvlyf2.png" alt='Quote by Krishna Glick - Team Lead: "Having no site doesn’t affect the interview process. Having a poor site, however, does not reflect well on a candidate"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's face it: Most developers aren't born designers. And they don't need to be. After all, it's usually not part of a developer's job.&lt;/p&gt;

&lt;p&gt;But the problem is that &lt;strong&gt;unlike your personal projects on GitHub, a portfolio website is expected to look good&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;A bad design can make you look incompetent even though everything works fine and the information on the website isn't bad at all. And even if your website looks great in your eyes another person might not agree.&lt;/p&gt;

&lt;p&gt;That's not all though.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q5oq8ZIA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4in14dbfd6qch4xrccq1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q5oq8ZIA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4in14dbfd6qch4xrccq1.png" alt='Quote by Louis H. - Recruiter: "Websites are cool and look nice but they open the door for more interpretation and criticism because they’d naturally form an opinion. If a personal website hasn’t been up-kept then it could hinder their application, not enhance it."'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;He's got a point. It's not only about the design. There's a part that we rarely think about in advance:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Websites have to be maintained.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Over time, things will change. Your links might go 404, a change in one part of the code might break another feature. Personal projects that once were cool look crappy now. Our resume receives updates.&lt;/p&gt;

&lt;p&gt;A website has to be checked regularly. I've seen broken links in portfolios that were only a few weeks or months old. Especially in the early days when there are lots of changes to your website and GitHub portfolio the risk of breaking things is high.&lt;/p&gt;

&lt;p&gt;To summarize:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5sQGbUKp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prbib0f9mkhkj1y20cu9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5sQGbUKp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prbib0f9mkhkj1y20cu9.png" alt="Quote by Tiago Dionesto Willrich da Silva - Engineering Team Lead: &amp;quot;I would never consider it a negative point to not have a website. Candidates can earn bonus points if they have one and it's really good. But an ugly or broken page just hurts their chances.&amp;quot;"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A wise man once said: "Better to remain silent and be thought a fool than to speak and to remove all doubt."&lt;/p&gt;

&lt;p&gt;In that manner: it might be better to have no portfolio website than one that looks bad or is broken. Especially since there are great alternatives. &lt;strong&gt;Alternatives that have a way higher impact on your job search as you will see in the next section.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But before we continue it's time for... an ad break. (Not really an ad, more of a freebie that might come in handy if you're just starting your career as a developer. Anyway, grab a coffee, and let's continue.)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://profy.dev/article/portfolio-websites-survey#nl-4469434m8r8a8"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--80magJ72--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/glg50oytwbjgy6gbvpzw.png" alt="Newsletter signup"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alternatives-with-a-higher-impact-on-your-job-search-than-a-portfolio-website"&gt;
  &lt;/a&gt;
  Alternatives with a higher impact on your job search than a portfolio website
&lt;/h2&gt;

&lt;p&gt;If you made the decision to ditch your portfolio website you just saved a lot of time! Congrats. &lt;/p&gt;

&lt;p&gt;But what should you do instead?&lt;/p&gt;

&lt;p&gt;Here are some alternatives that have a higher impact on your job search.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#alternative-1-focus-on-your-github-portfolio"&gt;
  &lt;/a&gt;
  Alternative 1: Focus on your GitHub portfolio
&lt;/h3&gt;

&lt;p&gt;If you don't have professional experience as a developer yet you have to prove your skills. From the perspective of a hiring manager, offering you a job means taking a bet on you. Will you be a valuable asset to their team or not?&lt;/p&gt;

&lt;p&gt;Your public projects on GitHub are a great opportunity to prove that you're job-ready. Your code speaks for itself. And if you &lt;a href="https://profy.dev/article/react-projects-for-your-portfolio"&gt;build your project in a professional way&lt;/a&gt; you can hit a home run on your job search.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PdmK_2MA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/og82oteg452dqna7z4vo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PdmK_2MA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/og82oteg452dqna7z4vo.png" alt='Quote by Sam L. - Recruiter: "I have never had a personal website be a talking point that has come back with positive feedback. However, GitHub and personal projects are nearly always mentioned and talked about."'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sam has an important point: Your GitHub projects are a great conversation starter in job interviews. The interview will typically start with a short introduction round. After that, you'll likely be asked about your past experience. &lt;/p&gt;

&lt;p&gt;If you don't have professional experience yet your GitHub projects provide the interviewers with an alternative. They will ask you about your technical decisions. They will try to follow your thought process. They might ask what you would improve from hindsight.&lt;/p&gt;

&lt;p&gt;This is not only an advantage to the interviewers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You will start the interview by talking about something where you're the expert.&lt;/strong&gt; You built this project. You can show your enthusiasm. You can share your expertise.&lt;/p&gt;

&lt;p&gt;Doesn't this sound much more comfortable than getting purely technical questions about the component life-cycle in React or prototypical inheritance in JavaScript?&lt;/p&gt;

&lt;p&gt;At this point, you might rightfully ask where the difference is. If you publish the source code of your portfolio website it's basically the same as any other GitHub project, isn't it? &lt;/p&gt;

&lt;p&gt;Some of the hiring managers I asked said exactly that. But there's still a small difference.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kiBotRhW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mvo3a5l99got48rd7s9d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kiBotRhW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mvo3a5l99got48rd7s9d.png" alt='Quote by Débora Esteves - Frontend Team Lead: "Better to have no website than a bad one. If one dev has a website but the other has better projects or contributions on GitHub I would give higher priority to GitHub."'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A portfolio website is exactly that: a website. To be more precise, a static website.&lt;/p&gt;

&lt;p&gt;Now, to be frank, these are miles away from real-world web applications. And building web apps is what you're getting hired for as a React developer. Not building static websites.&lt;/p&gt;

&lt;p&gt;The difference is that web applications are dynamic by nature. They are stateful and load data from APIs. They offer interactive elements and forms.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So instead of investing a lot of time into a personal website build one or two full-blown web apps.&lt;/strong&gt; This will much better prove that you have the skills to work on real-world production projects than any static website could do.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That leaves only one question: how and what exactly should you build if your goal is to impress hiring managers?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;No worries, I got your back. &lt;a href="https://profy.dev/article/react-projects-for-your-portfolio"&gt;Here is an in-depth guide into building React portfolio projects that make you shine like a pro.&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#alternative-2-share-your-learnings-in-blog-posts-or-videos"&gt;
  &lt;/a&gt;
  Alternative 2: Share your learnings in blog posts or videos
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--84WT3iHU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cw812pg6gokywexwimph.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--84WT3iHU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cw812pg6gokywexwimph.png" alt='Quote by Dmytro K. - Team Lead: "Blog posts are extremely valuable. I would prefer a non-experienced person with a bunch of articles over a person with less than 1 year of experience"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You have a personal website that also includes a blog? That changes the game. &lt;/p&gt;

&lt;p&gt;It's still a static website that doesn't really prove your production skills. But the focus is not on the website anymore. It's the content that you create.&lt;/p&gt;

&lt;p&gt;In fact, you don't even need a website. Just create an account on &lt;a href="http://dev.to"&gt;dev.to&lt;/a&gt;. On your resume, you simply add a link to your dev.to account instead of the personal website. That's it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The reason why blog posts or other content can have such a great impact are these:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You allow the reader (aka hiring manager) to tap into your thought process.&lt;/li&gt;
&lt;li&gt;You can prove your communication skills.&lt;/li&gt;
&lt;li&gt;You show your expertise.&lt;/li&gt;
&lt;li&gt;You can give the reader a glimpse at your personality.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All these points are super important in getting your first job. But it's difficult for hiring managers to assess your thought process or communication skills outside of a personal interview.&lt;/p&gt;

&lt;p&gt;By creating educational content you provide these valuable insights right away. That can get you a step ahead of other candidates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now, also blog posts may backfire if they are too chaotic. So here are two tips for writing good content.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keep the reader in mind: Ask yourself if you would understand what you write. Identify gaps in your explanations and logically connect your thoughts. This isn't easy and takes practice. But the next step will help a lot.&lt;/li&gt;
&lt;li&gt;Edit the hell out of your content: Once you've written a blog post don't hit the publish button immediately. Let it rest for a bit. Don't look at it for some days. Then come back and read it with a fresh pair of eyes. While you read keep the first point in mind.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point, you may be convinced that writing blog posts is a good idea. &lt;strong&gt;But you may feel that you don't know enough yet, that your English isn't good enough, or that you have no idea what to write about.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But let me guess: You do the following two things regularly, right?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You write code, run into problems, and overcome them somehow.&lt;/li&gt;
&lt;li&gt;You learn new things about coding.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It's simple. Pick either of those and write about it.&lt;/p&gt;

&lt;p&gt;I personally like the first approach a lot because it gives deep insights into your thought process. And it's relatively easy to write about. Just note that it might be helpful to create a stripped-down version of your code to illustrate the problem. That will allow the reader to follow along.&lt;/p&gt;

&lt;p&gt;Kelvin, a student of mine, took the other approach. He learned about integration testing while building the &lt;a href="https://profy.dev"&gt;Reddit Analytics app here on Profy&lt;/a&gt;. He's not a native English speaker and he was new to testing at that point. But still, he wrote &lt;a href="https://dev.to/kelvin9877/how-to-write-tests-for-react-in-2020-4oai"&gt;this article on dev.to&lt;/a&gt; which even got featured in their newsletter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I think I made my point: It doesn't take a lot to write a few blog posts. It will be much less effort than building a portfolio website from scratch. But the impact on getting your first job can be tremendous.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want to take a deep dive into blogging as a developer I can highly recommend &lt;a href="https://bloggingfordevs.com/"&gt;this free course to get started.&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#alternative-3-write-detailed-readmes-for-your-portfolio-projects"&gt;
  &lt;/a&gt;
  Alternative 3: Write detailed READMEs for your portfolio projects
&lt;/h3&gt;

&lt;p&gt;This point is very similar to creating blog posts. Still, it deserves separate mention.&lt;/p&gt;

&lt;p&gt;By writing detailed READMEs for your projects on GitHub you can show your communication skills and present your thought process. Surely not in such a deep way as by writing blog posts. At the same time, it's less time-consuming.&lt;/p&gt;

&lt;p&gt;To be honest, a good README is a must-have for any portfolio project. Here's why:&lt;/p&gt;

&lt;p&gt;Imagine a hiring manager opening one of your GitHub repos. One of the first things they see is the content of the README. Yet most developers simply leave the default content created by "Create React App" untouched. &lt;/p&gt;

&lt;p&gt;What a wasted opportunity.&lt;/p&gt;

&lt;p&gt;Instead, give some information about your app. Write about your technical decisions. Lead the reader to the most important code.&lt;/p&gt;

&lt;p&gt;It can be hard to write your first READMEs, I know. So if you want more information &lt;a href="https://profy.dev/article/react-projects-for-your-portfolio#part-2"&gt;here is a guide to writing READMEs that impress hiring managers&lt;/a&gt;. You can also get a template there.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#alternative-4-optimize-your-resume"&gt;
  &lt;/a&gt;
  Alternative 4: Optimize your resume
&lt;/h3&gt;

&lt;p&gt;When you apply for a job your resume is the first thing anyone sees of you. Let me point it out again: The very first thing.&lt;/p&gt;

&lt;p&gt;This initial contact is likely a recruiter or someone from HR. They will decide within seconds if your resume goes to the trash or if it is worth spending more time on.&lt;/p&gt;

&lt;p&gt;I hope you get the importance of getting your resume in order. Without a decent resume, nobody will even look at your portfolio website or your GitHub projects.&lt;/p&gt;

&lt;p&gt;Despite its impact, many developers seem to spend a very limited amount of time and effort on their resumes. At least judging from many of the resumes I've seen so far.&lt;/p&gt;

&lt;p&gt;Here are my most important tips around resumes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Choose a clean template: Please nothing fancy. It shouldn't use many colors. Just clean and easy to read. You can use &lt;a href="http://flowcv.io"&gt;flowcv.io&lt;/a&gt; to create a great resume quickly.&lt;/li&gt;
&lt;li&gt;Fix spelling and grammar mistakes: Start with an app like &lt;a href="https://www.grammarly.com"&gt;Grammarly&lt;/a&gt;. If you can, get a friend (ideally a native speaker) to proofread.&lt;/li&gt;
&lt;li&gt;Keep the information concise: Use bullet points where you can. If you write a summary paragraph keep it short. If you have work experience mention your impact and contributions.&lt;/li&gt;
&lt;li&gt;Keep the reader in mind: Is everything clear and understandable to an outside person? For example, if you worked for a company in the past, the internal names of projects or features are meaningless to an outsider.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want more information &lt;a href="https://monicalent.com/blog/2020/04/21/software-developer-resume-tips/"&gt;here are some simple tips from an experienced hiring manager that can help you create a standout resume&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now you know how to write a resume. But what about the content?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M3F5QPFF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2vuomtcyvysypyt5b6zr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M3F5QPFF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2vuomtcyvysypyt5b6zr.png" alt='Quote by Jen Huang - Team Lead: "Many of the best and brightest engineers I work with don’t have personal websites or they are heavily outdated. Websites are interesting but I prefer a resume with project information, project links, open-source GitHub activity"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Obviously, your resume should include all the relevant facts about your personal data, work history, experience, and education.&lt;/p&gt;

&lt;p&gt;If you don't have professional experience as a dev yet you should mention your GitHub projects instead. The same is true for any open-source contributions.&lt;/p&gt;

&lt;p&gt;To make life easier for the recruiters or hiring managers, add links to your projects (source code and deployed version). If you have any OS contributions link them as well. For example, by providing links to the Pull Requests on GitHub.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-it-up"&gt;
  &lt;/a&gt;
  Wrapping it up
&lt;/h2&gt;

&lt;p&gt;The results of the survey are clear: The majority of the 60+ hiring managers who took part would look at your portfolio website. But looking at your chances of getting a job we can say: &lt;/p&gt;

&lt;p&gt;It wouldn't matter much if you didn't have a website at all.&lt;/p&gt;

&lt;p&gt;If you want to build a portfolio website anyway, make sure that it looks great and is maintained. It should be responsive. No broken links. No outdated data.&lt;/p&gt;

&lt;p&gt;But be aware that it can take a long time to get everything straight. A portfolio website can become a huge timesink.&lt;/p&gt;

&lt;p&gt;So maybe it's better to pick one of the alternatives mentioned here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Focus on your GitHub portfolio&lt;/li&gt;
&lt;li&gt;Write blog posts&lt;/li&gt;
&lt;li&gt;Write detailed READMEs for your projects&lt;/li&gt;
&lt;li&gt;Optimize your resume&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of these will have a bigger impact on your job hunt than a portfolio website. So invest your time wisely.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://profy.dev/article/portfolio-websites-survey#nl-4469434m8r8a8"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--80magJ72--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/glg50oytwbjgy6gbvpzw.png" alt="Newsletter signup"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>career</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Today's Fun Joke For Developers - Daily Developer Jokes</title>
      <author>Daily Developer Jokes</author>
      <pubDate>Fri, 06 Aug 2021 12:00:19 +0000</pubDate>
      <link>https://dev.to/dailydeveloperjokes/today-s-fun-joke-for-developers-daily-developer-jokes-41nm</link>
      <guid>https://dev.to/dailydeveloperjokes/today-s-fun-joke-for-developers-daily-developer-jokes-41nm</guid>
      <description>&lt;p&gt;Hi there! Here's today's Daily Developer Joke. We hope you enjoy it; it's a good one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CF7MGdxp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://private.xtrp.io/projects/DailyDeveloperJokes/public_image_server/images/5e125894734cf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CF7MGdxp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://private.xtrp.io/projects/DailyDeveloperJokes/public_image_server/images/5e125894734cf.png" alt="Joke Image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;For more jokes, and to submit your own joke to get featured, check out the &lt;a href="https://dailydeveloperjokes.github.io/"&gt;Daily Developer Jokes Website&lt;/a&gt;. We're also open sourced, so feel free to view &lt;a href="https://github.com/dailydeveloperjokes"&gt;our GitHub Profile&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#leave-this-post-a-if-you-liked-todays-joke-and-stay-tuned-for-tomorrows-joke-too"&gt;
  &lt;/a&gt;
  Leave this post a ❤️ if you liked today's joke, and stay tuned for tomorrow's joke too!
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;This joke comes from &lt;a href="https://github.com/wesbos/dad-jokes"&gt;Dad-Jokes GitHub Repo by Wes Bos&lt;/a&gt; (thank you!), whose owner has given me permission to use this joke with credit.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>jokes</category>
      <category>dailydeveloperjokes</category>
    </item>
    <item>
      <title>How to create a Kanban (Trello style) view of your ModelAdmin data in Wagtail</title>
      <author>LB (Ben Johnston)</author>
      <pubDate>Fri, 06 Aug 2021 11:49:32 +0000</pubDate>
      <link>https://dev.to/lb/how-to-create-a-kanban-trello-style-view-of-your-modeladmin-data-in-wagtail-20eg</link>
      <guid>https://dev.to/lb/how-to-create-a-kanban-trello-style-view-of-your-modeladmin-data-in-wagtail-20eg</guid>
      <description>&lt;p&gt;&lt;strong&gt;Goal: Create a ModelAdmin mixin that will make it easy to show an index view as a Kanban board.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why:&lt;/strong&gt; Visual presentation is very helpful for planning and also a high-level understanding of information. Kanban boards provide a recognisable way to show sets of items in columns that represent their 'status' or grouping.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How:&lt;/strong&gt; We want this to be as simple as possible, leveraging existing ModelAdmin conventions where possible and keeping as much of the logic being on the server. Drag &amp;amp; drop would be great but happy to sacrifice real-time / async Javascript behaviour to gain simplicity.&lt;/p&gt;

&lt;p&gt;Inspiration: Kanban, notion.so, Trello, Github &amp;amp; Gitlab Kanban interface.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;Versions&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wagtail 2.14&lt;/li&gt;
&lt;li&gt;Python 3.6&lt;/li&gt;
&lt;li&gt;Django 3.2&lt;/li&gt;
&lt;li&gt;jkanban 1.3 (Javascript/npm library)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Key Parts to Understand&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Terminology&lt;/li&gt;
&lt;li&gt;ModelAdmin (Wagtail's not Django's)&lt;/li&gt;
&lt;li&gt;Class Mixin&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#tutorial"&gt;
  &lt;/a&gt;
  Tutorial
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-prepare-a-modeladmin-model"&gt;
  &lt;/a&gt;
  1. Prepare a ModelAdmin model
&lt;/h3&gt;

&lt;p&gt;For this tutorial we will be using &lt;a href="https://arstechnica.com"&gt;ArsTechnica&lt;/a&gt;'s &lt;a href="https://arstechnica.com/newsletters/?subscribe=248910"&gt;Rocket Report&lt;/a&gt; as inspiration. As of writing the latest report was &lt;a href="https://arstechnica.com/science/2021/07/rocket-report-super-heavy-lights-up-china-tries-to-recover-a-fairing/"&gt;Rocket Report: Super Heavy lights up&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This regular post contains a &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;byline&lt;/code&gt;, &lt;code&gt;preamble&lt;/code&gt;, a &lt;code&gt;reports&lt;/code&gt; section which breaks up the news snippets into class of launch (small, medium and large). At the end of the report there, is a small &lt;code&gt;timeline&lt;/code&gt; of upcoming launches. The part we want to focus on for this tutorial is the &lt;code&gt;reports&lt;/code&gt; section, and &lt;a href="https://docs.wagtail.io/en/stable/topics/snippets.html"&gt;Wagtail's snippets&lt;/a&gt; are a perfect way to store this kind of related content in a centralised way.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#create-app"&gt;
  &lt;/a&gt;
  Create app
&lt;/h4&gt;

&lt;p&gt;We assume you already have a Wagtail application up and running, so our first step will be to find a place to store all our custom logic and models. We will &lt;a href="https://docs.djangoproject.com/en/3.0/ref/django-admin/#startapp"&gt;start a new app&lt;/a&gt; called &lt;code&gt;rocket_report&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;django-admin startapp rocket_report&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Update your &lt;code&gt;settings.py&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="c1"&gt;# ...
&lt;/span&gt;  &lt;span class="s"&gt;'rocket_report'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;# ... wagtail &amp;amp; django items
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There will now be an app folder &lt;code&gt;rocket_report&lt;/code&gt; with models, views, etc.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#create-page-model"&gt;
  &lt;/a&gt;
  Create page Model
&lt;/h4&gt;

&lt;p&gt;Our next step will be to define our &lt;code&gt;RocketReportPage&lt;/code&gt; &lt;a href="https://docs.wagtail.io/en/stable/topics/pages.html"&gt;page model&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add a page model to your &lt;code&gt;models.py&lt;/code&gt; file, code example below.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;./manage.py makemigrations&lt;/code&gt; &amp;amp; &lt;code&gt;./manage.py migrate&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Restart the dev server to validate that we can now add a Rocket Report Page in Wagtail's admin&lt;/li&gt;
&lt;li&gt;Add one page for use throughout the rest of the tutorial
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;modelcluster.fields&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ParentalKey&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.core.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Orderable&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.core.fields&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RichTextField&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.admin.edit_handlers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FieldPanel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;InlinePanel&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.images.edit_handlers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ImageChooserPanel&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RocketReportPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c1"&gt;# Database fields
&lt;/span&gt;    &lt;span class="n"&gt;byline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;preamble&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RichTextField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;main_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;"wagtailimages.Image"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SET_NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"+"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Editor panels configuration
&lt;/span&gt;    &lt;span class="n"&gt;content_panels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_panels&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;FieldPanel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"byline"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;FieldPanel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"preamble"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;classname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"full"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;ImageChooserPanel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"main_image"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="c1"&gt;# TBC - reports
&lt;/span&gt;        &lt;span class="n"&gt;InlinePanel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"related_launches"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Timeline"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Launch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Orderable&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParentalKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;RocketReportPage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CASCADE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"related_launches"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Launch date"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;details&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;panels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;FieldPanel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"date"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;FieldPanel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"details"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#create-snippet-model"&gt;
  &lt;/a&gt;
  Create snippet Model
&lt;/h4&gt;

&lt;p&gt;Our rocket report items will be &lt;a href="https://docs.wagtail.io/en/stable/topics/snippets.html"&gt;Wagtail Snippets&lt;/a&gt;, this gives a simple way to edit, manage and select these items for our pages.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add the snippet model to your same &lt;code&gt;models.py&lt;/code&gt; file, code example below.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;./manage.py makemigrations&lt;/code&gt; &amp;amp; &lt;code&gt;./manage.py migrate&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Restart the dev server to validate that we can now add the snippet in Wagtail's admin&lt;/li&gt;
&lt;li&gt;Add some snippet entries for use throughout the rest of the tutorial
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="c1"&gt;# ... include existing imports from model.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.snippets.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;register_snippet&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.snippets.edit_handlers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SnippetChooserPanel&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.admin.edit_handlers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FieldPanel&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RocketReportPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# ...
&lt;/span&gt;    &lt;span class="n"&gt;content_panels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_panels&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="c1"&gt;# ... other field panels
&lt;/span&gt;        &lt;span class="n"&gt;ImageChooserPanel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"main_image"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="c1"&gt;# ... other field panels
&lt;/span&gt;    &lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;register_snippet&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RocketReport&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;STATUS_CHOICES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"SUBMITTED"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Submitted"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"REVIEWED"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Reviewed"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"PROPOSED"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Proposed"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"HOLD"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Hold"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"CURRENT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Current"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;CATEGORY_CHOICES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"BLANK"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Uncategorised"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"SMALL"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Small"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MEDIUM"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Medium"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"LARGE"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Large"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;submitted_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;URLField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;submitted_by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;STATUS_CHOICES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RichTextField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CATEGORY_CHOICES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"BLANK"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;panels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;FieldPanel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;FieldPanel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"status"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;FieldPanel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"category"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;FieldPanel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;FieldPanel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"submitted_url"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;FieldPanel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"submitted_by"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RocketReportPageReportPlacement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Orderable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ParentalKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;RocketReportPage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CASCADE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"rocket_reports"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;rocket_report&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;RocketReport&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CASCADE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"+"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;panels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;SnippetChooserPanel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"rocket_report"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" -&amp;gt; "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rocket_report&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#register-with-modeladmin"&gt;
  &lt;/a&gt;
  Register with ModelAdmin
&lt;/h4&gt;

&lt;p&gt;Now we can register the report model using &lt;a href="https://docs.wagtail.io/en/stable/reference/contrib/modeladmin/index.html"&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt;. Note that this is Wagtail's ModelAdmin not Django's.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add &lt;code&gt;wagtail.contrib.modeladmin&lt;/code&gt; to your &lt;code&gt;INSTALLED_APPS&lt;/code&gt; in your &lt;code&gt;settings.py&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Add a new &lt;code&gt;ModelAdmin&lt;/code&gt; class in admin.py, code example below.&lt;/li&gt;
&lt;li&gt;Register this class in a new file &lt;code&gt;wagtail_hooks.py&lt;/code&gt;, code example below.&lt;/li&gt;
&lt;li&gt;Validate that we now have an admin sidebar item for 'Rocket Reports' which will show the default ModelAdmin item list.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# admin.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.contrib.modeladmin.options&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ModelAdmin&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RocketReport&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RocketReportAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RocketReport&lt;/span&gt;
    &lt;span class="n"&gt;menu_icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"fa-rocket"&lt;/span&gt;
    &lt;span class="n"&gt;list_display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"status"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"category"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"submitted_by"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;list_filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"status"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"category"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;search_fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"status"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"category"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"submitted_by"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# wagtail_hooks.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.contrib.modeladmin.options&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;modeladmin_register&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.admin&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RocketReportAdmin&lt;/span&gt;

&lt;span class="n"&gt;modeladmin_register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RocketReportAdmin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-create-a-template-view-amp-mixin"&gt;
  &lt;/a&gt;
  2. Create a template, view &amp;amp; mixin
&lt;/h3&gt;

&lt;p&gt;We are going to now set up a custom &lt;code&gt;KanbanMixin&lt;/code&gt; that will house the customisations to our &lt;code&gt;ModelAdmin&lt;/code&gt;. We could put all of these customisations directly on our &lt;code&gt;RocketReportAdmin&lt;/code&gt; but we want to set up something reusable. It would be good to have a basic understanding of how to &lt;a href="https://docs.wagtail.io/en/stable/reference/contrib/modeladmin/indexview.html"&gt;customise the index view (listing)&lt;/a&gt; before reading on.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#create-kanban-index-template"&gt;
  &lt;/a&gt;
  Create Kanban index template
&lt;/h4&gt;

&lt;p&gt;We will be using a Javascript library to do the client-side rendering and handling of interaction for our basic Kanban board. There are a lot of &lt;a href="https://github.com/topics/kanban?l=javascript"&gt;Kanban JS libraries on Github&lt;/a&gt; and a few &lt;a href="https://dev.toKanban%20packages%20on%20NPM"&gt;Kanban packages on NPM&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The package we will use is &lt;a href="https://www.riccardotartaglia.it/jkanban/"&gt;Jkanban&lt;/a&gt;, it has a simple API and does not rely on third-party dependencies. For simplicity, we will use the jsdelivr service to provide our script and CSS, find the package and use the &lt;a href="https://www.jsdelivr.com/package/npm/jkanban?path=dist"&gt;dist directory to get your script and style tags&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a template file &lt;code&gt;/templates/modeladmin/kanban_index.html&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;To inherit the existing modeladmin index listing layout (header, search bar, title etc) add &lt;code&gt;{% extends "modeladmin/index.html" %}&lt;/code&gt; at the top&lt;/li&gt;
&lt;li&gt;The content blocks we will use, provided by the above template are &lt;code&gt;extra_css&lt;/code&gt;, &lt;code&gt;extra_js&lt;/code&gt; and &lt;code&gt;content_main&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Remember to add &lt;code&gt;{{ block.super }}&lt;/code&gt; to the js &amp;amp; css blocks so that existing scripts and styles will be used.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;content_main&lt;/code&gt; block - add a div that will contain the Kanban with class &lt;code&gt;kanban-wrapper listing&lt;/code&gt; and an inner div with an id &lt;code&gt;kanban-mount&lt;/code&gt; which is used by JKanban to add the rendered kanban board&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;extra_css&lt;/code&gt; block - Add the &lt;code&gt;link&lt;/code&gt; tag from jsdelivr and some basic styles within a &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag, in the code below we are starting with some margins and handling of longer boards&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;extra_js&lt;/code&gt; block - our goal is to simply load up some dummy data based on the &lt;a href="https://github.com/riktar/jkanban#var-kanban--new-jkanbanoptions"&gt;options docs for jKanban&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DOMContentLoaded&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;boards&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;column-0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Column A&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item-1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Item 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item-2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Item 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item-1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Item 3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;column-1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Column B&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item-4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Item 4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item-5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Item 4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item-5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Item 6&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// build the kanban board with supplied options&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;kanban&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;jKanban&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;element&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#kanban-mount&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#full-template-code"&gt;
  &lt;/a&gt;
  Full template code
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{% extends "modeladmin/index.html" %}
{% comment %} templates/modeladmin/kanban_index.html {% endcomment %}

{% block extra_css %}
    {{ block.super }}
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/jkanban@1/dist/jkanban.min.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
      &lt;span class="nc"&gt;.kanban-wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;overflow-x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* add horizontal scrolling for wide boards */&lt;/span&gt;
        &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nc"&gt;.kanban-item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
{% endblock %}

{% block extra_js %}
  {{ block.super }}
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/jkanban@1/dist/jkanban.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DOMContentLoaded&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;boards&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;column-0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Column A&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;item-1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Item 1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;item-2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Item 2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;item-1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Item 3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}]}&lt;/span&gt;
          &lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;column-1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Column B&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;item-4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Item 4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;item-5&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Item 4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;item-5&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Item 6&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

      &lt;span class="c1"&gt;// build the kanban board with supplied options&lt;/span&gt;
      &lt;span class="c1"&gt;// see: https://github.com/riktar/jkanban#var-kanban--new-jkanbanoptions&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;kanban&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;jKanban&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;element&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#kanban-mount&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}));&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
{% endblock %}

{% block content_main %}
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"kanban-wrapper listing"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"kanban-mount"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#create-mixin-with-template-override"&gt;
  &lt;/a&gt;
  Create Mixin with template override
&lt;/h4&gt;

&lt;p&gt;A template is only good if we can get our &lt;code&gt;ModelAdmin&lt;/code&gt; to use it when rendering the index listing view instead of the default. We can leverage a mixin approach to override the &lt;code&gt;ModelAdmin&lt;/code&gt; methods while still honouring the &lt;a href="https://docs.wagtail.io/en/stable/reference/contrib/modeladmin/primer.html#overriding-templates"&gt;existing config on a per app or model basis&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We will store our mixin in the &lt;code&gt;admin.py&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ModelAdmin&lt;/code&gt; uses a method &lt;code&gt;get_index_template&lt;/code&gt; to get the index listing template, simply override this to call the defined &lt;code&gt;index_template_name&lt;/code&gt; or &lt;code&gt;get_templates("kanban_index")&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;This will ensure that the template made above will be found at &lt;code&gt;templates/modeladmin/kanban_index.html&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Be sure to add the mixin to your &lt;code&gt;RocketReportAdmin&lt;/code&gt; class, before the &lt;code&gt;ModelAdmin&lt;/code&gt; usage.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# rocket_report/admin.py
&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;KanbanMixin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_index_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# leverage the get_template to allow individual override on a per model basis
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index_template_name&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_templates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"kanban_index"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RocketReportAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KanbanMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RocketReport&lt;/span&gt;
    &lt;span class="c1"&gt;# ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#create-view-to-supply-mock-data-to-the-kanban-board"&gt;
  &lt;/a&gt;
  Create View to supply mock data to the kanban board
&lt;/h4&gt;

&lt;p&gt;Our goal is to keep as much logic on the server, so we need a way to provide the board data from our Django view to our client. Doing this comes with some issues of encoding/decoding and ensuring that server generated content cannot inject Javascript.&lt;/p&gt;

&lt;p&gt;Thankfully, Django helps us out with its builtin tag &lt;a href="https://docs.djangoproject.com/en/3.0/ref/templates/builtins/#json-script"&gt;&lt;code&gt;json_script&lt;/code&gt;&lt;/a&gt; which provides a way for sever generated content to be provided to JS in a view in a safe way.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add a new view to the app's &lt;code&gt;views.py&lt;/code&gt; called &lt;code&gt;KanbanView&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;This view will inherit the modeladmin &lt;code&gt;wagtail.contrib.modeladmin.views.IndexView&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Override &lt;code&gt;get_context_data&lt;/code&gt;, calling super and then adding &lt;code&gt;kanban_options&lt;/code&gt; with similar dummy data that we used in the template&lt;/li&gt;
&lt;li&gt;Use this &lt;code&gt;KanbanView&lt;/code&gt; within the &lt;code&gt;KanbanMixin&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Update the &lt;code&gt;kanban_index.html&lt;/code&gt; to inject the JSON data via json-script
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# views.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.contrib.modeladmin.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;IndexView&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;KanbanView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IndexView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_kanban_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"column-id-%s"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"item-id-%s"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"pk"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;],}&lt;/span&gt;
                    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="p"&gt;[&lt;/span&gt;
                            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"pk"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"%s Item 1"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"pk"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"%s Item 2"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"pk"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"%s Item 3"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                        &lt;span class="p"&gt;]&lt;/span&gt;
                    &lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;"column a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"column b"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"column c"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_context_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;get_context_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# replace object_list in context as we do not want it to be paginated
&lt;/span&gt;        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"object_list"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queryset&lt;/span&gt;

        &lt;span class="c1"&gt;# see: https://github.com/riktar/jkanban#var-kanban--new-jkanbanoptions
&lt;/span&gt;        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"kanban_options"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"addItemButton"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"boards"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_kanban_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="s"&gt;"dragBoards"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"dragItems"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# rocket_report/admin.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.contrib.modeladmin.options&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ModelAdmin&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;KanbanView&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RocketReport&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;KanbanMixin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="n"&gt;index_view_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;KanbanView&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_index_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;#...
&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RocketReportAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KanbanMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RocketReport&lt;/span&gt;
    &lt;span class="c1"&gt;# ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{% comment %} templates/modeladmin/kanban_index.html (just the JS block shown) {% endcomment %}
{% block extra_js %}
  {{ block.super }}
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/jkanban@1/dist/jkanban.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  {{ kanban_options|json_script:"kanban-options" }}
  &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DOMContentLoaded&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// load the options from server&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;kanban-options&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;loaded&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

      &lt;span class="c1"&gt;// build the kanban board with supplied options&lt;/span&gt;
      &lt;span class="c1"&gt;// see: https://github.com/riktar/jkanban#var-kanban--new-jkanbanoptions&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;kanban&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;jKanban&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;element&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#kanban-mount&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}));&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-render-items-columns-from-actual-data"&gt;
  &lt;/a&gt;
  3. Render items columns from actual data
&lt;/h3&gt;

&lt;p&gt;Our goal here is to finish this basic implementation by generating columns and items from the correct &lt;code&gt;Model&lt;/code&gt;. To achieve this we will revise the &lt;code&gt;KanbanMixin&lt;/code&gt; to have some methods for smaller templates (used for the title/content) and methods to determine what field will be used for the columns. After that, we can revise the View to prepare all the data.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#revise-the-kanbanmixin-and-add-small-templates"&gt;
  &lt;/a&gt;
  Revise the KanbanMixin and add small templates
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Add a method &lt;code&gt;get_kanban_item_template&lt;/code&gt; to look for a template with the name &lt;code&gt;kanban_item&lt;/code&gt; but also allow the Mixin usage to declare an attribute &lt;code&gt;kanban_item_template_name&lt;/code&gt;. This way we can have simple defaults but allow each &lt;code&gt;KanbanMixin&lt;/code&gt; to declare custom templates for the items on a per model basis.&lt;/li&gt;
&lt;li&gt;Add a method &lt;code&gt;get_kanban_column_title_template&lt;/code&gt; that is similar to the above but for the column title.&lt;/li&gt;
&lt;li&gt;Add a method &lt;code&gt;get_kanban_column_field&lt;/code&gt; which will return the first field name from the &lt;code&gt;list_filter&lt;/code&gt; attribute on the Mixin usage, this means we can leverage the existing ModelAdmin attributes approach.&lt;/li&gt;
&lt;li&gt;Finally, add a method &lt;code&gt;get_kanban_column_name_default&lt;/code&gt; for a default column name, this will be used when there is no value for the Kanban column field (e.g. a drop-down where a None/blank value is selected).
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# rocket_report/admin.py
&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;KanbanMixin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;index_view_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;KanbanView&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_index_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# leverage the get_template to allow individual override on a per model basis
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index_template_name&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_templates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"kanban_index"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_kanban_item_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# leverage the get_template to allow individual override on a per model basis
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"kanban_item_template_name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_templates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"kanban_item"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_kanban_column_title_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# leverage the get_template to allow individual override on a per model basis
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"kanban_column_title_template_name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_templates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"kanban_column_title"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_kanban_column_field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# return a field to use to determine which column the item will be shown in
&lt;/span&gt;        &lt;span class="c1"&gt;# pull in the first value from list_filter if no specific column set
&lt;/span&gt;        &lt;span class="n"&gt;list_filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"list_filter"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
        &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list_filter&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;list_filter&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_kanban_column_name_default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# used for the column title name for None or no column scenarios
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"kanban_column_name_default"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Other"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#revise-the-kanbanmixin-and-add-small-templates"&gt;
  &lt;/a&gt;
  Revise the KanbanMixin and add small templates
&lt;/h4&gt;

&lt;p&gt;There is a lot changed in this final step, the main methods added to the &lt;code&gt;KanbanView&lt;/code&gt; are to generate all the various parts (columns/items) and use the template in each of those parts set up in the &lt;code&gt;KanbanMixin&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add a method &lt;code&gt;render_kanban_item_html&lt;/code&gt; which will pull in the action buttons (part of &lt;code&gt;ModelAdmin&lt;/code&gt;), the template and then pass all the data to the template from the &lt;code&gt;get_kanban_item_template&lt;/code&gt; method. This will return a string (HTML) which will, in turn, be passed to the JSON data for the Kanban board.&lt;/li&gt;
&lt;li&gt;Add a method &lt;code&gt;render_kanban_column_title_html&lt;/code&gt; which will pass the context to the configured title template.&lt;/li&gt;
&lt;li&gt;Add a method &lt;code&gt;get_kanban_columns&lt;/code&gt; that uses a query which will gather ALL the Model instances and prepare the data which has groupings of those Models by their column, along with the columns (with their names) also.&lt;/li&gt;
&lt;li&gt;Replace the method &lt;code&gt;get_kanban_data&lt;/code&gt; with a series of List parsing that goes through the column data and prepares the items to be placed within each column in a format that, when converted to JSON, is suitable for jKanban.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.admin.templatetags.admin_list&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;result_headers&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.template.loader&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render_to_string&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.contrib.modeladmin.templatetags.modeladmin_tags&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;result_list&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wagtail.contrib.modeladmin.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;IndexView&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;KanbanView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IndexView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render_kanban_item_html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;"""
        Allow for template based rendering of the content that goes inside each item
        Prepare action buttons that will be the same as the classic modeladmin index
        """&lt;/span&gt;

        &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"obj"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;
        &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"action_buttons"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_buttons_for_obj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model_admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_kanban_item_template&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;render_kanban_column_title_html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;"""
        Allow for template based rendering of the content that goes at the top of a column
        """&lt;/span&gt;

        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model_admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_kanban_column_title_template&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_kanban_columns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;"""
        Gather all column related data
        columns: name &amp;amp; count queryset
        default: label of a column that either has None value or does not exist on the field
        field: field name that is used to get the value from the instance
        key: internal use key to refer to the annotated column name label value
        queryset original queryset annotated with the column name label
        """&lt;/span&gt;
        &lt;span class="n"&gt;object_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queryset&lt;/span&gt;

        &lt;span class="n"&gt;column_field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model_admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_kanban_column_field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;column_name_default&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model_admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_kanban_column_name_default&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;column_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"__column_name"&lt;/span&gt;

        &lt;span class="n"&gt;queryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;object_list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;annotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;__column_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column_field&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;column_field&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column_name_default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output_field&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column_key&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;asc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nulls_first&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;column_field&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;column_key&lt;/span&gt;

        &lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column_key&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;annotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"pk"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"columns"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column_name_default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"field"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column_field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"queryset"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_kanban_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;"""
        Prepares the data that is used by the Kanban js library
        An array of columns, each with an id, title (html) and item
        Item value in each column contains an array of items which has a column, id &amp;amp; title (html)
        """&lt;/span&gt;
        &lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_kanban_columns&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c1"&gt;# use existing model_admin utility to build headers/values
&lt;/span&gt;        &lt;span class="n"&gt;result_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# set up items (for ALL columns)
&lt;/span&gt;        &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;"column"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
                &lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"item-id-%s"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render_kanban_item_html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"label"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;result_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"results"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
                        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"result_headers"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                    &lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"queryset"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="c1"&gt;# set up columns (aka boards) with sets of filtered items inside
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"column-id-%s"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"column"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
                &lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render_kanban_column_title_html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"count"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                    &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"columns"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_context_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# ... (same as before)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#final-solution"&gt;
  &lt;/a&gt;
  Final Solution
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k0R3iZR5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipspx50b7gng6ve72af4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k0R3iZR5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipspx50b7gng6ve72af4.png" alt="Screenshot of Kanban page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Code can be found &lt;a href="https://github.com/lb-/bakerydemo/tree/tutorial/kanban-model-admin-ready/rocket_report"&gt;Github / lb-&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#future-improvements-amp-feedback"&gt;
  &lt;/a&gt;
  Future Improvements &amp;amp; Feedback
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;It took a while to get this published, so hopefully it all came together well but I would love any feedback and hope this is helpful to someone.&lt;/li&gt;
&lt;li&gt;Better handling of pre-setting 'values' for each item's field/value, currently renders inside &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; tags due to existing &lt;code&gt;ModelAdmin&lt;/code&gt; assumptions.&lt;/li&gt;
&lt;li&gt;Handling drag &amp;amp; drop (even real-time) with column number updates and toast style messages, you can view a rough version of this in the repo above (see commit &lt;a href="https://github.com/lb-/bakerydemo/commit/27edc8b48e91a7c90ae8f382b50368b32cddcd8a"&gt;ORIGINAL ROUGH IMPLEMENTATION&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>wagtail</category>
      <category>trello</category>
      <category>kanban</category>
    </item>
    <item>
      <title>Simple Guide: How To Set Up A Snake Eating Your Contributions On GitHub</title>
      <author>Helena Archer</author>
      <pubDate>Fri, 06 Aug 2021 11:22:58 +0000</pubDate>
      <link>https://dev.to/archianne/simple-guide-how-to-set-up-a-snake-eating-your-contributions-on-github-kni</link>
      <guid>https://dev.to/archianne/simple-guide-how-to-set-up-a-snake-eating-your-contributions-on-github-kni</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8mFbywjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mt7sv4zp7s4yxmx3l583.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8mFbywjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mt7sv4zp7s4yxmx3l583.gif" alt="Snake"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Would you like to have a snake eating all your contributions on your GitHub Profile README? Well, thanks to &lt;a href="https://github.com/Platane/snk"&gt;Platane&lt;/a&gt;, that is possible!&lt;br&gt;
&lt;a href="https://github.com/Archianne"&gt;Check it out&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#are-you-ready"&gt;
  &lt;/a&gt;
  Are you ready?
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kToJvTJG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://reactiongifs.me/wp-content/uploads/2020/09/Eating-Popcorn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kToJvTJG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://reactiongifs.me/wp-content/uploads/2020/09/Eating-Popcorn.gif" alt="Eating Popcorn"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#step-1-create-your-profile-readme"&gt;
  &lt;/a&gt;
  Step 1: Create your profile README
&lt;/h3&gt;

&lt;p&gt;That would be the README that is shown on your profile link, you create it with a repository with the same name as your GitHub username (including casing). If you wanna know more about it &lt;a href="https://dev.to/archianne/simple-guide-how-to-create-a-profile-for-github-2jom"&gt;click here&lt;/a&gt;.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#step-2-set-up-your-github-actions"&gt;
  &lt;/a&gt;
  Step 2: Set up your GitHub Actions
&lt;/h3&gt;

&lt;p&gt;➡️ On your profile repository click on &lt;code&gt;Actions&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UTni9jnp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ifs6rs4xwbzbjvhgnkim.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UTni9jnp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ifs6rs4xwbzbjvhgnkim.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;➡️ Create a new workflow and click on &lt;code&gt;set up a workflow yourself&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZiJoxlN6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ylrnm9xdgynosi289h7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZiJoxlN6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ylrnm9xdgynosi289h7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;➡️ Make sure the workflow you are setting up is a &lt;code&gt;yml&lt;/code&gt; file&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ps-WRb3O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzdyuemyjartps5zoqev.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ps-WRb3O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzdyuemyjartps5zoqev.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;➡️ On &lt;code&gt;Edit new file&lt;/code&gt; you can paste this and the line &lt;code&gt;github_user_name: [YOUR_USERNAME_HERE]&lt;/code&gt; with your GitHub Username&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
name: Generate Snake

on:
  schedule: # execute every 12 hours
    - cron: "* */12 * * *"
  workflow_dispatch:

jobs:
  build:
    name: Update Data
    runs-on: ubuntu-latest
    steps:
      # Snake Animation
      - uses: Platane/snk@master
        id: snake-gif
        with:
          github_user_name: [YOUR_USERNAME_HERE]
          svg_out_path: dist/github-contribution-grid-snake.svg

  - uses: crazy-max/ghaction-github-pages@v2.1.3
    with:
      target_branch: output
      build_dir: dist
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I3_KIGqs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6df3z7x5jx39qrmwsdig.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I3_KIGqs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6df3z7x5jx39qrmwsdig.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;➡️ Under &lt;code&gt;Workflows&lt;/code&gt;, you should see the &lt;code&gt;Generate Snake&lt;/code&gt; Action you created. You should have now a green ✅ "build" checkmark. That means your Action is working and you're ready for the next step&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#step-3-add-to-your-readme"&gt;
  &lt;/a&gt;
  Step 3: Add to your README
&lt;/h3&gt;

&lt;p&gt;So there are 2 ways of adding that to your README file. You can either use Markdown or good old HTML&lt;/p&gt;

&lt;p&gt;I decided to go for HTML so I could centre the image. That's how it looks on mine:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PJzWcPnP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fy142y8unxyqsz9phxo6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PJzWcPnP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fy142y8unxyqsz9phxo6.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;➡️ Don't forget to change &lt;code&gt;YOUR_USERNAME&lt;/code&gt; for your GitHub Username.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;img src="https://github.com/YOUR_USERNAME/YOUR_USERNAME/blob/output/github-contribution-grid-snake.svg" /&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;OR&lt;/p&gt;

&lt;p&gt;&lt;code&gt;![Snake](https://github.com/YOUR_USERNAME/YOUR_USERNAME/blob/output/github-contribution-grid-snake.svg)&lt;/code&gt;&lt;/p&gt;




&lt;a href="https://github.com/Archianne/"&gt;✨Follow me on GitHub✨&lt;/a&gt;

</description>
      <category>github</category>
      <category>opensource</category>
      <category>readme</category>
      <category>profile</category>
    </item>
    <item>
      <title>Deploying CI/CD For NodeJS Serverless Applications Workshop: Part II</title>
      <author>Salah Elhossiny</author>
      <pubDate>Fri, 06 Aug 2021 11:06:47 +0000</pubDate>
      <link>https://dev.to/aws-builders/deploying-ci-cd-for-nodejs-serverless-applications-workshop-part-ii-3df2</link>
      <guid>https://dev.to/aws-builders/deploying-ci-cd-for-nodejs-serverless-applications-workshop-part-ii-3df2</guid>
      <description>&lt;p&gt;In the first part, we setup the environment, created a simple Node.JS app, explored the SAM template, and lambda code. &lt;/p&gt;

&lt;p&gt;In this part, we will run the project locally. &lt;/p&gt;

&lt;p&gt;You will learn how to run it and test it locally using the AWS SAM CLI. This is important because its part of the day to day development workflow. It helps you verify if the application is behaving as expected, debug what’s wrong, and fix any issues before pushing your changes to a central repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vveUmsqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zuxej64a0xb8ao9r1rvw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vveUmsqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zuxej64a0xb8ao9r1rvw.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-dependencies"&gt;
  &lt;/a&gt;
  INSTALL DEPENDENCIES
&lt;/h2&gt;

&lt;p&gt;Before we run the application locally, it’s a common practice to install third-party libraries or dependencies that your application might be using. These dependencies are defined in a file that varies depending on the runtime, for example package.json for NodeJS projects or requirements.txt for Python ones.&lt;/p&gt;

&lt;p&gt;In the terminal, go into the sam-app/hello-world folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;sam-app/hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And install the dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QgO6bVzZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qdqjhf65m2avb7qiauek.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QgO6bVzZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qdqjhf65m2avb7qiauek.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#run-using-sam-cli"&gt;
  &lt;/a&gt;
  RUN USING SAM CLI
&lt;/h2&gt;

&lt;p&gt;There are 2 ways of running a Serverless app locally: 1) By invoking an individual Lambda function or 2) By running a local HTTP server that simulates API Gateway.&lt;/p&gt;

&lt;p&gt;We will focus on number 2, but you can learn about invoking individual functions in the &lt;a href="https://docs.aws.amazon.com/en_pv/serverless-application-model/latest/developerguide/sam-cli-command-reference-sam-local-invoke.html"&gt; SAM Local Invoke reference &lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;In the terminal, run the following command from the root directory of the sam-app folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/environment/sam-app
sam &lt;span class="nb"&gt;local &lt;/span&gt;start-api &lt;span class="nt"&gt;--port&lt;/span&gt; 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#test-your-endpoint"&gt;
  &lt;/a&gt;
  Test your endpoint
&lt;/h3&gt;

&lt;p&gt;Once your local server is running, we can send HTTP requests to test it. Chose one of the following options:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#option-a-using-curl"&gt;
  &lt;/a&gt;
  Option A) Using CURL
&lt;/h4&gt;

&lt;p&gt;Without killing the running process, open a new terminal. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1T8wVwig--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pu05riuyxse9jpwtkfks.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1T8wVwig--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pu05riuyxse9jpwtkfks.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Test your endpoint by running a CURL command that triggers an HTTP GET request.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl http://localhost:8080/hello
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#option-b-using-a-browser-window"&gt;
  &lt;/a&gt;
  Option B) Using a browser window
&lt;/h4&gt;

&lt;p&gt;In Cloud9, go to the top menu and chose Tools &amp;gt; Preview &amp;gt; Preview Running Application. A browser tab will open, append /hello to the end of the URL. &lt;/p&gt;

&lt;p&gt;This will invoke your Lambda function locally.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H0ybG3Tc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ggp0tle9xpak4s2pzp05.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H0ybG3Tc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ggp0tle9xpak4s2pzp05.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note how SAM is pulling the Docker container image lambci/lambda:nodejs12.x automatically. This is how SAM is able to simulate the Lambda runtime locally and run your function within it. The first invocation might take a few seconds due to the docker pull command, but subsequent invocations should be much faster.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#make-a-code-change"&gt;
  &lt;/a&gt;
  MAKE A CODE CHANGE
&lt;/h3&gt;

&lt;p&gt;While the app is still running, open the file sam-app/hello-world/app.js and make a simple code change. For example, change the response message to return hello my friend instead of hello world. Your Lambda handler should look like this after the change:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KDHDNJPe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2io9zh8nmtybaoibh12l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KDHDNJPe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2io9zh8nmtybaoibh12l.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#note-make-sure-you-save-the-file-after-changing-it"&gt;
  &lt;/a&gt;
  Note: Make sure you save the file after changing it.
&lt;/h6&gt;

&lt;p&gt;You don’t have to restart the sam local process, just refresh the browser tab or re-trigger the CURL command to see the changes reflected in your endpoint.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tX-kV99X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mks5wsipym36do605xeg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tX-kV99X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mks5wsipym36do605xeg.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#run-the-unit-tests"&gt;
  &lt;/a&gt;
  RUN THE UNIT TESTS
&lt;/h4&gt;

&lt;p&gt;As you typically would, with any software project, running the unit tests locally is no different for Serverless applications. Developers run them before pushing changes to a code repository. So, go ahead and run the unit tests for your project.&lt;/p&gt;

&lt;p&gt;In the terminal, run this command from the sam-app/hello-world folder to run the unit tests:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/environment/sam-app/hello-world
npm run &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The tests should fail. This is expected!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nnEBK239--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7isy1qn1xfhqe9e9iwe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nnEBK239--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7isy1qn1xfhqe9e9iwe.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#fix-the-unit-test"&gt;
  &lt;/a&gt;
  Fix the unit test
&lt;/h4&gt;

&lt;p&gt;Makes sense right? We changed the response message to hello my friend and the unit test was expecting hello world. This is an easy fix, let’s update the unit test.&lt;/p&gt;

&lt;p&gt;Open the file sam-app/hello-world/tests/unit/test-handler.js and update the expected value for the response to match the new message. The unit test should look like this after the update:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../app.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;chai&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chai&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;chai&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tests index&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;verifies successful response&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lambdaHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;an&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;an&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;an&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello my friend&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;- FIX&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#run-the-tests-again"&gt;
  &lt;/a&gt;
  Run the tests again
&lt;/h4&gt;

&lt;p&gt;Run the same command again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the tests should pass:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jmMVyPTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jqh5bjvjpbu3zjm85smd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jmMVyPTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jqh5bjvjpbu3zjm85smd.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  Note:
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;This project uses the Chai Framework for running the unit tests, but you can chose any other framework. SAM doesn’t enforce any particular one. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reaching the second part end. In the upcoming part, we will deploy the app manually and build the pipeline. &lt;/p&gt;

</description>
      <category>aws</category>
      <category>node</category>
      <category>cicd</category>
      <category>cloudskills</category>
    </item>
    <item>
      <title>What makes Laravel framework the best choice for PHP development</title>
      <author>Vlad Abapolov</author>
      <pubDate>Fri, 06 Aug 2021 10:55:06 +0000</pubDate>
      <link>https://dev.to/vladabapolov/what-makes-laravel-framework-the-best-choice-for-php-development-232e</link>
      <guid>https://dev.to/vladabapolov/what-makes-laravel-framework-the-best-choice-for-php-development-232e</guid>
      <description>&lt;p&gt;What differentiates Laravel from other PHP frameworks? Speed​, security, and scalability. With Laravel, tasks that usually take hours can be accomplished in a few minutes.&lt;/p&gt;

&lt;p&gt;A framework can make all the difference to the functionality and the quality of the application. With 66+ stars on GitHub, Laravel is one of the most popular PHP frameworks for web development. At the time of writing, the number of active websites using Laravel is over 661,172 and counting.&lt;/p&gt;

&lt;p&gt;Laravel can make web development a seamless and streamlined experience. In this article, I’ll explore some of the vital reasons to consider the PHP Laravel Framework in 2021.&lt;/p&gt;


&lt;h2&gt; Advantages of Laravel

&lt;/h2&gt;
&lt;p&gt;Laravel provides powerful tools needed for robust applications and takes the pain out of development. Let’s have a closer look at some of the benefits Laravel provides to businesses.&lt;/p&gt;

&lt;p&gt;·         Drastically cut development time&lt;br&gt;
Pre-built functions, high-quality community libraries, and tools help to build responsive web applications in a time-efficient manner. With Laravel, there is no need to spend long hours writing tedious lines of code.&lt;/p&gt;

&lt;p&gt;·         High-end security&lt;br&gt;
Laravel can protect your web application against the most severe security risks, including SQL injection, cross-site request forgery, and cross-site scripting. It provides a range of security features and methods, covering authentication, authorization, email verification, encryption, hashing, and password reset.&lt;/p&gt;

&lt;p&gt;·         Easy to implement a complete authentication system&lt;br&gt;
Laravel is known as one of the most modern authentication systems. With Laravel, login, registration, and password reset could be done with the help of a single command.&lt;/p&gt;

&lt;p&gt;·         MVC architecture&lt;br&gt;
Laravel follows the best development practices. The model-view-controller (MVC) architectural pattern ensures clarity between logic and presentation which results in improved performance and better documentation. It offers an extremely convenient way to build both large- and small-scale applications.&lt;/p&gt;

&lt;p&gt;·         Powerful built-in features&lt;br&gt;
Laravel is hugely favored by technical teams because it automates a lot of repetitive coding tasks. It reduces the time needed to complete projects by removing the need to write everything from scratch.&lt;/p&gt;

&lt;p&gt;·         Light-weight templates&lt;br&gt;
Laravel’s lightweight templates and widgets with solid structured CSS and JSS help to create elegant web applications.&lt;/p&gt;

&lt;p&gt;·         Automated task execution&lt;br&gt;
An automatic command scheduler allows you to quickly define your command schedule, such as sending emails to subscribers or notifications to app users.&lt;/p&gt;

&lt;p&gt;·         Keeps a web server healthy&lt;br&gt;
Laravel supports a message queue system for load balancing which helps maintain a healthy web server &amp;amp; effective traffic management.&lt;/p&gt;

&lt;p&gt;·         Automation of testing work&lt;br&gt;
Laravel provides automation testing support which results in high-performing apps with optimized code. This framework makes it less time-consuming to test an app.&lt;/p&gt;

&lt;p&gt;·         Vibrant community&lt;br&gt;
Laravel benefits from a large community of developers. You can find them at Laracasts, a learning portal with courses, blog, podcast, and forum; Laravel.io, a community portal with over 45,000 users; The Laravel subreddit, home to 50,000 Laravel artisans.&lt;/p&gt;


&lt;h2&gt; Companies that use Laravel

&lt;/h2&gt;
&lt;p&gt;What are the largest companies using Laravel? Various top-notch brands have opted for this framework:&lt;/p&gt;

&lt;ul&gt; 
&lt;li&gt;Crowdcube helps private investors find promising start-ups. They have more than 750,000 registered investors, and over 800 businesses are funded through the platform.&lt;/li&gt;
&lt;li&gt;BBC is the world's leading public service broadcaster. They use PHP Laravel for their applications across TV and Content Production.&lt;/li&gt;
&lt;li&gt;Lenovo is a Chinese multinational technology company. The company sells its products in around 180 countries. 
&lt;/li&gt;
&lt;li&gt;TourRadar is an online marketplace where travelers can compare multi-day tours. The company has attracted USD 66 million in funding.&lt;/li&gt;
&lt;li&gt;Vogue archive contains more than 400,000 pages - the entire run of Vogue magazine (US edition) from 1892 to the present day. 
&lt;/li&gt;
&lt;li&gt;MasterCard is an American multinational financial services corporation. It operates in more than 210 countries, with 150 different currencies.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt; A robust pillar for your app

&lt;/h2&gt;
&lt;p&gt;Laravel helps to make elegant applications delivered at warp speed. With so many benefits, it has become a go-to framework I recommend to clients.&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>development</category>
      <category>framework</category>
    </item>
    <item>
      <title>What's the difference between a Developer and a CTO?</title>
      <author>Valentin Sawadski</author>
      <pubDate>Fri, 06 Aug 2021 10:17:29 +0000</pubDate>
      <link>https://dev.to/_vsaw/what-s-the-difference-between-a-developer-and-a-cto-pe</link>
      <guid>https://dev.to/_vsaw/what-s-the-difference-between-a-developer-and-a-cto-pe</guid>
      <description>&lt;p&gt;In my opinion it can be summarised like this:&lt;/p&gt;

&lt;p&gt;Dev: Technology is key!&lt;br&gt;
CTO: Technology is a tool!&lt;/p&gt;

&lt;p&gt;Don't get me wrong, it's important to be good at your craft, but in the end you will not be measured by how clean your code is, but by achieving your companies goals!&lt;/p&gt;

&lt;p&gt;Or how would you describe the difference?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>management</category>
      <category>career</category>
    </item>
    <item>
      <title>Bitsets, Bit Manipulations and Bitmasks Questions</title>
      <author>Abhinandan Sharma</author>
      <pubDate>Fri, 06 Aug 2021 10:15:20 +0000</pubDate>
      <link>https://dev.to/abhi824/bitsets-bit-manipulations-and-bitmasks-questions-p2g</link>
      <guid>https://dev.to/abhi824/bitsets-bit-manipulations-and-bitmasks-questions-p2g</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;If you have come to this post, I bet you are struggling with all those bit operations and tricks as there are two many of them! These bit operations are not only useful in competitive programming questions but also in Dynamic Programming (where we have to save the current state), and reducing time complexities in certain scenarios. &lt;/p&gt;

&lt;p&gt;Before heading to discuss the questions let's just get a glimpse of why you should learn bitsets and type of questions which you can't do if you don't have enough knowledge of bit manipulation.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Maximum AND/OR/XOR value of a pair in an array&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Queries for bitwise AND in the index range [L, R] of the given array.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://leetcode.com/problems/find-the-longest-substring-containing-vowels-in-even-counts/"&gt;Find Longest substring containing vowels in even counts&lt;/a&gt;, &lt;a href="https://leetcode.com/problems/find-longest-awesome-substring/"&gt;Find Longest awesome substring&lt;/a&gt;, &lt;a href="https://leetcode.com/problems/number-of-wonderful-substrings/"&gt;Number of wonderful sub-strings&lt;/a&gt;, &lt;a href="https://leetcode.com/problems/maximum-product-of-word-lengths/"&gt;Maximum Product of Word Lengths&lt;/a&gt; These type of questions are typically solved using bitsets easily.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We will be discussing each of the above questions and in the end, I would be sharing some of the questions from codeforces, Leetcode, etc. If you have any doubts in those questions, feel free to discuss in the comments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-type-of-questions"&gt;
  &lt;/a&gt;
  First Type of Questions
&lt;/h3&gt;

&lt;p&gt;Questions asking you to compute the maximum AND/XOR/OR of any pair in an array, directly or indirectly, are actually based on a rather simple trick. Let's First discuss the questions.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#q1-find-maximum-binary-and-pair-from-an-array"&gt;
  &lt;/a&gt;
  Q1. Find Maximum Binary AND pair from an array.
&lt;/h4&gt;

&lt;p&gt;Codeforces Link of the problem:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: arr=[2,6,4,5,12,14,15]
Output: Max And pair: 14
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is rather a difficult problem to solve but this will let you think much. &lt;/p&gt;

&lt;p&gt;Hint 1: First convert all the numbers to their binary forms and see if you see a pattern in finding the answer&lt;/p&gt;

&lt;p&gt;Hint 2: The size of the numbers can be at most 32 bits. &lt;/p&gt;

&lt;p&gt;Solution: Read Hint 2 one more time. We know that total digits in binary representation can't be more than 32 for int datatype. Now, think this way: We have to see if a bit can be set or unset in our answer. That means we are actually constructing our answer bit by bit. &lt;/p&gt;

&lt;p&gt;We would do a simple iteration here starting from leftmost bit and then we would search for the elements in array having this bit as set (And also the all the bits in our current answer). If the number of such elements is greater than or equal to 2, we would add this bit in our answer. &lt;/p&gt;

&lt;p&gt;Dry Run:&lt;/p&gt;

&lt;p&gt;arr[]={2,6,4,5,12,14,15}&lt;/p&gt;

&lt;p&gt;Binary form of these numbers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;0010
0110
0100
0101
1100
1110
1111
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now Our max answer can't be more than the maximum of these numbers(It's binary AND). So our max answer can be 15. We would start by setting the leftmost bit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Initial Answer : 0000
First bit set: 1000 which is 8 in decimal. Fourth bit set in 12, 
15 and 14. (Greater than 2) So, we add this bit to our answer

Second Bit: 1100 which is 12 in decimal. The number of elements 
in which both first and second bit is set is 3(12,14 and 15). So,
we add this bit.

Third Bit: 1110 which is 14 in decimal. The number of elements in
which all of the set bits of 14 are present is 2(14 and 15). So,
we add this bit as well.

Fouth bit: 1111 which is 15 in decimal. the number of elements in
which all of the set bits of 15 are present is 1 only(15 
itself). So, we would not add this bit and reset our answer to 
1110.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Why does this work?&lt;/strong&gt;&lt;br&gt;
A very frequent doubt which comes in mind is, how this algorithm differentiates between two numbers added in the answer. Like, I am first considering 12, 14 in for the second bit but there can be some number which actually satisfies our conditions but 12 don't. So the set bits of 12 would be removed! This would cause "some error". First of all, see the conditions clearly, the condition to add a number is that it should have bits added so far, so 12 won't be contributing any unique bit...&lt;/p&gt;

&lt;p&gt;Code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#include&amp;lt;bits/stdc++.h&amp;gt;
using namespace std;
#define int long long int
bool isValid(int x, vector&amp;lt;int&amp;gt; &amp;amp;arr, int n)
{
    int cnt = 0;
    for(int i = 0; i &amp;lt; n; i++)
    {
        // How do I check if all bits set in answer is set in the element as well?
        // Just do an AND operation!
        if((x &amp;amp; arr[i]) == x)
            cnt++;
    }
    return cnt &amp;gt;= 2;
}
int findMaxAndPair(vector&amp;lt;int&amp;gt; &amp;amp;arr, int n)
{
    int ans = 0;
    // Here I am starting from 63 as it is long long
    // You can actually compute the maximum number
    // and start from it's rightmost set bit
    for(int i = 31; i &amp;gt;= 0; i--)
    {
        // How do I set a specific bit? Just do an OR operation on shifted bit!
        if(isValid(ans | (1 &amp;lt;&amp;lt; i), arr, n))
        {
            ans = ans | (1 &amp;lt;&amp;lt; i);
        }
    }
    return ans;
}
int32_t main()
{
    int n;
    cin &amp;gt;&amp;gt; n;
    vector&amp;lt;int&amp;gt; arr (n);
    for(int i = 0; i &amp;lt; n; i++)
        cin &amp;gt;&amp;gt; arr[i];

    cout &amp;lt;&amp;lt; findMaxAndPair(arr, n);

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#second-type"&gt;
  &lt;/a&gt;
  Second Type
&lt;/h3&gt;

&lt;p&gt;Querying inside a specific range. To be continued...&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>bits</category>
      <category>cpp</category>
      <category>codeforces</category>
    </item>
    <item>
      <title>How to keep Tailwind DRY</title>
      <author>npm run dev</author>
      <pubDate>Fri, 06 Aug 2021 09:24:28 +0000</pubDate>
      <link>https://dev.to/npmrundev/how-to-keep-tailwind-dry-2jfe</link>
      <guid>https://dev.to/npmrundev/how-to-keep-tailwind-dry-2jfe</guid>
      <description>&lt;p&gt;There's many complaints I see online about Tailwind: it's WET, not DRY, it's the same as inline styles, you can't make global changes, and it's hard to read. I understand how this may seem to be the case when you first start working with Tailwind. The thing to bear in mind is &lt;strong&gt;Tailwind is nothing like traditional CSS, and you shouldn't treat it as such&lt;/strong&gt;.



&lt;/p&gt;
&lt;p&gt;There's lots of ways that Tailwind can benefit us, such as its tiny bundle size and super-fast prototyping capabilities. I explained a bit more about that in a &lt;a href="https://npmrundev.wordpress.com/2021/08/04/6-reasons-to-use-tailwind-over-traditional-css/"&gt;previous article&lt;/a&gt;. But we can only get these benefits if we use it in the right situation; used in the wrong context, Tailwind will only bring you headaches.&lt;/p&gt;

&lt;h2&gt;When is the wrong time to use Tailwind CSS?&lt;/h2&gt;

&lt;p&gt;The first thing I would recommend &lt;strong&gt;against&lt;/strong&gt; using Tailwind for is plain HTML static websites. When you're building a static site, you will inevitably end up copy and pasting HTML, since there's likely to be more than one occurrence of the same component/section on a single page. &lt;/p&gt;

&lt;p&gt;This is totally fine if you're using a traditional CSS methodology such as &lt;a href="http://getbem.com/"&gt;BEM&lt;/a&gt;: your CSS and HTML exist completely separately, so you can rely on your CSS as your single source of truth for how your website will look. If you change a CSS class, the change will be reflected everywhere the class is used without having to update the HTML. In this way, it doesn't really matter &lt;em&gt;too much&lt;/em&gt; if you've copy and pasted some HTML.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// you can copy and paste these classes anywhere
&amp;lt;button class="button button--negative"&amp;gt;&amp;lt;/button&amp;gt;

&amp;lt;button class="button button--negative"&amp;gt;&amp;lt;/button&amp;gt;

// but you could also break rules like this
&amp;lt;div class="button"&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I38x9Xsr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://npmrundev.files.wordpress.com/2021/08/html-files-suck.png%3Fw%3D263" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I38x9Xsr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://npmrundev.files.wordpress.com/2021/08/html-files-suck.png%3Fw%3D263" alt=""&gt;&lt;/a&gt;Separation of concerns is traditionally defined by language&lt;/p&gt;

&lt;p&gt;This is about as much as you can do when it comes to &lt;strong&gt;separation of concerns&lt;/strong&gt; with CSS and plain HTML. Personally, I still think this method isn't properly DRY since you're copy and pasting the same code in multiple places, but it's about the best you can do with basic HTML- something that never sat right with me while I was learning CSS. To make this system truly DRY, you would want to use some form of templating or a component-based framework so you could only write HTML for a section one time, and then re-use the component wherever you like. This brings me onto...&lt;/p&gt;

&lt;h2&gt;When is the right time to use Tailwind CSS? &lt;/h2&gt;

&lt;p&gt;I'm glad you asked! If you don't want to repeat yourself when building websites with Tailwind, you're probably going to want to use some kind of JavaScript framework. Whether it's React, Vue or some other new-fangled framework, the important thing is that you can build JS components which can be reused over and over. You might be able to get it to work with PHP templates, but I'd say this method is best for JavaScript since you can keep your HTML, JS and CSS all in the same file.&lt;/p&gt;

&lt;p&gt;That's the real way Tailwind should be used: as an entirely different paradigm where separation of concerns doesn't mean separating HTML, CSS and JS, it means separating entire components instead, and keeping everything related to that component inside one file or folder. It's a pretty different way of working to how we're used to with its own challenges, but this method has some great benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Components can behave independently of each other and be used across different projects without much hassle&lt;/li&gt;
&lt;li&gt;Components can be tested on their own so you don't need to worry about things changing later on&lt;/li&gt;
&lt;li&gt;Prototyping is much faster since you don't need to write a custom class for every single element&lt;/li&gt;
&lt;li&gt;Full access to use JavaScript for more advanced conditional styling than with regular HTML&lt;/li&gt;
&lt;li&gt;Encourages component composition - once you have a bunch of components, it's easy to build pages or even new variants of components by combining what you already have&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Embracing component-based architecture&lt;/h2&gt;

&lt;p&gt;Once you have your HTML, JavaScript and CSS all in one place, you'll realise it's much easier to contain components within their own folders rather than having resources stretched across your whole project in different file trees. Working in this way opens up new opportunities, such as being able to use JavaScript to dictate your styles and building more complex logic for views.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n8UNppHf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://npmrundev.files.wordpress.com/2021/08/filez-1.png%3Fw%3D275" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n8UNppHf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://npmrundev.files.wordpress.com/2021/08/filez-1.png%3Fw%3D275" alt=""&gt;&lt;/a&gt;File structure in component-based development&lt;/p&gt;

&lt;p&gt;Here's some tips to help you adjust to component-based development:&lt;/p&gt;

&lt;h2&gt;1. Break components down into small, reusable pieces&lt;/h2&gt;

&lt;p&gt;Have you ever noticed, when looking at a design, that there tend to be lots of repeating patterns? You can take advantage of this with class composition. It's common to see a 50/50 layout with text on one side, and some type of media on the other. I tend to call them &lt;code&gt;SplitContent&lt;/code&gt; blocks. There are often variants on this, perhaps some of the text is a different size or the media slot is filled with a carousel instead of an image.&lt;/p&gt;

&lt;p&gt;Instead of building two components that use the exact same styles for the most part, you could create a container component with props, slots where you can add any kind of content. You could set up logic for your styles inside - maybe you want a prop that changes which side the content will appear on, or add padding to a certain side. Alternatively, you could just add a prop which can be passed a string of class names, giving you the ability to customise the container as it's used in different contexts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xjATRopb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://npmrundev.files.wordpress.com/2021/08/breaking-down-components-01.png%3Fw%3D1024" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xjATRopb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://npmrundev.files.wordpress.com/2021/08/breaking-down-components-01.png%3Fw%3D1024" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For areas where I want to use SplitContent as a dynamic content block with a CMS such as Wordpress, I might create a &lt;code&gt;Handler&lt;/code&gt; component which breaks down the style options defined in the CMS and passes on the relevant combinations of components.&lt;/p&gt;

&lt;p&gt;You might, for example, want your client to only have access to one SplitContent component in the CMS, but have the choice to create many different layouts using that one component. Some of the choices might include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Which type of content do you want on each side?&lt;/li&gt;
&lt;li&gt;Which side should each content type be on?&lt;/li&gt;
&lt;li&gt;Does this component need a different colour scheme?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These options can be taken in by the component Handler and it will return the correct layout, while keeping all this logic contained within itself so the other components can still be used across different components.&lt;/p&gt;

&lt;p&gt;I usually keep everything related to SplitContent under one folder, and add a subfolder of smaller pieces which make up the main components:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dqg05ZA0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://npmrundev.files.wordpress.com/2021/08/filez-2-1.png%3Fw%3D264" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dqg05ZA0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://npmrundev.files.wordpress.com/2021/08/filez-2-1.png%3Fw%3D264" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is just one example; essentially, your components should all have a single purpose so it's easier to build larger and more complex components using the pieces you have created.&lt;/p&gt;

&lt;h2&gt;2. Use JS to build class lists&lt;/h2&gt;

&lt;p&gt;If you find Tailwind hard to read, you're not alone. It's one of the most common complaints and I can understand why: you have to read each class to understand what's going on, which doesn't work for everyone.&lt;/p&gt;

&lt;p&gt;It may help to rely on JavaScript to build your class names. I often prefer this method over composing new CSS classes for the sake of it, especially when they might only be used in one place. Some people might say this is the same as using the @apply directive, but if the class isn't going to be used anywhere else there's no reason to write a whole new class for it. Writing classes with JavaScript like this helps to keep everything related to that component in a similar place, rather than placing it miles away in the CSS folder.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// components/Modal/View.jsx

export default function ModalView () {
  const modalContainerClass = "bg-white p-4 rounded shadow";
  const modalHeadingClass = "heading-1 text-darkgrey";

  return (
    &amp;lt;aside className={modalContainerClass}&amp;gt;
      &amp;lt;h1 className={modalHeadingClass}&amp;gt;...&amp;lt;/h1&amp;gt;
    &amp;lt;/aside&amp;gt;
  );
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Storing classes in JavaScript variables makes it a little clearer what is trying to be accomplished with it, while also opening up the opportunity to use more advanced logic than would be possible with CSS.&lt;/p&gt;

&lt;h2&gt;3. Use props to extend components&lt;/h2&gt;

&lt;p&gt;One of the problems we encounter with Tailwind compared to normal CSS is that we lose the ability to extend a basic version of a component into a new modified version with classes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// _button.scss

.button {
  padding: 20px;
  border: 1px solid black;
}
.button--negative {
  border-colour: red;
}

// index.html

&amp;lt;button class="button"&amp;gt;Accept&amp;lt;/button&amp;gt;
&amp;lt;button class="button button--negative"&amp;gt;Cancel&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course we could manually add the &lt;code&gt;border-red&lt;/code&gt; Tailwind class to any button we want to make negative, but what if there's more than one style? What if the background and text colour also change?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// this would be a nightmare if the negative styles ever changed

&amp;lt;button class="p-5 border-red bg-red text-white"&amp;gt;Cancel&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;The solution: Extend your components using JavaScript&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When we make the switch over to component-based development, we gain the ability to use JavaScript in place of CSS for creating components. Since you're no longer tied to a separate stylesheet, you can create variants of your components by abstracting them to different files, using your base component as the starting point.&lt;/p&gt;

&lt;p&gt;One of the most flexible ways of doing this is to pass class names down as props, and merge them with the existing classes on a component. This is an example of &lt;a href="https://reactpatterns.com/#merge-destructured-props-with-other-values"&gt;merging destructured props with other values&lt;/a&gt;, as shown on the fantastic resource &lt;a href="https://reactpatterns.com/"&gt;reactpatterns.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here's how our button variants might look using this method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// components/Button/index.jsx

export default function Button = ({ classnames, handleOnClick, label }) {
  const buttonClass = [
    "p-5 border-1", // default button styles
    classnames      // any additional styles
  ].join(' ');
  
  return (
    &amp;lt;button className={buttonClass} onClick={handleOnClick}&amp;gt;
      {label}
    &amp;lt;/button&amp;gt;
  )
}

// components/Button/Negative.jsx

export default function ButtonNegative = (props) {
  return (
    &amp;lt;Button
      classnames="border-red bg-red text-white"
      {...props}
    /&amp;gt;
  )
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can use &lt;code&gt;index.jsx&lt;/code&gt; as the base layer of our button, and keep all the logic on that level, while also having variants of that button clearly defined without any change to functionality. This way, if the styles change later on, anywhere &lt;code&gt;&amp;lt;ButtonNegative /&amp;gt;&lt;/code&gt; is used will reflect changes made in that file.&lt;/p&gt;

&lt;h2&gt;4. Move view logic and business logic to separate files&lt;/h2&gt;

&lt;p&gt;This is quite a general tip for working with JavaScript frameworks, but in Tailwind it can help even more so because it separates your styles from your business logic without relegating them to a completely different folder. You can enter your Button folder, and know that everything in that folder will be related to buttons.&lt;/p&gt;

&lt;p&gt;Once you've got everything in one place, you can start to break it down further: In React, you can keep the way your component looks separate from how it behaves. Here's an example of this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// components/Carousel/View.jsx (view logic only)
export default function CarouselView ({ slides }) {
  return (
    &amp;lt;SomeCarouselPlugin&amp;gt;
      {Array.isArray(slides) &amp;amp;&amp;amp; slides.map(slide =&amp;gt; (
        &amp;lt;CarouselSlide {...slide} /&amp;gt;
      ))}
    &amp;lt;/SomeCarouselPlugin&amp;gt;
  )
}

// components/Carousel/Jobs.jsx (business logic only)
export default function JobsCarousel () {
  const [jobs, setJobs] = useState(null);
  
  const fetchJobs = async () =&amp;gt; {
    const res = await request({
      url: 'my-api-url.com/jobs?limit=16',
      method: 'GET'
    })
    setJobs(res.data)
  }
  
  useEffect(() =&amp;gt; {
    fetchJobs();
  }, [])
  
  return !!jobs ? (
    &amp;lt;CarouselView slides={jobs.map(job =&amp;gt; ({
      title: job.title,
      description: job.description,
      salary: 'Up to ' + job.salary.max
    }))} /&amp;gt;
  ) : &amp;lt;&amp;gt;Loading...&amp;lt;/&amp;gt;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we wanted to make another carousel which used the same styles, perhaps we want the carousel to be filled with staff members instead of jobs, we could do that by creating a new container component in &lt;code&gt;Carousel/Staff.jsx&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This massively helps with breaking down huge components with hundreds or even thousands of lines, and this method means you could also include extra layers if you wanted to for even more customisation. This system of extension makes it easier to break down what a component is supposed to be doing, while making sure you don't repeat yourself.&lt;/p&gt;

&lt;h2&gt;5. Use class composition for containers, text styles and anything used between components&lt;/h2&gt;

&lt;p&gt;That's right: Even when components are your source of truth, there is still a place for custom classes. For example, you are likely to use a container class on many different components with a max width, margin: auto and some side padding. Since these aren't likely to change, it makes sense to compose a new custom class using the @apply directive. &lt;/p&gt;

&lt;p&gt;Personally, I also like to include typographic classes such as for headings, standard blocks of content and the like. These are things that don't necessarily make a lot of sense to create a new JavaScript component for, but they combine the same styles in multiple places nevertheless.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.page-wrap {
  @apply max-w-page mx-auto px-4 tablet:px-5 laptop:px-6;
}

.paragraph {
  @apply text-16 font-body leading-loose;
}

// we can still create variants of .paragraph
&amp;lt;p class="paragraph text-white"&amp;gt;Hello world!&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;6. When composing classes, avoid using margins&lt;/h2&gt;

&lt;p&gt;You can make classes more reusable by making them position agnostic. If you leave out properties such as margins which only affect the position of the element, you are able to reuse it more often.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// _typography.scss

.heading-2 {
  @apply text-black text-24 bold;
}&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h2 className="heading-2 mb-4"&amp;gt;Hello world!&amp;lt;/h2&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This might not be what you want in every situation - maybe you &lt;em&gt;do&lt;/em&gt; want every heading to have a certain margin. But for many cases it's a trick worth keeping in mind that makes your components much more flexible and less dependent on their position on the page.&lt;/p&gt;

&lt;h2&gt;7. Treat tailwind.config.js as your source of truth&lt;/h2&gt;

&lt;p&gt;In SCSS or LESS, you might create variables for constants such as colours, fonts and max widths. You can reuse those variables anywhere in your CSS, and if you change the variable this change will be reflected everywhere it's used.&lt;/p&gt;

&lt;p&gt;Tailwind works in much the same way, except &lt;em&gt;everything&lt;/em&gt; is defined by variables. That means not just the text or background colours you can use, but also spacing, sizing, borders and almost any other property you can think of. You can make use of this with the &lt;code&gt;theme&lt;/code&gt; object in &lt;code&gt;tailwind.config.js&lt;/code&gt;, or extend the default theme with the &lt;code&gt;extend&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;This file defined the way your whole app will look: If your designer has used a design system which commonly uses numbers like &lt;code&gt;4, 8, 12, 16, 32&lt;/code&gt; etc. you can build that system right into your CSS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;spacing: {
  1: '4px',
  2: '8px',
  3: '12px',
  4: '16px',
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These classes are then ready to use, straight away, and in the case of the &lt;code&gt;spacing&lt;/code&gt; property will be applied to &lt;code&gt;padding&lt;/code&gt;, &lt;code&gt;margin&lt;/code&gt; and &lt;code&gt;relative&lt;/code&gt; positioning classes such as &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Don't forget that you can also use regular JavaScript to generate some of these properties, which can save a bit of time and clean the file up. I like to make a &lt;code&gt;const&lt;/code&gt; containing an array similar to the one above, and using it for &lt;code&gt;spacing&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt; and any other similar properties - even &lt;code&gt;font size&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I've also entertained the idea of such a spacing/font system generated using the &lt;a href="https://grtcalculator.com/"&gt;golden ratio&lt;/a&gt;, which might be a great option for fast prototyping while also maintaining a great visual flow.&lt;/p&gt;

&lt;h2&gt;8. Use tools to spot repeating patterns&lt;/h2&gt;

&lt;p&gt;On the topic of composing classes, there are some great tools to help you find repeating patterns in your class lists so you can refactor these into their own generic classes.&lt;/p&gt;

&lt;p&gt;One of the most useful is Refactor CSS, a VS Code extension that automatically finds and presents very similar strings of classes, which helps when finding common patterns to abstract into new classes. Class strings will be highlighted if they have more than 3 classes and these 3 classes repeat more than 3 times in the current document. The order of classes is ignored, so you don't need to worry about maintaining a &lt;a href="https://www.matuzo.at/blog/ordering-css-properties/"&gt;property sort order&lt;/a&gt; to make sure the tool works.&lt;/p&gt;

&lt;p&gt;If you &lt;em&gt;are&lt;/em&gt; worried about property sort order (Tailwind is much more readable if you are) then you can use another tool to deal with that for you: &lt;a href="https://github.com/heybourn/headwind"&gt;Headwind&lt;/a&gt;. This VS Code extension will format your Tailwind classes on save and group them by their function, making sure everything is where you expect it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// before saving
&amp;lt;div class="bg-red container mb-6 text-white"&amp;gt;&amp;lt;/div&amp;gt;

// after saving
&amp;lt;div class="container mb-6 text-white bg-red"&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also change the regex of Headwind, so you can customise the sort order exactly how you like. &lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I'll won't pretend moving to this way of working is particularly easy, and there are many problems that still need solving. We're still in the early (ish) days of utility-first frameworks and component-based development, so everything hasn't been figured out yet.&lt;/p&gt;

&lt;p&gt;Despite this, I feel confident that we'll start to see new tools, packages and methodologies that aim to tackle any issues we may face. What we can get out of this approach are lightweight, fast applications that are truly DRY. Isolated, independent components are great for building across different platforms, so I think we'll see a lot of companies building headless systems picking up this way of working.&lt;/p&gt;

&lt;p&gt;I write more articles like this one about headless systems and component-based development over on my blog at &lt;a href="https://npmrundev.wordpress.com/"&gt;npm run dev&lt;/a&gt;. Check it out if you want, and I'd love to get some feedback on my thoughts and writing style. Thanks for reading!&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>css</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>4 Important Dictionary Methods</title>
      <author>Aya Bouchiha</author>
      <pubDate>Fri, 06 Aug 2021 08:35:53 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/4-important-dictionary-methods-j54</link>
      <guid>https://dev.to/ayabouchiha/4-important-dictionary-methods-j54</guid>
      <description>&lt;p&gt;Hello everybody, I'm &lt;a href="//developer.aya.b@gmail.com"&gt;Aya Bouchiha&lt;/a&gt;, today, we'll talk about 4 important dictionary methods.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#clear"&gt;
  &lt;/a&gt;
  clear()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;clear()&lt;/strong&gt;: this method lets you delete all the dictionary's items;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Aya Bouchiha"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"developer.aya.b@gmail.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# 2
&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# {}
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# 0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#copy"&gt;
  &lt;/a&gt;
  copy()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;copy()&lt;/strong&gt;: lets you get a copy of the specified dictionary.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Aya Bouchiha"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"developer.aya.b@gmail.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;admin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# {'name': 'Aya Bouchiha', 'email': 'developer.aya.b@gmail.com'}
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'John Doe'&lt;/span&gt;
&lt;span class="c1"&gt;# {'name': 'John Doe', 'email': 'developer.aya.b@gmail.com'}
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# {'name': 'Aya Bouchiha', 'email': 'developer.aya.b@gmail.com'}
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setdefaultkey-value"&gt;
  &lt;/a&gt;
  setdefault(key, value)
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;setdefault(key, value(optional))&lt;/strong&gt;: this method returns the value of the given key If It exists, otherwise, It creates a new item with the given key and value and returns its value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Aya Bouchiha"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"developer.aya.b@gmail.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'unknown'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Aya Bouchiha
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'is_admin'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'False'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# False
&lt;/span&gt;
&lt;span class="c1"&gt;# {'name': 'Aya Bouchiha', 'email': 'developer.aya.b@gmail.com', 'is_admin': 'False'}
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#values"&gt;
  &lt;/a&gt;
  values()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;values()&lt;/strong&gt;: this method returns all the given dictionary's values as a list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;products_prices_in_dollar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s"&gt;"laptop"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"phone"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"mouse"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"keyboard"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;products_prices_in_dollar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;# dict_values([1000, 150, 10, 7])
&lt;/span&gt;
&lt;span class="c1"&gt;# converts from dollar to moroccan dirham
# 1000+150+10+7 = 1167$ =&amp;gt; 11670 moroccan dirhams
&lt;/span&gt;&lt;span class="n"&gt;sum_in_dirham&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;products_prices_in_dollar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="c1"&gt;# you have to pay 11670 dirhams
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;pay&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;sum_in_dirham&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;dirhams&lt;/span&gt;&lt;span class="s"&gt;')
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;clear()&lt;/strong&gt;: deletes all the dictionary's items;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;copy()&lt;/strong&gt;: returns a copy of the specified dictionary.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;setdefault()&lt;/strong&gt;:  returns the value of the given key If It exists, otherwise, It create a new item with the given key and value and returns its value.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;values()&lt;/strong&gt;:returns all the given ditionary's values as a list&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/"&gt;www.w3schools.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#suggested-posts"&gt;
  &lt;/a&gt;
  Suggested posts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/ayabouchiha/all-you-need-to-know-about-python-json-module-5ef0"&gt;All You Need To Know About Python JSON Module&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/ayabouchiha/5-helpful-python-math-module-methods-44gf"&gt;5 Helpful Python Random Module Methods&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/ayabouchiha/5-helpful-python-math-module-methods-44gf"&gt;5 Helpful Python Math Module Methods&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/ayabouchiha/5-useful-python-string-methods-4pe7"&gt;5 Useful Python String Methods&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To Contact Me:&lt;/p&gt;

&lt;p&gt;email: &lt;a href="mailto:developer.aya.b@gmail.com"&gt;developer.aya.b@gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;telegram: &lt;a href="https://t.me/AyaBouchiha"&gt;Aya Bouchiha&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope you enjoyed reading this post :)&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>programming</category>
    </item>
    <item>
      <title>Vue Vs. React: What Is Easier? What Is Trending? Detailed Guide With All +/- [2021]</title>
      <author>Nastassia Ovchinnikova</author>
      <pubDate>Fri, 06 Aug 2021 08:31:41 +0000</pubDate>
      <link>https://dev.to/flatlogic/vue-vs-react-what-is-easier-what-is-trending-detailed-guide-with-all-2021-26m0</link>
      <guid>https://dev.to/flatlogic/vue-vs-react-what-is-easier-what-is-trending-detailed-guide-with-all-2021-26m0</guid>
      <description>&lt;p&gt;The holy war between Vue and React still keeps going. Though both React and Vue basically resolve the same level issues, let’s add some fuel to the fire! As experts in web development since 2013, we’ve worked a lot with both frameworks, React and Vue. So, here is our two cents’ worth.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Btw, have you heard the joke?&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;— Angular is for jobs&lt;/em&gt;&lt;br&gt;
&lt;em&gt;—  Jquery is for those who stuck in the mid-2000s&lt;/em&gt;&lt;br&gt;
&lt;em&gt;—  React is for trends&lt;/em&gt;&lt;br&gt;
&lt;em&gt;—  Vue is for peace of mind&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Both Vue and React.js are popular first-class technologies which are well known for their flexibility and power in terms of building progressive web applications. But, Reactjs is a library, and Vue is a framework. &lt;/p&gt;

&lt;p&gt;What is a library? Library is a collection of reusable functions (classes); whereas a framework is a piece of code where the architecture can’t be changed but can be extended with specific functionality. &lt;/p&gt;

&lt;p&gt;Framework from the start of development sets the rules for building app architecture, setting its default behavior. Whereas a library is defined as a set of similar functionalities, the framework may include several such .&lt;/p&gt;

&lt;p&gt;One more principal difference between libraries and frameworks is an inversion of control. It means that the framework uses (calls) functions of the user code and this user code is embedded in the default structure of the framework. When you work with a library, your code calls the library functions and then gets control. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--spiKnpbO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://833250.smushcdn.com/1694534/wp-content/uploads/2021/06/Screenshot-2021-06-24-at-18.53.01-1.png%3Flossy%3D1%26strip%3D1%26webp%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--spiKnpbO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://833250.smushcdn.com/1694534/wp-content/uploads/2021/06/Screenshot-2021-06-24-at-18.53.01-1.png%3Flossy%3D1%26strip%3D1%26webp%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s just say, If you’re a newbie programmer, a framework can help you to do complex things a bit faster. But Vue also has its guideline and set of rules to follow and learn.&lt;/p&gt;

&lt;p&gt;Some say that Vue is much easier, or, let’s say, more ergonomic, in terms of general logic, comprehension, and web development; others will go for React, due to its similarity to Javascript and because being under the aegis of Facebook it works better for large scale projects, has reusable components and a wider support community than Vue. Besides, React is also often favored for its more minimalistic approach and a stronger focus on UI. However, all these modern frameworks are basically pretty much the same and you should first note the local market demand, and secondly the scale and the specification of the project you need to develop.&lt;/p&gt;

&lt;p&gt;There are fewer Vue projects on the development market, and consequently, there is lower competition among coders. Also, you may have heard that Vue is an instrument to build your apps faster, but we won’t be so categorical, because it also depends on the expertise of the developer. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-and-vue-similarities"&gt;
  &lt;/a&gt;
  React and Vue Similarities
&lt;/h2&gt;

&lt;p&gt;Both Vue and React.js offer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Extremely flexible and relatively fast development;&lt;/li&gt;
&lt;li&gt;Component-based architecture with lifecycle methods;&lt;/li&gt;
&lt;li&gt;Virtual DOM usage (but React and Vue interact with DOM differently);&lt;/li&gt;
&lt;li&gt;Reusable components;&lt;/li&gt;
&lt;li&gt;An open and progressive community;&lt;/li&gt;
&lt;li&gt;Rich selection of libraries and tools.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-vuejs"&gt;
  &lt;/a&gt;
  What is Vue.js?
&lt;/h3&gt;

&lt;p&gt;Vue.js is a JavaScript framework widely used in web development for building modern and scalable apps. Evan You, the Chinese software developer, created Vue.js and maintained it with a team of 24 developers. Vue.js Completion for components, directives, props and methods in templates.&lt;/p&gt;

&lt;p&gt;Vue is known for being implemented on 9gag, Alibaba, Behance, BMW, Gitlab, Euronews, Vice, Trustpilot, Wizz Air, Adobe Portfolio, PayPal, DropBox. &lt;/p&gt;

&lt;p&gt;Vue has an MVC pattern, a way of processing data that is focused on the view layer, that lets you add changes to the DOM; i.e. you don’t have to worry about how your application’s UI is rendered or how changes are applied to the DOM. The DOM is responsible for setting  relationships among the elements in the HTML file.&lt;/p&gt;

&lt;p&gt;Vue.JS offers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simplicity&lt;/li&gt;
&lt;li&gt;Built-in directives and event handlers &lt;/li&gt;
&lt;li&gt;Coding assistance for different languages inside template, script and style tags in .vue files&lt;/li&gt;
&lt;li&gt;Extraction of component and renaming component refactorings&lt;/li&gt;
&lt;li&gt;Code snippets&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T6I9ueKE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://833250.smushcdn.com/1694534/wp-content/uploads/2021/06/288d1fe075ac4fe014fbb9b117a03eca-1.jpeg%3Flossy%3D1%26strip%3D1%26webp%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T6I9ueKE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://833250.smushcdn.com/1694534/wp-content/uploads/2021/06/288d1fe075ac4fe014fbb9b117a03eca-1.jpeg%3Flossy%3D1%26strip%3D1%26webp%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-reactjs"&gt;
  &lt;/a&gt;
  What is React.js?
&lt;/h3&gt;

&lt;p&gt;React.js (also known as React or ReactJS) is a super popular library to create beautiful and highly interactive single-page applications. The instruments of React are components that are easy to collect, reuse, and test out. React.js is perfect for building large web applications.&lt;/p&gt;

&lt;p&gt;We already love React for being implemented on the sites of Tesla, HBO, WhatsApp, Netflix, New York Times, Facebook, Instagram, Twitter, Codeacademy, Spotify, and Yahoo! Now, React has 171k stars on GitHub and more than 10,164,796 downloads on NPM.&lt;/p&gt;

&lt;p&gt;React offers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rich package ecosystem &lt;/li&gt;
&lt;li&gt;Extremely common world usage and wide support&lt;/li&gt;
&lt;li&gt;High demand in workforce&lt;/li&gt;
&lt;li&gt;Optimal for development of lightweight applications and medium-size projects apps, as well as large enterprise-scale systems.&lt;/li&gt;
&lt;li&gt;Cross-platform with React Native&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#popularity"&gt;
  &lt;/a&gt;
  Popularity
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--llOGKxo4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://833250.smushcdn.com/1694534/wp-content/uploads/2021/06/Screenshot-2021-06-03-at-12.41.36-1536x673.png%3Flossy%3D1%26strip%3D1%26webp%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--llOGKxo4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://833250.smushcdn.com/1694534/wp-content/uploads/2021/06/Screenshot-2021-06-03-at-12.41.36-1536x673.png%3Flossy%3D1%26strip%3D1%26webp%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have checked the graphs of stateofjs and noticed the eloquent statistics showing the continuing popularity of the JS frameworks. According to this data, for the last 5 years React.js has held the leading position over Vue.js.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jOvIodH5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://833250.smushcdn.com/1694534/wp-content/uploads/2021/06/Screenshot-2021-06-03-at-12.41.04-1536x675.png%3Flossy%3D1%26strip%3D1%26webp%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jOvIodH5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://833250.smushcdn.com/1694534/wp-content/uploads/2021/06/Screenshot-2021-06-03-at-12.41.04-1536x675.png%3Flossy%3D1%26strip%3D1%26webp%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s also check the Google Trends graphics. Here the red one speaks for React.js, and the blue color speaks for Vue. And again, we see that the popularity of React is maintained/unchanging.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zRTICQIP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://833250.smushcdn.com/1694534/wp-content/uploads/2021/06/Screenshot-2021-06-25-at-16.33.18-1536x519.png%3Flossy%3D1%26strip%3D1%26webp%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zRTICQIP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://833250.smushcdn.com/1694534/wp-content/uploads/2021/06/Screenshot-2021-06-25-at-16.33.18-1536x519.png%3Flossy%3D1%26strip%3D1%26webp%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Plus, to be total sure that React still has all the aces, see the downloads on the npm trends:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JhLUnqQ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://833250.smushcdn.com/1694534/wp-content/uploads/2021/06/Screenshot-2021-06-23-at-12.27.09-1536x586.png%3Flossy%3D1%26strip%3D1%26webp%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JhLUnqQ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://833250.smushcdn.com/1694534/wp-content/uploads/2021/06/Screenshot-2021-06-23-at-12.27.09-1536x586.png%3Flossy%3D1%26strip%3D1%26webp%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We’ve checked also the coders’ darling, Stackoverflow; and realised that there are 80,064 questions tagged with  #vuejs and 314,882 questions tagged with #reactjs; that only proves that Reacjs market share is four times higher.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#developer-market"&gt;
  &lt;/a&gt;
  Developer market
&lt;/h3&gt;

&lt;p&gt;We went through everything from Indeed to Glassdoor to find out the actual demand for Vue and React developers in the world. See what is going on:&lt;/p&gt;

&lt;p&gt;React.js experts still get to be right at the top. We’re not short of React developers, because there are lots of junior specialists on the market which are often sold at the rate of seniors; and an average hourly rate is hovering somewhere about $60 per hour of custom development. In the USA, the annual income of a good specialist is $80000 roughly. Nevertheless it’s still pretty expensive to hire developers locally, and it’s a common practice for companies to hire workers from the countries of Eastern and Central Europe where the rate is significantly lower.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qW-BxK4E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://833250.smushcdn.com/1694534/wp-content/uploads/2021/06/Screenshot-2021-06-17-at-18.24.04-1536x640.png%3Flossy%3D1%26strip%3D1%26webp%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qW-BxK4E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://833250.smushcdn.com/1694534/wp-content/uploads/2021/06/Screenshot-2021-06-17-at-18.24.04-1536x640.png%3Flossy%3D1%26strip%3D1%26webp%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Top-rated Vue.js developers get around $90000 per year because there are relatively fewer of such specific specialists but again, it’s all individual and depends on the type of the project, overall experience of a person and other factors.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ngp4URuU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://833250.smushcdn.com/1694534/wp-content/uploads/2021/06/Screenshot-2021-06-17-at-18.39.26-1536x644.png%3Flossy%3D1%26strip%3D1%26webp%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ngp4URuU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://833250.smushcdn.com/1694534/wp-content/uploads/2021/06/Screenshot-2021-06-17-at-18.39.26-1536x644.png%3Flossy%3D1%26strip%3D1%26webp%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax-and-structure"&gt;
  &lt;/a&gt;
  Syntax and Structure 🧱
&lt;/h3&gt;

&lt;p&gt;Probably, this is the most crucial difference between React and Vue; how the view layer is developed. &lt;/p&gt;

&lt;p&gt;React elements and components may be written with the help of JSX syntax. JSX is an XML/HTML-like syntax to transform HTML-like text into standard JavaScript objects. It means that first you can write HTML/XML-like structures, then Babel will transform your code into JS code. Though you can do this without using JSX.&lt;/p&gt;

&lt;p&gt;Vue.js uses an HTML-based template syntax and can be parsed by spec-compliant browsers and HTML parsers. Vue.js templates are parsed into Virtual DOM render functions that help to significantly increase performance. If you know how to work with DOM concepts, write render functions instead of out-of-the-box templates, with optional JSX support. &lt;/p&gt;

&lt;p&gt;React has no architecture pattern/structure for the applications. React provides the view layer of an app that is made up of components which render the underlying user interface when the input data changes. As you probably know, create-react-app gives us everything we need to develop a React application. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#runtime-performance"&gt;
  &lt;/a&gt;
  Runtime Performance
&lt;/h3&gt;

&lt;p&gt;Since both of these technologies are under constant development, I would not recommend you rely mainly on this factor. Both Vue and React are great in terms of performance judging by two major factors to evaluate like start-up time and runtime performance. &lt;/p&gt;

&lt;p&gt;React’s component-based architecture and virtual DOM directly influence the page loading process. All this adds a seamless app performance and pleasing user experience. Though it may seem that Vue is a bit faster in memory allocation and startup times, React is a bit faster at runtime. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#learning-curve"&gt;
  &lt;/a&gt;
  Learning Curve
&lt;/h3&gt;

&lt;p&gt;You’ll hear dozens of opinions that Vue is easier than React. Vue.js is a template language for writing its components; and has a number of built-in templates that help to speed up development just from scratch. But, it’s all about syntax. If you’re not a big fan of boilerplates, templates and need something more functional, then get started with React. And there are more open source packages available for React than for Vue.js.&lt;/p&gt;

&lt;p&gt;If you are a newbie in web development, we would personally recommend starting with Vue, because it is way easier and has a friendlier learning curve. Why? Because React is a full-fledged library, and in order to succeed with React.js, a web developer has to know other JS libraries to make a logically consistent system. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing 🧪
&lt;/h3&gt;

&lt;p&gt;Testing in JavaScript frameworks usually runs via the well-known libraries and plugins like Testing Library, Jest, Mocha, Enzyme. &lt;/p&gt;

&lt;p&gt;React Testing library as well as Vue Testing library are built-in libraries that let you test various UI components and significantly minimize the bugs in your app. &lt;/p&gt;

&lt;p&gt;Another popular testing library for React.js or Vue.js is Jest. With the help of manual mocks it lets you easily create various types of tests, replacing the dependencies you don’t control with something you do. How to create a Mock Function? Type in: jest.fn()&lt;/p&gt;

&lt;p&gt;Mocha, running on Node.js, is one more JavaScript framework for testing components. Mocha can execute tests right in the browser. But Mocha doesn’t simulate a browser environment; being in Node.js it doesn’t reset the state, and doesn’t execute each test in an isolated context.&lt;/p&gt;

&lt;p&gt;Also, you may use Ionic React Test Utils made on TypeScript for testing React Ionic Apps. &lt;br&gt;
Plus, to test your app in real browsers you may refer to Karma test runner, and do unit-testing for Vue or React app components, or any other JS component. Karma just launches an HTTP server and generates an HTML file.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#debugging"&gt;
  &lt;/a&gt;
  Debugging 🔍
&lt;/h3&gt;

&lt;p&gt;Regarding bugs in React or Vue, we are usually faced with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;UI bugs;&lt;/li&gt;
&lt;li&gt;Lack of a parent element or fragment;&lt;/li&gt;
&lt;li&gt;Incorrect binding;&lt;/li&gt;
&lt;li&gt;Logic bugs;&lt;/li&gt;
&lt;li&gt;Networking bugs behaving as we expect.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How to debug in Vue.js or React.js? The most evident way to handle and fix your errors is using well-known VSCode. Set up the debugger extension (Chrome or Firefox). Follow the official debugging documentation from Vue.js here.&lt;/p&gt;

&lt;p&gt;After the installation process, open the &lt;code&gt;launch.json&lt;/code&gt; file and paste in the corresponding configuration based on your browser selection.&lt;/p&gt;

&lt;p&gt;Other tools and libraries for testing Vue.js applications may be found here. &lt;/p&gt;

&lt;p&gt;How to debug React components? Install React DevTools. Or, you can pick one of  the best React Debugging Libraries here.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#ecosystem-routing-and-state-management"&gt;
  &lt;/a&gt;
  Ecosystem. Routing and State management
&lt;/h3&gt;

&lt;p&gt;Both Vue and React are known for their extensive ecosystems. However, React differs from Vue, in that its ecosystem updating and maintaining are based on the developer community rather than managed through one center. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#routing"&gt;
  &lt;/a&gt;
  Routing
&lt;/h3&gt;

&lt;p&gt;Any application needs a good routing solution and state management solution. &lt;/p&gt;

&lt;p&gt;Routing will head the user to different pages around the website; while rendering will put those pages on the UI. Routing in Reactjs is performed with React Router.&lt;/p&gt;

&lt;p&gt;React Router is a collection of navigational components that compose declaratively with your application. This is a framework that allows users to navigate among views of various components in React. Application made with React, allows changing the browser URL, and enables synchronising the URL with the UI. Plus, the app gets three basic pages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a home page, &lt;/li&gt;
&lt;li&gt;a contact page, and&lt;/li&gt;
&lt;li&gt;an about page.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vue has its own built-in sustainable Router library, called Vue Router. But of course you still can use 3rd party routers. Also, Vuejs has a standard Vuex library to handle centralized data state management.&lt;/p&gt;

&lt;p&gt;State Management&lt;br&gt;
Here are several instruments for state management for you to choose: &lt;/p&gt;

&lt;p&gt;1.Redux state container and Redux Toolkit &lt;br&gt;
2.MobX and MobX State Tree &lt;br&gt;
3.Recoil&lt;br&gt;
4.Zustand &lt;br&gt;
5.AKITA&lt;br&gt;
6.React Hooks libraries&lt;/p&gt;

&lt;p&gt;Vue has its own implementation called Vuex, see above, an Elm-inspired state management solution that integrates deeply into Vue and provides a superior development experience to other similar libraries.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h3&gt;

&lt;p&gt;One of the crucial points that we especially love and that distinguishes Vue from React is style guide existence that may become a super manual for novice coders. As well as all the rest of the documentation, it is an in-depth source of explanations for Vue-specific code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to write multi-world component names?&lt;/li&gt;
&lt;li&gt;How to do single-file component file naming?&lt;/li&gt;
&lt;li&gt;Prop name casing and many more…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;n comparison to any other free frameworks, Vue documentation is really next level; it is utterly comprehensive and easy to handle even if you still have no great expertise in Javascript.&lt;/p&gt;

&lt;p&gt;React.js also has good documentation, but it’s not as well-structured and detailed as Vue’s.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#community"&gt;
  &lt;/a&gt;
  Community 🌎
&lt;/h3&gt;

&lt;p&gt;Vue has already got 185k stars on GitHub and this is not the limit; the community is still growing. You may easily contribute the code; also you can get in touch with the expert world in chat, forum, or report an issue on GitHub.&lt;/p&gt;

&lt;p&gt;React community is also well-developed and even more: since React is a bit older than Vue, and it also has a great army of supporters from all over the world. The React ecosystem is really strong and flexible and this is proven not only by GitHub’s 170k stars, but also by the 11,034,440 weekly downloads on NPM.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#sumup-vue-vs-react-benchmarking"&gt;
  &lt;/a&gt;
  Sum-up. Vue vs. React Benchmarking🔪
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VHXjIGzj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://833250.smushcdn.com/1694534/wp-content/uploads/2021/06/Frame-2496egssg-1536x1152.png%3Flossy%3D1%26strip%3D1%26webp%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VHXjIGzj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://833250.smushcdn.com/1694534/wp-content/uploads/2021/06/Frame-2496egssg-1536x1152.png%3Flossy%3D1%26strip%3D1%26webp%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#react-disadvantages"&gt;
  &lt;/a&gt;
  React Disadvantages
&lt;/h3&gt;

&lt;p&gt;😑  Working with React syntax can be tedious, you have to build UI elements individually that is time-consuming with view-rendering instructions. &lt;/p&gt;

&lt;p&gt;😑 You have to use third-party libraries tools like Redux, Next.js, GraphQL which can be no longer available or maintained over time&lt;/p&gt;

&lt;p&gt;😑 Working with library may result in writing more erroneous code, because here you have more freedom&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#vue-disadvantages"&gt;
  &lt;/a&gt;
  Vue Disadvantages
&lt;/h3&gt;

&lt;p&gt;😑 Vue is more opinionated framework with its inner rules; it relies on quite complex mechanisms to implement its two-way binding. &lt;/p&gt;

&lt;p&gt;Take into consideration:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Property addition and deletion of an object&lt;/li&gt;
&lt;li&gt;Array length modifications using the corresponding property&lt;/li&gt;
&lt;li&gt;Direct assignment of an array element by index&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#useful-resources-for-developers-of-all-levels"&gt;
  &lt;/a&gt;
  Useful Resources for Developers of All Levels
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#react-resources"&gt;
  &lt;/a&gt;
  React Resources:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/enaqx/awesome-react"&gt;Awesome React&lt;/a&gt;: an ultimate list of tools for the React ecosystem; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://flatlogic.com/blog/react-table-guide-and-best-react-table-examples/"&gt;React table guide and best react table examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flatlogic.com/blog/12-react-boilerplates-and-starter-kits-for-developers-in-2021/"&gt;12+ React Boilerplates &amp;amp; Starter Kits For Developers In 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flatlogic.com/blog/how-to-choose-the-best-react-drag-and-drop-top-15-free-libraries-to-set-up/"&gt;Top 15 React Drag and Drop Libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flatlogic.com/blog/best-react-open-source-projects/"&gt;Best React Open Source Projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codesandbox.io/examples/package/react-datepicker"&gt;React Date Picker Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flatlogic.com/blog/6-reasons-to-use-reactjs-for-web-development/"&gt;6 Reasons To Use ReactJS For Web Development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#vue-resources"&gt;
  &lt;/a&gt;
  Vue Resources:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/vuejs/awesome-vue"&gt;Awesome Vue&lt;/a&gt;: a detailed list of useful plugins and libraries for Vue.js;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://flatlogic.com/blog/top-16-vue-open-source-projects/"&gt;Top 16+ Vue Open Source Projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/abiolaesther_/an-overview-of-the-top-10-vue-ui-component-libraries-in-2021-3dhm"&gt;Top 10 Vue UI Component Libraries in 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flatlogic.com/blog/top-6-vue-admin-templates/"&gt;Top 6 Vue Admin Templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vuetifyjs.com/en/"&gt;Vue Component Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vuetifyjs.com/en/"&gt;Vuetify, Vue UI Library with Material Components&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h2&gt;

&lt;p&gt;Frankly speaking, there is no answer to the issue: which one is better. Both React and Vue are widely used in web development to create cost-effective large scale or medium-size websites or apps. Everything depends on the tasks, complexity, and scale of the project.&lt;/p&gt;

&lt;p&gt;The job market is booming and everyday more new frameworks come up. It is great when you’re like a Swiss army knife and can quickly learn and adapt to any customer requirements; no matter which framework is your personal favourite. &lt;/p&gt;

&lt;p&gt;The only reasonable way to stay competitive and stay afloat is to develop a sound judgment, develop personal expertise, learning everything where Javascript is involved. Learn the language, learn the algorithms and app architecture, check the best practices, and remember that only sky is the limit.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#about-flatlogic"&gt;
  &lt;/a&gt;
  About Flatlogic
&lt;/h2&gt;

&lt;p&gt;Web development is our true love. We love beautiful things that work well. We love processes that run smoothly. Since 2014, we’ve been speeding up web development creating web &amp;amp; mobile app templates with the help of React, Vue, Angular, React Native, and Bootstrap.&lt;/p&gt;

&lt;p&gt;We’re always eager to help you with your next project and we will be enlightened to estimate or develop your project, big or small, eCommerce, CMS, CMR, or anything you may need. Feel free to leave your question for us on our rapidly growing forum.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/WpVQsS-Bb3U"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;You might also like these articles:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://dev.to/flatlogic/javascript-tabs-save-space-examples-of-tabbed-widgets-3d1i"&gt;Javascript Tabs: Save Space! Examples Of Tabbed Widgets&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/flatlogic/react-table-guide-and-best-react-table-examples-56n1"&gt;React Table Guide And Best React Table Examples&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/flatlogic/12-javascript-image-manipulation-libraries-for-your-next-web-app-1e0d"&gt;12 JavaScript Image Manipulation Libraries For Your Next Web App&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>vue</category>
      <category>webdev</category>
      <category>frontend</category>
    </item>
  </channel>
</rss>
