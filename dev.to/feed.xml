<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How is usually consistency maintained between DB and cache?</title>
      <author>Bella Washington</author>
      <pubDate>Tue, 25 May 2021 17:37:34 +0000</pubDate>
      <link>https://dev.to/bellawashington/may-rua-mat-loai-nao-tot-276</link>
      <guid>https://dev.to/bellawashington/may-rua-mat-loai-nao-tot-276</guid>
      <description>&lt;p&gt;Say I have some documents in MongoDB and have cached a couple of fields in redis. If I were to update some value in both the DB and cache, I would like either both of them to succeed or both of them to fail. How is this problem generally handled?&lt;/p&gt;

&lt;p&gt;If both the updates were to happen within MongoDB, I would use transactions. But, I presume that is not possible across two systems like MongoDB &amp;amp; redis.&lt;/p&gt;

</description>
      <category>database</category>
      <category>mongodb</category>
      <category>query</category>
    </item>
    <item>
      <title>Best Windows 5 Apps for Developers</title>
      <author>Vikram Aditya</author>
      <pubDate>Tue, 25 May 2021 17:09:14 +0000</pubDate>
      <link>https://dev.to/circle/best-windows-5-apps-for-developers-1n9p</link>
      <guid>https://dev.to/circle/best-windows-5-apps-for-developers-1n9p</guid>
      <description>&lt;p&gt;Developing isn't as simple as writing a few lines of strange text. It requires a lot of effort, as well as thoughtful thinking, to achieve a great result such as an application for a smartphone, or a game for a console. Thoughtful design, logical thinking and organized planning are just a few parts of the whole process. The following applications may be just what you need to optimize your workflow.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#codehub"&gt;
  &lt;/a&gt;
  CodeHub
&lt;/h1&gt;

&lt;p&gt;GitHub is the world's most popular platform for developers, allowing millions of people to share their code online, improve other projects and collaborate on developing. It allows developers to easily communicate with each other and manage big projects, such as the Islandwood Project, which Microsoft happens to host on GitHub.&lt;br&gt;
CodeHub is an unofficial application for this service. Unfortunately, because CodeHub is not fully optimized for desktop usage, its layout may appear as odd for some. However, it certainly isn't crippled when it comes to features and functionality. CodeHub "aims to do what the GitHub Desktop app doesn't do" as the listing description reveals, therefore you can easily perform all basic and core functions of GitHub and more as the app features less popular options like trending repositories and following people, which, may be handy if you are heavily invested in the community aspect of the platform.&lt;br&gt;
The app if free, with donation in-app purchases, and offers full functionality without having to pay a cent, making it worth a shot if you happen to be a touchscreen user who might benefit from a native app.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#xaml-ui-controls"&gt;
  &lt;/a&gt;
  XAML UI Controls
&lt;/h1&gt;

&lt;p&gt;XAML UI Controls may have a generic name, but it's function certainly surpassed my expectations. The app features a very user-friendly interface for a catalogue of all possible controls that XAML supports. For reference, XAML is a language which is often used for designing and creating application interfaces in Universal Windows Platform (UWP) and Xamarin applications. Clicking in on one of the controls brings up its different functions and demonstrates how it works.&lt;br&gt;
While this app may not be useful for professionals with years of experience, people who are new to the Windows developing ecosystem, and have a hard time memorizing all names of the controls may find this app to be hugely impactful on their workflow, because it can save a lot of time by not having to web search for the information manually. As the app is completely free, it doesn't hurt to check if you may have some use for it yourself.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dev-center"&gt;
  &lt;/a&gt;
  Dev Center
&lt;/h1&gt;

&lt;p&gt;Dev Center is a must-have application for every UWP developer. This handy tool will help you easily keep track of statistics and ratings for all your Windows Store projects. It features a clean design and a user-friendly interface for easy navigation, which means a learning curve won't be necessary. This may come as relieving news to developers who have gone through many courses over time.&lt;br&gt;
Being a first-party tool listed under Microsoft's name, it's safe to assume that you are not giving away sensitive information about your business or company by using this application. You also shouldn't have to worry about security or privacy issues. It performs as it should, on-screen and behind the scenes.&lt;br&gt;
The app is, as expected from a first-party app, completely free with no in-app purchases.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#character-map-uwp"&gt;
  &lt;/a&gt;
  Character Map UWP
&lt;/h1&gt;

&lt;p&gt;Every UI developer knows how important it is to have a good character map at hand. While Windows does have a built-in tool for that, it leaves a lot to be desired. Its interface is hard to navigate, it's slow and hasn't been updated for many years.&lt;br&gt;
Thankfully, there are third-party alternatives like Character Map UWP. As generic as the name may sound, it certainly is a huge upgrade over the built-in app. It features a clean and easy-to-navigate design, support for sorting fonts by symbol or actual text, and much more. While a character map isn't necessarily exciting, this tool is.&lt;br&gt;
As expected from a tool of this nature, it's free to download from the Windows Store with no hidden extra costs.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h1&gt;

&lt;p&gt;Code is a powerful tool with amazing capabilities. It's used to code and compile your applications and files using a user-friendly interface which is very easy to navigate. It's quite remarkable that the tool supports as many as 12 programming languages, with compiling support for each one of them. The languages are C, C++, Java, Python, C#, PHP, Perl, Ruby, Swift, Visual Basic, JavaScript and Pascal, which are very popular languages used by many developers.&lt;br&gt;
The application is particularly interesting because it works not only on PC, but on mobile and the Surface Hub too which means that if you happen to be one of the few Windows 10 Mobile users left, or happen to be the even rarer target group that owns the Surface Hub, you can utilize the application on there too, which may prove to be very useful. Those platforms do not have any code editors that support compiling, which makes #Code a "one-of-a-kind" project.&lt;br&gt;
The app can be downloaded for free from the Windows Store, but it does feature a few extra features which you won't get unless you buy the premium version. That said, it's not a requirement and the free version of the app is perfectly functional.&lt;/p&gt;

&lt;p&gt;I will make some more important apps for developers if this blog gets a good response.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#join-thevikcode-newletter-get-daily-which-will-not-be-avaible-here-httpsthevikcodesubstackcom"&gt;
  &lt;/a&gt;
  JOIN THEVIKCODE NEWLETTER ( GET DAILY WHICH WILL NOT BE AVAIBLE HERE ) - &lt;a href="https://thevikcode.substack.com/"&gt;https://thevikcode.substack.com/&lt;/a&gt;
&lt;/h1&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>codenewbie</category>
      <category>python</category>
    </item>
    <item>
      <title>How Install WordPress with Docker</title>
      <author>George Omara</author>
      <pubDate>Tue, 25 May 2021 17:06:54 +0000</pubDate>
      <link>https://dev.to/georgeomara/how-install-wordpress-with-docker-5c69</link>
      <guid>https://dev.to/georgeomara/how-install-wordpress-with-docker-5c69</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-you-need-in-order-to-get-this-to-work-successfully"&gt;
  &lt;/a&gt;
  What you need in order to get this to work successfully.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;Docker Compose&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1:
&lt;/h3&gt;

&lt;p&gt;This first thing that you need to do is to create a project folder to work in, and inside the project folder you create Docker Compose file.&lt;/p&gt;

&lt;p&gt;Open a &lt;strong&gt;Terminal&lt;/strong&gt; or &lt;strong&gt;Command Prompt&lt;/strong&gt; inside the project directory and run the command below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;docker-compose.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2:
&lt;/h3&gt;

&lt;p&gt;Open the &lt;strong&gt;docker-compose.yaml&lt;/strong&gt; file using a text editor of your choice.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3:
&lt;/h3&gt;

&lt;p&gt;Write the code below inside the &lt;strong&gt;docker-compose.yaml&lt;/strong&gt; file and save.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3.8'&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;wordpress&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;wordpress&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;always&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;8080:80'&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;WORDPRESS_DB_HOST&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;db&lt;/span&gt;
      &lt;span class="na"&gt;WORDPRESS_DB_USER&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;wordpress&lt;/span&gt;
      &lt;span class="na"&gt;WORDPRESS_DB_PASSWORD&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;wordpress&lt;/span&gt;
      &lt;span class="na"&gt;WORDPRESS_DB_NAME&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;wordpress&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;wordpress:/var/www/html&lt;/span&gt;
  &lt;span class="na"&gt;db&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mysql:5.7&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;always&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;MYSQL_DATABASE&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;wordpress&lt;/span&gt;
      &lt;span class="na"&gt;MYSQL_USER&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;wordpress&lt;/span&gt;
      &lt;span class="na"&gt;MYSQL_PASSWORD&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;wordpress&lt;/span&gt;
      &lt;span class="na"&gt;MYSQL_RANDOM_ROOT_PASSWORD&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;1'&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;db:/var/lib/mysql&lt;/span&gt;

&lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;wordpress&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;db&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  Step 4:
&lt;/h3&gt;

&lt;p&gt;Go back to the &lt;strong&gt;Terminal&lt;/strong&gt; or &lt;strong&gt;Command Prompt&lt;/strong&gt; shell that you opened earlier, and enter the command below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Docker Compose shall execute the script and install the WordPress and MySQL images from docker hub.&lt;br&gt;
It will then go ahead and Spin up two containers, one for each image.&lt;/p&gt;

&lt;p&gt;Wait for about 1 minutes after docker-compose shows &lt;strong&gt;done&lt;/strong&gt; for both containers before you can load WordPress on your browser.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5"&gt;
  &lt;/a&gt;
  Step 5:
&lt;/h3&gt;

&lt;p&gt;Navigate to &lt;code&gt;http://localhost:8080&lt;/code&gt; on your browser, and this is the page you should expect to see.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dh-397e3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dgwsrfcyt/image/upload/v1621959797/README%2520photos/WordPress_Installation_-_localhost_ojxb9s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dh-397e3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dgwsrfcyt/image/upload/v1621959797/README%2520photos/WordPress_Installation_-_localhost_ojxb9s.png" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links:
&lt;/h3&gt;

&lt;p&gt;Visit this &lt;a href="https://github.com/omarageorge/wordpress_docker"&gt;GitHub repository&lt;/a&gt;, it has everything you need.&lt;/p&gt;

</description>
      <category>wordpress</category>
      <category>mysql</category>
      <category>docker</category>
    </item>
    <item>
      <title>SB Admin - Free Bootstrap 5 Template</title>
      <author>Sm0ke</author>
      <pubDate>Tue, 25 May 2021 16:50:43 +0000</pubDate>
      <link>https://dev.to/sm0ke/sb-admin-free-bootstrap-5-template-15cn</link>
      <guid>https://dev.to/sm0ke/sb-admin-free-bootstrap-5-template-15cn</guid>
      <description>&lt;p&gt;Hello Coders, &lt;/p&gt;

&lt;p&gt;This article presents &lt;strong&gt;&lt;a href="https://www.admin-dashboards.com/sb-admin-free-bootstrap-template/"&gt;SB Admin&lt;/a&gt;&lt;/strong&gt;, a well-known dashboard template recently migrated to Bootstrap 5. This iconic product comes with minimal custom styling using Google's material design patterns and pre-build pages like a dashboard, charts, data tables, and authentication pages. In case you're looking for an actively supported open-source dashboard, &lt;strong&gt;SB Admin&lt;/strong&gt; might be a good choice.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;(Free) &lt;a href="https://startbootstrap.com/template/sb-admin"&gt;SB Admin&lt;/a&gt; - HTML version hosted by StartBootstrap&lt;/li&gt;
&lt;li&gt;(Free) &lt;a href="https://appseed.us/admin-dashboards/flask-dashboard-sb-admin"&gt;SB Admin&lt;/a&gt; - Flask, comes with database and authentication&lt;/li&gt;
&lt;li&gt;(Free) &lt;a href="https://appseed.us/admin-dashboards/django-dashboard-sb-admin"&gt;SB Admin&lt;/a&gt; - Django, comes with database and authentication&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4SmoVarS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/23qvu5tt3r8502ypvtof.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4SmoVarS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/23qvu5tt3r8502ypvtof.gif" alt="SB Admin - Open-source Bootstrap Template."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Official Product Info&lt;/strong&gt; - &lt;strong&gt;SB Admin&lt;/strong&gt; is a free, open source, MIT licensed Bootstrap admin template. This template uses the default Bootstrap 5 styles along with a variety of plugins to create a powerful framework for creating admin panels, web apps, or dashboard UI's for your next project. The product uses PUG templates, SCSS and JS scripts for compilation and production build (no Gulp or heavier Webpack).  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to build SB Admin&lt;/strong&gt; - to start and compile the project in a local environment we need a &lt;a href="https://docs.appseed.us/content/tutorials/minimal-programming-kit"&gt;minimal development kit&lt;/a&gt; (Nodejs, GIT) already installed with all tools accessible in the terminal and a few minutes to type build commands as suggested in the project's README:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Clone the project (from Github)&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/StartBootstrap/startbootstrap-sb-admin.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;startbootstrap-sb-admin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Install modules (dependencies)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Step #3&lt;/strong&gt; - Compile the sources (PUG templates, SCSS)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm run build
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Step #4&lt;/strong&gt; - Start SB Admin in development with LIVE reload&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm start
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If all goes well, we should see SB Admin running in the browser:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hIOiOWKX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4wa6mov7dxighyfrc6f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hIOiOWKX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4wa6mov7dxighyfrc6f.png" alt="SB Admin - Charts page. "&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#sb-admin-flask"&gt;
  &lt;/a&gt;
  SB Admin Flask
&lt;/h2&gt;

&lt;p&gt;The Flask version contains the latest UI version migrated to Jinja plus a few basic modules, database, authentication and deployment scripts for Docker and HEROKU. The project might be useful to code specific features on top or used by beginners for learning Python and Flask.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://flask-sb-admin.appseed-srv1.com/"&gt;SB Admin Flask&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/flask-dashboard-sb-admin"&gt;SB Admin Flask&lt;/a&gt; - Source code published on Github&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KkKHgWJS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/95tlrd6qkf270kb9l7jq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KkKHgWJS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/95tlrd6qkf270kb9l7jq.png" alt="SB Admin - Registration Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#sb-admin-django"&gt;
  &lt;/a&gt;
  SB Admin Django
&lt;/h2&gt;

&lt;p&gt;Django version of SB Admin is provided with an authentication, SQLite database and deployment scripts for Docker. Product requires Python3 to be compiled locally - build instructions provided by product docs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.appseed.us/products/django-dashboards/sb-admin"&gt;SB Admin Django&lt;/a&gt; - product docs&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://django-sb-admin.appseed-srv1.com/"&gt;SB Admin Django&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rSgxmvyS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wwyrsykjiu7esghcmpor.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rSgxmvyS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wwyrsykjiu7esghcmpor.png" alt="SB Admin - 404 Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; For more resources, please access:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;More &lt;a href="https://appseed.us/admin-dashboards/open-source"&gt;Free Dashboards&lt;/a&gt; - provided by AppSeed&lt;/li&gt;
&lt;li&gt;Open-source &lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;React Dashboards&lt;/a&gt; - a curated index | Dev.to &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>sbadmin</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Challenges in Federated Learning </title>
      <author>Bala Priya</author>
      <pubDate>Tue, 25 May 2021 16:47:22 +0000</pubDate>
      <link>https://dev.to/balapriya/challenges-in-federated-learning-2e8o</link>
      <guid>https://dev.to/balapriya/challenges-in-federated-learning-2e8o</guid>
      <description>&lt;p&gt;This blog post is inspired by Peter Kairouz’s talk titled ‘Advances and Open Problems in Federated Learning’ at the OpenMined Privacy Conference 2020.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-federated-learning"&gt;
  &lt;/a&gt;
  What is Federated Learning?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Federated Learning is a machine learning setting where multiple entities (clients) collaborate in solving a machine learning problem, under the coordination of a central server or service provider. Each client’s raw data is stored locally and not exchanged or transferred; instead, focused updates intended for immediate aggregation are used to achieve the learning objective. – Working definition proposed in &lt;a href="https://arxiv.org/abs/1912.04977"&gt;https://arxiv.org/abs/1912.04977&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#understanding-crossdevice-federated-learning"&gt;
  &lt;/a&gt;
  Understanding Cross-Device Federated Learning
&lt;/h2&gt;

&lt;p&gt;Let us start by understanding the premise of Federated Learning; the working model architecture of cross-device federated learning comprises of several client devices that take part in the process of federated training, a server that coordinates with client devices in the iterative process of model development and devices on which the model will be deployed.&lt;/p&gt;

&lt;p&gt;The server sends out an initial model; the clients then train the model on-device with their data locally and send the updated model to the server. The server then combines the updates from the clients suitably, using federated averaging to update the initial model. The metrics are then computed for the updated model. If the metrics are satisfactory, the model is deployed on several other devices; else, the process of federated training commences again, until the model obtained gives optimal performance.&lt;/p&gt;

&lt;p&gt;The key premise in the process is that at any point in time, the server does not have access to the clients’ data on which the model is trained but only has access to the updates.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#federated-averaging-algorithm"&gt;
  &lt;/a&gt;
  Federated Averaging Algorithm
&lt;/h2&gt;

&lt;p&gt;In essence, the federated averaging algorithm involves the following steps. The client devices run multiple steps of Stochastic Gradient Descent (SGD) on their local data to compute an update. Server computes an overall update using a simple weighted average of the client updates. There have been many advances in the area of federated learning, but, there are some challenges that need to be addressed, which we shall cover in subsequent sections.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#challenges-in-federated-learning"&gt;
  &lt;/a&gt;
  Challenges in Federated Learning
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#improving-efficiency-and-effectiveness"&gt;
  &lt;/a&gt;
  Improving efficiency and effectiveness
&lt;/h4&gt;

&lt;p&gt;The following are the areas where there’s scope to improve the current federated learning systems.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Personalize for the client devices.&lt;/li&gt;
&lt;li&gt;Attempt to do more with fewer client devices or with less resources per device.&lt;/li&gt;
&lt;li&gt;Even when the server does not get to see any of the data that clients used for training, how can we effectively support machine learning debugging and hyperparameter search?&lt;/li&gt;
&lt;li&gt;Make trained models smaller so that they are deployment-friendly even on devices like mobile phones.&lt;/li&gt;
&lt;li&gt;Reduce wall-clock training time.&lt;/li&gt;
&lt;li&gt;Support unsupervised, semi-supervised and reinforcement learning.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#robustness-to-attacks-and-failures"&gt;
  &lt;/a&gt;
  Robustness to attacks and failures
&lt;/h4&gt;

&lt;p&gt;There are many adversarial attacks possible that can potentially disrupt the entire system. A few of them are listed below.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Client device training on compromised data (data poisoning)&lt;/li&gt;
&lt;li&gt;A compromised client device that sends malicious updates to the server.&lt;/li&gt;
&lt;li&gt;Data corruption during transmission to and from the server.&lt;/li&gt;
&lt;li&gt;Inference-time evasion attacks.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#ensuring-fairness-and-addressing-sources-of-bias"&gt;
  &lt;/a&gt;
  Ensuring fairness and addressing sources of bias
&lt;/h4&gt;

&lt;p&gt;In this area, the following are some of the concerns that should be addressed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How do we account for bias in training data?&lt;/strong&gt;&lt;br&gt;
For example, while our model may be representative of a major fraction of the client population, would it be just as representative of the minority client population as well?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Bias in device availability&lt;/strong&gt;&lt;br&gt;
All the clients need not be available at all times and they may choose to drop out even as the training is in progress.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Bias in which devices successfully send updates&lt;/strong&gt;&lt;br&gt;
It is not necessary that all participating clients successfully send updates to the server. In that case, how can we account for those clients that participate in the training process, but do not send model updates?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#preserving-the-privacy-of-user-data"&gt;
  &lt;/a&gt;
  Preserving the privacy of user data
&lt;/h2&gt;

&lt;p&gt;The privacy principles guiding federated learning are motivated by the following question:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What private information might an adversary learn with access to the client devices, the network over which model updates are sent, the server, and the released models? &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A few of the privacy principles guiding federated learning are enumerated below.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Minimal data exposure and focused collection: At the client side, exposure of data should be minimized, and the updates should be securely aggregated.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Anonymous or ephemeral collection: The updates are anonymously collected and are stored only until the federated averaging step is completed and are deleted.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Only-in-aggregate release: An engineer/data analyst who has access to models only gets to see the aggregated model, and not any of the individual client’s model updates.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#understanding-differential-privacy"&gt;
  &lt;/a&gt;
  Understanding Differential Privacy
&lt;/h2&gt;

&lt;p&gt;Among the several complementary privacy technologies such as Encryption, Secure Multi-Party Computation(SMPC) and Differential Privacy, we shall focus on ensuring Differential Privacy in a Federated Learning system. There are a few different ways of ensuring differential privacy in a federated learning system, outlined below.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Differential Privacy is the statistical science of trying to learn as much as possible about a group while learning as little as possible about any individual in it. – Andy Greenberg in WIRED,2016&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#centrally-differentially-private-federated-averaging"&gt;
  &lt;/a&gt;
  Centrally Differentially Private Federated Averaging
&lt;/h4&gt;

&lt;p&gt;In Centrally Differentially Private Federated Averaging, the client devices clip the model updates, as a measure to bound sensitivity of the model to individual records in the training dataset. The server then adds noise, whose standard deviation is proportional to the sensitivity, while combining the model updates from the clients.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#locally-differentially-private-federated-averaging"&gt;
  &lt;/a&gt;
  Locally Differentially Private Federated Averaging
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;What if the clients do not trust the server for the noise addition part?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, they can then choose to clip updates as well as add noise locally on their respective devices. This is called Locally Differentially Private Federated Averaging. However, we do realize that this procedure can end up adding too much noise, and there are certain fundamental results that limit the feasibility of applying locally differentially private federated averaging at scale, in practice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-shuffled-model-of-federated-learning"&gt;
  &lt;/a&gt;
  The Shuffled Model of Federated Learning
&lt;/h2&gt;

&lt;p&gt;As a recent development, there has been a demonstration of the shuffled model; where, the clients can choose to clip updates and add noise , and the updates are randomly shuffled so as to increase anonymity, and the server cannot possibly identify the particular client’s updates.&lt;/p&gt;

&lt;p&gt;However, here are some limitations with this approach. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There’s no fixed or known population to sample from or shuffle. &lt;/li&gt;
&lt;li&gt;Client availability is dynamic due to multiple system layers and participation constraints. &lt;/li&gt;
&lt;li&gt;Clients may drop out at any point in the process, impacting privacy and utility.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#desirable-characteristics-of-the-system-and-active-areas-of-research"&gt;
  &lt;/a&gt;
  Desirable characteristics of the system and active areas of research
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Good privacy vs. utility trade-offs.&lt;/li&gt;
&lt;li&gt;Robust to nature’s choices (client availability, client dropout) in that privacy and utility are both preserved, possibly at the expense of forward progress.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;[1] Advances and Open Problems in Federated Learning, &lt;a href="https://arxiv.org/abs/1912.04977"&gt;https://arxiv.org/abs/1912.04977&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This post was originally published at &lt;a href="https://blog.openmined.org/advances-and-open-problems-in-federated-learning/"&gt;https://blog.openmined.org/advances-and-open-problems-in-federated-learning/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>research</category>
      <category>privacy</category>
    </item>
    <item>
      <title>CSS Container Queries - The future of responsive web design is almost here</title>
      <author>Rajat Kapoor </author>
      <pubDate>Tue, 25 May 2021 16:44:31 +0000</pubDate>
      <link>https://dev.to/rajatkapoor/css-container-queries-the-future-of-responsive-web-design-is-almost-here-43ab</link>
      <guid>https://dev.to/rajatkapoor/css-container-queries-the-future-of-responsive-web-design-is-almost-here-43ab</guid>
      <description>&lt;p&gt;With the huge number of smartphone users and increasing power of these devices, ensuring that your web applications run fine on all screen sizes is more important than ever. Fortunately CSS provides a couple of ways to style the same HTML in different ways on different devices.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#responsive-web-design-right-now"&gt;
  &lt;/a&gt;
  Responsive web design right now
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;You can skip to the next section if you're already familiar with &lt;code&gt;@media&lt;/code&gt; queries.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can use &lt;code&gt;@media&lt;/code&gt; queries in our CSS to conditionally apply CSS styles on the basis of the device or browser/user-agent properties. These properties could be the width of the screen, orientation of the device, whether the device is a screen reader or a printer, etc. &lt;/p&gt;

&lt;p&gt;Here is a small demo showing how media queries work.&lt;/p&gt;

&lt;p&gt;We will just add one &lt;code&gt;div&lt;/code&gt; in our html.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="box"&amp;gt;
    This is a responsive box. Resize your browser width to see the styles change
&amp;lt;div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here is our CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.box {
  background: lightblue;
  width:100%;
  height:100vh;
}

@media(max-width:800px) {
  .box {
    background: hotpink;
    color: white;
    font-weight: 700;
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can check the whole demo here:&lt;br&gt;
&lt;a href="https://codepen.io/rajatkapoor/full/NWpgWor"&gt;https://codepen.io/rajatkapoor/full/NWpgWor&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you open the above link on a desktop/laptop you will see a screen with a blue background with black colored text written on it. Something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0gv9H3hJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621947588544/Q_HP3Wciv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0gv9H3hJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621947588544/Q_HP3Wciv.png" alt="screely-1621947531671.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But if you open this on a smartphone, you will have a pink background instead of blue and the text would be written in white.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1qRon9op--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621947616886/tdrRstGOW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1qRon9op--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621947616886/tdrRstGOW.png" alt="screely-1621947570197.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#magic-right"&gt;
  &lt;/a&gt;
  Magic right?
&lt;/h4&gt;

&lt;p&gt;This is possible because of the &lt;code&gt;@media&lt;/code&gt; queries. This happens because we apply certain styles only when the width of our device screen is less than &lt;code&gt;800px&lt;/code&gt;. This is the CSS that causes the different styles on mobile and desktop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@media(max-width:800px) {
  .box {
    background: hotpink;
    color: white;
    font-weight: 700;
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#enter-raw-container-endraw-queries"&gt;
  &lt;/a&gt;
  Enter &lt;code&gt;@container&lt;/code&gt; queries
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;@container queries are only supported on Chrome Canary with the &lt;code&gt;enable-container-queries&lt;/code&gt; flag enabled. You can download Chrome Canary  &lt;a href="https://www.google.com/intl/en_in/chrome/canary/"&gt;here&lt;/a&gt;. Once installed, open the URL chrome://flags/#enable-container-queries and enable container queries.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4DI0mE13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621937509149/4B5WzT8fK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4DI0mE13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621937509149/4B5WzT8fK.png" alt="Screenshot 2021-05-25 at 3.41.42 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is a polyfill under development that you can use to use container queries today. You can check it out &lt;a href="https://www.bram.us/2021/04/27/a-first-look-at-cqfill-a-polyfill-for-css-container-queries/"&gt;here.&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;@container&lt;/code&gt; queries are one of the many features that are coming to CSS. Unlike media queries, which can only let you conditionally apply CSS styles on the basis of the browser properties(width, orientation, etc), container queries allow you to conditionally apply styles based on the properties of the container!&lt;/p&gt;

&lt;p&gt;For example, using container queries you can style cards to appear differently depending on the size of the element they are placed in. And that is what we will try to build.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#heres-what-what-we-will-build"&gt;
  &lt;/a&gt;
  Here's what what we will build
&lt;/h2&gt;

&lt;p&gt;We will build a card that will change styles depending on the width of its container, and not the width of the screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://container-queries.vercel.app/"&gt;Here's a demo that works only on Chrome canary.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://container-queries-polyfill.vercel.app/"&gt;Here's the same demo with the &lt;code&gt;cqfill&lt;/code&gt; polyfill.&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;You can see the full code of this demo in this &lt;a href="https://github.com/rajatkapoor/container-queries"&gt;github repository&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-try-it-out"&gt;
  &lt;/a&gt;
  Let's try it out
&lt;/h2&gt;

&lt;p&gt;We'll use good old plain HTML and CSS for this project. Here is our initial HTML. Notice that we have also linked to our own "styles.css file".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- index.html --&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;title&amp;gt;Container Queries | Rajat Kapoor&amp;lt;/title&amp;gt;
    &amp;lt;!-- our own styles --&amp;gt;
    &amp;lt;link href="./styles.css" rel="stylesheet"&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will start by creating a very simple card, with an image, title, and some text. This card will have a &lt;code&gt;card--header&lt;/code&gt; with an image and a &lt;code&gt;card--body&lt;/code&gt; with a title and other card content. The card is styled using &lt;code&gt;flex&lt;/code&gt; with &lt;code&gt;flex-direction: row&lt;/code&gt;, so the image stays on the left-hand side and the rest of the text content on the right.&lt;/p&gt;

&lt;p&gt;We will wrap this card in a &lt;code&gt;div&lt;/code&gt; with class &lt;code&gt;parent large&lt;/code&gt; and will wrap all of this in a &lt;code&gt;container&lt;/code&gt; to center everything on the page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- index.html  --&amp;gt;
&amp;lt;!-- ... --&amp;gt;

&amp;lt;body&amp;gt;
    &amp;lt;div class="container"&amp;gt;
        &amp;lt;div class="parent large"&amp;gt;
            &amp;lt;div class="card "&amp;gt;
                &amp;lt;div class="card--header "&amp;gt;
                    &amp;lt;img class="card--image" src="./img.jpeg" alt="card image"&amp;gt;
                    &amp;lt;!-- we have this img.jpeg file in our folder --&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;div class="card--body "&amp;gt;
                    &amp;lt;h1 class="card--title "&amp;gt;
                        Lorem ipsum dolor sit amet.
                    &amp;lt;/h1&amp;gt;
                    &amp;lt;h3 class="card--content "&amp;gt;
                        Lorem ipsum dolor, sit amet consectetur adipisicing elit. Nihil expedita accusantium, quidem
                        ducimus doloribus architecto a est deleniti, rerum saepe hic. Repellendus itaque ab officiis
                        voluptate ea earum perferendis consequatur!
                    &amp;lt;/h3&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;

&amp;lt;/body&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* styles.css */
body {
    background-color: lightblue;
}

.container {
    display: grid;
    place-items: center;
    grid-gap: 1em;
}

.card {
    background: white;
    border-radius: 2em;
    display: flex;
    flex-direction: row;
    overflow: hidden;
    padding: 2em;
}

.card--header {
    width: 100%;
}

.card--image {
    border-radius: 1em;
    object-fit: cover;
    height: 100%;
    width: 100%;
}

.card--body {
    padding: 2em;
    flex: 3
}

.card--header {
    flex: 2
}

.large {
    width: 100%;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how your page will look:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T4iTHgeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621947469220/_qfD7xtpG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T4iTHgeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621947469220/_qfD7xtpG.png" alt="screely-1621947454927.png"&gt;&lt;/a&gt;&lt;br&gt;
We will now add another &lt;code&gt;div&lt;/code&gt; with class &lt;code&gt;parent small&lt;/code&gt; and copy-paste the same card into it. We will also define styles for the &lt;code&gt;small&lt;/code&gt; class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- index.html --&amp;gt;

&amp;lt;body&amp;gt;
    &amp;lt;div class="container"&amp;gt;
        &amp;lt;div class="parent large"&amp;gt;
            &amp;lt;div class="card"&amp;gt;
               &amp;lt;!-- ...card --&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="parent small"&amp;gt;
            &amp;lt;div class="card"&amp;gt;
               &amp;lt;!-- ...card --&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;

&amp;lt;/body&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// styles.css

.small {
    width: 500px;
}    
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that both the cards are exactly the same and are just lying in two different &lt;code&gt;div&lt;/code&gt;s. And this is how they look:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AbgYbPDv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621947760881/1YEI-jGLG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AbgYbPDv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621947760881/1YEI-jGLG.png" alt="screely-1621947739345.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-container-queries"&gt;
  &lt;/a&gt;
  Adding container queries
&lt;/h2&gt;

&lt;p&gt;We want the card to have the text content below the image in case the width of the container is less than 500px.  We will also change the background of our card to hotpink and make the text white to make the changes more noticable.&lt;br&gt;
For container queries to work, we need to add CSS to the container to define the "containment context" — the container queries of the children inside this containment context react to the properties of this container. We will make the &lt;code&gt;div&lt;/code&gt;s with class &lt;code&gt;parent&lt;/code&gt; as the containment context of these cards. To do that, we will modify the CSS of the &lt;code&gt;parent&lt;/code&gt; class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* styles.css */

.parent {
    contain: layout inline-size style;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can add container queries to our card.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* styles.css */

@container(max-width: 500px) {
    .card {
        flex-direction: column;
        background-color: pink;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thats it! Now if you go back to your browser, you will see that the card in the &lt;code&gt;div&lt;/code&gt; with the class &lt;code&gt;small&lt;/code&gt; has the new styles applied. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yay"&gt;
  &lt;/a&gt;
  Yay 🎉
&lt;/h3&gt;

&lt;p&gt;We were able to control the styling on the basis of the container size and not just the device properties (screen size). That is the power of container queries.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bonus-lets-make-the-raw-parent-endraw-resizable"&gt;
  &lt;/a&gt;
  Bonus — Let's make the &lt;code&gt;parent&lt;/code&gt; resizable
&lt;/h1&gt;

&lt;p&gt;Do you know you can quickly make anything resizable by just adding CSS. We'll do it to our &lt;code&gt;parent&lt;/code&gt;class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* styles.css */

.parent {
    contain: layout inline-size style;
    resize: horizontal;
    overflow: auto;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now both the &lt;code&gt;parent&lt;/code&gt; &lt;code&gt;div&lt;/code&gt;s can be resized horizontally to see our container queries working in action.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P6eRvvHO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621950303218/RIJaqv3ZG-.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P6eRvvHO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621950303218/RIJaqv3ZG-.gif" alt="CPT2105251904-1675x864-min.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;With &lt;code&gt;container&lt;/code&gt; queries, we will be able to approach responsive designs in a much smarter way. That said, &lt;code&gt;container&lt;/code&gt; queries are in early stages of development. It is not recommended to use these in production right now. In fact, CSSWG changed the syntax between the time I started to write this article to the time I finished writing it 😅.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/therajatkapoor"&gt;Follow me on twitter&lt;/a&gt; to get more web development related content.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Special thanks to &lt;a href="https://twitter.com/shadeed9"&gt;Ahmad Shadeed&lt;/a&gt; for helping me with debugging why my &lt;code&gt;container&lt;/code&gt; queries were not working in Chrome Canary. You can also read more about container queries in &lt;a href="https://ishadeed.com/article/say-hello-to-css-container-queries/"&gt;this article&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>Work from Home Essential Tips</title>
      <author>Ayushi Rawat </author>
      <pubDate>Tue, 25 May 2021 16:34:58 +0000</pubDate>
      <link>https://dev.to/ayushi7rawat/work-from-home-essential-tips-42j6</link>
      <guid>https://dev.to/ayushi7rawat/work-from-home-essential-tips-42j6</guid>
      <description>&lt;p&gt;Hello, Reader!&lt;br&gt;
Working from home has become the new normal and It is a must to ensure a healthy work-life balance. Here are few essential tips which can help you! &lt;/p&gt;

&lt;p&gt;You can also refer to the YouTube video on the same.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/3QxJayr9utc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dedicated-workspace"&gt;
  &lt;/a&gt;
  Dedicated Workspace!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--in4GJSDp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607057530910/hVMIjXSJa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--in4GJSDp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607057530910/hVMIjXSJa.png" alt="Screenshot_1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although you're working from home, You must have a &lt;strong&gt;dedicated Workspace.&lt;/strong&gt; Start with Setting up your desk. &lt;/p&gt;

&lt;p&gt;It helps you &lt;strong&gt;establish physical boundaries&lt;/strong&gt;. Most people tend to ignore this, especially if you're new to working remotely. You simply need a dedicated space. If you're working from home with your partner, or kids, or a roommate, make your needs known. &lt;/p&gt;

&lt;p&gt;Try to make it more &lt;strong&gt;comfortable&lt;/strong&gt; and most importantly, &lt;strong&gt;free from distractions!&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TIP: Pick a spot for your desk where you can plenty of natural light.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-a-morning-routine"&gt;
  &lt;/a&gt;
  Set up a Morning Routine!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oAkxDBfj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607057552837/qIypIk_Q1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oAkxDBfj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607057552837/qIypIk_Q1.png" alt="Screenshot_2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If I talk about me, personally, mornings sets the tone for the whole day. It prepares you for the upcoming day. &lt;/p&gt;

&lt;p&gt;No Rush, give yourself a few days to establish a routine. It helps you fit in the &lt;strong&gt;best mindset&lt;/strong&gt;. Your morning routine can involve going to a gym, reading the news or maybe cooking. What is your morning Routine?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TIP:  Start your day with a Glass of water, Stay Hydrated!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stay-connected"&gt;
  &lt;/a&gt;
  Stay connected!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sgn42xnM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607057562225/0qR1gmj8E.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sgn42xnM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607057562225/0qR1gmj8E.png" alt="Screenshot_4.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do not miss the human interaction, with Time, working from home can become isolating, So its important to stay connected!&lt;/p&gt;

&lt;p&gt;Stay connected with your team using virtual communication tools like Ms-teams, Google-meet or Slack. Have a one-to-one conversation on a regular basis with peers. &lt;/p&gt;

&lt;p&gt;What do you do to stay Connected?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#schedule-breaks-amp-move-yourself"&gt;
  &lt;/a&gt;
  Schedule breaks &amp;amp; Move yourself!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l4pK6QIb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607057585919/Uvqbc7c32.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l4pK6QIb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607057585919/Uvqbc7c32.png" alt="Screenshot_3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Working from home can be tiring desk job. You need to take care of your mental health. You cannot just grab a laptop and keep working all day long, it will affect your health drastically. &lt;/p&gt;

&lt;p&gt;Schedule your breaks,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Take small five minutes break every hour&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Drink water frequently.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Strech your muscles.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prepare Tea/Coffee or any healthy drink and take a small walk for few mintutes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When you receive a non-work call, again do a little walk and talk. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How do you Utilize and plan your breaks?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-you-have-reliable-technology"&gt;
  &lt;/a&gt;
  Do you have reliable technology?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--owPFuUW1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607057618295/cwiNVXLil.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--owPFuUW1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607057618295/cwiNVXLil.png" alt="Screenshot_5.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So when you're working from home, it becomes important to make sure that ones has a reliable internet connection. If you have unlimited mobile data, you can connect to your phone's hotspot, But prefer a stable broadband connection. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TIP: Always have a backup plan!&lt;/strong&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-worklife-boundaries-"&gt;
  &lt;/a&gt;
  Set Up Work-Life boundaries !
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HlL1QZ06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607057605174/u501zaYnP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HlL1QZ06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607057605174/u501zaYnP.png" alt="Screenshot_7.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are working remotely, It becomes important to set up few boundaries so that your work does not get affected. Having a dedicated workspace is a first. &lt;/p&gt;

&lt;p&gt;Do you check for your cell phone's notifications regularly? Nope, you gotta stop doing it! It is killing your time and your productivity. So maybe you can even setup some virtual boundaries to maintain a good work life balance.&lt;/p&gt;

&lt;p&gt;What do you do to achieve a good work life balance?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  BONUS!
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Always Maintain good posture.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use ethernet connection for video calls from the computer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Organize your daily tasks.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don't eat at your desk. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Routine could be your best ally.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Share what you do to ensure a healthy work-life balance and If you would like to add anything feel free to add in the comments section below.&lt;/p&gt;

&lt;p&gt;And with that, it's a wrap!  I hope you found the article useful! Share in comments below.&lt;br&gt;
I create content about &lt;strong&gt;Career, Blogging, Programming, and Productivity&lt;/strong&gt;, If this is something that interests you, please share the article with your friends and connections.&lt;/p&gt;

&lt;p&gt;Thank you for reading, If you have reached so far, please like the article, It will encourage me to write more such articles. Do share your valuable suggestions, I appreciate your honest feedback!&lt;/p&gt;

&lt;p&gt;I would strongly recommend you to Check out the &lt;a href="https://www.youtube.com/watch?v=jAOkWehMF6E"&gt;YouTube video&lt;/a&gt; of the same and &lt;strong&gt;don't forget to subscribe to my Channel&lt;/strong&gt;. I would love to connect with you at &lt;a href="https://twitter.com/ayushi7rawat"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/ayushi7rawat/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You should definitely check out my other Blogs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/python-39-all-you-need-to-know"&gt;Python 3.9: All You need to know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/github-cli-10-all-you-need-to-know"&gt;GitHub CLI 1.0: All you need to know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/how-to-make-your-own-google-chrome-extension-1"&gt;How to make your own Google Chrome Extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/run-javascript-from-python"&gt;Run Javascript from Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/automate-whatsapp-using-python"&gt;Automate WhatsApp using Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/automate-cowin-vaccine-slots-availablity-using-python"&gt;Automate Cowin Vaccine slots Availability using Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/what-is-competitive-programming-or-beginners-guide"&gt;What is Competitive Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See you in my next Blog article, Take care!!&lt;/p&gt;

</description>
      <category>career</category>
      <category>productivity</category>
      <category>mentalhealth</category>
    </item>
    <item>
      <title>JavaScript - Ternary Operator</title>
      <author>César</author>
      <pubDate>Tue, 25 May 2021 16:33:52 +0000</pubDate>
      <link>https://dev.to/cesar_code/javascript-ternary-operator-26co</link>
      <guid>https://dev.to/cesar_code/javascript-ternary-operator-26co</guid>
      <description>&lt;p&gt;It seems that some juniors overlook or eschew few JavaScript features because of its bizarre and dynamic nature. It's common to happen. I can relate to this evasive moment when I first began my journey as a web developer.&lt;/p&gt;

&lt;p&gt;Back in my days, I preferred being explicit to being implicit when I was learning a new programming language. To be explicit means to have the intentions of glossing over concepts, practical examples etc. It is important to overcome that fear, which hinders you from exploring and experimenting with new things. Being implicit keeps you plain and aware of the curves that language has got.&lt;/p&gt;

&lt;p&gt;It is healthy to break that comfort zone and try out some crazy features that a programming language hands over to you. Breaking that comfort zone would teach you lots of things you have never expected before.&lt;/p&gt;

&lt;p&gt;Let's break it and have a clear understanding of JavaScript's feature &lt;em&gt;ternary operator&lt;/em&gt; 🕵🏻‍♂️.&lt;/p&gt;

&lt;p&gt;This article assumes you know at least a small percentage of JavaScript. You will learn what a &lt;em&gt;ternary operator&lt;/em&gt; is. You will understand how to use this feature. And whether it is healthy or not to use it. Let's get started👌🏻.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-ternary-operator"&gt;
  &lt;/a&gt;
  What is a ternary operator?
&lt;/h2&gt;

&lt;p&gt;A ternary operator is a &lt;em&gt;shorthand&lt;/em&gt; version of the conditional statement. We are conscious that conditional statements take decisions based on what segments of code dictate to them to do. That's how they function. If the condition meets the demands, the decision-maker evaluates to &lt;em&gt;true&lt;/em&gt;. But, if the condition doesn't meet the demands, it evaluates to &lt;em&gt;false&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Suppose that we write a simple condition that checks out if a user is authorized or not🔑. Let's take a quick example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Welcome back &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Oops! &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, you are not authorized!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// expected output: Welcome back John&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that a real life example wouldn't be like this. It would be much more complex regarding authorization. So this is just for demo purposes only.&lt;/p&gt;

&lt;p&gt;Now, if the variable &lt;code&gt;username&lt;/code&gt; matches the condition &lt;code&gt;username === 'John'&lt;/code&gt;, then it evaluates to &lt;em&gt;true&lt;/em&gt; which means that the user is authorized. If it doesn't match, the condition evaluates to &lt;em&gt;false&lt;/em&gt; indicating that the user is not authorized.&lt;/p&gt;

&lt;p&gt;🖐Oh, by the way, a quick note to explain extra few things concerning the block of code above. Using &lt;em&gt;backticks&lt;/em&gt; might seem new to you. They are called &lt;em&gt;Template literals&lt;/em&gt; or sometimes &lt;em&gt;Template strings&lt;/em&gt;. Instead of using ordinary quotation marks which do not allow us to embed expressions, we can use template literals that allow us to embed expressions using &lt;code&gt;${expression}&lt;/code&gt;. For a deeper investigation, try &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"&gt;MDN Documentation Template Literals&lt;/a&gt;. Great!👌🏻 Let's go on.&lt;/p&gt;

&lt;p&gt;So that's what a simple conditional statement could do. Now back to the ternary operator. This latter is shorter than the original conditional statement. It takes three &lt;em&gt;operands&lt;/em&gt; hence ternary. Let's take a look at its syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// condition ? expression1 : expression2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wow, wait what? Yes, that's a feature JavaScript offers to use when necessary. Remember! The key phrase here is &lt;strong&gt;when necessary&lt;/strong&gt; Let's see a practical example, supposing that we want to check navigation status:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;online&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;online&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ONLINE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;OFFLINE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// expected output: ONLINE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, this ternary operator can be divided into three parts, also known as operands. It takes a &lt;em&gt;condition&lt;/em&gt; which checks out whether the status equals online or not.&lt;/p&gt;

&lt;p&gt;The condition should always be followed by a &lt;em&gt;question mark&lt;/em&gt; ( ? ). After declaring the question mark, we add the &lt;em&gt;two expressions&lt;/em&gt;, which happen to be separated by a colon ( : ). If the condition is &lt;em&gt;truthy&lt;/em&gt;, the first expression executes. If it turns out a &lt;em&gt;falsy&lt;/em&gt; expression, then the second expression executes.&lt;/p&gt;

&lt;p&gt;That's how a basic ternary operator operates. It's like asking a simple question: is the status online? Is it? If it is, do this job; if it is not, do this job.🔥&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#boolean-based-conditions"&gt;
  &lt;/a&gt;
  Boolean based conditions
&lt;/h3&gt;

&lt;p&gt;It is not uncommon to trip over conditionals that will either evaluate thoroughly to true or false when using functions. But wait! Didn't we mention that conditions evaluate either to true or false by default? Yes, the case here is functions turn this feature to their advantage. Let's take an example, supposing that we have a simple function that compares values and returns either true or false.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Did you locate the ternary operator? Yes, we can treat it like that. And guess what? That's fine to JavaScript's logic.🧐 Let's test that function and log out the result that's the returned value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;

&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🖐By the way, if you're wondering what that &lt;code&gt;log()&lt;/code&gt; function is. It's not a built-in function in JavaScript. It's just a shortcut for &lt;code&gt;console.log()&lt;/code&gt; so that we don't have to type the entire thing every time. Here it is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#default-parameters"&gt;
  &lt;/a&gt;
  Default parameters
&lt;/h2&gt;

&lt;p&gt;Here's another cool thing about ternary operators. We can use them to set default parameters. Just like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;comments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Not yet&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;comments&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: Not yet&lt;/span&gt;

&lt;span class="nx"&gt;comments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I like that pizza!🤤&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// expected outcome: I like that pizza!🤤&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So what is happening here is that we are checking if the function returns a value or not. If the function is invoked without a given value, it should return &lt;code&gt;undefined&lt;/code&gt; by default. We would rather avoid such pitfalls. Ternary operators allow us to avoid such absurd behaviour by setting a static default parameter. If no value is provided, then the default will always be assigned to 'Not yet'.&lt;/p&gt;

&lt;p&gt;Note that the ternary operator is not the only way to set default params. It's just to make it clear it's possible through the ternary operator.&lt;/p&gt;

&lt;p&gt;🖐Note quickly that &lt;code&gt;typeof&lt;/code&gt; is an operator that returns the data type. For a deeper investigation, check out &lt;a&gt;MDN Documentation typeof Operator&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#healthy-or-not-healthy"&gt;
  &lt;/a&gt;
  Healthy or not healthy?
&lt;/h2&gt;

&lt;p&gt;Now how far do you think we can go with ternary operators? We can go deeper as this can become a nightmare later☠️. We can make an entire spiderweb nested by exploiting multiple conditions the same way it works with nested conditional statements. Let's peek into the original conditional that normally resorts to &lt;code&gt;if … else if … else if … else&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's suppose we want to enter a student name and check whether that student was present or absent yesterday. A simple and passive checker to check out a particular student based on the student's name as a variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;studentName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Lisa&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;studentName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;P&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;studentName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ann&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;P&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;studentName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bob&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;studentName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Maria&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;P&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;studentName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Lisa&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Student does not exist&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// expected output: A&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That already looks daunting let alone using a ternary operator😱:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;studentName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Lisa&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;studentName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;P&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;studentName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ann&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;P&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;studentName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bob&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;studentName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Maria&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;P&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;studentName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Lisa&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Student does not exist&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// expected output: A&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes, we can create that spiderweb🕸️. And it looks like infinite hell. We usually separate the conditions by colons. Although it might seem intelligible now, it can become confusing when using it in a larger code environment.&lt;/p&gt;

&lt;p&gt;So Is it healthy?&lt;/p&gt;

&lt;p&gt;It is not recommended to fall back on this behaviour. Not only is it a bad practice, but it's also giving a bad impression about yourself as a developer. We should write code that's readable and accessible to the entire team.&lt;/p&gt;

&lt;p&gt;It is not healthy to use this behaviour. However, it is healthy to use ternary operators wisely and only when necessary. That key phrase, remember? It is a blessing. It can be a curse, too.&lt;/p&gt;

&lt;p&gt;Thank you for your attention. I hope it has been as informative as you expected.&lt;/p&gt;

&lt;p&gt;Instagram: &lt;a href="https://www.instagram.com/cesarcode.init/"&gt;@cesarcode.init&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github: &lt;a href="//github.com/cesarcode-init"&gt;cesarcode-init&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How asynchronous works in JavaScript. Event Loop concept</title>
      <author>UppLabs</author>
      <pubDate>Tue, 25 May 2021 15:52:34 +0000</pubDate>
      <link>https://dev.to/upplabs/how-asynchronous-works-in-javascript-event-loop-concept-1ddb</link>
      <guid>https://dev.to/upplabs/how-asynchronous-works-in-javascript-event-loop-concept-1ddb</guid>
      <description>&lt;p&gt;&lt;em&gt;Written by Kirill Bychkov for &lt;a href="https://upplabs.com/"&gt;UppLabs&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;JavaScript is easy when all you need is a simple working interface. The problems begin when the interface becomes more complex. Here you need to have a deeper understanding of JavaScript. It is important that even a large and &lt;a href="https://upplabs.com/services/web-and-mobile-app-development/"&gt;complex interface&lt;/a&gt; remains fast and responsive. Responsiveness is usually achieved through the use of asynchronous functions. This means that you can let your code do several things at the same time without stopping or blocking the main thread.&lt;/p&gt;

&lt;p&gt;In this article, I will try to tell you as simply as possible about the work of asynchronous in JavaScript. At all interviews in my life, I have been always asked this question. When you start learning JS, it can seem daunting but in reality, everything is much simpler. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-the-event-loop-work"&gt;
  &lt;/a&gt;
  How does the Event Loop work?
&lt;/h2&gt;

&lt;p&gt;Event Loop is one of those things that every JavaScript developer encounters in one way or another. JavaScript provides a concurrency model based on an event loop, which executes the code, collecting and processing events, and performs queued sub-tasks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sxxzkt8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rd16skh7g3yjqor2ollq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sxxzkt8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rd16skh7g3yjqor2ollq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think it's not difficult to guess what sequence these logs will be called in. Let's check.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qxE1KeP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhw0anciof7shovlri0z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qxE1KeP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhw0anciof7shovlri0z.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But let's take a look at what's going on under the hood. In the example, I am using this &lt;a href="http://latentflip.com/"&gt;helpful site&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7I4DY_ap--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hhs8spmlttew0hok9v0u.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7I4DY_ap--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hhs8spmlttew0hok9v0u.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When the program starts, it runs through the lines of code. When an asynchronous operation comes across, the interpreter throws this operation into a Call Stack. In the stack, it begins to look like a certain set timeout and as a browser API. Then it throws out the set timeout and registers some anonymous function in the web APIs, which will be executed when the browser completes the set timeout after 5000 seconds. Next, the anonymous function enters the callback queue. An endless loop runs in the queue, which runs over its elements, and if it detects that the function is ready, it throws it back into the call stack and executes.&lt;/p&gt;

&lt;p&gt;Thus, we do not block the work of the code. We are talking not only about set timeouts but also about other asynchronous operations, such as event listeners that work along with the server.&lt;/p&gt;

&lt;p&gt;But what happens if 0 is passed as the second parameter to the timeout set? Exactly the same. Let's see.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1zZd_gu_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ziu1p9pmeulv5p21wrrh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1zZd_gu_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ziu1p9pmeulv5p21wrrh.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The browser will still drop the function into the web API, and the program will continue to work.&lt;br&gt;
Let's also take a look at how the event listener works.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y3e_JIG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jw2r5244x6t2ox2pmhe0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y3e_JIG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jw2r5244x6t2ox2pmhe0.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The event listener, as mentioned above, is also an asynchronous event and goes to the web API. You now understand the importance of unsubscribing from listening to events. You can read more details &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#macro-tasks"&gt;
  &lt;/a&gt;
  Macro tasks
&lt;/h2&gt;

&lt;p&gt;Let's take the same event example and try to click the button a few times.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dNBwAu-d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cb9iopo035zykvq6x2n2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dNBwAu-d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cb9iopo035zykvq6x2n2.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We see a queue of events. This is the macro task callback queue, a v8 term. Tasks from the queue are executed according to the first-in-first-out rule.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lets-note-two-details"&gt;
  &lt;/a&gt;
  Let's note two details:
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Rendering of the page never happens during the execution of a task by the engine. It doesn't matter how long the task takes. Changes to the DOM are rendered only after the task is completed.&lt;/li&gt;
&lt;li&gt;If the task takes a very long time and the browser cannot perform other tasks or process user events. So, sometime later the browser offers you to "kill" the long-running task. This is possible when the script contains a lot of complex calculations or an error leading to an infinite loop.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#micro-tasks"&gt;
  &lt;/a&gt;
  Micro tasks
&lt;/h2&gt;

&lt;p&gt;We could see the micro tasks in the last example. When the macro task is executing, the functions from it are placed in the call stack. The new macro task does not start its execution until the micro tasks have finished there. If you need more examples, you can check &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;Thanks to JavaScript, we can write asynchronous applications without thinking about multithreading like data integrity and data consistency.  If we are performing an operation that takes time, such as querying a database and using the results to fill the templates, it is better to push them out of the main thread and execute the task asynchronously. We compensate for these benefits with a huge number of callbacks, and constant loss of context. &lt;/p&gt;

&lt;p&gt;Depending on the specifics of the task, it may turn out that you will be using async/await, callbacks, or some mixture of different technologies. In fact, the answer to the question which asynchronous development methodology to choose depends on the specifics of the project. If a certain approach allows you to solve a problem using readable code that is easy to maintain and other team members can easily understand, then this approach is what you need!&lt;/p&gt;

&lt;p&gt;Now you can use callback, promises or async / await with understanding how it works in the browser :)&lt;/p&gt;

&lt;p&gt;I hope this article was helpful for you. You can also find more useful information on our &lt;a href="https://upplabs.com/upplabs-blog/"&gt;blog&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Pretty printing JSON.stringify</title>
      <author>Siddharth</author>
      <pubDate>Tue, 25 May 2021 15:08:17 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/pretty-printing-json-stringify-4pd3</link>
      <guid>https://dev.to/siddharthshyniben/pretty-printing-json-stringify-4pd3</guid>
      <description>&lt;p&gt;Most of use &lt;code&gt;JSON.stringify&lt;/code&gt; a lot to avoid the infamous &lt;code&gt;"[object Object]"&lt;/code&gt;. But did you know that it had a few more arguments?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JSON.stringify&lt;/code&gt; takes a total of 3 arguments. The first one is the data, the second is a &lt;em&gt;replacer function&lt;/em&gt;, and the third one is the &lt;em&gt;indentation&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The main topic of this article is the third argument. If you provide a string as the third argument, that string will be used as indentation. Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;e&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; {"a":"B","c":{"d":"e"}}&lt;/span&gt;
&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;e&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;  &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; &lt;/span&gt;
&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;//   "a": "B",&lt;/span&gt;
&lt;span class="c1"&gt;//   "c": {&lt;/span&gt;
&lt;span class="c1"&gt;//     "d": "e"&lt;/span&gt;
&lt;span class="c1"&gt;//   }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;e&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;// test"a": "B",&lt;/span&gt;
&lt;span class="c1"&gt;// test"c": {&lt;/span&gt;
&lt;span class="c1"&gt;// testtest"d": "e"&lt;/span&gt;
&lt;span class="c1"&gt;// test}&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also pass in a number instead. If you do so, that many spaces will be inserted as indentation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;e&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; &lt;/span&gt;
&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;//   "a": "B",&lt;/span&gt;
&lt;span class="c1"&gt;//   "c": {&lt;/span&gt;
&lt;span class="c1"&gt;//     "d": "e"&lt;/span&gt;
&lt;span class="c1"&gt;//   }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hope this helps you while debugging sometime!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>json</category>
    </item>
    <item>
      <title>How to manage global state with XState and React</title>
      <author>Matt Pocock</author>
      <pubDate>Tue, 25 May 2021 15:02:17 +0000</pubDate>
      <link>https://dev.to/mpocock1/how-to-manage-global-state-with-xstate-and-react-3if5</link>
      <guid>https://dev.to/mpocock1/how-to-manage-global-state-with-xstate-and-react-3if5</guid>
      <description>&lt;p&gt;Many React applications follow the Flux architecture popularised by &lt;a href="https://redux.js.org/"&gt;Redux&lt;/a&gt;. This setup can be characterised by a few key ideas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It uses a single object at the top of your app which stores all application state, often called the &lt;strong&gt;store&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;It provides a single &lt;code&gt;dispatch&lt;/code&gt; function which can be used to send messages up to the store. Redux calls these &lt;code&gt;actions&lt;/code&gt;, but I'll be calling them &lt;code&gt;events&lt;/code&gt; - as they're known in XState.&lt;/li&gt;
&lt;li&gt;How the store responds to these messages from the app are expressed in pure functions - most often in &lt;strong&gt;reducers&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This article won't go into depth on whether the Flux architecture is a good idea. David Khourshid's article &lt;a href="https://dev.to/davidkpiano/redux-is-half-of-a-pattern-1-2-1hd7"&gt;Redux is half a pattern&lt;/a&gt; goes into great detail here. For the purposes of this article, we're going to assume that you like having a global store, and you want to replicate it in XState.&lt;/p&gt;

&lt;p&gt;There are many reasons for wanting to do so. XState is second-to-none when it comes to managing complex asynchronous behaviour and modelling difficult problems. Managing this in Redux apps usually involves middleware: either &lt;a href="https://github.com/reduxjs/redux-thunk"&gt;redux-thunk&lt;/a&gt;, &lt;a href="https://github.com/redux-loop/redux-loop"&gt;redux-loop&lt;/a&gt; or &lt;a href="https://github.com/redux-saga/redux-saga"&gt;redux-saga&lt;/a&gt;. Choosing XState gives you a first-class way to manage complexity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-globally-available-store"&gt;
  &lt;/a&gt;
  A globally available store
&lt;/h2&gt;

&lt;p&gt;To mimic Redux's globally-available store, we're going to use React context. React context can be a tricky tool to work with - if you pass in values which change too often, in can result in re-renders all the way down the tree. That means we need to pass in values which change as little as possible.&lt;/p&gt;

&lt;p&gt;Luckily, XState gives us a first-class way to do that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useInterpret&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@xstate/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;authMachine&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./authMachine&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;InterpreterFrom&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;xstate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;GlobalStateContextType&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;authService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;InterpreterFrom&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;authMachine&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GlobalStateContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="c1"&gt;// Typed this way to avoid TS errors,&lt;/span&gt;
  &lt;span class="c1"&gt;// looks odd I know&lt;/span&gt;
  &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;GlobalStateContextType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GlobalStateProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;authService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useInterpret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;authMachine&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;GlobalStateContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;authService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;GlobalStateContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using &lt;code&gt;useInterpret&lt;/code&gt; returns a &lt;code&gt;service&lt;/code&gt;, which is a static reference to the running machine which can be subscribed to. This value &lt;em&gt;never&lt;/em&gt; changes, so we don't need to worry about wasted re-renders.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#utilising-context"&gt;
  &lt;/a&gt;
  Utilising context
&lt;/h2&gt;

&lt;p&gt;Further down the tree, you can subscribe to the service like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GlobalStateContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./globalState&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@xstate/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SomeComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;globalServices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;GlobalStateContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;globalServices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;authService&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;loggedIn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Logged In&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Logged Out&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;useService&lt;/code&gt; hook listens for whenever the service changes, and updates the &lt;code&gt;state&lt;/code&gt; value.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#improving-performance"&gt;
  &lt;/a&gt;
  Improving Performance
&lt;/h2&gt;

&lt;p&gt;There's an issue with the implementation above - this will update the component for &lt;em&gt;any&lt;/em&gt; change to the service. Redux offers tools for &lt;em&gt;deriving&lt;/em&gt; state using selectors - functions which restrict which parts of the state can result in components re-rendering.&lt;/p&gt;

&lt;p&gt;Luckily, XState provides that too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GlobalStateContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./globalState&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useSelector&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@xstate/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;selector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;loggedIn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SomeComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;globalServices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;GlobalStateContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;globalServices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;authService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Logged In&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Logged Out&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, this component will only re-render when &lt;code&gt;state.matches('loggedIn')&lt;/code&gt; returns a different value. This is my recommended approach over &lt;code&gt;useService&lt;/code&gt; for when you want to optimise performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dispatching-events"&gt;
  &lt;/a&gt;
  Dispatching events
&lt;/h2&gt;

&lt;p&gt;For dispatching events to the global store, you can call a service's &lt;code&gt;send&lt;/code&gt; function directly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GlobalStateContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./globalState&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SomeComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;globalServices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;GlobalStateContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;globalServices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;authService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;LOG_OUT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      Log Out
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that you don't need to call &lt;code&gt;useService&lt;/code&gt; for this, it's available right on the context.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deviations-from-flux"&gt;
  &lt;/a&gt;
  Deviations from Flux
&lt;/h2&gt;

&lt;p&gt;Keen-eyed readers may spot that this implementation is &lt;em&gt;slightly&lt;/em&gt; different from Flux. For instance - instead of a single global store, one might have several running machines at once: &lt;code&gt;authService&lt;/code&gt;, &lt;code&gt;dataCacheService&lt;/code&gt;, and &lt;code&gt;globalTimeoutService&lt;/code&gt;. Each of them have their own &lt;code&gt;send&lt;/code&gt; attributes, too - so you're not calling a global dispatch.&lt;/p&gt;

&lt;p&gt;These changes can be worked around. One could create a synthetic &lt;code&gt;send&lt;/code&gt; inside the global store which called all the services' &lt;code&gt;send&lt;/code&gt; function manually. But personally, I prefer knowing exactly which services my messages are being passed to, and it avoids having to keep events globally namespaced.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;XState can work beautifully as a global store for a React application. It keeps application logic co-located, treats side effects as first-class citizens, and offers good performance with &lt;code&gt;useSelector&lt;/code&gt;. You should choose this approach if you're keen on the Flux architecture but feel your app's logic is getting out of hand.&lt;/p&gt;

</description>
      <category>xstate</category>
      <category>react</category>
      <category>redux</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to remove outside borders of a 3x3 grid using CSS, e.g. Tic-Tac-Toe UI</title>
      <author>Patricia Nicole</author>
      <pubDate>Tue, 25 May 2021 15:01:43 +0000</pubDate>
      <link>https://dev.to/pat_the99/how-to-remove-outside-borders-of-a-3x3-grid-using-css-e-g-tic-tac-toe-ui-4ao8</link>
      <guid>https://dev.to/pat_the99/how-to-remove-outside-borders-of-a-3x3-grid-using-css-e-g-tic-tac-toe-ui-4ao8</guid>
      <description>&lt;p&gt;I was trying to achieve this kind of UI when I tried implementing the Tic-tac-toe game (I know it looks easy to some XD) &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NVaooBoH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q6tqy8u45qvakni32j0a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NVaooBoH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q6tqy8u45qvakni32j0a.png" alt="Tic-tac-toe board"&gt;&lt;/a&gt;&lt;br&gt;
The challenge was how to properly select the first and last column, as well as the first and last row. I seriously did not want to manually remove the borders of the eight cells.&lt;/p&gt;

&lt;p&gt;The data structure of my tic-tac-toe grid is not two-dimensional, but one, so I can easily do the tricks below. Think of my counting as this :&lt;br&gt;
0 | 1 | 2&lt;br&gt;
3 | 4 | 5 &lt;br&gt;
6 | 7 | 8&lt;/p&gt;

&lt;p&gt;For the first row, the top border should be removed, thus:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.board-item:nth-child(-n + 3) {
    border-top: none;
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the last column,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.board div:nth-child(3n) {
    border-right: none;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the first column,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.board-item:nth-child(3n  - 2) {
    border-left: none;
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the last row,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.board-item:nth-child(n + 7) {
    border-bottom: none;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that is it. Thanks for reading. Check my tic-tac-toe game &lt;a href="https://fatrixienicolieopetina.github.io/tictactoe/"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>codenewbie</category>
      <category>html</category>
    </item>
  </channel>
</rss>
