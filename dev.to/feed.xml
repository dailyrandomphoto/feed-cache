<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Bulletproof Express - Enterprise-Level Express.js</title>
      <author>Jo√£o Victor Cardoso Kdouk</author>
      <pubDate>Wed, 08 Dec 2021 20:48:39 +0000</pubDate>
      <link>https://dev.to/jvkdouk/bulletproof-express-enterprise-level-expressjs-2gig</link>
      <guid>https://dev.to/jvkdouk/bulletproof-express-enterprise-level-expressjs-2gig</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/JVKdouk/bulletproof-express/"&gt;Click Here to Access It&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I believe I am not the only who has read tens of express guides and never really found the perfect way of implementing it.&lt;/p&gt;

&lt;p&gt;In fact, I am confident to say that every Node.js developer has read at least 5 to 6 different guides on writing Express applications. How to make it work is not really a problem nowadays. However, have you ever asked yourself what is the &lt;strong&gt;right way&lt;/strong&gt; to do it? &lt;/p&gt;

&lt;p&gt;With that in mind, I decided to create a boilerplate that would summarize all the best practices used nowadays in the software industry, ensuring reliability, maintainability and scalability. This is what Bulletproof Express tries to accomplish. These are the features currently provided:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[x] Security (HTTP Parameter Pollution, Fingerprint, XSS...)&lt;/li&gt;
&lt;li&gt;[x] Support to Prisma DB (Easily Swappable)&lt;/li&gt;
&lt;li&gt;[x] Error Management&lt;/li&gt;
&lt;li&gt;[x] Logging (Using Sentry)&lt;/li&gt;
&lt;li&gt;[x] Component Structure (Features)&lt;/li&gt;
&lt;li&gt;[x] Queries and Mutators&lt;/li&gt;
&lt;li&gt;[x] Testing (Using Jest)&lt;/li&gt;
&lt;li&gt;[x] Permissions&lt;/li&gt;
&lt;li&gt;[x] TypeScript&lt;/li&gt;
&lt;li&gt;[x] Multi-Auth Support (JWT Implemented)&lt;/li&gt;
&lt;li&gt;[x] Cookie Parsing Supported&lt;/li&gt;
&lt;li&gt;[x] Environment Variable Parsing&lt;/li&gt;
&lt;li&gt;[x] Node.js Best Practices Compliant&lt;/li&gt;
&lt;li&gt;[x] Fully Asynchronous Controllers&lt;/li&gt;
&lt;li&gt;[ ] Seeding&lt;/li&gt;
&lt;li&gt;[ ] Testing via Docker&lt;/li&gt;
&lt;li&gt;[ ] Auto-Documentation (Swagger?)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#mvc-into-components"&gt;
  &lt;/a&gt;
  MVC into Components
&lt;/h2&gt;

&lt;p&gt;This boilerplate implements a slightly modified version of Model-View-Controller Pattern. Instead of having a single file storing every endpoint of a controller, every controller is broken down into Queries and Mutators. Inside Queries, you will find operations that retrieve data (usually GET methods). Inside Mutators, you will find operations that change data (usually POST, DELETE, and PUT methods).&lt;br&gt;
Queries and Mutators are joined together inside the controller-specific &lt;code&gt;routes.ts&lt;/code&gt;, which in turn are joined by the upper-level router at &lt;code&gt;/routes/index.ts&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nodejs-best-practices"&gt;
  &lt;/a&gt;
  Node.js Best Practices
&lt;/h2&gt;

&lt;p&gt;This repository is compliant with Node.js Best Practices (&lt;a href="https://github.com/goldbergyoni/nodebestpractices"&gt;Click Here&lt;/a&gt; to access their repository). Security standards are put above any decision. Testing is easy to implement and broken into individual feature, integrating it with the rest of the code as it should be. If you feel like there is any violation of those best practices, feel free to open an issue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#special-thanks"&gt;
  &lt;/a&gt;
  Special Thanks
&lt;/h2&gt;

&lt;p&gt;Special thanks to the Spectrum Project (&lt;a href="https://github.com/withspectrum/spectrum"&gt;Here&lt;/a&gt;) for laying the foundations to Bulletproof Express. Also, many thanks to Node.js Best Practices (&lt;a href="https://github.com/goldbergyoni/nodebestpractices"&gt;Here&lt;/a&gt;) and Bulletproof React (&lt;a href="https://github.com/alan2207/bulletproof-react"&gt;Here&lt;/a&gt;) for providing guidance on how Enterprise-Level Software should be written.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>programming</category>
      <category>express</category>
    </item>
    <item>
      <title>Acra. Features: Data masking</title>
      <author>Cossack Labs</author>
      <pubDate>Wed, 08 Dec 2021 20:47:16 +0000</pubDate>
      <link>https://dev.to/cossacklabs/acra-features-data-masking-3ng7</link>
      <guid>https://dev.to/cossacklabs/acra-features-data-masking-3ng7</guid>
      <description>&lt;p&gt;At &lt;a href="https://www.cossacklabs.com/"&gt;Cossack Labs&lt;/a&gt;, we strive to go ahead of trends and blaze a most effective trail for our customers. So, we designed Acra as a powerful multi-layer security tool for fintech, neobanks, healthcare and critical industry companies to cover data security threats in one shot.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/cossacklabs/acra"&gt;Use Acra Community Edition for free&lt;/a&gt;. Check out &lt;a href="https://www.cossacklabs.com/acra/#pricing"&gt;Acra Enterprise Edition&lt;/a&gt; tailored for solutions with high security requirements.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#data-masking"&gt;
  &lt;/a&gt;
  3Ô∏è‚É£ Data masking
&lt;/h2&gt;

&lt;p&gt;Acra allows configuring &lt;a href="https://docs.cossacklabs.com/acra/security-controls/masking/"&gt;data masking&lt;/a&gt; to certain database fields. Data fields stay encrypted in the database, but look masked/anonymized when reading through Acra.&lt;/p&gt;

&lt;p&gt;üí° Data masking is useful &lt;strong&gt;whether anonymizing datasets for reporting or exchanging the data with untrusted third parties.&lt;/strong&gt; Acra supports full or partial data masking, allowing customization of mask format.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9qx1QWAw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f1pk8fvs4u2i00fa8j1a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9qx1QWAw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f1pk8fvs4u2i00fa8j1a.png" alt="Data masking. Acra by Cossack Labs" width="822" height="290"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, with data masking, &lt;strong&gt;data stays encrypted, but could be easily shared&lt;/strong&gt; with untrusted parties without revealing it. &lt;/p&gt;

&lt;p&gt;üî• Let‚Äôs explore that else you get in the same box with Acra database security suite, follow the series.&lt;/p&gt;

</description>
      <category>cryptography</category>
      <category>security</category>
      <category>encryption</category>
      <category>database</category>
    </item>
    <item>
      <title>Tackling Technical Debt: Founding OutSystems</title>
      <author>Conor Bronsdon</author>
      <pubDate>Wed, 08 Dec 2021 20:29:30 +0000</pubDate>
      <link>https://dev.to/linearb/tackling-technical-debt-founding-outsystems-1k5</link>
      <guid>https://dev.to/linearb/tackling-technical-debt-founding-outsystems-1k5</guid>
      <description>&lt;p&gt;&lt;em&gt;Recently on the Dev Interrupted Podcast, &lt;a href="https://www.outsystems.com/"&gt;OutSystems&lt;/a&gt; CEO and founder Paulo Rosado joined us to chat about his path to founding the company, advice for successful leaders, and the growing threat of technical debt for businesses around the world. The conversation below has been edited and summarized for length and clarity.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tell-us-about-outsystems-founding-story-what-inspired-you-to-start-the-company"&gt;
  &lt;/a&gt;
  Tell us about OutSystems' founding story. What inspired you to start the company?
&lt;/h3&gt;

&lt;p&gt;In February 2021, OutSystems was valued at $9.5 billion dollars - but it certainly didn‚Äôt start out that way. The idea behind OutSystems was decades in the making, and its mission stems from what I observed after moving to Silicon Valley back in the mid-nineties. &lt;/p&gt;

&lt;p&gt;My journey in technology began when I graduated with a degree in computer engineering from Universidade Nova de Lisboa in Lisbon, Portugal and moved to the US to get my Masters in Computer Science from Stanford. Afterward, while working in Silicon Valley, I began to understand just how much of a problem technical debt was. &lt;/p&gt;

&lt;p&gt;While working on a very large engineering team, we were faced with tackling a gigantic project in Java and I realized the issues of releasing and maintaining code sustainably. The lack of productivity in the software development process was appalling. Fixing this problem is ultimately what motivated me to found OutSystems. &lt;/p&gt;

&lt;p&gt;Before founding OutSystems, there was a small company I founded and later sold, which focused on internet and intranet projects. It wasn‚Äôt a bad company, but we kept failing. Projects were never delivered on time or on budget. &lt;/p&gt;

&lt;p&gt;We would think to ourselves, ‚ÄúWe‚Äôre smart. How is this possible?‚Äù Our inclination was to blame the requirements of the project, labeling the scope as incorrect and adjust from there. However, we began to realize that the companies hiring us for these projects wanted us to make changes as we were developing in response to rapidly changing environments. &lt;/p&gt;

&lt;p&gt;The issue we began to face was the continual accumulation of technical debt. We would reach first production and realize we had built something users didn‚Äôt want, requiring us to go back and rework the stuff we had just built. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúWe came up with this realization that the problem was not that the requirements up front were wrong. The problem was that the cost of changing wrong requirements, which are a fact of life, is very high.‚Äù - &lt;a href="https://devinterrupted.com/podcast/outsystems-the-journey-to-a-9-5b-valuation/"&gt;on the Dev Interrupted podcast at 6:03&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/1Upd99Drq75d6WQK62e73X"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This phenomenon was occurring in 90% of projects at the time. Things were always over budget and always late. &lt;/p&gt;

&lt;p&gt;Today, it‚Äôs easy to take this for granted because concepts like Agile, DevOps, CI/CD are mainstream. But at the time, you had to build software the same way you build a bridge.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-is-technical-debt-a-challenge-for-companies-now-how-has-this-problem-changed"&gt;
  &lt;/a&gt;
  Why is technical debt a challenge for companies now? How has this problem changed?
&lt;/h3&gt;

&lt;p&gt;Technical debt has become a large problem for businesses, and one that only compounds with time. Tech debt doesn‚Äôt have a singular cause - it‚Äôs the accumulation of several factors. &lt;/p&gt;

&lt;p&gt;Over the course of my career, I‚Äôve seen first-hand the complexity brought about by the evolution of software development. For instance, we‚Äôve seen an explosion of languages, paradigms and frameworks that can all be used to achieve a solution. Often these languages are dispersed with no connections between them, so tracking these dependencies requires a great deal of sophistication. &lt;/p&gt;

&lt;p&gt;In addition to this, turnover within the development team is a critical problem that leads to technical debt. The moment a company loses a developer, the knowledge accrued by that developer also departs the company. The hole left behind is complex, including code,  frameworks and intent behind how their systems are structured. &lt;/p&gt;

&lt;p&gt;It‚Äôs been my experience that a lost team member can take as much as 20% to 30% of the fundamental knowledge of a system with them. Reverse engineering their work is both time-intensive and inefficient. &lt;/p&gt;

&lt;p&gt;Companies have tried to corral this problem by investing in coding standards. While these constraints can help mitigate the loss of a valued developer, our research indicates turnover remains a significant problem. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Q7Pcsmt-KBQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#outsystems-recently-released-a-study-on-the-effects-of-technical-debt-what-were-its-findings"&gt;
  &lt;/a&gt;
  OutSystems recently released a study on the effects of technical debt. What were its findings?
&lt;/h3&gt;

&lt;p&gt;Recently, OutSystems &lt;a href="https://www.outsystems.com/stop-tech-debt/"&gt;surveyed 500 large companies around the world&lt;/a&gt; to examine the cost of technical debt facing businesses and uncover the challenges companies face as they confront its causes. The results from the companies surveyed were many of the same things I‚Äôve observed throughout my career. &lt;/p&gt;

&lt;p&gt;It‚Äôs important to note that while the causes of technical debt have largely remained the same, the pace at which technical debt occurs has grown substantially.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúAnd so it's a hack, right? What we call a hack at OutSystems, they did a hack to just release the software quickly. And those hacks compound into technical debt.‚Äù - &lt;a href="https://devinterrupted.com/podcast/outsystems-the-journey-to-a-9-5b-valuation/"&gt;on the Dev Interrupted podcast at 27:11&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The survey we conducted isolated three major causes of technical debt. They are as follows: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;The amount of developer frameworks.&lt;/strong&gt; An increase in frameworks leads to an increase in technical debt. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Developer erosion.&lt;/strong&gt; Employees leaving an organization and taking legacy knowledge with them. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Compromises in quality of architecture and code.&lt;/strong&gt; Often caused by a shortsighted view that what needs to be done now is more important than long-term stability of the codebase.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the past, companies believed they could buy their way out of this problem, but that strategy has proven ineffective. The reality is, the most successful companies must build the software they require to meet their business needs. &lt;/p&gt;

&lt;p&gt;Simply purchasing what you need doesn‚Äôt solve your problems because even purchased systems must be cobbled together, requiring unique API‚Äôs, unique UI‚Äôs, unique portals, and unique mobile applications. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/m2hZnWvqTPk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#does-outsystems-play-a-role-in-helping-companies-cut-tech-debt"&gt;
  &lt;/a&gt;
  Does OutSystems play a role in helping companies cut tech debt?
&lt;/h3&gt;

&lt;p&gt;The core of what we do at OutSystems is focused on tackling those three fundamental problems. We understand that technical debt amasses slowly over time, through a myriad of decisions that appear much smaller at their onset than their totality would suggest. Once these ‚Äútiny‚Äù decisions become a major problem, they inhibit investment in current operations and future innovations. &lt;/p&gt;

&lt;p&gt;The increasing pressures of today‚Äôs fast-paced business environment often push companies toward decisions that spiral into technical debt. The good news is that by creating a development process that marries short-term deadlines with long-term strategic goals, it‚Äôs possible to ‚Äúpay down‚Äù that debt. &lt;/p&gt;

&lt;p&gt;I believe that any company is capable of whittling away technical debt with the correct tools and processes, and I founded OutSystems because companies shouldn‚Äôt have to choose between building fast and building right. &lt;/p&gt;

&lt;p&gt;To learn more about technical debt, how to combat it, and what to expect in the future, you can download the &lt;a href="https://www.outsystems.com/stop-tech-debt/"&gt;2021 Technical Debt Report&lt;/a&gt; on our website.  &lt;/p&gt;




&lt;p&gt;&lt;em&gt;This article is based on an episode of &lt;a href="https://devinterrupted.com/podcasts/"&gt;Dev Interrupted.&lt;/a&gt; The only podcast made exclusively for dev team leaders, it features expert guests from around the world to explore strategy and day-to-day topics ranging from dev team metrics to accelerating delivery.&lt;/em&gt; &lt;/p&gt;

</description>
      <category>devops</category>
      <category>leadership</category>
      <category>operations</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Firm but flexible: a pattern for creating resilient design system components</title>
      <author>Hossein Talebi</author>
      <pubDate>Wed, 08 Dec 2021 20:29:20 +0000</pubDate>
      <link>https://dev.to/jobber/firm-but-flexible-a-pattern-for-creating-resilient-design-system-components-2fjm</link>
      <guid>https://dev.to/jobber/firm-but-flexible-a-pattern-for-creating-resilient-design-system-components-2fjm</guid>
      <description>&lt;p&gt;Co-authored by &lt;a class="mentioned-user" href="https://dev.to/thatchrismurray"&gt;@thatchrismurray&lt;/a&gt;
 &lt;/p&gt;

&lt;p&gt;Building reusable design system components is a great way for an engineering team to accelerate delivery, improve communication between designers and engineers, and provide a consistent experience for end-users. When your components act in service of a design system, which in turn acts in service of your product‚Äôs UX patterns, a cohesive product can be built even as the number of contributors to the product grows. &lt;/p&gt;

&lt;p&gt;As the product evolves and grows, new use cases will emerge that simply don‚Äôt exist right now. Your design team will inevitably identify opportunities to extend, enhance, and otherwise evolve the user experience, and so too must the component library evolve.&lt;/p&gt;

&lt;p&gt;When it comes to a component library, this constant change becomes challenging. A single component can be used across multiple products thus any change to that component can potentially result in regression in the system.&lt;/p&gt;

&lt;p&gt;So with all this in mind, how might we build components that are opinionated enough to drive cohesion in the product, yet flexible enough to adopt future changes without introducing breaking changes and regression?&lt;/p&gt;

&lt;p&gt;In this article we look at the &lt;a href="https://kentcdodds.com/blog/compound-components-with-react-hooks"&gt;Compound Components pattern&lt;/a&gt; as one of the patterns for solving this problem. We will show how &lt;a href="https://en.wikipedia.org/wiki/Separation_of_concerns"&gt;Separation of Concerns&lt;/a&gt; and the Compound Components pattern can help us build a firm, flexible, and resilient component library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-saga-of-developing-a-list-component"&gt;
  &lt;/a&gt;
  The Saga of Developing a List Component
&lt;/h2&gt;

&lt;p&gt;We are going to demonstrate the Compound Component pattern and the problem that it solves using a contrived example of building a &lt;code&gt;List&lt;/code&gt; component. We will use React and TypeScript for building this example. Let's get started!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#initial-attempt-to-build-a-list-component"&gt;
  &lt;/a&gt;
  Initial Attempt to Build a List Component
&lt;/h3&gt;

&lt;p&gt;Our designer, Destin, and our Engineer, Enna are working together to build a component library. They have realized that there is a need for a &lt;code&gt;List&lt;/code&gt; component that can be used in different parts of the product.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Destin (the designer)&lt;/em&gt;&lt;/strong&gt;: Hey, we need to add a &lt;code&gt;List&lt;/code&gt; component to our component library. It's nothing fancy! We just need a list of items like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ya233ku2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/llq732myojqd610mgrii.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ya233ku2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/llq732myojqd610mgrii.jpg" alt="Initial List Component" width="880" height="556"&gt;&lt;/a&gt;&lt;br&gt;Initial List Component
  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Enna (the engineer)&lt;/em&gt;&lt;/strong&gt;: It looks simple. I'm on it!&lt;/p&gt;

&lt;p&gt;Enna considers that the &lt;code&gt;List&lt;/code&gt; component should be opinionated about how the items are rendered to ensure consistency across the product. She decides to make the &lt;code&gt;List&lt;/code&gt; component responsible for rendering the items. In her vision, the items are sent to the &lt;code&gt;List&lt;/code&gt; as a prop and the &lt;code&gt;List&lt;/code&gt; takes care of rendering them. She starts building the &lt;code&gt;List&lt;/code&gt; component with an interface like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ListItem&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ListProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ListItem&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After a bit of coding, she builds the &lt;code&gt;List&lt;/code&gt; component that can be used like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description for item 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description for item 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description for item 3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;List&lt;/span&gt;
  &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It looks elegant, easy to use, and ensures that wherever it's used, the items get rendered exactly the same.&lt;/p&gt;

&lt;p&gt;A couple of weeks pass and Destin comes back with a new request. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Destin:&lt;/em&gt;&lt;/strong&gt; Our research has shown that having an icon beside the list items will help people to distinguish between the items more easily. Can we make this happen?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Blddm5L5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h0uyitw9lfktug1c0exu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Blddm5L5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h0uyitw9lfktug1c0exu.jpg" alt="List Component with Icons" width="880" height="556"&gt;&lt;/a&gt;&lt;br&gt;List Component with Icons
  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Enna:&lt;/em&gt;&lt;/strong&gt; It should be straightforward. I can üíØ% make that happen!&lt;/p&gt;

&lt;p&gt;She looks at the &lt;code&gt;List&lt;/code&gt; component and decides to add an icon property to each item:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ListItem&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IconName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ListProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ListItem&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This new change now requires all the instances of the &lt;code&gt;List&lt;/code&gt; to receive an icon for each item. But that's not a big deal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;icon1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description for item 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;icon2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description for item 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;icon3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item 3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description for item 3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;List&lt;/span&gt;
  &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;List&lt;/code&gt; component is now in the wild and people are happily using it. But Destin is thinking of new use cases for the component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Destin&lt;/em&gt;&lt;/strong&gt;: Hey, we have realized two new use cases for the &lt;code&gt;List&lt;/code&gt; component. There are some lists that we would like to have an action button for each item. In some other lists, we would like to have some extra details text in place of the button:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NfZCZl6y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cdbmawb2075mdnztcqem.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NfZCZl6y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cdbmawb2075mdnztcqem.jpg" alt="List Component with Action Buttons" width="880" height="556"&gt;&lt;/a&gt;&lt;br&gt;List Component with Action Buttons
  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rnUVRVMC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7dvbf38c5st417gvodg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rnUVRVMC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7dvbf38c5st417gvodg.jpg" alt="List Component with Extra Details" width="880" height="556"&gt;&lt;/a&gt;&lt;br&gt;List Component with Extra Details
  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Enna&lt;/em&gt;&lt;/strong&gt;: Interesting... this is going to make the &lt;code&gt;List&lt;/code&gt; component complex but let me see what I can do.&lt;/p&gt;

&lt;p&gt;Enna realizes that now she has two different types of list items. Some of the properties are shared between the two types (like the &lt;code&gt;title&lt;/code&gt;) and some are unique to each item type. She decides to extract the shared properties into a new interface named &lt;code&gt;ListItemBase&lt;/code&gt; and define &lt;code&gt;ActionListItem&lt;/code&gt; and &lt;code&gt;ExtraDetailListItem&lt;/code&gt; that extend the &lt;code&gt;ListItemBase&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ListItemBase&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IconName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ActionListItem&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;BaseListItem&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ListItemWithAction&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MouseEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLButtonElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ExtraDetailListItem&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;BaseListItem&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ListItemWithExtraDetail&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;extraDetail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;items&lt;/code&gt; in the &lt;code&gt;ListProps&lt;/code&gt; now have a new type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ListProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ActionListItem&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;ExtraDetailListItem&lt;/span&gt;&lt;span class="p"&gt;)[];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The interface looks okay-ish but now there should be a decision statement inside the &lt;code&gt;List&lt;/code&gt; component that decides whether to render an &lt;code&gt;ActionListItem&lt;/code&gt; or &lt;code&gt;ExtraDetailListItem&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;She decides that a single decision statement is not a big deal and she goes on with changing the &lt;code&gt;List&lt;/code&gt; component to support the two new types of list items.&lt;/p&gt;

&lt;p&gt;One day when Destin is working on designing a feature for communications, he realizes that the &lt;code&gt;List&lt;/code&gt; component can be used for rendering a list of messages. He presents the new use case to Enna.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Destin&lt;/em&gt;&lt;/strong&gt;: In this new use case we want to show an avatar instead of the icon. We also want to open the conversation when people click on the message item. I forgot to mention that we need to have a way to indicate if the message is unread. Can you make the &lt;code&gt;List&lt;/code&gt; component handle this?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W5Dul4aW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0bk8oty99g5xz2b3t0fz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W5Dul4aW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0bk8oty99g5xz2b3t0fz.jpg" alt="List component for Conversation List" width="880" height="556"&gt;&lt;/a&gt;&lt;br&gt;List component for Conversation List
  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Enna&lt;/em&gt;&lt;/strong&gt;: Hmmm... we can change the &lt;code&gt;List&lt;/code&gt; component to handle this use case but it will add a lot of complexity to the component.&lt;/p&gt;

&lt;p&gt;There are going to be more and more use cases for new types of list items. Adding those use cases to the &lt;code&gt;List&lt;/code&gt; ensures there's a unified way of rendering items which will provide the consistency we would like to have across our products. But with every single change to the &lt;code&gt;List&lt;/code&gt;, we increase the chance of regression for all instances of the &lt;code&gt;List&lt;/code&gt;. No need to mention that we are also adding more and more complexity to the &lt;code&gt;List&lt;/code&gt; which makes its maintenance harder. So what can we do?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-did-we-end-up-here"&gt;
  &lt;/a&gt;
  How did we end up here?
&lt;/h3&gt;

&lt;p&gt;It all started with the initial &lt;code&gt;List&lt;/code&gt; component. In the initial version, the &lt;code&gt;List&lt;/code&gt; component had two separate responsibilities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rendering a list of items&lt;/li&gt;
&lt;li&gt;Managing how each item should be rendered&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rendering a list of items is the actual responsibility of the &lt;code&gt;List&lt;/code&gt; component, but how each item gets rendered could have been extracted into its own set of components.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#separation-of-concerns-using-compound-components"&gt;
  &lt;/a&gt;
  Separation of Concerns Using Compound Components
&lt;/h3&gt;

&lt;p&gt;Separation of concerns is here to help. By separating every concern of our component into its own component, we can reduce the complexity and make it easier to embrace future changes.&lt;/p&gt;

&lt;p&gt;How do we figure out different concerns of the component? One easy way to think about concerns is to think about the reasons that each piece of software has for changing. Huh...? Let me explain more. Imagine the &lt;code&gt;List&lt;/code&gt; component. The list items can change depending on the feature we are building and the customer's needs. The requirement for the list itself would not generally change from feature to feature. So the list and list items have different reasons for changing. This means they are different concerns.&lt;/p&gt;

&lt;p&gt;Now that we figured out the two concerns of the &lt;code&gt;List&lt;/code&gt; component, how can we separate them? &lt;a href="https://kentcdodds.com/blog/compound-components-with-react-hooks"&gt;Compound Components&lt;/a&gt; are the way to accomplish this. The &lt;code&gt;List&lt;/code&gt; component can accept its items as children like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ListItem&lt;/span&gt; &lt;span class="p"&gt;{...{&lt;/span&gt; &lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;  &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are some immediate advantages to this approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The complexity is broken down into smaller components&lt;/li&gt;
&lt;li&gt;Changes in the &lt;code&gt;ListItem&lt;/code&gt; would not alter the code in the &lt;code&gt;List&lt;/code&gt; component. This helps with less regression over time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let‚Äôs get back to the earlier request we had about rendering a list of Messages. Our first instinct might be to modify our &lt;code&gt;ListItem&lt;/code&gt; to be able to handle messages. But wait! Do message items have different reasons for changing than the generic &lt;code&gt;ListItem&lt;/code&gt;? Yes! They are representing two different types of information that can have different reasons for change. Hence our message item is a new concern. We can create a new component for the &lt;code&gt;MessageItem&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MessageItem&lt;/span&gt;
      &lt;span class="nx"&gt;thumbnail&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;thumbnail&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;sender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;sentAt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sentAt&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;hasBeenRead&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasBeenRead&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;  &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can extend the usage of the &lt;code&gt;List&lt;/code&gt; component to a variety of use cases without touching anything in the &lt;code&gt;List&lt;/code&gt; component!&lt;/p&gt;

&lt;p&gt;Separating the &lt;code&gt;List&lt;/code&gt; component concerns using the Compound Component pattern helps embracing future changes more easily without causing regression.&lt;/p&gt;

&lt;p&gt;So far we separated the concerns of the &lt;code&gt;List&lt;/code&gt; component into smaller components that can be passed as children for the &lt;code&gt;List&lt;/code&gt;. This made the component less complex, easier to maintain, and flexible to future changes. But now we created a new problem! Any component can be passed as children to the &lt;code&gt;List&lt;/code&gt; and we lost control over which types of items we render in the list.&lt;/p&gt;

&lt;p&gt;Since any component can be passed as children to the new &lt;code&gt;List&lt;/code&gt; component, this might feel like we can't enforce the design system's opinions on the &lt;code&gt;List&lt;/code&gt; component. In order to enforce those opinions, we can check the type of each child and ensure they are aligned with the opinion of our design system. Depending on how strict you want to be, you can show a warning message or even not render the items that are not accepted by the design system:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ACCEPTED_LIST_ITEMS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ListItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MessageListItem&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ACCEPTED_LIST_ITEMS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The List can't render this type of item&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;üéâ with this final touch we ensured that the &lt;code&gt;List&lt;/code&gt; component is firm in allowing only certain types of items.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Change is an inevitable part of any software and UI components are no different. When building UI components, it‚Äôs helpful to ask yourself about the possible future changes that the component could expect. This will help you understand different reasons that your component could change and will provide a good way to separate those concerns. The goal is not to build a component that covers all the expected/unexpected future needs, but rather to separate the concerns in a way that future changes can be applied with minimal impact on the whole system.&lt;/p&gt;

&lt;p&gt;The Compound Component pattern can be used to break down the concerns of a component into smaller components. This will help reduce the complexity and also decrease the chance of regression as we add new capabilities to the component. It also enables your design team to iterate and expand on the design system with confidence.&lt;/p&gt;

&lt;p&gt;What are other techniques you use for building scalable design systems? If you are interested in solving similar problems, we're hiring for remote positions across Canada at all software engineering levels! &lt;/p&gt;

&lt;p&gt;Our awesome Jobber technology teams span across Payments, Infrastructure, AI/ML, Business Workflows &amp;amp; Communications. We work on cutting edge &amp;amp; modern tech stacks using React, React Native, Ruby on Rails, &amp;amp; GraphQL. &lt;/p&gt;

&lt;p&gt;If you want to be a part of a collaborative work culture, help small home service businesses scale and create a positive impact on our communities, then visit our &lt;a href="https://getjobber.com/about/careers/?utm_source=devto&amp;amp;utm_medium=social&amp;amp;utm_campaign=eng_blog"&gt;career&lt;/a&gt; site to learn more!&lt;/p&gt;

</description>
      <category>component</category>
      <category>library</category>
      <category>design</category>
      <category>react</category>
    </item>
    <item>
      <title>Are you a web developer and want to convert your site to Android app in a few minutes for free ,No coding , how! let me show you</title>
      <author>AmrElDessouki22</author>
      <pubDate>Wed, 08 Dec 2021 20:01:33 +0000</pubDate>
      <link>https://dev.to/amreldessouki/are-you-a-web-developer-and-want-to-convert-your-site-to-android-app-in-a-few-minutes-for-free-no-coding-how-let-me-show-you-1ime</link>
      <guid>https://dev.to/amreldessouki/are-you-a-web-developer-and-want-to-convert-your-site-to-android-app-in-a-few-minutes-for-free-no-coding-how-let-me-show-you-1ime</guid>
      <description>&lt;p&gt;Today we present &lt;a href="https://urlgapp.com"&gt;https://urlgapp.com&lt;/a&gt; - a tool designed to convert any responsive website into an Android app. üì≤&lt;/p&gt;

&lt;p&gt;You don't need to be a coder to use this solution to wrap your website into a professional android app! üéÅ&lt;br&gt;
Urlgapp is a webtool to convert your website to an android app with app bundle &amp;amp; apk with your own key store valid for 10,000 days on google play store&lt;/p&gt;

&lt;p&gt;Features that we provide&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apk &amp;amp; App bundle&lt;/li&gt;
&lt;li&gt;Google play Key&lt;/li&gt;
&lt;li&gt;Firebase Notification&lt;/li&gt;
&lt;li&gt;Media permission&lt;/li&gt;
&lt;li&gt;Admob integration&lt;/li&gt;
&lt;li&gt;Dialog Ask to exit app&lt;/li&gt;
&lt;li&gt;Internet connection error . native page&lt;/li&gt;
&lt;li&gt;Android native spinner&lt;/li&gt;
&lt;li&gt;Ask to open link with different domain name out side the app&lt;/li&gt;
&lt;li&gt;Login by google is working&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Do you have any example for this tool in google play ‚ùì&lt;/strong&gt;&lt;br&gt;
yes we have you can download it from here&lt;br&gt;
&lt;a href="https://play.google.com/store/ap"&gt;https://play.google.com/store/ap&lt;/a&gt;...&lt;br&gt;
it‚Äôs very simple app&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;why you add a media permission ‚ùì&lt;/strong&gt;&lt;br&gt;
urlgapp doesn`t know what type of website it you but if your user upload or download any file without any permission google play will remove your app from store so, we have added it by default to make sure your app is safe on google play&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No coding.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;you don't have a live website !! &lt;br&gt;
**&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;we have anther solution &lt;/p&gt;

&lt;p&gt;HTMLgApp is a website (web tool) to convert your HTML , CSS ,JS code to an android app with app bundle &amp;amp; apk with your own key store valid for 10,000 days on google play store&lt;/p&gt;

&lt;p&gt;üì£ **&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Your files will be deleted automatically after generate or fail&lt;br&gt;
**&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Features that we provide&lt;/p&gt;

&lt;p&gt;Apk &amp;amp; App bundle&lt;br&gt;
Google play Key&lt;br&gt;
Media permission&lt;br&gt;
Dialog Ask to exit app&lt;br&gt;
Internet connection error . native page&lt;br&gt;
Android native spinner&lt;br&gt;
Do you have any example for this tool in google play ‚ùì&lt;br&gt;
yes we have you can download it from here&lt;br&gt;
&lt;a href="https://play.google.com/store/apps/details?id=com.urlgapp.app1635406887441"&gt;https://play.google.com/store/apps/details?id=com.urlgapp.app1635406887441&lt;/a&gt;&lt;br&gt;
it‚Äôs very simple app&lt;/p&gt;

&lt;p&gt;why you add a media permission ‚ùì&lt;br&gt;
HTMLgApp doesn`t know what type of website it you but if your user upload or download any file without any permission google play will remove your app from store so, we have added it by default to make sure your app is safe on google play&lt;/p&gt;

&lt;p&gt;If you have any question, feel free to ask&lt;/p&gt;

&lt;p&gt;check it now&lt;br&gt;
&lt;a href="https://urlgapp.com/home/htmlgapp"&gt;https://urlgapp.com/home/htmlgapp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What is your excuse now to start building your application and increase your web site users from Android users, create your release android app now and publish it on Google Play and let the world see your talent&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Felte: An extensible form library for Solid</title>
      <author>Pablo Berganza</author>
      <pubDate>Wed, 08 Dec 2021 19:51:11 +0000</pubDate>
      <link>https://dev.to/pabloabc/felte-an-extensible-form-library-for-solid-4cde</link>
      <guid>https://dev.to/pabloabc/felte-an-extensible-form-library-for-solid-4cde</guid>
      <description>&lt;p&gt;Arguably one of the most common problems front-end developers need to solve is form handling. Specially in modern web applications that require instant validation and other real-time interactions with the user.  To provide the best user experience as possible, you‚Äôll probably grab a third party form management library to help you.&lt;/p&gt;

&lt;p&gt;In this post I am going to write about Felte, a form management library for Solid I have been working on for the past year that aims to make the basics of form handling on the front-end as simple as possible, while still allowing for it to grow more complex as your requirements grow.&lt;/p&gt;

&lt;p&gt;This is one of two blog posts I‚Äôm writing. This one is oriented towards Felte‚Äôs integration with &lt;a href="https://solidjs.com"&gt;Solid&lt;/a&gt;. The other one is oriented towards Felte‚Äôs integration with &lt;a href="https://svelte.dev"&gt;Svelte&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;p&gt;As mentioned above, Felte aims to make the basics of form reactivity as easy to handle as possible, while still allowing for more complex behaviours via configuration and extensibility. Its main features are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Single action to make your form reactive.&lt;/li&gt;
&lt;li&gt;Use HTML5 native elements to create your form. (Only the &lt;code&gt;name&lt;/code&gt; attribute is necessary).&lt;/li&gt;
&lt;li&gt;Provides stores and helper functions to handle more complex use cases.&lt;/li&gt;
&lt;li&gt;No assumptions on your validation strategy. Use any validation library you want or write your own strategy.&lt;/li&gt;
&lt;li&gt;Handles addition and removal of form controls during runtime.&lt;/li&gt;
&lt;li&gt;Official solutions for error reporting using &lt;code&gt;reporter&lt;/code&gt; packages.&lt;/li&gt;
&lt;li&gt;Supports validation with &lt;a href="https://felte.dev/docs/solid/validators#using-yup"&gt;yup&lt;/a&gt;, &lt;a href="https://felte.dev/docs/solid/validators#using-zod"&gt;zod&lt;/a&gt;, &lt;a href="https://felte.dev/docs/solid/validators#using-superstruct"&gt;superstruct&lt;/a&gt; and &lt;a href="https://felte.dev/docs/solid/validators#using-vest"&gt;vest&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Easily &lt;a href="https://felte.dev/docs/solid/extending-felte"&gt;extend its functionality&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-look-like"&gt;
  &lt;/a&gt;
  How does it look like?
&lt;/h2&gt;

&lt;p&gt;In its most basic form, Felte only requires a single function to be imported:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createForm&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@felte/solid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createForm&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;use&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="na"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Sign in"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We set up the form by calling &lt;code&gt;createForm&lt;/code&gt; with our &lt;code&gt;submit&lt;/code&gt; handler. This function returns, among other utilities, an action that can be used on your form element. Now Felte will track all inputs with a &lt;code&gt;name&lt;/code&gt; attribute. When submitting your form, the latest values in your inputs will be passed to your &lt;code&gt;onSubmit&lt;/code&gt; function as an object. For our previous example, the shape of &lt;code&gt;values&lt;/code&gt; will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  email: '',
  password: '',
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#where-can-i-see-my-data"&gt;
  &lt;/a&gt;
  Where can I see my data?
&lt;/h2&gt;

&lt;p&gt;As you type, Felte will keep track of your user‚Äôs input in a regular Solid store. This store is returned by &lt;code&gt;createForm&lt;/code&gt; as &lt;code&gt;data&lt;/code&gt;, following the same shape as the values you‚Äôd receive on your &lt;code&gt;onSubmit&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;For example, this would log your user‚Äôs email to the console as they type it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createForm&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="cm"&gt;/* ... */&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#i-might-need-some-validation-here"&gt;
  &lt;/a&gt;
  I might need some validation here
&lt;/h2&gt;

&lt;p&gt;Of course, another common requirement of forms is validation. If we want our app to feel snappy to the user, we will want some client side validation. &lt;code&gt;createForm&lt;/code&gt;‚Äôs configuration object accepts a &lt;code&gt;validate&lt;/code&gt; function (which can be asynchronous). It will receive the current value of your &lt;code&gt;data&lt;/code&gt; store as it changes, and it expects you to return an object with the same shape as your &lt;code&gt;data&lt;/code&gt; store containing your validation messages if the form is not valid, or nothing if your form is valid. Felte will keep track of these validation messages on a store that is returned from &lt;code&gt;createForm&lt;/code&gt; as &lt;code&gt;errors&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createForm&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentErrors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;currentErrors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Must not be empty&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;currentErrors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Must not be empty&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;currentErrors&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More complex validation requirements might require third party validation libraries. Felte offers first party integrations  with some popular validation libraries through its extensibility features. These integrations are offered as separate packages. I will write write more about this in the next section regarding extensibility, but you can read more about these packages in our &lt;a href="https://felte.dev/docs/solid/validators"&gt;official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#handling-complex-scenarios-via-extensibility"&gt;
  &lt;/a&gt;
  Handling complex scenarios via extensibility
&lt;/h2&gt;

&lt;p&gt;Felte does not attempt to have the perfect solution on how to handle all scenarios regarding form management. This is why Felte offers an API to extend its functionality as your requirements grow more complex. You may have a preferred library you like to use, such as the really popular &lt;a href="https://github.com/jquense/yup"&gt;yup&lt;/a&gt;, or &lt;a href="https://vestjs.dev/"&gt;Vest&lt;/a&gt; (which was recently talked about during &lt;a href="https://www.youtube.com/watch?v=X2PuiawaGV4"&gt;Svelte Summit&lt;/a&gt;). Modifying Felte‚Äôs behaviour to handle these scenarios can be done via the &lt;code&gt;extend&lt;/code&gt; option on &lt;code&gt;createForm&lt;/code&gt;‚Äôs configuration object. More about this can be read in the &lt;a href="https://felte.dev/docs/solid/extending-felte"&gt;official documentation&lt;/a&gt;. To keep things simple for the purposes of this blog post, I am only going to write about some of the existing packages we maintain to handle some common use cases:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#validators-integrations-with-popular-validation-libraries"&gt;
  &lt;/a&gt;
  Validators: Integrations with popular validation libraries
&lt;/h3&gt;

&lt;p&gt;We are currently maintaining four packages to integrate Felte with some popular validation libraries: &lt;code&gt;yup&lt;/code&gt;, &lt;code&gt;zod&lt;/code&gt;, &lt;code&gt;superstruct&lt;/code&gt; and most recently &lt;code&gt;vest&lt;/code&gt;. Here we will use yup as an example, but you can read more about the rest &lt;a href="https://felte.dev/docs/solid/validators"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The package to use &lt;code&gt;yup&lt;/code&gt; is on npm under the name &lt;code&gt;@felte/validator-yup&lt;/code&gt;. You will need to install it alongside &lt;code&gt;yup&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save&lt;/span&gt; @felte/validator-yup yup

&lt;span class="c"&gt;# Or, if you use yarn&lt;/span&gt;

yarn add @felte/validator-yup yup
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This validator package exports a function called &lt;code&gt;validator&lt;/code&gt; which can be passed as-is to the &lt;code&gt;extend&lt;/code&gt; option of &lt;code&gt;createForm&lt;/code&gt;. Your validation schema can then be passed to the &lt;code&gt;validateSchema&lt;/code&gt; option:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;validator&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@felte/validator-yup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createForm&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="na"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;validator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// OR `extend: [validator],`&lt;/span&gt;
  &lt;span class="na"&gt;validateSchema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#reporters-displaying-validation-messages"&gt;
  &lt;/a&gt;
  Reporters: Displaying validation messages
&lt;/h3&gt;

&lt;p&gt;Displaying your validation messages can be done by directly accessing the &lt;code&gt;errors&lt;/code&gt; store returned by &lt;code&gt;createForm&lt;/code&gt;. Messages won‚Äôt be available on this store until the related field is interacted with.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Show&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;solid-js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createForm&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@felte/solid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createForm&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="cm"&gt;/* ... */&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;use&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="na"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;for&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Email:&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Show&lt;/span&gt; &lt;span class="na"&gt;when&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But displaying the messages is not the end of the story in most cases. For example, you might want to add an &lt;code&gt;aria-invalid&lt;/code&gt; attribute to the related input. Or you simply might not like that specific syntax to handle your validation messages. Felte currently has four accompanying packages that offer different alternatives on how to display your validation messages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using a Solid component, which gives the most flexibility.&lt;/li&gt;
&lt;li&gt;Modifying the DOM directly by adding and removing DOM elements.&lt;/li&gt;
&lt;li&gt;Using Tippy.js to display your messages  in a tooltip.&lt;/li&gt;
&lt;li&gt;Using the browser‚Äôs built-in constraint validation API, which can be less friendly to mobile users.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For brevity, I am only going to cover the first package. But you can read more about the rest &lt;a href="https://felte.dev/docs/solid/reporters"&gt;in the documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using a Solid component to get your validation messages can be done with the package &lt;code&gt;@felte/reporter-solid&lt;/code&gt;.  You‚Äôll need to add it to your project using your favourite package manager:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# npm&lt;/span&gt;
npm i &lt;span class="nt"&gt;-S&lt;/span&gt; @felte/reporter-solid

&lt;span class="c"&gt;# yarn&lt;/span&gt;
yarn add @felte/reporter-solid
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you‚Äôll need to import both the &lt;code&gt;reporter&lt;/code&gt; function to add to the &lt;code&gt;extend&lt;/code&gt; property, and the &lt;code&gt;ValidationMessage&lt;/code&gt; component which you will use to receive your validation messages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;reporter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ValidationMessage&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@felte/reporter-solid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createForm&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@felte/solid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createForm&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="c1"&gt;// ...&lt;/span&gt;
      &lt;span class="na"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;reporter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// or [reporter]&lt;/span&gt;
      &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

 &lt;span class="c1"&gt;// We assume a single string will be passed as a validation message&lt;/span&gt;
 &lt;span class="c1"&gt;// This can be an array of strings depending on your validation strategy&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;use&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="na"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ValidationMessage&lt;/span&gt; &lt;span class="na"&gt;for&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ValidationMessage&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ValidationMessage&lt;/span&gt; &lt;span class="na"&gt;for&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ValidationMessage&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Sign in"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h2&gt;

&lt;p&gt;You can check more about Felte in its &lt;a href="https://felte.dev"&gt;official website&lt;/a&gt; with some functional examples. There‚Äôs also a more complex example showcasing its usage with Tippy.js and Yup available on &lt;a href="https://codesandbox.io/s/felte-demo-solidjs-w92uj?file=/src/main.tsx"&gt;CodeSandbox&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finishing-thoughts"&gt;
  &lt;/a&gt;
  Finishing thoughts
&lt;/h2&gt;

&lt;p&gt;I hope this served as a good introduction to Felte, and that it is interesting enough for you to give it a try. Felte is currently in quite a useable state and I feel it‚Äôs flexible enough for most use cases.  I am also open to help and suggestions so feel free to open an issue or make a pull request on &lt;a href="https://github.com/pablo-abc/felte"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>solidjs</category>
      <category>webdev</category>
      <category>forms</category>
    </item>
    <item>
      <title>Welcome Thread - v154</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 08 Dec 2021 19:42:43 +0000</pubDate>
      <link>https://dev.to/thepracticaldev/welcome-thread-v154-482o</link>
      <guid>https://dev.to/thepracticaldev/welcome-thread-v154-482o</guid>
      <description>&lt;p&gt;&lt;a href="https://i.giphy.com/media/ejpCynLi88pGEUbmvQ/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/ejpCynLi88pGEUbmvQ/giphy.gif" alt='Monsters saying "One of Us"' width="480" height="384"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#welcome-to-dev"&gt;
  &lt;/a&gt;
  Welcome to DEV!
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Leave a comment below to introduce yourself! You can talk about what brought you here, what you're learning, or just a fun fact about yourself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reply to someone's comment, either with a question or just a hello. üëã &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Great to have you in the community!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>welcome</category>
    </item>
    <item>
      <title>Little drops on C# Interview questions - Intermediate Language</title>
      <author>Ynoa Pedro</author>
      <pubDate>Wed, 08 Dec 2021 19:33:12 +0000</pubDate>
      <link>https://dev.to/ypedroo/little-drops-on-c-interview-questions-intermediate-language-3hkf</link>
      <guid>https://dev.to/ypedroo/little-drops-on-c-interview-questions-intermediate-language-3hkf</guid>
      <description>&lt;p&gt;Little drops on C# Interview Questions series&lt;br&gt;
The intention behind this series is to answer with a little bit of context or examples of some of the most common C# interview questions.&lt;/p&gt;

&lt;p&gt;Today we briefly explain what is Intermediate Language&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#so-net-c-how-it-works-then"&gt;
  &lt;/a&gt;
  So .NET != C#? How it works then?
&lt;/h1&gt;

&lt;p&gt;Precisely, I have seen many people getting this mistakenly, .NET is a platform for CLR languages to be compiled(Common runtime language), with this in mind to compile anything we have to think it into 3 steps:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wa8wjzWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s5hr5qnc4ox3z7xx9ph1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wa8wjzWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s5hr5qnc4ox3z7xx9ph1.gif" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So IL is the half compiled code that is interpreted by JIT into machine code.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-do-i-need-to-know-it"&gt;
  &lt;/a&gt;
  Why do I need to know it
&lt;/h1&gt;

&lt;p&gt;If you are to specialize in something do it right and know how it works, not only for interviews, knowing one or two levels of abstractions besides your favorite language enables you to solve more complex issues in the future.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ok-can-i-see-the-il-code"&gt;
  &lt;/a&gt;
  Ok, can I see the IL code?
&lt;/h1&gt;

&lt;p&gt;For sure, the are many great tools to visualize and interact with IL, like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/icsharpcode/ILSpy"&gt;ILSpy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linqpad.net/"&gt;LinqPad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dotnetfiddle.net/"&gt;dotnetfiddle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Also, IDEs usually have nice integrations, like Visual Studio or Jetbrains Rider my personal choice:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dNxn12Xr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/edia559be9g8m8xd9wot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dNxn12Xr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/edia559be9g8m8xd9wot.png" alt="Image description" width="618" height="511"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#to-go-deeper"&gt;
  &lt;/a&gt;
  To go deeper
&lt;/h1&gt;

&lt;p&gt;This is of course just a brief introduction on the topic, for further reading I recommend:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/managed-code"&gt;Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://elemarjr.com/arquivo/trying-to-improve-performance-in-net-here-are-the-basics-you-need-to-know-about-intermediate-language-jit-windbg-and-assembly/"&gt;Elemar jr: Trying to improve peroformance in net...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://freecontent.manning.com/how-is-c-compiled/#:~:text=The%20C%23%20compilation%20process%20has,referred%20to%20as%20machine%20code."&gt;Manning Free Content Center&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>dotnet</category>
      <category>career</category>
      <category>beginners</category>
      <category>backend</category>
    </item>
    <item>
      <title>Flame 1.0 is here!</title>
      <author>Luan Nico</author>
      <pubDate>Wed, 08 Dec 2021 18:56:50 +0000</pubDate>
      <link>https://dev.to/blue-fire/flame-10-is-here-430n</link>
      <guid>https://dev.to/blue-fire/flame-10-is-here-430n</guid>
      <description>&lt;p&gt;Hi there, folks! It's been a while since our last article, but if you are following &lt;a href="https://github.com/flame-engine/flame"&gt;Flame on GitHub&lt;/a&gt; or participating in our &lt;a href="https://discord.gg/pxrBmy4"&gt;Discord&lt;/a&gt;, you know very well that we have not been idle. Far from it. In fact, you might have noticed more and more Release Candidates being put out regularly, mostly with some needed updates and cleanups, a few new core features, bug fixes, and incorporating valuable feedback from our amazing Game Jam. That is because both the team and the community have been working together, relentlessly, to make Flame the best it can be.&lt;/p&gt;

&lt;p&gt;And, first of all, I would like to make it very clear that we are not done with this goal, not even close -- the pile of things we know could be improved, extended or added is only shadowed by the mountain that we don't even know about yet. So the first thing I would like to reassure everyone, with this article, is that nothing really changes in that regard. We will still be putting out PRs, receiving invaluable help from the community, making improvements, new features, bug fixes. We will still be at discord, helping out new people, having deep, productive discussions with veterans, and collaborating together to keep growing and enhancing all Blue Fire's projects.&lt;/p&gt;

&lt;p&gt;That being said, we do have a key milestone to share. You might have already heard about it on the &lt;a href="https://medium.com/flutter/announcing-flutter-2-8-31d2cb7e19f5"&gt;Flutter 2.8 release article&lt;/a&gt;, or maybe got a sneak peek on pub; but, regardless, we wanted to double down and proudly announce we just released Flame 1.0.0. Yes, it's official, and finally here! What an end-of-year holiday gift to us to finally be able to say that, given all the work that has been put into it! We are very happy with the current state of our code and the capabilities provided, and we think it's time to make this commitment. Thank you so much for every single one of you, that contributed with PRs, discussions, questions (that led us to improve some docs or reconceptualize some API), monetary donations via our &lt;a href="https://www.patreon.com/bluefireoss"&gt;Patreon&lt;/a&gt;, or that used Flame, made something great, participated in any way, gave us a star on &lt;a href="https://github.com/flame-engine/flame"&gt;GitHub&lt;/a&gt;, or just for reading and sharing this article. Thank you, from the bottom of our hearts.&lt;/p&gt;

&lt;p&gt;And let me reiterate; we are still going to keep improving, updating, fixing, enhancing Flame. In fact, I hope version 1.0.0 lives very briefly on pub, to be replaced with 1.0.1, 1.1.0, whichever comes first, very soon. This just means we believe the current API is stable, and we won't be making big, breaking changes that often, or without warning. Expect more structured, stable updates, especially new features. It also means we can focus our attention now to improving our docs, bridge packages, tooling, examples and tutorials to make sure this awesome ecosystem that came about works seamlessly and frictionlessly, and that people can easily welcome people to join and learn. We are also happy to have established and to carry on this partnership with the Flutter team to make sure we all pave a future together for Flame and our beloved community.&lt;/p&gt;

&lt;p&gt;And on that note, we ask you to update your dependency, head over to &lt;a href="https://discord.gg/pxrBmy4"&gt;Discord&lt;/a&gt; to continue the discussion, and if you haven't, please check &lt;a href="https://medium.com/flutter/announcing-flutter-2-8-31d2cb7e19f5"&gt;Flutter's article&lt;/a&gt; about all the amazing things packed on Flutter 2.8, and let us know if you have any feedback! Thanks everyone again for everything, and have a great day!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Beginning Git and Github </title>
      <author>ADEOYE ADEFEMI OPEOLUWA</author>
      <pubDate>Wed, 08 Dec 2021 18:47:55 +0000</pubDate>
      <link>https://dev.to/opeolluwa/beginning-git-and-github-4l3k</link>
      <guid>https://dev.to/opeolluwa/beginning-git-and-github-4l3k</guid>
      <description>&lt;p&gt;So, we took a quick tour on the subject of git and GitHub. Herein we'll get to the real deal of installing git on our machine üíª. You might wanna power your computer it's show time üòâ.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-git-for-windows"&gt;
  &lt;/a&gt;
  Installing git for Windows
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Head over to &lt;a href="https://git-scm.com/downloads"&gt;https://git-scm.com/downloads&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the download link for Windows and allow the download to complete &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2IbVqwl6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i6w1nf18m3mrhnqspi8j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2IbVqwl6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i6w1nf18m3mrhnqspi8j.png" alt="download git" width="800" height="487"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Browse to the download location (or use the download shortcut in your browser). Double-click the file to extract and launch the installer&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VUIQo0Cs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bhvz2yw3fjhob4vujtsx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VUIQo0Cs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bhvz2yw3fjhob4vujtsx.png" alt="Image description" width="800" height="231"&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Proceed to install the downloaded package &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Qm93g1w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bsuqlsqth0zqcqgn9z2y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Qm93g1w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bsuqlsqth0zqcqgn9z2y.png" alt="Image description" width="800" height="396"&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Read and accept end user agreement. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zIaHFJUO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r0im44itreqgjeybxzc2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zIaHFJUO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r0im44itreqgjeybxzc2.png" alt="Image description" width="800" height="431"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After this the installer Will ask series of questions starting with, &lt;strong&gt;installation location.&lt;/strong&gt; Be sure to stick to the default (unless you're feeling adventurous), click next or press &lt;strong&gt;Enter&lt;/strong&gt; on your keyboard. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally you should have &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kg3fJ8zk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m3ylh0i2huyy5fmn7yzl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kg3fJ8zk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m3ylh0i2huyy5fmn7yzl.png" alt="Installing git on windows" width="800" height="435"&gt;&lt;/a&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If all go well, cheers to us! We have just installed git on your machine üçª&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-reading"&gt;
  &lt;/a&gt;
  Additional reading
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://phoenixnap.com/kb/how-to-install-git-windows"&gt;Installing git on windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/"&gt;Git official website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>git</category>
      <category>github</category>
      <category>productivity</category>
    </item>
    <item>
      <title>1 line of code: How to camelCase a string</title>
      <author>martin krause</author>
      <pubDate>Wed, 08 Dec 2021 18:41:30 +0000</pubDate>
      <link>https://dev.to/martinkr/1-line-of-code-how-to-camelcase-a-string-558g</link>
      <guid>https://dev.to/martinkr/1-line-of-code-how-to-camelcase-a-string-558g</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toCamelCase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[\.&lt;/span&gt;&lt;span class="sr"&gt;_-&lt;/span&gt;&lt;span class="se"&gt;\s]&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;.&lt;/span&gt;&lt;span class="se"&gt;)?&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Returns a new string in camel case. &lt;br&gt;
Uses &lt;code&gt;space&lt;/code&gt;, &lt;code&gt;dot&lt;/code&gt;, &lt;code&gt;underscore&lt;/code&gt; and &lt;code&gt;dash&lt;/code&gt; as delimiter.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-repository-amp-npm-package"&gt;
  &lt;/a&gt;
  The repository &amp;amp; npm package
&lt;/h2&gt;

&lt;p&gt;You can find the all the utility functions from this series at &lt;a href="https://github.com/martinkr/onelinecode"&gt;github.com/martinkr/onelinecode&lt;/a&gt;&lt;br&gt;
The library is also published to &lt;a href="https://www.npmjs.com/package/@onelinecode/onelinecode"&gt;npm as @onelinecode&lt;/a&gt; for your convenience.&lt;/p&gt;

&lt;p&gt;The code and the npm package will be updated every time I publish a new article.&lt;/p&gt;




&lt;p&gt;Follow me on &lt;a href="http://twitter.com/_martinkr"&gt;Twitter: @martinkr&lt;/a&gt; and consider to &lt;a href="https://www.buymeacoffee.com/martinkr"&gt;buy me a coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@zoo_monkey"&gt;zoo_monkey&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/fuji"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://modernfrontend.dev/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cH97ToOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://modernfrontend.dev/banner/banner_583-111.png" alt="Subscribe to the weekly modern frontend development newsletter" width="583" height="111"&gt;&lt;/a&gt;&lt;/p&gt;




</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>codequality</category>
    </item>
    <item>
      <title>How to Profile Python Code</title>
      <author>Ryan Perry</author>
      <pubDate>Wed, 08 Dec 2021 18:13:31 +0000</pubDate>
      <link>https://dev.to/ryan_perry_aa806d7a49198e/how-to-profile-python-code-4f2a</link>
      <guid>https://dev.to/ryan_perry_aa806d7a49198e/how-to-profile-python-code-4f2a</guid>
      <description>&lt;h3&gt;
  &lt;a href="#pyroscope-rideshare-example"&gt;
  &lt;/a&gt;
  Pyroscope Rideshare Example
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cGkIzR-r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/23323466/135728737-0c5e54ca-1e78-4c6d-933c-145f441c96a9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cGkIzR-r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/23323466/135728737-0c5e54ca-1e78-4c6d-933c-145f441c96a9.gif" alt="python_example_architecture_05_00" width="880" height="579"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: For documentation on the Pyroscope pip package visit &lt;a href="https://pyroscope.io/docs/python/"&gt;our website&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;In this example we show a simplified, basic use case of Pyroscope. We simulate a "ride share" company which has three endpoints found in &lt;code&gt;server.py&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;/bike&lt;/code&gt;    : calls the &lt;code&gt;order_bike(search_radius)&lt;/code&gt; function to order a bike&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/car&lt;/code&gt;     : calls the &lt;code&gt;order_car(search_radius)&lt;/code&gt; function to order a car&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/scooter&lt;/code&gt; : calls the &lt;code&gt;order_scooter(search_radius)&lt;/code&gt; function to order a scooter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also simulate running 3 distinct servers in 3 different regions (via &lt;a href="https://github.com/pyroscope-io/pyroscope/blob/main/examples/python/docker-compose.yml"&gt;docker-compose.yml&lt;/a&gt;)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;us-east-1&lt;/li&gt;
&lt;li&gt;us-west-1&lt;/li&gt;
&lt;li&gt;eu-west-1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the most useful capabilities of Pyroscope is the ability to tag your data in a way that is meaningful to you. In this case, we have two natural divisions, and so we "tag" our data to represent those:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;region&lt;/code&gt;: statically tags the region of the server running the code&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;vehicle&lt;/code&gt;: dynamically tags the endpoint (similar to how one might tag a controller rails)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#tagging-static-region"&gt;
  &lt;/a&gt;
  Tagging static region
&lt;/h2&gt;

&lt;p&gt;Tagging something static, like the &lt;code&gt;region&lt;/code&gt;, can be done in the initialization code in the &lt;code&gt;config.tags&lt;/code&gt; variable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pyroscope.configure(
    app_name       = "ride-sharing-app",
    server_address = "http://pyroscope:4040",
    tags           = {
        "region":   f'{os.getenv("REGION")}', # Tags the region based off the environment variable
    }
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tagging-dynamically-within-functions"&gt;
  &lt;/a&gt;
  Tagging dynamically within functions
&lt;/h2&gt;

&lt;p&gt;Tagging something more dynamically, like we do for the &lt;code&gt;vehicle&lt;/code&gt; tag can be done inside our utility &lt;code&gt;find_nearest_vehicle()&lt;/code&gt; function using a &lt;code&gt;with pyroscope.tag_wrapper()&lt;/code&gt; block&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def find_nearest_vehicle(n, vehicle):
    with pyroscope.tag_wrapper({ "vehicle": vehicle}):
        i = 0
        start_time = time.time()
        while time.time() - start_time &amp;lt; n:
            i += 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What this block does, is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add the tag &lt;code&gt;{ "vehicle" =&amp;gt; "car" }&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;execute the &lt;code&gt;find_nearest_vehicle()&lt;/code&gt; function&lt;/li&gt;
&lt;li&gt;Before the block ends it will (behind the scenes) remove the &lt;code&gt;{ "vehicle" =&amp;gt; "car" }&lt;/code&gt; from the application since that block is complete&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#resulting-flamegraph-performance-results-from-the-example"&gt;
  &lt;/a&gt;
  Resulting flamegraph / performance results from the example
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#running-the-example"&gt;
  &lt;/a&gt;
  Running the example
&lt;/h3&gt;

&lt;p&gt;To run the example run the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Pull latest pyroscope image:
docker pull pyroscope/pyroscope:latest

# Run the example project:
docker-compose up --build

# Reset the database (if needed):
# docker-compose down
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What this example will do is run all the code mentioned above and also send some mock-load to the 3 servers as well as their respective 3 endpoints. If you select our application: &lt;code&gt;ride-sharing-app.cpu&lt;/code&gt; from the dropdown, you should see a flamegraph that looks like this (below). After we give 20-30 seconds for the flamegraph to update and then click the refresh button we see our 3 functions at the bottom of the flamegraph taking CPU resources &lt;em&gt;proportional to the size&lt;/em&gt; of their respective &lt;code&gt;search_radius&lt;/code&gt; parameters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wheres-the-performance-bottleneck"&gt;
  &lt;/a&gt;
  Where's the performance bottleneck?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L2cHuckb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23323466/135881284-c75a5b65-6151-44fb-a459-c1f9559cb51a.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L2cHuckb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23323466/135881284-c75a5b65-6151-44fb-a459-c1f9559cb51a.jpg" alt="python_first_slide_05" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first step when analyzing a profile outputted from your application, is to take note of the &lt;em&gt;largest node&lt;/em&gt; which is where your application is spending the most resources. In this case, it happens to be the &lt;code&gt;order_car&lt;/code&gt; function. &lt;/p&gt;

&lt;p&gt;The benefit of using the Pyroscope package, is that now that we can investigate further as to &lt;em&gt;why&lt;/em&gt; the &lt;code&gt;order_car()&lt;/code&gt; function is problematic. Tagging both &lt;code&gt;region&lt;/code&gt; and &lt;code&gt;vehicle&lt;/code&gt; allows us to test two good hypotheses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Something is wrong with the &lt;code&gt;/car&lt;/code&gt; endpoint code&lt;/li&gt;
&lt;li&gt;Something is wrong with one of our regions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To analyze this we can select one or more tags from the "Select Tag" dropdown:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ukKu_I8k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23323466/135525308-b81e87b0-6ffb-4ef0-a6bf-3338483d0fc4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ukKu_I8k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23323466/135525308-b81e87b0-6ffb-4ef0-a6bf-3338483d0fc4.png" alt="image" width="429" height="234"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#narrowing-in-on-the-issue-using-tags"&gt;
  &lt;/a&gt;
  Narrowing in on the Issue Using Tags
&lt;/h2&gt;

&lt;p&gt;Knowing there is an issue with the &lt;code&gt;order_car()&lt;/code&gt; function we automatically select that tag. Then, after inspecting multiple &lt;code&gt;region&lt;/code&gt; tags, it becomes clear by looking at the timeline that there is an issue with the &lt;code&gt;us-west-1&lt;/code&gt; region, where it alternates between high-cpu times and low-cpu times.&lt;/p&gt;

&lt;p&gt;We can also see that the &lt;code&gt;mutex_lock()&lt;/code&gt; function is consuming almost 70% of CPU resources during this time period. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KlF71V5O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23323466/135805908-ae9a1650-51fc-457a-8c47-0b56e8538b08.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KlF71V5O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23323466/135805908-ae9a1650-51fc-457a-8c47-0b56e8538b08.jpg" alt="python_second_slide_05" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comparing-two-time-periods"&gt;
  &lt;/a&gt;
  Comparing two time periods
&lt;/h2&gt;

&lt;p&gt;Using Pyroscope's "comparison view" we can actually select two different time ranges from the timeline to compare the resulting flamegraphs. The pink section on the left timeline results in the left flamegraph, and the blue section on the right represents the right flamegraph.&lt;/p&gt;

&lt;p&gt;When we select a period of low-cpu utilization and a period of high-cpu utilization we can see that there is clearly different behavior in the &lt;code&gt;mutex_lock()&lt;/code&gt; function where it takes &lt;strong&gt;51% of CPU&lt;/strong&gt; during low-cpu times and &lt;strong&gt;78% of CPU&lt;/strong&gt; during high-cpu times.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H77tw57C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23323466/135805969-55fdee40-fe0c-412d-9ec0-0bbc6a748ed4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H77tw57C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23323466/135805969-55fdee40-fe0c-412d-9ec0-0bbc6a748ed4.jpg" alt="python_third_slide_05" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#visualizing-diff-between-two-flamegraphs"&gt;
  &lt;/a&gt;
  Visualizing Diff Between Two Flamegraphs
&lt;/h2&gt;

&lt;p&gt;While the difference &lt;em&gt;in this case&lt;/em&gt; is stark enough to see in the comparison view, sometimes the diff between the two flamegraphs is better visualized with them overlayed over each other. Without changing any parameters, we can simply select the diff view tab and see the difference represented in a color-coded diff flamegraph.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2_mnFM0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23323466/135805986-594ffa3b-e735-4f91-875d-4f76fdff2b60.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2_mnFM0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23323466/135805986-594ffa3b-e735-4f91-875d-4f76fdff2b60.jpg" alt="python_fourth_slide_05" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#more-use-cases"&gt;
  &lt;/a&gt;
  More use cases
&lt;/h3&gt;

&lt;p&gt;We have been beta testing this feature with several different companies and some of the ways that we've seen companies tag their performance data:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tagging controllers&lt;/li&gt;
&lt;li&gt;Tagging regions&lt;/li&gt;
&lt;li&gt;Tagging jobs from a redis / sidekiq / rabbitmq queue&lt;/li&gt;
&lt;li&gt;Tagging commits&lt;/li&gt;
&lt;li&gt;Tagging staging / production environments&lt;/li&gt;
&lt;li&gt;Tagging different parts of their testing suites&lt;/li&gt;
&lt;li&gt;Etc...&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#future-roadmap"&gt;
  &lt;/a&gt;
  Future Roadmap
&lt;/h3&gt;

&lt;p&gt;We would love for you to try out this example and see what ways you can adapt this to your python application. Continuous profiling has become an increasingly popular tool for the monitoring and debugging of performance issues (arguably the fourth pillar of observability). &lt;/p&gt;

&lt;p&gt;We'd love to continue to improve this pip package by adding things like integrations with popular tools, memory profiling, etc. and we would love to hear what features &lt;em&gt;you would like to see&lt;/em&gt;. &lt;/p&gt;

</description>
      <category>python</category>
      <category>performance</category>
      <category>devops</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
