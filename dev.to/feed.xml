<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Useful resource for generating SVG images</title>
      <author>ManuTheCoder</author>
      <pubDate>Thu, 08 Apr 2021 14:15:02 +0000</pubDate>
      <link>https://dev.to/manuthecoder/useful-resource-for-generating-svg-images-9gj</link>
      <guid>https://dev.to/manuthecoder/useful-resource-for-generating-svg-images-9gj</guid>
      <description>&lt;p&gt;Want to generate layered waves, waves, blobs, blob scenes, and more?&lt;/p&gt;

&lt;p&gt;Check this out:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.haikei.app"&gt;https://app.haikei.app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Recommended thing once you download a generated SVG:&lt;/p&gt;

&lt;p&gt;URL encode it for CSS: &lt;a href="https://yoksel.github.io/url-encoder"&gt;https://yoksel.github.io/url-encoder&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Next.js: Multilanguage support with internationalized routing</title>
      <author>velan</author>
      <pubDate>Thu, 08 Apr 2021 13:57:03 +0000</pubDate>
      <link>https://dev.to/singaravelan/next-js-multilanguage-support-with-internationalized-routing-486e</link>
      <guid>https://dev.to/singaravelan/next-js-multilanguage-support-with-internationalized-routing-486e</guid>
      <description>&lt;p&gt;Let's create a simple Next.js starter project with multiple languages - English &lt;em&gt;(en-US)&lt;/em&gt;, Tamil &lt;em&gt;(ta-IN)&lt;/em&gt;, Hindi &lt;em&gt;(hi-IN)&lt;/em&gt;, Kannada &lt;em&gt;(kn-IN)&lt;/em&gt; support using Next.js native &lt;a href="https://nextjs.org/docs/advanced-features/i18n-routing"&gt;i18n&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üëâ Source code of this article available at &lt;a href="https://github.com/singara-velan/Nextjs-Multilanguage"&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#what-are-we-going-to-do"&gt;
  &lt;/a&gt;
  What are we going to do
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Creating a Next js app (v10.x.x) with boostrap.css&lt;/li&gt;
&lt;li&gt;Configuring i18n in next.config.js&lt;/li&gt;
&lt;li&gt;Create locale JSON&lt;/li&gt;
&lt;li&gt;Read locale from the route and display in the HTML&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#set-up"&gt;
  &lt;/a&gt;
  Set up
&lt;/h3&gt;

&lt;p&gt;Create a Next js app and add bootstrap, swr as dependency&lt;br&gt;
&lt;code&gt;npx create-next-app&lt;/code&gt;&lt;br&gt;
&lt;code&gt;npm i -s bootstrap&lt;/code&gt;&lt;br&gt;
&lt;code&gt;npm i -s swr&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Run the app&lt;br&gt;
&lt;code&gt;npm run dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Create a new page called home under pages&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Home = () =&amp;gt; {
    return (
        &amp;lt;h1&amp;gt;Hey! I am home - English&amp;lt;/h1&amp;gt;
    )
}

export default Home;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Navigate to &lt;code&gt;http://localhost:3000/home&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q2CZk9JA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/342pb2yn0i9yk0tbepbw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q2CZk9JA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/342pb2yn0i9yk0tbepbw.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#configuring-i18n-route"&gt;
  &lt;/a&gt;
  Configuring i18n route
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;There are two ways to handle locale: Sub-path and domain routing. Here we explore Sub-path routing&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sub-path routing is basically prefixing locale code in front of existing routes without any impact on actual routing. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;eg: /home,&lt;br&gt;
     /en-US/home,&lt;br&gt;
     /ta-IN/home,&lt;br&gt;
     /hi-IN/home&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now if you try to access one of the routes eg: &lt;code&gt;/en-us/home&lt;/code&gt;, you will see 404 message. Because locale-based routing not enabled yet.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oy4SNYyn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqhzgvgeabm74twl4xdj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oy4SNYyn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqhzgvgeabm74twl4xdj.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p923Cahe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7bc1465poepp1jllqdjv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p923Cahe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7bc1465poepp1jllqdjv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To enable locale-based routing, Create a next.config.js file in the project root as below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = {
    i18n: {
        locales: ['en-us', 'ta-in', 'hi-in', 'kn-in'],
        defaultLocale: 'en-us'
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;üí° checkout i18n locale code reference for different languages &lt;a href="https://gist.github.com/singara-velan/aedb97495f4e430fc34e88daef6716e5"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üí° Do remember to stop and start the app, whenever modifying next.config.js&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now try again to access locale-based route &lt;code&gt;/en-us/home&lt;/code&gt;&lt;br&gt;
Boom, it works!! üòç&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--55ZvdvR1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fov47yv1scapniddnuwe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--55ZvdvR1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fov47yv1scapniddnuwe.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's try with another locale code &lt;code&gt;/ta-in/home&lt;/code&gt;. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R4gDBoAB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ld7q4g2jf5o6vaykvk58.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R4gDBoAB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ld7q4g2jf5o6vaykvk58.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
The page didn't break, but the language doesn't change üò¶ Because we didn't create any language-specific content. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#create-languagespecific-files"&gt;
  &lt;/a&gt;
  Create language-specific files
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Create a new folder called &lt;code&gt;locales&lt;/code&gt; under the public folder and create JSON files with exact names as locale codes&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c2bO-a5z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y6nq8m9s08xy5zl82l5h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c2bO-a5z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y6nq8m9s08xy5zl82l5h.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Inside of each JSON create one key-value language as a data property&lt;/p&gt;

&lt;p&gt;eg: &lt;a href="https://raw.githubusercontent.com/singara-velan/Nextjs-Multilanguage/main/public/locales/en-US.json"&gt;en-US&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "language": "English"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/singara-velan/Nextjs-Multilanguage/main/public/locales/ta-IN.json"&gt;ta-IN&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "language": "‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/singara-velan/Nextjs-Multilanguage/main/public/locales/hi-IN.json"&gt;hi-IN&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "language": "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#loading-the-language-file-based-on-route-locale-code"&gt;
  &lt;/a&gt;
  Loading the language file based on route locale code
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;When navigating to a specific locale route, the page should show content from the respective locale JSON file.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We will be achieving that by&lt;br&gt;
1 Get the locale code from the route&lt;br&gt;
2 Fetch the locale JSON&lt;br&gt;
3 Bind in HTML&lt;/p&gt;

&lt;p&gt;1: Get the locale code from the route&lt;br&gt;
&lt;code&gt;next/router&lt;/code&gt; will provide us the locale code. Update the home.js file with &lt;code&gt;useRouter&lt;/code&gt; hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const router = useRouter();
const locale = router.locale;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2: Fetch locale JSON file&lt;br&gt;
Make Rest call using &lt;a href="https://swr.vercel.app/"&gt;useSWR&lt;/a&gt; hook with the locale code from the previous step.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { data, error } = useSWR(`/locales/${locale}.json`, fetcher)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3: Bind in HTML&lt;br&gt;
Replace the &lt;code&gt;English&lt;/code&gt; with the data fetched from the previous step. Final home.js will looks as below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useRouter } from 'next/router'
import useSWR from 'swr'

const Home = () =&amp;gt; {
    const router = useRouter();
    const locale = router.locale;

    const { data, error } = useSWR(`/locales/${locale}.json`, fetcher)

    return (
        &amp;lt;h1&amp;gt;Hey! I am home - {data?.language}&amp;lt;/h1&amp;gt;
    )
}

const fetcher = (...args) =&amp;gt; fetch(...args).then(res =&amp;gt; res.json());

export default Home;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#time-for-testing-smiley-smiley"&gt;
  &lt;/a&gt;
  Time for Testing! üòÉ üòÉ
&lt;/h3&gt;

&lt;p&gt;Try access different route based on route code&lt;br&gt;
&lt;code&gt;http://localhost:3000/ta-IN/home&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OsLsxv0c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vdkfumx0hothga3lexp5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OsLsxv0c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vdkfumx0hothga3lexp5.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;code&gt;http://localhost:3000/hi-IN/home&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jiMo4jUC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/495mynxb6dll3dr7quyg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jiMo4jUC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/495mynxb6dll3dr7quyg.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Its working !! Have a great day üòä üòá&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>i18n</category>
      <category>indianlanguages</category>
      <category>multilingual</category>
    </item>
    <item>
      <title>Build a Netflix Landing Page Clone with HTML, CSS &amp; JS</title>
      <author>ali-dev-hash</author>
      <pubDate>Thu, 08 Apr 2021 13:48:30 +0000</pubDate>
      <link>https://dev.to/alidevhash/build-a-netflix-landing-page-clone-with-html-css-js-4c67</link>
      <guid>https://dev.to/alidevhash/build-a-netflix-landing-page-clone-with-html-css-js-4c67</guid>
      <description>&lt;p&gt;Build a Netflix Landing Page Clone with HTML, CSS &amp;amp; JS.&lt;/p&gt;

&lt;p&gt;This will sharpen your HTML , CSS Grids, and JavaScript skills.&lt;/p&gt;

&lt;p&gt;All the images files are taken from real netflix website.&lt;/p&gt;


&lt;p&gt;Source Code  &lt;/p&gt;
&lt;h2&gt;
&lt;a href="https://codepen.io/Bilal1909/pen/zYNBWoa"&gt;&lt;/a&gt;&lt;a href="https://codepen.io/Bilal1909/pen/zYNBWoa"&gt;https://codepen.io/Bilal1909/pen/zYNBWoa&lt;/a&gt;
&lt;/h2&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What no one told you about CSS Variables</title>
      <author>Temani Afif</author>
      <pubDate>Thu, 08 Apr 2021 13:33:09 +0000</pubDate>
      <link>https://dev.to/afif/what-no-one-told-you-about-css-variables-553o</link>
      <guid>https://dev.to/afif/what-no-one-told-you-about-css-variables-553o</guid>
      <description>&lt;p&gt;CSS Variables are great but do you know everything about them? &lt;/p&gt;

&lt;p&gt;In this post, I will highlight few quirks around CSS variables that no one talk about. After that, you won't look at them the same way anymore.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of content
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#1-be-careful-with-raw-important-endraw-"&gt;Be careful with &lt;code&gt;!important&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-they-cannot-store-urls"&gt;They cannot store urls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-they-can-make-an-invalid-value-valid"&gt;They can make an invalid value valid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4-they-can-be-used-uniteless"&gt;They can be used uniteless&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5-they-can-be-animated"&gt;They can be animated&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#6-they-cannot-store-the-raw-inherit-endraw-value"&gt;They cannot store the &lt;code&gt;inherit&lt;/code&gt; value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#7-they-can-be-empty"&gt;They can be empty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#8-css-variables-are-not-c-variables"&gt;CSS variables are not C++ variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#9-they-only-work-from-parent-to-child"&gt;They only work from parent to child&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#10-they-can-have-strange-syntaxes"&gt;They can have strange syntaxes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#1-be-careful-with-raw-important-endraw-"&gt;
  &lt;/a&gt;
  1) Be careful with &lt;code&gt;!important&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Using &lt;code&gt;!important&lt;/code&gt; with CSS variables is a bit tricky so let's start with a basic example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;What will be the color of &lt;code&gt;p&lt;/code&gt;? you think it's &lt;code&gt;red&lt;/code&gt; because we will have the following:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;But it's not! the color of &lt;code&gt;p&lt;/code&gt; will be blue because we will have the following:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;code&gt;!important&lt;/code&gt; in this case isn't part of the value of color but is used to increase the specificity of &lt;code&gt;--color&lt;/code&gt;. From &lt;a href="https://www.w3.org/TR/css-variables-1/#syntax"&gt;the specification&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Custom properties can contain a trailing !important, but this is automatically removed from the property‚Äôs value by the CSS parser, &lt;strong&gt;and makes the custom property "important" in the CSS cascade&lt;/strong&gt;. In other words, the prohibition on top-level "!" characters does not prevent !important from being used, as the !important is removed before syntax checking happens.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is another example to better understand:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The above will give us a &lt;code&gt;red&lt;/code&gt; color:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We have two declarations of the same property called &lt;code&gt;--color&lt;/code&gt; so we need to resolve the cascade. The first one is having &lt;code&gt;!important&lt;/code&gt; so it wins&lt;/li&gt;
&lt;li&gt;We have our winner (&lt;code&gt;--color:red!important&lt;/code&gt;) so &lt;code&gt;!important&lt;/code&gt; is removed then the value is applied to &lt;code&gt;color&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;We have &lt;code&gt;color:red&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's make our code:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Following the same logic, we resolve the cascade for &lt;code&gt;--color&lt;/code&gt; and for &lt;code&gt;color&lt;/code&gt;. &lt;code&gt;--color:red!important&lt;/code&gt; is the winner and the same for &lt;code&gt;color:blue&lt;/code&gt; so at the end we have &lt;code&gt;blue&lt;/code&gt; because we no more care about &lt;code&gt;color:var(--color)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;An &lt;em&gt;important&lt;/em&gt; rule is to always consider CSS variables (custom properties) as ordinary properties and not only variables that store values.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Custom properties are &lt;strong&gt;ordinary properties&lt;/strong&gt;, so they can be declared on any element, are resolved with the normal inheritance and &lt;strong&gt;cascade rules&lt;/strong&gt;, can be made conditional with @media and other conditional rules, can be used in HTML‚Äôs style attribute, can be read or set using the CSSOM, etc. &lt;sup&gt;&lt;a href="https://www.w3.org/TR/css-variables-1/#syntax"&gt;ref&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h3&gt;
  &lt;a href="#2-they-cannot-store-urls"&gt;
  &lt;/a&gt;
  2) They cannot store urls
&lt;/h3&gt;

&lt;p&gt;This is a common limitation you will stumble upon one day.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-you-cannot-do"&gt;
  &lt;/a&gt;
  What you cannot do ‚ùå
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;"https://picsum.photos/id/1/200/300"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="sx"&gt;url(var(--url)&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#what-you-should-do"&gt;
  &lt;/a&gt;
  What you should do ‚úîÔ∏è
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="sx"&gt;url("https://picsum.photos/id/1/200/300")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This limitation is related to how &lt;code&gt;url()&lt;/code&gt; is parsed. A bit tricky to explain but as we can see the fix is pretty easy. Always add the &lt;code&gt;url()&lt;/code&gt; part within the CSS variable.&lt;/p&gt;

&lt;p&gt;If you want more accurate detail, I advise reading this &lt;a href="https://stackoverflow.com/a/42331003/8620333"&gt;Stack Overflow answer&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#3-they-can-make-an-invalid-value-valid"&gt;
  &lt;/a&gt;
  3) They can make an invalid value valid!
&lt;/h3&gt;

&lt;p&gt;This one is my favorite quirk and it's the one that will give you a lot of headaches.&lt;/p&gt;

&lt;p&gt;Let's start with a basic example:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linaer-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Our &lt;code&gt;.box&lt;/code&gt; will have a gradient coloration ... wait, no it has a &lt;code&gt;red&lt;/code&gt; background. Ah! I made a typo in &lt;code&gt;linear-*&lt;/code&gt;. I can easily notice my mistake because the browser crossed the declaration and used the previous one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t0OkbXhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eldcxl1boyhs2343058s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t0OkbXhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eldcxl1boyhs2343058s.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's introduce a variable:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linaer-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Test the code and you will see that the background is now transparent and our second declaration is no more crossed because it's now a valid one. You will even notice that the first declaration is the one crossed because the second one override it.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-the-hell-is-happening-here-"&gt;
  &lt;/a&gt;
  What the hell is happening here ??!!
&lt;/h4&gt;

&lt;p&gt;When using a variable within a property the browser will only evaluate the value of such property at "computed-value time" because we need to first know the content of the variable. In such case, the browser will consider the value as &lt;em&gt;valid&lt;/em&gt; when doing the cascade and only later it will become &lt;em&gt;invalid&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In our case, the browser is considering the last declaration after resolving the cascade. Then when doing the evaluation, it seems to be invalid so it will be ignored. We won't get back to the previous declaration since we already resolved the cascade and we end with no background so a transparent one.&lt;/p&gt;

&lt;p&gt;You may think such behavior is illogical but it's indeed logical because a value can be &lt;em&gt;valid&lt;/em&gt; or &lt;em&gt;invalid&lt;/em&gt; based on the CSS variable so the browser cannot really know from the beginning.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* a "valid" variable */&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* a "valid" declaration */&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* a "valid" declaration that will override the first one  */&lt;/span&gt;
  &lt;span class="c"&gt;/* The result is an "invalid" value ... */&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;A declaration can be invalid at computed-value time if it contains a var() that references a custom property with its initial value, as explained above, or if it uses a valid custom property, but the property value, after substituting its var() functions, is invalid. &lt;strong&gt;When this happens, the computed value of the property is either the property‚Äôs inherited value or its initial value&lt;/strong&gt; depending on whether the property is inherited or not, respectively, as if the property‚Äôs value had been specified as the unset keyword. &lt;sup&gt;&lt;a href="https://www.w3.org/TR/css-variables-1/#invalid-variables"&gt;ref&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To use easy words: a CSS variable will make the status of a propery in a standby mode until we do the evaluation. Only after the evaluation we can say if it's valid or invalid. If it's invalid then it's too late, we cannot get back to use another one.&lt;/p&gt;

&lt;p&gt;A related &lt;a href="https://stackoverflow.com/q/66127664/8620333"&gt;Stack Overflow question&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#4-they-can-be-used-uniteless"&gt;
  &lt;/a&gt;
  4) They can be used uniteless
&lt;/h3&gt;

&lt;p&gt;Almost all the tutorials/courses will show you such example:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="py"&gt;--p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--p&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;But you can also do the following:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="py"&gt;--p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Having the unit in the variable isn't mandatory and in some case it's even better to use a uniteless value because adding a unit is fairly easy and we may need to use the same value with different unit.&lt;/p&gt;

&lt;p&gt;Here is one example among many (taken from &lt;a href="https://stackoverflow.com/a/60243510/8620333"&gt;this answer&lt;/a&gt; )&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/abpyrmq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Never forget this important feature. It will save you one day.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#5-they-can-be-animated"&gt;
  &lt;/a&gt;
  5) They can be animated
&lt;/h3&gt;

&lt;p&gt;Initially, CSS variables are defined to be non-animatable properties as per &lt;a href="https://www.w3.org/TR/css-variables-1/#defining-variables"&gt;the specification&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Animatable:    no&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But things have changed and thanks to the new &lt;a href="https://drafts.css-houdini.org/css-properties-values-api-1/#at-property-rule"&gt;&lt;code&gt;@property&lt;/code&gt;&lt;/a&gt; we can do animation/transition with CSS variables.&lt;/p&gt;

&lt;p&gt;The support is still low (especially on Firefox) but it's time to get to know this.&lt;/p&gt;

&lt;p&gt;Find below some use cases where I am relying on such feature:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/afif" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jSZolrIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5k2bquNj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/577896/343fde9f-609b-419b-95d1-07d16b320a37.png" alt="afif image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/afif/we-can-finally-animate-css-gradient-kdk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;We can finally animate CSS gradient&lt;/h2&gt;
      &lt;h3&gt;Temani Afif „Éª Feb 26 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;




&lt;div class="ltag__link"&gt;
  &lt;a href="/afif" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jSZolrIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5k2bquNj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/577896/343fde9f-609b-419b-95d1-07d16b320a37.png" alt="afif image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/afif/css-only-fragmentation-effect-using-one-element-18kg" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;CSS only fragmentation effect using one element&lt;/h2&gt;
      &lt;h3&gt;Temani Afif „Éª Mar 23 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;I will be writing more articles to show the magic we can do with this. Stay tuned!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#6-they-cannot-store-the-raw-inherit-endraw-value"&gt;
  &lt;/a&gt;
  6) They cannot store the &lt;code&gt;inherit&lt;/code&gt; value
&lt;/h3&gt;

&lt;p&gt;Let's consider the following example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Intuitively, we may think that &lt;code&gt;.item&lt;/code&gt; will inherit the same border of its parent element because &lt;code&gt;--b&lt;/code&gt; contain &lt;code&gt;inherit&lt;/code&gt; but it won't (you can try and see).&lt;/p&gt;

&lt;p&gt;As I explained in the (1), the common mistake is to think that CSS variables will simply store value that we can use later but no. CSS variables (custom properties) are &lt;strong&gt;ordinary properties&lt;/strong&gt; so &lt;code&gt;inherit&lt;/code&gt; &lt;em&gt;apply&lt;/em&gt; to them and is not store inside them.&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* we define the variable on the parent */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* the child will inherit the same value so "5px solid blue"*/&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* we will have "5px solid blue" */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;As you can see, the logic of inheritance apply to them the same way as with common properties.&lt;/p&gt;

&lt;p&gt;Worth to note that doing the above is useless because CSS variables are by default inherited. It's like setting &lt;code&gt;inherit&lt;/code&gt; to a property that is by default inherited (&lt;code&gt;color&lt;/code&gt; for example).&lt;/p&gt;

&lt;p&gt;This said, I have elaborated a technique to be able to use CSS variables with &lt;code&gt;inherit&lt;/code&gt;&lt;/p&gt;


&lt;div class="ltag__stackexchange--container"&gt;
  &lt;div class="ltag__stackexchange--title-container"&gt;
    
      &lt;div class="ltag__stackexchange--title"&gt;
        &lt;h1&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Gn-iPj_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackoverflow-logo-b42691ae545e4810b105ee957979a853a696085e67e43ee14c5699cf3e890fb4.svg" alt=""&gt;
            &lt;a href="https://stackoverflow.com/questions/53239880/how-to-store-inherit-value-inside-a-css-variable-aka-custom-property" rel="noopener noreferrer"&gt;
               How to store inherit value inside a CSS variable (aka custom property)?
            &lt;/a&gt;
        &lt;/h1&gt;
        &lt;div class="ltag__stackexchange--post-metadata"&gt;
          &lt;span&gt;Nov 10 '18&lt;/span&gt;
            &lt;span&gt;Comments: &lt;/span&gt;
            &lt;span&gt;Answers: 1&lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;a class="ltag__stackexchange--score-container" href="https://stackoverflow.com/questions/53239880/how-to-store-inherit-value-inside-a-css-variable-aka-custom-property" rel="noopener noreferrer"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y9mJpuJP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackexchange-arrow-up-eff2e2849e67d156181d258e38802c0b57fa011f74164a7f97675ca3b6ab756b.svg" alt=""&gt;
        &lt;div class="ltag__stackexchange--score-number"&gt;
          2
        &lt;/div&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wif5Zq3z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackexchange-arrow-down-4349fac0dd932d284fab7e4dd9846f19a3710558efde0d2dfd05897f3eeb9aba.svg" alt=""&gt;
      &lt;/a&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__stackexchange--body"&gt;
    
&lt;p&gt;Let's consider this simplified example in order to illustrate the issue:&lt;/p&gt;
&lt;div class="snippet" data-lang="js"&gt;
&lt;div class="snippet-code snippet-currently-hidden"&gt;
&lt;pre class="snippet-code-css lang-css prettyprint-override"&gt;&lt;code&gt;:root {
  --color:rgba(20,20,20,0.5); /*defined as the default value*/
}

.box {
  width:50px;
  height:50px;
  display:inline-block;
  margin-right:30px;
  border-radius:50%;
  position:relative;
}
.red {background:rgba(255,0,0,0.5);}
.blue {background:rgba(0,255,0,0.5);}

.box:before{
  content:"";
  position:absolute;
  top:0;left:0;right:0;bottom:0;
  border-radius:50%;
  transform:translateX(30px);
  background:var(--color);
  filter:invert(1);
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="snippet-code-html lang-html prettyprint-override"&gt;&lt;code&gt;&amp;lt;!-- we can&lt;/code&gt;&lt;/pre&gt;‚Ä¶&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;br&gt;
  &lt;div class="ltag__stackexchange--btn--container"&gt;
&lt;br&gt;
    &lt;br&gt;
      &lt;a href="https://stackoverflow.com/questions/53239880/how-to-store-inherit-value-inside-a-css-variable-aka-custom-property" rel="noopener noreferrer"&gt;Open Full Question&lt;/a&gt;&lt;br&gt;
    &lt;br&gt;
  &lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;p&gt;The same logic apply to other keywords like &lt;code&gt;unset&lt;/code&gt; and &lt;code&gt;revert&lt;/code&gt;: &lt;a href="https://stackoverflow.com/q/61797468/8620333"&gt;How to set CSS variable to the value unset, ‚Äú--unset-it: unset‚Äù?&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#7-they-can-be-empty"&gt;
  &lt;/a&gt;
  7) They can be empty
&lt;/h3&gt;

&lt;p&gt;Yes you can do the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The above is valid as per &lt;a href="https://www.w3.org/TR/css-variables-1/#syntax"&gt;the specification&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: While &lt;code&gt;&amp;lt;declaration-value&amp;gt;&lt;/code&gt; must represent at least one token, that one token may be &lt;strong&gt;whitespace&lt;/strong&gt;. This implies that &lt;code&gt;--foo: ;&lt;/code&gt; is valid, and the corresponding &lt;code&gt;var(--foo)&lt;/code&gt; call would have a single space as its substitution value, but &lt;code&gt;--foo:;&lt;/code&gt; is invalid.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pay attention to the last sentence because we need to have at least one space. The below is invalid:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;:;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TBR3POxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/botya61f4c5j6dwrjxd8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TBR3POxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/botya61f4c5j6dwrjxd8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This quirk is mainly used with the fallback feature to do some magic.&lt;/p&gt;

&lt;p&gt;A basic example to understand the trick:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  I will have `background:linear-gradient(blue,transparent) red;`
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"--color:green"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  I will have `background:linear-gradient(blue,transparent) green;`
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"--color: ;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  I will have `background:linear-gradient(blue,transparent)  ;`
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;The first box has no variable defined so the fallback will get used.&lt;/li&gt;
&lt;li&gt;The second one has a variable defined so it will get used&lt;/li&gt;
&lt;li&gt;The last one defined an empty variable so that &lt;em&gt;emptyness&lt;/em&gt; will be used. It's like we no more have the &lt;code&gt;var(--color,red)&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The empty value allow us to &lt;em&gt;remove&lt;/em&gt; the &lt;code&gt;var()&lt;/code&gt; declaration from a property! This can be useful when using &lt;code&gt;var()&lt;/code&gt; within a complex value.&lt;/p&gt;

&lt;p&gt;In case &lt;code&gt;var()&lt;/code&gt; is used alone, the same logic apply but we will end having an empty value which is invalid for most of the properties.&lt;/p&gt;

&lt;p&gt;If we took our first example we will have &lt;code&gt;background: ;&lt;/code&gt; which will lead to an invalid value at "computed-value time" (remember the (3)) so a transparent background.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#8-css-variables-are-not-c-variables"&gt;
  &lt;/a&gt;
  8) CSS variables are not C++ variables
&lt;/h3&gt;

&lt;p&gt;Unfortunately, many developers tend to compare CSS variables to variables of other languages and end having a lot of issues in their logic. For this specific reason, I don't want to call them variables but Custom properties because they are &lt;em&gt;properties&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;What everyone want to do&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* let's increment by 1px */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/* let's do a variable switch */&lt;/span&gt;
  &lt;span class="py"&gt;--c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;--y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;--x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* I want 10px of margin */&lt;/span&gt;
  &lt;span class="py"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c"&gt;/* then 20px of padding */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;All the above will never work. The first two are simply invalid because we have a &lt;a href="https://www.w3.org/TR/css-variables-1/#cycles"&gt;&lt;em&gt;cyclic dependencies&lt;/em&gt;&lt;/a&gt; since a variable is refering to itself (first example) or a group of variables are creating a cycle (the second example). &lt;/p&gt;

&lt;p&gt;In The last example, both &lt;code&gt;padding&lt;/code&gt; and &lt;code&gt;margin&lt;/code&gt; will have &lt;code&gt;20px&lt;/code&gt; because the cascade will give priority to the last declaration &lt;code&gt;--s: 20px&lt;/code&gt; that will get applied to both &lt;code&gt;margin&lt;/code&gt; and &lt;code&gt;padding&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This said, you should stop thinking C++, Javascript, Java, etc when working with CSS variables because they are &lt;em&gt;custom properties&lt;/em&gt; having their own logic.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#9-they-only-work-from-parent-to-child"&gt;
  &lt;/a&gt;
  9) They only work from parent to child.
&lt;/h3&gt;

&lt;p&gt;Remember this gold rule: CSS variables always &lt;em&gt;travel&lt;/em&gt; from a parent element (or an ancestor) to child elements. They never &lt;em&gt;travel&lt;/em&gt; from child to parent or between sibling elements.&lt;/p&gt;

&lt;p&gt;This will lead us to the following mistake:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--c1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--c2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--grad&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--c1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--c2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--c1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--grad&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You think the background of &lt;code&gt;.box&lt;/code&gt; will be &lt;code&gt;linear-gradient(green, blue)&lt;/code&gt;? No, it will be &lt;code&gt;linear-gradient(red, blue)&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The root element is the uppermost element in the DOM so its an ancestor of our &lt;code&gt;box&lt;/code&gt; element and our gold rule says that we can only do &lt;em&gt;parent --&amp;gt; child&lt;/em&gt; so &lt;code&gt;--c1&lt;/code&gt; cannot go in the opposite direction to reach the root element, change &lt;code&gt;--grad&lt;/code&gt; and then we get back in the other direction to re-send the changed value of &lt;code&gt;--grad&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In such example, the &lt;code&gt;.box&lt;/code&gt; will inherit the value of &lt;code&gt;--grad&lt;/code&gt;  defined with the values of &lt;code&gt;--c1&lt;/code&gt; and &lt;code&gt;--c2&lt;/code&gt; inside root. Changing &lt;code&gt;--c1&lt;/code&gt; will simply change the value of &lt;code&gt;--c1&lt;/code&gt; inside &lt;code&gt;.box&lt;/code&gt;, nothing more.&lt;/p&gt;

&lt;p&gt;Find below a more detailed answer I wrote around this subject:&lt;/p&gt;


&lt;div class="ltag__stackexchange--container"&gt;
  &lt;div class="ltag__stackexchange--title-container"&gt;
    
      &lt;div class="ltag__stackexchange--title"&gt;
        &lt;h1&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Gn-iPj_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackoverflow-logo-b42691ae545e4810b105ee957979a853a696085e67e43ee14c5699cf3e890fb4.svg" alt=""&gt;
            &lt;a href="https://stackoverflow.com/questions/52015737/css-scoped-custom-property-ignored-when-used-to-calculate-variable-in-outer-scop" rel="noopener noreferrer"&gt;
               CSS scoped custom property ignored when used to calculate variable in outer scope
            &lt;/a&gt;
        &lt;/h1&gt;
        &lt;div class="ltag__stackexchange--post-metadata"&gt;
          &lt;span&gt;Aug 25 '18&lt;/span&gt;
            &lt;span&gt;Comments: 2&lt;/span&gt;
            &lt;span&gt;Answers: 1&lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;a class="ltag__stackexchange--score-container" href="https://stackoverflow.com/questions/52015737/css-scoped-custom-property-ignored-when-used-to-calculate-variable-in-outer-scop" rel="noopener noreferrer"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y9mJpuJP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackexchange-arrow-up-eff2e2849e67d156181d258e38802c0b57fa011f74164a7f97675ca3b6ab756b.svg" alt=""&gt;
        &lt;div class="ltag__stackexchange--score-number"&gt;
          15
        &lt;/div&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wif5Zq3z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackexchange-arrow-down-4349fac0dd932d284fab7e4dd9846f19a3710558efde0d2dfd05897f3eeb9aba.svg" alt=""&gt;
      &lt;/a&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__stackexchange--body"&gt;
    
&lt;p&gt;I'm attempting to scale size via a &lt;code&gt;var&lt;/code&gt; custom property in a way that the classes would compose without being coupled. The desired effect is that the 3 lists would be at 3 different scales but as &lt;a href="https://codepen.io/ryanve/pen/WgrjxL" rel="noreferrer"&gt;demonstrated on CodePen&lt;/a&gt; all 3 lists are the same scale. I'm looking for‚Ä¶&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__stackexchange--btn--container"&gt;
    
      &lt;a href="https://stackoverflow.com/questions/52015737/css-scoped-custom-property-ignored-when-used-to-calculate-variable-in-outer-scop" rel="noopener noreferrer"&gt;Open Full Question&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Even the &lt;a href="https://stackoverflow.com/q/58206867/8620333"&gt;Stack Overflow team&lt;/a&gt; stumbled upon this quirk!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#10-they-can-have-strange-syntaxes"&gt;
  &lt;/a&gt;
  10) They can have strange syntaxes
&lt;/h3&gt;

&lt;p&gt;A last and funny quirk. &lt;/p&gt;

&lt;p&gt;Did you know that you can do the following?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Amazing, right? Yes, a CSS variable can be defined using only the two dashes. &lt;/p&gt;

&lt;p&gt;You think the above is crazy, take a look at the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="err"&gt;--üìï:red;&lt;/span&gt;
 &lt;span class="err"&gt;--üìó:green;&lt;/span&gt; 
 &lt;span class="err"&gt;--üìò:blue;&lt;/span&gt;
 &lt;span class="err"&gt;--üìô:orange;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes, emojis! you can define your variables using emojis and it works.&lt;/p&gt;

&lt;p&gt;The syntax of CSS variables allow almost everything the only requirement is to start with &lt;code&gt;--&lt;/code&gt;. You can also start with a number (ex: &lt;code&gt;--1:&lt;/code&gt;). Related: &lt;a href="https://stackoverflow.com/q/66941906/8620333"&gt;Can a css variable name start with a number?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Why not only dashes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;---------&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;---------&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or the same variable storing two different values&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--‚Äé‚Äã&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--‚Äé&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;90deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--‚Äé‚Äã&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--‚Äé&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try the above and you will get a gradient coloration!&lt;/p&gt;

&lt;p&gt;To achieve such magic I am relying on a hidden character that make both of the variables different but &lt;em&gt;visually&lt;/em&gt; we see them the same. If you try the code on &lt;a href="https://jsfiddle.net"&gt;jsfiddle.net&lt;/a&gt; You will see the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5offe6Aa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3mxu4h4dnzqvn5t0wry.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5offe6Aa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3mxu4h4dnzqvn5t0wry.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of course, you should never use such thing in a real project unless you want to make your boss and coworkers crazy üòú&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it
&lt;/h2&gt;

&lt;p&gt;I know it's a lot information at once but you don't have to remember everything. I tried to group the most unknown and non-intuitive behaviors around CSS variables. If one day something is not working as expected, get back here. You will probably find your answer in the above.&lt;/p&gt;

&lt;p&gt;I will end with some Stack Overflow questions I have answered that can be useful:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/q/48639882/8620333"&gt;How can I get a negative value of a CSS variables in a calc() expression?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/q/55329996/8620333"&gt;How to create color shades using CSS variables similar to darken() of SASS?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/q/51063555/8620333"&gt;How to Use calc() to switch between color values?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/q/49973885/8620333"&gt;Can a recursive variable be expressed in css?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/q/56229772/8620333"&gt;Get computed value of CSS variable that uses an expression like calc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/q/55931363/8620333"&gt;Are CSS Variable changes possible upon a radio button's checked selector being triggered?&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Declutter your Downloads folder with Python üòé</title>
      <author>Aahnik Daw</author>
      <pubDate>Thu, 08 Apr 2021 13:27:41 +0000</pubDate>
      <link>https://dev.to/aahnik/declutter-your-downloads-folder-with-python-1a4p</link>
      <guid>https://dev.to/aahnik/declutter-your-downloads-folder-with-python-1a4p</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;We download tons of files daily from the internet.&lt;/p&gt;

&lt;p&gt;If you are a Windows user, they most probably land up in your Desktop folder by default, making it look like a mess.&lt;/p&gt;

&lt;p&gt;For Unix users, it's generally the &lt;code&gt;~/Downloads&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Having all the files in one folder makes it hard to navigate. It takes more time to reach the desired file. And &lt;strong&gt;it simply looks bad&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;One great way of organizing files is by their mime type. That is, all the images go to one folder, all the pdfs to another, and so on.&lt;/p&gt;

&lt;p&gt;So I made a simple tool, that can declutter your downloads folder.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dirganize"&gt;
  &lt;/a&gt;
  dirganize
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/aahnik/py-utility-pack/tree/main/dirganize#dirganize"&gt;Source Code (GitHub)&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/dirganize/"&gt;PyPI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-install"&gt;
  &lt;/a&gt;
  How to install?
&lt;/h2&gt;

&lt;p&gt;Make sure you have &lt;a href="https://www.python.org/"&gt;python&lt;/a&gt; and &lt;a href="https://pip.pypa.io/en/stable/installing/"&gt;pip&lt;/a&gt; installed in your system.&lt;/p&gt;

&lt;p&gt;The package &lt;code&gt;dirganize&lt;/code&gt; is published to the Python Package Index. So, why wait, you can easily install it with a single &lt;code&gt;pip&lt;/code&gt; command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;‚ùØ pip &lt;span class="nb"&gt;install &lt;/span&gt;dirganize
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-"&gt;
  &lt;/a&gt;
  How to use ?
&lt;/h2&gt;

&lt;p&gt;Navigate into the directory, which you want to organize, and run the &lt;code&gt;dirganize&lt;/code&gt; command.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;‚ùØ &lt;span class="nb"&gt;cd &lt;/span&gt;Downloads
‚ùØ dirganize
Creating mapping  ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 100% 0:00:00
Moving files  ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 100% 0:00:00

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And that's it. Your folder is organized. &lt;/p&gt;

&lt;p&gt;Run the &lt;code&gt;ls&lt;/code&gt; command (or &lt;code&gt;dir&lt;/code&gt; for Windows) before and after executing &lt;code&gt;dirganize&lt;/code&gt; to see the magic.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hlmfaZKQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5969yyq6a44jychm812.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hlmfaZKQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5969yyq6a44jychm812.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#your-rules"&gt;
  &lt;/a&gt;
  Your rules
&lt;/h2&gt;

&lt;p&gt;Your folder. Your rules.&lt;/p&gt;

&lt;p&gt;Want to change the rules? I mean the rules that govern which file goes to which folder. &lt;/p&gt;

&lt;p&gt;Then simply, put a &lt;code&gt;.dirganize.yml&lt;/code&gt; file inside the folder to override the default configuration.&lt;/p&gt;

&lt;p&gt;See the syntax and default configuration &lt;a href="https://github.com/aahnik/py-utility-pack/tree/main/dirganize#usage"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A yaml file is basically converted to a python dictionary by &lt;code&gt;dirganize&lt;/code&gt;. The default dictionary is overwritten by the user-defined configuration (when available).&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#pyutilitypack"&gt;
  &lt;/a&gt;
  py-utility-pack
&lt;/h2&gt;

&lt;p&gt;Dirganize is a part of &lt;code&gt;py-utility-pack&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;You can get more such tools here üëá&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/aahnik"&gt;
        aahnik
      &lt;/a&gt; / &lt;a href="https://github.com/aahnik/py-utility-pack"&gt;
        py-utility-pack
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Collection of small Python packages and simple CLI tools that will make you dry. Install via pip and start using without delay.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
py-utility-pack&lt;/h1&gt;
&lt;p&gt;Collection of small Python packages and simple CLI tools that will make you dry.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Install via pip and start using without delay.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here is a list of packages in this repo.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Package&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/aahnik/py-utility-pack/main//verlat/README.md"&gt;verlat&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Get to know the latest version of a python package on PyPI.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/aahnik/py-utility-pack/main//ado-py/README.md"&gt;ado-py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Do stuff with python. Quickly access functions from the command-line.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/aahnik/py-utility-pack/main//minsert/README.md"&gt;minsert&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Insert dynamic content in markdown, without using a separate template file.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/aahnik/py-utility-pack/main//mendi/README.md"&gt;mendi&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Simple wrapper that helps you write a menu-driven program easily.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/aahnik/py-utility-pack/main//dirganize/README.md"&gt;dirganize&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A command-line tool to organize files into category directories.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Feel free to contribute a new one. See &lt;a href="https://raw.githubusercontent.com/aahnik/py-utility-pack/main//.github/CONTRIBUTING.md"&gt;Contributing Guidelines&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/aahnik/py-utility-pack"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;I am &lt;a href="https://aahnik.dev"&gt;Aahnik Daw&lt;/a&gt; and you can follow me on &lt;a href="https://github.com/aahnik"&gt;GitHub&lt;/a&gt; and &lt;a href="https://dev.to/aahnik"&gt;dev.to&lt;/a&gt; to stay updated with my latest repos and articles.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Is It Time to Give Your Software a Spring Clean?</title>
      <author>Clever Software Group</author>
      <pubDate>Thu, 08 Apr 2021 13:22:59 +0000</pubDate>
      <link>https://dev.to/cleversoftwaregroup/is-it-time-to-give-your-software-a-spring-clean-1a05</link>
      <guid>https://dev.to/cleversoftwaregroup/is-it-time-to-give-your-software-a-spring-clean-1a05</guid>
      <description>&lt;p&gt;It‚Äôs officially Spring! The first quarter of 2021 has been an exciting time for us at &lt;a href="https://cleversoftwaregroup.com/"&gt;Clever Software Group&lt;/a&gt; and has set the tone for a very promising rest of the year.&lt;/p&gt;

&lt;p&gt;As the clocks move forward an hour and we start to progress into the warmer months, perhaps it‚Äôs time for you to review your business software systems and give them a well needed spring clean! Here are 3 signs it‚Äôs time to update your enterprise software solutions:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Productivity is taking an overall dive&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, older software systems will start to dilapidate and perform less efficiently. In turn, they will begin to generate poorer outputs altogether and start to hinder the performance of your business. A newer, high specification bespoke software solution, such as the ones we create at Clever Software Group, would offer a much greater quality of service, to both employees working in-house and clients receiving your services. Customers are much more likely to opt for enterprise services that use a more sophisticated software solution. Implementing a bespoke software solution into your business will save vital time and money, having a massive impact on the amount of resources you can save on. An up-to-date enterprise level software system will offer a much faster service, and include state-of-the-art features, to allow your employees to work with ease, efficiency and complete tasks in a fraction of the time. Applying cutting-edge design and technology practices to streamline your business process will be increasingly more appealing to future prospects and deliver intuitive experiences.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Safety and security for business data is a concern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is a well-known fact that older technology and software-based systems are more susceptible to security breaches. This, of course, is something every business wants to avoid ‚Äî no matter what scale of operation is being run. Outdated software is more likely to be less compatible with anti-virus systems, meaning hackers can easily penetrate firewalls and override security systems. Businesses want to avoid data leaks at all costs. A refreshed bespoke database solution designed, developed and supported by Clever Software Group, would protect your business data more affectively and add much stronger security structures, to safeguard your sensitive enterprise information. The older the software system, the less likely it is to withstand a cyber-attack. Incorporating a reinvigorated, reliable custom-built software solution will elevate your business. Innovative protective features, specific to your corporations needs would be assimilated and drastically reduce the risk of disruption to your business.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. You are not yet integrated with the cloud&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Cloud is leading the forefront of the bespoke software development industry. By embracing cloud technology, you can optimize database access and performance. Clever Software Group can offer a scalable, cost-effective solution to monitor your infrastructure, with tailored backup and disaster recovery services in place. A cloud-based software system will allow your business data to be retrieved securely in real-time, providing essential mobility, flexibility and forward thinking within your enterprise. Cloud-hosted databases automatically update, meaning everyone within your company will always be on the same page and not waiting for individual software updates to take place. As your business evolves, your cloud-based software will evolve with you; that‚Äôs the beauty of it. The Cloud is the gift that keeps on giving.&lt;/p&gt;

&lt;p&gt;Why not start your next software project with us today? For more information on all the bespoke software and database services we offer, click here!&lt;/p&gt;

&lt;p&gt;Phone: 01425 837290&lt;br&gt;
Email: &lt;a href="mailto:hello@cleversoftwaregroup.com"&gt;hello@cleversoftwaregroup.com&lt;/a&gt;&lt;br&gt;
Website: Clever Software Group&lt;br&gt;
To view the original blog, please click here.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Entity Relationships Part 1: One-To-Many</title>
      <author>Software Development Academy</author>
      <pubDate>Thu, 08 Apr 2021 13:17:00 +0000</pubDate>
      <link>https://dev.to/softwaredevacademy/entity-relationships-part-1-one-to-many-3ehg</link>
      <guid>https://dev.to/softwaredevacademy/entity-relationships-part-1-one-to-many-3ehg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#adding-a-car-class"&gt;
  &lt;/a&gt;
  Adding a Car Class
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/FK4DHz_lrUc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#onetomany-relation"&gt;
  &lt;/a&gt;
  One-To-Many Relation
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/_IpDUgAfjZA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#clarification"&gt;
  &lt;/a&gt;
  Clarification
&lt;/h4&gt;

&lt;p&gt;At the end of the video, the &lt;code&gt;person&lt;/code&gt; column in the car table (the table to the right) is called a &lt;strong&gt;foreign key&lt;/strong&gt; column as the values in the column are ids on the person table (table to the left)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#onetomany-implementation"&gt;
  &lt;/a&gt;
  One-To-Many Implementation
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/3gSiQCmtLHg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avoiding-recursive-json-representation"&gt;
  &lt;/a&gt;
  Avoiding Recursive JSON Representation
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/esvT99ST5lM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#snippets-amp-commands"&gt;
  &lt;/a&gt;
  Snippets &amp;amp; Commands
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#json-annotations"&gt;
  &lt;/a&gt;
  JSON annotations
&lt;/h5&gt;

&lt;p&gt;Ignore the property completely:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@JsonIgnore&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or make the property only be rendered as the id:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@JsonIdentityInfo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;ObjectIdGenerators&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;PropertyGenerator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;property&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@JsonIdentityReference&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alwaysAsId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#updating-car-amp-validation"&gt;
  &lt;/a&gt;
  Updating Car &amp;amp; Validation
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/rTPLSALamjs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#snippets-amp-commands"&gt;
  &lt;/a&gt;
  Snippets &amp;amp; Commands
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;build.gradle&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight groovy"&gt;&lt;code&gt;&lt;span class="n"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="s1"&gt;'org.springframework.boot'&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="s1"&gt;'2.4.4'&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="s1"&gt;'io.spring.dependency-management'&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="s1"&gt;'1.0.11.RELEASE'&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="s1"&gt;'java'&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;repositories&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;mavenCentral&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="s1"&gt;'org.springframework.boot:spring-boot-starter-web'&lt;/span&gt;
    &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="s1"&gt;'org.springframework.boot:spring-boot-starter-data-jpa'&lt;/span&gt;
    &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="s1"&gt;'org.springframework.boot:spring-boot-starter-validation'&lt;/span&gt;
    &lt;span class="n"&gt;runtimeOnly&lt;/span&gt; &lt;span class="s1"&gt;'org.postgresql:postgresql'&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
    </item>
    <item>
      <title>DISCUSS: How would the ideal browser for devs be like?</title>
      <author>Naseki</author>
      <pubDate>Thu, 08 Apr 2021 12:51:50 +0000</pubDate>
      <link>https://dev.to/naseki/discuss-how-would-the-ideal-browser-for-devs-be-like-3l84</link>
      <guid>https://dev.to/naseki/discuss-how-would-the-ideal-browser-for-devs-be-like-3l84</guid>
      <description>&lt;p&gt;Imagine a world where devs have the perfect browser to make and debug websites with... a browser that helps us develop faster and more efficiently... how would it be like?&lt;/p&gt;

&lt;p&gt;Firefox is always seen as one of the best browsers among the most popular ones, and there are already dev-oriented browsers like &lt;a href="https://polypane.app"&gt;Polypane&lt;/a&gt;, but could we go a step further?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#comment-below-answering-these-two-questions"&gt;
  &lt;/a&gt;
  Comment below answering these two questions
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;What browser do you currently use and why?&lt;/li&gt;
&lt;li&gt;How do you see a perfect browser for devs? What features would it have? Think of stuff like: an even more advanced CSS debugger than Firefox', an in-built colour picker, accessibility tools etc.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>discuss</category>
      <category>watercooler</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Off-heap memory in Java</title>
      <author>Jeisson Florez</author>
      <pubDate>Thu, 08 Apr 2021 12:50:22 +0000</pubDate>
      <link>https://dev.to/jeissonk19/off-heap-memory-in-java-4dd1</link>
      <guid>https://dev.to/jeissonk19/off-heap-memory-in-java-4dd1</guid>
      <description>&lt;p&gt;The heap area is one of the most important parts in the JVM architecture since it stores all the objects created in a JVM instance, however, there are some cases when it is convenient to put them outside of it. In this post we will see how this can be achieved and some implementations in this regard.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;First, let's take a quick look at the JVM architecture. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O9-AbeLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9nrq9ahw2lc6a9lz0u9u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O9-AbeLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9nrq9ahw2lc6a9lz0u9u.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we can see the heap is into the Runtime Data Area which contains the areas that are used during the execution of a program, some of them are per thread and others are unique by JVM instance such as the heap. The garbage collector must be taken into account because it is key to understand how memory is managed in the heap.&lt;/p&gt;

&lt;p&gt;A formal definition of the heap area is: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Java Virtual Machine has a heap that is shared among all Java Virtual Machine threads. The heap is the run-time data area from which memory for all class instances and arrays is allocated. The heap is created on virtual machine start-up. Heap storage for objects is reclaimed by an automatic storage management system (known as a &lt;strong&gt;garbage collector&lt;/strong&gt;); objects are never explicitly deallocated. The Java Virtual Machine assumes no particular type of automatic storage management system, and the storage management technique may be chosen according to the implementor‚Äôs system requirements. The heap may be of a fixed size or may be expanded as required by the computation and may be contracted if a larger heap becomes unnecessary. The memory for the heap does not need to be contiguous.  &lt;a href="https://docs.oracle.com/javase/specs/jvms/se11/jvms11.pdf"&gt;JVM Specification&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Knowing that all the data stored in the heap is subject to the garbage collector, if the data stored in the heap becomes huge, the time consumed by the garbage collector will be proportionally higher, and here we may be wondering why this may affect us? Well, each garbage collector has a different method to do the heap cleanup but they all have something in common, the &lt;strong&gt;Stop-The-World&lt;/strong&gt; mechanism, which means that at some point all the application threads will be suspended until the garbage collector processes all the objects in the heap. &lt;/p&gt;

&lt;p&gt;That said, while the garbage collector algorithms do a great job of cleaning up in super fast time, when we are dealing with near real-time applications we don't have the option of having these pauses, or when the available physical memory is less than needed then that is when dumping that data off the heap is an option.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#offheap-memory"&gt;
  &lt;/a&gt;
  Off-heap memory
&lt;/h2&gt;

&lt;p&gt;Off-heap memory refers to the memory allocated directly to the operative system, it can be part of the same physical memory or/and disk access based such as &lt;a href="https://medium.com/i0exception/memory-mapped-files-5e083e653b1"&gt;memory mapped-files&lt;/a&gt;. As putting data out of the JVM, serialization  is needed to write and read that data, and the performance will depend on the buffer, serialization process and disk speed (if applicable).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#benefits"&gt;
  &lt;/a&gt;
  Benefits
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Reduction of garbage collection pressure.&lt;/li&gt;
&lt;li&gt;Large memory size, depending on the implementation. &lt;/li&gt;
&lt;li&gt;Memory shared among all JVMs present in the OS.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#considerations"&gt;
  &lt;/a&gt;
  Considerations
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Serialization process impact on the performance&lt;/li&gt;
&lt;li&gt;Manual memory management is hard and error-prone (ask to C devs üòÖ). &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h3&gt;

&lt;p&gt;The way to use off-heap memory depends on the developers and the business case, either creating an own implementation using Java NIO API that allow us to allocate memory manually or using any of the implementations already in the market. &lt;/p&gt;

&lt;p&gt;In this post we will see in a general overview a library that implements some of the most common data structures used in java. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/OpenHFT/Chronicle-Map"&gt;Chronicle-Map&lt;/a&gt;: &lt;em&gt;Chronicle Map is an in-memory, key-value store, designed for low-latency, and/or multi-process applications.&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's do a simple test in which the scenario is an application that processes a few million numbers and put them in a Set data structure to sum them up afterwards.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Project repo: &lt;a href="https://github.com/kmiloflorez2/off-heap-tests"&gt;GitHub - off-heap-tests&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Max Heap size: 2Gb &lt;/li&gt;
&lt;li&gt;JDK: OpenJDK 64-Bit Server VM Microsoft-18724&lt;/li&gt;
&lt;li&gt;Physical memory: 16Gb
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="nf"&gt;sumNumbers&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="nc"&gt;InterruptedException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;30_000_000&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextLong&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1_000_000&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nc"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sleep&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// To have time to check jconsole&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;reduce&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0L&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;Long:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="nc"&gt;InterruptedException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Instant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;now&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt; &lt;span class="n"&gt;executeTest&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Instant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;now&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;timeMilli&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toEpochMilli&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toEpochMilli&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Time to get finished in ms: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;timeMilli&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#hashset-java-implementation"&gt;
  &lt;/a&gt;
  HashSet Java implementation
&lt;/h4&gt;

&lt;p&gt;The first test will be using a simple HashSet implementation&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;executeTest&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="nc"&gt;InterruptedException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;HashSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sumNumbers&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AhbHnkDP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4j3yw2tpz6qrg9hs6dlw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AhbHnkDP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4j3yw2tpz6qrg9hs6dlw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IwVLLkUi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1isbo07336hhrcegqkh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IwVLLkUi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1isbo07336hhrcegqkh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can say It took about 58K ~ 59K milliseconds to get finished.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#chronicleset-implementation"&gt;
  &lt;/a&gt;
  ChronicleSet implementation
&lt;/h4&gt;

&lt;p&gt;ChronicleSet provides a builder that needs the type and the max amount of entries to allocate the memory based on them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;executeTest&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="nc"&gt;InterruptedException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;ChronicleSetBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;entries&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30_000_000&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;sumNumbers&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a5-nO6Bu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kik0cdc8nmlmiczwurjw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a5-nO6Bu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kik0cdc8nmlmiczwurjw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4onOghEv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wba5o50pevxh0pkepni5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4onOghEv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wba5o50pevxh0pkepni5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can say It took about 52K ~ 53K milliseconds to get finished and also notice about change in the heap memory used and the reduction of GC impact.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;Off-heap memory is a good option when the data stored in the heap is huge and we need to reduce the time consumed by the garbage collector, also when an application uses more memory than the available physical and using disk space is an option. However, it is worthy to remind that working directly to memory allocation is not an easy task and it can bring difficult issues to deal with.&lt;/p&gt;

&lt;p&gt;In what other cases do you think off-heap memory can be used ?&lt;/p&gt;

&lt;p&gt;If you like this post you can find more in &lt;a href="https://jeisson.dev/blog/"&gt;https://jeisson.dev/blog/&lt;/a&gt; and follow me in twitter &lt;a class="comment-mentioned-user" href="https://dev.to/jeissonk19"&gt;@jeissonk19&lt;/a&gt;
 üëã&lt;/p&gt;

</description>
      <category>java</category>
      <category>jvm</category>
      <category>programming</category>
      <category>performance</category>
    </item>
    <item>
      <title>Stop Googling split, splice, and slice!</title>
      <author>Ahmedammarr</author>
      <pubDate>Thu, 08 Apr 2021 12:26:27 +0000</pubDate>
      <link>https://dev.to/ahmeddammarr/stop-googling-split-splice-and-slice-45b8</link>
      <guid>https://dev.to/ahmeddammarr/stop-googling-split-splice-and-slice-45b8</guid>
      <description>&lt;p&gt;Ok, Split, Splice, and Slice methods are getting me confused every single time I use one of them, and no matter how many times I use them each time feels like the first time so I decided to summarize how they work in this article and save it as a memo to be my reference in such a situation.&lt;br&gt;
Let's start!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#split"&gt;
  &lt;/a&gt;
  split:
&lt;/h3&gt;

&lt;p&gt;Split is a string method, It converts a string into an array of substrings&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#signature"&gt;
  &lt;/a&gt;
  signature:
&lt;/h5&gt;



&lt;p&gt;&lt;code&gt;string.split(substring that separates our string, limit)&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Good Morning Dev Community&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Morning Dev &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//output:["Good ", "Community"]&lt;/span&gt;

&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;//output: ["Good", "Morning", "Dev", "Community"]&lt;/span&gt;

&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;//output: ["G", "o", "o", "d", " ", "M", "o", "r", "n", "i", "n", "g", " ", "D", "e", "v", " ", "C", "o", "m", "m", "u", "n", "i", "t", "y"]&lt;/span&gt;

&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;//output: ["G", "o", "o", "d"]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#splice"&gt;
  &lt;/a&gt;
  Splice:
&lt;/h3&gt;

&lt;p&gt;Splice is an array method that adds, replaces, or removes items from the array and it returns the replaced/removed item&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#signature"&gt;
  &lt;/a&gt;
  signature:
&lt;/h5&gt;



&lt;p&gt;&lt;code&gt;array.splice(start index, number of replaced/removed items, new items to be added or replacing the removed)&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;orange&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="cm"&gt;/* output:["red"]
- "red" is removed and replaced by "black"
- splice methods returns the removed item ["red"]
- colors = ["orange", "black", "blue", "black"]
*/&lt;/span&gt;

&lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="cm"&gt;/* output:[]
- "white" is inserted at index 1 and there is no item removed
- splice method return an empty array
- colors = ["orange", "white", "black", "blue", "black"]
*/&lt;/span&gt;

&lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;orange&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;purple&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="cm"&gt;/* output:["blue", "black"]
- "orange","purple" are inserted from index 3 and "blue", "black" are removed
- splice method returns ["blue", "black"]
- colors = ["orange", "white", "black", "orange", "purple"]
*/&lt;/span&gt;

&lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="cm"&gt;/* output:["orange", "purple"]
- "orange","purple" are removed
- splice method returns ["orange", "purple"]
- colors = ["orange", "white", "black"]
*/&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#slice"&gt;
  &lt;/a&gt;
  Slice:
&lt;/h3&gt;

&lt;p&gt;Slice is an array method that returns a new array with the selected items from the original array&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#signature"&gt;
  &lt;/a&gt;
  signature:
&lt;/h5&gt;

&lt;p&gt;array.slice(start index where the selection starts, end index where the selection ends)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;weekDays&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sunday&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Monday&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tuesday&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Wednesday&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Thursday&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Friday&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Saturday&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mondayTuesday&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;weekDays&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//mondayTuesday= ["Monday", "Tuesday"]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allExceptSundayMonday&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;weekDays&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//allExceptSundayMonday = ["Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allExceptSaturday&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;weekDays&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;weekDays&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//allExceptSaturday = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thank you, I hope we never google these three methods again ‚úå&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Running Nx Affected Commands in GitHub Actions</title>
      <author>ng-conf</author>
      <pubDate>Thu, 08 Apr 2021 12:23:16 +0000</pubDate>
      <link>https://dev.to/ngconf/running-nx-affected-commands-in-github-actions-32n6</link>
      <guid>https://dev.to/ngconf/running-nx-affected-commands-in-github-actions-32n6</guid>
      <description>&lt;p&gt;Preston Lamb | ng-conf | Oct 2020&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---pq0CcY7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6f29eqmvgmudb23tlqku.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---pq0CcY7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6f29eqmvgmudb23tlqku.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  &lt;strong&gt;tldr;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Working in an Nx monorepo over the last year has been really great. Sharing code between projects is really convenient. The only problem is that as you add more libraries and applications and projects, the time it takes to build or test applications grows as well. The good thing is that Nx monorepos come with a variety of commands that run on only portions of the codebase. For example, if your change only affects one library in your project, you can test just that library instead of the entire project. This is especially useful on your CI/CD server when you create pull requests. Tests can be run on the pull request branch, making sure that any new code is working and that it didn‚Äôt break any previous portions of the app. In this post, we‚Äôll go over how to create a GitHub Action workflow to run the affected tests when a pull request is created.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-setup"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The Setup&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;In my situation, I have an Nx monorepo with two applications in it. There are a lot of libraries included as well. Some of the libraries are shared, and some are specific to the application. What I needed was a solution for running the &lt;code&gt;nx affected:test&lt;/code&gt; command when a pull request was created. This would run the tests for just those projects affected by the code changes. If the tests pass, the PR can safely be merged.&lt;/p&gt;

&lt;p&gt;I first started to implement this using Google Cloud, as that is the product we use to build and deploy our applications at my full time job. I was never able to get it to work, though, because for &lt;code&gt;nx affected&lt;/code&gt; to work it needs the git history for the repo. I tried many solutions, but could never get the git history into the cloud build instance. My only solution was to run all the tests on each PR. This worked for a while, but as the repository has grown, more tests and libraries have been added. Last week, the tests started timing out and wouldn‚Äôt finish. It no longer became a viable solution. Because of that, I came to GitHub Actions to try and solve the issue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-your-github-action"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Creating Your GitHub Action&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;If you‚Äôve never tried GitHub Actions before, you‚Äôll find the process straightforward and convenient. Before creating your action, switch to a new branch in your repo. Next, create a &lt;code&gt;.github&lt;/code&gt; folder in the root of your repository, with a nested &lt;code&gt;workflows&lt;/code&gt; folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir .github
mkdir.github/workflows
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;yaml&lt;/code&gt; files that we place inside the &lt;code&gt;.github/workflows&lt;/code&gt; folder will be run as GitHub Actions. In this case, the next step is creating a new yaml file, which I‚Äôll call &lt;code&gt;nx-affected.yml&lt;/code&gt;. This file will define the steps for the action. I won‚Äôt go into all the details of each step; that‚Äôs more suited for another article. I will provide insight on the more important steps to accomplish our goals here, though. Here‚Äôs the full contents of the YAML file, after which we‚Äôll break it down piece by piece.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: Nx Affected CI
on:
  pull_request:
    branches: [main]
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: git fetch origin main
      - run: npm install
      - name: Run Affected Tests
        shell: bash
        run: npm run affected:test -- --base=remotes/origin/main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let‚Äôs break this down piece by piece and explain what‚Äôs going on.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: Nx Affected CI
on:
  pull_request:
    branches: [main]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At the top of the workflow yaml file we give our workflow a name. After that we determine when the workflow will be run. In this case, the workflow will run when pull requests are created for merging into the main branch. Other branches can also be targeted by being added to the array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next part of the yaml file is the meat of the workflow. The first part I‚Äôll point out is that we determine what operating system to use for the action with the &lt;code&gt;runs-on&lt;/code&gt; attribute. In this case, &lt;code&gt;ubuntu-latest&lt;/code&gt;. Next, the &lt;code&gt;strategy&lt;/code&gt; and &lt;code&gt;matrix&lt;/code&gt; attributes allow us to determine multiple versions of node to use for running the tests. This part is optional. You can choose just one version if you‚Äôd like, or select multiples. The action will run for each version of node that you provide in the array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;steps:
  - uses: actions/checkout@v2
    with:
      fetch-depth: 0
  - name: Use Node.js ${{ matrix.node-version }}
    uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
  - run: git fetch origin main
  - run: npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;steps&lt;/code&gt; section of our workflow file is where we will accomplish the goal of the workflow. In other words we will prepare to run the tests and run them. These first three steps checkout the git repository into the context of the workflow. &lt;code&gt;fetch-depth: 0&lt;/code&gt; ensures that we get the full git history, which is necessary for running the &lt;code&gt;nx affected&lt;/code&gt; commands. The second step determines the node version to use (using our &lt;code&gt;matrix&lt;/code&gt; from the &lt;code&gt;strategy&lt;/code&gt; section above). The third step fetches the latest information from the main branch. We need that information because Nx runs compares the current branch to the &lt;code&gt;main&lt;/code&gt; branch to determine what has changed. The last step I‚Äôve included here is to run &lt;code&gt;npm install&lt;/code&gt;. This ensures that all necessary packages are ready for the application to be built and tested.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- name: Run Affected Tests
  shell: bash
  run: npm run affected:test -- --base=remotes/origin/main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This last step is where we actually run the tests. We gave the step a &lt;code&gt;name&lt;/code&gt;, and specify the &lt;code&gt;shell&lt;/code&gt; to be used while running the tests. When this step runs, we run an npm command declared in the &lt;code&gt;package.json&lt;/code&gt;. This will run the Nx command that runs tests against projects that have changed between the branch of the pull request and the &lt;code&gt;main&lt;/code&gt; branch. The tests will be run, and if they are successful the workflow will end in a success status. If any tests fail, the workflow ends with a failure status. Both of these statuses will show on the pull request page in GitHub.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#running-the-action"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Running the Action&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;To test the action, push your changes to the repository and create a pull request using the branch that you did this work on, with the intent to merge it into &lt;code&gt;main&lt;/code&gt;. When you create the pull request, the action you just created will start running. You can see it in the repository. You can get there by clicking the ‚ÄúActions‚Äù tab on the repository‚Äôs main page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NjHR1HP2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2A_TXS_F-8eI7Ms1240hZusA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NjHR1HP2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2A_TXS_F-8eI7Ms1240hZusA.png" alt="screenshot of the GitHub header tool bar. The are 9 different tabs, each with a unique icon. The tabs read: Code, Issues, Pull requests, Actions, Projects, Wiki Security, Insight, and Settings."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#location-for-the-actions-in-a-github-repository"&gt;
  &lt;/a&gt;
  Location for the Actions in a GitHub repository
&lt;/h6&gt;

&lt;p&gt;Once you‚Äôve clicked on that tab, you‚Äôll see a table of the actions that you‚Äôve run in this repository. If the workflow is currently running, you‚Äôll see a yellow circle. If it was unsuccessful, it‚Äôs marked with a red x. If it was successful, you‚Äôll see a green check mark.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--itf5UaWl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2ADbXjukQuykn_POArXHZ-vw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--itf5UaWl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2ADbXjukQuykn_POArXHZ-vw.png" alt='Screenshot of the actions page for a GitHub repository. On the left hand side is a small menu named Workflows that has opened to the All Workflows menu, that has the option of Nx Affected Ci. All workflows is highlighted in blue. The main page reads "All workflows" at the top, there is a search bar under that labeled "Filter workflows". Under the search bar it states 38 results. one result named "Workflow edit" is shown.'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#list-of-all-the-actions-run-in-a-repository"&gt;
  &lt;/a&gt;
  List of all the actions run in a repository
&lt;/h6&gt;

&lt;p&gt;Clicking on one of the rows will show you the details of that action. It will show each step that was defined in your action and the logs that are pertinent to that step. Each time you create a pull request, or push updates to an existing PR, the tests will run.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-information"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Additional Information&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;You can use this same step, or duplicate it, to run other Nx affected commands, such as &lt;code&gt;lint&lt;/code&gt;, &lt;code&gt;build&lt;/code&gt;, or &lt;code&gt;e2e&lt;/code&gt;. They can all be run in a single workflow as separate steps, or you can have one workflow for each of them. In addition, you could use an action to build your application in a Docker image and push the image to GitHub‚Äôs package registry (or another registry like Docker Hub). Here are a couple previous articles of mine that may help you out. In addition, here‚Äôs a reference to a post on Dev.to that I used to help me get started with testing affected projects in my Nx monorepo.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.prestonlamb.com/blog/dockerizing-angular"&gt;Docker-izing your Angular Application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.prestonlamb.com/blog/creating-a-docker-image-with-github-actions"&gt;Create a Docker Image with GitHub Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.prestonlamb.com/blog/creating-a-docker-image-with-github-actions"&gt;Running Nx Affected Commands in GitHub Actions by Devin Shoemaker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#ngconf-the-musical-is-coming"&gt;
  &lt;/a&gt;
  &lt;strong&gt;ng-conf: The Musical is coming&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;ng-conf: The Musical is a two-day conference from the ng-conf folks coming on April 22nd &amp;amp; 23rd, 2021. Check it out at &lt;a href="https://www.2021.ng-conf.org/"&gt;ng-conf.org&lt;/a&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>webdev</category>
      <category>github</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Python  - Random Password Generator GUI  For Beginner's</title>
      <author>LP</author>
      <pubDate>Thu, 08 Apr 2021 12:17:38 +0000</pubDate>
      <link>https://dev.to/lakpa/python-random-password-generator-gui-for-beginner-s-29fp</link>
      <guid>https://dev.to/lakpa/python-random-password-generator-gui-for-beginner-s-29fp</guid>
      <description>&lt;p&gt;Hello friends here is a simple Random Password Generator build using Python's PysimpleGUI Module for whole script -&lt;a href="https://github.com/LP-Codes/Python-Random-Password-GUI/tree/master"&gt;https://github.com/LP-Codes/Python-Random-Password-GUI/tree/master&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NjyZtGr0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fi9x88c3iy1tipvxra59.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NjyZtGr0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fi9x88c3iy1tipvxra59.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import random
import string
#### module allows us to copy and paste text to and from the clipboard to your computer
import pyperclip
####  for creating gui
import PySimpleGUI as sg



sg.theme("Darkbrown")
####  Defining the window's contents
layout = [[sg.Text("Random Password Generator", font=("Helvetica", 25, "bold"))],
          [sg.Text("Select Password Length", key='-OUTPUT1-', font=("Helvetica", 10, "bold"))],
          [sg.Spin([i for i in range(1, 11)], initial_value=1,
                   size=(30, 4), key='-INPUT-')],
          #   [sg.Input(key='-INPUT-' "sd")],
          [sg.Text(size=(40, 1), key='-OUTPUT-', font=("Helvetica", 25, "bold"))],
          [sg.Button('Generate', border_width=5, pad=(25, 10), font=("Helvetica", 10, "bold")),
           sg.Button('Copy', border_width=5, pad=(25, 10), font=("Helvetica", 10, "bold")
                     # Defining the window's contents
                     ), sg.Button('Quit', border_width=5, pad=(25, 10), font=("Helvetica", 10, "bold"))]]

window = sg.Window('Lp Password Generator', layout)

####  Display and interact with the Window using an Event Loop
while True:
    event, values = window.read()

    if event == 'Generate':
        useript = values['-INPUT-']
        lower = string.ascii_lowercase
        upper = string.ascii_uppercase
        num = string.digits
        symbols = string.punctuation
        all = lower + upper + num + symbols
        temp = random.sample(all, useript)
        password = "".join(temp)
        print(password)
        sg.popup(password)
        window['-OUTPUT-'].update(password)

        window["-INPUT-"].update("1")

    if event == "Copy":
        op = window['-OUTPUT-'].get()
        pyperclip.copy(op)
        ####  Output a message to the window
        sg.popup("Password is copied to your clipboard")

    ####  See if user wants to quit or window was closed
    if event == sg.WINDOW_CLOSED or event == 'Quit':
        break

####  Finish up by removing from the screen
window.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
    </item>
  </channel>
</rss>
