<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Should I use SQLite, PostgreSQL, or MySQL?</title>
      <author>Saji Wang</author>
      <pubDate>Tue, 21 Sep 2021 12:26:39 +0000</pubDate>
      <link>https://dev.to/codesphere/should-i-use-sqlite-postgresql-or-mysql-1o4b</link>
      <guid>https://dev.to/codesphere/should-i-use-sqlite-postgresql-or-mysql-1o4b</guid>
      <description>&lt;p&gt;Database Management Systems (DBMS), in short, are collections of tools used to access and manipulate the data stored in a database. There are lots of different types of DB management systems but the most widely used are Relational Database Management Systems (RDBMSs). &lt;/p&gt;

&lt;p&gt;RDBMSs use the relational model to store data in the form of tables (referred to as relations). Each relation is then further organized into rows (tuples) and columns (attributes). A relation is managed and/or queried using Structured Query Language (SQL).&lt;/p&gt;

&lt;p&gt;There are many dialects of SQL, the three most popular of which are SQLite, PostgreSQL, and MySQL. Each has its own limitations and use cases, so let's take a look at &lt;strong&gt;when to use each to see which one might be the best fit for your next project.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yilm8BCe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7fz5mu9ulfmcaxq6lxg7.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yilm8BCe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7fz5mu9ulfmcaxq6lxg7.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Let's start with a look at by far the most popular of the three - MySQL. Used by Google, Linkedin, Amazon, Netflix, and Twitter, it is an easily accessible, high-performing system that is most commonly used for web-based applications.&lt;/p&gt;

&lt;p&gt;MySQL is built into major content management systems like WordPress, so you can't go far online without finding something that is supported by it.&lt;/p&gt;

&lt;p&gt;Written in C and C++ and ACID compliant, MySQL is commonly used for enterprise applications thanks to its scalability, replication, and security features. It's also the go-to system if speed is a requirement for your application because the exclusion of some more advanced features MySQL is lightweight while still delivering high performance.&lt;/p&gt;

&lt;p&gt;MySQL's popularity also means it has the best resources to take advantage of. It's part of the Oracle ecosystem so if you're looking for support you'll have no trouble finding tools for management, monitoring, and learning.&lt;/p&gt;

&lt;p&gt;Overall MySQL provides a reliable DB solution that's simple to set up and requires minimal developer input. This, along with its great toolset and multi-user feature support, makes it the most accessible option out there.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use%C2%A0mysql"&gt;
  &lt;/a&gt;
  When to use MySQL:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Websites and Web-based applications&lt;/strong&gt; - MySQL's easy setup, huge support community, and robust security features make it a great choice for most websites and applications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;When speed is a requirement&lt;/strong&gt; - At the expense of some more advanced features you might find in PostgreSQL, MySQL is able to optimize speed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Distributed operations&lt;/strong&gt; - thanks to its replication support MySQL is the best choice for distributed database setups.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;For predicted scaling and growth&lt;/strong&gt; - Thanks again to that wonderful replication support, it is easy to implement horizontal scaling on MySQL, so if your website is expected to take off, MySQL is your best choice.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rgw6yDR8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/skevmjtrhl7m5haz08tx.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rgw6yDR8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/skevmjtrhl7m5haz08tx.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PostgreSQL is an open-source object RDBMS that is typically used in more complex websites and applications that require a customizable DB solution. PostgreSQL is ACID-compliant and is used by companies such as Apple and Cisco. Like MySQL, PostgreSQL also offers features such as security and replication. &lt;/p&gt;

&lt;p&gt;PostgreSQL is known for supporting a lot of data types and having deep functionality, but this comes at the cost of a more intensive setup than MySQL. It's more popular in teams that already have dedicated DB specialists as they can create and implement custom PostgreSQL functions in a variety of languages like C, C++, and Java.&lt;/p&gt;

&lt;p&gt;PostgreSQL is the go-to solution for complex analytical processes. It does, however, take a more specialist toolset to manage and due to its highly customizable nature, it can be harder to find support resources than MySQL. There may not always be a solution available for your specific issue in the forums and documentation but there are paid third-party setup services available, making it a viable solution for companies with specialized DB needs to have their system set up and their team trained.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use-postgresql"&gt;
  &lt;/a&gt;
  When to use PostgreSQL:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;For complex queries and operations&lt;/strong&gt; - PostgreSQL's ability to support multiple concurrent writers and query plans that can make use of multiple CPUs make it the clear choice for complex tasks.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;When customizability is needed&lt;/strong&gt; - An extensive amount of customizability gives you far more control over MySQL when it comes to database setup.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Data Warehousing&lt;/strong&gt; - Due to its ability to read/write at fast speeds, PostgreSQL is perfect for data analysis applications.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bHUAqi1H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wlswfph3a09r7tk1dlrd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bHUAqi1H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wlswfph3a09r7tk1dlrd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SQLite is a server-less and self-contained database that does not require any setup or installation to get started. Also known as an embedded database, SQLite runs as part of the app itself instead of part of a separate server process. &lt;/p&gt;

&lt;p&gt;SQLite is the most compact and easy-to-use entry of the three and is also ACID adherent. While it is a great out the box solution for low to medium traffic websites, its lack of versatility and feature set found in its more complete counterparts give it some major disadvantages. &lt;/p&gt;

&lt;p&gt;SQLite is best implemented in embedded software - anything that only requires a small amount of data to be saved or even websites with the south of 100k visitors a day.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use%C2%A0sqlite"&gt;
  &lt;/a&gt;
  When to use SQLite:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Embedded applications&lt;/strong&gt; - when you want to save a small amount of data, systems like a telephone, fitness tracker, or air conditioning system would be a great time to use SQLite.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Low traffic website&lt;/strong&gt; - SQLite isn't the best choice for huge amounts of data or users, but for small operations, the no-setup and config requirements make SQLite the way to go.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Testing&lt;/strong&gt; - A great lightweight alternative to fast testing without the need to implement an actual database.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#horses-for%C2%A0courses"&gt;
  &lt;/a&gt;
  Horses for courses
&lt;/h3&gt;

&lt;p&gt;Looking at all three libraries it's clear that while they all have pros and cons, a direct comparison doesn't make sense, they all fill a specific need. MySQL with its great feature set, community support, and easy setup, is the best allrounder for most web-based applications. PostgreSQL is the way to go for high customizability and specific database requirements, and SQLite is the best option for an application with low DB storage needs or a website with low traffic.&lt;/p&gt;

&lt;p&gt;It's different horses for different courses, but here are some bonus rounds to help you a clearer picture:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h4&gt;

&lt;p&gt;All three options are open-source so they are completely free to implement!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-queries%C2%A0"&gt;
  &lt;/a&gt;
  Data Queries 
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;MySQL - Is more &lt;em&gt;resource-efficient&lt;/em&gt; because it offers a scalable buffer pool to pull cache.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PostgreSQL - is more &lt;em&gt;organized&lt;/em&gt; because it isolates processes by treating them as a separate OS process.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#temporary-tables"&gt;
  &lt;/a&gt;
  Temporary tables
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;PostgreSQL - offers a lot more functionality than MySQL. Tables can be divided into local and global to be configured with flexible variables. If you're developing an application with a lot of complex processes, this is the choice for you.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#memoryoptimized-tables%C2%A0"&gt;
  &lt;/a&gt;
  Memory-Optimized tables 
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;MySQL - Memory-optimized tables are basically the native approach of MySQL is the best option and a great way to save resources.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Open source solutions like the ones we've looked at today are the best options for flexibility, cost efficiency, and innovation, but which one you use depends entirely on your needs.&lt;/p&gt;

&lt;p&gt;MySQL is the clear option for most applications and PostgreSQL is the choice for more complex and custom projects. SQLite is your best friend for small operations and embedded systems.&lt;/p&gt;




&lt;p&gt;At &lt;a href="https://link.codesphere.com/DR"&gt;Codesphere&lt;/a&gt;, we are happy to announce that we just added support for setting up SQLite databases seamlessly in a project, but more on that later this week!&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

</description>
      <category>sql</category>
      <category>database</category>
      <category>webdev</category>
      <category>discuss</category>
    </item>
    <item>
      <title>PHP foreach() loop for indexed and associative arrays</title>
      <author>hrishikesh1990</author>
      <pubDate>Tue, 21 Sep 2021 12:13:43 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/php-foreach-loop-for-indexed-and-associative-arrays-502i</link>
      <guid>https://dev.to/hrishikesh1990/php-foreach-loop-for-indexed-and-associative-arrays-502i</guid>
      <description>&lt;p&gt;In this tutorial, we look at the PHP foreach() loop. We also look at how to use it while working with an indexed or associative array.&lt;/p&gt;

&lt;p&gt;This tutorial is a part of our initiative at &lt;a href="https://flexiple.com/"&gt;Flexiple&lt;/a&gt;, to write short curated tutorials around often used or interesting concepts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents-php-foreach"&gt;
  &lt;/a&gt;
  Table of Contents - PHP foreach:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-foreach-in-php"&gt;What is foreach()?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#code-amp-explanation"&gt;Code and Explanation&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Indexed arrays&lt;/li&gt;
&lt;li&gt;Associative arrays&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#closing-thoughts"&gt;Closing thoughts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-foreach-in-php"&gt;
  &lt;/a&gt;
  What is foreach in PHP?
&lt;/h2&gt;

&lt;p&gt;The foreach() method is used to loop through the elements in an indexed or associative array. It can also be used to iterate over objects. This allows you to run blocks of code for each element.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax-of-php-foreach"&gt;
  &lt;/a&gt;
  Syntax of PHP foreach():
&lt;/h3&gt;

&lt;p&gt;The foreach() method has two syntaxes, one for each type of array.&lt;/p&gt;

&lt;p&gt;The syntax for indexed arrays is as given in the following code block:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterable&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;statement&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The syntax for associative arrays:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterable&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;statement&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, “Iterable” is the required parameter. It is the array or the variable containing the array. “$value” is a variable that stores the current element in each iteration.&lt;/p&gt;

&lt;p&gt;Associated array, uses keys and values, and hence the $key &amp;amp; $values in the second syntax represent the same accordingly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-amp-explanation"&gt;
  &lt;/a&gt;
  Code &amp;amp; Explanation:
&lt;/h2&gt;

&lt;p&gt;In this section, we first look at how the foreach() function works on an indexed array followed by which we look at it’s working on an associative array.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#php-foreach-on-indexed-arrays"&gt;
  &lt;/a&gt;
  PHP Foreach() on Indexed arrays:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$flexiple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Hire"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"top"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"freelance"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"developers"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$flexiple&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="s2"&gt; &amp;lt;br&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output of the above code snippet would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Hire&lt;/span&gt;
&lt;span class="nc"&gt;Top&lt;/span&gt;
&lt;span class="nc"&gt;Freelance&lt;/span&gt;
&lt;span class="n"&gt;developers&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;PHP Foreach() on an Associative array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; 
&lt;span class="nv"&gt;$freelancer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; 
    &lt;span class="s2"&gt;"name"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"Eric"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s2"&gt;"email"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"Eric@gmail.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s2"&gt;"age"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s2"&gt;"gender"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"male"&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt; 

&lt;span class="c1"&gt;// Loop through employee array &lt;/span&gt;
&lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$freelancer&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;": "&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;br&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output of the above code snippet would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Eric&lt;/span&gt;
&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Eric&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;gmail&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;
&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;
&lt;span class="n"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;male&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let’s look at a case where we pass a second argument. As you can see the key and the values of the associative array were printed. Additionally, we replaced “=&amp;gt;” with a “:” to make it more readable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing thoughts:
&lt;/h2&gt;

&lt;p&gt;The foreach() method would return an error in case you use it on variables with a different data type. Additionally, the foreach() method does not modify the values of the internal pointer.&lt;/p&gt;

&lt;p&gt;Once you have understood the working to the foreach() method try working with the for loop.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>DevOps vs SRE: What's The Difference?</title>
      <author>Mike Levan</author>
      <pubDate>Tue, 21 Sep 2021 12:05:01 +0000</pubDate>
      <link>https://dev.to/thenjdevopsguy/devops-vs-sre-what-s-the-difference-560d</link>
      <guid>https://dev.to/thenjdevopsguy/devops-vs-sre-what-s-the-difference-560d</guid>
      <description>&lt;p&gt;Titles in the engineering space are a funny thing. They're important, but they're not important. The importance of a title comes from the salary/job you can get, for example, someone with a DevOps Engineer title gets paid pretty well. However, the title doesn't mean the person with "DevOps Engineer" on their resume is any smarter or more advanced than someone with "systems administrator" or "systems engineer" on their resume.&lt;/p&gt;

&lt;p&gt;The point is, titles are an odd form of justification.&lt;/p&gt;

&lt;p&gt;Arguably the oddest one of all is DevOps Engineer vs Site Reliability Engineer (SRE).&lt;/p&gt;

&lt;p&gt;What are the differences? Is one better than the other? What does it all actually mean? &lt;/p&gt;

&lt;p&gt;In this blog post, you'll learn about the differences between SRE and DevOps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#title-janga"&gt;
  &lt;/a&gt;
  Title Janga
&lt;/h2&gt;

&lt;p&gt;Titles are like Janga. Constantly changing, evolving, and the playing field is always being altered. One wrong move and we'll have ourselves a DevGitSecurityKubernetesDockerNetworkingCloudTerraform Engineer.&lt;/p&gt;

&lt;p&gt;The hottest titles right now to have on your resume are DevOps Engineer and SRE. Why? Because it's what the world thinks, or appears to think that they need right now.&lt;/p&gt;

&lt;p&gt;When you break it down and read between the lines, a company is typically looking for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cloud experience&lt;/li&gt;
&lt;li&gt;CICD experience&lt;/li&gt;
&lt;li&gt;Some container and orchestration experience&lt;/li&gt;
&lt;li&gt;Infrastructure-as-Code/Configuration Management experience&lt;/li&gt;
&lt;li&gt;Scripting experience&lt;/li&gt;
&lt;li&gt;Monitoring and troubleshooting experience&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you look at the list above, you may be thinking to yourself &lt;em&gt;wow, that's a lot&lt;/em&gt;. The answer is &lt;em&gt;yep, it is&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The reason why is because being an SRE or a DevOps engineer isn't an entry-level position. It takes years to collect all of the skills needed and to use them the proper way.&lt;/p&gt;

&lt;p&gt;The idea is to break down the job description and not care about the title. If you see an SRE role that looks more like a Systems Administrator, it's probably not the best environment to be in. Don't be fooled by the titles.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-sre"&gt;
  &lt;/a&gt;
  The SRE
&lt;/h2&gt;

&lt;p&gt;You'll hear debates about this topic a lot in the SRE space - &lt;em&gt;should we follow Google's definition of an SRE?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The answer is yes for a few reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Google created the SRE, which means they definitely know what the role should be.&lt;/li&gt;
&lt;li&gt;Google has constantly strived for perfection from the SRE role and has succeeded.&lt;/li&gt;
&lt;li&gt;The definition is really spot on and it works.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, what's an SRE?&lt;/p&gt;

&lt;p&gt;An SRE is someone who thinks about infrastructure from the lens of a Software Engineer/Developer.&lt;/p&gt;

&lt;p&gt;In the not too long ago past, developers cared about getting features out and shipping code, whereas infrastructure people cared about keeping the systems stable. The two biggest fights amongst the groups were &lt;em&gt;the systems only have issues when new code is introduced&lt;/em&gt; and &lt;em&gt;the systems can't handle the new code changes.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;These were all valid arguments because both were true. With that, the SRE title was born.&lt;/p&gt;

&lt;p&gt;An SRE is someone who understands the infrastructure all the way down to the operating system bits. They know how systems work and how to keep them efficient. They have to know that stuff because code runs on those systems, and the only way for code to run efficiently is by having systems that are up and operational.&lt;/p&gt;

&lt;p&gt;Systems can be anything from bare metal to virtual machines to EC2 instances in AWS to virtual machines in Azure to Kubernetes to Serverless services in any public cloud. A system is anywhere that code is running.&lt;/p&gt;

&lt;p&gt;A few key job responsibilities of an SRE are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Monitoring systems&lt;/li&gt;
&lt;li&gt;Monitoring application performance&lt;/li&gt;
&lt;li&gt;Fixing on-call issues that may occur. This means figuring out why the issue occurred and fix it.&lt;/li&gt;
&lt;li&gt;Conduct blameless post mortems&lt;/li&gt;
&lt;li&gt;Write code for automation and create internal tools primarily in Python, Go, and using Infrastructure-as-Code.&lt;/li&gt;
&lt;li&gt;All of the DevOps duties (CICD, automation, etc.). The idea is to use automation to make everything repeatable.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-devops-engineer"&gt;
  &lt;/a&gt;
  The DevOps Engineer
&lt;/h2&gt;

&lt;p&gt;In the previous section, &lt;strong&gt;The SRE&lt;/strong&gt;, you probably thought to yourself &lt;em&gt;a lot of that overlaps with what DevOps is&lt;/em&gt;, and you're absolutely correct.&lt;/p&gt;

&lt;p&gt;With that being said, what is DevOps?&lt;/p&gt;

&lt;p&gt;DevOps is a subset of SRE. They typically do a fraction of what an SRE does (in an organization that's using the SRE title properly).&lt;/p&gt;

&lt;p&gt;A DevOps Engineer is typically someone that's hired to do a lot of CICD, deploy code, and automate system creation. The unfortunate thing about a DevOps Engineer is that they're typically on a completely separate team than the developers.&lt;/p&gt;

&lt;p&gt;The question becomes &lt;em&gt;so how do they know anything about the code they're deploying&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;That's a battle that many hardcore engineers and developers have constantly. Pretty much what it comes down to is the simple fact that there are a lot of tools on the DevOps tool belt and a lot of developers are there to write code and plan the way an application will look. They really don't have the time to also handle the 10-15 different DevOps-related tools. Because of that, is why we have the DevOps Engineer title today.&lt;/p&gt;

&lt;p&gt;A few key job responsibilities of a DevOps engineer are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CICD&lt;/li&gt;
&lt;li&gt;Infrastructure-as-Code&lt;/li&gt;
&lt;li&gt;Automation&lt;/li&gt;
&lt;li&gt;Cloud management&lt;/li&gt;
&lt;li&gt;Scripting&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-direction-should-you-go-in"&gt;
  &lt;/a&gt;
  What Direction Should You Go In?
&lt;/h2&gt;

&lt;p&gt;The question of which direction you should go in is one that no one can answer for you, but there's a pretty easy way to find out which.&lt;/p&gt;

&lt;p&gt;The answer is simple - don't put too much emphasis on the title when you're searching.&lt;/p&gt;

&lt;p&gt;What you want to do is look at the job description. Why? Because the hiring world is extremely confused right now about what an SRE or a DevOps Engineer actually is. There's no definition that everyone is following, which is why you'll see job descriptions that are completely different from one another.&lt;/p&gt;

&lt;p&gt;What you should really be doing is look at the job description and see if it lines up with what you want to be doing and what will be beneficial for your career. If the title is DevOps, cool. If the title is SRE, cool. It doesn't really matter because when you're looking for a new job or to go out on your own and consult, no one really cares about the title you had. They care about the job responsibilities you've done.&lt;/p&gt;

</description>
      <category>sre</category>
      <category>devops</category>
      <category>engineering</category>
      <category>leadership</category>
    </item>
    <item>
      <title>A Nice Developer Joke For Today</title>
      <author>Daily Developer Jokes</author>
      <pubDate>Tue, 21 Sep 2021 12:00:03 +0000</pubDate>
      <link>https://dev.to/dailydeveloperjokes/a-nice-developer-joke-for-today-351j</link>
      <guid>https://dev.to/dailydeveloperjokes/a-nice-developer-joke-for-today-351j</guid>
      <description>&lt;p&gt;Hi there! Here's today's Daily Developer Joke. We hope you enjoy it; it's a good one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z3TrGczw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://private.xtrp.io/projects/DailyDeveloperJokes/public_image_server/images/5e12596739999.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z3TrGczw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://private.xtrp.io/projects/DailyDeveloperJokes/public_image_server/images/5e12596739999.png" alt="Joke Image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;For more jokes, and to submit your own joke to get featured, check out the &lt;a href="https://dailydeveloperjokes.github.io/"&gt;Daily Developer Jokes Website&lt;/a&gt;. We're also open sourced, so feel free to view &lt;a href="https://github.com/dailydeveloperjokes"&gt;our GitHub Profile&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#leave-this-post-a-if-you-liked-todays-joke-and-stay-tuned-for-tomorrows-joke-too"&gt;
  &lt;/a&gt;
  Leave this post a ❤️ if you liked today's joke, and stay tuned for tomorrow's joke too!
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;This joke comes from &lt;a href="https://github.com/wesbos/dad-jokes"&gt;Dad-Jokes GitHub Repo by Wes Bos&lt;/a&gt; (thank you!), whose owner has given me permission to use this joke with credit.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>jokes</category>
      <category>dailydeveloperjokes</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>How to add days to date?</title>
      <author>101samovar</author>
      <pubDate>Tue, 21 Sep 2021 11:50:30 +0000</pubDate>
      <link>https://dev.to/101samovar/how-to-add-days-to-date-363i</link>
      <guid>https://dev.to/101samovar/how-to-add-days-to-date-363i</guid>
      <description>&lt;p&gt;Let’s define a function addDays.&lt;br&gt;
The function has two parameters: date to be modified and number of days to add.&lt;br&gt;
We use  the setDate function to set the new date.&lt;br&gt;
And we use the getDate function to get the current date value.&lt;br&gt;
So we just add the number of days to the current date.&lt;br&gt;
Here it is.&lt;br&gt;
We got a date a week ago.&lt;/p&gt;




&lt;p&gt;I hope you found this article useful, if you need any help please let me know in the comment section.&lt;/p&gt;

&lt;p&gt;👋 See you next time. Have a nice day!&lt;/p&gt;

&lt;p&gt;Subscribe to our channel:&lt;br&gt;
&lt;a href="https://www.youtube.com/c/Samovar101"&gt;https://www.youtube.com/c/Samovar101&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Profile Card challenge - frontendmentor.io</title>
      <author>lismaria</author>
      <pubDate>Tue, 21 Sep 2021 11:03:58 +0000</pubDate>
      <link>https://dev.to/lismaria/profile-card-challenge-frontendmentor-io-3d51</link>
      <guid>https://dev.to/lismaria/profile-card-challenge-frontendmentor-io-3d51</guid>
      <description>&lt;p&gt;Hello my Beautiful Friends on the Internet!🙋🏻‍♀️&lt;/p&gt;

&lt;p&gt;This is a solution to the &lt;a href="https://www.frontendmentor.io/challenges/profile-card-component-cfArpWshJ"&gt;Profile card component challenge on Frontend Mentor&lt;/a&gt;. Frontend Mentor challenges help you improve your coding skills by building realistic projects. &lt;/p&gt;

&lt;p&gt;This is a perfect challenge to test your layout skills. The card layout doesn't shift, so it's also great for those that haven't dived into responsive websites yet!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#overview"&gt;Overview&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-challenge"&gt;The challenge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#screenshot"&gt;Screenshot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#links"&gt;Links&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;a href="#my-process"&gt;My process&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#built-with"&gt;Built with&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-i-learned"&gt;What I learned&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#useful-resources"&gt;Useful resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;a href="#css-explanation"&gt;CSS explanation&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#variables"&gt;Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#background"&gt;Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#card"&gt;Card&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#animation"&gt;Animation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#author"&gt;Author&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#the-challenge"&gt;
  &lt;/a&gt;
  The challenge
&lt;/h3&gt;

&lt;p&gt;The challenge is to build out this profile card component and get it looking as close to the design as possible. I am free to use any tools I like to complete the challenge. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#screenshot"&gt;
  &lt;/a&gt;
  Screenshot
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZKL-Fs8g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qcz52jp8rp1oqodpkxia.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZKL-Fs8g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qcz52jp8rp1oqodpkxia.jpg" alt="Desktop Interface"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eFmDLGzo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hq7e1zync9rvo7c3lm8m.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eFmDLGzo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hq7e1zync9rvo7c3lm8m.jpg" alt="Mobile Interface"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Solution URL: &lt;a href="https://github.com/lismaria/FM1-ProfileCardComponent"&gt;solution-link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Live Site URL: &lt;a href="https://lismaria.github.io/FM1-ProfileCardComponent/"&gt;site-link&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#my-process"&gt;
  &lt;/a&gt;
  My process
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#built-with"&gt;
  &lt;/a&gt;
  Built with
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Semantic HTML5 markup&lt;/li&gt;
&lt;li&gt;CSS custom properties&lt;/li&gt;
&lt;li&gt;CSS Flexbox&lt;/li&gt;
&lt;li&gt;CSS Grid&lt;/li&gt;
&lt;li&gt;CSS Animations&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-i-learned"&gt;
  &lt;/a&gt;
  What I learned
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#its-always-a-good-idea-to-sketch"&gt;
  &lt;/a&gt;
  It's always a good idea to sketch 🥇
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Before starting off with the CSS, I sketched the design pretty roughly using pen and paper. Then I drew lines so as to get a better understanding of which layout algorithm might suit the best. I came up with 2 approaches. There came a point where I literally got stuck with my first approach so I knew which part of the second approach is gonna help me now. There are endless ways in which sketching the design will come handy. You should definitely give it a go!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#heading-levels-should-only-increase-by-one"&gt;
  &lt;/a&gt;
  Heading levels should only increase by one
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;A heading level following an &lt;code&gt;h1&lt;/code&gt; element should be an &lt;code&gt;h2&lt;/code&gt; element, not an &lt;code&gt;h3&lt;/code&gt; element. Why this matters? Well for sighted users, the different font sizes distinguish the hierarchy for us. The same is not helpful for screen readers. The screen reader identifies a  properly marked-up header hence applying the &lt;code&gt;h1&lt;/code&gt; to &lt;code&gt;h6&lt;/code&gt; hierarchically makes it easier to navigate.&lt;a href="https://dequeuniversity.com/rules/axe/4.2/heading-order"&gt;click here to know more&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#document-should-have-one-main-landmark"&gt;
  &lt;/a&gt;
  Document should have one main landmark
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;In HTML5, you should use elements like &lt;code&gt;header&lt;/code&gt;, &lt;code&gt;nav&lt;/code&gt;, &lt;code&gt;main&lt;/code&gt;, and &lt;code&gt;footer&lt;/code&gt;. Once added, screen reader users can navigate to a section based on its ARIA landmark or HTML element. &lt;a href="https://dequeuniversity.com/rules/axe/4.2/region"&gt;click here to know more&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#css-naming-convention-exists"&gt;
  &lt;/a&gt;
  CSS naming convention exists!
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;BEM which stands for Block, Element, and Modifier is a CSS naming convention for writing cleaner and more readable CSS classes. Though I might not have literally used this, it's okay for the first time. &lt;a href="https://codeburst.io/understanding-css-bem-naming-convention-a8cca116d252"&gt;click here to know more&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Blocks are named as standard CSS classes */&lt;/span&gt;
&lt;span class="nc"&gt;.block&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Elements declared with 2 underscores, after block */&lt;/span&gt;
&lt;span class="nc"&gt;.block__element&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Modifiers declared with 2 dashes, after block or element */&lt;/span&gt;
&lt;span class="nc"&gt;.block--modifier&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Block, element and modifier together */&lt;/span&gt;
&lt;span class="nc"&gt;.block__element--modifier&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#useful-resources"&gt;
  &lt;/a&gt;
  Useful resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://css-tricks.com/almanac/properties/b/background-position/"&gt;Background-Position&lt;/a&gt; - One of the most challenging part was to place the circles in the background. This post was life saver! Couldn't recommend enough.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=dHbYcAncAgQ"&gt;Pixel vs rem&lt;/a&gt; - This is an amazing YouTube video from &lt;em&gt;Coder Coder&lt;/em&gt; which helped me finally understand rem unit. I'd recommend it to anyone still learning this concept.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=x7tLPhnA06w&amp;amp;list=PL4cUxeGkcC9itC4TxYMzFCfveyutyPOCY"&gt;CSS Grid Tutorial&lt;/a&gt; &amp;amp; &lt;a href="https://www.youtube.com/watch?v=Y8zMYaD1bz0&amp;amp;list=PL4cUxeGkcC9i3FXJSUfmsNOx8E7u6UuhG"&gt;CSS Flexbox Tutorial&lt;/a&gt; - &lt;em&gt;The Net Ninja&lt;/em&gt; is my go to channel for almost any web development related stuff. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=oZPR_78wCnY"&gt;CSS Variables&lt;/a&gt; - &lt;em&gt;Web Dev Simplified&lt;/em&gt; is another great channel. He simplifies every concept and learning is so beginner level. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://codeburst.io/understanding-css-bem-naming-convention-a8cca116d252"&gt;BEM: Block-Element-Modifier&lt;/a&gt; - I was unaware of this convention. Tried for the first time!&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=YszONjKpgg4"&gt;CSS Animations&lt;/a&gt; - Wanna start of with CSS animations? Check this out. &lt;a href="https://www.youtube.com/watch?v=jgw82b5Y2MU&amp;amp;list=PL4cUxeGkcC9iGYgmEd2dm3zAKzyCGDtM5"&gt;If you have time follow this playlist&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#css-explanation"&gt;
  &lt;/a&gt;
  CSS explanation
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h3&gt;

&lt;p&gt;Also known as &lt;em&gt;CSS Custom Properties&lt;/em&gt; or &lt;em&gt;cascading variables&lt;/em&gt; contain specific values that are to be reused throughout the document.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Property name is begins with double hyphen &lt;code&gt;--&lt;/code&gt; and the property value can be any css valid value. Eg: &lt;code&gt;--main-bg: #c4c4c4;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;We use the custom property by specifying the name inside &lt;code&gt;var()&lt;/code&gt; function instead of regular property value. Eg: &lt;code&gt;background-color: var(--main-bg)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;It's a common best practice to define custom properties on the &lt;code&gt;:root&lt;/code&gt; &lt;em&gt;pseudo-class&lt;/em&gt;. This enables us to apply it globally across the HTML doc.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;/* Primary */&lt;/span&gt;
    &lt;span class="py"&gt;--cyanD&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;185&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;75%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;39%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="py"&gt;--Dblue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;229&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;23%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;23%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="py"&gt;--Gblue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;227&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;10%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;46%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c"&gt;/* Neutral */&lt;/span&gt;
    &lt;span class="py"&gt;--Dgray&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;59%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;62.5%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* 1 rem = 10px */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You must have notice I have set the font-size to 62.5%. Well what this exactly means is, 62.5% of the default font-size of the browser which is usually 16px. This gives me 10px which makes it easier to convert pixel into rems. Before 1rem = 16px and now 1rem = 10px.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I have set the body dimensions to 100% viewport width and height and overflow to hidden so that it hides of the stuff that don't fit in (else a scrollbar might appear).&lt;/li&gt;
&lt;li&gt;I have applied &lt;em&gt;CSS grid&lt;/em&gt; on this element so as to center the card as this is its parent.&lt;/li&gt;
&lt;li&gt;I have commented out the background image and position of the circles as I want them to animate in so substituted the values there.

&lt;ul&gt;
&lt;li&gt;The url of both the circles is comma-separated and put in the value of &lt;code&gt;background-image&lt;/code&gt; property. This will place both the circle as the background image.&lt;/li&gt;
&lt;li&gt;Similarly for the &lt;code&gt;background-position&lt;/code&gt; I have put the two values which will respectively position the circles.

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;top -65vh right 50vw&lt;/code&gt; will place the top circle 35% of viewport height from the bottom and place it 50% of viewport width from the right.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;top 50vh left 50vw;&lt;/code&gt; will place the bottom circle 50% from the top and 50% from the left.
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2s&lt;/span&gt; &lt;span class="n"&gt;circles&lt;/span&gt; &lt;span class="n"&gt;ease-out&lt;/span&gt; &lt;span class="n"&gt;forwards&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--cyanD&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c"&gt;/* background-image: url(/images/bg-pattern-top.svg), url(/images/bg-pattern-bottom.svg); */&lt;/span&gt;
    &lt;span class="c"&gt;/* background-position: top -65vh right 50vw, top 50vh left 50vw; */&lt;/span&gt;
    &lt;span class="nl"&gt;background-repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;no-repeat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;no-repeat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;place-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#card"&gt;
  &lt;/a&gt;
  Card
&lt;/h3&gt;

&lt;p&gt;The card has a background-color white and a border radius of around 15px. The dimension of the card is roughly 350 x 390 px. It also has a box-shadow.&lt;br&gt;
I decided to use &lt;strong&gt;CSS Grid layout&lt;/strong&gt; to position the child elements. To start of I created 5 rows of equal height. &lt;code&gt;grid-template-rows: repeat(5,1fr);&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.card&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;35rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;max-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;39rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="m"&gt;-20px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;94&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The blue background design extends from row 1 to row 3. &lt;code&gt;grid-row: 1/3;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.card__bg&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(images/bg-pattern-card.svg)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To position the profile picture, I initially placed it at row 3 &lt;code&gt;grid-row: 3/4;&lt;/code&gt;. Then I did a margin top of -5rem which eventually aligned the picture vertically as I wanted. Since &lt;code&gt;img&lt;/code&gt; is an inline element, I used &lt;code&gt;text-align: center;&lt;/code&gt; to align the picture horizontally centered.&lt;br&gt;
To make the square picture circled, I gave it a &lt;code&gt;border-radius:&lt;/code&gt; of &lt;code&gt;50%&lt;/code&gt; and colored the border white.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.card__img&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.card__img&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The remaining rows are divided into 2 parts: primary(pri) and secondary(sec).&lt;br&gt;
The first section consists of the name, age and place. This is placed in row 5 &lt;code&gt;grid-row: 4/5;&lt;/code&gt; and styled according to the design.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.card__pri&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.card__pri&lt;/span&gt; &lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The second part consist of the rest of the details. This is placed in row 5 &lt;code&gt;grid-row: 5;&lt;/code&gt;. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now I am using &lt;strong&gt;CSS Flexbox&lt;/strong&gt; to position the contents in this row. There are 3 sections and I wanted them spaced out evenly, hence i used &lt;code&gt;justify-content: space-evenly;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Now within each section, I am again using flexbox to align items to the center vertically and horizontally.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.card__sec&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-evenly&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--Dgray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.card__sec&lt;/span&gt; &lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This part of the code was new to me. In this code we are selecting every element that is child to &lt;code&gt;.card__sec section&lt;/code&gt; and styling it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.card__sec&lt;/span&gt; &lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#animation"&gt;
  &lt;/a&gt;
  Animation
&lt;/h3&gt;

&lt;p&gt;Coming to the animation part, I wanted the circles to float into the page on load. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;So at the start i.e., at &lt;code&gt;0%&lt;/code&gt; the opacity will be 0 which means that the circles wont be visible. I have set the position of circles in such a way that they are out of the main screen.&lt;/li&gt;
&lt;li&gt;At the end i.e., at &lt;code&gt;100%&lt;/code&gt; the opacity will be 1 and the circles will be clearly visible. This time the circles are positioned at the desired location.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;circles&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;top&lt;/span&gt; &lt;span class="m"&gt;-100vh&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;top&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(images/bg-pattern-top.svg)&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sx"&gt;url(./images/bg-pattern-bottom.svg)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;top&lt;/span&gt; &lt;span class="m"&gt;-65vh&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt; &lt;span class="m"&gt;50vw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;top&lt;/span&gt; &lt;span class="m"&gt;50vh&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt; &lt;span class="m"&gt;50vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;     
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each animation needs to be defined with the &lt;code&gt;@keyframes&lt;/code&gt; at-rule which is then called with the &lt;code&gt;animation&lt;/code&gt; property.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I have set the &lt;code&gt;animation&lt;/code&gt; property on the &lt;code&gt;body&lt;/code&gt; element. 

&lt;ul&gt;
&lt;li&gt;I want the total duration of the animation to be &lt;code&gt;2s&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;My &lt;code&gt;animation-name&lt;/code&gt; is &lt;code&gt;circles&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;The &lt;code&gt;animation-timing-function&lt;/code&gt; is set to &lt;code&gt;ease-out&lt;/code&gt;. This is used to set how you want the animation to progress. Ease-out will make the circles load quickly and then slows down the animation as it continues.&lt;/li&gt;
&lt;li&gt;On setting the &lt;code&gt;animation-fill-mode&lt;/code&gt; to &lt;code&gt;forwards&lt;/code&gt; the circle will retain the computed values set by the last keyframe ( &lt;code&gt;100%&lt;/code&gt; ) encountered during execution.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here I have used the &lt;strong&gt;animation shorthand notation&lt;/strong&gt; .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2s&lt;/span&gt; &lt;span class="n"&gt;circles&lt;/span&gt; &lt;span class="n"&gt;ease-out&lt;/span&gt; &lt;span class="n"&gt;forwards&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#author"&gt;
  &lt;/a&gt;
  Author 🦸🏻‍♀️
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;GitHub - &lt;a href="https://github.com/lismaria"&gt;@lismaria&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Frontend Mentor - &lt;a href="https://www.frontendmentor.io/profile/lismaria"&gt;@lismaria&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Reach me out on &lt;a href="https://www.linkedin.com/in/lismariasaju/"&gt;LinkedIn&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#-raw-h-a-p-p-y-c-o-d-i-n-g-endraw-"&gt;
  &lt;/a&gt;
  &lt;em&gt;&lt;code&gt;H A P P Y   C O D I N G👩🏻‍💻👨🏻‍💻&lt;/code&gt;&lt;/em&gt;
&lt;/h2&gt;

</description>
      <category>css</category>
      <category>codenewbie</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Git and Github: The Complete Guides - Chapter 5</title>
      <author>Goran Kortjie</author>
      <pubDate>Tue, 21 Sep 2021 10:49:37 +0000</pubDate>
      <link>https://dev.to/ifierygod/git-and-github-the-complete-guides-chapter-5-3iea</link>
      <guid>https://dev.to/ifierygod/git-and-github-the-complete-guides-chapter-5-3iea</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HuxOzLBk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jomdxhgflzazcd9rjani.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HuxOzLBk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jomdxhgflzazcd9rjani.png" alt="goran-how-u"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are now able to create different branches in the local repository as well as different branches on our remote repository (GitHub). In the real world when you create different branches and work on them, eventually you need to combine them with the master branch. This process is called &lt;strong&gt;Merging&lt;/strong&gt; branches.&lt;/p&gt;

&lt;p&gt;We will be discussing how to merge branches, the different types of merging and also some of the conflicts that might occur when merging the branches.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here we are going to cover:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Git Merge (fast forward)&lt;/li&gt;
&lt;li&gt;Git Merge (3-way-merge)&lt;/li&gt;
&lt;li&gt;Merge Conflict&lt;/li&gt;
&lt;li&gt;Git Rebase&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xr_RPySg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pp9uxa5rm3bp3bj7t373.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xr_RPySg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pp9uxa5rm3bp3bj7t373.gif" alt="Altbext"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#git-merge-fast-forward"&gt;
  &lt;/a&gt;
  Git Merge (fast forward)
&lt;/h2&gt;

&lt;p&gt;Firstly, lets go to our local repo and see which branches we have. Then lets look at the history of our commits so we know where we are. Finally lets create and switch into a new branch, lets call it &lt;strong&gt;&lt;em&gt;playground&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;After creating and switching into our new branch lets modify the style.css file and save the changes. Now we can &lt;strong&gt;git add&lt;/strong&gt; these modifications to the staging area and finally make our &lt;strong&gt;git commit&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#did-you-know"&gt;
  &lt;/a&gt;
  Did you know?
&lt;/h4&gt;

&lt;p&gt;There is an easier way to &lt;code&gt;git add&lt;/code&gt; and then &lt;code&gt;git commit&lt;/code&gt; our file. This chapter is all about merging so it's appropriate to merge these two commands we use so frequently.&lt;/p&gt;

&lt;p&gt;We can use the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit -am
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command is followed by the commit message. Now we are adding our file to the staging area and making the commit simultaneously!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;This is a shorter way&lt;/strong&gt;, but just remember that this command only works for modified and deleted files. If you have new files which are not tracked, this command &lt;strong&gt;will not work!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--meHti_ms--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jk3i5olmpraw15ccjvdk.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--meHti_ms--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jk3i5olmpraw15ccjvdk.gif" alt="git-merge-1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can make another commit for good measure. We can modify the style.css file again and this time change the color of the paragraph and save. Finally add and commit our changes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H7ZrT4d3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xfm3yzgx9mee8zmj1nkn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H7ZrT4d3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xfm3yzgx9mee8zmj1nkn.gif" alt="got-merge-2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see the &lt;strong&gt;playground&lt;/strong&gt; branch is now two commits ahead of the &lt;strong&gt;master&lt;/strong&gt; branch. So now lets say we are happy with our changes and we want to merge those two branches. At first we need to switch to the &lt;strong&gt;master&lt;/strong&gt; branch.&lt;/p&gt;

&lt;p&gt;We will see our &lt;strong&gt;master&lt;/strong&gt; branch does not have the changes we made on the &lt;strong&gt;playground&lt;/strong&gt; branch and we can confirm this by checking the history of our commits. You will see that the two commits we made are not in the &lt;strong&gt;master&lt;/strong&gt; branch commit history.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0lNoPBja--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3g3fj4d05t8qf6yqvqh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0lNoPBja--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3g3fj4d05t8qf6yqvqh.gif" alt="git-changes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To merge these two branches we need to run the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git merge
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command is followed by the name of the branch you want to merge with the &lt;strong&gt;master&lt;/strong&gt;. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git merge playground
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ODuYBkAF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5301ojc1lmkhy917e6be.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ODuYBkAF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5301ojc1lmkhy917e6be.gif" alt="git-merge-success"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This command has now merged our two branches and if we look at our logs &lt;code&gt;git log --oneline&lt;/code&gt;. We will see that &lt;strong&gt;HEAD&lt;/strong&gt; now points to both branches, &lt;strong&gt;master&lt;/strong&gt; and &lt;strong&gt;playground&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Awesome stuff👌&lt;/p&gt;

&lt;p&gt;We have successfully combined two different branches and this type of merge is really basic and it is called &lt;u&gt;fast forward&lt;/u&gt; merge.&lt;/p&gt;

&lt;p&gt;In the case of a &lt;u&gt;fast forward&lt;/u&gt; merge, there is a linear path from the &lt;strong&gt;master&lt;/strong&gt; branch to the second branch, which in this case is &lt;strong&gt;playground&lt;/strong&gt;. The &lt;strong&gt;playground&lt;/strong&gt; branch is created based on the last commit of the &lt;strong&gt;master&lt;/strong&gt; branch. Meaning while we were working on the &lt;strong&gt;playground&lt;/strong&gt; branch, no commits were being made to the &lt;strong&gt;master&lt;/strong&gt; branch.&lt;/p&gt;

&lt;p&gt;When we use the &lt;code&gt;git merge&lt;/code&gt; command, all the commits from the &lt;strong&gt;playground&lt;/strong&gt; branch were added after the &lt;em&gt;&lt;strong&gt;base commit&lt;/strong&gt;&lt;/em&gt;,&lt;u&gt; which is the last commit of the master branch &lt;/u&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cdlYDIWO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m01ln1w0l9sp8n40fhjs.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cdlYDIWO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m01ln1w0l9sp8n40fhjs.gif" alt="git-merge"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Therefore any changes made to the &lt;strong&gt;playground&lt;/strong&gt; branch will overwrite the old state of the &lt;strong&gt;master&lt;/strong&gt; branch and there won't be any conflicts.&lt;/p&gt;

&lt;p&gt;To prove this, lets switch back to the &lt;strong&gt;playground&lt;/strong&gt; branch. Make a modification to the style.css file and save it. Then make a new commit. We can then go back to the &lt;strong&gt;master&lt;/strong&gt; branch and run &lt;code&gt;git merge playground&lt;/code&gt; again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---TgvNHGF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ayxws85lfy5zp5audcqr.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---TgvNHGF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ayxws85lfy5zp5audcqr.gif" alt="git-merge-again"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That is the way we can merge two branches in a &lt;u&gt;fast forward&lt;/u&gt; way. There is another type of merge which we are going to discuss next.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#git-merge-3waymerge"&gt;
  &lt;/a&gt;
  Git Merge (3-way-merge)
&lt;/h2&gt;

&lt;p&gt;The other type of merge we can perform is called the &lt;u&gt;three-way merge&lt;/u&gt;. This kind of merge occurs when we create a new branch, work on that branch...Then simultaneously someone else makes commits on the &lt;strong&gt;master&lt;/strong&gt; branch before we merged the two.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vaaBF83N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ct2vubea8p9akxzcrps6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vaaBF83N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ct2vubea8p9akxzcrps6.png" alt="git-merge-3-way"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Actually this is pretty common and knowing how to work with this type of problem is &lt;strong&gt;essential&lt;/strong&gt;. So lets simulate this kind of scenario by making two changes in our script.js file in our &lt;strong&gt;playground&lt;/strong&gt; branch, finally adding and commiting the changes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z79Fb5VZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0cfe6xrxbldn9g02o466.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z79Fb5VZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0cfe6xrxbldn9g02o466.gif" alt="git-merge-playground"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Switch to the &lt;strong&gt;master&lt;/strong&gt; branch, make a different change in the index.html file and then add and commit the change.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5jGcxChr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/letdsf6caz2mfzqw4jm8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5jGcxChr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/letdsf6caz2mfzqw4jm8.gif" alt="git-merge-master"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Don't forget to log the history of both branches once you've made your changes to see the differences.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now suppose we want to merge these two branches. In this case we will no longer have a &lt;u&gt;fast forward&lt;/u&gt; merge because we've been working on both branches simultaneously. So lets go ahead and &lt;strong&gt;merge&lt;/strong&gt; these two branches.&lt;/p&gt;

&lt;p&gt;Run the command &lt;code&gt;git merge playground&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QvAFes4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xkcvzbi9z2nmzk0ie6dk.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QvAFes4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xkcvzbi9z2nmzk0ie6dk.gif" alt="git-3-way-merge"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see we are greeted with a new file in the editor, also Git is hinting to us that it is waiting for us to close the file in the editor. We don't need to do anything in this file for now, so we can quit out of it and close.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KbIVxHeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iuifqzq7du2nq48hm0g5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KbIVxHeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iuifqzq7du2nq48hm0g5.gif" alt="git-3-way-merge"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can see our merge performed successfully, however on closer inspection, we can see it is a different type of merge which is called &lt;u&gt;three-way&lt;/u&gt; merge. After the merge it says &lt;strong&gt;&lt;em&gt;merge made by 'recursive' strategy&lt;/em&gt;&lt;/strong&gt; which is the default strategy of a &lt;u&gt;three-way&lt;/u&gt; merge.&lt;/p&gt;

&lt;p&gt;Now all the changes we made on the &lt;strong&gt;playground&lt;/strong&gt; branch is available on the &lt;strong&gt;master&lt;/strong&gt; branch as well, unlike the &lt;u&gt;fast forward&lt;/u&gt; approach &lt;strong&gt;&lt;em&gt;HEAD&lt;/em&gt;&lt;/strong&gt; points to &lt;strong&gt;master&lt;/strong&gt; and not to both branches. &lt;/p&gt;

&lt;p&gt;That is why we see only &lt;strong&gt;master&lt;/strong&gt; next to the &lt;strong&gt;HEAD&lt;/strong&gt; pointer and not both branches like we did before.&lt;/p&gt;

&lt;p&gt;If we switch to the &lt;strong&gt;playground&lt;/strong&gt; branch we will see the index.html file was not modified in our commit history and we will find only the commits we made on this branch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YdpN3_t2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9t0xgva57q9bwywxnh4f.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YdpN3_t2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9t0xgva57q9bwywxnh4f.gif" alt="git-merge-3-way"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works?
&lt;/h4&gt;

&lt;p&gt;When we create a new branch, make some changes/commits to that branch, then simultaneously someone else makes commits to the &lt;strong&gt;master&lt;/strong&gt; branch. It means we no longer have &lt;u&gt;fast forward&lt;/u&gt; merge, instead we now have a merge type called &lt;u&gt;three-way&lt;/u&gt; merge.&lt;/p&gt;

&lt;p&gt;In this case Git will help us by checking for any conflicts in the file because people may work on the same files. If all is good then those changes will be merged to master and the commits will be place in a sequence in history.&lt;/p&gt;

&lt;p&gt;This is the case when a &lt;u&gt;three-way&lt;/u&gt; merge occurs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MMFE_dpa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dcbruk47kx6pa8hibivq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MMFE_dpa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dcbruk47kx6pa8hibivq.gif" alt="git-merge-3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Seems like Git solves our issues for us but we can still run into some &lt;strong&gt;merge conflicts&lt;/strong&gt; dispite Git's best efforts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#merge-conflict"&gt;
  &lt;/a&gt;
  Merge Conflict
&lt;/h2&gt;

&lt;p&gt;Sometimes multiple developers may try to edit the same content. For example, if one developer is trying to edit code that the second developer is editing. Then merge conflicts can occur.&lt;/p&gt;

&lt;p&gt;Merging and conflicts are a common part of Git, in other version control systems it is slightly harder to deal with merge conflicts but Git make this easy for us. We can simulate how a merge conflict may occur and how we can deal with them.&lt;/p&gt;

&lt;p&gt;Firstly, lets go to our project and see all our branches. Currently we have two branches, namely &lt;strong&gt;master&lt;/strong&gt; and &lt;strong&gt;playground&lt;/strong&gt;. We are working on the &lt;strong&gt;playground&lt;/strong&gt; as indicated by the green color. Lets say we want to modify the variable in the script.js file in our &lt;strong&gt;playground&lt;/strong&gt; branch. We then save our change and make a commit.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ceHCgP9o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j8em3cr3989u6hnhrsir.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ceHCgP9o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j8em3cr3989u6hnhrsir.gif" alt="git-branch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now lets say someone else is editing the same script.js file on the same line but he/she is working from the &lt;strong&gt;master&lt;/strong&gt; branch. We can simulate this scenario like we did before. &lt;/p&gt;

&lt;p&gt;We will first &lt;em&gt;switch&lt;/em&gt; to the &lt;strong&gt;master&lt;/strong&gt; branch, change the name of the variable in the script.js file and save, we will commit this change to history and finally log the history.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0NHyEULg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tt8edrzjc56fybsiz5l9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0NHyEULg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tt8edrzjc56fybsiz5l9.gif" alt="git-branch-1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Suppose we need to merge these two branches, when we run the command &lt;code&gt;git merge playground&lt;/code&gt; Git will tell us that there has been a &lt;strong&gt;merge conflict&lt;/strong&gt;. This is because we have been working on the same line in different branches, so Git was not able to decide which line/version it needs to keep.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Therefore a conflict has arised.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As you can see both versions are present in the script.js file as well as some code that Git inserted.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vqn06HYL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9n6gu5hfylqbfs46b9wa.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vqn06HYL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9n6gu5hfylqbfs46b9wa.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To resolve this problem, we first need to remove the code Git has added and then we need to decide which version of the code we want to keep.&lt;/p&gt;

&lt;p&gt;After that we need to add the file to the staging area. Like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we need to make a commit, but in this case we just need to run the command without any message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now a new file will open in the editor, like in the case of a &lt;u&gt;three-way&lt;/u&gt; merge. Here we can change the message of the commit if we want. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vqn06HYL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9n6gu5hfylqbfs46b9wa.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vqn06HYL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9n6gu5hfylqbfs46b9wa.gif" alt="git-branch-commit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#when-we-close-the-file-the-new-commit-will-be-made-the-branches-will-be-merged-and-the-conflict-will-be-resolved"&gt;
  &lt;/a&gt;
  When we close the file, the new commit will be made. The branches will be merged and the conflict will be resolved.
&lt;/h4&gt;

&lt;p&gt;If we run the history we will see &lt;strong&gt;merge branch playground&lt;/strong&gt; which means we have merged the branches successfully.&lt;/p&gt;

&lt;p&gt;Awesome😎!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#now-lets-see-how-we-can-stop-a-merge-conflict"&gt;
  &lt;/a&gt;
  Now lets see how we can stop a &lt;em&gt;merge conflict&lt;/em&gt;.
&lt;/h4&gt;

&lt;p&gt;As we did before, we will be simulating two developers making a change on the same line of the same file, but just from different branches. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5qFkP80---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4bds3oqhvwm7uae54e0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5qFkP80---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4bds3oqhvwm7uae54e0.gif" alt="git-commit-branch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will again use the script.js file and make some changes and commit them to history. Finally after editing the script.js file on both branches we will run the command &lt;code&gt;git merge playground&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8G1YmxXc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0dms9dcj44vvwdhb7m0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8G1YmxXc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0dms9dcj44vvwdhb7m0.gif" alt="git-branch-merge-abort"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now suppose we want to stop merging. To do this we need to run the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git merge --abort
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#git-will-stop-the-merge-from-happening-there-wont-be-a-merging-conflict-anymore-and-both-changes-we-made-on-the-two-branches-will-be-kept"&gt;
  &lt;/a&gt;
  Git will stop the merge from happening, there won't be a merging conflict anymore and both changes we made on the two branches will be kept.
&lt;/h4&gt;

&lt;p&gt;In the real world, these types of conflict appear quite frequently but thanks to Git they are easy to deal with.&lt;/p&gt;

&lt;p&gt;Before carrying on we can resolve the merge conflict we just had.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dnKEsTF0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2szlv49ofassmvckcrxk.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dnKEsTF0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2szlv49ofassmvckcrxk.gif" alt="git-merge-success"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#git-rebase"&gt;
  &lt;/a&gt;
  Git Rebase
&lt;/h2&gt;

&lt;p&gt;We are now familiar with the &lt;strong&gt;Git Merging&lt;/strong&gt; and how to resolve merge conflicts, it is now time for us to discuss another feature of Git which is called &lt;strong&gt;Git Rebase&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cIPIVkft--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i6w473w7qf9nx1ko9mr3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cIPIVkft--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i6w473w7qf9nx1ko9mr3.gif" alt="git-rebasing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Suppose we have a couple of commits on the &lt;strong&gt;master&lt;/strong&gt; branch, then we create a new branch and add some commits to it. Then after that we create a new commit on the &lt;strong&gt;master&lt;/strong&gt; branch.&lt;/p&gt;

&lt;p&gt;In this case, by default &lt;em&gt;base commit&lt;/em&gt; is the commit from where we created a new branch. But by using &lt;strong&gt;Git Rebase&lt;/strong&gt; we are able to change the &lt;em&gt;base commit&lt;/em&gt;, essentially rebasing our branch on the newly created commit on the &lt;strong&gt;master&lt;/strong&gt; branch.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;After Rebasing, all the changes we made on the master branch will be available on the second branch as well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;In order to make things look a little cleaner, I am going to delete some of my commits by using &lt;code&gt;git reset --hard&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--102a2L4A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dtlhc1pzss1s0ikv041b.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--102a2L4A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dtlhc1pzss1s0ikv041b.gif" alt="git-reset-hard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Next I'm going to delete the playground branch and create a new branch called &lt;strong&gt;newBranch&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wWsoNpqN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t83pw7pbarkdi9tkyvqv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wWsoNpqN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t83pw7pbarkdi9tkyvqv.gif" alt="git-newBranch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When we look at the history of our commits, we see that &lt;strong&gt;HEAD&lt;/strong&gt; points to &lt;strong&gt;newBranch&lt;/strong&gt; and &lt;strong&gt;master&lt;/strong&gt;. This means that they have identical histories.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2KgQ1rIg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyp2om6zmqlzwety8egj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2KgQ1rIg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyp2om6zmqlzwety8egj.gif" alt="git-history"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lets switch back to the &lt;strong&gt;master&lt;/strong&gt; branch and make a new commit. For example, we can modify the style.css file and change the size of the h1 tag. We save and then commit this change.&lt;/p&gt;

&lt;p&gt;If we log the history again, we see that the &lt;strong&gt;master&lt;/strong&gt; branch is now 1 commit ahead of the &lt;strong&gt;newBranch&lt;/strong&gt;. This means that this new commit won't be available on the &lt;strong&gt;newBranch&lt;/strong&gt;. We can switch to the &lt;strong&gt;newBranch&lt;/strong&gt; to confirm this by running the command &lt;code&gt;git log --oneline&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GkEO7iZ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/igpwhudpxyy8jg8m8lgx.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GkEO7iZ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/igpwhudpxyy8jg8m8lgx.gif" alt="git-branching-rebase"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we want to make the last commit from the &lt;strong&gt;master&lt;/strong&gt; branch available on the &lt;strong&gt;newBranch&lt;/strong&gt; as well, we can use &lt;code&gt;git rebase&lt;/code&gt; which will allow us to rebase the &lt;strong&gt;newBranch&lt;/strong&gt; on the newly created commit which was made on the &lt;strong&gt;master&lt;/strong&gt; branch.&lt;/p&gt;

&lt;p&gt;We do this by running the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git rebase master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when we log the history, we can see &lt;strong&gt;HEAD&lt;/strong&gt; points to both branches, &lt;strong&gt;newBranch&lt;/strong&gt; and &lt;strong&gt;master&lt;/strong&gt;. It means that the last commit from the &lt;strong&gt;master&lt;/strong&gt; branch is available on the &lt;strong&gt;newBranch&lt;/strong&gt; as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y7wAbA48--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a6ze2w2s2g7fem68bsq8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y7wAbA48--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a6ze2w2s2g7fem68bsq8.gif" alt="git-rebase-newBranch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lets consider again how &lt;code&gt;git rebase&lt;/code&gt; works using a different scenario. We start by making a couple commits on the &lt;strong&gt;newBranch&lt;/strong&gt;, then we log the history of our commits.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IUffu4GV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/canwzvviq4u39snn8fh6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IUffu4GV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/canwzvviq4u39snn8fh6.gif" alt="git-rebase"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lets switch back to the &lt;strong&gt;master&lt;/strong&gt; and make one commit. When we save our change and make the commit, if we check the history we see the commits of the &lt;strong&gt;master&lt;/strong&gt; branch but not those for the &lt;strong&gt;newBranch&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;To address this we switch back to the &lt;strong&gt;newBranch&lt;/strong&gt; and &lt;em&gt;&lt;strong&gt;rebase&lt;/strong&gt;&lt;/em&gt; it to the last commit made by the &lt;strong&gt;master&lt;/strong&gt; branch. After we &lt;em&gt;&lt;strong&gt;rebase&lt;/strong&gt;&lt;/em&gt; the &lt;strong&gt;newBranch&lt;/strong&gt;, when we check the history of commits, we see the last commit made by the &lt;strong&gt;master&lt;/strong&gt; branch as well as the two commits we made on the &lt;strong&gt;newBranch&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OtKvcIm7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k75gp46wcvig622sk1ap.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OtKvcIm7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k75gp46wcvig622sk1ap.gif" alt="git-master-rebase"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now all the commits are available on the &lt;strong&gt;newBranch&lt;/strong&gt;, but if we go to the &lt;strong&gt;master&lt;/strong&gt; branch and check the history, you will find that we still have the commits we made only on the &lt;strong&gt;master&lt;/strong&gt; branch.&lt;/p&gt;

&lt;p&gt;In order to make commits on the &lt;strong&gt;newBranch&lt;/strong&gt;, available on the &lt;strong&gt;master&lt;/strong&gt; branch as well, we can &lt;strong&gt;merge&lt;/strong&gt; those branches by running the command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git merge newBranch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see the branches are merged. You may notice that instead of a &lt;u&gt;three-way&lt;/u&gt; merge, we instead have a &lt;u&gt;fast-forward&lt;/u&gt; merge. This is because we rebased the &lt;strong&gt;newBranch&lt;/strong&gt; on the last commit of the &lt;strong&gt;master&lt;/strong&gt; branch, that is why Git used the &lt;u&gt;fast-forward&lt;/u&gt; merge.&lt;/p&gt;




&lt;p&gt;That's it! I hope you enjoyed and gained something from this chapter. &lt;/p&gt;

&lt;p&gt;😃See you when I see you. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--azDwSZFB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mw5b6xu5ge5brtxbzhqw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--azDwSZFB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mw5b6xu5ge5brtxbzhqw.gif" alt="see-ya"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Get a Random Element from an Array in JavaScript</title>
      <author>Gaël Thomas</author>
      <pubDate>Tue, 21 Sep 2021 10:35:07 +0000</pubDate>
      <link>https://dev.to/gaelgthomas/get-a-random-element-from-an-array-in-javascript-3413</link>
      <guid>https://dev.to/gaelgthomas/get-a-random-element-from-an-array-in-javascript-3413</guid>
      <description>&lt;p&gt;Let's imagine that you created a giveaway application, and today is the raffle. Unfortunately, you have a list of 10 participants, but you don't know how to select randomly one of them as a winner.&lt;/p&gt;

&lt;p&gt;Don't worry! In a few minutes, you will be able to get a random element from an array in JavaScript!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-select-a-random-element-from-an-array-using-the-mathematical-functions"&gt;
  &lt;/a&gt;
  How to Select a Random Element from an Array using the Mathematical functions
&lt;/h2&gt;

&lt;p&gt;Here is the one line instruction to get a a random element from your array: &lt;code&gt;YOUR_ARRAY[Math.floor(Math.random() * YOUR_ARRAY.length)]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's break this instruction and understand what it does:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;YOUR_ARRAY&lt;/code&gt; is your array variable (in that case, the 10 participants email addresses)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;YOUR_ARRAY.length&lt;/code&gt; is an array property that returns the size of your array&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Math.random()&lt;/code&gt; is a function that returns a pseudo-random number in the range 0 to less than 1 (inclusive of 0, but not 1)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Math.floor()&lt;/code&gt; is a function that returns the largest integer less than or equal to a given number&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; As &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random"&gt;Mozilla mentions&lt;/a&gt;, &lt;code&gt;Math.random()&lt;/code&gt; does not provide cryptographically secure random numbers. It's not recommended to use them for anything related to security. Use the Web Crypto API instead, and more precisely, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues"&gt;the window.crypto.getRandomValues() method&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now you know each instruction, let me show you a step-by-step example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;participants&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test1@herewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test2@herewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test3@herewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test4@herewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test5@herewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test6@herewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test7@herewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test8@herewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test9@herewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test10@herewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output: 10&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="c1"&gt;// Output: random number between 0 or 1 (ex: 0.623242121481016)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output: random number between 0 or 1 multiplied by 10 (ex: 0.623242121481016 * 10 = 1.6905986987355703)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// Output: it takes the larger integer less than or equal to a given number (ex: Math.floor(1.6905986987355703) = 1)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you try the code above, the result will always be different because of the &lt;code&gt;Math.random()&lt;/code&gt; function.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here we are! It's time to select the giveaway winner! To do so, we will use what we learned in this article and use it with your use case:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;participants&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test1@herewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test2@herewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test3@herewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test4@herewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test5@herewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test6@herewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test7@herewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test8@herewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test9@herewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test10@herewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// 10 participants&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;winner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;winner&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output is random (launch this code to see who is the winner :D)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So! Who won the jackpot? 😉&lt;/p&gt;




&lt;p&gt;➡️ I help web developers improve their skills 💻 If you want to get more tips and resources about web programming -&amp;gt; &lt;a href="https://twitter.com/gaelgthomas/"&gt;Follow me on Twitter 🐦&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Most Frequently asked Coding Questions</title>
      <author>vindhya Hegde </author>
      <pubDate>Tue, 21 Sep 2021 10:20:29 +0000</pubDate>
      <link>https://dev.to/vindhyasadanand/most-frequently-asked-coding-questions-3kkm</link>
      <guid>https://dev.to/vindhyasadanand/most-frequently-asked-coding-questions-3kkm</guid>
      <description>&lt;p&gt;Here I will be mainly focusing on &lt;strong&gt;OnCampus technical Interviews&lt;/strong&gt; because I have attended a couple of them. and I observed these are common questions to check you know the basics of coding or not.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1to-swap-two-numbers-without-using-an-extra-variable"&gt;
  &lt;/a&gt;
  1.To swap two numbers without using an extra variable
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import java.util.*;
public class Main
{
    public static void main(String[] args)
    {
         int a,b;
         System.out.println("Enter two numbers");
         Scanner sc = new Scanner(System.in);
         a = sc.nextInt();
         b = sc.nextInt();
         //logic to swap without using extra variable.
         a = a+b;
         b = a - b;
         a = a - b;
         System.out.println("After swapping: "+ "a="+ a +"," + "b="+ b );
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#2check-given-number-is-amstrong-number-or-not"&gt;
  &lt;/a&gt;
  2.Check given number is Amstrong Number or not
&lt;/h4&gt;

&lt;p&gt;To Know more about Amstrong Number &lt;a href="https://www.geeksforgeeks.org/program-for-armstrong-numbers/"&gt;refer the link here&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import java. util.*;
public class Main
{
    public static void main(String[] args)
    {
         int a;
          Scanner sc = new Scanner(System.in);
         System.out.println("Enter the number");
         a = sc.nextInt();
         //to find length or number of digits in number
         int num = a;
         int len = 0;
         int rem;
         while(num!=0)
         {
             rem = num%10;
             num = num/10;
             len++;
         }
        //logic to check Armstrong number or Not 

        int sum = 0;
        num = a;
        while(num!=0)
        {
           rem = num%10;
           int mul= 1;
           for(int i=0;i&amp;lt;len;i++)
           {
               mul = mul * rem;
           }
           sum +=mul;
           num= num/10;
        }
        if(sum==a)
        {
            System.out.println("Amstrong Number");
        }
        else{
            System.out.println("Not an Amstrong number");
        }
    }
} 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#3to-find-out-the-fibonacci-value"&gt;
  &lt;/a&gt;
  3.To find out the Fibonacci value
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import java.util.Scanner;
public class Main
{
    public static void main(String[] args)
    {
        int n;
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the number");
        n = sc.nextInt();
        int n1 = 0 , n2 = 1;
        int res = 0;
        for(int i=2;i&amp;lt;=n;i++)
        {
            res = n1+n2;
            n1 = n2;
            n2 = res;
        }
        System.out.println("Fib of n is " + res);

    }
}


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#4to-print-fibonacci-series"&gt;
  &lt;/a&gt;
  4.to print Fibonacci series
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import java.util.Scanner;
public class Main
{
    public static void main(String[] args)
    {
        int n;
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the number");
        n = sc.nextInt();
        int n1 = 0 , n2 = 1;
        int res = 0;
        System.out.print("Fibonacci series is " + n1 + " " + n2 + " ");
        for(int i=2;i&amp;lt;=n;i++)
        {
            res = n1+n2;
            n1 = n2;
            n2 = res;
            System.out.print(res + " ");
        }


    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#5factorial-of-a-number"&gt;
  &lt;/a&gt;
  5.Factorial of a number
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import java.util.Scanner;
public class Main
{
    public static void main(String[] args)
    {
        int n;
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the number");
        n = sc.nextInt();
        int fact = 1;
        for(int i=1;i&amp;lt;=n;i++)
        {
            fact = fact * i;
        }
        System.out.println("Factorial of n is:" + fact);

    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#6lcm-and-gcd-of-a-number"&gt;
  &lt;/a&gt;
  6.LCM and GCD of a number
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import java.util.Scanner;
public class Main
{
    public static void main(String[] args)
    {
        int n1,n2;
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the number");
        n1 = sc.nextInt();
        n2 = sc.nextInt();
        int numerator,denominator;
        if(n1&amp;gt;n2)
        {
            numerator = n1;
            denominator = n2;
        }
        else{
            numerator = n2;
            denominator = n1;
        }
        int rem = numerator%denominator;
        while(rem!=0)
        {
            numerator = denominator;
            denominator = rem;
            rem = numerator%denominator;
        }
        System.out.println("HCF of numbers:" + denominator );
        int lcm = (n1*n2)/denominator;
            System.out.println("LCM of numbers:" + lcm );
    }
}


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#7program-to-check-leap-year-or-not"&gt;
  &lt;/a&gt;
  7.Program to check leap year or not
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import java.util.Scanner;
public class Main
{
    public static void main(String[] args)
    {
        int n1,n2;
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the year");
        int year = sc.nextInt();
        if(year%4==0)
        {
            //check for century year
            if(year%100==0)
            {
                //check it is divisible by 400
                if(year%400==0)
                {
                    System.out.println("Leap year");
                }
                else{
                     System.out.println("Not a leap year");
                }
            }
            else{
                System.out.println("Leap year");
            }
        }
        else{
            System.out.println("Not a leap year");
        }

    }
}



&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope this helps for your OnCampus technical Interviews.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Admin dashboard</title>
      <author>Yakubu2002</author>
      <pubDate>Tue, 21 Sep 2021 10:17:50 +0000</pubDate>
      <link>https://dev.to/yakubu2002/admit-dashboard-6fh</link>
      <guid>https://dev.to/yakubu2002/admit-dashboard-6fh</guid>
      <description>&lt;p&gt;Please i need full details about admin dashboard&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Deploy Website on AWS</title>
      <author>Sugam Agrawal</author>
      <pubDate>Tue, 21 Sep 2021 10:05:42 +0000</pubDate>
      <link>https://dev.to/sugam50/deploy-website-on-aws-4h7m</link>
      <guid>https://dev.to/sugam50/deploy-website-on-aws-4h7m</guid>
      <description>&lt;p&gt;Here we are going to learn Deployment on AWS.&lt;br&gt;
Steps:-&lt;br&gt;
    1. Go to AWS Console.&lt;br&gt;
    2. Create Account.&lt;br&gt;
    3. Select Launch EC2 instance.&lt;br&gt;
    4. Configure Network settings and SSH.&lt;br&gt;
    5. Now connect to your AWS instance.&lt;br&gt;
    6. Now in your instance Clone your website through github.&lt;br&gt;
    7. Install NVM in you AWS instance.&lt;br&gt;
    8. Now run you WebApp and assign port.&lt;br&gt;
    9. Now to run your webApp in background use below command:&lt;br&gt;
        &amp;gt; Command:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    ```
       $ forever start ./bin/www
    ```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To check runnign background webApps use:&lt;br&gt;
    &amp;gt; Command:-&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```
   $ forever list
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Congrats your webApp is hoisted Now.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>webdev</category>
      <category>devops</category>
      <category>react</category>
      <category>node</category>
    </item>
    <item>
      <title>HTML tags (for beginner)</title>
      <author>Hanna</author>
      <pubDate>Tue, 21 Sep 2021 10:03:25 +0000</pubDate>
      <link>https://dev.to/hannatylna/html-tags-for-beginner-2498</link>
      <guid>https://dev.to/hannatylna/html-tags-for-beginner-2498</guid>
      <description>&lt;p&gt;In this post, I will describe the HTML tags a bit to better remember them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kOmgBJX6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/knonnwro2rkvklviepde.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kOmgBJX6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/knonnwro2rkvklviepde.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;b&lt;/strong&gt; Defines bold text.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;strong&lt;/strong&gt; Defines important text.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&amp;lt;!--...--&amp;gt;&lt;/strong&gt; Defines a comment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&amp;lt;!DOCTYPE&amp;gt;&lt;/strong&gt; Defines the document type.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;html.../html&lt;/strong&gt; Defines the root of an HTML document.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;head.../head&lt;/strong&gt; is a container for metadata. (data about data) and is placed between the &lt;em&gt;html&lt;/em&gt; tag and the &lt;em&gt;body&lt;/em&gt; tag.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;title.../title&lt;/strong&gt; (required in every HTML document)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;style.../style&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;base&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;link&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;meta&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Define keywords for search engines.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;meta&lt;/em&gt; &lt;em&gt;name&lt;/em&gt;="keywords" &lt;em&gt;content&lt;/em&gt;="HTML, CSS, JavaScript"&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Define a description of your web page.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;meta&lt;/em&gt; &lt;em&gt;name&lt;/em&gt;="description" &lt;em&gt;content&lt;/em&gt;="Free Web tutorials for HTML and CSS"&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Define the author of a page.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;meta&lt;/em&gt; &lt;em&gt;name&lt;/em&gt;="author" &lt;em&gt;content&lt;/em&gt;="John Doe"&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Refresh document every 30 seconds.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;meta&lt;/em&gt; &lt;em&gt;http-equiv&lt;/em&gt;="refresh" &lt;em&gt;content&lt;/em&gt;="30"&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Setting the viewport to make your website look good on all devices.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;meta&lt;/em&gt; &lt;em&gt;name&lt;/em&gt;="viewport" &lt;em&gt;content&lt;/em&gt;="width=device-width, initial-scale=1.0"&lt;/p&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;script.../script&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;noscript.../noscript&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;title.../title&lt;/strong&gt; defines the title of the document. The title must be text-only, and it is shown in the browser's title bar or in the page's tab.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;body.../body&lt;/strong&gt; Defines the document's body.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;h1-h6.../h1-/h6&lt;/strong&gt; Defines HTML headings.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;div.../div&lt;/strong&gt; Defines a section in a document.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;span.../span&lt;/strong&gt; Defines a section in a document. &lt;em&gt;Span&lt;/em&gt; is an inline container used to mark up a part of a text, or a part of a document.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;!!!&lt;/strong&gt;The &lt;em&gt;span&lt;/em&gt; tag is much like the &lt;em&gt;div&lt;/em&gt; element, but &lt;em&gt;div&lt;/em&gt; is a block-level element and &lt;em&gt;span&lt;/em&gt; is an inline element.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;img&lt;/strong&gt; is used to embed an image in an HTML page &lt;br&gt;
&lt;strong&gt;img&lt;/strong&gt; &lt;strong&gt;src&lt;/strong&gt;="img_girl.jpg" &lt;strong&gt;alt&lt;/strong&gt;="Girl in a jacket" &lt;strong&gt;width&lt;/strong&gt;="500" &lt;strong&gt;height&lt;/strong&gt;="600"&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;src&lt;/em&gt; Specifies the path to the image.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;alt&lt;/em&gt; Specifies an alternate text for the image, if the image for some reason cannot be displayed.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;width/height&lt;/em&gt; Specifies the width/height of an image.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;br&lt;/strong&gt; Defines a single line break.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;hr&lt;/strong&gt; Defines a thematic change in the content.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;a&lt;/strong&gt; Defines a hyperlink.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;href&lt;/em&gt; specifies the URL of the page the link goes to;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;target&lt;/em&gt; (_blank/_parent/_self/_top) specifies where to open the linked document;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;form&lt;/strong&gt; is used to create an HTML form for user input.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;label&lt;/strong&gt; defines a label for several elements. &lt;strong&gt;Why to use:&lt;/strong&gt; 
&lt;strong&gt;1.&lt;/strong&gt;&lt;em&gt;Screen reader users (will read out loud the label, when the user is focused on the element).&lt;/em&gt;
&lt;strong&gt;2.&lt;/strong&gt;&lt;em&gt;Users who have difficulty clicking on very small regions (such as checkboxes) - because when a user clicks the text within the  element, it toggles the input (this increases the hit area).&lt;/em&gt; 

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;for&lt;/em&gt; Specifies the id of the form element the label should be bound to;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;form&lt;/em&gt; Specifies which form the label belongs to;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;input&lt;/strong&gt; specifies an input field where the user can enter data;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;type&lt;/em&gt;

&lt;ul&gt;
&lt;li&gt;"button"&lt;/li&gt;
&lt;li&gt;"checkbox"&lt;/li&gt;
&lt;li&gt;"color"&lt;/li&gt;
&lt;li&gt;"date"&lt;/li&gt;
&lt;li&gt;"datetime-local"&lt;/li&gt;
&lt;li&gt;"email"&lt;/li&gt;
&lt;li&gt;"file"&lt;/li&gt;
&lt;li&gt;"hidden"&lt;/li&gt;
&lt;li&gt;"image"&lt;/li&gt;
&lt;li&gt;"month"&lt;/li&gt;
&lt;li&gt;"number"&lt;/li&gt;
&lt;li&gt;"password"&lt;/li&gt;
&lt;li&gt;"radio"&lt;/li&gt;
&lt;li&gt;"range"&lt;/li&gt;
&lt;li&gt;"reset"&lt;/li&gt;
&lt;li&gt;"search"&lt;/li&gt;
&lt;li&gt;"submit"&lt;/li&gt;
&lt;li&gt;"tel"&lt;/li&gt;
&lt;li&gt;"text" (default value)&lt;/li&gt;
&lt;li&gt;"time"&lt;/li&gt;
&lt;li&gt;"url"&lt;/li&gt;
&lt;li&gt;"week"&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;select&lt;/strong&gt; is used to create a drop-down list

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;name&lt;/em&gt; is needed to reference the form data after the form is submitted;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;id&lt;/em&gt; is needed to associate the drop-down list with a label;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;multiple&lt;/em&gt; Specifies that multiple options can be selected at once;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;required&lt;/em&gt; Specifies that the user is required to select a value before submitting the form;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;option&lt;/strong&gt; defines an option in a select list;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;value&lt;/em&gt; Specifies the value to be sent to a server;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;selected&lt;/em&gt; Specifies that an option should be pre-selected when the page loads;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;textarea&lt;/strong&gt; defines a multi-line text input control;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;rows/cols&lt;/em&gt; is specified the size of a text area;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;name&lt;/em&gt; is needed to reference the form data after the form is submitted;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;id&lt;/em&gt; is needed to associate the text area with a label;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;placeholder&lt;/em&gt; Specifies a short hint that describes the expected value of a text area;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;button&lt;/strong&gt; defines a clickable button.

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;type&lt;/em&gt; to tell browsers what type of button it is;

&lt;ul&gt;
&lt;li&gt;"button"&lt;/li&gt;
&lt;li&gt;"reset"&lt;/li&gt;
&lt;li&gt;"submit"&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>html</category>
      <category>tags</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
