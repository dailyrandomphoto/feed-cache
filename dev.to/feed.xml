<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>My Journey with Dublin Maker Podcasts so far</title>
      <author>whykay üë©üèª‚Äçüíªüêàüè≥Ô∏è‚Äçüåà (she/her)</author>
      <pubDate>Thu, 11 Mar 2021 23:31:58 +0000</pubDate>
      <link>https://dev.to/whykay/my-journey-with-dublin-maker-podcasts-so-far-34j4</link>
      <guid>https://dev.to/whykay/my-journey-with-dublin-maker-podcasts-so-far-34j4</guid>
      <description>&lt;p&gt;It's been a year since lockdown and my job as &lt;a href="http://www.dublinmaker.ie/tag/maker-advocate/"&gt;Dublin Maker Advocate&lt;/a&gt; was challenging, mostly because my job is to engage with the community, and many a time in person and also visit where they are based. The moment of helplessness came over me as community engagement, people who are just as at a loss like myself on what to do, postponement of the Dublin Maker festival to this year... &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/vzC40E7x8ZiIMuJJur/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/vzC40E7x8ZiIMuJJur/giphy.gif" alt="virtual bump"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;...but it will be a virtual event this summer. üôå&lt;/p&gt;

&lt;p&gt;Here's a video of what the annual Dublin Maker festival is like every summer.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/EU2mSVjfTwQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/FE62vz53fueI3zDoBk/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/FE62vz53fueI3zDoBk/giphy.gif" alt="sunshine"&gt;&lt;/a&gt;&lt;br&gt;
And it has not rained in the park since their inception in 2012! &lt;/p&gt;

&lt;p&gt;So how do I/we bring Makers and community together during this period? One of the things the team talked about was creating a podcast and chatting with our Dublin Maker community. Let's bring those chats that are normally done in the tents in the park at the festival right to people's ear buds! üéß&lt;/p&gt;

&lt;p&gt;First of all, I have to say, &lt;a href="https://dev.to/whykay/series/7607"&gt;transcribing is hard&lt;/a&gt;, and due to time of turnarounds of the podcasts, I stopped transcribing, but I have started to do &lt;a href="https://www.buzzsprout.com/help/61-chapter-markers"&gt;chapter markers via Buzzsprout&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/l0Extn1wgzXyZn0J2/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/l0Extn1wgzXyZn0J2/giphy.gif" alt="turtle on its back"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So if there's someone who would like to transcribe the podcasts for us, drop us an email at &lt;a href="mailto:info@dublinmaker.ie"&gt;info@dublinmaker.ie&lt;/a&gt;, we really appreciate your help as this takes time and effort to do right.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#our-podcasts" class="anchor"&gt;
  &lt;/a&gt;
  Our podcasts
&lt;/h1&gt;

&lt;p&gt;We have 2 series now, which is amazing! Six episodes so far in each. Topics covered range from&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Craft dioramas/cosplay&lt;/li&gt;
&lt;li&gt;STEAM activities with younger audience&lt;/li&gt;
&lt;li&gt;Overcoming Covid-19's lockdown and running virtual events (including making it accessible to as many people as possible)&lt;/li&gt;
&lt;li&gt;Music (synth and guitar pedals)&lt;/li&gt;
&lt;li&gt;Hacking and doing experiments (webcams, custom controllers, LEGO!)&lt;/li&gt;
&lt;li&gt;Punk Microscopy &amp;amp; jelly fish!&lt;/li&gt;
&lt;li&gt;Working and engaging with the community&lt;/li&gt;
&lt;li&gt;Being a Maker üòä&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You get to hear all the ups and downs, tips and tricks. And it was nice to catch up with our Maker friends who normally participate and showcase what they do at Dublin Maker each year.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/Rznz8HjrKQAOQ/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Rznz8HjrKQAOQ/giphy.gif" alt="cat headphones"&gt;&lt;/a&gt;&lt;br&gt;
Production-wise, I get to re-live the chats as I edit them on &lt;a href="https://www.apple.com/ie/mac/garageband/"&gt;Garageband&lt;/a&gt; and publishing them on &lt;a href="https://dublinmaker.buzzsprout.com"&gt;Buzzsprout&lt;/a&gt; when they are ready.&lt;/p&gt;

&lt;p&gt;Most of the 1st series were uploaded to &lt;a href="https://www.youtube.com/playlist?list=PLAagJ_L-cqBGa6k0qDpuj6X6YulUXEM7-"&gt;Dublin Maker's Youtube Channel&lt;/a&gt; but it wasn't getting as much listens (maybe because it's just a still graphic instead of a video of people chatting or animations, I didn't have time for latter). Could be something to think of if there's more time set aside on creating animations or just straight up recording the video (it's done through zoom anyway) and just upload the podcast video (with some editing, of course, as it's not live). üòâ&lt;/p&gt;

&lt;p&gt;I really did try to make sound waves move (visualiser) to the audio, it's not as simple as I thought it would be, even tried &lt;a href="https://www.apple.com/final-cut-pro/motion/"&gt;Motion&lt;/a&gt;... it didn't work out the way I wanted. And I don't have After Effects. So I left that experiment behind!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/l4pTfqwRupvNCiEa4/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/l4pTfqwRupvNCiEa4/giphy.gif" alt="catbug dancing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So the upside for me is that I get to chat Makers and friends again, and we get to share our conversations with our wider community. üôå&lt;/p&gt;

&lt;p&gt;The downside is I couldn't chat with them in-person. üò≠&lt;/p&gt;

&lt;p&gt;BUT... we would love to chat more with other Makers, who should we invite next? The only caveat is that the guest will have participated or will be participating in the Dublin Maker festival.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/LHZyixOnHwDDy/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/LHZyixOnHwDDy/giphy.gif" alt="kitty typing"&gt;&lt;/a&gt;&lt;br&gt;
So email us at &lt;a href="mailto:info@dublinmaker.ie"&gt;info@dublinmaker.ie&lt;/a&gt; and we will be in touch.&lt;/p&gt;

&lt;p&gt;And here's my podcast sign off... &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üéµ cuts in&lt;br&gt;
"Remember to like and subscribe. You can find us on Twitter, Facebook and Insta. Take care and stay safe, this is Vicky from the Dublin Maker Podcast." &lt;br&gt;
üéµ fades&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>dublinmaker</category>
      <category>maker</category>
      <category>podcast</category>
      <category>steam</category>
    </item>
    <item>
      <title>Beginner's guide to understanding the relevance of your search with Elasticsearch and Kibana</title>
      <author>Lisa</author>
      <pubDate>Thu, 11 Mar 2021 22:42:39 +0000</pubDate>
      <link>https://dev.to/lisahjung/beginner-s-guide-to-understanding-the-relevance-of-your-search-with-elasticsearch-and-kibana-29n6</link>
      <guid>https://dev.to/lisahjung/beginner-s-guide-to-understanding-the-relevance-of-your-search-with-elasticsearch-and-kibana-29n6</guid>
      <description>&lt;p&gt;&lt;strong&gt;‚ÄúI love it when my search engine retrieves irrelevant search results,‚Äù said nobody ever.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As developers, we search for things on a daily basis. Whether we are searching for a solution on how to fix a bug or how to build a new feature, it is incredibly frustrating when you are not quite getting what you are looking for. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/KpACNEh8jXK2Q/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/KpACNEh8jXK2Q/giphy.gif" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That is what &lt;code&gt;relevance&lt;/code&gt; is all about! &lt;/p&gt;

&lt;p&gt;When you search for something on your app, you want to get results that are directly related to what you are looking for. &lt;/p&gt;

&lt;p&gt;Elasticsearch is a powerful search and analytics engine designed to do just that! By integrating Elasticsearch into your app, you can create a great search experience for your users. &lt;/p&gt;

&lt;p&gt;This blog will help you understand the relevance of your search with Elasticsearch and Kibana!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;By the end of this blog, you will be able to:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1) learn how precision and recall are used to measure how well Elasticsearch is searching for user's query&lt;br&gt;
2) understand how scoring is used to rank relevancy of search results in Elasticsearch&lt;br&gt;
3) use resources provided at the end of the blog to master Elasticsearch queries that fine-tunes the precision or recall of your search results&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-do-we-measure-relevance-in-elasticsearch" class="anchor"&gt;
  &lt;/a&gt;
  How do we measure relevance in Elasticsearch?
&lt;/h3&gt;

&lt;p&gt;There are multiple factors that come into play. This blog will focus on &lt;code&gt;precision&lt;/code&gt; and &lt;code&gt;recall&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Before we get to that, let's do a quick recap! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JQcL1nXM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/60980933/110810286-e36dac00-8242-11eb-823f-5f9cfba46d58.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JQcL1nXM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/60980933/110810286-e36dac00-8242-11eb-823f-5f9cfba46d58.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Elasticsearch is a search engine that allows us to store, search, and analyze data. It stores data as documents. Documents that share similar traits are grouped into an index. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cX5oSVZd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/60980933/110811892-5c213800-8244-11eb-9935-b3b9cd315b4d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cX5oSVZd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/60980933/110811892-5c213800-8244-11eb-9935-b3b9cd315b4d.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you search for something, Elasticsearch retrieves relevant documents(green boxes). Then, it presents these documents as search results(orange box). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YsgCcagD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/60980933/110812460-dce03400-8244-11eb-90e1-b99938737a77.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YsgCcagD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/60980933/110812460-dce03400-8244-11eb-90e1-b99938737a77.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The two diagrams in the image above depict the same thing. &lt;/p&gt;

&lt;p&gt;The diagram on the left shows documents grouped into an index. The same thing is shown on the diagram on the right. &lt;/p&gt;

&lt;p&gt;The yellow rectangle represents your sample index. The grey dots are the documents contained in that index.&lt;/p&gt;

&lt;p&gt;This blog will use the diagram on the right to explain &lt;code&gt;precision&lt;/code&gt; and &lt;code&gt;recall&lt;/code&gt;. But before we do that, let‚Äôs go over some terms!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-are-raw-true-positives-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  What are &lt;code&gt;true positives&lt;/code&gt;?
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rfhD-DDq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/60980933/110813334-a3f48f00-8245-11eb-8be9-fa9a7ad4a3ee.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rfhD-DDq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/60980933/110813334-a3f48f00-8245-11eb-8be9-fa9a7ad4a3ee.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you send a search query to Elasticsearch, it retrieves documents that it considers relevant to the query. &lt;/p&gt;

&lt;p&gt;These are the dots inside the white circle. These are the documents that Elasticsearch sends back as a response.&lt;/p&gt;

&lt;p&gt;Some of the these retrieved documents are what you expect to see in your response. These are known as &lt;code&gt;true positives&lt;/code&gt;. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-are-raw-false-positives-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  What are &lt;code&gt;false positives&lt;/code&gt;?
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R-zMXH1C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/60980933/110813522-cbe3f280-8245-11eb-9918-b25e926e1c81.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R-zMXH1C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/60980933/110813522-cbe3f280-8245-11eb-9918-b25e926e1c81.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You probably had an experience where you searched for something and some of the results were not relevant to what you were looking for. &lt;/p&gt;

&lt;p&gt;These are known as &lt;code&gt;false positives&lt;/code&gt;. These are irrelevant search results that were retrieved by the Search engine for some reason.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-are-raw-true-negatives-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  What are &lt;code&gt;true negatives&lt;/code&gt;?
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qfW4kJrc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/60980933/110814119-63e1dc00-8246-11eb-956f-cb13553d4bd3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qfW4kJrc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/60980933/110814119-63e1dc00-8246-11eb-956f-cb13553d4bd3.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs focus on the dots in the yellow region of this diagram. These are the documents that were not returned by the search engine.&lt;/p&gt;

&lt;p&gt;Some of them are truly irrelevant to the search query and were correctly rejected by the search engine. These are known as &lt;code&gt;true negatives&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-are-raw-false-negatives-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  What are &lt;code&gt;false negatives&lt;/code&gt;?
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vfA7CqJj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/60980933/110814423-aacfd180-8246-11eb-921f-f74703200335.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vfA7CqJj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/60980933/110814423-aacfd180-8246-11eb-921f-f74703200335.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Among the rejected documents, there may be relevant documents that should have been returned in the response. These are known as &lt;code&gt;false negatives&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Now that we have mastered these terms, let's get back to relevance! Earlier, I have mentioned that &lt;code&gt;precision&lt;/code&gt; and &lt;code&gt;recall&lt;/code&gt; are used to measure the relevance of a search engine. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#precision" class="anchor"&gt;
  &lt;/a&gt;
  Precision
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A0KHi5oT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/60980933/110864190-fdc57b00-827e-11eb-94ec-e11973b6f0ff.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A0KHi5oT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/60980933/110864190-fdc57b00-827e-11eb-94ec-e11973b6f0ff.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The term &lt;code&gt;precision&lt;/code&gt; has to do with the dots inside the white circle. These are documents that are returned as search results.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Precision&lt;/code&gt; is calculated by true positives divided by the sum of true positives and false positives. &lt;code&gt;Precision&lt;/code&gt; tells you what portion of the retrieved data is actually relevant to the search query. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#recall" class="anchor"&gt;
  &lt;/a&gt;
  Recall
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wi8HjpNy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/60980933/110826092-f9369d80-8251-11eb-8f68-9e3fec6c514c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wi8HjpNy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/60980933/110826092-f9369d80-8251-11eb-8f68-9e3fec6c514c.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Recall&lt;/code&gt; on the other hand is calculated by true positives divided by the sum of true positives and false negatives. It tells you what portion of relevant data is being returned as search results.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MqlM85kV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/60980933/110864311-29486580-827f-11eb-8a3f-10681c64732f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MqlM85kV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/60980933/110864311-29486580-827f-11eb-8a3f-10681c64732f.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Precision&lt;/code&gt; and &lt;code&gt;recall&lt;/code&gt; are inversely related. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;Precision&lt;/code&gt; wants all the retrieved results to a perfect match to the query, even if it means returning less or no documents. &lt;/p&gt;

&lt;p&gt;Whereas &lt;code&gt;recall&lt;/code&gt; focuses more on quantity. It wants to retrieve more results even if the documents may not be a perfect match to the query. The dilemma is that we want to present the really relevant items but we also want to retrieve as many results as possible.&lt;/p&gt;

&lt;p&gt;As you can see, these two factors are at odds with each other because if you want to improve &lt;code&gt;precision&lt;/code&gt;, it might cause a decline in &lt;code&gt;recall&lt;/code&gt; and vice versa.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jhtuSK6u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/60980933/110827333-30597e80-8253-11eb-8f29-a119e07bbff2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jhtuSK6u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/60980933/110827333-30597e80-8253-11eb-8f29-a119e07bbff2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs recap real quick! &lt;code&gt;Precision&lt;/code&gt; and &lt;code&gt;recall&lt;/code&gt; determine which documents are included in the search results. However, &lt;code&gt;precision&lt;/code&gt; and &lt;code&gt;recall&lt;/code&gt; do not determine which of these returned documents are more relevant than the other. &lt;/p&gt;

&lt;p&gt;This is determined by &lt;code&gt;ranking&lt;/code&gt;!  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rkEJbVH3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/60980933/110827922-c42b4a80-8253-11eb-9def-acba29d74ac6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rkEJbVH3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/60980933/110827922-c42b4a80-8253-11eb-9def-acba29d74ac6.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you look at your search results, you will see that the most relevant results are at the top and the least relevant are at the bottom. &lt;/p&gt;

&lt;p&gt;This &lt;code&gt;ranking&lt;/code&gt; or order is determined by a scoring algorithm.&lt;/p&gt;

&lt;p&gt;Each result is given a &lt;code&gt;score&lt;/code&gt;. Ones with the highest scores are displayed at the top whereas ones with the lowest scores are displayed at the bottom. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-raw-score-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  What is a &lt;code&gt;score&lt;/code&gt;?
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Score&lt;/code&gt; is a value that represents how relevant a document is to that specific query. A score is computed for each document that is a hit, and hits are search results that are sent to the user.  &lt;/p&gt;

&lt;p&gt;The higher the score a document has, more relevant the document is to the query, and it‚Äôs going to end up higher in the order!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-is-a-raw-score-endraw-calculated" class="anchor"&gt;
  &lt;/a&gt;
  How is a &lt;code&gt;score&lt;/code&gt; calculated?
&lt;/h4&gt;

&lt;p&gt;There are multiple factors that are used to compute a document's score. This blog will only focus on &lt;code&gt;term frequency(TF)&lt;/code&gt; and &lt;code&gt;inverse document frequency(IDF)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0HlQLxvj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w55s1ofzmi8nptp37drp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0HlQLxvj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w55s1ofzmi8nptp37drp.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you search for something, you type in a search query in the search box. Elasticsearch looks at the query and pulls up relevant documents or hits.Then, it calculates a score for each document and ranks them by relevance. &lt;/p&gt;

&lt;p&gt;So how does this happen? &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-raw-term-frequency-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  What is &lt;code&gt;term frequency&lt;/code&gt;?
&lt;/h4&gt;

&lt;p&gt;Let‚Äôs talk about how &lt;code&gt;term frequency&lt;/code&gt; plays a role in calculating a score. &lt;/p&gt;

&lt;p&gt;In the image below, we have a search query(red bracket) ‚Äú how to form good habits‚Äù. This query is made of multiple search terms(blue arrows). &lt;/p&gt;

&lt;p&gt;When the relevant documents are retrieved, Elasticsearch looks through these documents and calculates how many times each search term appears in a document. &lt;/p&gt;

&lt;p&gt;This is known as &lt;code&gt;term frequency&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Uy2Q-BUq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/60980933/110829979-ef169e00-8255-11eb-95dc-6f5fd8f897e3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Uy2Q-BUq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/60980933/110829979-ef169e00-8255-11eb-95dc-6f5fd8f897e3.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If a document mentions search terms more frequently, Elasticsearch assumes that this document is more relevant to the search query and it assigns a higher score to the document. &lt;/p&gt;

&lt;p&gt;Let‚Äôs say we were looking at the frequency for the term habits(orange box).&lt;/p&gt;

&lt;p&gt;In the field description of the first document(red box), the term habits appears 4 times(TF=4). In the field description of the the second document(blue box), the term habits appears 1 time(TF=1). &lt;/p&gt;

&lt;p&gt;Therefore, in this example, the first document will be given a higher score and end up higher on the search results.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-inverse-document-frequencyidf" class="anchor"&gt;
  &lt;/a&gt;
  What is Inverse Document Frequency(IDF)?
&lt;/h4&gt;

&lt;p&gt;When we calculate a score based on &lt;code&gt;term frequency&lt;/code&gt; alone, this will not give us the most relevant documents. This happens because &lt;code&gt;term frequency&lt;/code&gt; considers all search terms to be equally important when assessing the relevance of a document. &lt;/p&gt;

&lt;p&gt;Let‚Äôs look at the search query in the image below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ld55sdzO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/60980933/110830096-166d6b00-8256-11eb-9c03-d46c609d55a8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ld55sdzO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/60980933/110830096-166d6b00-8256-11eb-9c03-d46c609d55a8.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have search terms, "how" and "to" and "form" and "good" and "habits". Not all of these search terms will help you determine the relevance of a document. &lt;/p&gt;

&lt;p&gt;For example, the first four search terms are commonly seen in many, if not all documents. Take a look at the hits(blue box), then at the documents highlighted with an orange box.&lt;/p&gt;

&lt;p&gt;The documents like "how to form a meetup group" or "good chicken recipes" do contain some of the search terms. But these documents are completely irrelevant to what we are looking for!&lt;/p&gt;

&lt;p&gt;But because of &lt;code&gt;term frequency&lt;/code&gt;,  if these commonly found search terms were found in high frequency in any of these documents, these documents will end up with high scores, even though these are irrelevant to the query. &lt;/p&gt;

&lt;p&gt;So Elasticsearch offsets this with &lt;code&gt;inverse document frequency(IDF)&lt;/code&gt;. With Elasticsearch, if certain search terms are found in many documents in the result set, it knows that these terms are not useful at determining relevance.&lt;/p&gt;

&lt;p&gt;When Elasticsearch goes through all the hits, it will reduce the score for documents with unimportant search terms. It will also increase the score for documents with important search term like habits.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#finetuning-precision-and-recall-via-elasticsearch-queries" class="anchor"&gt;
  &lt;/a&gt;
  Fine-tuning precision and recall via Elasticsearch queries
&lt;/h3&gt;

&lt;p&gt;Now that we have covered the basics of relevance, we are ready to fine-tune the &lt;code&gt;precision&lt;/code&gt; or &lt;code&gt;recall&lt;/code&gt; of our search results! The best way to show you how these queries work is by sending these queries from Kibana to Elasticsearch. &lt;/p&gt;

&lt;p&gt;There are three things you must complete in order to follow along! This &lt;a href="https://github.com/LisaHJung/Part-2-Understanding-the-relevance-of-your-search-with-Elasticsearch-and-Kibana-"&gt;repo&lt;/a&gt; contains all of the directions and resources you will need to complete these steps. &lt;/p&gt;

&lt;p&gt;When you open the &lt;a href="https://github.com/LisaHJung/Part-2-Understanding-the-relevance-of-your-search-with-Elasticsearch-and-Kibana-"&gt;repo&lt;/a&gt; and scroll down to the Resources section, you will see the following.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HbJyJR3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/60980933/110861755-d28d5c80-827b-11eb-8b2d-58cbcf426a52.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HbJyJR3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/60980933/110861755-d28d5c80-827b-11eb-8b2d-58cbcf426a52.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Set up Elasticsearch and Kibana&lt;/strong&gt;&lt;br&gt;
You can access Elasticsearch and Kibana in two ways:&lt;br&gt;
1) Access Elasticsearch and Kibana hosted on Elastic Cloud&lt;br&gt;
2) Download Elasticsearch and Kibana on your local machine&lt;/p&gt;

&lt;p&gt;Instructions for each option is included under Resources(green box). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IHGxzdwR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/60980933/110861800-e5079600-827b-11eb-8fe4-ad7a6ec7d8fe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IHGxzdwR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/60980933/110861800-e5079600-827b-11eb-8fe4-ad7a6ec7d8fe.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Option 1: Accessing Elasticsearch and Kibana hosted on Elastic Cloud&lt;/p&gt;

&lt;p&gt;Unlike the downloaded option, Elastic Cloud handles all the heavy lifting of managing the stack so you can focus on building your product instead.&lt;/p&gt;

&lt;p&gt;You get a free 30 day trial. There is no credit card required and the trial expires on its own. I find that for beginners it is easier and faster to get started on Elastic Cloud.&lt;/p&gt;

&lt;p&gt;Option 2: Downloading Elasticsearch and Kibana on your local machine &lt;/p&gt;

&lt;p&gt;This option is free and there is no expiration date. However, you will need to manage Elasticsearch and Kibana on your own. &lt;/p&gt;

&lt;p&gt;Both options will perfectly be able to handle all of the queries we are about to go over. Please choose whatever option that works best for you! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Add data to Elasticsearch&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6qagtIf0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/60980933/110861944-16806180-827c-11eb-8347-b5f771beb080.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6qagtIf0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/60980933/110861944-16806180-827c-11eb-8347-b5f771beb080.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From the same repo, click on the video of the workshop(orange box). Go to time stamp 18:57.&lt;/p&gt;

&lt;p&gt;This video will walk you through how you can add the dataset(yellow box) to Elasticsearch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Master the queries to fine-tune the precision or recall of your search results&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The rest of the video will walk you through different queries that allows you to fine-tune the precision and recall of your search results! &lt;/p&gt;

&lt;p&gt;All the search queries covered in the video are included in the same repo(below the Resources section). So make sure to keep the repo open while you follow along. &lt;/p&gt;

&lt;p&gt;All right, you are all set to go. Master these queries and explore what you can do with Elasticsearch and Kibana!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/TdfyKrN7HGTIY/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/TdfyKrN7HGTIY/giphy.gif" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>database</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Adding Authentication with Azure AD to a .NET Angular Web App with MSAL</title>
      <author>Adam Swanson</author>
      <pubDate>Thu, 11 Mar 2021 20:13:59 +0000</pubDate>
      <link>https://dev.to/theaswanson/adding-authentication-with-azure-ad-to-a-net-angular-web-app-with-msal-11a5</link>
      <guid>https://dev.to/theaswanson/adding-authentication-with-azure-ad-to-a-net-angular-web-app-with-msal-11a5</guid>
      <description>&lt;p&gt;I recently went through this process and was disappointed at the lack of documentation. Then I realized that the latest version of the &lt;code&gt;msal-angular&lt;/code&gt; library I used was only 8 days old at the time of writing, so that explains some things.&lt;/p&gt;

&lt;p&gt;In either case, I've decided to write out my steps for anyone else looking to setup a similar project with this type of authentication. To walk through this process, we'll be creating a web app from scratch and deploying it to a new App Service in Azure. We'll also register the app in Azure AD.&lt;/p&gt;

&lt;p&gt;You can find the completed web app &lt;a href="https://github.com/theaswanson/my-authenticated-app"&gt;here&lt;/a&gt;, or you can follow along and create it yourself using the steps below.&lt;/p&gt;

&lt;p&gt;To summarize, here's what we're building:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web app with .NET 5 Web API and Angular 11, hosted in an Azure App Service&lt;/li&gt;
&lt;li&gt;Authentication with Azure AD using the &lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow"&gt;Microsoft Identity platform and OAuth 2.0 authorization code flow&lt;/a&gt;, and the &lt;a href="https://www.npmjs.com/package/@azure/msal-angular"&gt;@azure/msal-angular@2.0.0-beta.0&lt;/a&gt; package&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And here's what we're gonna do:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new project from the .NET Angular template&lt;/li&gt;
&lt;li&gt;Upgrade the Angular app from 8 to 11&lt;/li&gt;
&lt;li&gt;Deploy the app to an App Service&lt;/li&gt;
&lt;li&gt;Add a new app registration in Azure AD&lt;/li&gt;
&lt;li&gt;Configure the app redirect URIs to ensure eligibility for the Authorization Code Flow with PKCE.&lt;/li&gt;
&lt;li&gt;Configure the .NET Web API for authentication, authorization, and CORS&lt;/li&gt;
&lt;li&gt;Install MSAL and other dependencies for Angular&lt;/li&gt;
&lt;li&gt;Configure MSAL and Angular app for authentication&lt;/li&gt;
&lt;li&gt;Redeploy to App Service&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Microsoft Azure account with free-tier subscription (for Azure AD and App Service)&lt;/li&gt;
&lt;li&gt;Visual Studio Code (for running and editing the app)&lt;/li&gt;
&lt;li&gt;VSCode Azure App Service extension (for publishing to the App Service)&lt;/li&gt;
&lt;li&gt;.NET 5.0 (for running the app and adding packages)&lt;/li&gt;
&lt;li&gt;Node and npm (for updating Angular, installing MSAL, and Angular CLI)&lt;/li&gt;
&lt;li&gt;Angular CLI (for generating the &lt;code&gt;AuthService&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#create-the-web-app" class="anchor"&gt;
  &lt;/a&gt;
  Create the web app
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Generate the app using the .NET Angular template

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet new angular -o my-authenticated-app&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Trust the certificate, if needed

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet dev-certs https --trust&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Upgrade Angular from 8 to 11

&lt;ul&gt;
&lt;li&gt;From the &lt;code&gt;ClientApp&lt;/code&gt; folder, run these commands:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng update @angular/core@8 @angular/cli@8&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng update @angular/core@9 @angular/cli@9&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Remove &lt;code&gt;export { renderModule, renderModuleFactory } from '@angularplatform-server'&lt;/code&gt; from &lt;code&gt;main.ts&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;progress: false&lt;/code&gt; to &lt;code&gt;progress: true&lt;/code&gt; in &lt;code&gt;angular.json&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm uninstall @nguniversal/module-map-ngfactory-loader&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Remove &lt;code&gt;ModuleMapLoaderModule&lt;/code&gt; import and reference from &lt;code&gt;app.server.module.ts&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng add @angular/localize&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng update @angular/cli@10 @angular/core@10 rxjs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng update @angular/cli@11 @angular/core@11 --force&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm uninstall node-sass&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm i -g npm-check-updates&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ncu -u&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm i&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm update&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm audit fix&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm i -D typescript@4.1.5&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Run the app and verify it starts correctly. You should get a page like this:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jHjgHNf4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5k98ptvkyfyl4ceob8mh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jHjgHNf4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5k98ptvkyfyl4ceob8mh.png" alt="Hello World"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;View the "Fetch data" page. It should load the weather data. Later, after we add authentication, this page will require authentication and will not load the weather data unless a user is logged in.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#create-the-app-service" class="anchor"&gt;
  &lt;/a&gt;
  Create the App Service
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;In the Azure portal, under App Services, click "Create"
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0O9HeWpg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lakkgpu870btekdbo5dz.png" alt="Create an App Service"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select your Azure subscription and resource group. Set a name under Instance Details, set Publish to "Code", Runtime stack to ".NET 5", Operating System to "Windows", and select a region. Also select an appropriate Windows Plan. Click "Review + create".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L6PTNxsX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/msbg2p2hkq539tr3eyto.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L6PTNxsX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/msbg2p2hkq539tr3eyto.png" alt="Create Web App"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under the Overview section of the App Service, note the URL listed under Essentials. We will need this when configuring the redirect URIs in the app registration.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#add-a-new-app-registration-in-azure-ad" class="anchor"&gt;
  &lt;/a&gt;
  Add a new app registration in Azure AD
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;In the Azure Portal, open Azure Active Directory&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VcS-ZWFB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3k94ppwl77kfij4u5oq4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VcS-ZWFB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3k94ppwl77kfij4u5oq4.png" alt="Azure AD"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Under the Manage menu, open "App registrations" and click "New registration"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hf6-sTI1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3vjxf487bq1iyy9fq89.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hf6-sTI1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3vjxf487bq1iyy9fq89.png" alt="New App Registration"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enter a name and select the supported account types. Also create a Redirect URI for &lt;code&gt;https://localhost:5001/&lt;/code&gt; and ensure the type is set to "Single-page application (SPA)". Click Register.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nSRkq0g8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ds6yxbmjre0bwm3p6lxi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nSRkq0g8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ds6yxbmjre0bwm3p6lxi.png" alt="Register an application"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On the Overview screen for the app registration, you should see an Application (client) ID and Directory (tenant) ID. Make note of these as we'll need them later when we configure the web app for authentication.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KS8Oh1Jl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/et0jvdclypnkg3c9xqmi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KS8Oh1Jl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/et0jvdclypnkg3c9xqmi.png" alt="App registration overview"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Under the Authentication section, under Single-page application Redirect URIs, add a new URI for the URL of the App Service (i.e. &lt;code&gt;https://myauthenticatedapp.azurewebsites.net/&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JMObSoGq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33m1np5yvo3rd4kgo2fm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JMObSoGq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33m1np5yvo3rd4kgo2fm.png" alt="Add Redirect URI"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#deploy-to-app-service" class="anchor"&gt;
  &lt;/a&gt;
  Deploy to App Service
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;From project root: &lt;code&gt;dotnet publish -c Release -o publish&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using the Azure App Service extension in Visual Studio Code, right-click the publish folder and click "Deploy to Web App". Select your newly created App Service and click "Deploy"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nedId6RD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5n5a7a20mxd4ysw6795k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nedId6RD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5n5a7a20mxd4ysw6795k.png" alt="Deploy to App Service"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;View the newly deployed web app with the URL provided in the Overview section of the App Service. It should look the same as when you ran the app locally.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#configure-net-web-api" class="anchor"&gt;
  &lt;/a&gt;
  Configure .NET Web API
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Configure &lt;code&gt;appsettings.json&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add a new section titled "AzureAd". Replace &lt;code&gt;ENTER_CLIENT_ID_GUID_HERE&lt;/code&gt; with your Application (client) ID listed in the app registration in Azure AD, and replace &lt;code&gt;ENTER_TENANT_ID_GUID_HERE&lt;/code&gt; with the Directory (tenant) ID.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"AzureAd"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Instance"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://login.microsoftonline.com/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ClientId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ENTER_CLIENT_ID_GUID_HERE"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"TenantId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ENTER_TENANT_ID_GUID_HERE"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Audience"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ENTER_CLIENT_ID_GUID_HERE"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install NuGet packages&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet add my-authenticated-app.csproj package Microsoft.AspNetCore.Authentication.JwtBearer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dotnet add my-authenticated-app.csproj package Microsoft.Identity.Web&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Setup &lt;code&gt;Startup.cs&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add the following uncommented code blocks:&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ConfigureServices()&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ConfigureServices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IServiceCollection&lt;/span&gt; &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//services.AddControllersWithViews();&lt;/span&gt;
        &lt;span class="c1"&gt;//services.AddSpaStaticFiles(configuration =&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;//{&lt;/span&gt;
        &lt;span class="c1"&gt;//    configuration.RootPath = "ClientApp/dist";&lt;/span&gt;
        &lt;span class="c1"&gt;//});&lt;/span&gt;

        &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddAuthentication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JwtBearerDefaults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AuthenticationScheme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddMicrosoftIdentityWebApi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"AzureAd"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddAuthorization&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Configure()&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IApplicationBuilder&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IWebHostEnvironment&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//if (env.IsDevelopment())&lt;/span&gt;
        &lt;span class="c1"&gt;//{&lt;/span&gt;
        &lt;span class="c1"&gt;//    app.UseDeveloperExceptionPage();&lt;/span&gt;
        &lt;span class="c1"&gt;//}&lt;/span&gt;
        &lt;span class="c1"&gt;//else&lt;/span&gt;
        &lt;span class="c1"&gt;//{&lt;/span&gt;
        &lt;span class="c1"&gt;//    app.UseExceptionHandler("/Error");&lt;/span&gt;
        &lt;span class="c1"&gt;//    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.&lt;/span&gt;
        &lt;span class="c1"&gt;//    app.UseHsts();&lt;/span&gt;
        &lt;span class="c1"&gt;//}&lt;/span&gt;

        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseCors&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="c1"&gt;//app.UseHttpsRedirection();&lt;/span&gt;
        &lt;span class="c1"&gt;//app.UseStaticFiles();&lt;/span&gt;
        &lt;span class="c1"&gt;//if (!env.IsDevelopment())&lt;/span&gt;
        &lt;span class="c1"&gt;//{&lt;/span&gt;
        &lt;span class="c1"&gt;//    app.UseSpaStaticFiles();&lt;/span&gt;
        &lt;span class="c1"&gt;//}&lt;/span&gt;

        &lt;span class="c1"&gt;//app.UseRouting();&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseAuthentication&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseAuthorization&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Add the &lt;code&gt;Authorize&lt;/code&gt; attribute to &lt;code&gt;WeatherController&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Authorize&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;//[ApiController]&lt;/span&gt;
&lt;span class="c1"&gt;//[Route("[controller]")]&lt;/span&gt;
&lt;span class="c1"&gt;//public class MyController : ControllerBase&lt;/span&gt;
&lt;span class="c1"&gt;//{&lt;/span&gt;
&lt;span class="c1"&gt;//}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#configure-angular-app-with-msal" class="anchor"&gt;
  &lt;/a&gt;
  Configure Angular app with MSAL
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Install packages&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;From the &lt;code&gt;ClientApp&lt;/code&gt; folder, run &lt;code&gt;npm i msal @azure/msal-browser @azure/msal-angular&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Configure environment settings&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;Replace &lt;code&gt;ENTER_DEV_URL_HERE&lt;/code&gt; with your development URL (i.e. "&lt;a href="https://localhost:5001/%22"&gt;https://localhost:5001/"&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Replace &lt;code&gt;ENTER_PUBLIC_URL_HERE&lt;/code&gt; with the App Service's URL (i.e. "&lt;a href="https://myauthenticatedapp.azurewebsites.net/%22"&gt;https://myauthenticatedapp.azurewebsites.net/"&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Replace &lt;code&gt;ENTER_CLIENT_ID_GUID_HERE&lt;/code&gt; with the client ID from the app registration&lt;/li&gt;
&lt;li&gt;Replace &lt;code&gt;ENTER_TENANT_NAME_HERE&lt;/code&gt; with the tenant name. This can be found in the Azure portal URL when viewing the App Service page ("&lt;a href="https://portal.azure.com/#@YOUR_TENANT_NAME.onmicrosoft.com/resource/subscriptions/and-so-on%22"&gt;https://portal.azure.com/#@YOUR_TENANT_NAME.onmicrosoft.com/resource/subscriptions/and-so-on"&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;environment.ts&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```ts
export const environment = {
  production: false,
  redirectUrl: 'ENTER_DEV_URL_HERE',
  clientId: 'ENTER_CLIENT_ID_GUID_HERE',
  tenantName: 'ENTER_TENANT_NAME_HERE'
};
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;environment.prod.ts&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```ts
export const environment = {
  production: true,
  redirectUrl: 'ENTER_PUBLIC_URL_HERE',
  clientId: 'ENTER_CLIENT_ID_GUID_HERE',
  tenantName: 'ENTER_TENANT_NAME_HERE'
};
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Configure MSAL in &lt;code&gt;app.module.ts&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add the following imports, functions, and module imports, providers, and bootstraps&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;HTTP_INTERCEPTORS&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/common/http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;IPublicClientApplication&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;PublicClientApplication&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;InteractionType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;BrowserCacheLocation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;LogLevel&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@azure/msal-browser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MsalGuard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MsalInterceptor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MsalBroadcastService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MsalInterceptorConfiguration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MsalModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MsalService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MSAL_GUARD_CONFIG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MSAL_INSTANCE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MSAL_INTERCEPTOR_CONFIG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MsalGuardConfiguration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MsalRedirectComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@azure/msal-angular&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;environment&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../environments/environment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isIE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userAgent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MSIE &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userAgent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Trident/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Remove this line to use Angular Universal&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loggerCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;logLevel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LogLevel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MSALInstanceFactory&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;IPublicClientApplication&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PublicClientApplication&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;clientId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;authority&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`https://login.microsoftonline.com/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tenantName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.onmicrosoft.com/`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;redirectUri&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redirectUrl&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;cacheLocation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BrowserCacheLocation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LocalStorage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;storeAuthStateInCookie&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isIE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// set to true for IE 11&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;system&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;loggerOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;loggerCallback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;logLevel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LogLevel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;piiLoggingEnabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MSALInterceptorConfigFactory&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;MsalInterceptorConfiguration&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;protectedResourceMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;protectedResourceMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redirectUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;weatherforecast`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/.default`&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;interactionType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;InteractionType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Redirect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;protectedResourceMap&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MSALGuardConfigFactory&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;MsalGuardConfiguration&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;interactionType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;InteractionType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Redirect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;authRequest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;scopes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/.default`&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;NgModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;...,&lt;/span&gt;
    &lt;span class="nx"&gt;MsalModule&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;...,&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HTTP_INTERCEPTORS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;useClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MsalInterceptor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;multi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MSAL_INSTANCE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;useFactory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MSALInstanceFactory&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MSAL_GUARD_CONFIG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;useFactory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MSALGuardConfigFactory&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MSAL_INTERCEPTOR_CONFIG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;useFactory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MSALInterceptorConfigFactory&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;MsalService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;MsalGuard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;MsalBroadcastService&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;...,&lt;/span&gt;
    &lt;span class="nx"&gt;MsalRedirectComponent&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppModule&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create an auth service&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- From the `ClientApp` folder, run `ng g s auth`

- `auth.service.ts`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    ```ts
    import { Inject, Injectable } from '@angular/core';
    import { MsalService, MsalBroadcastService, MSAL_GUARD_CONFIG, MsalGuardConfiguration } from '@azure/msal-angular';
    import { AccountInfo, AuthenticationResult, InteractionStatus, InteractionType, PopupRequest, RedirectRequest } from '@azure/msal-browser';
    import { Subject } from 'rxjs';
    import { filter, takeUntil } from 'rxjs/operators';

    @Injectable({
      providedIn: 'root'
    })
    export class AuthService {
      loggedIn = false;
      private readonly _destroying$ = new Subject&amp;lt;void&amp;gt;();

      constructor(
        @Inject(MSAL_GUARD_CONFIG) private msalGuardConfig: MsalGuardConfiguration,
        private authService: MsalService,
        private msalBroadcastService: MsalBroadcastService) { }

      updateLoggedInStatus() {
        this.msalBroadcastService.inProgress$
          .pipe(
            filter((status: InteractionStatus) =&amp;gt; status === InteractionStatus.None),
            takeUntil(this._destroying$)
          )
          .subscribe(() =&amp;gt; {
            this.setLoggedIn();
            this.checkAndSetActiveAccount();
          });
      }

      login() {
        if (this.msalGuardConfig.interactionType === InteractionType.Popup) {
          this.loginWithPopup();
        } else {
          this.loginWithRedirect();
        }
      }

      getActiveAccount(): AccountInfo | null {
        return this.authService.instance.getActiveAccount();
      }

      private checkAndSetActiveAccount() {
        /**
        * If no active account set but there are accounts signed in, sets first account to active account
        * To use active account set here, subscribe to inProgress$ first in your component
        * Note: Basic usage demonstrated. Your app may require more complicated account selection logic
        */
        let activeAccount = this.authService.instance.getActiveAccount();

        if (!activeAccount &amp;amp;&amp;amp; this.authService.instance.getAllAccounts().length &amp;gt; 0) {
          let accounts = this.authService.instance.getAllAccounts();
          this.authService.instance.setActiveAccount(accounts[0]);
        }
      }

      private setLoggedIn() {
        this.loggedIn = this.authService.instance.getAllAccounts().length &amp;gt; 0;
      }

      private loginWithPopup() {
        if (this.msalGuardConfig.authRequest) {
          this.authService.loginPopup({ ...this.msalGuardConfig.authRequest } as PopupRequest)
            .subscribe((response: AuthenticationResult) =&amp;gt; {
              this.authService.instance.setActiveAccount(response.account);
            });
        } else {
          this.authService.loginPopup()
            .subscribe((response: AuthenticationResult) =&amp;gt; {
              this.authService.instance.setActiveAccount(response.account);
            });
        }
      }

      private loginWithRedirect() {
        if (this.msalGuardConfig.authRequest) {
          this.authService.loginRedirect({ ...this.msalGuardConfig.authRequest } as RedirectRequest);
        } else {
          this.authService.loginRedirect();
        }
      }

      logout() {
        this.authService.logout();
      }

      destroy() {
        this._destroying$.next(undefined);
        this._destroying$.complete();
      }
    }
    ```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Add the &lt;code&gt;app-redirect&lt;/code&gt; component to &lt;code&gt;index.html&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;app-root&amp;gt;&lt;/span&gt;Loading...&lt;span class="nt"&gt;&amp;lt;/app-root&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;app-redirect&amp;gt;&amp;lt;/app-redirect&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implement &lt;code&gt;AuthService&lt;/code&gt; in the &lt;code&gt;AppComponent&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- `app.component.ts`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    ```ts
    import { Component, OnInit } from '@angular/core';
    import { AuthService } from './auth.service';

    @Component({
      selector: 'app-root',
      templateUrl: './app.component.html'
    })
    export class AppComponent implements OnInit {
      title = 'app';

      constructor(public authService: AuthService) { }

      ngOnInit(): void {
        this.authService.updateLoggedInStatus();
      }

      login() {
        this.authService.login();
      }

      logout() {
        this.authService.logout();
      }
    }
    ```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- `app.component.html`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    ```html
    &amp;lt;body&amp;gt;
      &amp;lt;app-nav-menu [loggedIn]="authService.loggedIn" (loginClicked)="login()" (logoutClicked)="logout()"&amp;gt;&amp;lt;/app-nav-menu&amp;gt;
      &amp;lt;div class="container"&amp;gt;
        &amp;lt;router-outlet&amp;gt;&amp;lt;/router-outlet&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
    ```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Update the &lt;code&gt;NavMenuComponent&lt;/code&gt; with login/logout buttons&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- `nav-menu.component.ts`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    ```ts
    import { Component, EventEmitter, Input, Output } from '@angular/core';

    @Component({
      selector: 'app-nav-menu',
      templateUrl: './nav-menu.component.html',
      styleUrls: ['./nav-menu.component.css']
    })
    export class NavMenuComponent {
      isExpanded = false;
      @Input() loggedIn: boolean;
      @Output() loginClicked = new EventEmitter&amp;lt;void&amp;gt;();
      @Output() logoutClicked = new EventEmitter&amp;lt;void&amp;gt;();

      collapse() {
        this.isExpanded = false;
      }

      toggle() {
        this.isExpanded = !this.isExpanded;
      }

      login() {
        this.loginClicked.emit();
      }

      logout() {
        this.logoutClicked.emit();
      }
    }
    ```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- `nav-menu.component.html`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    ```html
    &amp;lt;header&amp;gt;
      &amp;lt;nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3"&amp;gt;
        &amp;lt;div class="container"&amp;gt;
          &amp;lt;a class="navbar-brand" [routerLink]="['/']"&amp;gt;my_authenticated_app&amp;lt;/a&amp;gt;
          &amp;lt;button class="navbar-toggler" type="button" data-toggle="collapse" data-target=".navbar-collapse"
            aria-label="Toggle navigation" [attr.aria-expanded]="isExpanded" (click)="toggle()"&amp;gt;
            &amp;lt;span class="navbar-toggler-icon"&amp;gt;&amp;lt;/span&amp;gt;
          &amp;lt;/button&amp;gt;
          &amp;lt;div class="navbar-collapse collapse d-sm-inline-flex justify-content-end" [ngClass]="{ show: isExpanded }"&amp;gt;
            &amp;lt;ul class="navbar-nav flex-grow"&amp;gt;
              &amp;lt;li class="nav-item" [routerLinkActive]="['link-active']" [routerLinkActiveOptions]="{ exact: true }"&amp;gt;
                &amp;lt;a class="nav-link text-dark" [routerLink]="['/']"&amp;gt;Home&amp;lt;/a&amp;gt;
              &amp;lt;/li&amp;gt;
              &amp;lt;li class="nav-item" [routerLinkActive]="['link-active']"&amp;gt;
                &amp;lt;a class="nav-link text-dark" [routerLink]="['/counter']"&amp;gt;Counter&amp;lt;/a&amp;gt;
              &amp;lt;/li&amp;gt;
              &amp;lt;li class="nav-item" [routerLinkActive]="['link-active']"&amp;gt;
                &amp;lt;a class="nav-link text-dark" [routerLink]="['/fetch-data']"&amp;gt;Fetch data&amp;lt;/a&amp;gt;
              &amp;lt;/li&amp;gt;
              &amp;lt;li&amp;gt;
                &amp;lt;button class="btn btn-primary" (click)="login()" *ngIf="!loggedIn"&amp;gt;Login&amp;lt;/button&amp;gt;
                &amp;lt;button class="btn btn-primary" (click)="logout()" *ngIf="loggedIn"&amp;gt;Logout&amp;lt;/button&amp;gt;
              &amp;lt;/li&amp;gt;
            &amp;lt;/ul&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/nav&amp;gt;
    &amp;lt;/header&amp;gt;
    ```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Run the app and test authentication&lt;/li&gt;
&lt;/ol&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- When viewing the Fetch Data page, if you are not logged in, you will be redirected to the Microsoft login screen. If you are not redirected, click the Login button.

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When logging in for the first time, you will need to approve the app's permissions&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2NNvMNpC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s0v2v3kwx3ksthag7sl7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2NNvMNpC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s0v2v3kwx3ksthag7sl7.png" alt="Permissions requested"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After successfully logging in, refresh the Fetch Data page. The weather data should load.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
&lt;br&gt;
&lt;a href="#redeploy-to-app-service" class="anchor"&gt;&lt;br&gt;
&lt;/a&gt;&lt;br&gt;
Redeploy to App Service&lt;br&gt;
&lt;/h2&gt;


&lt;ol&gt;
&lt;li&gt;Following the same steps as before, publish the web app and deploy it to the App Service.&lt;/li&gt;
&lt;li&gt;Load the webpage and verify the authentication works.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#things-to-consider" class="anchor"&gt;
  &lt;/a&gt;
  Things to Consider
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;For security purposes, you can configure the &lt;code&gt;appsettings.json&lt;/code&gt; settings in the Configuration section in the App Service instead. This way, you aren't committing the client and tenant IDs in source control.&lt;/li&gt;
&lt;li&gt;For each API endpoint you want to secure, add the &lt;code&gt;Authorize&lt;/code&gt; attribute to the controller and add a new entry to the &lt;code&gt;protectedResourceMap&lt;/code&gt; in &lt;code&gt;app.module.ts&lt;/code&gt; with the given endpoint.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Authentication can be tricky, but with the &lt;code&gt;msal-angular&lt;/code&gt; package and the Microsoft Identity platform it's rather easy. With these libraries handling the technical details, we just have to handle the configuration.&lt;/p&gt;

</description>
      <category>azure</category>
      <category>angular</category>
      <category>dotnet</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>primitives vs objects in JAVASCRIPT : copying</title>
      <author>Anwar</author>
      <pubDate>Thu, 11 Mar 2021 17:27:30 +0000</pubDate>
      <link>https://dev.to/anwarr_________/primitives-vs-objects-in-javascript-copying-2o0i</link>
      <guid>https://dev.to/anwarr_________/primitives-vs-objects-in-javascript-copying-2o0i</guid>
      <description>&lt;p&gt;In the &lt;a href="https://dev.to/anwarr_________/primitives-vs-objects-in-javascript-mutability-2poo"&gt;previous article&lt;/a&gt; we talked about mutability and saw how primitives can't be mutated while objects can. &lt;br&gt;
In this article we're going to see how primitives and objects behave when we try to copy them.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#copying-primitives" class="anchor"&gt;
  &lt;/a&gt;
  Copying primitives
&lt;/h1&gt;

&lt;p&gt;let's start with something simple, let's create a variable &lt;code&gt;x&lt;/code&gt; that has a value of two&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let x = 2;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if we wanted to represent this variable visually, it's like a box with some value inside of it so here's how it might look(P.S : I'm not a designer üôÉ)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EKdQcr7s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7m0qfs3lwkt0tqr2mfz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EKdQcr7s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7m0qfs3lwkt0tqr2mfz.png" alt="visual representation of a variable"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Second thing I'd like to do is make a copy of &lt;code&gt;x&lt;/code&gt; and log it to the console&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;y = x;
console.log(y); 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and here the result, it works just fine&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EAhMrBum--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njm64sfwl12fr6qyh9ud.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EAhMrBum--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njm64sfwl12fr6qyh9ud.png" alt="result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now the question is, If we changed the value of &lt;code&gt;x&lt;/code&gt; would that affect &lt;code&gt;y&lt;/code&gt; ? let's see&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x = 100;
console.log(x , y); // what's the output??
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The change in &lt;code&gt;x&lt;/code&gt; won't affect the value stored in &lt;code&gt;y&lt;/code&gt; at all, here's the output if you don't believe me&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yJr6Ko_N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7b85g51igjq2lto9xjb4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yJr6Ko_N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7b85g51igjq2lto9xjb4.png" alt="result"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#our-first-rule" class="anchor"&gt;
  &lt;/a&gt;
  Our first rule
&lt;/h2&gt;

&lt;p&gt;In the statement &lt;code&gt;let y = x;&lt;/code&gt; we've created a new box &lt;code&gt;y&lt;/code&gt; and &lt;strong&gt;&lt;em&gt;copied&lt;/em&gt;&lt;/strong&gt; the value of &lt;code&gt;x&lt;/code&gt; inside it.&lt;br&gt;
We've two independent boxes and that makes sense, if you have two copies of the same book cutting a page form one won't affect the other.&lt;br&gt;
so our first rule is &lt;strong&gt;Primitive and its copy are two different variables with the same value&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l23HLYNu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ebpig7ueloccnrcpeyou.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l23HLYNu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ebpig7ueloccnrcpeyou.png" alt="copying primitive"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#practice-time" class="anchor"&gt;
  &lt;/a&gt;
  practice time
&lt;/h2&gt;

&lt;p&gt;Try to figure out the output of the following(&lt;em&gt;answered in the comments below, but try to figure it out yourself&lt;/em&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let str = "hello world";
let copy = str;
str.toUpperCase();
console.log(str , copy); // what's the output ?
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#copying-objects" class="anchor"&gt;
  &lt;/a&gt;
  Copying objects
&lt;/h1&gt;

&lt;p&gt;Objects are stored and copied differently, they're stored and copied by &lt;em&gt;reference&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-a-reference-" class="anchor"&gt;
  &lt;/a&gt;
  What's a reference ?
&lt;/h2&gt;

&lt;p&gt;It's simply &lt;strong&gt;an address in memory&lt;/strong&gt;, when you initialize some variable (&lt;code&gt;obj&lt;/code&gt; for example) and assign it an object you're storing the &lt;strong&gt;address&lt;/strong&gt; of that object in memory and when you try to perform an operation on that object it's like telling Javascript to go to that address and perform some operation.&lt;/p&gt;

&lt;p&gt;I like to think about references like I'm looking for &lt;code&gt;{name : "anwar" , age:19}&lt;/code&gt; inside the Javascripts engine's memory and the variable &lt;code&gt;obj&lt;/code&gt; telling me "hey, the object you're looking for is right over there"&lt;/p&gt;

&lt;p&gt;enough with the theoretical talk and let's look at an example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let obj = {name : "anwar" , age:19};
obj.age++;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this code the variable &lt;code&gt;obj&lt;/code&gt; is a &lt;strong&gt;reference(address in memory)&lt;/strong&gt; to &lt;code&gt;{name : "anwar" , age:19}&lt;/code&gt; this is how it might look&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k_Cjh2GR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bwepzc9ip4qi6f2pnzrg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k_Cjh2GR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bwepzc9ip4qi6f2pnzrg.png" alt="objects"&gt;&lt;/a&gt;&lt;br&gt;
now the line &lt;code&gt;obj.age++;&lt;/code&gt; remember &lt;code&gt;obj&lt;/code&gt; is the &lt;strong&gt;reference(again, an address in memory)&lt;/strong&gt; so this statement means : "go to the object at the following address and increment its &lt;code&gt;age&lt;/code&gt; property by one"&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-happens-when-you-copy-an-object-" class="anchor"&gt;
  &lt;/a&gt;
  what happens when you copy an object ?
&lt;/h2&gt;

&lt;p&gt;previously I mentioned that objects are copied by &lt;strong&gt;REFERENCE&lt;/strong&gt; it means that when you copy an object you're copying the reference of the that object, the object itself isn't duplicated.&lt;/p&gt;

&lt;p&gt;for example :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let obj = {name : "anwar" , age: 19};
let copy = obj;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this is how it looks &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fr1NKxze--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o7etjwklllsjzfxjcxf7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fr1NKxze--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o7etjwklllsjzfxjcxf7.png" alt="copying objects"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;obj&lt;/code&gt; and &lt;code&gt;copy&lt;/code&gt; are two variable that store references to the same object, they both point to the same object&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#our-second-rule" class="anchor"&gt;
  &lt;/a&gt;
  our second rule
&lt;/h2&gt;

&lt;p&gt;Now if we wanted to access or modify &lt;code&gt;{name : "anwar" , age: 19}&lt;/code&gt; we can do that using the variable &lt;code&gt;obj&lt;/code&gt; or &lt;code&gt;copy&lt;/code&gt; as they're referencing the same object.&lt;br&gt;
so our second rule &lt;strong&gt;an object and its copy are references to the exact same object&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;so if we &lt;em&gt;mutated&lt;/em&gt; &lt;code&gt;obj&lt;/code&gt; the same change will happen in &lt;code&gt;copy&lt;/code&gt;(and vice versa) because they reference the same object&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;remember, mutating is changing object properties without changing the object as a whole(changing the object as a whole is reassignment)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let obj = {name : "anwar" , age: 19};
let copy = obj;
obj.age++;
console.log(copy); // {name : "anwar" , age: 20}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;what if we did the following, what is the output ?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let obj = {name : "anwar" , age: 19};
let copy = obj;
obj = {};
console.log(obj , copy); //??
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the output will be &lt;code&gt;{}&lt;/code&gt; &lt;code&gt;{name : "anwar" , age: 19}&lt;/code&gt; because in the line &lt;code&gt;obj = {};&lt;/code&gt; we're not mutating &lt;code&gt;obj&lt;/code&gt; we're making it reference another object (reassigning it)&lt;/p&gt;

&lt;p&gt;So remember mutating one copy mutates all copies, reassigning one copy doesn't affect other copies.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ulvsV2L1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k96dzj116tsi6vnrk85w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ulvsV2L1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k96dzj116tsi6vnrk85w.png" alt="reassigning copies"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#comparing-objects" class="anchor"&gt;
  &lt;/a&gt;
  comparing objects
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#third-rule" class="anchor"&gt;
  &lt;/a&gt;
  Third rule
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;objects are compared by reference, meaning that objects are equal only if they have the same reference&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let arr = [1,2,3];
let arr_2 = [1,2,3];
console.log(arr === arr_2); // false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Javascript compares the references of both objects(arrays are objects) and these two arrays don't have the same address in memory so the result is &lt;code&gt;false&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PLaYdk-K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f6x55suksu82pav6s2tv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PLaYdk-K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f6x55suksu82pav6s2tv.png" alt="comparing objects"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#cloning-objects" class="anchor"&gt;
  &lt;/a&gt;
  cloning objects
&lt;/h1&gt;

&lt;p&gt;you might want to make a copy of an object that doesn't have the same reference so you can change stuff in one place without affecting other places, that's called &lt;strong&gt;object cloning&lt;/strong&gt; and you can read about it &lt;a href="https://www.javascripttutorial.net/object/3-ways-to-copy-objects-in-javascript/"&gt;here&lt;/a&gt; or &lt;a href="https://flaviocopes.com/how-to-clone-javascript-object/#deep-copy-vs-shallow-copy"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;And that's it for this article, hope you understand it and find it helpful &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>A Quick Look at Background Jobs in Ruby</title>
      <author>David Morales</author>
      <pubDate>Thu, 11 Mar 2021 17:03:41 +0000</pubDate>
      <link>https://dev.to/davidmles/a-quick-look-at-background-jobs-in-ruby-4hf0</link>
      <guid>https://dev.to/davidmles/a-quick-look-at-background-jobs-in-ruby-4hf0</guid>
      <description>&lt;p&gt;You are developing a Ruby application where the user can sign up, and after submitting the form, the user has to receive an email. Will you send it immediately? If so, the user will have to wait while the application connects to the email server and sends the actual email. That‚Äôs bad for the user experience.&lt;/p&gt;

&lt;p&gt;To solve that problem, the email should be sent in the background. That way it could be enqueued to be sent later, and the user sees the confirmation page quickly. Much better!&lt;/p&gt;

&lt;p&gt;This is accomplished by a queue system, which runs in the background waiting for new jobs to be executed. That‚Äôs the term used to refer to the tasks. In our case, the email is the job to be executed.&lt;/p&gt;

&lt;p&gt;There are a few of popular systems. A few need a database, such as &lt;a href="https://github.com/collectiveidea/delayed_job"&gt;Delayed::Job&lt;/a&gt;, while others prefer &lt;a href="https://davidmles.medium.com/what-is-redis-a-gentle-introduction-using-ruby-ba4c4055b84b"&gt;Redis&lt;/a&gt;, such as &lt;a href="https://github.com/resque/resque"&gt;Resque&lt;/a&gt; and &lt;a href="https://github.com/mperham/sidekiq"&gt;Sidekiq&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some common jobs that should be executed in the background are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sending emails&lt;/li&gt;
&lt;li&gt;Resizing images&lt;/li&gt;
&lt;li&gt;Importing a batch of data&lt;/li&gt;
&lt;li&gt;Updating a search server&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#delayedjob" class="anchor"&gt;
  &lt;/a&gt;
  Delayed::Job
&lt;/h2&gt;

&lt;p&gt;This system needs a database, because it uses a table to manage jobs. The ‚Äúdelayed‚Äù part in its name comes from the way it enqueues a job: using the delay method. So if we have an object to be run like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;method!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With Delayed::Job it can be enqueued this way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;method!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It‚Äôs only one method in the middle, very handy. However, the class can also be adapted so a method is always processed by Delayed::Job asynchronously. That‚Äôs accomplished using the &lt;code&gt;handle_asynchronously&lt;/code&gt; helper:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StatsWorker&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_totals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# long running method&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;handle_asynchronously&lt;/span&gt; &lt;span class="ss"&gt;:calculate_totals&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;stats_worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;StatsWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
&lt;span class="n"&gt;stats_worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;calculate_totals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# no need to call delay&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Delayed::Job even can assign priorities, run at a given time, and enqueue to multiple queues. For instance, to run a job in 5 minutes with a priority of 2, enqueue it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;run_at: &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;from_now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;priority: &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;method!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or using the &lt;code&gt;handle_asynchronously&lt;/code&gt; feature, we could write it as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;handle_asynchronously&lt;/span&gt; &lt;span class="ss"&gt;:calculate_totals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="ss"&gt;run_at: &lt;/span&gt;&lt;span class="nb"&gt;proc&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;from_now&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
                      &lt;span class="ss"&gt;priority: &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then calling the method as before:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;stats_worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;calculate_totals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#resque" class="anchor"&gt;
  &lt;/a&gt;
  Resque
&lt;/h2&gt;

&lt;p&gt;Resque is based on Delayed::Job, but it uses Redis instead of a database. It also provides a Sinatra application to monitor jobs so you can see which ones are running and their queues.&lt;/p&gt;

&lt;p&gt;To make a class compatible with Resque so it can be run in the background, a new method must be implemented: &lt;code&gt;perform&lt;/code&gt;. This is the method that will be called by Resque:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StatsWorker&lt;/span&gt;
  &lt;span class="vi"&gt;@queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:stats_queue&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;calculate_totals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_totals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# long running method&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Resque&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;enqueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;StatsWorker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;self.perform&lt;/code&gt; method can do anything, it doesn‚Äôt need to be a ‚Äúcaller‚Äù like in this case. I could have moved the long running method inside.&lt;/p&gt;

&lt;p&gt;To schedule a job to be run at a specified time, Resque needs the &lt;code&gt;resque-scheduler&lt;/code&gt; gem. Once installed, the jobs can be enqueued like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Resque&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;enqueue_in&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;StatsWorker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Resque doesn‚Äôt support numeric priorities as Delayed::Job, but it‚Äôs based in the order the queues are defined. So the first ones have the higher priority. This is defined when launching the process:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;QUEUES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;high,low rake resque:work
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Resque will be checking the ‚Äúhigh‚Äù queue and running its jobs. When that queue is empty, it will start checking the ‚Äúlow‚Äù queue.&lt;/p&gt;

&lt;p&gt;Then the class must define the queue to use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StatsWorker&lt;/span&gt;
  &lt;span class="vi"&gt;@queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:high&lt;/span&gt;
  &lt;span class="c1"&gt;# rest of the code&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#sidekiq" class="anchor"&gt;
  &lt;/a&gt;
  Sidekiq
&lt;/h2&gt;

&lt;p&gt;Sidekiq also needs Redis to work, but its main difference is that it uses threads, so several jobs can be executed in parallel using the same Ruby process. Also, it uses the same message format than Resque, so the migration should be easy.&lt;/p&gt;

&lt;p&gt;Knowing its use of threads, it‚Äôs clear that its main intention was to be the fastest job processing system for Ruby. It‚Äôs several times faster than Resque and Delayed::Job.&lt;/p&gt;

&lt;p&gt;Like Resque, it includes a Sinatra application to monitor jobs, which ones are scheduled, which ones failed and are pending to retry, and so on.&lt;/p&gt;

&lt;p&gt;Since it‚Äôs compatible with Resque, classes to be processed by Sidekiq must implement the &lt;code&gt;perform&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StatsWorker&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Sidekiq&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Worker&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;calculate_totals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_totals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# long running method&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;StatsWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;perform_async&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It‚Äôs also very similar to run this job in the future:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;StatsWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;perform_in&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To assign a priority to a job, it uses the same approach than Resque: strict queue ordering. When creating them, the first ones have the higher priority. This is defined when launching Sidekiq:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sidekiq &lt;span class="nt"&gt;-q&lt;/span&gt; critical &lt;span class="nt"&gt;-q&lt;/span&gt; default
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is one way to define queues. They can also be defined as weighted queues, so if a queue is defined as weight 3, it will be 3 times more checked:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sidekiq &lt;span class="nt"&gt;-q&lt;/span&gt; critical,3 &lt;span class="nt"&gt;-q&lt;/span&gt; default
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Like in Resque, the class must define the queue to use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Stats&lt;/span&gt;
  &lt;span class="n"&gt;queue_as&lt;/span&gt; &lt;span class="ss"&gt;:critical&lt;/span&gt;

  &lt;span class="c1"&gt;# rest of the code&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#activejob" class="anchor"&gt;
  &lt;/a&gt;
  ActiveJob
&lt;/h2&gt;

&lt;p&gt;Because each system has its own syntax, Ruby on Rails integrates ActiveJob, a standard way to deal with these systems, so the application can be agnostic and able to switch among systems, like when using ActiveRecord for the database, keeping the same syntax.&lt;/p&gt;

&lt;p&gt;The first step is to configure it with the chosen system. Let‚Äôs assume that we use Sidekiq.&lt;/p&gt;

&lt;p&gt;A job looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StatsJob&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationJob&lt;/span&gt;
  &lt;span class="n"&gt;queue_as&lt;/span&gt; &lt;span class="ss"&gt;:default&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;calculate_totals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_totals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# long running method&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Stats&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;perform_later&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you see, the way to define a queue for a class is the same as Sidekiq. It can also be set when enqueuing the job:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Stats&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;queue: :high&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;perform_later&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that these queues must be created using the queuing system of choice when starting the process.&lt;/p&gt;

&lt;p&gt;Of course, it supports scheduling:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Stats&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;wait: &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;perform_later&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Background jobs are an essential part in any medium or big project. Choosing a queue managing system is a decision to be made sooner or later. Although there are other alternatives out there that are active as well, Delayed::Job, Resque and Sidekiq are the most popular ones.&lt;/p&gt;

&lt;p&gt;I recommend Sidekiq because it‚Äôs easy to use and efficient. It‚Äôs also very fast compared to Delayed::Job and Resque. Its excellent user interface to manage jobs and queues is also a good point.&lt;/p&gt;

&lt;p&gt;Nonetheless it requires Redis, so if your application runs short of RAM, maybe it would be a good idea to stick with Delayed::Job and your database. It would be a good start, and by using ActiveJob you can always migrate to Sidekiq in the future without changing a single line of code in your jobs.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>ruby</category>
      <category>rails</category>
    </item>
    <item>
      <title>
Here Are 7 Fun, Yet Challenging Front-End Ideas You Can¬†Code¬†
</title>
      <author>Trevor Lasn</author>
      <pubDate>Thu, 11 Mar 2021 16:32:36 +0000</pubDate>
      <link>https://dev.to/trevorlasn/here-are-7-fun-yet-challenging-front-end-ideas-you-can-code-2k3b</link>
      <guid>https://dev.to/trevorlasn/here-are-7-fun-yet-challenging-front-end-ideas-you-can-code-2k3b</guid>
      <description>&lt;p&gt;Programming is a difficult thing to master. I found one of the best ways to master programming is simply building as much as you can. Hard work pays off‚Ää-‚Ääespecially with programming.&lt;/p&gt;

&lt;p&gt;If you're new to these articles, they serve more or less as a source of inspiration. Pick a challenge that makes you excited to code and get on with building it.&lt;/p&gt;

&lt;p&gt;You can use any tools you like for the challenges. So if you've got something you'd like to practice, feel free to give it a go.&lt;/p&gt;

&lt;p&gt;If you're in a hurry and never want to run out of coding ideas‚Ää-‚Ää&lt;a href="https://gumroad.com/l/IuqKc"&gt;I've compiled a list of over 100 challenges here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: Please check out the original sources for the challenges as well. &lt;/p&gt;

&lt;p&gt;Without further ado, here are the challenges!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#1-tabbar-animations-built-with-only%C2%A0css" class="anchor"&gt;
  &lt;/a&gt;
  1. "Tabbar animations"- Built with only¬†CSS
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZajKZ93---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6gwcwceoc9838qt2g9w.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZajKZ93---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6gwcwceoc9838qt2g9w.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A beautiful-looking tab that animates the icons when you hover or click them. Pay extra attention to the small animations.¬†&lt;/p&gt;

&lt;p&gt;"Tabbar animation‚Ää-‚ÄäOnly CSS"‚Ää-‚ÄäBy Milan¬†Raring&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://codepen.io/milanraring/pen/qBEPzKB"&gt;https://codepen.io/milanraring/pen/qBEPzKB&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What you will learn by building the Tabbar animations&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to use advanced CSS concepts such as transforms, animations, transitions, etc.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#2-crowdfunding-product%C2%A0page" class="anchor"&gt;
  &lt;/a&gt;
  2. Crowdfunding product¬†page
&lt;/h3&gt;

&lt;p&gt;Code the crowdfunding product page and get it looking as close to the design as possible. Check out the challenge page here for more details and instructions.¬†&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IpicqVBG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5cilqgbzvr7tkweo7wqh.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IpicqVBG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5cilqgbzvr7tkweo7wqh.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;"Crowdfunding product¬†page"&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://www.frontendmentor.io/challenges/crowdfunding-product-page-7uvcZe7ZR"&gt;https://www.frontendmentor.io/challenges/crowdfunding-product-page-7uvcZe7ZR&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What you will learn by building the crowdfunding product¬†page&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;See the number of total backers increment by one after confirming a pledge.&lt;/li&gt;
&lt;li&gt;Toggle if the product is bookmarked or not.&lt;/li&gt;
&lt;li&gt;CSS hover states for interactive components.&lt;/li&gt;
&lt;li&gt;CSS and HTML for creating a silky smooth layout.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#3-css-adventure-pack" class="anchor"&gt;
  &lt;/a&gt;
  3. "CSS Adventure Pack"
&lt;/h3&gt;

&lt;p&gt;We're headed back to school‚Ää-‚Ää Coding school that is. Check out this awesome adventure pack Braydon Coyer made with only using CSS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pH5IfHpM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtjdt5rbs87ewj7lutvy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pH5IfHpM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtjdt5rbs87ewj7lutvy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;"CSS Adventure Pack"‚Ää-‚ÄäBy Braydon¬†Coyer&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://codepen.io/braydoncoyer/pen/KKNRaKQ"&gt;https://codepen.io/braydoncoyer/pen/KKNRaKQ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What you will learn by building the CSS adventure pack&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to use HTML and CSS to draw real-life objects.&lt;/li&gt;
&lt;li&gt;How to use CSS variables.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#4-launch-countdown-timer" class="anchor"&gt;
  &lt;/a&gt;
  4. Launch countdown timer
&lt;/h3&gt;

&lt;p&gt;We've all seen countdown timers. Why not build your own? Try building out the countdown timer and get it looking as close to the design as possible.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QF5ycOY4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rg16hzo5r9zigw1nwfto.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QF5ycOY4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rg16hzo5r9zigw1nwfto.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;"Launch countdown timer"&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://www.frontendmentor.io/challenges/launch-countdown-timer-N0XkGfyz-"&gt;https://www.frontendmentor.io/challenges/launch-countdown-timer-N0XkGfyz-&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What you will learn by building the launch countdown timer&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Countdown timer that ticks down every second&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bonus Points: When a number changes, make the card flip from the middle.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#5-substack-reader%C2%A0clone" class="anchor"&gt;
  &lt;/a&gt;
  5. Substack reader¬†clone
&lt;/h3&gt;

&lt;p&gt;Any Substack newsletter you subscribe to will automatically show up in the reader. If you want, you can add third-party RSS feeds, too.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J4yud11i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7eknrbefquhnhmw576s5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J4yud11i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7eknrbefquhnhmw576s5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: The challenge is to only re-create the front-end layout. Use any dummy data as you see fit.&lt;/p&gt;

&lt;p&gt;Substack reader‚Ää-‚Ää&lt;a href="https://reader.substack.com/inbox"&gt;https://reader.substack.com/inbox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What you will learn by building the Substack reader¬†clone&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to use CSS and HTML to re-create a modern-looking app.&lt;/li&gt;
&lt;li&gt;Bonus points: You can use any newsletter aggregator API to make it functional.¬†&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#6-football-soccer-match-scorecard-component" class="anchor"&gt;
  &lt;/a&gt;
  6. Football (soccer) match scorecard component
&lt;/h3&gt;

&lt;p&gt;Try building out the football match scorecard and get it looking as close to the design as possible. Don't skip on the small details, such as CSS shadows and icons.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xE_hGbkR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mbd23w37chxdmmdhr58m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xE_hGbkR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mbd23w37chxdmmdhr58m.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;"Football (soccer) match score component"‚Ää-‚ÄäBy H√•vard Brynjulfsen&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://codepen.io/havardob/pen/MWKWZxZ"&gt;https://codepen.io/havardob/pen/MWKWZxZ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What you will learn by building the Football (soccer) match scorecard component&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to use CSS and HTML in harmony to create a beautiful-looking card.&lt;/li&gt;
&lt;li&gt;Advanced CSS features such as shadows and variables.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#7-task-management-ui" class="anchor"&gt;
  &lt;/a&gt;
  7. Task Management UI
&lt;/h3&gt;

&lt;p&gt;Look at the beauty. Don't you wish all apps look as sweet as this one? Check out the working version here.¬†&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2lAi1u7j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2e9qdy1t8aeof1brygl2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2lAi1u7j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2e9qdy1t8aeof1brygl2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;"Task Management UI"‚Ää-‚ÄäBy Aaron¬†McGuire&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://codepen.io/aaronmcg/pen/GRjaRva"&gt;https://codepen.io/aaronmcg/pen/GRjaRva&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What you will learn by building the task management UI&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to craft beautiful applications with CSS, HTML, and JavaScript&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Conclusion&lt;br&gt;
Thanks for reading. Happy coding!&lt;/p&gt;

&lt;p&gt;Looking for more coding ideas? Never run out of coding ideas, ever again. &lt;a href="https://gumroad.com/l/IuqKc"&gt;Get access here to a bunch of front-end challenges by me.&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>challenge</category>
      <category>react</category>
    </item>
    <item>
      <title>Back to coding with Our Time For Tech</title>
      <author>Sara L.G</author>
      <pubDate>Thu, 11 Mar 2021 16:04:52 +0000</pubDate>
      <link>https://dev.to/ourtimefortech/back-to-coding-with-our-time-for-tech-9lf</link>
      <guid>https://dev.to/ourtimefortech/back-to-coding-with-our-time-for-tech-9lf</guid>
      <description>&lt;p&gt;My journey in Tech started almost 10 years ago when I got my first web developer position at a digital agency. After a few years working I decided to take a small break, and that small break turned into almost 4 years as a stay-at-home mom.&lt;/p&gt;

&lt;p&gt;I always knew sooner or later I would come back so, when I felt it was the right moment to start job-hunting, for a couple of months I used every free minute I had to go over as many freeCodeCamp courses I could and to read as many articles I found and was when I realised I remembered more than I thought.&lt;/p&gt;

&lt;p&gt;But I think knowing how to code is not enough anymore. Nowadays it is much more difficult to find a dev position than it was 10 years ago, when it could be done by knowing some HTML, CSS, Javascript or a CMS like WordPress. Also now I'm looking for a more specific role, it needs to be remote, preferably within a team... That's why when I discovered &lt;a href="https://ourtimefortech.org/"&gt;Our Time For Tech&lt;/a&gt; (A nonprofit online program that empowers early-career &amp;amp; career-changing Women in Tech) and its codeCollab program I knew it was the final push I needed.&lt;/p&gt;

&lt;p&gt;I've been lucky enough to be part of it and I would like to share my journey with you. Over the next 12 weeks we (a group of 5 female coders) with the help of two experienced developers will be building a web app where we not only will develop further our coding skills, but also will learn and develop important ones, like team collaboration and communication, among others.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-have-i-done-so-far" class="anchor"&gt;
  &lt;/a&gt;
  So, what have I done so far?
&lt;/h2&gt;

&lt;p&gt;As a brief recap, things I (we) have been working on over the last two weeks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Setting up the environment. Installing Rails 6, Node, Yarn and Postgresql. Dealing with errors during the installation, like the need of a different Ruby version.&lt;/li&gt;
&lt;li&gt;Learning how to make a pull request. During my previous experience as a developer I never had to used them, and even if I had a good knowledge of git I had forgotten most of it. Also I think back at that time pull requests weren't so widely spread in work environments as they are now, but I can be mistaken on this affirmation.&lt;/li&gt;
&lt;li&gt;Reading a lot about Ruby on Rails as I have never used it before, migrations, SQL commands, CLI commands... Searching and going through technical documentation when I get stuck.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And last, but not least:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Thinking big: we are not only supposed to implement the tasks we are told, we are in charge of deciding (or trying at least) the best way of doing things, what can and cannot to deliver (find the MVP), collaborating and thinking as a group. (With the proper guidance of course). &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This last point was probably the one I was more worried about at the beginning, but now is probably the one that motivates me more. Looking forward to another week of challenges!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>womenintech</category>
      <category>firstpost</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>Day 73 Of 100DaysOfCode: Data Visualization</title>
      <author>Durga Pokharel</author>
      <pubDate>Thu, 11 Mar 2021 15:15:45 +0000</pubDate>
      <link>https://dev.to/iamdurga/day-73-of-100daysofcode-data-visualization-44nm</link>
      <guid>https://dev.to/iamdurga/day-73-of-100daysofcode-data-visualization-44nm</guid>
      <description>&lt;p&gt;This is my 73th day of  #100daysofcode and  #python learning. Today, I keep learning from Datacamp and also completed some assignments. Also, I am present in one bootcamp from &lt;a href="https://dphi.tech/lms/learn/data-analysis-and-visualization-101/870"&gt;dphi&lt;/a&gt; where I did data visualization on data given on assignment, which contained some metropolitan data and publicly available &lt;a href="https://raw.githubusercontent.com/dphi-official/Assignment_Solutions/master/Standard%20Metropolitan%20Areas%20Data%20-%20train_data%20-%20data.csv"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After I got &lt;a href="https://codefornepal.org/fellowship/"&gt;Hawkins Fellowship&lt;/a&gt;, I am learning from Datacamp because I have access to most courses there now. Hence my journey of learning Algorithms from Coursera is in pending state. I am going to write some of assignments I completed today.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dphi-assignment" class="anchor"&gt;
  &lt;/a&gt;
  dphi Assignment
&lt;/h1&gt;

&lt;p&gt;All the assignments were quizz but I had to write code in order to find the right answer and it was quite fun to try.&lt;/p&gt;

&lt;p&gt;I started by reading CSV file using Pandas.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt; &lt;span class="n"&gt;inline&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://raw.githubusercontent.com/dphi-official/Assignment_Solutions/master/Standard%20Metropolitan%20Areas%20Data%20-%20train_data%20-%20data.csv"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#question-1-what-is-the-mean-area-of-lands" class="anchor"&gt;
  &lt;/a&gt;
  Question 1: What is the Mean area of lands?
&lt;/h2&gt;

&lt;p&gt;Not that hard, just take mean.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;land_area&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output of the code is,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mf"&gt;2615.7272727272725&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#question-2-what-is-the-crime-rate-among-all-metropolitan-areas" class="anchor"&gt;
  &lt;/a&gt;
  Question 2: What is the crime rate among all Metropolitan Areas?
&lt;/h2&gt;

&lt;p&gt;Again it is the max value of single column.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crime_rate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output of the code is,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;85.62
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#question-3-what-is-the-average-crime-rate-among-all-metropolitan-areas" class="anchor"&gt;
  &lt;/a&gt;
  Question 3: What is the average crime rate among all metropolitan areas?
&lt;/h2&gt;

&lt;p&gt;Same as previous, find mean of single column.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crime_rate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output of the above code is,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;55.64303030303031
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#question-4-what-is-the-top-5-data-of-region-4" class="anchor"&gt;
  &lt;/a&gt;
  Question 4: What is the top 5 data of region 4?
&lt;/h2&gt;

&lt;p&gt;Just do boolean masking.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#more" class="anchor"&gt;
  &lt;/a&gt;
  More
&lt;/h2&gt;


&lt;p&gt;I have uploaded a fully loaded &lt;a href="https://github.com/iamdurga/Random-Learning-Stuffs/blob/main/dphi%20-%20Data%20Analysis%20Bootcamp%20Assignment.ipynb"&gt;notebook here&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;
&lt;br&gt;
&lt;p&gt;Day 73 Of &lt;a href="https://twitter.com/hashtag/100DaysOfCode?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#100DaysOfCode&lt;/a&gt; and &lt;a href="https://twitter.com/hashtag/Python?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Python&lt;/a&gt; &lt;br&gt;Data Visualization&lt;a href="https://twitter.com/hashtag/100DaysOfCode?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#100DaysOfCode&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/WomenWhoCode?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#WomenWhoCode&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/CodeNewbies?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#CodeNewbies&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/beginner?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#beginner&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/DEVCommunity?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#DEVCommunity&lt;/a&gt; &lt;a href="https://t.co/RF3dNCgAkm"&gt;pic.twitter.com/RF3dNCgAkm&lt;/a&gt;&lt;/p&gt;‚Äî Durga Pokharel (@mathdurga) &lt;a href="https://twitter.com/mathdurga/status/1370023238957293578?ref_src=twsrc%5Etfw"&gt;March 11, 2021&lt;/a&gt;&lt;br&gt;
&lt;/blockquote&gt; 

</description>
      <category>womenintech</category>
      <category>100daysofcode</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>10 Tips to Help You Stand Out as a Java Developer</title>
      <author>John Selawsky</author>
      <pubDate>Thu, 11 Mar 2021 15:04:19 +0000</pubDate>
      <link>https://dev.to/selawsky/10-tips-to-help-you-stand-out-as-a-java-developer-91</link>
      <guid>https://dev.to/selawsky/10-tips-to-help-you-stand-out-as-a-java-developer-91</guid>
      <description>&lt;p&gt;Java is has been one of the most popular programming languages for decades. The &lt;a href="https://slashdata-website-cms.s3.amazonaws.com/sample_reports/EiWEyM5bfZe1Kug_.pdf"&gt;number of specialists&lt;/a&gt; who want to become proficient in Java is rapidly growing. Because the competition is fierce, its no longer enough to just be a good Java developer ‚Äî you need to acquire deep knowledge and get familiar with many concepts to be ahead of the competition. If you‚Äôre the one who‚Äôs stuck asking yourself ‚ÄúWhat should I learn to stand out as a Java developer?‚Äù, this blog post can help you figure things out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-get-a-solid-base-and-clear-idea-of-oop-principles" class="anchor"&gt;
  &lt;/a&gt;
  1. Get a Solid Base and Clear Idea of OOP Principles
&lt;/h2&gt;

&lt;p&gt;Java is an object-oriented language, so instead of underestimating the OOP principles, developers should make an effort to acquire a deep knowledge of the concept. Learn how to apply OOP principles when programming and gain an in-depth knowledge of object modeling, SOLID principles, design patterns, inheritance, and other concepts. These are things you should bear in mind when writing software, especially in a modern object-oriented language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-read-books-that-cover-those-principles" class="anchor"&gt;
  &lt;/a&gt;
  2. Read Books That Cover Those Principles
&lt;/h2&gt;

&lt;p&gt;Having these concepts under your belt will help you easily build projects applying OOP principles. Many concepts are covered in some classic books that I think are mandatory reading for developers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;‚ÄúDesign Patterns: Elements of Reusable Object-Oriented Software‚Äù by ‚ÄúGang of Four‚Äù&lt;/li&gt;
&lt;li&gt;‚ÄúClean Code‚Äù by ‚ÄúUncle Bob‚Äù Robert Martin&lt;/li&gt;
&lt;li&gt;‚ÄúClean Architecture‚Äù by ‚ÄúUncle Bob‚Äù Robert Martin&lt;/li&gt;
&lt;li&gt;‚ÄúRefactoring‚Äù (2nd edition) by Martin Fowler and Kent Beck&lt;/li&gt;
&lt;li&gt;‚ÄúExtreme programming explained‚Äù by Kent Beck&lt;/li&gt;
&lt;li&gt;‚ÄúTest Driven Development: By Example‚Äù by Kent Beck&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-get-familiar-with-the-spring-framework" class="anchor"&gt;
  &lt;/a&gt;
  3. Get Familiar with the Spring Framework
&lt;/h2&gt;

&lt;p&gt;The Spring framework plays a significant role in modern Java development. Spring framework components, like Spring MVC and Spring Boot, are commonly used by companies for building microservices or web apps. Developers who understand all the advantages of the Spring framework are more likely to shine in their field, turning a local Java method into a management operation or remote procedure.&lt;/p&gt;

&lt;p&gt;If you‚Äôve never used Spring before, the first step is to familiarize yourself with essential Spring things, like the principles of Dependency Injection (DI), Inversion of Control (IoC), and Spring MVC in general.&lt;/p&gt;

&lt;p&gt;The next big milestone is definitely Spring Boot and the capabilities that it brings to the table for building and running web apps. Learn the main important annotations it provides and their behavior, and consider &lt;a href="https://www.jrebel.com/blog/spring-annotations-cheat-sheet"&gt;Spring annotations in general&lt;/a&gt; (especially if you come from a more XML-based background).&lt;/p&gt;

&lt;p&gt;Such ones as @Repository, @Service, and @Controller or @RequestMapping will become your everyday buddies. Try to &lt;a href="https://spring.io/guides/gs/spring-boot/"&gt;build a small web app&lt;/a&gt; using them. Of course, for this learning, you need a good understanding of design patterns and how the components these annotations define are supposed to interact with each other.&lt;/p&gt;

&lt;p&gt;You will be surprised how easy it is to launch and run your newly created application with Spring Boot, compared to other deployment options you may have used with Java before. This framework is designed to simplify your life enormously and allow you to just obtain a runnable ‚Äúall-inclusive‚Äù .jar file, which you either can run from the command line on your computer, from a Docker container, or deploy as a normal Linux service and put it behind Nginx if you don‚Äôt use Docker in production.&lt;/p&gt;

&lt;p&gt;The next Spring component which you will definitely want to learn sooner rather than later is Spring Security. Everything you need to set up proper access to your endpoints and service in general, authentication and authorization, login, registration, and different security providers, you will find there.&lt;/p&gt;

&lt;p&gt;Another pretty big component you also can come across on quite a few projects is Spring Data. It provides a convenient and elegant abstraction for data access. It is not an ORM per se and not a JPA implementation ‚Äî it just provides a versatile abstraction on top of it, allowing you to reduce the amount of code needed for data manipulation, and make it straightforward and supportable.&lt;/p&gt;

&lt;p&gt;Finally, a component worth mentioning explicitly (don‚Äôt forget that the whole Spring is huge) is Spring AOP (Aspect Oriented Programming). It provides a way to include various annotations to control declaratively multiple aspects of your code behavior, such as logging, exceptions, or transactions. Understanding this philosophy and approach will give you a boost at any job interview.&lt;/p&gt;

&lt;p&gt;There‚Äôs no doubt that Spring is a big fish in the Java world, but it‚Äôs not the only one. Not every Java developer wants to submit to total Spring dominance ‚Äî some want to be specialized in different technologies and go deeper in different domains. For these developers, I would distinguish Java EE stack. Although old, it is still around, especially in older, large projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-learn-the-most-essential-apis-and-libraries" class="anchor"&gt;
  &lt;/a&gt;
  4. Learn the Most Essential APIs and Libraries
&lt;/h2&gt;

&lt;p&gt;APIs and libraries go next to Java frameworks, so it‚Äôs important to know them if you want to stand out. They are an integral part of the Java ecosystem and have the second biggest community on the &lt;a href="https://stackoverflow.com/questions/tagged/java%20api?sort=MostVotes&amp;amp;edited=true"&gt;StackOverflow&lt;/a&gt; Q&amp;amp;A website.&lt;/p&gt;

&lt;p&gt;This is an enormously broad topic that includes many things at once ‚Äî I could dedicate a dozen of articles to it ‚Äî but speaking in general, in-depth knowledge of the core APIs, main and third-party libraries, as well as Java Development Kit (JDK), defines a high-skilled Java developer. To prevent confusion, I should say that the specialists are not expected to learn all possible APIs and know every single element in the Library. It‚Äôs enough to have a clear understanding of Apache Commons, Guava, Maven, and a few other major APIs and libraries.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-get-deep-knowledge-of-java-11" class="anchor"&gt;
  &lt;/a&gt;
  5. Get Deep Knowledge of Java 11
&lt;/h2&gt;

&lt;p&gt;Recently, the Java developer community witnessed the release of the last version of Java 15. However, the software development flow in the Java domain is usually pretty slow when it comes to adopting new versions of anything ‚Äî the principle ‚Äúif it ain‚Äôt broke, don‚Äôt fix it‚Äù is especially embraced in enterprise projects.&lt;/p&gt;

&lt;p&gt;Every small change happening in those projects has to fit with high-security requirements and it is common to use older technologies. For instance, in the bank, airline, or insurance system, you are unlikely to meet any technologies younger than five years or so. This is where older means stable, reliable, and secure.&lt;/p&gt;

&lt;p&gt;Nevertheless, new versions are getting slowly but steadily adopted in these domains too. After every new release, more and more companies will require you to be familiar with the new features. Java 8, which was a big breakthrough for its time, took a few years to become an industry standard. You definitely ‚Äúshall not pass‚Äù any longer without mastering the Stream API, default interface methods, Lambda expressions, Java Time API, and other &lt;a href="https://www.journaldev.com/2389/java-8-features-with-examples"&gt;major features of this version&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Further Java versions kept up the journey of the active feature adoption. The next LTS version was Java 11 ‚Äî this is the one you may often meet in job requirements these days. Many companies won‚Äôt switch from it until the next LTS is released, which is supposed to be Java 17 coming in September 2021. I definitely don‚Äôt recommend you start your job hunt before getting in touch and familiarizing yourself with all of &lt;a href="https://mkyong.com/java/what-is-new-in-java-11"&gt;Java 11 features&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The later Java versions, up to 15 as it was mentioned above, are still to some extent or other in the process of gaining wider adoption, but they‚Äôre already in use quite a bit. For example, there is already an &lt;a href="https://aws.amazon.com/corretto/"&gt;Amazon Corretto 15&lt;/a&gt; release available.&lt;/p&gt;

&lt;p&gt;Either way, an important practice for a good Java developer is to follow every new release very attentively and get familiar with all the new features promptly. None of them can be ignored.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-focus-on-jvm-and-its-internals" class="anchor"&gt;
  &lt;/a&gt;
  6. Focus on JVM and its Internals
&lt;/h2&gt;

&lt;p&gt;Java doesn‚Äôt exist without JVM (Java Virtual Machine). It‚Äôs a runtime engine that allows Java apps to run on any possible platform. So, if you want to join a group of good Java developers, understanding the principles of JVM work is a must. Other than that, the knowledge of a virtual machine will help you with problem-solving during development. So, among other things, make sure to master JVM system threads and the way Java is executed in the runtime environment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-have-multiple-methodologies-at-hand" class="anchor"&gt;
  &lt;/a&gt;
  7. Have Multiple Methodologies at Hand
&lt;/h2&gt;

&lt;p&gt;If you want to stay ahead of many other Java programmers, you should pay special attention to different methodologies. First of all, get familiar with Agile and especially SCRUM, but also understand Waterfall and get ready to work with it. As long as many developers select the methodology depending on the clients‚Äô preferences, knowing many of them will help you be on top of that.&lt;/p&gt;

&lt;p&gt;Additionally, you can learn extreme programming techniques (the classic book by Kent Beck is mentioned above) to gain richer experience and effective work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-get-used-to-automated-testing" class="anchor"&gt;
  &lt;/a&gt;
  8. Get Used to Automated Testing
&lt;/h2&gt;

&lt;p&gt;The thing that distinguishes a real Java developer from someone trying to look like one is the ability to do automated testing. In simple terms, any kind of testing which is not manual can be considered automated: unit, integration, and others, which need to be improved if you want to be a great Java coder. You should also learn how to deliver projects in such a way that the tests are a part of your CI/CD pipeline and the code doesn‚Äôt go to production if some important parts are not covered by tests.&lt;/p&gt;

&lt;p&gt;Here‚Äôs how your development and further deployment flow could look like with testing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You develop a component of your application and cover it with unit tests until proceeding to the next one.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you follow this practice thoroughly, you may notice how it implicitly forces you to keep good modularity of code. A good unit test is something that allows you to run your component‚Äôs code in isolation. You cannot use the database, external APIs, or rely on other classes. Only your component is on the scene at the moment.&lt;/p&gt;

&lt;p&gt;You feed it with demo data that you put together accurately, taking in mind all the edge cases like empty or null values and you check that you get the output exactly as expected. After doing that, you can be sure that your component is not a source of failure and you can just rely on its logic in other places. JUnit 5 and Mockito are your best friends here ‚Äî master and use them every day.&lt;/p&gt;

&lt;p&gt;Also, another advantage is using TDD when you write your test cases and tests even before writing the component code itself. Here‚Äôs an interesting &lt;a href="https://daedtech.com/5-things-ive-learned-in-20-years-of-programming/"&gt;story about how much debugging time can the TDD save you sometimes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;After all the components are developed like that, you need to provide automated integration testing.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In most cases, that just means leveraging your application programmatically with a simple script, running it with some input data, and controlling the output (you will often do this in a Docker container). However, sometimes it means testing separate components or a chain of them, but this time using real external resources like database or file storage.&lt;/p&gt;

&lt;p&gt;Either way, think about what input edge cases you can have globally and check whether your app can handle these cases correctly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Finally, you should embed the tests into your CI/CD pipeline.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A classic modern way is that once you submit your code into your Git repository, either on commit, pull request, or merge to a specific branch, a Hook is fired. This runs a deployment script and leverages a Docker container, which tries to build your app, or a Docker image with your app, depending on your deployment.&lt;/p&gt;

&lt;p&gt;Either way, given that the app was built successfully (and you automatically get protected from broken apps in production if it wasn‚Äôt), it tries to run all your tests within the container, both unit, and integration. If any of the tests fail, the whole process fails, and Git does not approve the pull request automatically or just fails your build.&lt;/p&gt;

&lt;p&gt;Some details of this flow will vary, but in general, this method of app delivery will bring you unambiguous quality control literally on a per-commit basis, saving you hours of firefighting when your app crashes in production.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-polish-up-your-coding-skills" class="anchor"&gt;
  &lt;/a&gt;
  9. Polish Up Your Coding Skills
&lt;/h2&gt;

&lt;p&gt;Coding is mainly about practicing. No matter how many books you read, they won‚Äôt be as effective as if you had honed your knowledge in practice. Fortunately, coding these days is not that boring as you may think ‚Äî there are many gamified platforms on the web to make coding engaging and even fun.&lt;br&gt;
Among a whole lot of platforms and courses, I would recommend considering the following.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-codegym" class="anchor"&gt;
  &lt;/a&gt;
  1. CodeGym
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y0XwWbng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/743fa8ed-3d31-44cc-8cb8-a229932e88d8/" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y0XwWbng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/743fa8ed-3d31-44cc-8cb8-a229932e88d8/" alt="0_gkhbyNex5oATKxMD.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learning Java by doing is what &lt;a href="https://codegym.cc/"&gt;CodeGym&lt;/a&gt; strongly recommends. Right after joining the course, you will be forced to complete over 1200 hands-on tasks and hence write lots of code. Thanks to an instant verification option, you will have your code reviewed by a virtual mentor so that you know what to improve. You can also join the CodeGym community and communicate with other students sharing your thoughts about practicing Java on the platform.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-codewars" class="anchor"&gt;
  &lt;/a&gt;
  2. Codewars
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sRC-TzmI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/2eeba3b8-c78a-4b74-be02-e38b32a32551/" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sRC-TzmI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/2eeba3b8-c78a-4b74-be02-e38b32a32551/" alt="0_Xdj6sySRj0TfIFTY.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.codewars.com/"&gt;Codewars&lt;/a&gt; has been created by community members to let newcomers master over 20 programming languages. The learning is designed in such a way that the students polish up their skills by training with other developers on challenges called kata. As soon as the learners complete every next task, the platform rewards them with honor and ranks and sends you more advanced challenges. Here, at Codewars, you can also build your own kata and ask your peers to resolve them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-cyberdojo" class="anchor"&gt;
  &lt;/a&gt;
  3. Cyber-Dojo
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DFlLEcXc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/ea6f731e-01b2-4323-ac53-0e0b6cf826f4/" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DFlLEcXc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/ea6f731e-01b2-4323-ac53-0e0b6cf826f4/" alt="0_5-SLYDeLo_Ozx_RR.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unlike many other programming courses, &lt;a href="https://www.cyber-dojo.org/creator/home"&gt;Cyber-Dojo&lt;/a&gt; encourages the newbies to focus on improving their skills rather than finishing the game ASAP. Here, you can practice Java individually or join the group session, or even participate in coding sparrings if you already have a technical background.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-codechef" class="anchor"&gt;
  &lt;/a&gt;
  4. CodeChef
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FBn4vUU5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/5bf48e6b-6d8f-4619-8a4f-5e572cbfb2d6/" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FBn4vUU5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/5bf48e6b-6d8f-4619-8a4f-5e572cbfb2d6/" alt="0_E6NpRTRmMFYT0XpG.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Put &lt;a href="https://www.codechef.com/"&gt;CodeChef&lt;/a&gt; on the list if you are keen on coding contests and challenges ‚Äî this is the perfect place for that. The platform hosts programming contests every month where developers from the whole world show off their skills and try to win trophies. Other than participating in challenges, you can also brush up on your knowledge by joining training sessions related to different technical topics, such as binary search, algorithms, array size, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-codingame" class="anchor"&gt;
  &lt;/a&gt;
  5. CodinGame
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZSu6IC_u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/1255138f-d26b-4dbd-80f6-59e7060c4f10/" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZSu6IC_u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/1255138f-d26b-4dbd-80f6-59e7060c4f10/" alt="0_4eT9GP_zoHRGJdt0.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.codingame.com/start"&gt;Codingame&lt;/a&gt; is an ideal learning platform for developers of all skill levels. You won‚Äôt feel bored while practicing Java ‚Äî the course offers coding quizzes, solo and group challenges, a 5-minute coding battle in Clash of Code, as well as bot programming competitions for advanced developers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrapping-up" class="anchor"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h3&gt;

&lt;p&gt;Following these tips will help you stand out and join the group of great Java developers. If you know something I haven‚Äôt mentioned, feel free to share your thoughts in the comments below.&lt;/p&gt;

&lt;p&gt;Previously published on &lt;a href="https://betterprogramming.pub/10-tips-to-help-you-stand-out-as-a-java-developer-9865516584ae"&gt;Better Programming&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>java</category>
      <category>beginners</category>
      <category>coding</category>
      <category>programming</category>
    </item>
    <item>
      <title>Deadlift: Showing off Your Strengths in a Job Interview Test Project</title>
      <author>Alexey</author>
      <pubDate>Thu, 11 Mar 2021 13:57:52 +0000</pubDate>
      <link>https://dev.to/lxkuz/deadlift-showing-off-your-strengths-in-a-job-interview-test-project-3958</link>
      <guid>https://dev.to/lxkuz/deadlift-showing-off-your-strengths-in-a-job-interview-test-project-3958</guid>
      <description>&lt;p&gt;Hi everyone! In this article, I‚Äôm going to touch on the theme of how to get a job. I want to share with you some of the experience I‚Äôve gained along the way as a programmer. This might be useful even if you‚Äôre not a developer, as the ideas I will share are really common for many spheres. &lt;/p&gt;

&lt;p&gt;So, you‚Äôve got your CV ready, and somewhere on your LinkedIn profile there‚Äôs a list of all the companies that you used to work for - this list might be long or short. But potential employers will probably want to check your experience out for themselves too - in fact, 99% of the time this is going to be the case. For most jobs, there will be multiple stages to the selection process, but in this article, I‚Äôm going to speak about the test project part only. Often, recruiters will set a difficult coding task for applicants, to give them a chance to show off their programming skills. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-should-you-trust-me" class="anchor"&gt;
  &lt;/a&gt;
  Why Should You Trust Me?
&lt;/h3&gt;

&lt;p&gt;I‚Äôm not afraid to admit that I‚Äôve had several failed attempts at test projects in the past. After that, I had great feedback for my last five completed test projects, from five different companies. In four cases, I got a job offer as a direct result. So now I understand how to do it right, and I think I can safely say that all my subsequent test projects are likely to be successful as well.&lt;/p&gt;

&lt;p&gt;To be honest, I had some doubts myself about whether my ideas would work for less experienced developers. So, just to be totally sure, I ran an experiment (we all know how important it is to test stuff, right?) I introduced all these ideas to a friend of mine, who is a less experienced developer, before she attempted to solve a test question. She followed my advice, and sure enough, she got the job, thanks in a large part to solving a test project. So I‚Äôm sure that there‚Äôs value in what I‚Äôm talking about here because it‚Äôs a tried and tested strategy! &lt;/p&gt;

&lt;p&gt;Alright! I can‚Äôt wait to share all that I know on this, so let‚Äôs get on with it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jNyeLZUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/13a9xrysf4pnlrl85iwj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jNyeLZUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/13a9xrysf4pnlrl85iwj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#read-the-task-several-times" class="anchor"&gt;
  &lt;/a&gt;
  Read the Task Several Times
&lt;/h3&gt;

&lt;p&gt;You should do this every single time, even if the task looks simple. It‚Äôs possible that the task includes some pitfall or hidden information that you might miss, even after a second read. While you‚Äôre reading it through, you‚Äôll probably be thinking about implementation already. Don‚Äôt get ahead of yourself, though - you‚Äôll have enough time to work it all out. Taking your time is actually a pretty good rule of thumb for most of the future tasks you‚Äôll undertake in your dream job. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrong-requirements-make-your-own" class="anchor"&gt;
  &lt;/a&gt;
  Wrong Requirements? Make Your Own!
&lt;/h3&gt;

&lt;p&gt;Sometimes while reading the task, you might notice that there are some inaccuracies or even some negligence on the part of the task author. Remember, skewed problems will lead to skewed solutions and you won‚Äôt be proud to show off such a solution. So feel free to make some modifications and go in the right direction. This might even be part of the test. Of course, you should logically explain your decision and make it clear that you didn‚Äôt just change it because it was too hard for you to do it as originally requested. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PoXPJ3hO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a365k4o801n1olqx3dun.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PoXPJ3hO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a365k4o801n1olqx3dun.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#read-the-vacancy-description-again-and-research-the-company-thoroughly" class="anchor"&gt;
  &lt;/a&gt;
  Read the Vacancy Description Again and Research the Company Thoroughly
&lt;/h3&gt;

&lt;p&gt;You can get a lot of information about the company you‚Äôre hoping to work for by reading public sources. You‚Äôll be able to find out what the perfect candidate looks like, what sort of problems they will be solving, and in what particular ways. Very often your test project will be the same sort of thing but in miniature. It means that you should try to make your solution as close as possible to the original one. &lt;/p&gt;

&lt;p&gt;That‚Äôs why it‚Äôs so important to understand this kind of background information about the company. This knowledge will definitely help you to address some of the questions about base architecture and tech stack picking and makes sure that your answers will be convincing. This way, when your future employer is reviewing your solution, they‚Äôll just exclaim, ‚ÄúThis is it!‚Äù  &lt;/p&gt;

&lt;p&gt;Let‚Äôs take a basic example. If the company you are applying to work for is a huge enterprise, I would recommend that you pick a mainstream stable technologies set, to show you are aware of the importance of using a reliable product. On the other hand, if it's a small startup company, you‚Äôd be better off using brand new technologies. This shows that you‚Äôre open to using any modern approaches and that you‚Äôre adaptable to change, so that they will feel that you‚Äôre on the same wavelength as them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-balance" class="anchor"&gt;
  &lt;/a&gt;
  Code Balance
&lt;/h3&gt;

&lt;p&gt;Let‚Äôs move on to some advice that is a bit more specialist and focused on programming. Let me share some code examples to show what I‚Äôm talking about. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#university-programming" class="anchor"&gt;
  &lt;/a&gt;
  University Programming
&lt;/h4&gt;

&lt;p&gt;This is the amateur style of programming that everybody uses when they‚Äôre just starting to learn programming. It‚Äôs the type of code that is just about good enough to solve the problem, but nothing more. Here is an example on Ruby but I guess everyone will understand what I mean, even if they‚Äôre not super familiar with Ruby.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calc_order_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;price&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;
    &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;shipments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;price&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;coupon&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;apply_coupon?&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;coupon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;
      &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mf"&gt;0.7&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;coupon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;round&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code is a straightforward approach to trying to calculate an order summary. It doesn‚Äôt follow code style rules, including constants and the ABC metric. We probably all wrote this kind of code when we were trying to solve some programming projects at university. I would suggest that you should never write code like this in your test project. 0% of University programming in your test project&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#industrial-programming" class="anchor"&gt;
  &lt;/a&gt;
  Industrial Programming
&lt;/h4&gt;

&lt;p&gt;We could also call this professional programming. Every solution algorithm that springs to mind will initially look like a university-programmed mess. But every professional programmer will rethink the idea and improve it, using best code practices to deliver high-quality code. So let‚Äôs briefly try to improve the code of the example above&lt;br&gt;
(FYI I do not pretend that this is the perfect implementation, I just want to show you the way of thinking).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calc_order_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;order_total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calc_products_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;order_total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calc_shipment_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order_total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;order_total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;apply_coupon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order_total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;normalize_order_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order_total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calc_products_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each_with_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;quantity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;price&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calc_shipment_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="no"&gt;FREE_SHIPMENT_ORDER_TOTAL&lt;/span&gt;
   &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;shipments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each_with_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;price&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;apply_coupon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;apply_coupon?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;coupon&lt;/span&gt;
  &lt;span class="n"&gt;coupon_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;coupon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;value&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;coupon_value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="no"&gt;COUPON_COVERAGE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="no"&gt;COUPON_COVERAGE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;coupon_value&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;normalize_order_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;round&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hopefully, you can see that this code is much easier to read and understand. It shows every step of the total order calculation, and you can manage the process by modifying constants, values, and concrete logic parts. Your employer is going to prefer this type of code, as it is much cheaper for businesses to maintain and modify. &lt;/p&gt;

&lt;p&gt;One more example of professional programming is the ability to use foreign code components instead of reinventing the wheel. We could have libraries or services available in our system that are already doing all of this, so let‚Äôs just use them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calc_order_total&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;order_total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;products_total&lt;/span&gt;
  &lt;span class="n"&gt;order_total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="no"&gt;CalculateShipmentsTotal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;total: &lt;/span&gt;&lt;span class="n"&gt;order_total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;shipments: &lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;shipments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;order_total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ApplyCoupon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;total: &lt;/span&gt;&lt;span class="n"&gt;order_total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;user: &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;order: &lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="no"&gt;NormalizeOrderTotal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order_total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using this type of code will show your employer how professional and valuable you are as a developer. &lt;/p&gt;

&lt;p&gt;It‚Äôs important to strike a good balance between using existing instruments, configuring them, and writing custom code. This part is important, as it shows how good you are as a developer and demonstrates that you can close off regular tasks. It doesn't matter if the task is simple or complex, big or small. This is probably the most important point, as this type of task will make up 90% of your future work.&lt;/p&gt;

&lt;p&gt;Here is the code balance rule: 90% of industrial programming in your test project. What about the remaining 10%?&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#olympiad-programming" class="anchor"&gt;
  &lt;/a&gt;
  Olympiad Programming
&lt;/h4&gt;

&lt;p&gt;This kind of code will demonstrate just how smart you are. It should include some indication of your wider skills. This might include a strong mathematical background, skills in performance optimization, or the ability to implement beautiful infrastructure solutions. And so on. But don‚Äôt go overkill on this. Too much use of olympiad programming code might make the employer think that you‚Äôll use overly complex methods to solve simple tasks, which is bad for business. So the rule is this: 10% of olympiad programming in your test project.&lt;/p&gt;

&lt;p&gt;Sometimes, it‚Äôs just not possible for test projects to include any olympiad programming, due to the nature of the task. If that‚Äôs the case, you should just write 100% industrial programming code and leave it at that. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t_6bY91K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/erg14n3oqij0g5ursmhj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t_6bY91K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/erg14n3oqij0g5ursmhj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-deadlift-idea" class="anchor"&gt;
  &lt;/a&gt;
  The Deadlift Idea
&lt;/h3&gt;

&lt;p&gt;What if the task is too big? Or the task is too small? In weightlifting, you always need to pick the perfect weight to suit your abilities. Bigger is better, but make sure it‚Äôs not beyond your capabilities! I would recommend that you follow the same logic when you‚Äôre working on the test project. If the task is too big, you can underline the most important elements and implement those with high-quality solutions. If the task looks too simple, you can add some tech magic to show off your professional skills. But be careful! Don‚Äôt punch above your weight - you should find the right level and ensure that you can pull it off with a nice technique, using the code balance explained above. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solve-the-main-problem" class="anchor"&gt;
  &lt;/a&gt;
  Solve the Main Problem
&lt;/h3&gt;

&lt;p&gt;Now you know the list of subtasks you need to solve and you know that you need to research the nuances of the business so that you can easily identify which is the most important part of the test project task. This is the element that you should focus on implementing with the most style. Don‚Äôt be afraid to rewrite it a couple of times. &lt;/p&gt;

&lt;p&gt;This part of the code will definitely be reviewed, and its quality is what will reveal your main characteristics as a developer. Sometimes it will include the 10% of olympiad programming that I mentioned, but not always. &lt;/p&gt;

&lt;p&gt;You should be looking to use best practices and classical algorithms in solving these kinds of problems; this will give good results, and make your employers sit up and take notice. You‚Äôre saying to them, ‚ÄúHey! I‚Äôm the guy you‚Äôre looking for!‚Äù This part of the project is very important, so don‚Äôt be afraid of skipping some low-priority elements in order to spend more time on this. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keep-commits-in-good-shape" class="anchor"&gt;
  &lt;/a&gt;
  Keep Commits in Good Shape
&lt;/h3&gt;

&lt;p&gt;Your git history shows your thought process. Inconsistent naming and code changes in your commits reflect a mess in your head. So you should be ready to put a lot of work into your git history. I would say at least 30% of the time you have available for the project should be spent on beautiful code changes in your git history. First commits are about infrastructure changes, project init, and adding in some of the most basic stuff. Then, as you get deeper into solving the problem and move from simple to hard, each commit shows each step you have taken. &lt;/p&gt;

&lt;p&gt;Apart from anything else, your git commits prove it‚Äôs your own work. Something to consider is that a long commits list shows your motivation to work in the company - for some employers, this is really important and will help you to stand you out amongst the other candidates.&lt;/p&gt;

&lt;p&gt;You should use conversions like this &lt;a href="https://www.conventionalcommits.org/en/v1.0.0/"&gt;https://www.conventionalcommits.org/en/v1.0.0/&lt;/a&gt; or this &lt;a href="https://seesparkbox.com/foundry/semantic_commit_messages"&gt;https://seesparkbox.com/foundry/semantic_commit_messages&lt;/a&gt; to keep consistent commits messages style.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-code-linters" class="anchor"&gt;
  &lt;/a&gt;
  Use Code Linters
&lt;/h3&gt;

&lt;p&gt;Write clean, readable, scalable, maintainable, secure code. This is obvious advice, but it‚Äôs worth mentioning because it‚Äôs so important. The code you write shows the level of your skill, and if you don‚Äôt demonstrate the required level to meet the requirements of the job, then you may not pass the test. Use code linters to help you avoid any sloppy moments in your code. This will improve the overall impression that you make on the employer when they‚Äôre reviewing your test. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#write-tests" class="anchor"&gt;
  &lt;/a&gt;
  Write Tests
&lt;/h3&gt;

&lt;p&gt;Writing tests is important. The way you cover your code with tests shows how professional you are. Enterprise project developers usually spend more time writing tests than writing actual code. So imagine that you‚Äôre already working on the enterprise. Cover everything you know how to cover in the right way. I would even recommend using the TDD approach. Actually, I think you should do this anyway, even if it‚Äôs not specifically required or requested in the task.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#selectively-fix-bugs" class="anchor"&gt;
  &lt;/a&gt;
  Selectively Fix Bugs
&lt;/h3&gt;

&lt;p&gt;The main usage scenario should 100% work. This is actually good advice for QA specialists as well: do test the positive flow. Don‚Äôt waste time on fixing tricky bugs and edge effects. You definitely have more important stuff to work on. P.S. Got issues with bugs? Read &lt;a href="https://dev.to/lxkuz/the-art-of-war-how-to-beat-the-bugs-faster-and-harder-2e4g"&gt;my previous article&lt;/a&gt; ;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fsw3ZKmH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28a7b8h8x50t8gok5mjf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fsw3ZKmH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28a7b8h8x50t8gok5mjf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#readme-is-important" class="anchor"&gt;
  &lt;/a&gt;
  Readme Is Important
&lt;/h3&gt;

&lt;p&gt;When you deliver your test project solution, you should be 100% sure that the inspecting person will see the results and will appreciate them. Well-composed Readme is a key factor in achieving this. Here‚Äôs a list of things I usually include in the Readme file:&lt;br&gt;
Step-by-step instructions on how to start the project and see the results. I always assume that the checking person is not a programmer at all, so my steps are quite detailed and accurate. Anyone should just be able to blindly follow the steps and get results. After I finish the project, I test all these steps one more time to make sure that they still work. This is good advice to follow, as I can‚Äôt remember a single time when I didn‚Äôt update some of the steps after that very last check.&lt;br&gt;
I always include a list of the tech stack I‚Äôve used. This helps to highlight some of the better solutions in the project, as I don‚Äôt believe that every line of code will be read. So this helps to prevent the scope of the project from being underestimated. &lt;br&gt;
I might mention some of the best ideas and tactics I‚Äôve used. Don‚Äôt be shy - there‚Äôs no harm in giving yourself a bit of good PR. I also explain any non-transparent solutions, especially if I had any reason to change the test project conditions. Once again, I am pretty much sure nobody will read ALL your code, so when you explain some of these things, it gives a better understanding and helps the reviewer to appreciate the best elements of the code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#last-words-before-you-go" class="anchor"&gt;
  &lt;/a&gt;
  Last Words Before You Go
&lt;/h3&gt;

&lt;p&gt;There are no cast-iron guarantees here I‚Äôm afraid. You could follow all the advice above, and still not get the job if there‚Äôs someone else even better than you. But there‚Äôs always an opportunity for learning. &lt;/p&gt;

&lt;p&gt;This might not work in every scenario, but don‚Äôt be afraid to try something new. When I‚Äôm doing a new test project, I often use it as an opportunity to try out different things that I‚Äôve always wanted to do but never had the time before. &lt;/p&gt;

&lt;p&gt;I use modern code style approaches that are popular in the tech stack. I make sure I‚Äôm familiar with all the latest versions of the programming language and all libs, frameworks and technologies. I use the latest features and read changelogs looking for new stuff to play with and try new ways of solving known issues. That's how I discover new things. And it helps to keep me interested in my work too. &lt;/p&gt;

&lt;p&gt;If you do everything as perfectly as possible, you‚Äôll fall in love with your project. Even if nobody notices it and nobody calls you back, you know that you can be proud of it anyway. Shit happens, but you‚Äôll have no regrets about the project you created. See it as an opportunity for growth, and success will follow! Good luck!&lt;/p&gt;

</description>
      <category>jobs</category>
      <category>interview</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How I landed into Microsoft with a Support Engineer Intern Role- My Journey</title>
      <author>haimantika mitra</author>
      <pubDate>Thu, 11 Mar 2021 13:30:27 +0000</pubDate>
      <link>https://dev.to/haimantika/how-i-landed-into-microsoft-with-a-support-engineer-intern-role-my-journey-5ekj</link>
      <guid>https://dev.to/haimantika/how-i-landed-into-microsoft-with-a-support-engineer-intern-role-my-journey-5ekj</guid>
      <description>&lt;p&gt;üì¢ I landed in my dream company! Yes, I did! &lt;br&gt;
Keeping aside all the excitement about interning in the company, whose pictures my first computer book had, I will be sharing with you the process that I went through. (Some tips too)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-the-role" class="anchor"&gt;
  &lt;/a&gt;
  What is the role? ü§î
&lt;/h1&gt;

&lt;p&gt;It is a support engineer role and is highly customer-facing. Apart from troubleshooting and providing support to customers, we also need to have in-depth knowledge in our domain.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-are-some-of-the-necessary-skills" class="anchor"&gt;
  &lt;/a&gt;
  What are some of the necessary skills? ü§î
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Operating System&lt;/li&gt;
&lt;li&gt;Networking&lt;/li&gt;
&lt;li&gt;Azure (knowledge about Active directory and VM is a plus)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#what-was-the-selection-process" class="anchor"&gt;
  &lt;/a&gt;
  What was the selection process? ü§î
&lt;/h1&gt;

&lt;p&gt;The process by which we were hired is known as the &lt;a href="https://microsoft.acehacker.com/fixathon/"&gt;'Fix-a-thon'&lt;/a&gt; challenge. It was 6 weeks long, &lt;em&gt;learning+upskilling&lt;/em&gt; process (along with some fun).&lt;br&gt;
Before the final selection, it had a number of rounds and challenges.&lt;/p&gt;

&lt;p&gt;Kickstarting with the assessment test, which was held on &lt;strong&gt;Dec 27, 2020.&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
It tested our skills on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data Structures and Algorithm&lt;/li&gt;
&lt;li&gt;Aptitude (logical and quantitative)&lt;/li&gt;
&lt;li&gt;Database&lt;/li&gt;
&lt;li&gt;Operating System&lt;/li&gt;
&lt;li&gt;Networking&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Shortlisted candidates were asked to share a video on &lt;strong&gt;'Why you want to join the CE&amp;amp;S team'&lt;/strong&gt;. (Only 100 students were shortlisted out of 11000 applicants)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#launch-of-the-program" class="anchor"&gt;
  &lt;/a&gt;
  Launch of the program üì¢
&lt;/h2&gt;

&lt;p&gt;Soon after this, the program was launched on &lt;strong&gt;Dec 30, 2020&lt;/strong&gt;. It briefed us about the program timeline, introduced us to the Microsoft culture, briefed us about the role, and experts from the domain spoke to us about their experience. It ended on a fun note with some games.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learning-capsules" class="anchor"&gt;
  &lt;/a&gt;
  Learning Capsules üìñ
&lt;/h2&gt;

&lt;p&gt;From &lt;strong&gt;4th Jan 2021- 8th Jan 2021&lt;/strong&gt;, we had enriching sessions by subject matter experts on topics like &lt;strong&gt;Operating systems, Networking, and Azure&lt;/strong&gt;. Each session was followed by a coach touchpoint, where we could solve your doubts and ask additional questions. We were also divided into different groups, we had fun knowing each other and learning together.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#breakfix-challenge" class="anchor"&gt;
  &lt;/a&gt;
  Break-fix challenge üõ†Ô∏è
&lt;/h2&gt;

&lt;p&gt;The learning capsules were followed by a Break-fix challenge, it was the most challenging part (according to me). Our learning capabilities were tested by this challenge. We were paired with a Microsoft employee and assigned some exercises that we had to complete in a given time (attention to the learning capsules can help you ace this phase).&lt;br&gt;
This was an elimination round and only 50 of us qualified for the next phase, i.e the hackathon. Before the start of the hackathon, we had a virtual cafe with HR Global Leads and a Design Thinking workshop.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-start-of-the-hackathon-%E2%80%8D" class="anchor"&gt;
  &lt;/a&gt;
  The start of the hackathon üê±‚Äçüíª
&lt;/h2&gt;

&lt;p&gt;As we approached the final stages of fix-a-thon, the thrill increased. We were divided into 10 groups of 5 students each and assigned a topic to work on for the hackathon.&lt;br&gt;
We were guided by mentors on how we could improve our proposed solution. The presentation went well, but our team couldn't make it to the finale. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#concluding-phases" class="anchor"&gt;
  &lt;/a&gt;
  Concluding phases üìù
&lt;/h2&gt;

&lt;p&gt;The entire process of learning, break-fix challenge, coach touchpoints, various other activity went on for 6 weeks. Throughout this phase, we were judged on a variety of factors. Good performance bagged me a chance to sit for the interview and give a shot at the internship. A total of 31 students (both from the qualified and unqualified teams) gave an interview.&lt;br&gt;
The interviewers were very friendly and they made sure that you are comfortable (though I had butterflies in my stomach).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interview-pattern" class="anchor"&gt;
  &lt;/a&gt;
  Interview pattern ü§µ
&lt;/h2&gt;

&lt;p&gt;The interview was taken in two rounds:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Language Screening Round&lt;/li&gt;
&lt;li&gt;Managerial Round&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The only mantra I followed was, being myself and being comfortable. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-result" class="anchor"&gt;
  &lt;/a&gt;
  Final result!üò±
&lt;/h2&gt;

&lt;p&gt;On &lt;strong&gt;19th Feb&lt;/strong&gt;, the program ended with the award ceremony, where hackathon winners and other individual winners were announced.&lt;br&gt;
An hour later, my email rang with the best notification, which read &lt;strong&gt;" Congratulations!....."&lt;/strong&gt;. (My heart literally skipped a beat)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-do-i-feel-about-the-program" class="anchor"&gt;
  &lt;/a&gt;
  How do I feel about the program? ü§î
&lt;/h1&gt;

&lt;p&gt;This way of hiring is very unique, and as a learner, I loved how I built skills on subjects that were not on my course. Staying so close to the Microsoft culture, made us feel that we are already a part of it. I loved how we were treated (because I felt less of a candidate and more of an employee :P). It also helped us make new connections and friends and gave the employers a chance to monitor us and our skills closely.&lt;/p&gt;

&lt;p&gt;As the article comes to an end, I would like to share with you &lt;strong&gt;some tips&lt;/strong&gt; (these are very personal and have been followed by me since early 2020).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do not avoid your coursework, that's equally important!&lt;/li&gt;
&lt;li&gt;If you want to be a part of Microsoft, start learning about it. ( I learned about Azure, Power Platform, and even made major projects by upskilling from &lt;a href="https://docs.microsoft.com/en-us/learn/"&gt;Microsoft Learn&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Be a part of developer communities (they help you skill and make connections)&lt;/li&gt;
&lt;li&gt;Build a social brand for yourself (Creating content on your skill-set helps).&lt;/li&gt;
&lt;li&gt;Stay connected to recruiters to know about upcoming opportunities.&lt;/li&gt;
&lt;li&gt;Do not do things solely for the sake of getting hired, develop a passion for technology (things become less stressful and easier).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope this article helped! Let's stay connected on &lt;a href="https://www.linkedin.com/in/haimantika-mitra/"&gt;LinkedIn&lt;/a&gt; and &lt;a href="https://twitter.com/HaimantikaM"&gt;Twitter&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A glimpse of the fun sessions we had:&lt;/strong&gt; üëáüèº&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6kvEZZvP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dm5cblk1vk7z7t8xwvzo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6kvEZZvP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dm5cblk1vk7z7t8xwvzo.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>azure</category>
      <category>cloud</category>
      <category>internship</category>
      <category>networking</category>
    </item>
    <item>
      <title>CSS Modules vs CSS-in-JS. Who wins?</title>
      <author>Sergey</author>
      <pubDate>Thu, 11 Mar 2021 13:29:36 +0000</pubDate>
      <link>https://dev.to/alexsergey/css-modules-vs-css-in-js-who-wins-3n25</link>
      <guid>https://dev.to/alexsergey/css-modules-vs-css-in-js-who-wins-3n25</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In modern React application development, there are many approaches to organizing application styles. One of the popular ways of such an organization is the CSS-in-JS approach (in the article we will use &lt;strong&gt;styled-components&lt;/strong&gt; as the most popular solution) and CSS Modules. In this article, we will try to answer the question: which is better &lt;em&gt;CSS-in-JS&lt;/em&gt; or &lt;em&gt;CSS Modules&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;So let's get back to basics. When a web page was primarily set for storing textual documentation and didn't include user interactions, properties were introduced to style the content. Over time, the web became more and more popular, sites got bigger, and it became necessary to reuse styles. For these purposes, CSS was invented. Cascading Style Sheets. Cascading plays a very important role in this name. We write styles that lay like a waterfall over the hollows of our document, filling it with colors and highlighting important elements.&lt;/p&gt;

&lt;p&gt;Time passed, the web became more and more complex, and we are facing the fact that the styles cascade turned into a problem for us. Distributed teams, working on their parts of the system, combining them into reusable modules, assemble an application from pieces, like Dr. Frankenstein, stitching styles into one large canvas, can get the sudden result... Due to the cascade, the styles of module 1 can affect the display of module 3, and module 4 can make changes to the global styles and change the entire display of the application in general.&lt;/p&gt;

&lt;p&gt;Developers have started to think of solving this problem. Style naming conventions were created to avoid overlaps, such as Yandex's BEM or Atomic CSS. The idea is clear, we operate with names in order to get predictability, but at the same time to prevent repetitions.&lt;/p&gt;

&lt;p&gt;These approaches were crashed of the rocks of the human factor. Anyway, we have no guarantee that the developer from team A won't use the name from team C.&lt;/p&gt;

&lt;p&gt;The naming problem can only be solved by assigning a random name to the CSS class. Thus, we get a completely independent CSS set of styles that will be applied to a specific HTML block and we understand for sure that the rest of the system won't be affected in any way.&lt;/p&gt;

&lt;p&gt;And then 2 approaches came onto the stage to organize our CSS: &lt;em&gt;CSS Modules&lt;/em&gt; and &lt;em&gt;CSS-in-JS&lt;/em&gt;. Under the hood, having a different technical implementation, and in fact solving the problem of atomicity, reusability, and avoiding side effects when writing CSS.&lt;/p&gt;

&lt;p&gt;Technically, CSS Modules transforms style names using a hash-based on the filename, path, style name. Styled-components handles styles in JS runtime, adding them as they go to the &lt;strong&gt;head&lt;/strong&gt; HTML section (&amp;lt;head&amp;gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#approaches-overview" class="anchor"&gt;
  &lt;/a&gt;
  Approaches overview
&lt;/h2&gt;

&lt;p&gt;Let's see which approach is more optimal for writing a modern web application!&lt;/p&gt;

&lt;p&gt;Let's imagine we have a basic React application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       React application title
     &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CSS styles of this application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#222&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The dependencies are React &lt;strong&gt;16.14&lt;/strong&gt;, react-dom &lt;strong&gt;16.14&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's try to build this application using webpack using all production optimizations.&lt;/p&gt;

&lt;p&gt;we've got&lt;/p&gt;

&lt;p&gt;uglified JS - &lt;strong&gt;129kb&lt;/strong&gt;&lt;br&gt;
separated and minified CSS - &lt;strong&gt;133 bytes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The same code in CSS Modules will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.module.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       React application title
     &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;uglified JS - &lt;strong&gt;129kb&lt;/strong&gt;&lt;br&gt;
separated and minified CSS - &lt;strong&gt;151 bytes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The CSS Modules version will take up a couple of bytes more due to the impossibility of compressing the long generated CSS names.&lt;/p&gt;

&lt;p&gt;Finally, let's rewrite the same code under styled-components:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="s2"&gt;`
 padding: 20px;
 background-color: #222;
 text-align: center;
 color: white;
 font-size: 1.5em;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       React application title
     &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;uglified JS - &lt;strong&gt;163kb&lt;/strong&gt;&lt;br&gt;
CSS file is missing&lt;/p&gt;

&lt;p&gt;The more than &lt;strong&gt;30kb&lt;/strong&gt; difference between &lt;strong&gt;CSS Modules&lt;/strong&gt; and &lt;strong&gt;CSS-in-JS (styled-components)&lt;/strong&gt; is due to styled-components adding extra code to add styles to the &amp;lt;head&amp;gt; part of the HTML document.&lt;/p&gt;

&lt;p&gt;In this synthetic test, the CSS Modules approach wins, since the build system doesn't add something extra to implement it, except for the changed class name. Styled-components due to technical implementation, adds dependency as well as code for runtime handling and styling of &amp;lt;head&amp;gt;.&lt;/p&gt;

&lt;p&gt;Now let's take a quick look at the pros and cons of CSS-in-JS / CSS Modules.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pros-and-cons" class="anchor"&gt;
  &lt;/a&gt;
  Pros and cons
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#cssinjs" class="anchor"&gt;
  &lt;/a&gt;
  CSS-in-JS
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#cons" class="anchor"&gt;
  &lt;/a&gt;
  cons
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The browser won't start interpreting the styles until styled-components has parsed them and added them to the DOM, which slows down rendering.&lt;/li&gt;
&lt;li&gt;The absence of CSS files means that you cannot cache separate CSS.&lt;/li&gt;
&lt;li&gt;One of the key downsides is that most libraries don't support this approach and we still can't get rid of CSS. All native JS and jQuery plugins are written without using this approach. Not all React solutions use it.&lt;/li&gt;
&lt;li&gt;Styles integration problems. When a markup developer prepares a layout for a JS developer, we may forget to transfer something; there will also be difficulty in synchronizing a new version of layout and JS code.&lt;/li&gt;
&lt;li&gt;We can't use CSS utilities: SCSS, Less, Postcss, stylelint, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#pros" class="anchor"&gt;
  &lt;/a&gt;
  pros
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Styles can use JS logic. This reminds me of Expression in IE6, when we could wrap some logic in our styles (Hello, CSS Expressions :) ).
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="s2"&gt;`
 padding: 20px;
 background-color: #222;
 text-align: center;
 color: white;
 font-size: 1.5em;
 &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;secondary&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="s2"&gt;`
   background-color: #fff;
   color: #000;
   padding: 10px;
   font-size: 1em;
 `&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;When developing small modules, it simplifies the connection to the project, since you only need to connect the one independent JS file.&lt;/li&gt;
&lt;li&gt;It is semantically nicer to use &amp;lt;Title&amp;gt; in a React component than &amp;lt;h1 className={style.title}&amp;gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#css-modules" class="anchor"&gt;
  &lt;/a&gt;
  CSS Modules
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#cons" class="anchor"&gt;
  &lt;/a&gt;
  cons
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;To describe global styles, you must use a syntax that does not belong to the CSS specification.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:global&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;.myclass&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;underline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Integrating into a project, you need to include styles.&lt;/li&gt;
&lt;li&gt;Working with typescript, you need to automatically or manually generate interfaces. For these purposes, I use webpack loader:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/@teamsupercell/typings-for-css-modules-loader"&gt;@teamsupercell/typings-for-css-modules-loader&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pros" class="anchor"&gt;
  &lt;/a&gt;
  pros
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;We work with regular CSS, it makes it possible to use SCSS, Less, Postcss, stylelint, and more. Also, you don't waste time on adapting the CSS to JS.&lt;/li&gt;
&lt;li&gt;No integration of styles into the code, clean code as result.&lt;/li&gt;
&lt;li&gt;Almost 100% standardized except for global styles.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So the fundamental problem with the CSS-in-JS approach is that it's not CSS! This kind of code is harder to maintain if you have a defined person in your team working on markup. Such code will be slower, due to the fact that the CSS rendered into the file is processed in parallel, and the CSS-in-JS cannot be rendered into a separate CSS file. And the last fundamental flaw is the inability to use ready-made approaches and utilities, such as SCSS, Less and Stylelint, and so on.&lt;/p&gt;

&lt;p&gt;On the other hand, the CSS-in-JS approach can be a good solution for the Frontend team who deals with both markup and JS, and develops all components from scratch. Also, CSS-in-JS will be useful for modules that integrate into other applications.&lt;/p&gt;

&lt;p&gt;In my personal opinion, the issue of CSS cascading is overrated. If we are developing a small application or site, with one team, then we are unlikely to encounter a name collision or the difficulty of reusing components. If you faced with this problem,  I recommend considering CSS Modules, as, in my opinion, this is a more optimal solution for the above factors. In any case, whatever you choose, write meaningful code and don't get fooled by the hype. Hype will pass, and we all have to live with it. Have great and interesting projects, dear readers!&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>css</category>
    </item>
  </channel>
</rss>
