<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Blockchain security analysis layer by layer</title>
      <author>Aits</author>
      <pubDate>Thu, 06 May 2021 06:00:22 +0000</pubDate>
      <link>https://dev.to/tamjid0x01/blockchain-security-analysis-layer-by-layer-4c99</link>
      <guid>https://dev.to/tamjid0x01/blockchain-security-analysis-layer-by-layer-4c99</guid>
      <description>&lt;p&gt;Hello Everyone, I'm Web application security researcher and full time BugBounty hunter. But, now I'm curious about Blockchain security. So, Now I'm starting deep understanding how DeFi, Smart Contract, Blockchain etc works. If you interested get up-to-date &lt;a href="https://portswigger.net/daily-swig/cryptocurrency"&gt;Latest cryptocurrency security news&lt;/a&gt; , worlds largest Crypto Bug Bounty platform is &lt;a href="https://immunefi.com"&gt;Immunefi&lt;/a&gt; and See there &lt;a href="https://immunefi.com/explore/"&gt;Public BugBounty program &lt;/a&gt; Bounty available more then $20M. So, let's start hacking.      &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#abstract"&gt;
  &lt;/a&gt;
  Abstract
&lt;/h3&gt;

&lt;p&gt;The current blockchain structure can be roughly divided into application layer, smart contract layer, incentive layer, consensus layer, network layer and data layer from top to bottom. The security analysis of each layer will be performed separately below. This is not technical writing. I'm covering some basic think.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#application-layer"&gt;
  &lt;/a&gt;
  Application Layer
&lt;/h3&gt;

&lt;p&gt;Application layer security mainly covers the security issues of centralized nodes such as the exchanges which involve digital currency transactions and manage large amounts of funds. These nodes are at any point of failure of the entire blockchain network, and the attack yield is high and the cost is low, which is the preferred target of the attackers .&lt;/p&gt;

&lt;p&gt;Unauthorized Access to An Exchange Server. Exchanges often deposit large amounts of money and are easily targeted. Once the exchange server authority is obtained and the key information is modified, the attacker can steal the funds key, tamper with the transaction amount or leak sensitive information, causing economic and reputational devastating blows to the exchange.&lt;/p&gt;

&lt;p&gt;For example, the Youbit (formerly Yapizon) stolen event. On April 22, 2017, 4 hot wallets of Youbit were stolen, lost 3,816 BTC, with a total value of about $5,300,000, accounting for 36% of the exchange’s funds. On December 19, 2017, Youbit announced that it was attacked again, lost approximately 17% of its assets, and at the same time announced the exchange closed and entered the bankruptcy process.&lt;/p&gt;

&lt;p&gt;Exchange DDoS. Due to the high demand for network bandwidth in the trading platform, once a DDoS attack occurs, it is very serious for the platform and the entire industry. If the trading platform is attacked by DDoS, not only will itself suffer losses, but the transaction volume of the blockchain currency will also be greatly reduced, which will indirectly affect the rise and fall of the blockchain currency .&lt;/p&gt;

&lt;p&gt;According to the report of global DDoS threat landscape Q3 2017 by Incapsula [16], although its industry scale is still relatively small, Bitcoin has become one of the top 10 industries which are most vulnerable to DDoS attacks. This reflects to a certain extent that the entire blockchain industry is facing serious DDoS security challenges. For example, from November 2017 to December 2017 Bitfinex announced that it had suffered the DDoS attack for three times, and all the services of the exchange had been shut down for a long time [17]. The attacker creates pressure on the server by creating a large number of empty accounts, causing related services and APIs to go offline for hours.&lt;/p&gt;

&lt;p&gt;Employees Host Security. On June 20, 2011, the large Bitcoin exchange Mt.Gox was attacked. Its server was not compromised, but the attacker gained access to a computer used by an auditor of Mt.Gox, and got a read-only database file, resulting in about 60000 users’ username, email address, and encrypted password [18] to be leaked. After obtaining this sensitive information, the attacker cracked the password of one of the large accounts, issued a large sales message through this account, and sold 400,000 BTC [19] under it, trying to transfer funds through the legal transaction process. Fortunately, because the exchange protection measures are effective, it limits the maximum value of $1,000 BTC per account per day, so it does not cause much damage to this account. However, a large number of BTC sale requests caused the exchange BTC price to drop to 1 cent, resulting in an impact of approximately $8,750,000 in assets.&lt;/p&gt;

&lt;p&gt;Malicious Program Infection. Once a malicious program is implanted into the exchange system, it is likely to cause a large amount of sensitive information leakage, including key and wallet files. The key is everything, and the leakage of sensitive information often means losing control of all assets. The exchange Mt.Gox was attacked in 2014. The key file of Mt.Gox was stored locally in clear text, and the key file wallet.dat leaked due to Trojan infection, resulting in a large amount of asset loss and eventually, Mt.Gox went bankruptcy [20]. It is worth noting that in this attack, the attacker used two years to gradually transfer assets in order to avoid the community recovering the loss through hard forks. The emergence of this type of APT attack means that monitoring of the threat of attack in the blockchain industry cannot rely solely on short-term anomaly transaction monitoring.&lt;/p&gt;

&lt;p&gt;Initial Coin Offering. Tampering Attack: When ICO raises funds, it usually hangs the receiving address on the project official website, and then the investor will transfer money to this address for the corresponding token. Hackers can tamper with the collection address through attacks such as domain hijacking, web vulnerabilities, or social engineering.&lt;/p&gt;

&lt;p&gt;Phishing attack: The attacker uses social engineering and other means to impersonate the official, allowing the user to transfer money to the attacker’s wallet address. For example, an attacker can use an approximate domain name and highly phishing website to defraud investors or use email to disseminate fake information, such as ICO project’s payment address change notice, etc. or disseminate phishing information on social software and media to defraud investors.&lt;/p&gt;

&lt;p&gt;Mining Machine System. The cyber security awareness of mining device manufacturers is uneven, and because of its closed source characteristics, the security of its code cannot be checked by the public. Once a cyber security issue occurs, the result is fatal. And whether the device manufacturer will intersperse the back door for remote control of the device, or steal the mining output, is still remain to be discussed.&lt;/p&gt;

&lt;p&gt;0day: Most mining system is a general-purpose system. Once a mining system is found to have a 0 day vulnerability, the security barriers of the system will be broken in an instant. The attacker can use the vulnerability to obtain the modify permission and then tamper with reward receiving address and then hijack the user’s reward.&lt;/p&gt;

&lt;p&gt;Weak password attack: At present, the mining system in the market is based on the B/S architecture. Access to the mining system is usually through the web or other means. If the weak password is used, it will be vulnerable to intrusion.&lt;/p&gt;

&lt;p&gt;Mining Pool. By June 2018, the top five Bitcoin mining pools in the world are BTC.com, AntPool, SlushPool, BTC.TOP and F2Pool. About 60% of the world’s hash power is in the hands of Chinese miners [21].&lt;/p&gt;

&lt;p&gt;Hash power forgery attack: The mining pool will test the actual hash power of the current miner through a certain proof of work test algorithm. The hacker can falsely report the hash power by finding the vulnerability of the algorithm, and then obtain the excessive reward that doesn’t match the actual contribution.&lt;/p&gt;

&lt;p&gt;Selfish mining attack: A malicious mining pool decides not to release the block it finds, and thus creates a fork. When the private fork is longer than the public chain, the malicious mining pool issues the private fork. Because the fork is the longest chain in the current network, it will be recognized as a legal chain by honest miners, so the original public chain and the honest data it contains will be discarded. The results of the study indicate that the malicious mining pools will yield more benefits normally by using selfish mining strategies. But such attacks usually require huge hash power as a support.&lt;/p&gt;

&lt;p&gt;Centralization: The existence of the mining pool violates the principle of decentralization of the blockchain. Theoretically, if it can control at least 51% of the hash power of entire network, it will be able to monopolize the mining right, billing right and distribution right, which will affect the ecological security of the blockchain, so that the credit system of the cryptocurrency will cease to exist and the cryptocurrency system will be completely destroyed.&lt;/p&gt;

&lt;p&gt;Possible Methods. It is impossible for any one party to respond to various attacks at the application layer. The application developers should ensure that the softwares don’t contain discovered vulnerabilities and are thoroughly tested. As the central node, such as a trading platform, real-time monitoring of system health and some protected methods (e.g. data encryption storage, etc.) are required to ensure that the system is not subject to internal and external attacks. All employees should be systematically trained before they are employed to avoid becoming an attack portal. As a user, you should be able to keep your own account and key properly, distinguish between true and false information and be cautious in trading to avoid phishing attacks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#smart-contract-layer"&gt;
  &lt;/a&gt;
  Smart Contract Layer
&lt;/h3&gt;

&lt;p&gt;A smart contract is more than just a computer program that can be executed automatically. It is a system participant. It responds to the received message, it can receive and store value, and it can send out information and value [22]. For the security risks of smart contracts, the following attacks are summarized.&lt;br&gt;
Reentrancy Attack. The essence of reentrancy attack is to hijack the contract control flow and destroy the atomicity of the transaction, which can be understood as a logical race condition problem. For example, The DAO was attacked, and the attacker used the vulnerability in the contract to launch a reentrancy attack and gained 60 million dollars. In order to recover this part of the funds, the Ethereum community decided to perform a hard fork, roll back all the transaction records since the start of the attack and fix the contract vulnerabilities in the new branch. The vulnerability is described below. Here is a simplified version of The DAO contract:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;contract SimpleDAO {
mapping (address =&amp;gt; uint) public credit; 
function donate(address to){credit [to]+= msg.value;
  }
 function queryCredit(address to) returns (uint){
   return credit [];
}
function withdraw(uint amount) {
    if (credit [msg.sender]&amp;gt;= amount){
    credit[ msg.sender]-= amount ; 
   }
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Participants call the donate function to donate their own Ether to a contract address, the donation information is stored in the credit array, and the recipient contract calls The DAO’s withdraw function to receive funds. Before actually sending the transaction, The DAO checks if there is enough donation in the credit array, and after the transaction is over, the transaction amount is reduced from credit.&lt;br&gt;
The attacker first constructs a malicious contract Mallory, as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;contract Mollory {
SimpleDao Public dao = SimpleDAO(0x354);
address owner;
function Mallory(){owner = msg.sender;
 }
function getJackpot(){ owner.send(this.balance); 
 }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After Mallory deployed, the attacker calls The DAO’s donate function to donate a bit of Ether to the Mallory contract. After triggering Mallory’s fallback function (unnamed function), there are many trigger methods, such as transfer money to Mallory. The fallback function will call The DAO’s withdraw function and extract all the funds that belong to it. It seems to be no problem so far. However, after msg.sender.call.value(amount)() in the withdraw is executed, Mallory’s fallback function is automatically called after the transfer is completed due to the transfer operation feature, so the withdraw function is called again. Because credit is not updated at this time, so you can still withdraw money normally, then you fall into a recursive loop, and each time you can extract a part of Ether in the DAO to the Mallory contract.&lt;/p&gt;

&lt;p&gt;This loop will continue until one of three conditions occurs, gas is exhausted, the call stack is full, and The DAO balance is insufficient. An exception is thrown when one of the above conditions occurs. Due to the characteristics of the Solidity exception handling, all previous transactions are valid. Theoretically, repeating this operation can extract all the Ether of The DAO’s to Mallory.&lt;/p&gt;

&lt;p&gt;Unauthorized Access Attack. Most of this attack due to failure to make explicit function visibility, or fails to do sufficient permission checks, which can cause an attacker to access or modify a function or variable that should not be accessed.&lt;/p&gt;

&lt;p&gt;For example, a multi-signature contract vulnerability in the Parity wallet was exploited by an attacker to steal a total of 153,037 Ether in three times. Then Parity official blog and Twitter released security alert [23] and updated the new version of the library contract. The bug comes from the Multi-Sig library file enhanced-wallet.sol written by Parity’s founder Gavin Wood. The attacker exploited the bug to reset the wallet owner, took over the wallet and stolen all the funds. This is essentially a breach of authority in the contract.&lt;/p&gt;

&lt;p&gt;Solidity Development Security. Possible bugs when writing smart contracts include:&lt;/p&gt;

&lt;p&gt;Race condition: The biggest risk of calling an external function is that the calling behavior may cause the control flow to be hijacked and accidentally modify the contract data. This type of bug has many specific forms, such as reentrant and cross-function race conditions.&lt;/p&gt;

&lt;p&gt;Transaction-Ordering Dependence: A attacker can construct his own transaction based on the order information contained in the pending transactions, and try to get his transaction to be written into the block before others.&lt;/p&gt;

&lt;p&gt;Integer overflow and underflow: When programming, you should think about whether integer overflows can occur, how the state of uint variables will be transferred, and who has the authority to modify those variables.&lt;/p&gt;

&lt;p&gt;Denial of Service Attack Based on Exception Rollback: For example, a crowdfunding contract gives a refund to a participant. The contract may need to traverse an array to process a refund for a group of users. The simple idea is that every refund is successful, otherwise the program should be rolled back. The consequence of this practice is that one of the malicious users forced the refund to fail and all users were unable to receive the refund. It is recommended to use a pull payment mechanism, which separates the refund operation into an independent function, which is called by the refund recipient to pull the refund.&lt;/p&gt;

&lt;p&gt;Possible Methods. Once a smart contract is deployed in a distributed, decentralized network, it is difficult to change. It prevents data manipulation and establishes a trust mechanism based on the encryption algorithm. On the other hand, when the blockchain is facing a security attack, it lacks an effective correction mechanism and is difficult to reverse. Therefore, before the development of smart contracts, it is necessary to guard against the vulnerabilities that have already occurred. It should conduct sufficient security tests before issued. Professionals perform code optimizations in a timely manner, conduct regular code audits, and monitor abnormal behavior of deployed contracts to reduce losses. Learn more about &lt;a href="https://immunefi.com/learn/"&gt;Immunefi learn&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#incentive-layer"&gt;
  &lt;/a&gt;
  Incentive Layer
&lt;/h3&gt;

&lt;p&gt;The purpose of the incentive layer is to provide certain incentives to encourage nodes to participate in the security verification of the blockchain. The security of the blockchain depends on the participation of many nodes. For example, the security of the Bitcoin blockchain is based on the great hash power that many nodes participate in the proof of work which makes it impossible for an attacker to provide a higher amount of computation. The verification process of a node usually consumes computing resources and electric power. In order to encourage node participation, the blockchain usually rewards participants in the form of virtual currency. Bitcoin, Litecoin, and Ether are all products of this mechanism.&lt;/p&gt;

&lt;p&gt;Blockchain projects need to adapt to the market to automatically adjust the rewards, rather than simply reducing them. In the blockchain project reward mechanism, when the node’s working cost is close to or greater than the income, they often choose not to work for this blockchain, which can easily lead to centralization problems.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#network-layer"&gt;
  &lt;/a&gt;
  Network Layer
&lt;/h3&gt;

&lt;p&gt;The information transmission of the blockchain mainly depends on the peer-to-peer network. The P2P network relies on nearby nodes for information transmission in which it must expose each other’s IP. If there is an attacker in the network, it is very easy to bring security threats to other nodes. The node of the public blockchain network may be an ordinary home PC, a cloud server, etc., and its security must be uneven. There must be a node with poor security, and attacking it will directly threaten the other nodes. The main attacks are as follows.&lt;/p&gt;

&lt;p&gt;Eclipse attack: The node is kept in an isolated network by hoarding and occupying the victim’s slots. This type of attack is designed to block the latest blockchain information from entering the eclipse node, thereby isolating the nodes [24].&lt;/p&gt;

&lt;p&gt;BGP hijacking: At present, the security researchers have proved the conceptual feasibility of the attack. From November 5, 2015, to November 15, 2016, through the analysis and statistics of the node network, most of the bitcoin nodes are currently hosted in a few specific Internet Service Providers (ISP), while 60% of Bitcoin connections are in these ISPs. Therefore, these ISPs can see 60% of Bitcoin traffic, and can also control the traffic of the current Bitcoin network. The researchers verified that at least two attacks are conceptual feasible through the hijacking scenario, and given validation code [25].&lt;/p&gt;

&lt;p&gt;The security defense for the network layer can be mainly improved from two aspects: P2P network security and network authentication mechanism. In the transmission process of the network, a reliable encryption algorithm is used for transmission to prevent malicious attackers from stealing or hijacking the node network. Strengthen the validity, rationality and security of data transmission in network. Client nodes should do the necessary verification for important operations and information.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-layer"&gt;
  &lt;/a&gt;
  Data Layer
&lt;/h3&gt;

&lt;p&gt;Block Data. Malicious information attack: Write malicious information, such as virus signatures, politically sensitive topics, etc. in the blockchain. With the data undelete feature of the blockchain, information is difficult to delete after it is written in the blockchain. If malicious information appears in the blockchain, it will be subject to many problems.&lt;/p&gt;

&lt;p&gt;A team of researchers at the RWTH Aachen University and the Goethe University Frankfurt in Germany pointed out that among the 1,600 documents added to the Bitcoin blockchain, 59 files contained links to illegal children’s pictures, politically sensitive content or privacy violations [26]. Currently, only a few Bitcoin blockchain transactions contain other data. In the Bitcoin blockchain, about 1.4% of the 251 million transactions contain other data, that is, only a few of these transactions contain illegal or undesirable content [26]. Still, even such small amounts of illegal or inappropriate content can put participants at risk.&lt;/p&gt;

&lt;p&gt;Signature and Encryption Method. Cryptography is the key to ensure the security and tamper resistance of blockchain, and blockchain technology relies heavily on the research results of cryptography, which provides a key guarantee for the information integrity, authentication and non-repudiation of the blockchain.&lt;/p&gt;

&lt;p&gt;As a mainstay of the blockchain, the encryption technology is particularly important. For example, the MD5 and SHA1 hash algorithms popular in previous years but have been proved to be insufficiently secure. At present, the SHA256 algorithm is widely used in bitcoin. So far, this algorithm is still safe, but with the development of new technology and research, it may not be safe in the future. Therefore, when designing blockchain applications, it is important to carefully choose the encryption method. Current mainstream signature methods include aggregate signature, group signature, ring signature, blind signature, proxy signature, interactive incontestable signature (IIS), blinded verifiable encrypted signature (BVES), and so on.&lt;/p&gt;

&lt;p&gt;Attacks on cryptographic algorithms, especially the hash functions, include brute-force attack, collision attack, length expansion attack, back door attack and quantum attack.&lt;/p&gt;

&lt;p&gt;Thanks &lt;br&gt;
&lt;a href="https://twitter.com/tamjid0x01"&gt;Tamjidur Rohamn&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>security</category>
      <category>bugbounty</category>
    </item>
    <item>
      <title>Hashnode API - How To Display Your Blog Articles On Your Portfolio Page</title>
      <author>The Code Lounge</author>
      <pubDate>Thu, 06 May 2021 05:33:22 +0000</pubDate>
      <link>https://dev.to/codeloungedev/hashnode-api-how-to-display-your-blog-articles-on-your-portfolio-page-2o6k</link>
      <guid>https://dev.to/codeloungedev/hashnode-api-how-to-display-your-blog-articles-on-your-portfolio-page-2o6k</guid>
      <description>&lt;p&gt;&lt;a href="https://codelounge.dev"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oZGLRauQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617198357271/uoNdlXnwM.png" alt="cover (1).png"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Hashnode has an API that you can use however you please. Using the API, you can retrieve, create, edit and delete articles. Additionally, you can manipulate replies and reactions.&lt;/p&gt;

&lt;p&gt;As a result, you can use the API to display your blog articles in other places like your personal portfolio, for example.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-requisites
&lt;/h1&gt;

&lt;p&gt;There is some stuff you should be familiar with before you continue. The article shows how to use the Hashnode API, but it does not teach you about the underlying technologies.&lt;/p&gt;

&lt;p&gt;To follow the tutorial and implement the application, you should have basic knowledge about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;GraphQL&lt;/li&gt;
&lt;li&gt;HTTP requests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Besides that, you should have a &lt;a href="https://hashnode.com"&gt;Hashnode&lt;/a&gt; account. Without further ado, let's jump straight in!&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#get-started-with-the-hashnode-api"&gt;
  &lt;/a&gt;
  Get started with the Hashnode API
&lt;/h1&gt;

&lt;p&gt;You can visit the &lt;a href="https://api.hashnode.com/"&gt;API Playground&lt;/a&gt; and see the docs and schema available. If you are not familiar with GraphQL, the &lt;code&gt;docs&lt;/code&gt; specifies the queries and mutations you can perform on the data. On the other hand, the &lt;code&gt;schema&lt;/code&gt; is a description of the data. That is, it specifies what fields you can select, what object they return and so on.&lt;/p&gt;

&lt;p&gt;Before moving further, I advise you to give it a go and play a bit with it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sF9Qi3mA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618393360169/K7P9DJR0k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sF9Qi3mA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618393360169/K7P9DJR0k.png" alt="Hashnode API GraphQL Playground"&gt;&lt;/a&gt;&lt;br&gt;
Figure 1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In figure 1, above, you can see a simple query pulling all the featured stories from the first page. The query is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  storiesFeed(type: FEATURED, page: 0){
    title
    brief
    slug
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, you can pull the articles of a specific user as well. Let's take my user and blog as an example. You can fetch all my articles from the first page with the following query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  user(username: "catalinpit") {
    publication {
      posts(page: 0) {
        title
        brief
        slug
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Even though in both queries I selected only the &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;brief&lt;/code&gt; and &lt;code&gt;slug&lt;/code&gt; you can select more fields. As mentioned previously, &lt;strong&gt;check the docs and schema&lt;/strong&gt; to see what queries/mutation you can perform and what are the available fields.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#authentication-hashnode-personal-access-token"&gt;
  &lt;/a&gt;
  Authentication - Hashnode personal access token
&lt;/h1&gt;

&lt;p&gt;Some queries and mutations require authentication, which is based on personal access tokens. You can get your PAT (personal access token) from the &lt;a href="https://hashnode.com/settings/developer"&gt;developer settings&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TcOPkcY4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618394844659/wgP4Iykp8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TcOPkcY4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618394844659/wgP4Iykp8.png" alt="Hashnode Developer Settings - Personal Access Token"&gt;&lt;/a&gt;&lt;br&gt;
Figure 2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can get a new PAT by clicking on the button saying &lt;code&gt;Generate New Token&lt;/code&gt;. After you get the token, you can use it with the &lt;code&gt;Authorization&lt;/code&gt; HTTP header where the token is the value.&lt;/p&gt;

&lt;p&gt;It's important to note that you can use the Hashnode API without the token. However, there are some queries and mutation where you need the token. With that being said, let's move onto the next step.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#fetch-your-articles"&gt;
  &lt;/a&gt;
  Fetch your articles
&lt;/h1&gt;

&lt;p&gt;Let's create a Vanilla JavaScript application that you will use to fetch your Hashnode articles. The first step is to create two files. Create a file called &lt;code&gt;index.html&lt;/code&gt; and another one called &lt;code&gt;app.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After creating the files, open the HTML file, &lt;code&gt;index.html&lt;/code&gt;, and write the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Hashnode API Example&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"articles"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"app.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The HTML file is not too complicated. You set the title of the webpage and you link the JavaScript file. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fetch-function"&gt;
  &lt;/a&gt;
  Fetch function
&lt;/h3&gt;

&lt;p&gt;You will do all the work in the JavaScript file. Open the &lt;code&gt;app.js&lt;/code&gt; file and write the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;variables&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://api.hashnode.com/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;variables&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You use the above method - &lt;code&gt;gql&lt;/code&gt; - to fetch data from the Hashnode API. &lt;/p&gt;

&lt;p&gt;As you can see, it uses the fetch method to make POST requests to &lt;code&gt;https://api.hashnode.com/&lt;/code&gt;. In the POST requests, you also pass the query and additional variables. An example of an additional variable might be the page number.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#graphql-query"&gt;
  &lt;/a&gt;
  GraphQL query
&lt;/h3&gt;

&lt;p&gt;You can use the GraphQL queries straight in the &lt;code&gt;gql&lt;/code&gt; function from above. However, it can get messy if you write complex queries. Additionally, you cannot reuse the function if you use the queries straight in the &lt;code&gt;gql&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GET_USER_ARTICLES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
    query GetUserArticles($page: Int!) {
        user(username: "&amp;lt;your_Hashnode_username&amp;gt;") {
            publication {
                posts(page: $page) {
                    title
                    brief
                    slug
                }
            }
        }
    }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thus, you can store your GraphQL queries in a constant, as shown in the code snippet above. You store each query in its constant. Also, the query takes a &lt;code&gt;page&lt;/code&gt; variable so you can get the articles from a specific page.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fetch-data"&gt;
  &lt;/a&gt;
  Fetch data
&lt;/h3&gt;

&lt;p&gt;In this step, you are fetching your articles from the first page. You pass two arguments when you call the &lt;code&gt;gql&lt;/code&gt; function:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;GET_USER_ARTICLES&lt;/strong&gt; =&amp;gt; This is the GraphQL you wrote previously. Its purpose is to specify what the API should return.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;{ page: 0 }&lt;/strong&gt; =&amp;gt; The page you want to fetch the articles from.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;gql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;GET_USER_ARTICLES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;page&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;articles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nx"&gt;articles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;h2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;brief&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;p&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;brief&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;brief&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Read more...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://catalins.tech/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;brief&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;

        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What about &lt;code&gt;result.data.user.publication.posts&lt;/code&gt; from the third line? Let's look at figure 1 below.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lZTpI65Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620200087165/B-lpvyeSj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lZTpI65Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620200087165/B-lpvyeSj.png" alt="API response example"&gt;&lt;/a&gt;&lt;br&gt;
Figure 1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you look at figure 1, you can see that the &lt;code&gt;gql&lt;/code&gt; function returns an object called "data". The "data" object returns a "user" object. The "user" returns the "publication" object. And lastly, the "publication" returns the "posts" array. &lt;strong&gt;Thus&lt;/strong&gt;, with the line &lt;code&gt;result.data.user.publication.posts&lt;/code&gt; you access only your blog articles. &lt;/p&gt;

&lt;p&gt;After that, you store the array in the constant called &lt;code&gt;articles&lt;/code&gt;. Once you have the array of posts, you use the &lt;code&gt;forEach&lt;/code&gt; method to loop over each article from the array. For each article, you create a heading, a paragraph and a link. Then you append the elements to the &lt;code&gt;div&lt;/code&gt; container.&lt;/p&gt;

&lt;p&gt;The next step is to display the data on your page.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#display-data"&gt;
  &lt;/a&gt;
  Display data
&lt;/h3&gt;

&lt;p&gt;At the bottom of the &lt;code&gt;app.js&lt;/code&gt; file, write the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.getElementById('articles').parentNode.innerHTML = `
&amp;lt;div class="app"&amp;gt;
    &amp;lt;h1 class="app-heading"&amp;gt;Catalin Pit's Articles&amp;lt;/h1&amp;gt;
&amp;lt;/div&amp;gt;`;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the following code, you create a &lt;code&gt;div&lt;/code&gt; that will hold your application. Inside that div, you create a heading and you are done.&lt;/p&gt;

&lt;p&gt;If you visit your HTML page now, you should see the following:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8IVKAqqS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620201281592/I3HI7_mbg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8IVKAqqS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620201281592/I3HI7_mbg.png" alt="Hashnode API GET request to fetch your blog articles"&gt;&lt;/a&gt;&lt;br&gt;
Figure 2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Your web page might differ because you (should have) used your username. You should have different articles and header.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Thus, you can display the articles from your Hashnode blog by using the API. &lt;/p&gt;

&lt;p&gt;In this article, you can see a basic example of fetching your articles. However, you can do much more with the API. You can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create, edit and delete articles&lt;/li&gt;
&lt;li&gt;get the replies from your articles&lt;/li&gt;
&lt;li&gt;create, read, edit and delete replies&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Python - List Vs Tuple Memory Management</title>
      <author>Siddharth Chandra</author>
      <pubDate>Thu, 06 May 2021 05:10:24 +0000</pubDate>
      <link>https://dev.to/siddharth2016/python-list-vs-tuple-memory-management-4056</link>
      <guid>https://dev.to/siddharth2016/python-list-vs-tuple-memory-management-4056</guid>
      <description>&lt;p&gt;This article is going to be a short read, we will focus on how memory is managed in Python for objects like &lt;code&gt;list&lt;/code&gt; and &lt;code&gt;tuple&lt;/code&gt; and what can be the key takeaways.&lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#list"&gt;
  &lt;/a&gt;
  List
&lt;/h3&gt;

&lt;p&gt;Python list as we all know is a mutable dynamic array that behaves like a linked list as well. Let's look at some code for creating and updating a list:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ./list_1.py
&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;     &lt;span class="c1"&gt;# A new list gets created
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Initial List'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;# Updating list using in-built append method
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Append 4, List updated to'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;         &lt;span class="c1"&gt;# Pop last item
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Pop, List updated to'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;     &lt;span class="c1"&gt;# Updating list by adding a new list to given list
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Add new list, List updated to'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Following will be the output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Initial List &lt;span class="o"&gt;[&lt;/span&gt;1, 2, 3]
Append 4, List updated to &lt;span class="o"&gt;[&lt;/span&gt;1, 2, 3, 4]
Pop, List updated to &lt;span class="o"&gt;[&lt;/span&gt;1, 2, 3]
Add new list, List updated to &lt;span class="o"&gt;[&lt;/span&gt;1, 2, 3, 5, 6]
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's see what happens in memory when we run the above script, here we will be using &lt;code&gt;sys&lt;/code&gt; to help us out on viewing system-related information:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ./list_2.py
&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;     &lt;span class="c1"&gt;# A new list gets created
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Initial List'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Initial List Address'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Initial List Memory'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;# Updating list using in-built append method
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Append 4, List updated to'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Append 4, List Address'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Append 4, List Memory'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;         &lt;span class="c1"&gt;# Pop last item
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Pop, List updated to'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Pop, List Address'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Pop, List Memory'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;     &lt;span class="c1"&gt;# Updating list by adding a new list to given list
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Add new list, List updated to'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Add new list, List Address'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Add new list, List Memory'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's look at the output first:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Initial List &lt;span class="o"&gt;[&lt;/span&gt;1, 2, 3]
Initial List Address 139688582615624
Initial List Memory 88
Append 4, List updated to &lt;span class="o"&gt;[&lt;/span&gt;1, 2, 3, 4]
Append 4, List Address 139688582615624
Append 4, List Memory 120
Pop, List updated to &lt;span class="o"&gt;[&lt;/span&gt;1, 2, 3]
Pop, List Address 139688582615624
Pop, List Memory 120
Add new list, List updated to &lt;span class="o"&gt;[&lt;/span&gt;1, 2, 3, 5, 6]
Add new list, List Address 139688582615624
Add new list, List Memory 120
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Following points we can find out after looking at the output:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Initially, when the list got created, it had a memory of &lt;code&gt;88&lt;/code&gt; bytes, with 3 elements.&lt;/li&gt;
&lt;li&gt;Later on, after appending an element &lt;code&gt;4&lt;/code&gt; to the list, the memory changes to &lt;code&gt;120&lt;/code&gt; bytes, meaning more memory blocks got linked to list &lt;code&gt;l&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Even after popping out the last element the created blocks memory remains the same and still attached to list &lt;code&gt;l&lt;/code&gt;. And when we add another list with 2 more elements to the given list &lt;code&gt;l&lt;/code&gt;, we see that occupied memory is still the same &lt;code&gt;120&lt;/code&gt; bytes. Hence, we can conclude that it is behaving more like a dynamic array, which updates the size of the list to contain more elements at once to avoid repetitive callbacks (to create and attach new memory address) at every insertion of the new element.&lt;/li&gt;
&lt;li&gt;We also notice that the list address remains the same, even if we do append, pop or add a new list to it (as long as we don't assign it to a new variable). This advocates the nature of the mutability of python lists (it means, more or less, that at the same address we are able to update values or extend it further).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, let's look at the tuples.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tuple"&gt;
  &lt;/a&gt;
  Tuple
&lt;/h3&gt;

&lt;p&gt;Python tuple as we all know are immutable and do not extend in the memory further after the initial declaration. Now, let's look at the above same scenario but for tuples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ./tuple_1.py
&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;# A new tuple gets created
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Initial Tuple'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Initial Tuple Address'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Initial Tuple Memory'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;     &lt;span class="c1"&gt;# Updating tuple by adding a new tuple to given tuple
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Add new tuple, Tuple updated to'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Add new tuple, Tuple Address'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Add new tuple, Tuple Memory'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Initial Tuple &lt;span class="o"&gt;(&lt;/span&gt;1, 2, 3&lt;span class="o"&gt;)&lt;/span&gt;
Initial Tuple Address 140452527817280
Initial Tuple Memory 72
Add new tuple, Tuple updated to &lt;span class="o"&gt;(&lt;/span&gt;1, 2, 3, 5, 6&lt;span class="o"&gt;)&lt;/span&gt;
Add new tuple, Tuple Address 140452528572728
Add new tuple, Tuple Memory 88
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Following points we notice after looking at the output:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Since, tuples are immutable, once created cannot be updated unless a new tuple gets added to the previous one, resulting in the creation of a new tuple.&lt;/li&gt;
&lt;li&gt;Once a tuple gets created, its allocated memory will not be changed.&lt;/li&gt;
&lt;li&gt;Updating a tuple after adding another tuple to it, updates the address of the resulting tuple, this advocated its immutability property.&lt;/li&gt;
&lt;li&gt;We can see it allocates &lt;code&gt;72&lt;/code&gt; bytes for 3 values and &lt;code&gt;88&lt;/code&gt; for 6 values, it does not allocate the unnecessary amount of memory, only what is required is allocated.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's look at some miscellaneous points.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#misc"&gt;
  &lt;/a&gt;
  MISC
&lt;/h3&gt;

&lt;p&gt;What happens when we create an empty list and empty tuple?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ./misc.py
&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;t2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;l2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'List l1 address'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'List l2 address'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'List l1 memory'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'List l2 memory'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'List t1 address'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'List t2 address'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'List t1 memory'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'List t2 memory'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What did we get?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;List l1 address 139766851756616
List l2 address 139766851761800
List l1 memory 64
List l2 memory 64
List t1 address 139766871547976
List t2 address 139766871547976
List t1 memory 48
List t2 memory 48
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What did we find?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creating 2 empty lists have the same amount of memory allocated, whereas the address of both lists is different. It makes sense because, list address will have to act as mutable and cannot be the same at a given time, which means 2 different lists will be different unless they are the same (not in value but in reference point of view).&lt;/li&gt;
&lt;li&gt;Creating 2 empty tuples have the same amount of memory allocated and will point to the same address initially. It makes sense because of its immutability property. Consider integer &lt;code&gt;1&lt;/code&gt; value in python that is immutable and always point to the same address unless changed to some other integer. Similarly, the initial empty tuple will always point to the same address unless changed to some other tuple.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Well, that's it from me.&lt;/p&gt;

&lt;p&gt;We explored quite a few points on how memory is allocated and how it could be managed in Python.&lt;/p&gt;

&lt;p&gt;To know more about memory management, I encourage you to explore their code available on python's &lt;a href="https://github.com/python/cpython"&gt;repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Feeling it's difficult to go through the source code of python? Don't worry, we can always use available &lt;code&gt;sys&lt;/code&gt; module methods and other functions like &lt;code&gt;id&lt;/code&gt; to develop an understanding of what could be happening behind the scenes.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Just starting your Open Source Journey? Don't forget to check &lt;a href="https://github.com/siddharth2016/hello-open-source"&gt;Hello Open Source&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to showcase your Python project or just out there to explore? Check &lt;a href="https://github.com/siddharth2016/awesome-python-repos"&gt;Awesome Python Repos&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to make a simple and awesome game from scratch? Check out &lt;a href="https://github.com/siddharth2016/PongPong"&gt;PongPong&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to &lt;code&gt;++&lt;/code&gt; your GitHub Profile README? Check out &lt;a href="https://github.com/marketplace/actions/quote-readme"&gt;Quote - README&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Till next time!&lt;/p&gt;

&lt;p&gt;Namaste 🙏&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>8 Video Streaming Websites and their Alternatives</title>
      <author>shahul98</author>
      <pubDate>Thu, 06 May 2021 05:00:33 +0000</pubDate>
      <link>https://dev.to/shahul98/8-video-streaming-websites-and-their-alternatives-5fk8</link>
      <guid>https://dev.to/shahul98/8-video-streaming-websites-and-their-alternatives-5fk8</guid>
      <description>&lt;p&gt;With the arrival of movie streaming websites such as Netflix, Hulu, and Prime Video,  users are able to watch high-quality video content in the comfort of their homes by subscribing to it.&lt;/p&gt;

&lt;p&gt;However, not many people know about other free online streaming platforms where people can watch the latest movies and TV shows. The following is a list of 8 popular movie streaming sites and their alternatives.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-tvmuse"&gt;
  &lt;/a&gt;
  1. TVMuse
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PffHJAWe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620216426450/m49o115Lg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PffHJAWe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620216426450/m49o115Lg.jpeg" alt="tvmuse-homepage (1).jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tvmuse.cc/"&gt;TVMuse&lt;/a&gt; is a popular movie streaming website that aggregates video content. Users can watch movies and TV series on the web and can even download them for viewing later. Alternatives to TVMuse are WatchEpisodes and Flex.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-openload"&gt;
  &lt;/a&gt;
  2. Openload
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7aI9rTa3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620217214034/ciIYDXcL8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7aI9rTa3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620217214034/ciIYDXcL8.png" alt="Openload_download_page_screenshot.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Openload was a file-sharing website that made sharing files with friends and colleagues a breeze. It was the preferred website for many people to watch free movies and television shows. However, it was shut down in 2019 after legal action. Alternatives to Openload are Yes! Movies and VMovee.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-rabbit"&gt;
  &lt;/a&gt;
  3. Rabbit
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xSyw5frV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620217094384/fGHiyPvUE.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xSyw5frV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620217094384/fGHiyPvUE.jpeg" alt="Screenshot 2021-04-06 163307.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kast.gg/"&gt;Rabbit &lt;/a&gt; is a hugely popular platform that allowed users to co-watch movies and tv shows with friends in real-time. However, Rabbit was discontinued after it failed to secure funding. It is currently owned by Kast, another streaming service provider.  Alternatives to Rabbit are Netflix Party, Tutturu, and Invited.tv.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-popcorn-time"&gt;
  &lt;/a&gt;
  4. Popcorn Time
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Fc8vOhy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620216844894/-CD7jTKnm.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Fc8vOhy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620216844894/-CD7jTKnm.jpeg" alt="Capture (2).JPG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://popcorntime-online.ch/"&gt;Popcorn Time&lt;/a&gt; is a multi-platform, free software BitTorrent client that includes a free and open-source integrated media player. Alternatives to Popcorn Time are Kodi and Duckie TV.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-kissasian"&gt;
  &lt;/a&gt;
  5. KissAsian
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---K6xg1g7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620217276286/1QD8tjP6v.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---K6xg1g7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620217276286/1QD8tjP6v.jpeg" alt="Screenshot 2021-04-22 170915 (1).jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;KissAsian is an online-based platform where the users can watch movies, tv-series, and Asian dramas in HD quality for free. Alternatives to KissAsian are KOCOWA and MyDramaList.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-selecttv"&gt;
  &lt;/a&gt;
  6. SelectTV
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tVF1W-y2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620217151963/xvnq5CbCd.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tVF1W-y2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620217151963/xvnq5CbCd.jpeg" alt="maxresdefault.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.selecttv.com/"&gt;SelectTV&lt;/a&gt; is an aggregated smart guide for online media, bringing entertainment content from hundreds of free and paid sources together for consumers to browse, manage, and watch easily. Alternatives are JustWatch and Plex.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-kodi"&gt;
  &lt;/a&gt;
  7. Kodi
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jj07z4DF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620216969802/m-0Zxrm_0.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jj07z4DF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620216969802/m-0Zxrm_0.jpeg" alt="nexus2cee_Kodi2.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kodi.tv/"&gt;Kodi&lt;/a&gt; is a media player is software that can play media on your device.  It is free, open-source software for managing your local collection of movies, television shows, music, and photos. Alternatives to Kodi are Popcorn Time and Stremio.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-plex"&gt;
  &lt;/a&gt;
  8. Plex
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JtkPETXd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620217028547/BclIZam_q.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JtkPETXd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620217028547/BclIZam_q.jpeg" alt="plex-desktop-movies-1024x659.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.plex.tv/"&gt;Plex&lt;/a&gt; gives you one place to find and access all the media that matters to you. From personalized media to free and on-demand Movies, live TV, and shows, to music, you can enjoy it all in one app. Alternatives to Plex are MediaPortal and Kodi.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>What it takes to be a great Lead Engineer</title>
      <author>Daine Mawer</author>
      <pubDate>Thu, 06 May 2021 04:48:17 +0000</pubDate>
      <link>https://dev.to/dainemawer/what-it-takes-to-be-a-great-lead-engineer-1jhl</link>
      <guid>https://dev.to/dainemawer/what-it-takes-to-be-a-great-lead-engineer-1jhl</guid>
      <description>&lt;p&gt;3.5 years ago, I sat at my computer, wanting more for my career. I was already a Lead Engineer at an incredibly successful corporate technology company, managing multiple top-of-mind open-source projects and 4 junior - mid engineers.&lt;/p&gt;

&lt;p&gt;I thought I knew a lot about managing people and great code back then. Fast-forward nearly 4 years and it couldn't have been further from the truth. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inspiration"&gt;
  &lt;/a&gt;
  Inspiration
&lt;/h2&gt;

&lt;p&gt;In 2011, I sat by my grandfather's deathbed listening to the knowledge he had accrued over a near half-century-long multi-national career. In the 1930's he had started at the company delivering mail and by the 1970s, he had worked his way up to CEO - a mentality that is so often lost in the technology industry where everyone jumps ship for greener pastures more often than they should. &lt;/p&gt;

&lt;p&gt;Inspired by my grandfather's story I decided to change jobs in 2017 and throw away my hard-earned titles. I started, with a wealth of knowledge and experience, with no title and a very minimal salary at 10up in September 2017. It was important for me to start right at the bottom and put aside ego and salary expectations so that I could show the people I work with, one incredibly important trait: humility.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#junior"&gt;
  &lt;/a&gt;
  Junior
&lt;/h2&gt;

&lt;p&gt;The first year being "junior" was tough. I was 27 years old and felt like I was starting my career all over again. I made plenty of mistakes, and the learning curve was insane. I felt like I had a lot to prove and to be honest, in the first 3-6 months I felt like I didn't prove much. The first 2 years were a crash course in engineering technicality. I learned fast and I learned hard. &lt;/p&gt;

&lt;p&gt;There were days that felt impossible, there were tickets/tasks that felt like I had no idea how to even attempt and there were days where I attempted those tickets and failed. However, there were just as many days where I succeeded even my own expectations and the expectations of those around me. &lt;/p&gt;

&lt;p&gt;Peer feedback is a really underrated mechanism. During the first 2 years I spent working as a "junior", I received a ton of great feedback. My efforts were being noticed. Leadership was noticing my work ethic and my peers were beginning to respect my code style and mindset.  &lt;/p&gt;

&lt;p&gt;During my time as a Junior, while I was absorbing as much knowledge as I possibly could, I became aware that I had spent so many years focusing on code skills and engineering that I had left one important dynamic of seniority behind: people skills.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#senior"&gt;
  &lt;/a&gt;
  Senior
&lt;/h2&gt;

&lt;p&gt;2 years passed and I received my promotion to Senior. To date, my senior position at 10up has molded me more than any other experience in my life. I've spent many months honing my technical skills further, providing solutions that worked for clients, and co-tech-leading major builds and retainers with great success. But Senior to me wasn't how fast I could ensure a page load or how clean my ES6 JavaScript was. No, it was about one of the pillars of being a Lead: mentoring others.&lt;/p&gt;

&lt;p&gt;You see, being a great Lead Engineer really has nothing much to do with proving your technical ability to your peers and/or superiors. In fact, they already know that you're technically strong. &lt;/p&gt;

&lt;p&gt;There are of course things I still don't know, but for the most part, my technical ability remains acknowledged by my peers and at the same time you really begin to experiment with code, leveraging a deep understanding of the mechanics behind what you write.&lt;/p&gt;

&lt;p&gt;Where you really need to shine is helping those who are less experienced than you to be as good as you. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lead"&gt;
  &lt;/a&gt;
  Lead
&lt;/h2&gt;

&lt;p&gt;As with most positions, you generally spend a fair amount of time in Senior, really "being" Lead. Lead is a significant feat for engineers to achieve. You have an advanced understanding of web technologies but as I mentioned earlier you need to find ways to impart that knowledge to others while ensuring they can fight their own battles. &lt;/p&gt;

&lt;p&gt;That also means letting go of a certain amount of control, yourself. I struggled a lot with this. I have incredibly high expectations of myself and thus subconsciously, expect that of others. Something I had to admit and accept.&lt;/p&gt;

&lt;p&gt;Being Lead is about managing your own expectations of others while simultaneously ensuring their own success in their position.&lt;/p&gt;

&lt;p&gt;So how did I go about doing this? I've outlined below what I found most helpful.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-give-positive-sandwiches"&gt;
  &lt;/a&gt;
  1. Give Positive Sandwiches
&lt;/h3&gt;

&lt;p&gt;A positive sandwich is a technique for masking criticism. In a nice way, you give a compliment, then the criticism, then another compliment. Instead of saying:&lt;/p&gt;

&lt;p&gt;"Hey X, the function you wrote is breaking the staging website"&lt;/p&gt;

&lt;p&gt;You could say: "Hey x, looks like you wrote a great function we can reuse across the site, at the moment it seems to be breaking staging, I think it's probably something minor but if you could take a look when you get in today, I'd appreciate it, ping me if you need a hand."&lt;/p&gt;

&lt;p&gt;All too often I've seen Leads be blunt, bordering on rude, and it's not for lack of trying, they just feel like they wouldn't have made a mistake like that which can make Juniors and Seniors feel uncomfortable. At the end of the day, it's just code, but in the situation above it's got nothing to do with the code, it's about their confidence.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-let-go-of-your-own-expectations"&gt;
  &lt;/a&gt;
  2. Let go of your own expectations
&lt;/h3&gt;

&lt;p&gt;As I mentioned before, I have exceedingly high expectations of myself. Each piece of code I write is thoroughly tested and linted to ensure it's written in a way that checks all the best practice boxes and is something I can be proud of. &lt;/p&gt;

&lt;p&gt;But not everyone writes code like I do or understands parts of a codebase as I do. &lt;/p&gt;

&lt;p&gt;In this situation, you need to learn to take a step back and accept that the code that eventually gets merged is no reflection on you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-learn-how-to-support-other-leads"&gt;
  &lt;/a&gt;
  3. Learn how to support other Leads
&lt;/h3&gt;

&lt;p&gt;This is a point that most Leads don't really take into account. They're often siloed to their team of less experienced engineers who seem to take up all of their time. But supporting your direct peers is also important, and required for a successful project build. You may be Leads in different disciplines but from a human perspective, this means that you can support each other, whether that's on a technical level or a motivational one to ensure a better outcome.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-learn-humility"&gt;
  &lt;/a&gt;
  4. Learn humility
&lt;/h3&gt;

&lt;p&gt;Often, being high up in an organization comes with a level of stigma. Namely, ego. There's a "huff" about your title and people below you generally don't know whether to be intimidated by you or respect you. &lt;/p&gt;

&lt;p&gt;Well, that's 100% up to you. By practicing humility in your role each day, you'll achieve others' respect, after all in a Lead position, project outcomes become about your experience and how you handle others. Maintaining the mindset of: "I'm still learning" - makes it easy to stay humble and not overstep your bounds. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-learn-empathy"&gt;
  &lt;/a&gt;
  5. Learn empathy
&lt;/h3&gt;

&lt;p&gt;This is by far the most demanding and difficult soft skill to nurture. Personally, I'm a highly empathic human being, almost to my detriment. Professionally I seem to set aside some of that empathy as I expect results. But empathy doesn't just apply to what your expected output of an engineer is on any given day, it's also a useful tool to manage how people talk to you or interact with you. &lt;/p&gt;

&lt;p&gt;In fact, it's self-disarming. If I think back over the last 4 years, I could have gotten myself into a lot of nasty fights, but using empathy helped me develop respectful relationships both below my current position and above it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In closing, being a great Lead Engineer is more about people than great code. Technical know-how and implementation play a huge role, but if you can nurture, advise and aid engineers in a way that helps them grow and exceed their own expectations, then you'll be a successful Lead. &lt;/p&gt;

</description>
      <category>career</category>
      <category>leadership</category>
      <category>motivation</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Go Crash Course Part 4: Types, Conversion and Inference</title>
      <author>Mofizur Rahman</author>
      <pubDate>Thu, 06 May 2021 03:11:59 +0000</pubDate>
      <link>https://dev.to/moficodes/go-crash-course-part-4-types-conversion-and-inference-1np6</link>
      <guid>https://dev.to/moficodes/go-crash-course-part-4-types-conversion-and-inference-1np6</guid>
      <description>&lt;div class="ltag__link"&gt;
  &lt;a href="/moficodes" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wsTAGJOd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--z5HHrKkr--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/173296/ff1c7da5-b8e7-47d6-9606-e1557494c6a5.jpeg" alt="moficodes image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/moficodes/go-crash-course-part-iii-variables-and-functions-22p7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Go Crash Course Part III: Variables and Functions&lt;/h2&gt;
      &lt;h3&gt;Mofizur Rahman ・ May  5 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#go&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;The code for this part is in the &lt;code&gt;types&lt;/code&gt; folder under &lt;a href="https://github.com/moficodes/go-crash-course"&gt;this github repo&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#types"&gt;
  &lt;/a&gt;
  Types
&lt;/h2&gt;

&lt;p&gt;Go is a typed language. That means everything we create must have a type. &lt;/p&gt;

&lt;p&gt;There are a few basic types. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#boolean-types"&gt;
  &lt;/a&gt;
  Boolean Types
&lt;/h3&gt;

&lt;p&gt;Represents set of boolean value. With predefined constant &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;        &lt;span class="no"&gt;true&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#numeric-types"&gt;
  &lt;/a&gt;
  Numeric Types
&lt;/h3&gt;

&lt;p&gt;Integer and Floating point values. Following are architecture independent numeric types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;
&lt;span class="kt"&gt;uint8&lt;/span&gt;       &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;unsigned&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;integers&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;uint16&lt;/span&gt;      &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;unsigned&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;integers&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="m"&gt;65535&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;uint32&lt;/span&gt;      &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;unsigned&lt;/span&gt; &lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;integers&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="m"&gt;4294967295&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;uint64&lt;/span&gt;      &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;unsigned&lt;/span&gt; &lt;span class="m"&gt;64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;integers&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="m"&gt;18446744073709551615&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kt"&gt;int8&lt;/span&gt;        &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;signed&lt;/span&gt;  &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;integers&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;128&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="m"&gt;127&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;int16&lt;/span&gt;       &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;signed&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;integers&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;32768&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="m"&gt;32767&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;int32&lt;/span&gt;       &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;signed&lt;/span&gt; &lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;integers&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;2147483648&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="m"&gt;2147483647&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;int64&lt;/span&gt;       &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;signed&lt;/span&gt; &lt;span class="m"&gt;64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;integers&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;9223372036854775808&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="m"&gt;9223372036854775807&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kt"&gt;float32&lt;/span&gt;     &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;IEEE&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;754&lt;/span&gt; &lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;floating&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;point&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;
&lt;span class="kt"&gt;float64&lt;/span&gt;     &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;IEEE&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;754&lt;/span&gt; &lt;span class="m"&gt;64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="n"&gt;floating&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;point&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;

&lt;span class="kt"&gt;complex64&lt;/span&gt;   &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="nb"&gt;complex&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="kt"&gt;float32&lt;/span&gt; &lt;span class="nb"&gt;real&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;imaginary&lt;/span&gt; &lt;span class="n"&gt;parts&lt;/span&gt;
&lt;span class="kt"&gt;complex128&lt;/span&gt;  &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="nb"&gt;complex&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt; &lt;span class="nb"&gt;real&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;imaginary&lt;/span&gt; &lt;span class="n"&gt;parts&lt;/span&gt;

&lt;span class="kt"&gt;byte&lt;/span&gt;        &lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="kt"&gt;uint8&lt;/span&gt;
&lt;span class="kt"&gt;rune&lt;/span&gt;        &lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="kt"&gt;int32&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are architecture dependent. (Could be either 32 bit or 64 bit)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="kt"&gt;uint&lt;/span&gt;     &lt;span class="n"&gt;either&lt;/span&gt; &lt;span class="m"&gt;32&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="m"&gt;64&lt;/span&gt; &lt;span class="n"&gt;bits&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;      &lt;span class="n"&gt;same&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="kt"&gt;uint&lt;/span&gt;
&lt;span class="kt"&gt;uintptr&lt;/span&gt;  &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;unsigned&lt;/span&gt; &lt;span class="n"&gt;integer&lt;/span&gt; &lt;span class="n"&gt;large&lt;/span&gt; &lt;span class="n"&gt;enough&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;uninterpreted&lt;/span&gt; &lt;span class="n"&gt;bits&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;pointer&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#string-types"&gt;
  &lt;/a&gt;
  String Types
&lt;/h3&gt;

&lt;p&gt;String is a sequence of bytes. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#composite-types"&gt;
  &lt;/a&gt;
  Composite Types
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#array"&gt;
  &lt;/a&gt;
  Array
&lt;/h4&gt;

&lt;p&gt;Arrays are fixed length and fixed type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#slice"&gt;
  &lt;/a&gt;
  Slice
&lt;/h4&gt;

&lt;p&gt;Contiguous segment of underlying array. Has fixed type. Length can be dynamically reallocated. (More on this on a later chapter)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;slice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#maps"&gt;
  &lt;/a&gt;
  Maps
&lt;/h4&gt;

&lt;p&gt;Key value store. Similar to dictionary in python or object in JavaScript. But it still has a fixed type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;maps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h4&gt;

&lt;p&gt;Functions are also types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;42&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;function&lt;/code&gt; has a type &lt;code&gt;func() int&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#struct"&gt;
  &lt;/a&gt;
  Struct
&lt;/h4&gt;

&lt;p&gt;Custom type defined by user. Its a sequence of named elements  with name and types. Struct can be empty too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#channel"&gt;
  &lt;/a&gt;
  Channel
&lt;/h4&gt;

&lt;p&gt;Channels are typed conduit between running go routines. We will hold off on talking about channels until we talk about go routines. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interface"&gt;
  &lt;/a&gt;
  Interface
&lt;/h3&gt;

&lt;p&gt;An interface type specifies a method set called its interface. If a any type has the method set of the interface, that type implements the interface. All types implement the empty interface &lt;code&gt;interface{}&lt;/code&gt;. Interface does not have any type. Its always the underlying components type. A type can implement any number of interfaces. We will talk about interface in great details in a later post.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="c"&gt;// y now has a type of empty since that is the type of x.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#type-alias-and-type-definition"&gt;
  &lt;/a&gt;
  Type Alias and Type Definition
&lt;/h3&gt;

&lt;p&gt;We already saw 2 examples of type aliases. &lt;code&gt;byte&lt;/code&gt; and &lt;code&gt;rune&lt;/code&gt; are type aliases of &lt;code&gt;uint8&lt;/code&gt; and &lt;code&gt;uint32&lt;/code&gt; respectively. This means every time we use &lt;code&gt;byte&lt;/code&gt; we are basically using an &lt;code&gt;uint8&lt;/code&gt;. We can also define our own type from another base type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// type alias&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;myFloat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;aliasFloat&lt;/span&gt; &lt;span class="n"&gt;myFloat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;5.0&lt;/span&gt; &lt;span class="c"&gt;// has type float64&lt;/span&gt;
&lt;span class="c"&gt;// type definition&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;myint&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;aliasInt&lt;/span&gt; &lt;span class="n"&gt;myint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="c"&gt;// has type myint&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Type alias is useful for moving types between packages for refactoring. Lets say we were using a struct type called &lt;code&gt;coolstuff&lt;/code&gt; in a package. If we move the &lt;code&gt;coolstuff&lt;/code&gt; to a different package, we would have to refactor all the places where &lt;code&gt;coolstuff&lt;/code&gt; were being used. One way to mitigate issues during the refactor type is to create a type alias in the old package where &lt;code&gt;coolstuff&lt;/code&gt; was.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;coolstuff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newpackage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Coolstuff&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Type definition is used usually for creating enums. Or sometimes to extend existing types by attaching methods. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;myint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;myint&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Type int does not have any methods. But with &lt;code&gt;myint&lt;/code&gt; we can create a &lt;code&gt;double()&lt;/code&gt; method on our type. We have yet to talk about method and method receiver. We will talk about it in depth.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#type-conversion"&gt;
  &lt;/a&gt;
  Type Conversion
&lt;/h2&gt;

&lt;p&gt;Basic numeric types can be converted with &lt;code&gt;T()&lt;/code&gt; syntax. Where &lt;code&gt;T&lt;/code&gt; is the type to be converted to.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;355&lt;/span&gt;        &lt;span class="c"&gt;// type int&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="kt"&gt;float64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="c"&gt;// type float64&lt;/span&gt;
&lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c"&gt;// type byte (uint8)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Struct type can be converted to and from each other as long as they have identical field names and types in identical order.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;age&lt;/span&gt;  &lt;span class="kt"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;age&lt;/span&gt;  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="c"&gt;// try swapping these fields&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"john"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;std&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"paul"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s2&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;There is a way to type case any struct to any other struct using the &lt;code&gt;unsafe&lt;/code&gt; package. This is rarely used. If you write code that uses unsafe package, you better have a solid reasoning for it. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On function calls type conversion is automatic if the parameter can be converted to the desired type it gets converted. &lt;code&gt;int&lt;/code&gt; will be converted to &lt;code&gt;float&lt;/code&gt; but not the other way around because float to int can loose precision.&lt;/p&gt;

&lt;p&gt;For defined types, the conversion is uni directional. You can always use the underlying type in place of the defined type but not the other way around.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;definedTypeConversion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mi&lt;/span&gt; &lt;span class="n"&gt;myint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Type of mi=%T&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;takesInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Type of i=%d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;definedTypeConversion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aliasInt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;definedTypeConversion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// this get converted to myint type&lt;/span&gt;

&lt;span class="n"&gt;takesInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;takesInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aliasInt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// this does not work&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#inference"&gt;
  &lt;/a&gt;
  Inference
&lt;/h2&gt;

&lt;p&gt;We have seen example of inference a few times already. Every time we use the &lt;code&gt;:=&lt;/code&gt; operator, we are inferring the type of the left hand operand.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="c"&gt;// type inferred to int&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="c"&gt;// type inferred to int because of the type of x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Type inference also happens for numeric constants when passing to a function if the compiler does not detect a loss of precision or overflow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h2&gt;

&lt;p&gt;This is Part 4 of this Go crash course series.&lt;/p&gt;

</description>
      <category>go</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>10 Advices For Every Aspiring Web Developer </title>
      <author>Kingsley Ubah</author>
      <pubDate>Thu, 06 May 2021 03:00:03 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/10-advices-for-every-aspiring-web-developer-3lcj</link>
      <guid>https://dev.to/ubahthebuilder/10-advices-for-every-aspiring-web-developer-3lcj</guid>
      <description>&lt;p&gt;I have been in this industry for nearly two years now. &lt;/p&gt;

&lt;p&gt;Spent those two years learning, observing, teaching, building, planning and once again, learning!&lt;/p&gt;

&lt;p&gt;Here's one thing I really want you all to know: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No one knows it all.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I am not a complete expert, and neither is anyone out there. No one can memorize all language's syntax and rules from HTML, Git to React. &lt;/p&gt;

&lt;p&gt;Most highly proficient developers are very experienced when it comes to quickly finding  answers to their problems. They know where and when to look.&lt;/p&gt;

&lt;p&gt;Still, beginners are most likely to find themselves in a quandary regarding how to go about the interesting journey into web development, especially given the myriad of technologies present in the ecosystem.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you're looking for some kind of roadmap, I'll highly recommend &lt;a href="https://gumroad.com/a/834147443"&gt;HTML To React Course&lt;/a&gt; . It's very detailed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As someone with a fair amount of experience, here are 10 advices I have for beginners:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#just-start"&gt;
  &lt;/a&gt;
  Just Start.
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;"I don't have a computer",&lt;/em&gt;&lt;br&gt;
&lt;em&gt;"My computer is not capable enough",&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"I am not smart enough",*&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of those are just excuses, and are not true at all.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here's a fact:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;I started learning how to code websites without a computer. That's right, I used my Android phone to learn.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Not smart enough?&lt;/strong&gt; Well I used think even worse of myself. Yet here I am. &lt;/p&gt;

&lt;p&gt;You will really need to set aside the excuses and put more effort into starting. You don't need any dedicated system or fancy set-up. Just a computer with a web browser and internet connection will do.&lt;/p&gt;

&lt;p&gt;As you progress, you will gain more self-confidence.&lt;/p&gt;

&lt;p&gt;Start now, thank me later.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#find-detailed-resources"&gt;
  &lt;/a&gt;
  Find Detailed Resources
&lt;/h3&gt;

&lt;p&gt;As a Beginner, you're starting out with absolutely no knowledge of web development or programming. &lt;/p&gt;

&lt;p&gt;You don't know what HTML, CSS, JavaScript or Angular is. &lt;/p&gt;

&lt;p&gt;For this reason, it's very important that you go for courses and tutorials which contains a lot of information. &lt;/p&gt;

&lt;p&gt;I will highly recommend is &lt;a href="https://gumroad.com/a/834147443"&gt;HTML To React By Sleepless Yogi&lt;/a&gt;. However, if you want something free, there are many sites and YouTube channels to find quality and comprehensive tutorials.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#master-the-basics"&gt;
  &lt;/a&gt;
  Master the basics.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the basics to web development. It doesn't matter how or what you use in building your website, you'll always find HTML present.&lt;/p&gt;

&lt;p&gt;HTML has really evolved over the years. We now have a new standard which comes with more semantic elements to create meaningful markups and UX friendly websites.&lt;/p&gt;

&lt;p&gt;CSS is even more important. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No one wants to navigate a site with no design, that would be horrendous.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CSS is a very broad topic. At the start, it's very simple to use. However as you grow and build more websites professionally, you'll start to find CSS to be more interesting and perhaps difficult. That's why it's crucial you have a solid foundation.&lt;/p&gt;

&lt;p&gt;JavaScript is another very important and elementary technology to grasp. &lt;/p&gt;

&lt;p&gt;You have git, which is a source control software, DevTools for app debugging and assessment, and a text editor or IDE like VSCode.&lt;/p&gt;

&lt;p&gt;All of these are basics every Beginner must know. And once again, HTML To React covers the basics very well!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#practice-right-from-the-start"&gt;
  &lt;/a&gt;
  Practice Right From the Start.
&lt;/h3&gt;

&lt;p&gt;"HTML is so easy, I don't actually need to practice that." &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Wrong Wrong Wrong.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Don't underrate any thing when it comes to web development. You always have something to learn, even when it may not seem like it. &lt;/p&gt;

&lt;p&gt;Start playing with code right from the beginning.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#practice-consistently-build-projects"&gt;
  &lt;/a&gt;
  Practice Consistently, Build Projects.
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;"The easiest way to learn something is by Constant practise" - over 1 million motivational speakers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;That statement is especially true with developers.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;You might feel very confident with your abilities after watching a lengthy tutorial but I can assure you that implementation will not be as smooth. &lt;/p&gt;

&lt;p&gt;As you practice more, these things happen&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You learn things which the tutor may have left out.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You learn how to type faster&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You internalize certain Syntax and procedures&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You get smarter&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You buy me some coffee&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jokes aside, practicing is hands-down the best way to learn web development. &lt;/p&gt;

&lt;p&gt;It's also the most effective way to conquer your impostor syndrome. Take it from me.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#join-an-online-developer-community"&gt;
  &lt;/a&gt;
  Join an online developer community
&lt;/h3&gt;

&lt;p&gt;This is a very crucial step, which has helped me a whole whole lot.&lt;/p&gt;

&lt;p&gt;Some of you may already know me on Twitter but for those of you who don't, I joined Twitter on December 2020 and since then some incredible things have happened.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I have met some very friendly people&lt;/li&gt;
&lt;li&gt;I have grown to nearly 10,000 follows&lt;/li&gt;
&lt;li&gt;I made my first income&lt;/li&gt;
&lt;li&gt;I created an &lt;a href="//gumroad.com/l/WebDevBeginners"&gt;eBook&lt;/a&gt; and sold some copies&lt;/li&gt;
&lt;li&gt;I have learned a lot&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You learn a whole lot when you are active in some community. &lt;/p&gt;

&lt;p&gt;Apart from Twitter which I highly recommend, here are some developer communities to consider&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Practical Dev&lt;/li&gt;
&lt;li&gt;HashNode&lt;/li&gt;
&lt;li&gt;Reddit&lt;/li&gt;
&lt;li&gt;CodeWars&lt;/li&gt;
&lt;li&gt;HackerRank&lt;/li&gt;
&lt;li&gt;HackerNoon&lt;/li&gt;
&lt;li&gt;CodeNewbie&lt;/li&gt;
&lt;li&gt;FreeCodeCamp&lt;/li&gt;
&lt;li&gt;HackerNews&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and more.&lt;/p&gt;

&lt;p&gt;This is very important.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-tools-to-save-time"&gt;
  &lt;/a&gt;
  Use Tools To Save Time.
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;I am not telling you to spend $1000 dollars on some high end equipment, friend.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Some of the best IDEs, like &lt;strong&gt;VSCode&lt;/strong&gt;, provides you with a collection of highly useful extensions to save time and increase productivity.&lt;/p&gt;

&lt;p&gt;Here are some of them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Live Server&lt;/li&gt;
&lt;li&gt;Bracket Pair Colorizer&lt;/li&gt;
&lt;li&gt;Prettier&lt;/li&gt;
&lt;li&gt;Git History&lt;/li&gt;
&lt;li&gt;Auto Rename Tag&lt;/li&gt;
&lt;li&gt;Snippets&lt;/li&gt;
&lt;li&gt;Better Comments.&lt;/li&gt;
&lt;li&gt;Markdown All in One.&lt;/li&gt;
&lt;li&gt;Icons&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can check out what these tools do and see just how useful they really are.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It would be rather unwise to abandon all these tools for drudgery, **don't you think?&lt;/em&gt;**&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automatic-repetitive-tasks"&gt;
  &lt;/a&gt;
  Automatic Repetitive Tasks
&lt;/h3&gt;

&lt;p&gt;A lot of processes and tasks are repetitive. &lt;/p&gt;

&lt;p&gt;You don't need to do the same thing over and over again. It's not just tedious and boring, it's also a waste of precious time. &lt;/p&gt;

&lt;p&gt;This is why I highly advise you get familiar with the command line. &lt;/p&gt;

&lt;p&gt;That way, instead of always typing out long commands every single time, you create a simple script that automates the process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#google-is-your-friend"&gt;
  &lt;/a&gt;
  Google is your friend.
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Wait&lt;/strong&gt;, let me rephrase:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Google is your friend if you know how to use it.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Learn how to effectively search for solutions on Google. The accuracy of your search query may hold the balance between you remaining stuck and your salvation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-overwork-yourself"&gt;
  &lt;/a&gt;
  Don't Overwork Yourself.
&lt;/h3&gt;

&lt;p&gt;I feel attacked writing this particular part, but I am working on it.&lt;/p&gt;

&lt;p&gt;You should already know what happens when you overwork yourself:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stress&lt;/li&gt;
&lt;li&gt;Fatigue&lt;/li&gt;
&lt;li&gt;Insomnia&lt;/li&gt;
&lt;li&gt;Mental stress&lt;/li&gt;
&lt;li&gt;Health Issues&lt;/li&gt;
&lt;li&gt;Aids&lt;/li&gt;
&lt;li&gt;Cancer &lt;/li&gt;
&lt;li&gt;Death &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;I'm Joking lol.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But seriously, don't overwork yourself. Take intermittent breaks while coding. Drink lots of water. Don't persist when you're faced with a very difficult bug. Personally when I confront a difficult problem I close my laptop and stare at the roof.&lt;/p&gt;

&lt;p&gt;For 20 minutes.&lt;/p&gt;

&lt;p&gt;Maybe I'm crazy, but you get the point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I hope you got something valuable from this post. If you did, consider buying me favourite fruit:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/ubahthebuilder"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kc5Aqnyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520pineapple%26emoji%3D%25F0%259F%258D%258D%26slug%3Dubahthebuilder%26button_colour%3De0b51a%26font_colour%3D000000%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3DFFDD00"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Your support is highly appreciated.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thank you and see you soon.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>A simple guide to Action Cable </title>
      <author>Lucas Kuhn</author>
      <pubDate>Thu, 06 May 2021 02:00:19 +0000</pubDate>
      <link>https://dev.to/lucaskuhn/a-simple-guide-to-action-cable-2dk2</link>
      <guid>https://dev.to/lucaskuhn/a-simple-guide-to-action-cable-2dk2</guid>
      <description>&lt;p&gt;Action cable is the Rails way of implementing WebSockets - with some Rails magic. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-use-it"&gt;
  &lt;/a&gt;
  Why use it
&lt;/h2&gt;

&lt;p&gt;Usually your client to connects with your server by making requests: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4EXnZQgR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbkmkjgf1l8yh2cjbp9h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4EXnZQgR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbkmkjgf1l8yh2cjbp9h.png" alt="953F8214-7173-4755-B16E-AB6FC9983223"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With ActionCable, you create an open connection between your client and your server, allowing a communication flow: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G1E5K1pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9wdg07e6kawodmz9tqo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G1E5K1pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9wdg07e6kawodmz9tqo.png" alt="65223B82-BB95-4D36-8FC0-7EE6B1227ED4"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example:
&lt;/h3&gt;

&lt;p&gt;You have a simple blog - posts and comments - and multiple users reading that post. If one user adds a comment, the other one will never know: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ci4TINmU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l38e37j4mkyo32myub12.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ci4TINmU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l38e37j4mkyo32myub12.gif" alt="Kapture 2021-05-05 at 22.53.50"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But with the open connection from ActionCable, he will receive updates from that posts (the important comments from other people) &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U5emB7oH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2w07oj14gx6zk67sox5b.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U5emB7oH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2w07oj14gx6zk67sox5b.gif" alt="Kapture 2021-05-05 at 22.44.44"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-do-it"&gt;
  &lt;/a&gt;
  How to do it
&lt;/h2&gt;

&lt;p&gt;First of all, generate a &lt;em&gt;channel&lt;/em&gt; for your Posts. This class will be able to broadcast updates to all clients listening:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails generate channel posts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which will create some files for you:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      create    test/channels/posts_channel_test.rb
      create  app/channels/posts_channel.rb
   identical  app/javascript/channels/index.js
   identical  app/javascript/channels/consumer.js
      create  app/javascript/channels/posts_channel.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#sending-messages"&gt;
  &lt;/a&gt;
  Sending messages
&lt;/h2&gt;

&lt;p&gt;We will work with our newly generated &lt;code&gt;posts_channel.rb&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We want to specify from which channel to stream, so we can pass the an &lt;code&gt;id&lt;/code&gt;params and ask rails to make a stream for that post:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostsChannel&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationCable&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Channel&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;subscribed&lt;/span&gt;
    &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;stream_for&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now, from anywhere in our app, we can call PostsChannel and ask it to broadcast  something to anyone listening to that post:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;PostsChannel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;broadcast_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will add this to our create action, to broadcast the comment to the post channel every time a comment is created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/comments_controller.rb&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
  &lt;span class="vi"&gt;@comment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;comments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comment_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
      &lt;span class="no"&gt;PostsChannel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;broadcast_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="vi"&gt;@post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;notice: &lt;/span&gt;&lt;span class="s2"&gt;"Comment was successfully created."&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;:new&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that does nothing so far, since no one is listening to this broadcast. Moving forward! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#receiving-messages"&gt;
  &lt;/a&gt;
  Receiving messages
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#opinionated-setup"&gt;
  &lt;/a&gt;
  Opinionated setup:
&lt;/h4&gt;

&lt;p&gt;I do not like to create a separate file for every consumer, I prefer to do the connection in script tags in the view. It feels more like a separate front end, where only the views that need a connection create one. To do so, change your &lt;code&gt;app/javascript/channels/consumer.js&lt;/code&gt; to expose the action cable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createConsumer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@rails/actioncable&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ActionCable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createConsumer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;createConsumer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Exposing the cable &lt;a href="https://guides.rubyonrails.org/v5.0/action_cable_overview.html#client-side-components"&gt;was the default according to official docs&lt;/a&gt; until Rails 6, where Webpacker was introduced&lt;/p&gt;

&lt;p&gt;By default, the generator  we used before creates a file in &lt;code&gt;app/javascript/channels/posts_channel.js&lt;/code&gt; &lt;br&gt;
This might be bad for some reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It it always required, so it always run &lt;/li&gt;
&lt;li&gt;We might not want to have everyone on our app to try and open a connection, just the ones listening to our post show page &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So you can go ahead and delete the created posts_channel.js 🗑&lt;/p&gt;

&lt;p&gt;Now, we can make the listener to our broadcast in the view:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- app/views/posts/show.html.erb --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscriptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;PostsChannel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;connected&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Connected to the channel:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;disconnected&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Disconnected&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;received&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Received some data:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now, upon opening our blog post page, we can see the connected message on our Console, and some Rails main that enabled this connection on our terminal: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_dFIFJEY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k3kf26kih020li4qfmyi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_dFIFJEY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k3kf26kih020li4qfmyi.png" alt="82E5203A-8D8C-494E-8810-0CEACBF4AEAB"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;posts:Z2lkOi8vYWN0aW9uY2FibGUtYXBwL1Bvc3QvMg&lt;/code&gt; is the name of the channel created by rails when we told it to &lt;code&gt;stream_for post&lt;/code&gt; in our posts_channel file.&lt;/p&gt;

&lt;p&gt;And you’re done! 🎉 &lt;br&gt;
~Almost~&lt;/p&gt;

&lt;p&gt;While the above script received data, it doesn’t show it on the page. We can   update it to add the comment to our list upon receiving it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscriptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;PostsChannel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;%= @post.id %&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;received&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;li&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ul&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(All functions are optional, I removed the disconnected and connected from here) &lt;/p&gt;

&lt;p&gt;And there you go, your app now talks to any browser listening to it via Action Cable: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FLHTKSFB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mbep90d1wcrfbzi6nlns.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FLHTKSFB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mbep90d1wcrfbzi6nlns.gif" alt="Kapture 2021-05-05 at 22.44.44"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h4&gt;

&lt;p&gt;Rails Guide: &lt;br&gt;
 &lt;a href="https://guides.rubyonrails.org/action_cable_overview.html?fbclid=IwAR1e2hlrvUB0qPzmFZ1KB7JfkseRSAJUckbMkHV-caaBu-yH1LNxCI9fZEE"&gt;https://guides.rubyonrails.org/action_cable_overview.html&lt;/a&gt; &lt;br&gt;
Heroku Guide: &lt;br&gt;
 &lt;a href="https://l.facebook.com/l.php?u=https%3A%2F%2Fblog.heroku.com%2Freal_time_rails_implementing_websockets_in_rails_5_with_action_cable%3Ffbclid%3DIwAR3xePBKYPjiptHNHhW520hfxddI5moPOgCechqi3cGqFLXgRAUzU0c1s3w&amp;amp;h=AT1gDytX1Q7SvWag-FK-6TRL3ZQqfNAEMKx2s_0LuFMUBdFPhsoYAWTlAceA9-gF16zcVF0GsuYb5GIXMbhQoDs8S54CmrioiOYTDTVhXCXo-Mp1hFZuNVads7wETfNrJkJNtQQe"&gt;https://blog.heroku.com/real_time_rails_implementing_websockets_in_rails_5_with_action_cable&lt;/a&gt; &lt;br&gt;
Cable.yml Config: &lt;br&gt;
 &lt;a href="https://l.facebook.com/l.php?u=https%3A%2F%2Fgithub.com%2Frails%2Frails%2Fissues%2F28118%3Ffbclid%3DIwAR0hiW4E9dEvz4Awl5EDeDXmePJW8acG05dn-9lporNyWngNjr5PxRC_82c&amp;amp;h=AT1gDytX1Q7SvWag-FK-6TRL3ZQqfNAEMKx2s_0LuFMUBdFPhsoYAWTlAceA9-gF16zcVF0GsuYb5GIXMbhQoDs8S54CmrioiOYTDTVhXCXo-Mp1hFZuNVads7wETfNrJkJNtQQe"&gt;https://github.com/rails/rails/issues/28118&lt;/a&gt; &lt;br&gt;
Cable for specific pages: &lt;br&gt;
 &lt;a href="https://stackoverflow.com/questions/39597665/rails-actioncable-for-specific-pages?fbclid=IwAR0_Nz3ICdHB5JOE896e0HG51yhGiluGjzLuWCrlK2HecXVC545IMGJDk24"&gt;https://stackoverflow.com/questions/39597665/rails-actioncable-for-specific-pages&lt;/a&gt; &lt;br&gt;
 &lt;a href="https://l.facebook.com/l.php?u=https%3A%2F%2Fstackoverflow.com%2Fquestions%2F36438323%2Fpage-specific-actioncable%3Ffbclid%3DIwAR3DZ3CO7Biofa1DXfiWFXOurHdNbTrinUF_h5D8Bg6d_VT7jvrJIoADpxY&amp;amp;h=AT1gDytX1Q7SvWag-FK-6TRL3ZQqfNAEMKx2s_0LuFMUBdFPhsoYAWTlAceA9-gF16zcVF0GsuYb5GIXMbhQoDs8S54CmrioiOYTDTVhXCXo-Mp1hFZuNVads7wETfNrJkJNtQQe"&gt;https://stackoverflow.com/questions/36438323/page-specific-actioncable&lt;/a&gt; &lt;br&gt;
Good JS subscription examples: &lt;br&gt;
 &lt;a href="https://stackoverflow.com/questions/39597665/rails-actioncable-for-specific-pages?fbclid=IwAR11aMICYd5jBjdPylyMmmNUFSvx16sHLjhBjD-zbn7rPKFsQgEg3KRmV2M"&gt;https://stackoverflow.com/questions/39597665/rails-actioncable-for-specific-pages&lt;/a&gt; &lt;br&gt;
 &lt;a href="https://samuelmullen.com/articles/introduction-to-actioncable-in-rails-5/?fbclid=IwAR0NZcr4c9vk-B9avdHWabUCreEj5sF1mf8F_n48SWdsgvzS48on-nV1e3c"&gt;https://samuelmullen.com/articles/introduction-to-actioncable-in-rails-5/&lt;/a&gt; &lt;br&gt;
 &lt;a href="https://l.facebook.com/l.php?u=https%3A%2F%2Fstackoverflow.com%2Fquestions%2F36266746%2Factioncable-not-receiving-data%3Ffbclid%3DIwAR11aMICYd5jBjdPylyMmmNUFSvx16sHLjhBjD-zbn7rPKFsQgEg3KRmV2M&amp;amp;h=AT1gDytX1Q7SvWag-FK-6TRL3ZQqfNAEMKx2s_0LuFMUBdFPhsoYAWTlAceA9-gF16zcVF0GsuYb5GIXMbhQoDs8S54CmrioiOYTDTVhXCXo-Mp1hFZuNVads7wETfNrJkJNtQQe"&gt;https://stackoverflow.com/questions/36266746/actioncable-not-receiving-data&lt;/a&gt; &lt;br&gt;
Usage with ActiveJob &lt;br&gt;
 &lt;a href="https://www.pluralsight.com/guides/creating-a-chat-using-rails-action-cable?fbclid=IwAR2BNC0JG3-ADFvZn5nC9OxiFnTHWBX5cMPPyYIWbSI4Npwc4Jav6lr1tr4"&gt;https://www.pluralsight.com/guides/creating-a-chat-using-rails-action-cable&lt;/a&gt; &lt;br&gt;
Cable on ReactNative &lt;br&gt;
 &lt;a href="https://stackoverflow.com/questions/43510021/action-cable-not-receiving-response-on-client?fbclid=IwAR3DZ3CO7Biofa1DXfiWFXOurHdNbTrinUF_h5D8Bg6d_VT7jvrJIoADpxY"&gt;https://stackoverflow.com/questions/43510021/action-cable-not-receiving-response-on-client&lt;/a&gt; &lt;br&gt;
AnyCable&lt;br&gt;
&lt;a href="https://nebulab.com/blog/actioncable-vs-anycable-fight"&gt;Action Cable vs AnyCable: fight! | Nebulab&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>13 Unique and Fun APIs + Project ideas</title>
      <author>Dev Write Ups</author>
      <pubDate>Thu, 06 May 2021 01:51:07 +0000</pubDate>
      <link>https://dev.to/devwriteups/13-unique-and-fun-apis-project-ideas-53oo</link>
      <guid>https://dev.to/devwriteups/13-unique-and-fun-apis-project-ideas-53oo</guid>
      <description>&lt;p&gt;Being a developer is great - you can build almost anything you want! Sometimes, however, it's difficult to decide what to build next as there are so many different project ideas out there. To help you find your next project, I've come up with a list of APIs that you can play with and provided potential project ideas. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Subscribe to our  &lt;a href="https://www.devintro.com"&gt;newsletter&lt;/a&gt; , we send it occasionally with amazing news, resources and many thing.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#removalai-api"&gt;
  &lt;/a&gt;
  &lt;a href="//bit.ly/removalai"&gt;RemovalAI API&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1bHJ2REo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619757905207/pv3x2zIML.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1bHJ2REo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619757905207/pv3x2zIML.png" alt="Screenshot 2021-04-30 at 10-14-07 Background Remover Create Transparent Background.png"&gt;&lt;/a&gt;&lt;br&gt;
Background Removal API, Remove the background of any image* with 1 API call.  &lt;a href="//bit.ly/removalai"&gt;Removal.AI&lt;/a&gt;  makes it easy for you, it uses AI to remove background from your images, the final image which you get is more clean and good. Simple to use you just have to drag n drop your image into the website and see the awesome result.&lt;/p&gt;

&lt;p&gt;&lt;a href="//bit.ly/removalai"&gt;Link &lt;/a&gt; to API&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unsplash-api"&gt;
  &lt;/a&gt;
  &lt;a href="https://unsplash.com/developers"&gt;Unsplash API&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yL1ACzQ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619758189436/Urywt3nDB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yL1ACzQ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619758189436/Urywt3nDB.png" alt="Screenshot 2021-04-30 at 10-19-32 Unsplash Image API Free HD Photo API.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unsplash is a website that host "beautiful, free images and photos that you can download and use for any projects". It's API can be used to fetch photos from Unsplash. The Unsplash API could be used to make an application with a background that changes to a random image at different times during the day. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://unsplash.com/developers"&gt;Link &lt;/a&gt; to API&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-movie-database-api"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.themoviedb.org/documentation/api"&gt;The Movie Database API&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--coLQFNWj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619759716304/Hr1-C-kww.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--coLQFNWj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619759716304/Hr1-C-kww.png" alt="Screenshot 2021-04-30 at 10-44-24 The Movie Database (TMDb).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The API service is for those of you interested in using our movie, TV show or actor images and/or data in your application. Our API is a system we provide for you and your team to programmatically fetch and use our data and/or images.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.themoviedb.org/documentation/api"&gt;Link &lt;/a&gt; to API&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#slack"&gt;
  &lt;/a&gt;
  &lt;a href="https://api.slack.com/"&gt;Slack&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cLr5-gAX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619758342958/hYZJLEW3n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cLr5-gAX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619758342958/hYZJLEW3n.png" alt="Screenshot 2021-04-30 at 10-22-10 Slack API.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using the Slack API you can build tools that integrate directly with Slack. The Slack API can be used to build a chat-bot that can carry out various function such as setting reminders, checking the weather or communicating with other APIs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://api.slack.com/"&gt;Link &lt;/a&gt; to API&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#spotify-api"&gt;
  &lt;/a&gt;
  &lt;a href="https://developer.spotify.com/documentation/web-api/"&gt;Spotify API&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DjTz2-7A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619758555493/aCvR8j_Y3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DjTz2-7A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619758555493/aCvR8j_Y3.png" alt="Screenshot 2021-04-30 at 10-25-43 Web API Spotify for Developers.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use the Spotify API to create a home automation dashboard that shows what songs I'm currently playing and has controls to play, pause, skip tracks and set the volume (in addition to other functionality). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.spotify.com/documentation/web-api/"&gt;Link &lt;/a&gt; to API&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#devto-api-and-hashnode-api"&gt;
  &lt;/a&gt;
  &lt;a href="https://docs.forem.com/api/"&gt;Dev.to API&lt;/a&gt; and  &lt;a href="https://api.hashnode.com/"&gt;Hashnode API&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HtUCuF_Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619758672279/yWpaO_0Nt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HtUCuF_Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619758672279/yWpaO_0Nt.png" alt="Screenshot 2021-04-30 at 10-27-34 DEV API (beta).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using Dev.to's or Hashnode's own API you could create your own personal editor that can create, schedule and publish as well as edit old ones. While creating this app you'd have to build a markdown editor and a system to publish you articles to Dev.to. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.forem.com/api/"&gt;Link &lt;/a&gt; to API&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-meal-api"&gt;
  &lt;/a&gt;
  &lt;a href="https://themealdb.com/"&gt;The Meal API&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LalAPUzN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619759595223/_ubyQGcVBT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LalAPUzN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619759595223/_ubyQGcVBT.png" alt="Screenshot 2021-04-30 at 10-42-37 TheMealDB com.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The mean API gived you access to random meal data to use it in your application. This API contains all the meal categories with images, ingredients, videos, the country of each meal and many more features. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://themealdb.com/"&gt;Link &lt;/a&gt; to API&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hue-api"&gt;
  &lt;/a&gt;
  &lt;a href="https://developers.meethue.com/"&gt;Hue API&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gxvExwx3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619758906527/iU__n-NV_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gxvExwx3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619758906527/iU__n-NV_.png" alt="Screenshot 2021-04-30 at 10-30-41 Hue Your Imaginations - Philips Hue Developer Program.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have any products form the Phillips Hue family, it's likely that they can be controlled using the Hue API. The official app can become a bit busy when you have multiple devices, so you could build an app that can control Hue bulbs around the house, changing their color and brightness. You could also go back to basic and build a command-line app to control your lights!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developers.meethue.com/"&gt;Link &lt;/a&gt; to the API&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#random-jokes-api"&gt;
  &lt;/a&gt;
  &lt;a href="https://icanhazdadjoke.com/"&gt;Random Jokes API&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JpkvXM2C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619759975143/u8WWjA2f7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JpkvXM2C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619759975143/u8WWjA2f7.png" alt="jokes ai.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The random jokes API allows you to fetch random jokes data in an easy way using Fetch, Ajax XHR and etc. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://icanhazdadjoke.com/"&gt;Link &lt;/a&gt; to API&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#breaking-bad-quotes-api"&gt;
  &lt;/a&gt;
  &lt;a href="https://breakingbadquotes.xyz/"&gt;Breaking bad quotes API&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s7tklKdI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619760015682/tWVcNtqov.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s7tklKdI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619760015682/tWVcNtqov.png" alt="Screenshot 2021-04-30 at 10-50-07 Breaking Bad Quotes API.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A free API to retrieve some quotes of Breaking Bad, bitch!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://breakingbadquotes.xyz/"&gt;Link to API&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tronald-dump"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.tronalddump.io/"&gt;Tronald Dump&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bvY4QP_L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619760686470/Xms1ScJes.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bvY4QP_L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619760686470/Xms1ScJes.png" alt="Screenshot 2021-04-30 at 11-01-14 Tronald Dump.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Web archive for the dumbest things Donald Trump has ever said.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.tronalddump.io/"&gt;Link &lt;/a&gt; to API &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#marvel-api"&gt;
  &lt;/a&gt;
  &lt;a href="https://developer.marvel.com/"&gt; Marvel API&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--guWeUjx0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619760827700/yGr0CR8Jl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--guWeUjx0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619760827700/yGr0CR8Jl.png" alt="msd.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Marvel Comics API allows developers everywhere to access information about Marvel's vast library of comics—from what's coming up, to 70 years ago.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.marvel.com/"&gt;Link &lt;/a&gt; to API&lt;/p&gt;




&lt;p&gt;These and other APIs will assist you with supercharging your capacities. With dull issues dealt with, you'll be allowed to zero in with respect to your work that no one but you can perform.&lt;/p&gt;

&lt;p&gt;Thank your for Reading ⚡ We're here to see your amazing projects you will make with these APIs(Just comment it below and see 😊). Subscribe to our  &lt;a href="https://www.devintro.com"&gt;newsletter&lt;/a&gt; , we send it occasionally with amazing news, resources and many thing.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>api</category>
      <category>project</category>
      <category>programming</category>
    </item>
    <item>
      <title>Améliorer votre Python: Maîtriser les Listes</title>
      <author> </author>
      <pubDate>Thu, 06 May 2021 01:33:45 +0000</pubDate>
      <link>https://dev.to/ericcodeur/ameliorer-votre-python-maitriser-les-listes-9c6</link>
      <guid>https://dev.to/ericcodeur/ameliorer-votre-python-maitriser-les-listes-9c6</guid>
      <description>&lt;p&gt;*** &lt;small&gt;Je publie des articles régulièrement et en français. Pour ne rien manquer suivez moi en cliquant Follow&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Bonjour les amis!&lt;/p&gt;

&lt;p&gt;Aujourd'hui nous allons travailler sur un aspect très important pour tous ceux qui veulent devenir des experts Python: Les Listes.&lt;/p&gt;

&lt;p&gt;En Python, les listes sont une collection d'éléments dans un ordre particulier. Vous pouvez mettre tout ce que vous voulez dans une liste.&lt;/p&gt;

&lt;p&gt;Par convention, normalement, le nom de votre liste sera pluriel. Par exemple, une liste de produit peut être nommée: produits.&lt;/p&gt;

&lt;p&gt;Python utilise des crochets [] pour indiquer une liste, et les éléments individuels sont séparés par des virgules.&lt;/p&gt;

&lt;p&gt;Une liste peut être créé vide [] ou avec des éléments déjà à l'intérieur.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# vide
&lt;/span&gt;&lt;span class="n"&gt;produits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; 

&lt;span class="c1"&gt;# Avec éléments
&lt;/span&gt;&lt;span class="n"&gt;produits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'iPhone'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'iPad'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'iMac'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Une liste peut contenir des éléments de différent type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;liste_divers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'pomme'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;9.95&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'autre'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Une liste peut même contenir une autre liste&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;groupe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'groupe1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Marc'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Pierre'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;'groupe2'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Il existe plusieurs façon d'ajouter des éléments à une liste:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Exemple une liste de fruits
&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'orange'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'pomme'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'melon'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Ajouter un fruit à la liste
&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'banane'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# ['orange', 'pomme', 'melon', 'banane']
&lt;/span&gt;
&lt;span class="c1"&gt;# Insère un élément à la position x
&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'fraise'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;# Va inséré 'fraise' à la position 1
# ['orange', 'fraise', 'pomme', 'melon', 'banane']
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La liste est une base zéro. Cela signifie que la première position est 0 et la deuxième position est 1, etc. &lt;/p&gt;

&lt;p&gt;Vous pouvez d'ailleurs accéder à un élément unique de votre liste en utilisant les crochets []:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# premier item
&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# dernier item
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La position -1 représente le dernier élément de la liste.&lt;/p&gt;

&lt;p&gt;Avec cette logique de position négative il est possible d'accédé à l'avant dernier élément en utilisant -2 et ainsi de suite pour le reste de la liste.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'orange'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'fraise'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'pomme'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'melon'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'banane'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;dernier_fruit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# banane
&lt;/span&gt;&lt;span class="n"&gt;avant_dernier_fruit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# melon
&lt;/span&gt;&lt;span class="n"&gt;avant_avant_dernier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# pomme
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pour déterminer le nombre d'éléments dans une liste&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;nb_items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voici comment accéder à une liste dans une liste&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;groupe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'groupe1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Marc'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Pierre'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;'groupe2'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;groupe&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# Marc
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;groupe&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# Pierre
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Il est possible d'enlever des éléments de la liste&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="c1"&gt;# enlève fraise
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Enlever le dernier élément&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;lastFruit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;span class="c1"&gt;# enlever le dernier element
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Il est possible de récupérer une partie (tranche) de la liste.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'orange'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'fraise'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'pomme'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'melon'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'banane'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ma_liste&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# retourne les items 0, 1, 2
# ['orange', 'fraise' ,'pomme']
&lt;/span&gt;
&lt;span class="c1"&gt;# Même chose mais syntaxe abrégée
&lt;/span&gt;&lt;span class="n"&gt;ma_liste&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# retourne les items 0, 1, 2
# Quand le no n'est pas spécifié, Python commence à la position 0
&lt;/span&gt;
&lt;span class="c1"&gt;# Autre exemple
&lt;/span&gt;&lt;span class="n"&gt;ma_liste&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;  &lt;span class="c1"&gt;# retourne les derniers items
# ['melon','banane']
&lt;/span&gt;
&lt;span class="c1"&gt;# Copie complète
&lt;/span&gt;&lt;span class="n"&gt;copie_fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[:]&lt;/span&gt; 
&lt;span class="c1"&gt;# ['orange', 'fraise', 'pomme', 'melon', 'banane']
&lt;/span&gt;
&lt;span class="c1"&gt;# Changer l'ordre. L'ajout de :-1 permet de renverser l'ordre de la tranche retournée.
&lt;/span&gt;&lt;span class="n"&gt;ma_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# ['pomme', 'fraise', 'orange'] 
&lt;/span&gt;
&lt;span class="c1"&gt;# Un autre exemple
&lt;/span&gt;&lt;span class="n"&gt;copie_fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# Va faire une copie et renverse l'ordre
# ['banane', ',melon', 'pomme', 'fraise', 'orange'] 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Mais plus simplement, il existe une méthode qui permet de renverser une liste&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Il est possible de créer une liste à partir d'un string&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;couleurs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'rouge, vert, bleu'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;', '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# La method split divise la string en éléments
#['rouge', 'vert', 'bleu']
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pour trier une liste vous utilisé la syntaxe suivante:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'orange'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'fraise'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'pomme'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'melon'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'banane'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# ['banane', 'fraise', 'melon', 'orange', 'pomme']
&lt;/span&gt;
&lt;span class="c1"&gt;# Trier en ordre inversé
&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# ['pomme', 'orange', 'melon', 'fraise', 'banane']
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Méthode pour fusionner / concatener deux listes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Array concact
&lt;/span&gt;&lt;span class="n"&gt;couleurs1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'rouge'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'bleu'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;couleurs2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'vert'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'jaune'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;couleurs3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;couleurs1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;couleurs2&lt;/span&gt; 
&lt;span class="c1"&gt;# ['rouge', 'bleu', 'vert', 'jaune']
&lt;/span&gt;
&lt;span class="c1"&gt;# Concatener avec le "unpacking"
&lt;/span&gt;&lt;span class="n"&gt;couleurs3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;couleurs1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;couleurs2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# ['rouge', 'bleu', 'vert', 'jaune']
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Une liste peut être assigné à plusieurs variables&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Assignation multiple
&lt;/span&gt;&lt;span class="n"&gt;nom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'iPhone'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;599&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# nom = 'iPhone' 
# prix = 599
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Un Tuple est une liste non altérable. La syntaxe est des parenthèses a la place des crochets.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Creation d'un Tuple
&lt;/span&gt;&lt;span class="n"&gt;couleurs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'rouge'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'vert'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'bleu'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Parcourir les éléments d'une liste&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Itération dans la liste
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;couleur&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;couleurs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;couleur&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Creation d'une liste avec un "range" de nombre&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
&lt;span class="c1"&gt;# 1 2 3 4 5 6 7 8 9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La List Comprehension offre une syntaxe plus courte lorsque vous le souhaitez créer une nouvelle liste basée sur les valeurs d'une liste existante.&lt;/p&gt;

&lt;p&gt;Voici un exemple sans List Comprehension&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"pomme"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"banane"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"fraise"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"kiwi"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"mangue"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;liste_fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;"a"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;liste_fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;liste_fruits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# ['banane','fraise', 'mangue']
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voici un exemple avec List Comprehension&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"pomme"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"banane"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"fraise"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"kiwi"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"mangue"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;liste_fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;"a"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;liste_fruit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La syntaxe des List Comprehension:&lt;br&gt;
 [expression for item in iterable if condition == True]&lt;/p&gt;

</description>
      <category>french</category>
      <category>python</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>JavaScript Made Easy: Part 9</title>
      <author>David Tetreau</author>
      <pubDate>Thu, 06 May 2021 01:28:18 +0000</pubDate>
      <link>https://dev.to/dtetreau/javascript-made-easy-part-9-e6k</link>
      <guid>https://dev.to/dtetreau/javascript-made-easy-part-9-e6k</guid>
      <description>&lt;p&gt;Now that functions have been introduced, we will move on to some other concepts. Don't worry! We will come back to functions. There is a lot more to them. For Part 9 , we will explore objects. Open up your repl and code along!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#objects"&gt;
  &lt;/a&gt;
  Objects
&lt;/h2&gt;

&lt;p&gt;JavaScript objects are more complex than other data types such as strings or numbers. They store multiple collections of data. Here is an example of a JavaScript object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;German Shepherd&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black and tan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//logs the object&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that the object is assigned to a variable, so you can easily work with it elsewhere by using just the variable's name. Also, the object has the following characteristics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The object is enclosed within curly braces (mustaches)&lt;/li&gt;
&lt;li&gt;Each property has a name and value separated by a colon. We call this a "key: value" pair.&lt;/li&gt;
&lt;li&gt;The first key has the name of "breed". This key stores the value 'German Shepherd'. This value is a string. &lt;/li&gt;
&lt;li&gt; The object has three "key: value" pairs which are relevant to the variable name that they are stored in. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#accessing-objects"&gt;
  &lt;/a&gt;
  Accessing Objects
&lt;/h2&gt;

&lt;p&gt;Objects can be accessed in several different ways. First, you can access an object by dot notation. Here's an example with the same object from above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;German Shepherd&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black and tan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//logs the value stored in breed&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that the object name, followed by a dot, followed by the first key in the object was used to log the value stored in that key to the console. This would have worked for the other key value pairs as well (dog.color) and (dog.age).  You would have logged the value stored to both of those keys to the console. Try it!&lt;/p&gt;

&lt;p&gt;Another way to access the data stored in objects is to use bracket notation. Here's an example of bracket notation with the same object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;German Shepherd&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black and tan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;//logs the value stored in color&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that the object name followed by brackets containing the key inside of quotation marks was used to log the value stored in that key to the console.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#changing-objects"&gt;
  &lt;/a&gt;
  Changing Objects
&lt;/h2&gt;

&lt;p&gt;In addition to having the ability access the "key:value" pairs in an object, you can also change the data within the object. Here's an example using our example object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;German Shepherd&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black and tan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;breed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;//undefined&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that the delete operator deleted the "key:value" pair named breed. If you tried to log it to the console, undefined would be returned because it no longer exists. Adding "key:value" pairs to the dog object is just as easy. Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;German Shepherd&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black and tan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hair&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;long haired&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hair&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;//'long haired'&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Adding a key value pair involves nothing more than taking the object name and appending a key to it via dot or bracket notation and setting that equal to a value. This all occurs outside of the object. &lt;/p&gt;

&lt;p&gt;Take some time to manipulate the example object, add "key: value" pairs, delete "key: value" pairs, and experiment with assigning different data types to the values (objects, arrays, numbers, strings, booleans, undefined, null, etc). You will see that some of them work as values and some do not.  &lt;/p&gt;

&lt;p&gt;I hope you have enjoyed this post! Please check out the entire "JavaScript Made Easy" series by David Tetreau. There will be a new post daily.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Javascript's Strict Mode</title>
      <author>Jonathan Cohen</author>
      <pubDate>Thu, 06 May 2021 00:47:45 +0000</pubDate>
      <link>https://dev.to/jdc1492/javascript-s-strict-mode-2hbf</link>
      <guid>https://dev.to/jdc1492/javascript-s-strict-mode-2hbf</guid>
      <description>&lt;p&gt;Some devs would probably describe javascript as a flexible language. Flexible, in this case, would refer to JS allowing certain lines of code that don't fall under 'proper syntax' to run without issue. I've often heard this action be referred to as failing silently. 'Strict mode' could be used to combat this flexible behavior in a lot of cases. You could think of strict mode as a sort of JavaScript compass, pointing you in the general direction of your error.&lt;/p&gt;

&lt;p&gt;An example of not using strict mode vs. using strict mode could be seen with the variable assignment.  Not having strict mode while attempting to create a variable like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;love = "Shovel Knight and Shield Knight" ;
love;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Would run with JS considering the love variable a global variable created with the var keyword. With 'strict mode' set at the beginning of the script that variable assignment would not be allowed and JS would throw a reference error, showing you where the mistake was made.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'use strict' ;
love = "Shovel Knight and Shield Knight" ;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dF7eiQRA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://64.media.tumblr.com/f5ef4f6da11a6879a9dea05db20aa4f1/tumblr_n9yuz7pNjp1qh8rq6o2_500.gifv" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dF7eiQRA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://64.media.tumblr.com/f5ef4f6da11a6879a9dea05db20aa4f1/tumblr_n9yuz7pNjp1qh8rq6o2_500.gifv" alt="shovel and shield"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This would throw a reference error stating that love isn't defined. That error should let me know that I need to define the love variable with a keyword of either let or const. The var keyword can be considered as well but, for REASONS...... &lt;em&gt;ahem&lt;/em&gt;, we will just stick with let and const. &lt;/p&gt;

&lt;p&gt;Since realizing this was an actual thing in JS, I've been trying to make use of it as much as I can. It's helped me to get better with my syntax and there's so much more that I can do than help you avoid bad variable assignments. Give it a try if you get a chance &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
