<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Why We’re Bringing “Google Maps for Code” to Node.js Apps</title>
      <author>Kevin Gilpin</author>
      <pubDate>Tue, 18 Jan 2022 14:18:35 +0000</pubDate>
      <link>https://dev.to/appland/why-were-bringing-google-maps-for-code-to-nodejs-apps-45mg</link>
      <guid>https://dev.to/appland/why-were-bringing-google-maps-for-code-to-nodejs-apps-45mg</guid>
      <description>&lt;p&gt;We love JavaScript and TypeScript just as much as the next dev, but building high-performing, highly scalable Node.js apps sure isn’t easy! In particular, determining how exactly components work and interact with each other in different libraries and frameworks can be really challenging. &lt;/p&gt;

&lt;p&gt;Also, event-driven code execution makes it hard to understand how Node.js backend code actually works, especially when you’re working with older code that uses callbacks (&lt;a href="http://callbackhell.com/"&gt;callback hell&lt;/a&gt;  or &lt;a href="https://en.wikipedia.org/wiki/Pyramid_of_doom_(programming)"&gt;pyramid of doom&lt;/a&gt;, anyone?!). JavaScript’s relative lack of guardrails and not dictating design patterns as much as other languages do is great, but that increased freedom means you need solid architectural oversight and thorough code reviews. &lt;/p&gt;

&lt;p&gt;We’ve also found that while the Node.js core is super stable, the dev tooling is a bit immature compared to other languages. If you’re not careful, you end up writing messy Node.js apps. It takes a lot of grit and discipline to write really good JavaScript and TypeScript code! This is probably why the languages can be so difficult to learn on your own, and why skilled JavaScript and TypeScript developers can be so hard to find.&lt;/p&gt;

&lt;p&gt;So… let’s solve some of these challenges, shall we?! &lt;/p&gt;

&lt;p&gt;We are THRILLED to announce that after many requests from &lt;a href="https://appland.com/community/"&gt;our community&lt;/a&gt;, we’re releasing the &lt;a href="https://appland.com/docs/quickstart/"&gt;beta version of AppMap for JavaScript&lt;/a&gt;!!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-appmap"&gt;
  &lt;/a&gt;
  What’s AppMap?
&lt;/h3&gt;

&lt;p&gt;Here’s the deal for those of you who aren’t yet familiar: &lt;a href="https://appland.com/docs/appmap-overview.html"&gt;AppMap&lt;/a&gt; is like Google Maps for your backend code. It works with Ruby, Java, Python - and now JavaScript and TypeScript. AppMap collects information about how your code works and what it does as your code runs, and this information is presented as interactive maps (aka AppMaps) that you can search and navigate. It works equally well with monolithic code bases and microservices.  &lt;/p&gt;

&lt;p&gt;AppMap is free and open source, and you can use it right in your code editor (&lt;a href="https://marketplace.visualstudio.com/items?itemName=appland.appmap"&gt;VSCode&lt;/a&gt; or &lt;a href="https://plugins.jetbrains.com/plugin/16701-appmap"&gt;JetBrains&lt;/a&gt;) so your flow isn’t ever interrupted.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-can-i-do-with-it"&gt;
  &lt;/a&gt;
  What can I do with it?
&lt;/h3&gt;

&lt;p&gt;AppMap is a really helpful tool for working with complex languages like JavaScript and TypeScript, because it allows you to a) understand what exactly you’ve just built and b) what other devs have built. &lt;/p&gt;

&lt;p&gt;For example, you can use AppMap to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Document and explain your code&lt;/em&gt;&lt;/strong&gt; -- AppMap automatically documents end-to-end code and data flows, web services catalogs and your app’s database schema as you work. You can also record interactive maps of any piece of code and share it with other devs via a URL or by attaching it to a ticket in Jira or GitHub to clearly communicate your code’s behavior, logic and design.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Understand how new-to-you code works&lt;/em&gt;&lt;/strong&gt; -- Instead of trying to decipher an entirely new codebase, you can use AppMaps to learn and read just the code that’s relevant to your task. Source code is just a click away, so you can easily move back and forth between high-level code design views, code execution traces and source code details.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Debug code&lt;/em&gt;&lt;/strong&gt; -- Since AppMap provides interactive maps of all the factors that might be contributing to a bug, you can figure out where things are going wrong. You can quickly navigate around source code, and see parameter values, HTTP server and client requests and complete SQL queries.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-are-the-requirements"&gt;
  &lt;/a&gt;
  What are the requirements?
&lt;/h3&gt;

&lt;p&gt;You’ll need Node v14, 16, 17 (latest update) to get the most out of AppMap for JavaScript. &lt;/p&gt;

&lt;p&gt;Currently, AppMap for JavaScript is optimized to work with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An application that has mocha tests, mocha &amp;gt;= 8.0.0 (older versions are not supported)&lt;/li&gt;
&lt;li&gt;An application that uses the Express.js framework 4.x&lt;/li&gt;
&lt;li&gt;A git repository&lt;/li&gt;
&lt;li&gt;An application that uses one of these DB drivers: mysql, pg or sqlite3&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-do-i-get-started"&gt;
  &lt;/a&gt;
  How do I get started?
&lt;/h3&gt;

&lt;p&gt;Here’s a brief video that walks you through how to install the AppMap extension for VSCode, how to install the AppMap agent for JavaScript and how to use them to visualize the architecture of a Node.js application: &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/qFjBiLVGXgg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-can-i-find-more-info"&gt;
  &lt;/a&gt;
  Where can I find more info?
&lt;/h3&gt;

&lt;p&gt;Check out &lt;a href="https://appland.com/docs/appmap-overview.html"&gt;our doc site&lt;/a&gt; for more info on how AppMap works and what you can use it for. A detailed reference guide for AppMap for JavaScript can be found &lt;a href="https://appland.com/docs/reference/appmap-agent-js.html"&gt;here&lt;/a&gt; and breakdown of the install process is available &lt;a href="https://github.com/land-of-apps/appmap-agent-js-demo/tree/main/appmap"&gt;here&lt;/a&gt;. For more AppMap tutorials, check out &lt;a href="https://appland.com/blog/"&gt;our blog&lt;/a&gt; and &lt;a href="https://www.youtube.com/channel/UCxVv4gVnr2Uf2PSzoELZUcg"&gt;YouTube channel&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Let us know what you think or if you have any questions! You can &lt;a href="https://discord.com/invite/N9VUap6"&gt;chat with us 1:1 on our Discord server&lt;/a&gt;, &lt;a href="https://twitter.com/landofapps"&gt;tweet us @LandofApps&lt;/a&gt; or &lt;a href="//mailto:%20support@app.land"&gt;email us anytime&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Happy AppMapping!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>typescript</category>
    </item>
    <item>
      <title>How To Use Assertions In TestNG With Selenium</title>
      <author>Praveen Mishra</author>
      <pubDate>Tue, 18 Jan 2022 13:54:11 +0000</pubDate>
      <link>https://dev.to/mishrapraveen/how-to-use-assertions-in-testng-with-selenium-52no</link>
      <guid>https://dev.to/mishrapraveen/how-to-use-assertions-in-testng-with-selenium-52no</guid>
      <description>&lt;p&gt;Testing can be performed in a manual as well as automated manner. Irrespective of the type of testing approach being used, it is necessary to know the point at which the tests have to be halted (or stopped).&lt;/p&gt;

&lt;p&gt;When doing &lt;a href="https://www.lambdatest.com/selenium-automation?utm_source=devto&amp;amp;utm_medium=organic&amp;amp;utm_campaign=jan18_cd&amp;amp;utm_term=sb&amp;amp;utm_content=webpage"&gt;Selenium automation testing&lt;/a&gt;, we might come across a number of scenarios where a decision needs to be made on the subsequent execution of the tests. This is especially important in cases where the result of the previous test execution has resulted in a failure. If the issue encountered is a minor one, we can still proceed with the execution; otherwise, it is recommended to halt the test execution.&lt;/p&gt;

&lt;p&gt;This is where &lt;a href="https://www.lambdatest.com/blog/assert-and-verify-in-selenium-webdriver/?utm_source=devto&amp;amp;utm_medium=organic&amp;amp;utm_campaign=jan18_cd&amp;amp;utm_term=sb&amp;amp;utm_content=blog"&gt;Asserts in Selenium WebDriver&lt;/a&gt; comes to the rescue. The test execution halts when the condition (part of the assert) is not met. Thus, when performing &lt;a href="https://www.lambdatest.com/selenium-automation-testing-with-testng?utm_source=devto&amp;amp;utm_medium=organic&amp;amp;utm_campaign=jan18_cd&amp;amp;utm_term=sb&amp;amp;utm_content=webpage"&gt;Selenium automation testing with TestNG&lt;/a&gt;, assertions can be used for taking relevant steps when an issue is encountered.&lt;/p&gt;

&lt;p&gt;In this &lt;a href="https://www.lambdatest.com/learning-hub/testng?utm_source=devto&amp;amp;utm_medium=organic&amp;amp;utm_campaign=jan18_cd&amp;amp;utm_term=sb&amp;amp;utm_content=learning_hub"&gt;Selenium TestNG tutorial&lt;/a&gt;, we look at what are assertions in TestNG, different types of TestNG assertions, and how they can be used in scenarios pertaining to Selenium automation testing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-assertions-in-testng"&gt;
  &lt;/a&gt;
  What are Assertions in TestNG?
&lt;/h2&gt;

&lt;p&gt;Every &lt;a href="https://www.lambdatest.com/automation-testing?utm_source=devto&amp;amp;utm_medium=organic&amp;amp;utm_campaign=jan18_cd&amp;amp;utm_term=sb&amp;amp;utm_content=webpage"&gt;test automation&lt;/a&gt; framework (e.g., TestNG, JUnit, PyTest, etc.) provides a mechanism to raise asserts. Hence, the generic concept of &lt;a href="https://www.lambdatest.com/blog/assert-and-verify-in-selenium-webdriver/?utm_source=devto&amp;amp;utm_medium=organic&amp;amp;utm_campaign=jan18_cd&amp;amp;utm_term=sb&amp;amp;utm_content=blog"&gt;Asserts and Verify in Selenium&lt;/a&gt; is synonymous across different automation frameworks.&lt;/p&gt;

&lt;p&gt;As far as the TestNG framework is concerned, asserts in TestNG are used for validating the scenario under test. The outcome of the test can be decided based on the assertion status. TestNG assertion is raised if the ‘achieved test result’ is not the same as the ‘expected test result.’&lt;/p&gt;

&lt;p&gt;Assert Class in TestNG provides different methods that can be used to raise asserts. For using TestNG assertions, all you need to do is import the org.testng.Assert package.&lt;/p&gt;

&lt;p&gt;Let’s take a simple test scenario where the page title of the LambdaTest homepage has to be validated before further tests can be executed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TkXwDvhF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28amihb8fpmmlt9xcqmt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TkXwDvhF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28amihb8fpmmlt9xcqmt.jpg" alt="Image description" width="880" height="466"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here expected result would be ‘Most Powerful Cross Browser Testing Tool Online | LambdaTest.’ The following cases can arise during the process of test execution:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Case 1&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Fetched Title:&lt;/strong&gt; Most Powerful Cross Browser Testing Tool Online | LambdaTest&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Expected Title:&lt;/strong&gt; Most Powerful Cross Browser Testing Tool Online | LambdaTest&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Test case result:&lt;/strong&gt; Passed, as fetched title matches the expected title&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Case 2&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Fetched Title:&lt;/strong&gt; Most Powerful Cross Browser Testing Tool Online | LambdaTest&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Expected Title:&lt;/strong&gt; Most Powerful Cross Browser Testing Tool Online&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Test case result:&lt;/strong&gt; Failed, as fetched title does not match with the expected title&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above example that demonstrated TestNG assertions gives an overall idea about the what &amp;amp; how of assertions. Let’s look at the syntax and other internals of assertions in TestNG.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#syntax-of-testng-assertions"&gt;
  &lt;/a&gt;
  Syntax of TestNG assertions
&lt;/h2&gt;

&lt;p&gt;The Assert package in TestNG provides methods(or options) to raise assertions. Shown below is the generic syntax of TestNG assertions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Assert.methodName(actual, expected);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Assert&lt;/strong&gt; is the Class provided by the TestNG framework&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;methodName&lt;/strong&gt; is the name of the method that can be used for implementing TestNG assertions&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;actual&lt;/strong&gt; is the first parameter that describes the value that the user gets during the execution of the test script&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;expected&lt;/strong&gt; is the second parameter that describes what the user should get to validate the functionality of the test case&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-are-assertion-errors"&gt;
  &lt;/a&gt;
  What are Assertion errors?
&lt;/h2&gt;

&lt;p&gt;An Assertion Error, which is a subclass of the Error class, is thrown whenever an issue is encountered during the process of Selenium automation testing.&lt;/p&gt;

&lt;p&gt;Let’s take a look at a sample implementation on TestNG assertions where the Selenium test raises an Assertion Error due to an error in the code.&lt;/p&gt;

&lt;p&gt;The example shown below is run on the LambdaTest &lt;a href="https://www.lambdatest.com/blog/why-selenium-grid-is-ideal-for-automated-browser-testing/?utm_source=devto&amp;amp;utm_medium=organic&amp;amp;utm_campaign=jan18_cd&amp;amp;utm_term=sb&amp;amp;utm_content=blog"&gt;cloud Selenium Grid&lt;/a&gt;. A cloud-based Selenium Grid helps improve browser and test coverage by helping run tests on a range of browser and OS combinations. In addition, the overall process of Selenium Java automation testing using TestNG can be expedited by leveraging &lt;a href="https://www.lambdatest.com/blog/create-testng-xml-file-execute-parallel-testing/?utm_source=devto&amp;amp;utm_medium=organic&amp;amp;utm_campaign=jan18_cd&amp;amp;utm_term=sb&amp;amp;utm_content=blog"&gt;parallel testing in TestNG with Selenium&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.lambdatest;
import java.net.URL;
import java.util.ArrayList;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.testng.Assert;
import org.testng.annotations.AfterTest;
import org.testng.annotations.Test;

public class AssertionTestOnLambdatest
{
   private static RemoteWebDriver driver;
   private static String status;

   @Test
   public void hardAssertion() throws Exception
   {
       String username = "Enter your user name";
       String accesskey = "Enter your access key";
       String gridURL = "@hub.lambdatest.com/wd/hub";

       DesiredCapabilities capabilities = new DesiredCapabilities();

       capabilities.setCapability("browserName", "chrome");
       capabilities.setCapability("version", "latest");
       capabilities.setCapability("platform", "win10");
       capabilities.setCapability("build", "AssertionError Test");
       capabilities.setCapability("name", "AssertionError Test");
       capabilities.setCapability("visual", true);
       driver=new RemoteWebDriver(new URL("https://"+username+":"+accesskey+gridURL), capabilities);

       driver.get("https://www.lambdatest.com/");

       String expectedtitle="Most Powerful Cross Browser Testing Tool Online | LambdaTe";

       String actualtitle = driver.getTitle();
       ArrayList&amp;lt;String&amp;gt; exceptionCapture = new ArrayList&amp;lt;&amp;gt;();
       try
       {
           Assert.assertEquals(actualtitle, expectedtitle);
           status="passed";
       }
       catch(AssertionError e)
       {
           status = "failed";
           exceptionCapture.add(e.getMessage());
           ((JavascriptExecutor) driver).executeScript("lambda-exceptions", exceptionCapture);
       }
   }

   @AfterTest
   public void tearDown() throws Exception
   {

       if (driver != null) {
           ((JavascriptExecutor) driver).executeScript("lambda-status=" + status);
           driver.quit();
       }

   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since the tests are running on a cloud Selenium Grid, an instance of &lt;a href="https://www.lambdatest.com/blog/selenium-remotewebdriver/?utm_source=devto&amp;amp;utm_medium=organic&amp;amp;utm_campaign=jan18_cd&amp;amp;utm_term=sb&amp;amp;utm_content=blog"&gt;Remote WebDriver in Selenium&lt;/a&gt; is created before implementing the actual test logic. Then, relevant Selenium methods are used to access and perform operations on the WebElements in the DOM.&lt;/p&gt;

&lt;p&gt;The respective methods are placed under relevant &lt;a href="https://www.lambdatest.com/blog/complete-guide-on-testng-annotations-for-selenium-webdriver/?utm_source=devto&amp;amp;utm_medium=organic&amp;amp;utm_campaign=jan18_cd&amp;amp;utm_term=sb&amp;amp;utm_content=blog"&gt;TestNG annotations&lt;/a&gt;, thereby improving the readability of the tests. However, as seen in the implementation, the fetched title does not match with the expected title, which eventually results in an assertion error.&lt;/p&gt;

&lt;p&gt;The rest of the implementation is pretty straightforward, hence we are deep diving into those aspects of the code 🙂&lt;/p&gt;

&lt;p&gt;Invoke the following command on the terminal to kick-start the test execution:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mvn test –P single
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The test resulted in a failure as a TestNG assertion was raised since the read title did not match with the expected title.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--28J40cY7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jk9tvyf0303oe3xyd45u.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--28J40cY7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jk9tvyf0303oe3xyd45u.jpg" alt="Image description" width="880" height="467"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Navigate to the Exception tab in LambdaTest Automation Dashboard to check the details of the TestNG Assertion error.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Odd053IY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38h9xvko5p51v5j8424d.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Odd053IY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38h9xvko5p51v5j8424d.jpg" alt="Image description" width="880" height="362"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above images, we can clearly see that the expected title and actual title did not match; hence AssertionError is displayed. The noticeable point here is we do not see any clear failure message in all the above outputs. Let’s resolve this problem in the next section.&lt;/p&gt;

&lt;p&gt;Here’s a short glimpse of the TestNG certification from LambdaTest:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/dzXX2hJhuCY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#different-methods-in-testng-assertions"&gt;
  &lt;/a&gt;
  Different Methods in TestNG assertions
&lt;/h2&gt;

&lt;p&gt;​&lt;br&gt;
TestNG provides different methods to validate the test result during script execution. In this section, we will see the most commonly used assertion methods available for TestNG assertions&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Methods&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;assertEquals(String actual, String expected, String message);&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Asserts that two strings are equal. If not, then AssertionError is thrown. &lt;strong&gt;Parameters&lt;/strong&gt;- 'actual: actual value' 'expected: expected value' 'message: message that we want to display in case of failure'&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;assertEquals(boolean actual, boolean  expected, String message);&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Asserts that two boolean values are equal. If not, then AssertionError is thrown. &lt;strong&gt;Parameters&lt;/strong&gt;- 'actual: actual value' 'expected: expected value' ' message: message that we want to display in case of failure'&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;assertEquals(Collection &amp;lt;?&amp;gt; actual, Collection &amp;lt;?&amp;gt;  expected, String message);&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Asserts that two Collection type objects hold the same elements and in the same order. If not, an AssertionError is thrown. &lt;strong&gt;Parameters-&lt;/strong&gt; 'actual: actual value' 'expected: expected value' 'message: message that we want to display in case of a failure'&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;assertEqualsNoOrder(Object[] actual, Object[]  expected, String message);&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Asserts that two arrays contain the same elements in no particular order. If not, an AssertionError is thrown. &lt;strong&gt;Parameters&lt;/strong&gt;- 'actual: actual value' 'expected: expected value' 'message: message that we want to display in case there is a failure'&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;assertTrue(boolean condition, String message);&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Asserts that condition is true. If not, then AssertionError is thrown. &lt;strong&gt;Parameters:&lt;/strong&gt; 'condition: evaluate condition' 'message: Assertion error message in case of a failure.'&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;assertFalse(boolean condition, String message);&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Asserts that condition is false. If not, then AssertionError is thrown. &lt;strong&gt;Parameters&lt;/strong&gt;- 'condition: evaluate the condition' 'message: Assertion error message in case of a failure'&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;assertNotNull(Object object, String message);&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Asserts that an object is not null. If not, then AssertionError is thrown. &lt;strong&gt;Parameters&lt;/strong&gt;- 'object: assertion object' 'message: message that we want to display in case of a failure'&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;assertNull(Object object, String message);&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Asserts that an object is null. If not, then AssertionError is thrown. &lt;strong&gt;Parameters&lt;/strong&gt;- 'object: assertion object' 'message: message that we want to display in case of a failure'&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;assertNotSame(Object actual, Object expected, String message);&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Asserts that two objects do not refer to the same objects. If not, an AssertionError is thrown. &lt;strong&gt;Parameters&lt;/strong&gt;- 'actual: actual value' 'expected: expected value' 'message: message that we want to display in case of a failure'&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;assertSame(Object actual, Object expected, String message);&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Asserts that two objects refer to the same objects. If not, an AssertionError is thrown. &lt;strong&gt;Parameters&lt;/strong&gt;- 'actual: actual value' 'expected: expected value' 'message: message that we want to display in case of a failure'&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The “message” parameter is optional in all the above methods.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#assertion-messages-in-testng-tests"&gt;
  &lt;/a&gt;
  Assertion Messages in TestNG Tests
&lt;/h2&gt;

&lt;p&gt;TestNG provides the flexibility to add a custom message as a parameter inside the test method. The message helps in better understanding and tracking the reason behind the test failure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Assert.methodName(actual, expected, message);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have already discussed the major parameters in the earlier section. The newest parameter, ‘message’ is used for defining the custom message that is displayed in case the test results in a failure.&lt;/p&gt;

&lt;p&gt;We now modify the already demonstrated example where a custom ‘message’ is displayed when the TestNG assertion is raised.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.lambdatest;

import java.net.URL;
import java.util.ArrayList;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.testng.Assert;
import org.testng.annotations.AfterTest;
import org.testng.annotations.Test;

public class AssertionTestOnLambdatest
{

   private static RemoteWebDriver driver;
   private static String status;

   @Test
   public void hardAssertion() throws Exception
   {
       String username = "Enter your user name";
       String accesskey = "Enter your access key";
       String gridURL = "@hub.lambdatest.com/wd/hub";

       DesiredCapabilities capabilities = new DesiredCapabilities();

       capabilities.setCapability("browserName", "chrome");
       capabilities.setCapability("version", "latest");
       capabilities.setCapability("platform", "win10");
       capabilities.setCapability("build", "AssertionError Test");
       capabilities.setCapability("name", "AssertionError Test");
       capabilities.setCapability("visual", true);
       driver=new RemoteWebDriver(new URL("https://"+username+":"+accesskey+gridURL), capabilities);

       driver.get("https://www.lambdatest.com/");

       String expectedtitle="Most Powerful Cross Browser Testing Tool Online | LambdaTe;

       String actualtitle = driver.getTitle();
       ArrayList&amp;lt;String&amp;gt; exceptionCapture = new ArrayList&amp;lt;&amp;gt;();
       try
       {
           Assert.assertEquals(actualtitle, expectedtitle);
           status="passed";
       }
       catch(AssertionError e)
       {
           status = "failed";
           exceptionCapture.add("Title not matched"+" "+e.getMessage());
           ((JavascriptExecutor) driver).executeScript("lambda-exceptions", exceptionCapture);
       }
   }

   @AfterTest
   public void tearDown() throws Exception
   {

       if (driver != null) {
           ((JavascriptExecutor) driver).executeScript("lambda-status=" + status);
           driver.quit();
       }

   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As seen in the execution snapshot, the custom message is printed when the corresponding TestNG assert is raised.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LyjQNalK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hx8iqf4oykqf2vkshwxb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LyjQNalK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hx8iqf4oykqf2vkshwxb.jpg" alt="Image description" width="880" height="397"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As seen in the ‘Exception’ Tab of the Automation dashboard, the custom message ‘Title not matched’ is printed instead of the rudimentary message that we witnessed in the earlier screenshot.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AB681Ztm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rycstdvy9nrn4a4p94fp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AB681Ztm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rycstdvy9nrn4a4p94fp.jpg" alt="Image description" width="880" height="466"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uDOAyO_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ej8kyqps5hbrkk1ueihr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uDOAyO_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ej8kyqps5hbrkk1ueihr.jpg" alt="Image description" width="880" height="362"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#different-types-of-testng-assertions"&gt;
  &lt;/a&gt;
  Different types of TestNG Assertions
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.lambdatest.com/blog/assert-and-verify-in-selenium-webdriver/#softassert?utm_source=devto&amp;amp;utm_medium=organic&amp;amp;utm_campaign=jan18_cd&amp;amp;utm_term=sb&amp;amp;utm_content=blog"&gt;Soft Assertions&lt;/a&gt; and &lt;a href="https://www.lambdatest.com/blog/assert-and-verify-in-selenium-webdriver/#hardassert?utm_source=devto&amp;amp;utm_medium=organic&amp;amp;utm_campaign=jan18_cd&amp;amp;utm_term=sb&amp;amp;utm_content=blog"&gt;Hard Assertions&lt;/a&gt; are the two main types of Assertions in TestNG. The different types of asserts are defined based on the necessity that the user wants to halt the execution or continue the execution in case there is a failure.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#hard-assertions-in-testng"&gt;
  &lt;/a&gt;
  Hard Assertions in TestNG
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Hard TestNG Assertions&lt;/strong&gt; should be used when failure in test execution should halt the overall execution of the test suite. By default, TestNG assertions are ‘hard’ in nature. Hence, you need to import the org.testng.asserts.SoftAssert package if you want to raise Soft TestNG Assertions in your test.&lt;/p&gt;

&lt;p&gt;Let’s understand the above concept with the help of an example where the login has to be done before performing any actions on the site. Therefore, there is no point in validating the Home page until a successful login is done. In this case, we can use hard assertions on the Login page so that we would be able to stop our test execution immediately if the login is unsuccessful.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.lambdatest;
import java.net.URL;
import java.util.ArrayList;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.testng.Assert;
import org.testng.annotations.AfterTest;
import org.testng.annotations.Test;

public class HardAssertTest
{
   private static RemoteWebDriver driver;
  private static String status;
  @Test
  public void hardAssertion() throws Exception
  {
      String username = "user_name";
      //Enter your access key
      String accesskey = "access_key";
      //Enter Grid URL
      String gridURL = "@hub.lambdatest.com/wd/hub";
      //Set Desired capabilities to run on Lambdatest platform
      DesiredCapabilities capabilities = new DesiredCapabilities();
      capabilities.setCapability("browserName", "chrome"); //Set Browser Name
      capabilities.setCapability("version", "latest"); //Set browser version
      capabilities.setCapability("platform", "win10"); // If this cap isn't specified, it will just get the any available one
      capabilities.setCapability("build", "Hard Assert Test");
      capabilities.setCapability("name", "Hard Assert Test");
      capabilities.setCapability("visual", true);

      driver = new RemoteWebDriver(new URL("https://"+username+":"+accesskey+gridURL), capabilities);
      driver.get("https://www.lambdatest.com/");
      // Define expected title
      String expectedtitle = "Most Powerful Cross Browser Testing Tool Online | LambdaTe";
      // Extract Actual title
      String actualtitle = driver.getTitle();
      ArrayList&amp;lt;String&amp;gt; exceptionCapture = new ArrayList&amp;lt;&amp;gt;();
      try
      {
          //Assertion applied to validate the result
          Assert.assertEquals(actualtitle, expectedtitle);
          System.out.println("This statement will not be executed because the previous statement is failed");
          status="passed";
      }
      catch(AssertionError e)
      {
          //Logic to capture Assertion error message with user customized message in exception tab on lambdatest
          status = "failed";
          exceptionCapture.add("Title not matched"+" "+e.getMessage());
          ((JavascriptExecutor) driver).executeScript("lambda-exceptions", exceptionCapture);
      }
   }
   @AfterTest
   public void tearDown() throws Exception
   {
       if (driver != null)
       {
           ((JavascriptExecutor) driver).executeScript("lambda-status=" + status);
               driver.quit();
       }
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As seen in the screenshot from the automation dashboard, it is evident that the test has failed, and the custom message is printed as a part of the exception message.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q7RC7KJG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zyketuhjh9x0dlzm1ut1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q7RC7KJG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zyketuhjh9x0dlzm1ut1.jpg" alt="Image description" width="880" height="467"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZYW0lJGn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9aoqzjmd9jbmm9lycp2a.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZYW0lJGn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9aoqzjmd9jbmm9lycp2a.jpg" alt="Image description" width="880" height="413"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#soft-assertions-in-testng"&gt;
  &lt;/a&gt;
  Soft Assertions in TestNG
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Soft TestNG Assertions&lt;/strong&gt; are preferred in scenarios where a failure in the test should not result in halting the execution of the other tests in the test suite. Use soft assertions when the failure is not a major one, thereby having minimal (to no) impact on the subsequent tests.&lt;/p&gt;

&lt;p&gt;Soft Assert not only asserts a given assertion statement but also provides the flexibility to the user for continuing the execution of the test script even after assertion failure. For implementation, we use the SoftAssert class available in TestNG, and this SoftAssert class extends the Assertion class, which has almost all the assertion methods.&lt;/p&gt;

&lt;p&gt;In the case of Soft Assert, TestNG always executes only those test steps that are in between assert statement and assertAll statement. The steps present after the assertAll method will not be executed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.lambdatest;

import java.net.URL;
import java.util.ArrayList;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.testng.Assert;
import org.testng.annotations.AfterTest;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

public class SoftAssertTest
{
   private static RemoteWebDriver driver;
  private static String status;
  @Test
  public void softAssertion() throws Exception
  {
       String username = "user_name";

       //Enter your access key
       String accesskey = "access_key";

       //Enter Grid URL
       String gridURL = "@hub.lambdatest.com/wd/hub";

       //Set Desired capabilities to run on Lambdatest platform
       DesiredCapabilities capabilities = new DesiredCapabilities();

       capabilities.setCapability("browserName", "chrome"); //Set Browser Name
       capabilities.setCapability("version", "latest"); //Set browser version
       capabilities.setCapability("platform", "win10"); // If this cap isn't specified, it will just get the any available one
       capabilities.setCapability("build", "Hard Assert Test");
       capabilities.setCapability("name", "Hard Assert Test");
       capabilities.setCapability("visual", true);

       driver = new RemoteWebDriver(new URL("https://"+username+":"+accesskey+gridURL), capabilities);

       driver.get("https://www.lambdatest.com/");

       // Creating the object of SoftAssert Class
       SoftAssert softassert = new SoftAssert();

       // Define expected title
       String expectedtitle = "Most Powerful Cross Browser Testing Tool Online | LambdaTe";

       // Extract Actual title
       String actualtitle = driver.getTitle();
       // Soft Assertion applied to validate the result
       softassert.assertEquals(actualtitle, expectedtitle,"Title is not Matched");

       System.out.println("This statement will be executed even the previous statement is failed");
   }
   @AfterTest
   public void tearDown() throws Exception
   {
       if (driver != null)
       {
           driver.quit();
       }
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The execution output shows that a soft assert was raised, and the statement following the assert was also printed on the output console.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3yZ-yiGb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8qb2ftyaa9d9zrd7bin9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3yZ-yiGb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8qb2ftyaa9d9zrd7bin9.jpg" alt="Image description" width="880" height="414"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#custom-soft-assertions-in-testng"&gt;
  &lt;/a&gt;
  Custom Soft Assertions in TestNG
&lt;/h2&gt;

&lt;p&gt;In the previous sections, we demonstrated the implementation of different TestNG asserts, but there might be a need to write our assertions (called Custom Assertions).&lt;/p&gt;

&lt;p&gt;We will first create a CustomAssertion class, which extends the SoftAssert class so that we can use all assertion methods in TestNG. For demonstration purposes, we will take the example of the LambdaTest website in which we will validate whether the “Free start testing” button is a button web element or not.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iP_Iq0A9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hlbyimp0s96hhuypkgsc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iP_Iq0A9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hlbyimp0s96hhuypkgsc.jpg" alt="Image description" width="880" height="466"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.lt.assertions;

import org.openqa.selenium.WebElement;
import org.testng.asserts.SoftAssert;

public class CustomAssertion extends SoftAssert
{
   // We created assertButton in which we will validate whether element is button or not
   public void assertButton(WebElement element)
   {
       // Extract the tagname as well as type of element
       String tagname = element.getTagName();
       String type = element.getAttribute("type");

       // Verify whether tag is button and type is submit
       if(tagname.equals("button") &amp;amp;&amp;amp; type.equals("submit"))
       {
           System.out.println("Element is Button, So Assertion Passed");
       }
       else
       {
           // If assertion is failed then we will throw AssertionError
           throw new AssertionError("Element is not Button, So Assertion Failed");
       }
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we will create the main class where we test the recently created custom assertion. Here, we will inspect elements that we want to test and create the object of the above-created custom assertion class. Finally, with the help of the created object, we will call the method that we created in the custom assertion.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.lt.assertions;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;

public class TestAssertion
{
   public static void main(String[] args)
   {
       RemoteWebDriver driver;

       String username = "user_name";
      //Enter your access key
      String accesskey = "access_key";
      //Enter Grid URL
      String gridURL = "@hub.lambdatest.com/wd/hub";
      //Set Desired capabilities to run on Lambdatest platform
      DesiredCapabilities capabilities = new DesiredCapabilities();
      capabilities.setCapability("browserName", "chrome"); //Set Browser Name
      capabilities.setCapability("version", "latest"); //Set browser version
      capabilities.setCapability("platform", "win10"); // If this cap isn't specified, it will just get the any available one
      capabilities.setCapability("build", "Hard Assert Test");
      capabilities.setCapability("name", "Hard Assert Test");
      capabilities.setCapability("visual", true);
      driver = new RemoteWebDriver(new URL("https://"+username+":"+accesskey+gridURL), capabilities);

       driver.get("https://www.lambdatest.com/");

       // Inspect the “Free Testing Button” element
       WebElement freetestingbutton = driver.findElement(By.xpath("(//button[contains(text(),\"Start Free Testing\")])[1]"));

       // Creating the object of CustomAssertion class
       CustomAssertion customassert = new CustomAssertion();

       // Calling the custom created method with the help of object
       customassert.assertButton(freetestingbutton);
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we run the main class, then we can see our assertion is passed, and the success message is displayed on the console.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N92HVr1E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wetxnvfr1xlkpv0bpqgv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N92HVr1E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wetxnvfr1xlkpv0bpqgv.jpg" alt="Image description" width="880" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we want to fail the above TestNG assertion, add the following change in the existing implementation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Inspect the “Free Testing Button” element
WebElement freetestingbutton = driver.findElement(By.tagName("p"));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iQTo66QX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9yrvvwz04506t7vjzpuv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iQTo66QX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9yrvvwz04506t7vjzpuv.jpg" alt="Image description" width="880" height="406"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this TestNG tutorial with a focus on TestNG assert, we looked at different asserts and constraints helpful in Selenium automation testing. The reason for using assert in test code is to pause the execution as soon as assert is encountered.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.lambdatest.com/selenium-automation?utm_source=devto&amp;amp;utm_medium=organic&amp;amp;utm_campaign=jan18_cd&amp;amp;utm_term=sb&amp;amp;utm_content=webpage"&gt;Selenium testing&lt;/a&gt; is an essential element in ensuring the effectiveness of test automation. With the combination of cloud-based &lt;a href="https://www.lambdatest.com/selenium-automation?utm_source=devto&amp;amp;utm_medium=organic&amp;amp;utm_campaign=jan18_cd&amp;amp;utm_term=sb&amp;amp;utm_content=webpage"&gt;Selenium testing tools&lt;/a&gt; like LambdaTest, development teams can verify product functionalities across several browsers &amp;amp; operating system combinations. However, the core business logic remains intact, with minimal changes required to port the TestNG test code to the remote Selenium Grid.&lt;/p&gt;

&lt;p&gt;Let us know the TestNG asserts you have been using in the comments section to learn from each other’s experience.&lt;/p&gt;

&lt;p&gt;Happy Testing&lt;/p&gt;

</description>
      <category>testng</category>
      <category>assertions</category>
      <category>selenium</category>
      <category>testing</category>
    </item>
    <item>
      <title>tsParticles - Start confetti animation with just a click</title>
      <author>Matteo Bruni</author>
      <pubDate>Tue, 18 Jan 2022 13:44:03 +0000</pubDate>
      <link>https://dev.to/matteobruni/tsparticles-start-confetti-animation-with-just-a-click-2n37</link>
      <guid>https://dev.to/matteobruni/tsparticles-start-confetti-animation-with-just-a-click-2n37</guid>
      <description>&lt;p&gt;tsParticles - Start confetti animation with just a click&lt;/p&gt;

&lt;p&gt;Read more on GitHub: &lt;a href="https://github.com/matteobruni/tsparticles"&gt;https://github.com/matteobruni/tsparticles&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Website: &lt;a href="https://particles.js.org"&gt;https://particles.js.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/matteobruni/embed/YzrMVew?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/matteobruni"&gt;
        matteobruni
      &lt;/a&gt; / &lt;a href="https://github.com/matteobruni/tsparticles"&gt;
        tsparticles
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      tsParticles - Easily create highly customizable particles animations and use them as animated backgrounds for your website. Ready to use components available for React.js, Vue.js (2.x and 3.x), Angular, Svelte, jQuery, Preact, Inferno, Solid, Riot and Web Components.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://particles.js.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/58f22f0a546d5d7f34b4668dc842ac91b3a4cf9a5de72346559b7d15b13e587e/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f62616e6e6572322e706e67" alt="banner"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
tsParticles - TypeScript Particles&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;A lightweight TypeScript library for creating particles. Dependency free (*), browser ready and compatible with
React.js, Vue.js (2.x and 3.x), Angular, Svelte, jQuery, Preact, Inferno, Riot.js, Solid.js, and Web Components&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://openbase.com/js/tsparticles?utm_source=embedded&amp;amp;utm_medium=badge&amp;amp;utm_campaign=rate-badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/303db015a31c411aee869f57d55a44a53cd2f5380d0de5ee8abecb337a9452a6/68747470733a2f2f6261646765732e6f70656e626173652e636f6d2f6a732f726174696e672f74737061727469636c65732e737667" alt="Rate on Openbase"&gt;&lt;/a&gt; &lt;a href="https://www.jsdelivr.com/package/npm/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8c64088d02effc095dd7386325d216ce6d6bd46513a88ed2274e0ec4e6d876cf/68747470733a2f2f646174612e6a7364656c6976722e636f6d2f76312f7061636b6167652f6e706d2f74737061727469636c65732f62616467653f7374796c653d726f756e646564" alt="jsDelivr"&gt;&lt;/a&gt; &lt;a href="https://cdnjs.com/libraries/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e9e5a7a72f7cbc65eedd0e4d7431e4d4762c472ad4a66b6648a8e74c2b6be331/68747470733a2f2f696d672e736869656c64732e696f2f63646e6a732f762f74737061727469636c6573" alt="Cdnjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e18baafcedd7efbbd13d6e2b1cf738c07ea898383c946e6e7b16400f813d70cb/68747470733a2f2f62616467652e667572792e696f2f6a732f74737061727469636c65732e737667" alt="npmjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bc16ec38506bbab6f6b729850ad28fd94a5643f1633b4356647033c3aa3fe102/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f74737061727469636c6573" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://lerna.js.org/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3bc63f921dd60bac6d91aa900ef570c928b2aa4c2124ed23647e8fe9d2232853/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6d61696e7461696e6564253230776974682d6c65726e612d6363303066662e737667" alt="lerna"&gt;&lt;/a&gt; &lt;a href="https://www.codefactor.io/repository/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ce969771f1502f57861fe8ce7c787c209c50ef17c2e19f35cb1de0c960eba94a/68747470733a2f2f7777772e636f6465666163746f722e696f2f7265706f7369746f72792f6769746875622f6d617474656f6272756e692f74737061727469636c65732f6261646765" alt="CodeFactor"&gt;&lt;/a&gt; &lt;a href="https://www.codacy.com/manual/ar3s/tsparticles?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=matteobruni/tsparticles&amp;amp;utm_campaign=Badge_Grade" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8f96d4d0dccc9c7491f3ed07af70a808b0fd4d2e4d863a1f7bb9e51e10ae526e/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f6239383361616633343631613463343862316532656563636531666631643734" alt="Codacy Badge"&gt;&lt;/a&gt; &lt;a href="https://gitpod.io/#https://github.com/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/daadb4894128d1e19b72d80236f5959f1f2b47f9fe081373f3246131f0189f6c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f476974706f642d72656164792d2d746f2d2d636f64652d626c75653f6c6f676f3d676974706f64" alt="Gitpod Ready-to-Code"&gt;&lt;/a&gt; &lt;a href="https://repl.it/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/64adf1bd83058aa64f848245f74bef77cd7cc2a3f36343ac44d6d0c39cc41bc3/68747470733a2f2f7265706c2e69742f62616467652f6769746875622f6d617474656f6272756e692f74737061727469636c6573" alt="Run on Repl.it"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://join.slack.com/t/tsparticles/shared_invite/enQtOTcxNTQxNjQ4NzkxLWE2MTZhZWExMWRmOWI5MTMxNjczOGE1Yjk0MjViYjdkYTUzODM3OTc5MGQ5MjFlODc4MzE0N2Q1OWQxZDc1YzI" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ee2eed4d8159b570eef394a484f574d3bd038f6c64ad92ca0db286045486edcb/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f736c61636b2e706e67" alt="Slack"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/hACwv45Hme" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7c4f4ed816c2b77d7c2e15df3876cafa1cf89a896afb04633a1b6e28a81c5036/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f646973636f72642e706e67" alt="Discord"&gt;&lt;/a&gt; &lt;a href="https://t.me/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/309cad18f9a2090efdb147ac71064a969b826c3f4e9387f0a8d8e36e70133a80/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f74656c656772616d2e706e67" alt="Telegram"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.producthunt.com/posts/tsparticles?utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-tsparticles%22" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e86b7f51a0224618fe45aad99bff3e02ed8a5838691f244bf1df0e94454dafe2/68747470733a2f2f6170692e70726f6475637468756e742e636f6d2f776964676574732f656d6265642d696d6167652f76312f66656174757265642e7376673f706f73745f69643d313836313133267468656d653d6c69676874" alt="tsParticles Product Hunt"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/matteobruni/tsparticles#Do-you-want-to-use-it-on-your-website"&gt;Use for your website&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Library-installation"&gt;Library installation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/matteobruni/tsparticles#Official-components-for-some-of-the-most-used-frameworks"&gt;Official components for some of the most used frameworks&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Angular"&gt;Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Inferno"&gt;Inferno&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#jQuery"&gt;jQuery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Preact"&gt;Preact&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#ReactJS"&gt;ReactJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#RiotJS"&gt;RiotJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#SolidJS"&gt;SolidJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Svelte"&gt;Svelte&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#VueJS-2x"&gt;VueJS 2.x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#VueJS-3x"&gt;VueJS 3.x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Web-Components"&gt;Web Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#WordPress"&gt;WordPress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/matteobruni/tsparticles#Presets"&gt;Presets&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Big-Circles"&gt;Big Circles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Bubbles"&gt;Bubbles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Confetti"&gt;Confetti&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Fire"&gt;Fire&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Firefly"&gt;Firefly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Fireworks"&gt;Fireworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#fountain"&gt;Fountain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#links"&gt;Links&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Sea-Anemone"&gt;Sea Anemone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Snow"&gt;Snow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Stars"&gt;Stars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Triangles"&gt;Triangles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Templates-and-Resources"&gt;Templates and Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/matteobruni/tsparticles#Demo--Generator"&gt;Demo / Generator&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Characters-as-particles"&gt;Characters as particles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Mouse-hover-connections"&gt;Mouse hover connections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Polygon-mask"&gt;Polygon mask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Animated-stars"&gt;Animated stars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Nyan-cat-flying-on-scrolling-stars"&gt;Nyan cat flying on scrolling stars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Background-Mask-particles"&gt;Background Mask particles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Migrating-from-Particlesjs"&gt;Migrating from Particles.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#PluginsCustomizations"&gt;Plugins/Customizations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
Do you want to use it on your website?&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Documentation and Development references &lt;a href="https://particles.js.org/docs/" rel="nofollow"&gt;here&lt;/a&gt; 📖&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This library is available on the two most popular CDNs and it's easy and ready to use, if you were using particles.js
it's even&lt;/strong&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/matteobruni/tsparticles"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/matteobruni" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JQFfhxbE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--48F7T3mb--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/349511/bb633a3a-649f-4897-9773-86a525c8fdc3.png" alt="matteobruni"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/matteobruni/tsparticles-1390-released-2111" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;tsParticles 1.39.0 Released&lt;/h2&gt;
      &lt;h3&gt;Matteo Bruni ・ Jan 8 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>codepen</category>
      <category>showdev</category>
      <category>javascript</category>
      <category>html</category>
    </item>
    <item>
      <title>When to use the useRef hook ? </title>
      <author>The Nerdy Dev</author>
      <pubDate>Tue, 18 Jan 2022 13:38:56 +0000</pubDate>
      <link>https://dev.to/thenerdydev/when-to-use-the-useref-hook--3iom</link>
      <guid>https://dev.to/thenerdydev/when-to-use-the-useref-hook--3iom</guid>
      <description>&lt;p&gt;Hey everyone 👋🏻,&lt;/p&gt;

&lt;p&gt;In this article, let us learn about a very special React Hook called as the &lt;strong&gt;useRef&lt;/strong&gt; hook and understand how and when to use it. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article was first published on &lt;a href="https://the-nerdy-dev.com/when-to-use-the-useref-hook/"&gt;https://the-nerdy-dev.com&lt;/a&gt;.&lt;br&gt;
Check the website for more interesting articles and tutorials on Web Development.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-the-raw-useref-endraw-hook-"&gt;
  &lt;/a&gt;
  What is the &lt;code&gt;useRef&lt;/code&gt; hook ?
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;useRef&lt;/code&gt; hook is something that I briefly discussed in one of my articles where I described useRef hook as something equivalent to &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Removing the state updating function from the &lt;code&gt;useState&lt;/code&gt;, so basically just extracting the piece of state and take away the ability of state updation. This is something that will be equivalent to the &lt;code&gt;useRef&lt;/code&gt; hook. I also discussed in that article that both the ref and state values persists across renders, so it is not the case that on every subsequent re-render they get set back to some default. So do make a note of the above points.&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;useRef&lt;/code&gt; is a React Hook which accepts a single argument as the initial default value and gives us something called as a &lt;code&gt;ref&lt;/code&gt;. A ref is kind of an object that has a property called as &lt;code&gt;current&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Let us see an example :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SomeComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;usernameRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSomething&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;usernameRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currrent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;usernameRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;someOtherValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now the things to note here is that &lt;code&gt;usernameRef.current&lt;/code&gt; is used to access the value of the ref and if we want to update the ref value, then we can simply do so by setting &lt;code&gt;usernameRef.current&lt;/code&gt; to a value of our choice. &lt;/p&gt;

&lt;p&gt;To know more about refs, check my existing article on useRef hook. Here is the link for the same : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VANdOKgU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nc3fgautoc93fi2ive0u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VANdOKgU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nc3fgautoc93fi2ive0u.png" alt="Image description" width="880" height="494"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/useref-hook-useref-vs-usestate-3i7k" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;useRef Hook | useRef vs useState&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Jul 21 '21 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;In the above article, I have also taken some examples where I have demonstrated the usage of the &lt;code&gt;useRef&lt;/code&gt; hook, we have discussed : &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Ref Example - 1 (An Interval Timer)&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;2. Ref Example - 2 (Working with DOM using refs)&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;3. The third thing that we discussed in that article was :&lt;/strong&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;useRef just like useState persists a value across renders but unlike useState it does not trigger a re-render of the component.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So in essence, &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;useRef = useState - state updating function&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you don't know about the &lt;code&gt;useState&lt;/code&gt;, no worries. You can learn about the same in this article : &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/react-hooks-demystifying-the-usestate-hook-in-under-10-minutes-examples-video-29ab" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;React Hooks : Demystifying the useState hook in under 10 minutes [examples + video]&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Jun 28 '21 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#lets-sum-up-what-we-learnt-"&gt;
  &lt;/a&gt;
  Let's sum up what we learnt :
&lt;/h2&gt;

&lt;p&gt;A ref is a plain JavaScript Object &lt;br&gt;
&lt;code&gt;{ current: &amp;lt;some_value&amp;gt; }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you want to create a ref with the current value as null, then you can also make use of the &lt;code&gt;createRef&lt;/code&gt; method, &lt;br&gt;
&lt;code&gt;React.createRef()&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;This gives us : &lt;br&gt;
&lt;code&gt;{ current: null }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next, &lt;code&gt;useRef(someInitialValue)&lt;/code&gt; also gives us a ref &lt;code&gt;{ current: someInitialValue }&lt;/code&gt;. The interesting thing about &lt;code&gt;useRef&lt;/code&gt; is that it memoizes this ref so that it stays persistent across multiple renders of the component. &lt;/p&gt;

&lt;p&gt;Another point to make a note of is that : &lt;/p&gt;

&lt;p&gt;&lt;code&gt;useRef(null)&lt;/code&gt; is basically equivalent to &lt;code&gt;useState(React.createRef())[0]&lt;/code&gt;&lt;br&gt;
But this kind of abuses the functionality. &lt;/p&gt;

&lt;p&gt;Lastly, we learnt that &lt;code&gt;useState&lt;/code&gt; causes a re-render in contrast to &lt;code&gt;useRef&lt;/code&gt;. The state and the ref values (both) persist across re-renders. &lt;/p&gt;

&lt;p&gt;So this is it for this article. Thanks for reading. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you enjoy my articles, consider following me on Twitter for more interesting stuff :&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xdzF7_iP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lf9dc7pby59jmgkstw74.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xdzF7_iP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lf9dc7pby59jmgkstw74.png" alt="Image description" width="284" height="255"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;⚡Twitter : &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't forget to leave a like if you loved the article. Also share it with your friends and colleagues.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" alt="Alt Text" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt; - If you are looking to learn Web Development, I have curated a &lt;strong&gt;FREE&lt;/strong&gt; course for you on my YouTube Channel, check the below article :&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/2021-web-developer-full-course-html-css-javascript-node-js-and-mongodb-27pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;(2021) - Web Developer Full Course : HTML, CSS, JavaScript, Node.js and MongoDB&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Apr 28 '21 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Looking to learn React.js with one Full &lt;strong&gt;Project&lt;/strong&gt;, check this out : &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/learn-react-with-one-big-project-notes-included-demo-and-video-link-4fe5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Learn React with one BIG Project [NOTES included] - Demo and Video Link&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Jun 10 '21 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>react</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Lambda SQS Event Filters may delete your messages if you're not careful</title>
      <author>Maurice Borgmeier</author>
      <pubDate>Tue, 18 Jan 2022 13:19:58 +0000</pubDate>
      <link>https://dev.to/aws-builders/lambda-sqs-event-filters-may-delete-your-messages-if-youre-not-careful-ank</link>
      <guid>https://dev.to/aws-builders/lambda-sqs-event-filters-may-delete-your-messages-if-youre-not-careful-ank</guid>
      <description>&lt;p&gt;In a &lt;a href="https://aws-blog.de/2022/01/simplify-your-code-and-save-money-with-lambda-event-filters.html"&gt;recent post&lt;/a&gt; I wrote about Lambda Event Filters and their benefits. That was a follow-up to a talk I had given on the subject internally at &lt;a href="https://tecracer.de/"&gt;tecRacer&lt;/a&gt;. During that talk, my colleague &lt;a href="https://aws-blog.de/authors/sebastian-moehn.html"&gt;Sebastian Möhn&lt;/a&gt; asked an interesting question about the filters, which I'll look into today. He wanted to know what happens to SQS messages that don't match the filters. &lt;/p&gt;

&lt;p&gt;We'll get to that in a bit, but first, let's take a step back and get a brief primer on Lambda Event Filters. They were introduced in late 2021 and allow you to filter events from SQS, Kinesis or DynamoDB &lt;em&gt;before&lt;/em&gt; they trigger your Lambda function. Previously all events from those sources would trigger Lambda and you had to filter in your own code, which added complexity and cost, because the function was invoked even for events it didn't care about. With event filters that changes. We can now offload the undifferentiated heavy lifting of event filtering to AWS at no additional cost. &lt;/p&gt;

&lt;p&gt;It's an interesting question how the system responds to messages from SQS that don't match the filter, because SQS is different from the other two event sources that support the filter. DynamoDB Streams and Kinesis both deal with streaming data. It's part of that paradigm that multiple parties can read the same datapoint from the stream. That means it doesn't matter to other clients if one of the clients isn't interested in all the messages.&lt;/p&gt;

&lt;p&gt;SQS on the other hand implements the producer-consumer pattern. That means one or more producers create messages that can be processed by one or more consumers. Messages are &lt;em&gt;usually&lt;/em&gt; only processed by one consumer in the pool of consumers, so in most cases it behaves like one-to-one messaging. Additionally consumers have no direct way of picking the messages they want to work on, they have to process whatever SQS gives them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---poexxEj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2355ajv7b8457zhflaum.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---poexxEj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2355ajv7b8457zhflaum.png" alt="Stream vs. Queue" width="880" height="776"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This has implications for event filters between SQS-Queues and Lambda functions. If the filter rejects an incoming message from SQS, one of two things could happen:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The message is considered &lt;strong&gt;processed&lt;/strong&gt; and deleted from the Queue, preventing other consumers from reading it.&lt;/li&gt;
&lt;li&gt;The message is considered &lt;strong&gt;unprocessed&lt;/strong&gt; and not deleted from the Queue. It becomes available to (other) consumers again after the visibility timeout expires.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the first case this has the implication that messages are removed from the queue, even though other consumers may be able to process them. That means one Lambda consumer on the Queue, that doesn't want a message, has side effects for all other consumers. Depending on your architecture that may be a problem.&lt;/p&gt;

&lt;p&gt;The second case could lead to internal problems at AWS if we assume that Lambda under the hood uses the same SQS-API that's also publicly available. To understand why, you need to know how Lambda integrates with SQS. When you set up a SQS trigger for a Lambda function, the Lambda service will periodically poll the queue for work and invoke your code whenever there are messages to process. That happens in the background and you don't really need to worry about it.&lt;/p&gt;

&lt;p&gt;Assuming that Lambda uses the same APIs we do, there is no way for the service to skip already seen and ignored messages. So if there is only one Lambda consumer on the queue and discarded messages stay in the queue, we may experience congestion over time. That would be a less than ideal design, so my guess is that in reality the Lambda service really deletes messages that don't match the filter.&lt;/p&gt;

&lt;p&gt;Let's now see what the docs have to say on the matter:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can define up to five different filters for a single event source. If an event satisfies any one of these five filters, Lambda sends the event to your function. Otherwise, Lambda discards the event.&lt;/p&gt;

&lt;p&gt;— &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html"&gt;Lambda Event Filtering, 15.01.2022&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I'm not a native speaker, but to me "&lt;em&gt;discards&lt;/em&gt;" is a bit ambiguous. It could either mean that Lambda ignores the message and it's put back into the queue or that the service also removes the event from the queue. I'm not a big fan of ambiguity in technical documentation. Let's see for ourselves what happens.&lt;/p&gt;

&lt;p&gt;We're going to use the following test setup, &lt;a href="https://github.com/MauriceBrg/aws-blog.de-projects/tree/master/cdk-lambda-filter-sqs"&gt;the code is available on Github&lt;/a&gt;. A CDK-App deploys a SQS-Queue and a Lambda function that gets triggered by messages in the Queue. The event source will be filtered to only accept messages that have a &lt;code&gt;process_with_lambda&lt;/code&gt; attribute with the value 1. The lambda will then increment a counter in a DynamoDB table that counts how many messages have been processed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IW1kiGLc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wb5qke9xmig8dd8xbwoj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IW1kiGLc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wb5qke9xmig8dd8xbwoj.png" alt="Architecture" width="880" height="526"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We'll also have a script that sends alternating messages to the Queue (&lt;code&gt;job_generator.py&lt;/code&gt;). The first message will have the &lt;code&gt;process_with_lambda&lt;/code&gt; attribute and the second won't. This script will send 20 messages of each kind to the queue and then we'll wait for a few seconds. If the processing worked, we should see a counter value of 20 in the table. Then we'll check how many messages are still in the queue.&lt;/p&gt;

&lt;p&gt;If that number is 0, we know that Lambda acts according to 1) and "discarded" means the messages are deleted from the queue. If there is a non-zero number in the Queue, Lambda sends messages back to the queue for further processing. Let's run the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;python job_generator.py
&lt;span class="go"&gt;Removing summary item from table
Purging Queue
Purging queues can take up to 60 seconds, waiting...
Sending Message Group 1 with 2 messages
Sending Message Group 2 with 2 messages
Sending Message Group 3 with 2 messages
[...]
Sending Message Group 18 with 2 messages
Sending Message Group 19 with 2 messages
Sending Message Group 20 with 2 messages
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The script first resets the counter in the table and purges the already existing messages from the Queue. Since that can take up to 60s, I've added a sleep for one minute here. Afterwards we send 40 messages in total to the Queue. Then it's time to wait for a few seconds to give Lambda time to process the messages asynchronously. Afterwards we can run the script to fetch the results:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;python get_result.py   
&lt;span class="go"&gt;Lambda processed 20 records
The Queue contained 0 messages
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As expected the Lambda function received the messages according to the filter. It turns out that option 1) is what AWS implemented when it comes to dealing with messages that don't match the filter. Messages that don't match it are simply deleted from the Queue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We learned that the Lambda Event Filter deletes messages from the Queue when they don't match the filter criteria. That has not been completely clear from the documentation, but it's a sensible implementation given the constraints imposed by the SQS API.&lt;/p&gt;

&lt;p&gt;This implementation has implications for queues that have multiple consumers of messages. If you add a Lambda function with an event filter to the set of consumers, there might be data loss, if the other subscribers could process messages not intended for Lambda. In that case you'll lose messages without a clear indication why.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OGEEQ-5W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z73txkdvelcrns2vt82u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OGEEQ-5W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z73txkdvelcrns2vt82u.png" alt="Lambda Filter SQS delete" width="880" height="374"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a workaround, you could use a SNS topic in front of the Queue to fan out messages to multiple interested parties by setting up a Queue for each party. This will come with additional costs though.&lt;/p&gt;

&lt;p&gt;It would be great if AWS removed the ambiguity here and ideally added a warning to the console when you're adding filters. If you know it, you can plan for it - if you don't you'll experience unexpected behaviour. &lt;em&gt;#awswishlist&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I hope you enjoyed the post and for any feedback, questions or concerns, feel free to reach out via the social media channels in my bio.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>lambda</category>
      <category>sqs</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Introduction to Machine Learning with AWS - Part 1</title>
      <author>Adit Modi</author>
      <pubDate>Tue, 18 Jan 2022 13:17:35 +0000</pubDate>
      <link>https://dev.to/aws-builders/introduction-to-machine-learning-with-aws-part-1-476m</link>
      <guid>https://dev.to/aws-builders/introduction-to-machine-learning-with-aws-part-1-476m</guid>
      <description>&lt;p&gt;AWS offers the broadest and deepest set of machine learning services and supporting cloud infrastructure, putting machine learning in the hands of every developer, data scientist and expert practitioner.&lt;/p&gt;

&lt;p&gt;In this blog post, we will discuss some of the most important AWS machine learning services that help you make accurate predictions, get deeper insights from your data, reduce operational overhead, and improve customer experience. AWS helps you at every stage of your ML adoption journey with the most comprehensive set of artificial intelligence (AI) and ML services, infrastructure, and implementation resources.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9-h_GGkg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dovlzi24raggblu8n3ld.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9-h_GGkg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dovlzi24raggblu8n3ld.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;The Introduction to AWS&lt;/strong&gt; is a Series containing different articles that provide a basic introduction to different aws topics/categories. Each article covers the detailed guide on how to work with particular topic/category . This series aims at providing "A Getting Started Guide on Different aws topics / categories ."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#aws-machine-learning-services"&gt;
  &lt;/a&gt;
  AWS Machine Learning Services
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;AWS helps streamline self-service processes and reduce operational costs through chatbots and virtual assistants.&lt;/li&gt;
&lt;li&gt;AWS compiles data from siloed and unstructured sources across your organization to drive business productivity and customer satisfaction.&lt;/li&gt;
&lt;li&gt;AWS helps drive customer engagement and conversion with websites tailored to individual visitors—and see your conversion rates soar.&lt;/li&gt;
&lt;li&gt;Using AWS, customers can instantly extract text and data from virtually any document, such as loan applications and medical forms, without manual effort.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#sagemaker"&gt;
  &lt;/a&gt;
  SageMaker
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V-YXppNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7tgpvim9ms3gt12tjyo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V-YXppNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7tgpvim9ms3gt12tjyo.png" alt="image" width="133" height="134"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;SageMaker is a fully-managed platform that enables developers and data scientists to quickly and easily build, train, and deploy machine learning models at any scale. SageMaker removes all the barriers that typically slow down developers who want to use machine learning.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Machine learning often feels a lot harder than it should be to most developers because the process to build and train models, and then deploy them into production is too complicated and too slow. First, you need to collect and prepare your training data to discover which elements of your data set are important. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then, you need to select which algorithm and framework you’ll use. After deciding on your approach, you need to teach the model how to make predictions by training, which requires a lot of compute. Then, you need to tune the model so it delivers the best possible predictions, which is often a tedious and manual effort. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After you’ve developed a fully trained model, you need to integrate the model with your application and deploy this application on infrastructure that will scale. All of this takes a lot of specialized expertise, access to large amounts of compute and storage, and a lot of time to experiment and optimize every part of the process. In the end, it's not a surprise that the whole thing feels out of reach for most developers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SageMaker removes the complexity that holds back developer success with each of these steps. SageMaker includes modules that can be used together or independently to build, train, and deploy your machine learning models.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#sagemaker-ground-truth"&gt;
  &lt;/a&gt;
  SageMaker Ground Truth
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BNifetzv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5u7ra2g1j7kk7xpiawwd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BNifetzv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5u7ra2g1j7kk7xpiawwd.png" alt="image" width="138" height="139"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;SageMaker Ground Truth helps you build highly accurate training datasets for machine learning quickly. SageMaker Ground Truth offers easy access to public and private human labelers and provides them with built-in workflows and interfaces for common labeling tasks. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Additionally, SageMaker Ground Truth can lower your labeling costs by up to 70% using automatic labeling, which works by training Ground Truth from data labeled by humans so that the service learns to label data independently.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Successful machine learning models are built on the shoulders of large volumes of high-quality training data. But, the process to create the training data necessary to build these models is often expensive, complicated, and time-consuming. The majority of models created today require a human to manually label data in a way that allows the model to learn how to make correct decisions. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For example, building a computer vision system that is reliable enough to identify objects - such as traffic lights, stop signs, and pedestrians - requires thousands of hours of video recordings that consist of hundreds of millions of video frames. Each one of these frames needs all of the important elements like the road, other cars, and signage to be labeled by a human before any work can begin on the model you want to develop.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon SageMaker Ground Truth significantly reduces the time and effort required to create datasets for training to reduce costs. These savings are achieved by using machine learning to automatically label data. The model is able to get progressively better over time by continuously learning from labels created by human labelers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Where the labeling model has high confidence in its results based on what it has learned so far, it will automatically apply labels to the raw data. Where the labeling model has lower confidence in its results, it will pass the data to humans to do the labeling. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The human-generated labels are provided back to the labeling model for it to learn from and improve. Over time, SageMaker Ground Truth can label more and more data automatically and substantially speed up the creation of training datasets.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#amazon-comprehend"&gt;
  &lt;/a&gt;
  Amazon Comprehend
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sYzaNuIS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uspyi1v6h346errzrck7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sYzaNuIS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uspyi1v6h346errzrck7.png" alt="image" width="140" height="141"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon Comprehend is a natural language processing (NLP) service that uses machine learning to find insights and relationships in text. No machine learning experience required.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is a treasure trove of potential sitting in your unstructured data. Customer emails, support tickets, product reviews, social media, even advertising copy represents insights into customer sentiment that can be put to work for your business. The question is how to get at it? As it turns out, Machine learning is particularly good at accurately identifying specific items of interest inside vast swathes of text (such as finding company names in analyst reports), and can learn the sentiment hidden inside language (identifying negative reviews, or positive customer interactions with customer service agents), at almost limitless scale.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Comprehend uses machine learning to help you uncover the insights and relationships in your unstructured data. The service identifies the language of the text; extracts key phrases, places, people, brands, or events; understands how positive or negative the text is; analyzes text using tokenization and parts of speech; and automatically organizes a collection of text files by topic. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can also use AutoML capabilities in Amazon Comprehend to build a custom set of entities or text classification models that are tailored uniquely to your organization’s needs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For extracting complex medical information from unstructured text, you can use Amazon Comprehend Medical. The service can identify medical information, such as medical conditions, medications, dosages, strengths, and frequencies from a variety of sources like doctor’s notes, clinical trial reports, and patient health records. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Comprehend Medical also identifies the relationship among the extracted medication and test, treatment and procedure information for easier analysis. For example, the service identifies a particular dosage, strength, and frequency related to a specific medication from unstructured clinical notes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#amazon-lex"&gt;
  &lt;/a&gt;
  Amazon Lex
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--728IKWGD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k3x5ye021m3wzo31v9lt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--728IKWGD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k3x5ye021m3wzo31v9lt.png" alt="image" width="140" height="141"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon Lex is a service for building conversational interfaces into any application using voice and text. Lex provides the advanced deep learning functionalities of automatic speech recognition (ASR) for converting speech to text, and natural language understanding (NLU) to recognize the intent of the text, to enable you to build applications with highly engaging user experiences and lifelike conversational interactions. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With Amazon Lex, the same deep learning technologies that power Amazon Alexa are now available to any developer, enabling you to quickly and easily build sophisticated, natural language, conversational bots (“chatbots”).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Speech recognition and natural language understanding are some of the most challenging problems to solve in computer science, requiring sophisticated deep learning algorithms to be trained on massive amounts of data and infrastructure. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Lex democratizes these deep learning technologies by putting the power of Alexa within reach of all developers. Harnessing these technologies, Amazon Lex enables you to define entirely new categories of products made possible through conversational interfaces.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#amazon-polly"&gt;
  &lt;/a&gt;
  Amazon Polly
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vDQ8La5P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5d4e97r0unoj9mvppl1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vDQ8La5P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5d4e97r0unoj9mvppl1.png" alt="image" width="133" height="134"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon Polly is a service that turns text into lifelike speech. Polly lets you create applications that talk, enabling you to build entirely new categories of speech-enabled products. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Polly is an Amazon artificial intelligence (AI) service that uses advanced deep learning technologies to synthesize speech that sounds like a human voice. Polly includes 47 lifelike voices spread across 24 languages, so you can select the ideal voice and build speech-enabled applications that work in many different countries.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Polly delivers the consistently fast response times required to support real-time, interactive dialog. You can cache and save Polly’s speech audio to replay offline or redistribute. And Polly is easy to use. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You simply send the text you want converted into speech to the Polly API, and Polly immediately returns the audio stream to your application so your application can play it directly or store it in a standard audio file format, such as MP3.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With Polly, you only pay for the number of characters you convert to speech, and you can save and replay Polly’s generated speech. Polly’s low cost per character converted, and lack of restrictions on storage and reuse of voice output, make it a cost-effective way to enable Text-to-Speech everywhere.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#amazon-rekognition"&gt;
  &lt;/a&gt;
  Amazon Rekognition
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UHpzbzDx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ppjzk80dgkiq0095itw2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UHpzbzDx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ppjzk80dgkiq0095itw2.png" alt="image" width="134" height="134"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon Rekognition is a service that makes it easy to add image analysis to your applications. With Rekognition, you can detect objects, scenes, and faces in images. You can also search and compare faces. The Amazon Rekognition API enables you to quickly add sophisticated deep-learning-based visual search and image classification to your applications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Rekognition is based on the same proven, highly scalable, deep learning technology developed by Amazon’s computer vision scientists to analyze billions of images daily for Prime Photos. Amazon Rekognition uses deep neural network models to detect and label thousands of objects and scenes in your images, and we are continually adding new labels and facial recognition features to the service.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Amazon Rekognition API lets you easily build powerful visual search and discovery into your applications. With Amazon Rekognition, you only pay for the images you analyze and the face metadata you store. There are no minimum fees, and there are no upfront commitments.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#amazon-translate"&gt;
  &lt;/a&gt;
  Amazon Translate
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZwiLdf42--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0shi3f5g3p2anppo7mkf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZwiLdf42--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0shi3f5g3p2anppo7mkf.png" alt="image" width="138" height="139"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon Translate is a neural machine translation service that delivers fast, high-quality, and affordable language translation. Neural machine translation is a form of language translation automation that uses deep learning models to deliver more accurate and more natural sounding translation than traditional statistical and rule-based translation algorithms. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Translate allows you to localize content - such as websites and applications - for international users, and to easily translate large volumes of text efficiently.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#amazon-transcribe"&gt;
  &lt;/a&gt;
  Amazon Transcribe
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z7zK_KLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4rwezftk5qttgigy8mq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z7zK_KLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4rwezftk5qttgigy8mq.png" alt="image" width="143" height="143"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon Transcribe is an automatic speech recognition (ASR) service that makes it easy for developers to add speech-to-text capability to their applications. Using the Amazon Transcribe API, you can analyze audio files stored in Amazon S3 and have the service return a text file of the transcribed speech. You can also send a live audio stream to Amazon Transcribe and receive a stream of transcripts in real time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Transcribe can be used for lots of common applications, including the transcription of customer service calls and generating subtitles on audio and video content. The service can transcribe audio files stored in common formats, like WAV and MP3, with time stamps for every word so that you can easily locate the audio in the original source by searching for the text. Amazon Transcribe is continually learning and improving to keep pace with the evolution of language.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#amazon-forecast"&gt;
  &lt;/a&gt;
  Amazon Forecast
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q3qWeMrs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bcwse141z84opqp5x9gw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q3qWeMrs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bcwse141z84opqp5x9gw.png" alt="image" width="141" height="141"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon Forecast is a fully managed service that uses machine learning to deliver highly accurate forecasts.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Companies today use everything from simple spreadsheets to complex financial planning software to attempt to accurately forecast future business outcomes such as product demand, resource needs, or financial performance. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;These tools build forecasts by looking at a historical series of data, which is called time series data. For example, such tools may try to predict the future sales of a raincoat by looking only at its previous sales data with the underlying assumption that the future is determined by the past. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This approach can struggle to produce accurate forecasts for large sets of data that have irregular trends. Also, it fails to easily combine data series that change over time (such as price, discounts, web traffic, and number of employees) with relevant independent variables like product features and store locations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Based on the same technology used at Amazon.com, Amazon Forecast uses machine learning to combine time series data with additional variables to build forecasts. Amazon Forecast requires no machine learning experience to get started. You only need to provide historical data, plus any additional data that you believe may impact your forecasts. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For example, the demand for a particular color of a shirt may change with the seasons and store location. This complex relationship is hard to determine on its own, but machine learning is ideally suited to recognize it. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once you provide your data, Amazon Forecast will automatically examine it, identify what is meaningful, and produce a forecasting model capable of making predictions that are up to 50% more accurate than looking at time series data alone.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Forecast is a fully managed service, so there are no servers to provision, and no machine learning models to build, train, or deploy. You pay only for what you use, and there are no minimum fees and no upfront commitments.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#amazon-textract"&gt;
  &lt;/a&gt;
  Amazon Textract
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b43Cbexx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6diu7xchy6pwrge3nux.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b43Cbexx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6diu7xchy6pwrge3nux.png" alt="image" width="138" height="139"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon Textract is a service that automatically extracts text and data from scanned documents. Amazon Textract goes beyond simple optical character recognition (OCR) to also identify the contents of fields in forms and information stored in tables.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Many companies today extract data from documents and forms through manual data entry that’s slow and expensive or through simple optical character recognition (OCR) software that is difficult to customize. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rules and workflows for each document and form often need to be hard-coded and updated with each change to the form or when dealing with multiple forms. If the form deviates from the rules, the output is often scrambled and unusable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Textract overcomes these challenges by using machine learning to instantly “read” virtually any type of document to accurately extract text and data without the need for any manual effort or custom code. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With Textract you can quickly automate document workflows, enabling you to process millions of document pages in hours. Once the information is captured, you can take action on it within your business applications to initiate next steps for a loan application or medical claims processing. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Additionally, you can create smart search indexes, build automated approval workflows, and better maintain compliance with document archival rules by flagging data that may require redaction.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#amazon-personalize"&gt;
  &lt;/a&gt;
  Amazon Personalize
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cmQLQeib--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tkkn1rtao4y0uxu3kvmx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cmQLQeib--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tkkn1rtao4y0uxu3kvmx.png" alt="image" width="133" height="134"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon Personalize is a machine learning service that makes it easy for developers to create individualized recommendations for customers using their applications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Machine learning is being increasingly used to improve customer engagement by powering personalized product and content recommendations, tailored search results, and targeted marketing promotions. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;However, developing the machine-learning capabilities necessary to produce these sophisticated recommendation systems has been beyond the reach of most organizations today due to the complexity of developing machine learning functionality. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Personalize allows developers with no prior machine learning experience to easily build sophisticated personalization capabilities into their applications, using machine learning technology perfected from years of use on Amazon.com.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With Amazon Personalize, you provide an activity stream from your application – page views, signups, purchases, and so forth – as well as an inventory of the items you want to recommend, such as articles, products, videos, or music. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can also choose to provide Amazon Personalize with additional demographic information from your users such as age, or geographic location. Amazon Personalize will process and examine the data, identify what is meaningful, select the right algorithms, and train and optimize a personalization model that is customized for your data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All data analyzed by Amazon Personalize is kept private and secure, and only used for your customized recommendations. You can start serving your personalized predictions via a simple API call from inside the virtual private cloud that the service maintains. You pay only for what you use, and there are no minimum fees and no upfront commitments.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Personalize is like having your own Amazon.com machine learning personalization team at your disposal, 24 hours a day.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Hope this guide helps you with the Introduction to Machine Learning with AWS - Part-1. In the Next Blog Post, we will discuss more about different Machine learning Services that are available with AWS.&lt;/p&gt;

&lt;p&gt;Let me know your thoughts in the comment section 👇&lt;br&gt;
And if you haven't yet, make sure to follow me on below handles:&lt;/p&gt;

&lt;p&gt;👋 &lt;strong&gt;connect with me on &lt;a href="https://www.linkedin.com/in/adit-modi-2a4362191/"&gt;LinkedIn&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
🤓 &lt;strong&gt;connect with me on &lt;a href="https://twitter.com/adi_12_modi"&gt;Twitter&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
🐱‍💻 &lt;strong&gt;follow me on &lt;a href="https://github.com/AditModi"&gt;github&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
✍️ &lt;strong&gt;Do Checkout &lt;a href="https://aditmodi.hashnode.dev"&gt;my blogs&lt;/a&gt;&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Like, share and follow me 🚀 for more content.&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__497987"&gt;
  
    .ltag__user__id__497987 .follow-action-button {
      background-color: #000000 !important;
      color: #fa6c00 !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/aditmodi" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FYJrtrA_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--mUzXbt1U--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/497987/edde8513-7308-4a4d-9592-2be160d074d2.png" alt="aditmodi image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/aditmodi"&gt;Adit Modi&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/aditmodi"&gt;Cloud Engineer | AWS Community Builder | 8x AWS Certified | 3x Azure Certified | Author of Cloud Tech , DailyDevOps &amp;amp; BigDataJournal | DEV moderator&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>aws</category>
      <category>machinelearning</category>
      <category>beginners</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Apply Filter when history.push() using React.JS and Umi.JS</title>
      <author>Manas Mishra</author>
      <pubDate>Tue, 18 Jan 2022 12:35:15 +0000</pubDate>
      <link>https://dev.to/manas_dev/apply-filter-when-historypush-using-reactjs-and-umijs-2fje</link>
      <guid>https://dev.to/manas_dev/apply-filter-when-historypush-using-reactjs-and-umijs-2fje</guid>
      <description>&lt;p&gt;Recently, working on a project (Which is built using ReactJS and routing is based on Umi.JS). And, I got a scenario where, I created a statistics page (in which I am showing the count of every different type of data of a particular category), and then I have to create a button of each category, which should push to that particualr category page (using history.push()).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---UsVhZxR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5ng6dpp66mnl615aftb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---UsVhZxR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5ng6dpp66mnl615aftb.png" alt="Branch Statistics page" width="880" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, initially, when I click over "View Complaints" button then it used to just take me to &lt;em&gt;Complaints&lt;/em&gt; page. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bUMR-V7m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vetkegyua1hph3pk7mq1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bUMR-V7m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vetkegyua1hph3pk7mq1.png" alt="View Complaints" width="880" height="279"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, what I want to do is when I click on the "View Complaints" then instead of just pushing the history to that specific page, it should even pass the specific &lt;code&gt;branchId&lt;/code&gt; as a &lt;code&gt;query&lt;/code&gt;, which will behave as a filter over the pushed page (complaints page). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-did"&gt;
  &lt;/a&gt;
  What I did?
&lt;/h2&gt;

&lt;p&gt;At first, I focused on the button to be clicked, which means "View Complaints" Page. &lt;/p&gt;

&lt;p&gt;At first, my button code was looking like this...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt;
  &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;primary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stopPropagation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/complaints/all`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="nx"&gt;Complaints&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As, I already mentioned that I have to send branchId as a query to apply filter, so I have to send the query with the path, inside &lt;code&gt;history.push()&lt;/code&gt; and now, it looks like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt;
&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;primary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stopPropagation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="na"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`/complaints/all`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;branchId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;profileId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
 &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="nx"&gt;Complaints&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and now with this thing, it will pass query, when you click on the button. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--neDwGEIT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e7tmprd005vdz0xzclwa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--neDwGEIT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e7tmprd005vdz0xzclwa.png" alt="query id" width="487" height="57"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But, this will still not apply the filter, and for that, I have to pass query to the filter function, which is eventually getting the filtered data from the API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useLocation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;umi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;branchQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLocation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then, I am calling the query inside the function, where we are dispatching the API, with the query as a payload.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFinishedComplaints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;statusId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CRQ_CLOSED&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;customerId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;currentUser&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;personal_details&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;organizationDetails&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;orgPartyId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;keyword&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;searchText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;startIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;completeStartIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;viewSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;completeViewSize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;branchQuery&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;branchId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;branchId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;branchQuery&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;branchId&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;product/getFinishedComplaints&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And, in this way, you can easily apply filter functionality, by passing query using history.push() of Umi.js. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alternative-way"&gt;
  &lt;/a&gt;
  Alternative way
&lt;/h2&gt;

&lt;p&gt;You can even use &lt;code&gt;react-router-dom&lt;/code&gt; for above given functionality. &lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>routing</category>
      <category>webdev</category>
    </item>
    <item>
      <title>GitLab CI/CD Tutorial For Beginners | Learn GitLab In 1 Hour</title>
      <author>LambdaTest</author>
      <pubDate>Tue, 18 Jan 2022 12:29:47 +0000</pubDate>
      <link>https://dev.to/lambdatest/gitlab-cicd-tutorial-for-beginners-learn-gitlab-in-1-hour-4cpm</link>
      <guid>https://dev.to/lambdatest/gitlab-cicd-tutorial-for-beginners-learn-gitlab-in-1-hour-4cpm</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/B68jcGfH4C8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In this GitLab Tutorial for beginners and experienced QA engineers, deep dive into the fundamentals of CI/CD, which helps you understand what is CI/CD in DevOps, what is CI/CD Pipeline and the difference between Continuous Delivery and Continuous Deployment. Further, this video explains what is GitLab trigger, what are GitLab environment variables, and how to set environment variables in GitLab. By the end of this video, you will be able to build and run an automated tested GitLab CI/CD pipeline and perform cross browser testing using Lambda Test. &lt;/p&gt;

&lt;p&gt;Also Learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is CI/CD in GitLab?&lt;/li&gt;
&lt;li&gt;How do you write CI/CDs in GitLab? &lt;/li&gt;
&lt;li&gt;How do you create a GitLab CI CD pipeline?&lt;/li&gt;
&lt;li&gt;What is Gitlab trigger?&lt;/li&gt;
&lt;li&gt;How do I run a GitLab pipeline?&lt;/li&gt;
&lt;li&gt;How do you run CI/CD pipeline?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Key Takeaway:&lt;br&gt;
◦ You will learn what is CI/CD and the fundamentals of Continuous Integration, Continuous Deployment, and Continuous Delivery.&lt;br&gt;
◦ You will learn the benefit of GitLab CI/CD and GitLab CI/CD Pipeline&lt;br&gt;
◦ You will learn about environment variables, cached dependencies, triggers, and parameters in GitLab CI/CD&lt;br&gt;
◦ You will learn to configure a CI/CD pipeline with GitLab CI/CD using LambdaTest&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>gitlab</category>
    </item>
    <item>
      <title>How to use Svelte Keyed Each Block?</title>
      <author>Saurabh Dashora</author>
      <pubDate>Tue, 18 Jan 2022 12:28:08 +0000</pubDate>
      <link>https://dev.to/dashsaurabh/how-to-use-svelte-keyed-each-block-pmf</link>
      <guid>https://dev.to/dashsaurabh/how-to-use-svelte-keyed-each-block-pmf</guid>
      <description>&lt;p&gt;In this post, we learn how to use &lt;strong&gt;Svelte Keyed Each Block&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the normal  &lt;a href="https://progressivewebninja.com/how-to-use-svelte-each-block-to-render-arrays/"&gt;Svelte Each Block&lt;/a&gt;, we use the &lt;code&gt;each&lt;/code&gt; keyword to render an array or list. While it works perfectly when we have static lists, there is a serious issue when we delete items from the list. We are going to first look at the issue and then come up with the solution to it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-svelte-each-block-issue"&gt;
  &lt;/a&gt;
  1 – Svelte Each Block Issue
&lt;/h3&gt;

&lt;p&gt;To demonstrate the issue, we will take the example of displaying books and their respective authors.&lt;/p&gt;

&lt;p&gt;Below is our &lt;code&gt;App&lt;/code&gt; component.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-appsvelte-endraw-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;code&gt;App.svelte&lt;/code&gt;&lt;/strong&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Book&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Book.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
        &lt;span class="na"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Eye of the World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Way of Kings&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Name of the Wind&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}]&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Welcome&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;Fantasy&lt;/span&gt; &lt;span class="nx"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Book&lt;/span&gt; 
    &lt;span class="nx"&gt;bookName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sr"&gt;/each&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;Remove&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="nx"&gt;Book&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above piece of code, we have the &lt;code&gt;books&lt;/code&gt; array with three hard-coded books. We use the &lt;code&gt;each&lt;/code&gt; block to render the &lt;code&gt;books&lt;/code&gt; using the &lt;code&gt;Book&lt;/code&gt; component. Finally, we also have a button to remove the first book from the &lt;code&gt;each&lt;/code&gt; block. When the user clicks the button, we invoke the &lt;code&gt;handleClick()&lt;/code&gt; function that slices the &lt;code&gt;books&lt;/code&gt; array.&lt;/p&gt;

&lt;p&gt;Below is the code for the &lt;code&gt;Book&lt;/code&gt; component.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-booksvelte-endraw-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;code&gt;Book.svelte&lt;/code&gt;&lt;/strong&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Eye of the World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Robert Jordan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Way of Kings&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Brandon Sanderson&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Name of the Wind&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Patrick Rothfuss&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Book&lt;/span&gt; &lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// Author: {author}&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this component, we have the &lt;strong&gt;book&lt;/strong&gt; to &lt;strong&gt;author&lt;/strong&gt; map. Based on the input &lt;code&gt;bookName&lt;/code&gt;, we basically determine the name of the author.&lt;/p&gt;

&lt;p&gt;If we run the app now and then click the button to remove first book once, we will see the below output.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DfcT4Tvm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://progressivewebninja.com/wp-content/uploads/2022/01/svelte-each-block-issue.png.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DfcT4Tvm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://progressivewebninja.com/wp-content/uploads/2022/01/svelte-each-block-issue.png.webp" alt="svelte-each-block-issue.png" width="880" height="295"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the &lt;code&gt;bookName&lt;/code&gt; and the &lt;code&gt;authorName&lt;/code&gt; does not match. Though the first book was correctly deleted, the &lt;code&gt;authorName&lt;/code&gt; got mixed up.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Why does this happen?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The reason is that when we modify the underlying array of an &lt;code&gt;each&lt;/code&gt; block, Svelte adds and removes items from the end of the block. It also updates any values that have changed. This is the default behaviour.&lt;/p&gt;

&lt;p&gt;Due to this, the last item is removed and the items above it are updated. However, the &lt;code&gt;author&lt;/code&gt; value is not updated because it is the local constant of the &lt;code&gt;Book&lt;/code&gt; component. Its value was fixed at the time of component initialization. This leads to the data mismatch.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-the-svelte-keyed-each-block"&gt;
  &lt;/a&gt;
  2 – The Svelte Keyed Each Block
&lt;/h3&gt;

&lt;p&gt;To get around this issue, we need to use &lt;strong&gt;keyed each block&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;See below example:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-appsvelte-endraw-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;code&gt;App.svelte&lt;/code&gt;&lt;/strong&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Book&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Book.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Eye of the World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Way of Kings&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Name of the Wind&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}]&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Welcome&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;Fantasy&lt;/span&gt; &lt;span class="nx"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Book&lt;/span&gt; 
    &lt;span class="nx"&gt;bookName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sr"&gt;/each&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;Remove&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="nx"&gt;Book&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically, here we introduce an &lt;code&gt;id&lt;/code&gt; field in the &lt;code&gt;books&lt;/code&gt; array. Each book has a unique id. In a real life application, this &lt;code&gt;id&lt;/code&gt; could also be the database id. The point is that it should be unique for every item.&lt;/p&gt;

&lt;p&gt;We also utilise this &lt;code&gt;id&lt;/code&gt; in the each block as below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically, the role of this &lt;code&gt;id&lt;/code&gt; field is to help Svelte figure out which DOM node should be changed when the &lt;code&gt;each&lt;/code&gt; block updates. After this modification, if we run the application and click the button, we will see proper data as below.&lt;/p&gt;

&lt;p&gt;In this post, we learn how to use &lt;strong&gt;Svelte Keyed Each Block&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the normal  &lt;a href="https://progressivewebninja.com/how-to-use-svelte-each-block-to-render-arrays/"&gt;Svelte Each Block&lt;/a&gt;, we use the &lt;code&gt;each&lt;/code&gt; keyword to render an array or list. While it works perfectly when we have static lists, there is a serious issue when we delete items from the list. We are going to first look at the issue and then come up with the solution to it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-svelte-each-block-issue"&gt;
  &lt;/a&gt;
  1 – Svelte Each Block Issue
&lt;/h3&gt;

&lt;p&gt;To demonstrate the issue, we will take the example of displaying books and their respective authors.&lt;/p&gt;

&lt;p&gt;Below is our &lt;code&gt;App&lt;/code&gt; component.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-appsvelte-endraw-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;code&gt;App.svelte&lt;/code&gt;&lt;/strong&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Book&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Book.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
        &lt;span class="na"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Eye of the World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Way of Kings&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Name of the Wind&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}]&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Welcome&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;Fantasy&lt;/span&gt; &lt;span class="nx"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Book&lt;/span&gt; 
    &lt;span class="nx"&gt;bookName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sr"&gt;/each&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;Remove&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="nx"&gt;Book&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above piece of code, we have the &lt;code&gt;books&lt;/code&gt; array with three hard-coded books. We use the &lt;code&gt;each&lt;/code&gt; block to render the &lt;code&gt;books&lt;/code&gt; using the &lt;code&gt;Book&lt;/code&gt; component. Finally, we also have a button to remove the first book from the &lt;code&gt;each&lt;/code&gt; block. When the user clicks the button, we invoke the &lt;code&gt;handleClick()&lt;/code&gt; function that slices the &lt;code&gt;books&lt;/code&gt; array.&lt;/p&gt;

&lt;p&gt;Below is the code for the &lt;code&gt;Book&lt;/code&gt; component.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-booksvelte-endraw-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;code&gt;Book.svelte&lt;/code&gt;&lt;/strong&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Eye of the World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Robert Jordan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Way of Kings&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Brandon Sanderson&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Name of the Wind&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Patrick Rothfuss&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Book&lt;/span&gt; &lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// Author: {author}&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this component, we have the &lt;strong&gt;book&lt;/strong&gt; to &lt;strong&gt;author&lt;/strong&gt; map. Based on the input &lt;code&gt;bookName&lt;/code&gt;, we basically determine the name of the author.&lt;/p&gt;

&lt;p&gt;If we run the app now and then click the button to remove first book once, we will see the below output.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E4gQeHC5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://progressivewebninja.com/wp-content/uploads/2022/01/svelte-keyed-each-block-2048x480.png.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E4gQeHC5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://progressivewebninja.com/wp-content/uploads/2022/01/svelte-keyed-each-block-2048x480.png.webp" alt="svelte-each-block-issue.png" width="880" height="206"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the &lt;code&gt;bookName&lt;/code&gt; and the &lt;code&gt;authorName&lt;/code&gt; does not match. Though the first book was correctly deleted, the &lt;code&gt;authorName&lt;/code&gt; got mixed up.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Why does this happen?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The reason is that when we modify the underlying array of an &lt;code&gt;each&lt;/code&gt; block, Svelte adds and removes items from the end of the block. It also updates any values that have changed. This is the default behaviour.&lt;/p&gt;

&lt;p&gt;Due to this, the last item is removed and the items above it are updated. However, the &lt;code&gt;author&lt;/code&gt; value is not updated because it is the local constant of the &lt;code&gt;Book&lt;/code&gt; component. Its value was fixed at the time of component initialization. This leads to the data mismatch.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-the-svelte-keyed-each-block"&gt;
  &lt;/a&gt;
  2 – The Svelte Keyed Each Block
&lt;/h3&gt;

&lt;p&gt;To get around this issue, we need to use &lt;strong&gt;keyed each block&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;See below example:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-appsvelte-endraw-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;code&gt;App.svelte&lt;/code&gt;&lt;/strong&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Book&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Book.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Eye of the World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Way of Kings&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Name of the Wind&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}]&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Welcome&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;Fantasy&lt;/span&gt; &lt;span class="nx"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Book&lt;/span&gt; 
    &lt;span class="nx"&gt;bookName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sr"&gt;/each&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;Remove&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="nx"&gt;Book&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically, here we introduce an &lt;code&gt;id&lt;/code&gt; field in the &lt;code&gt;books&lt;/code&gt; array. Each book has a unique id. In a real life application, this &lt;code&gt;id&lt;/code&gt; could also be the database id. The point is that it should be unique for every item.&lt;/p&gt;

&lt;p&gt;We also utilise this &lt;code&gt;id&lt;/code&gt; in the each block as below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically, the role of this &lt;code&gt;id&lt;/code&gt; field is to help Svelte figure out which DOM node should be changed when the &lt;code&gt;each&lt;/code&gt; block updates. After this modification, if we run the application and click the button, we will see proper data as below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wEtOwunZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642385377572/W9TmhfFzW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wEtOwunZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642385377572/W9TmhfFzW.png" alt="svelte-keyed-each-block-fix.png" width="880" height="206"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The book name and author name match as expected. The first book was successfully removed. However, Svelte only removed the appropriate DOM node and other nodes were left as they were before the update.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;With this, we have learnt how to use &lt;strong&gt;Svelte Keyed Each Block&lt;/strong&gt;. This is extremely useful when we have a requirement to update elements within our each blocks.&lt;/p&gt;

&lt;p&gt;Hope this little post was useful. If you have any comments or queries about this post, please feel free to write them in the comments section below.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>svelte</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Improve Your Developer Onboarding Path With the 10-3-10 Test</title>
      <author>Matthew Revell</author>
      <pubDate>Tue, 18 Jan 2022 12:19:07 +0000</pubDate>
      <link>https://dev.to/codesee/improve-your-developer-onboarding-path-with-the-10-3-10-test-253j</link>
      <guid>https://dev.to/codesee/improve-your-developer-onboarding-path-with-the-10-3-10-test-253j</guid>
      <description>&lt;p&gt;Getting to the point is essential for a smooth developer onboarding. Within seconds, you need to answer your product or project's what, why, and how.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yGgmRDU9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cscgt7bg628kjqmrtw9u.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yGgmRDU9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cscgt7bg628kjqmrtw9u.jpg" alt="Microscope" width="880" height="583"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But it can be hard to put ourselves in the shoes of a developer who knows nothing of what we do. That's why it's essential that we test and improve the onboarding path we give developers.&lt;/p&gt;

&lt;p&gt;One way to do that is the 10-3-10 test. It's quick to perform, requires no special tools, and pretty much anyone can do it. Here's how.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#from-zero-to-hello-world-in-ten-minutes"&gt;
  &lt;/a&gt;
  From zero to Hello World in ten minutes
&lt;/h2&gt;

&lt;p&gt;The idea behind the 10-3-10 test is pretty simple. A developer should land on your site without any context and achieve the Hello World state within 10 minutes.&lt;/p&gt;

&lt;p&gt;Before a developer can get to that point, they need to know what the product does and then register to get a developer account.&lt;/p&gt;

&lt;p&gt;Within all three of those milestones -- &lt;strong&gt;understanding&lt;/strong&gt;, &lt;strong&gt;registration&lt;/strong&gt;, and &lt;strong&gt;first product use&lt;/strong&gt; -- lurks danger. At each stage, you're asking the developer to give you something on trust. At first, it's their time, then a small amount of information about themselves, and finally, it's both their time and their mental energy. It might sound over the top, but you need to reward the developer for each of those. Get the reward wrong, and the danger becomes apparent: the developer will lose trust and look elsewhere.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dropoff-is-real"&gt;
  &lt;/a&gt;
  Drop-off is real
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dl.acm.org/doi/10.1145/1835449.1835513"&gt;Work by Microsoft Research&lt;/a&gt; shows that typical web users decide whether to stay or go within 10 seconds of arriving at a web page. There is even &lt;a href="https://www.tandfonline.com/doi/abs/10.1080/01449290500330448"&gt;an old study&lt;/a&gt; that suggests web page visitors form an opinion within 50 milliseconds of landing.&lt;/p&gt;

&lt;p&gt;Keeping someone on the page long enough to explain the offering is just the start, though. &lt;a href="https://heap.io/blog/good-conversion-rate-signup-flow"&gt;Research on conversion rates&lt;/a&gt; by product analytics firm Heap suggests that 63% of SaaS users fail to complete product sign-up.&lt;/p&gt;

&lt;p&gt;We are operating in a world of spam, clickbait, unregulated advertising, and other underhanded attempts to grab our attention. People have trained themselves to apply harsh relevance criteria to the information they find on the web.&lt;/p&gt;

&lt;p&gt;Arguably, developers are not typical web users. Whether that makes them more or less patient will depend on their level of motivation, among other factors. What is clear, though, is that you have very little time in which to capture a developer's attention and then turn that into an interest in your product.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#three-questions"&gt;
  &lt;/a&gt;
  Three questions
&lt;/h2&gt;

&lt;p&gt;There are multiple pressures on your developer onboarding flow. Product marketing might have a particular wording they want you to use. Someone in the growth team wants to try an experiment they read about recently. The VP of Sales is pushing for more data collection to assign new developer sign-ups to the appropriate salesperson.&lt;/p&gt;

&lt;p&gt;Whether good or bad, the reality of these demands is that they can lead to a loss of focus. And in most companies, the demand for such change never really stops.&lt;/p&gt;

&lt;p&gt;The 10-3-10 test is simple, repeatable, and quick, helping you measure whether you're continuing to serve developers. It asks three questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;10 (understanding):&lt;/strong&gt; Can a developer get a solid idea of what your product does within ten seconds of arriving on a developer-targeted landing page?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;3 (registration):&lt;/strong&gt; Can that person register for a developer account within three minutes of landing?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;10 (first use):&lt;/strong&gt; Can they get to Hello World ten minutes after first landing on the site? Whether you perform each test informally yourself or set up an ethnographic research session, it's worth diving into some of the factors that influence each stage first.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#understanding"&gt;
  &lt;/a&gt;
  Understanding
&lt;/h2&gt;

&lt;p&gt;How often have you been to a product website and come away none the wiser about what it does?&lt;/p&gt;

&lt;p&gt;Competing demands too often lead to product pages that say a lot but communicate nothing. A common scenario is messaging that attempts to address too many different audiences at once. If a vendor compromises its message to serve both developers and, say, procurement managers, it'll serve neither well.&lt;/p&gt;

&lt;p&gt;Sometimes, it's just that companies overthink how they talk about their products. As someone writing about a product, it can be hard to extract yourself from the context you have. It's tempting to build every comment, every meeting about the Chief Marketing Officer's vocab preferences, every barb thrown by the competition into that one very clever headline. But does that serve someone who just wants to know what problem your product solves and how?&lt;/p&gt;

&lt;p&gt;The first step to passing the understanding test is to make sure you have a dedicated space to speak primarily to developers.&lt;/p&gt;

&lt;p&gt;Next, stay specific and tell developers what your product does for them. Consider CodeSee's own home page. The headline and sub-head get straight to the action:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Visualize codebases faster&lt;/p&gt;

&lt;p&gt;Map an entire codebase in just a few clicks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The short follow-up paragraph then expands on that in a way that sticks entirely to the facts of how the product benefits developers.&lt;/p&gt;

&lt;p&gt;Avoid the temptation to over-egg how you describe your offering. "SMS API," rather than "customer engagement solution." That kind of messaging has its place for certain audiences, and it makes product marketers feel good, but for developers, it's just another hurdle in the way of understanding whether that thing solves a problem that they have.&lt;/p&gt;

&lt;p&gt;To pass the first test, a typical developer should understand the practical purpose of your product within ten seconds of landing on your developer home page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#registration"&gt;
  &lt;/a&gt;
  Registration
&lt;/h2&gt;

&lt;p&gt;Registration is a chasm in your developer onboarding. This is where developers must put the most trust in you by providing personal information without a clear idea of the pay-off. Provide them with guide ropes, way finding, and a hint of the reward that is to come.&lt;/p&gt;

&lt;p&gt;First, how do you get a developer from the landing page to sign-up? The button or link you provide needs to be immediately obvious, not so wordy that people are tempted to skip it, and yet still communicate what's to come. Oh, and the copy must avoid scaring people off.&lt;/p&gt;

&lt;p&gt;"Get started" and "Start now" are common choices. However, &lt;a href="https://www.nngroup.com/articles/get-started/"&gt;at least one study&lt;/a&gt; has shown that "Get started" attracts clicks, but not all are from people who are ready to try, download, or buy your product.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://miro.com/api/"&gt;The Miro API&lt;/a&gt;'s "Start building" is clearer. Click that, and you know you're about to get hands-on with the API.&lt;/p&gt;

&lt;p&gt;CodeSee's "Try Maps now" communicates a lot in three words. "Try" tells you that you're going to be hands-on with the product while making it feel casual rather than intimidating. Naming the product enforces what's coming next, and "now" adds a sense that clicking will lead to a fast pay-off.&lt;/p&gt;

&lt;p&gt;That's a lot for a button.&lt;/p&gt;

&lt;p&gt;The registration process itself must stick to the principle of "minimum viable information". Sales and marketing colleagues might push to capture more and more information during registration, but your primary aim here is not to add another lead to the CRM. Instead, registration is about enabling access and then allowing the rest of the experience and product to win over the developer.&lt;/p&gt;

&lt;p&gt;That doesn't mean you can't ask for more than just an email address and password. Most people have some tolerance for providing extra information. However, you should aim to frame at least some of those additional questions in terms of how they'll benefit the developer. Twilio's registration process is great for this. It asks some questions that might help their sales funnel but also collects information, such as your preferred programming language, that makes the developer dashboard more helpful.&lt;/p&gt;

&lt;p&gt;To pass the second test, a typical developer should be able to get a developer account within three minutes of landing on your developer home page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hello-world"&gt;
  &lt;/a&gt;
  Hello World
&lt;/h2&gt;

&lt;p&gt;Providing a smooth path through registration is good, but it's only a staging post. The developer's goal is to see for themselves whether your product solves their problem and whether they like the idea of working with your company.&lt;/p&gt;

&lt;p&gt;There is enormous scope for ways to improve the path to Hello World, so let's focus on one thing. When the developer first logs into your dashboard, take them by the hand through the steps they need to achieve something worthwhile.&lt;/p&gt;

&lt;p&gt;Such a first use experience is more than flashing up a quick-start guide or a click-through signposting of the dashboard's UI. It is a highly focused path that takes the developer from no knowledge of your product to that Hello World interaction. It builds on the supplemental information you've gathered during sign-up. Are they a Ruby developer? Great, get them to download your SDK's gem. They told you they work for a large company? Suggest they link their new account with Okta or other SSO providers to simplify integration with corporate sign-on.&lt;/p&gt;

&lt;p&gt;That highly focused first use experience should contain everything the developer needs to get a feel for your solution and what it's like to develop with, in as efficient a way as possible.&lt;/p&gt;

&lt;p&gt;If a typical developer can get to Hello World within ten minutes of the first landing on your developer pages, you've passed the 10-3-10 test.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-theres-more"&gt;
  &lt;/a&gt;
  And there's more
&lt;/h2&gt;

&lt;p&gt;The 3-10-3 test is a blunt instrument, but it's useful as a way to keep us honest about whether our onboarding serves developers. It works well for commercial products, and there's plenty of scope to adapt it to onboarding a developer onto a team building a product or a developer joining an open source project.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Microscope picture by &lt;a href="https://www.pexels.com/photo/technology-lens-laboratory-medical-60022/"&gt;Public Domain Pictures&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Javascript's reduce method in a nutshell.</title>
      <author>Amine zoldyck</author>
      <pubDate>Tue, 18 Jan 2022 11:57:56 +0000</pubDate>
      <link>https://dev.to/amiinequ/javascripts-reduce-method-in-a-nutshell-gik</link>
      <guid>https://dev.to/amiinequ/javascripts-reduce-method-in-a-nutshell-gik</guid>
      <description>&lt;p&gt;The word "reduce" in the English language means :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;to diminish in size, amount, extent, or number&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's suppose that we have an array of items&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const cartItems = [1,3,5,7,9];&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I want the sum of all the items.&lt;/p&gt;

&lt;p&gt;I could use the For Loop but it's going to be a bit hairy. The method &lt;code&gt;reduce()&lt;/code&gt; will give us one total number with less code (always go for the less-code option).&lt;/p&gt;

&lt;p&gt;reduce() takes two arguments: a callback function (the reducer itself) and an initial value. The callback function takes two arguments: the previous value and the current value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let total = cartItems.reduce((previousValue, currentValue) =&amp;gt; {
    return previousValue + currentValue;
}, 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's calculate the first rotation on the array.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;previousValue&lt;/code&gt; is going to be equal to 0 while the &lt;code&gt;currentValue&lt;/code&gt; is going to be equal to the first item in the array, which is 1.&lt;/p&gt;

&lt;p&gt;Next, the &lt;code&gt;previousValue&lt;/code&gt; is going to be equal to 1 while the &lt;code&gt;currentValue&lt;/code&gt; is going to be equal to 3 and so it goes. The total amount will be sum of all the numbers: 25&lt;/p&gt;

&lt;p&gt;Keep in mind that the initial Value is totally optional. When omitted, the first value of the array is used as an initial value.&lt;/p&gt;

&lt;p&gt;Note: the reverse of the &lt;code&gt;reduce()&lt;/code&gt; method is &lt;code&gt;reduceRight()&lt;/code&gt;. Yes! It takes items from right to left.&lt;/p&gt;

&lt;p&gt;Ladies and gentlemen, that was a quick tutorial of the reduce() method. &lt;/p&gt;

&lt;p&gt;Don't forget to practice.&lt;/p&gt;

&lt;p&gt;Thank you.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Rockpack 2.0 Official Release</title>
      <author>Sergey</author>
      <pubDate>Tue, 18 Jan 2022 11:36:57 +0000</pubDate>
      <link>https://dev.to/alexsergey/rockpack-20-official-release-5ak9</link>
      <guid>https://dev.to/alexsergey/rockpack-20-official-release-5ak9</guid>
      <description>&lt;p&gt;More than a year has passed since the release of version 1.0. During this time, I received feedback from users, made many fixes, and also updated all dependencies to the current state. And today I would like to proudly present you the release of the second version of this tool.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/AlexSergey/rockpack"&gt;Rockpack repository is here!&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-rockpack"&gt;
  &lt;/a&gt;
  What is Rockpack?
&lt;/h2&gt;

&lt;p&gt;Starting a new React project, whether it's a small module or a React component, or vice versa, a &lt;strong&gt;large application with SSR support&lt;/strong&gt;, we spend a lot of time solving routine tasks, slowing down the development process. We can’t dive into solving business problems without setting up Webpack, including all plugins and modules, setting up ESLint, Jest, Babel, TypeScript, as well as dependencies and configurations for them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--69YoAtH5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.natrube.net/rockpack/readme_assets/rockpack_main_1.v2.0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--69YoAtH5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.natrube.net/rockpack/readme_assets/rockpack_main_1.v2.0.png" alt="Usual flow" width="880" height="573"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But this process can be automated!&lt;/p&gt;

&lt;p&gt;Rockpack is a tool that can deploy one of the 4 types of React applications on your computer in one console command, which will be described below, with fully configured &lt;strong&gt;Webpack 5&lt;/strong&gt;, &lt;strong&gt;ESLint 8&lt;/strong&gt;, &lt;strong&gt;Babel&lt;/strong&gt;, &lt;strong&gt;Jest&lt;/strong&gt;, &lt;strong&gt;TypeScript&lt;/strong&gt; and more with perfectly optimized settings, for stable and fast work. You not only get the generated settings, but also the basic framework of the project, based on the best development practices and experience of the entire React community.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aVcUb9_j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.natrube.net/rockpack/readme_assets/rockpack_main_2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aVcUb9_j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.natrube.net/rockpack/readme_assets/rockpack_main_2.png" alt="Rockpack flow" width="880" height="641"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rockpack's main goal is to reduce project setup from weeks to 5 minutes!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-new-in-rockpack-20"&gt;
  &lt;/a&gt;
  What's new in Rockpack 2.0?
&lt;/h2&gt;

&lt;p&gt;As part of the work on Rockpack 2.0, absolutely all dependencies have been updated. Now using the latest version of &lt;strong&gt;Webpack 5&lt;/strong&gt;, &lt;strong&gt;Typescript 4.5+&lt;/strong&gt;, &lt;strong&gt;ESLint 8+&lt;/strong&gt;, &lt;strong&gt;Jest 27+&lt;/strong&gt;, etc. All modules, plugins, loaders have been updated. Configs have been rewritten, taking into account the features of new versions.&lt;/p&gt;

&lt;p&gt;The project supports &lt;strong&gt;React 17+&lt;/strong&gt; versions. It is no longer necessary to import React into every component. Also, the latest React Router 6 is available out of the box.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-rockpack-support"&gt;
  &lt;/a&gt;
  What does Rockpack support?
&lt;/h2&gt;

&lt;p&gt;Out of the box, you can take advantage of the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TypeScript support 4.5+&lt;/li&gt;
&lt;li&gt;Babel 7, Babel-preset-env (&amp;gt; 5%)&lt;/li&gt;
&lt;li&gt;Support build nodejs scripts with nodemon&lt;/li&gt;
&lt;li&gt;Hot Module Replacement for SPA&lt;/li&gt;
&lt;li&gt;Livereload for SSR&lt;/li&gt;
&lt;li&gt;Source maps and Extended dev mode&lt;/li&gt;
&lt;li&gt;Dotenv support and Dotenv safe support&lt;/li&gt;
&lt;li&gt;React optimizations&lt;/li&gt;
&lt;li&gt;Monorepo support&lt;/li&gt;
&lt;li&gt;Write file webpack plugin (in dev mode)&lt;/li&gt;
&lt;li&gt;Copy Webpack Plugin&lt;/li&gt;
&lt;li&gt;ESLint support&lt;/li&gt;
&lt;li&gt;Templates: HTML/Jade/Handlebars&lt;/li&gt;
&lt;li&gt;CSS: CSS/SASS (dart-sass)/LESS + Postcss&lt;/li&gt;
&lt;li&gt;Postcss, Autoprefixer&lt;/li&gt;
&lt;li&gt;CSS Modules support&lt;/li&gt;
&lt;li&gt;Imagemin&lt;/li&gt;
&lt;li&gt;Formats support: Markdown, Video, Audio, Fonts, SVG, Script, Shaders etc&lt;/li&gt;
&lt;li&gt;SVG + SVGO, SVGR (import SVG like React Component)&lt;/li&gt;
&lt;li&gt;Antd optimizations (With optimizations: auto replace momentjs to dayjs, import antd)&lt;/li&gt;
&lt;li&gt;Terser minification&lt;/li&gt;
&lt;li&gt;Generate stats.json (in production mode)&lt;/li&gt;
&lt;li&gt;SEO Optimizations&lt;/li&gt;
&lt;li&gt;Bundle Analyze (webpack-bundle-analyzer, Statoscope)&lt;/li&gt;
&lt;li&gt;Isomorphic compile support (include isomorphic styles, isomorphic dynamic imports - @loadable)&lt;/li&gt;
&lt;li&gt;Vendor array splitting support (You can set dependency libraries to this array to split it on separate vendor.js file)&lt;/li&gt;
&lt;li&gt;MD/MDX support&lt;/li&gt;
&lt;li&gt;GraphQL support (webpack-graphql-loader)&lt;/li&gt;
&lt;li&gt;Сross-env included&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rockpack comes with a set of the best ESLint rules, Babel plugins and Jest plugins.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-i-need-rockpack-when-there-is-createreactapp"&gt;
  &lt;/a&gt;
  Why do I need Rockpack when there is create-react-app?
&lt;/h2&gt;

&lt;p&gt;The main difference between Rockpack and create-react-app is that you can generate 4 types of applications, including those with SSR support, using best practices and feature-based project structure approach.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;CSR (Client Side Render)&lt;/strong&gt; is an ordinary Single Page Application that has a project structure &lt;a href="https://dev.to/alexsergey/project-structure-repository-and-folders-review-of-approaches-4kh2"&gt;Project Structure Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;SSR (Server Side Render)&lt;/strong&gt; is an application with a configured server to work with Server Side Render support as well as SEO best practices &lt;a href="https://dev.to/alexsergey/server-side-rendering-from-zero-to-hero-2610"&gt;SSR Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;React Component&lt;/strong&gt; is a boilerplate for building a React Component. If you need to create a React Component and expose it to NPM, then this option is for you.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;UMD Library&lt;/strong&gt; - This option is for you if you just need to create and publish to NPM just a library.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;The SSR project will also have a number of best practices for SEO, which will make it possible to get a project with a high level in the lighthouse&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D7pQ58mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.natrube.net/rockpack/readme_assets/seo_performance.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D7pQ58mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.natrube.net/rockpack/readme_assets/seo_performance.jpg" alt="SEO Performance" width="880" height="308"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-get-started-with-rockpack"&gt;
  &lt;/a&gt;
  How to get started with Rockpack?
&lt;/h2&gt;

&lt;p&gt;It's very simple! To start using Rockpack now, you need to:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1.&lt;/strong&gt; Install the package globally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; @rockpack/starter
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 2.&lt;/strong&gt; Run the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rockpack folder_name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rockpack my-awesome-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 3.&lt;/strong&gt; Select the required project type from the list&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n2r1Wi5b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.natrube.net/rockpack/readme_assets/rockpack_starter_1.v3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n2r1Wi5b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.natrube.net/rockpack/readme_assets/rockpack_starter_1.v3.jpg" alt="Rockpack Starter" width="777" height="105"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to learn more, Rockpack readme is &lt;a href="https://github.com/AlexSergey/rockpack"&gt;here&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h2&gt;

&lt;p&gt;The Rockpack project is over 2 years old. During this time, it has become stable and does not require changes to the main API. We will support the project and expand its functionality.&lt;/p&gt;

&lt;p&gt;Thanks to everyone who read this article! I hope Rockpack will be handy in your work.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
  </channel>
</rss>
