<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to transform any SPA/PWA web application into mobile app with CapacitorJs ??</title>
      <author>BELHARRADI JAMAL</author>
      <pubDate>Sun, 11 Apr 2021 20:53:14 +0000</pubDate>
      <link>https://dev.to/jamalroger/how-to-transform-any-spa-pwa-web-application-into-mobile-app-with-capacitorjs-kaj</link>
      <guid>https://dev.to/jamalroger/how-to-transform-any-spa-pwa-web-application-into-mobile-app-with-capacitorjs-kaj</guid>
      <description>&lt;p&gt;Hi all,web development become more powerful, web now is more easy we can build complex application with technology like Angular, VueJs and react those technology can build &lt;code&gt;SPA/PWA&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What is &lt;code&gt;SPA/PWA/Capacitorjs??&lt;/code&gt; &lt;code&gt;SPA&lt;/code&gt; is short of "single page application"  is web application that can run in one page in the browser , the app don't need refresh to post or fetch data, we ajax nested of refreshing.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;PWA&lt;/code&gt; is a &lt;code&gt;SPA&lt;/code&gt; with capacity of work offline with "service worker" that cache asset file(js,css) in the browser means no need to download asset file from http server in the second request.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;CapacitorJs&lt;/code&gt; is a cross-platform native runtime for web apps, means can transform web application into mobile app and run it in &lt;code&gt;os&lt;/code&gt;, it take SPA/PWA and run it on a &lt;code&gt;WebView&lt;/code&gt; in native application this native application can run anywhere in any os mobile like android and ios.&lt;/p&gt;

&lt;p&gt;let take a example  with a &lt;code&gt;VueJs&lt;/code&gt; app&lt;br&gt;
we suppose that you have already had a &lt;code&gt;Vuejs&lt;/code&gt; app&lt;br&gt;
if you don't now how to create a vue app please read this article &lt;a href="https://dev.to/josesrodriguez610/vuejs-starting-a-new-project-ke1"&gt;Get started with Vuejs&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#the-structure-of-vue-projet-is-like-this"&gt;
  &lt;/a&gt;
  The structure of Vue projet is like  this
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a6-5PgEG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bku4lc4zzvx9rp673mzo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a6-5PgEG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bku4lc4zzvx9rp673mzo.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;when you build your vuejs app you will find dist that contains  of entrypoint of your &lt;code&gt;SPA&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LHXMIrt---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/879yod14nvi5m5e5469g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LHXMIrt---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/879yod14nvi5m5e5469g.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
if you open index.html in the browser  will run your app,&lt;br&gt;
&lt;code&gt;note&lt;/code&gt; "verify the the path of assets in index.html"&lt;/p&gt;

&lt;p&gt;Now let add &lt;code&gt;CapacitorJs&lt;/code&gt; to our vue app.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#installing-capacitorjs"&gt;
  &lt;/a&gt;
  Installing capacitorjs
&lt;/h1&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @capacitor/core @capacitor/cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#init-app-for-capacitorjs"&gt;
  &lt;/a&gt;
  Init app for CapacitorJs
&lt;/h1&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx cap init 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;this command should ask about your name  of your app,ID,...&lt;br&gt;
and will generate capacitor.config.json for Capacitorjs config  should be like that&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"appId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"com.app.app"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"appName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"app"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"bundledWebRuntime"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"npmClient"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"webDir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"www"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"plugins"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"SplashScreen"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"launchShowDuration"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"cordova"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we will edit the value of attribute &lt;code&gt;webDir&lt;/code&gt;  from &lt;code&gt;www&lt;/code&gt; into &lt;code&gt;dist&lt;/code&gt; because Vuejs  build your app into dist folder &lt;/p&gt;

&lt;p&gt;now should will be like that&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"appId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"com.app.app"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"appName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"app"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"bundledWebRuntime"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"npmClient"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"webDir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dist"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"plugins"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"SplashScreen"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"launchShowDuration"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"cordova"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now will should add platform can be android,ios or electron.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#let-start-with-android"&gt;
  &lt;/a&gt;
  Let start with android
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx cap add android
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That should create android folder in your root folder&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tKnQ-QNH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/88et2mh188usc945po5g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tKnQ-QNH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/88et2mh188usc945po5g.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let sync our web app with the android app&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx cap sync
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;by run this command will copy the dist folder to android app&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TOz-mVXj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prjx0up32fe0ud48rxki.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TOz-mVXj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prjx0up32fe0ud48rxki.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now our app is ready to run in android by open &lt;code&gt;android&lt;/code&gt; folder&lt;code&gt;in&lt;/code&gt;android studio`` and build our apk.&lt;/p&gt;

&lt;p&gt;you can find the source code here &lt;a href="https://github.com/jamalroger/vue-capacitorjs-example"&gt;vue-capacitorjs-example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sorry for my bad English, Thanks you for reading.&lt;/p&gt;

</description>
      <category>spa</category>
      <category>vue</category>
      <category>react</category>
      <category>capacitojs</category>
    </item>
    <item>
      <title>WSL2, Docker, GUI</title>
      <author>Bruno Zani</author>
      <pubDate>Sun, 11 Apr 2021 20:45:11 +0000</pubDate>
      <link>https://dev.to/bzani/wsl2-docker-gui-3o0j</link>
      <guid>https://dev.to/bzani/wsl2-docker-gui-3o0j</guid>
      <description>&lt;h1&gt;
  &lt;a href="#wsl-and-wsl2"&gt;
  &lt;/a&gt;
  WSL and WSL2
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Make sure that&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You have Windows 10 version 1903 or higher, with Build 18362 or higher. If not, update it.

&lt;ul&gt;
&lt;li&gt;Check it by using &lt;code&gt;Win+R&lt;/code&gt;, command &lt;code&gt;winver&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Virtualization is enabled inside of your computer's BIOS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Enable WSL on Windows 10&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Execute the commands below, using PowerShell on Admin mode:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Open up PowerShell once again and try typing &lt;code&gt;wsl&lt;/code&gt;, and if doesn't work, restart your machine&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Upgrade to WSL2&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Download and install the WSL2 kernel to update&lt;br&gt;
&lt;a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi"&gt;https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Set the WSL default version to 2&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wsl --set-default-version 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(in case of error, ignore it this time)&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#linux-distro"&gt;
  &lt;/a&gt;
  Linux Distro
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Install the Ubuntu distro&lt;/strong&gt; (or any other you like)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open your Microsoft Store, search for the Ubuntu App, select the &lt;code&gt;Ubuntu&lt;/code&gt; app (which is the latest) and install it&lt;/li&gt;
&lt;li&gt;After installed, configure your root user and password&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Upgrade WSL version for Ubuntu&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;List your distro using &lt;code&gt;wsl --list&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Set your distro to WSL version 2
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wsl --set-version &amp;lt;distro_name&amp;gt; 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Etc&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Access your WSL "space" on Windows through: (&lt;code&gt;Win+R&lt;/code&gt; or explorer)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;\\wsl$
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Find your Windows "space" on Linux:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/mnt/c/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Find your WSL "disk" on Windows: 

&lt;ul&gt;
&lt;li&gt;in the case of Ubuntu, we have something like this:
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;C:\Users\&amp;lt;User&amp;gt;\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu...\LocalState
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Backup your WSL state:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wsl --export &amp;lt;distro&amp;gt; &amp;lt;output_file&amp;gt;                        # export
wsl --import &amp;lt;distro&amp;gt; &amp;lt;installation_location&amp;gt; &amp;lt;input_file&amp;gt; # import
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;or even, create a backup of the WSL "disk" file (previous item)&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WSL2 uses almost all your machines resources, by default: 

&lt;ul&gt;
&lt;li&gt;Disk and CPU &lt;/li&gt;
&lt;li&gt;80% of your available RAM &lt;/li&gt;
&lt;li&gt;25% of your available memory for Swap &lt;/li&gt;
&lt;li&gt;You can set up limits, by creating a config file (example): 
C:\Users&amp;lt;User&amp;gt;.wslconfig &amp;gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[wsl2] 
options=metadata,umask=22,fmask=11 
memory=8GB 
processors=4 
swap=2GB 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Your custom configs are applied after a WSL restart:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wsl --shutdown
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#windows-terminal"&gt;
  &lt;/a&gt;
  Windows Terminal
&lt;/h1&gt;

&lt;p&gt;Windows Terminal is a new feature from Microsoft, improving your experience with terminals in Windows.&lt;/p&gt;

&lt;p&gt;Install via Microsoft Store, by searching for &lt;code&gt;Windows Terminal&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With Windows Terminal you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;have multiple terminals opened in separate tabs (instances)&lt;/li&gt;
&lt;li&gt;different terminals running along (Ubuntu, git bash, Powershell, etc)&lt;/li&gt;
&lt;li&gt;customize by applying themes, configuring colors and shortcuts, etc
&lt;a href="https://docs.microsoft.com/pt-br/windows/terminal/customize-settings/startup"&gt;https://docs.microsoft.com/pt-br/windows/terminal/customize-settings/startup&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;change file &lt;code&gt;settings.json&lt;/code&gt; by hitting &lt;code&gt;Ctrl+,&lt;/code&gt; on Windows Terminal&lt;/li&gt;
&lt;li&gt;or open file from default dir:
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;C:\Users\&amp;lt;User&amp;gt;\AppData\Local\Packages\Microsoft.WindowsTerminal...\LocalState\settings.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;you can change e.g. your Linux starting directory and default shell, when opening Windows Terminal:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"defaultProfile": "{xxxxx-xxxx-xxxx-xxxx}",
...
{ 
    "guid": "{xxxxx-xxxx-xxxx-xxxx}",
    "name": "Ubuntu-18.04", 
    "startingDirectory" : "//wsl$/Ubuntu-20.04/home/&amp;lt;ubuntu_user&amp;gt;", 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#docker"&gt;
  &lt;/a&gt;
  Docker
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;3 ways to use Docker on Windows&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Docker Toolbox &lt;em&gt;- bad&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Uses Oracle VirtualBox &lt;/li&gt;
&lt;li&gt;Very bad performance &lt;/li&gt;
&lt;li&gt;Difficult setup and usage &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Docker Desktop com Hyper-V &lt;em&gt;- better&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Uses Microsoft Hyper-V instead of VirtualBox &lt;/li&gt;
&lt;li&gt;Requires Windows 10 PRO &lt;/li&gt;
&lt;li&gt;Better performance but a heavy consumer of host resources &lt;/li&gt;
&lt;li&gt;Docker will drop support in the future, as announced &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Docker Desktop com WSL2 &lt;em&gt;- &lt;strong&gt;recommended *&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Uses Microsoft Virtual Machine Platform &lt;/li&gt;
&lt;li&gt;Integrates with WSL2 and its distros &lt;/li&gt;
&lt;li&gt;Better performance and consumes less resources &lt;/li&gt;
&lt;li&gt;Usage as running on Linux natively&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*&lt;strong&gt;Download and install Docker Desktop&lt;/strong&gt;&lt;br&gt;
    &lt;a href="https://hub.docker.com/editions/community/docker-ce-desktop-windows"&gt;https://hub.docker.com/editions/community/docker-ce-desktop-windows&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enable Docker on WSL2 distro&lt;/strong&gt;&lt;br&gt;
    - Docker Desktop &amp;gt; Settings &amp;gt; Resources &amp;gt; WSL Integration &lt;br&gt;
        &amp;gt; Enable integration with additional distros &amp;gt; Check distro&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Play with docker on WSL&lt;/strong&gt;&lt;br&gt;
    - Open WSL and hit &lt;code&gt;docker ps&lt;/code&gt; or try out &lt;code&gt;docker run hello-world&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#wsl-linux-gui"&gt;
  &lt;/a&gt;
  WSL Linux GUI
&lt;/h1&gt;

&lt;p&gt;A way to run Linux apps using WSL "builtin GUIs" is on the way, as one of the WSL improvements of Microsoft's roadmap.&lt;/p&gt;

&lt;p&gt;While it still unavailable, we can still install a GUI and use RDP (Remote desktop manager), to access the Linux VM.&lt;/p&gt;

&lt;p&gt;First of all, update and upgrade your Linux:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt -y upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install (or overwrite) X-RDP:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get purge xrdp
sudo apt install -y xrdp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install a GUI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt install -y xfce4 # check 'gdm3' option
sudo apt install -y xfce4-goodies
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;XFCE is a lightweight GUI for testing purposes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Create a backup, config access, improve RDP session quality and define session:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo cp /etc/xrdp/xrdp.ini /etc/xrdp/xrdp.ini.bak
sudo sed -i 's/3389/3390/g' /etc/xrdp/xrdp.ini
sudo sed -i 's/max_bpp=32/#max_bpp=32\nmax_bpp=128/g' /etc/xrdp/xrdp.ini
sudo sed -i 's/xserverbpp=24/#xserverbpp=24\nxserverbpp=128/g' /etc/xrdp/xrdp.ini
echo xfce4-session &amp;gt; ~/.xsession
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Edit XRDP startup script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo nano /etc/xrdp/startwm.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Comment these last lines:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# test -x /etc/X11/Xsession &amp;amp;&amp;amp; exec /etc/X11/Xsession 
# exec /bin/sh /etc/X11/Xsession 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Add these lines:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# xfce
startxfce4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Start RDP session:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo /etc/init.d/xrdp start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Access it from your Windows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Execute command &lt;code&gt;mstsc&lt;/code&gt; (&lt;code&gt;Win+R&lt;/code&gt;)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;localhost:3390
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#dev-projects"&gt;
  &lt;/a&gt;
  Dev Projects
&lt;/h1&gt;

&lt;p&gt;In my case, I moved all my project sources and repositories to WSL.&lt;/p&gt;

&lt;p&gt;There are many softwares that already works integrated with WSL:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;like VS Code for example, there are add-ons to work "remotely" with your projects in WSL&lt;/li&gt;
&lt;li&gt;though I don't use IntelliJ, I've seen some videos and tutorials about doing it with WSL&lt;/li&gt;
&lt;li&gt;on the other hand, there may be softwares that are more complex to integrate with WSL (or even don't)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NODE&lt;/strong&gt;&lt;br&gt;
In my case, I uninstalled everything from my host and installed Nvm on WSL&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ECLIPSE&lt;/strong&gt;&lt;br&gt;
In this case, I couldn't create my workspace in WSL, so I kept it in my host computer.&lt;br&gt;
I kept also maven installed in my host machine, and installed it also on WSL, but pointing dependencies to my host &lt;code&gt;.m2/repository&lt;/code&gt;&lt;br&gt;
However, I migrated my repos to WSL, and I'm opening it up on my host workspace.&lt;br&gt;
As I'm starting now using WSL, certainly I'm missing a better way to do it, I wonder, keeping both separate should not be the right way to do it, right?&lt;br&gt;
If you can help me out, just drop me a line below. Also, I'll keep it updated as long I improve my dev workspace along with WSL.&lt;/p&gt;

&lt;p&gt;See ya.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Source&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10#manual-installation-steps"&gt;https://docs.microsoft.com/en-us/windows/wsl/install-win10#manual-installation-steps&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/codeedu/wsl2-docker-quickstart"&gt;https://github.com/codeedu/wsl2-docker-quickstart&lt;/a&gt; (pt-br)&lt;br&gt;
&lt;a href="https://github.com/davidbombal/wsl2/blob/main/ubuntu_gui_youtube"&gt;https://github.com/davidbombal/wsl2/blob/main/ubuntu_gui_youtube&lt;/a&gt;&lt;/p&gt;

</description>
      <category>wsl2</category>
      <category>docker</category>
      <category>wslgui</category>
      <category>windows</category>
    </item>
    <item>
      <title>Deploying a SvelteKit app to Netlify</title>
      <author>Dana Woodman</author>
      <pubDate>Sun, 11 Apr 2021 20:29:13 +0000</pubDate>
      <link>https://dev.to/danawoodman/deploying-a-sveltekit-app-to-netlify-5dc3</link>
      <guid>https://dev.to/danawoodman/deploying-a-sveltekit-app-to-netlify-5dc3</guid>
      <description>&lt;p&gt;Want to deploy your SvelteKit app to Netlify? Well, you're in luck because it's actually quite easy!&lt;/p&gt;

&lt;p&gt;Let's jump right in 👇&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#1-create-your-sveltekit-project"&gt;
  &lt;/a&gt;
  1. Create your SvelteKit project
&lt;/h1&gt;

&lt;p&gt;First, obviously you'll need a SvelteKit project. If you don't have one yet, setup is super simple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init svelte@next my-app
&lt;span class="nb"&gt;cd &lt;/span&gt;my-app
npm i
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you can run &lt;code&gt;npm run dev&lt;/code&gt; to play 👯‍♀️ with your new app.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#2-create-raw-netlifytoml-endraw-"&gt;
  &lt;/a&gt;
  2. Create &lt;code&gt;netlify.toml&lt;/code&gt;
&lt;/h1&gt;

&lt;p&gt;You'll need to let Netlify know where the SvelteKit build will be located (&lt;code&gt;/build&lt;/code&gt;) and where the serverless functions will live (&lt;code&gt;/functions&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;In the root of your project, create a &lt;code&gt;netlify.toml&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[build]&lt;/span&gt;
  &lt;span class="py"&gt;command&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"npm run build"&lt;/span&gt;
  &lt;span class="py"&gt;publish&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"build/"&lt;/span&gt;
  &lt;span class="py"&gt;functions&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"functions/"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#3-use-the-netlify-adapter"&gt;
  &lt;/a&gt;
  3. Use the Netlify adapter
&lt;/h1&gt;

&lt;p&gt;Now you'll want to install the &lt;a href="https://www.npmjs.com/package/@sveltejs/adapter-netlify"&gt;@sveltejs/adapter-netlify adapter&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;-D&lt;/span&gt; @sveltejs/adapter-netlify@next
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In your &lt;code&gt;svelte.config.cjs&lt;/code&gt; file, change &lt;code&gt;adapter-node&lt;/code&gt; to &lt;code&gt;adapter-netlify&lt;/code&gt;, like so (diff):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;const sveltePreprocess = require('svelte-preprocess')
&lt;/span&gt;&lt;span class="gd"&gt;-const node = require('@sveltejs/adapter-node')
&lt;/span&gt;&lt;span class="gi"&gt;+const netlify = require('@sveltejs/adapter-netlify')
&lt;/span&gt;&lt;span class="p"&gt;const pkg = require('./package.json')
&lt;/span&gt;
/** @type {import('@sveltejs/kit').Config} */
&lt;span class="p"&gt;module.exports = {
&lt;/span&gt;  // Consult https://github.com/sveltejs/svelte-preprocess
  // for more information about preprocessors
  preprocess: sveltePreprocess(),
  kit: {
    // By default, `npm run build` will create a standard Node app.
    // You can create optimized builds for different platforms by
    // specifying a different adapter
&lt;span class="gd"&gt;-    adapter: node(),
&lt;/span&gt;&lt;span class="gi"&gt;+    adapter: netlify(),
&lt;/span&gt;
    // hydrate the &amp;lt;div id="svelte"&amp;gt; element in src/app.html
    target: '#svelte',

    vite: {
      ssr: {
        noExternal: Object.keys(pkg.dependencies || {}),
      },
    },
  },
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you have everything you need to deploy your Netlify site!&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#4-deploy-on-netlify"&gt;
  &lt;/a&gt;
  4. Deploy on Netlify
&lt;/h1&gt;

&lt;p&gt;Now all you need to do is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a Github repo&lt;/li&gt;
&lt;li&gt;Push your code to it&lt;/li&gt;
&lt;li&gt;Add the new repo to Netlify (e.g. the "New site from Git" button)

&lt;ul&gt;
&lt;li&gt;Accept the default options&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Wait for it to build and after about a minute, you should have a SvelteKit app on Netlify! 🎉&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now you can add routes to your SvelteKit app and they will be served by Netlify's global serverless infrastructure 🛰&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h1&gt;

&lt;p&gt;Deploying SvelteKit to Netlify (or Vercel) is quite simple and gives you a global CDN and serverless function out the gate!&lt;/p&gt;

&lt;p&gt;Hope this was helpful! 🍻&lt;/p&gt;

&lt;p&gt;If you want to check out the source code, &lt;a href="https://github.com/danawoodman/netlify-sveltekit"&gt;see the Github repo here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Follow me on &lt;a href="https://dev.to/danawoodman"&gt;Dev.to&lt;/a&gt;, &lt;a href="https://twitter.com/DanaWoodman"&gt;Twitter&lt;/a&gt; and &lt;a href="https://github.com/danawoodman"&gt;Github&lt;/a&gt; for more web dev and startup related content&lt;/em&gt; 🤓&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>sveltekit</category>
      <category>netlify</category>
      <category>webdev</category>
    </item>
    <item>
      <title>SlateJS: Adding Images and Links</title>
      <author>Karl Castillo</author>
      <pubDate>Sun, 11 Apr 2021 20:25:21 +0000</pubDate>
      <link>https://dev.to/koralarts/slatejs-adding-images-and-links-2g93</link>
      <guid>https://dev.to/koralarts/slatejs-adding-images-and-links-2g93</guid>
      <description>&lt;p&gt;In the previous, we talked about setting up a simple SlateJS text editor. Now, we're going to add two new features to our text editor -- inserting an image and link.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#toolbar"&gt;
  &lt;/a&gt;
  Toolbar
&lt;/h1&gt;

&lt;p&gt;For us to start adding rich text functionality, we'll need to create a toolbar component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useSlateStatic&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;slate-react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Toolbar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;editor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSlateStatic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleInsertImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter an Image URL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// For simplicity&lt;/span&gt;
    &lt;span class="nx"&gt;insertImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// will be implemented later&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleInsertLink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter a URL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// For simplicity&lt;/span&gt;
    &lt;span class="nx"&gt;insertLink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// will be implemented later&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"toolbar"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleInsertImage&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Image&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleInsertLink&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Link&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Important things to note here are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;useSlateStatic&lt;/code&gt;: gives us an instance of our Editor which won't cause a re-render,&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;insertImage&lt;/code&gt;: a helper function that will insert an image into our Editor&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;insertLink&lt;/code&gt;: a helper function that will insert a link into our Editor&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can then use this component as a child of our &lt;code&gt;Slate&lt;/code&gt; component. We do this so we can use &lt;code&gt;useSlateStatic&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Editor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Slate&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Toolbar&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      ...
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Slate&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#-raw-insertimage-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;insertImage&lt;/code&gt;
&lt;/h1&gt;

&lt;p&gt;Our &lt;code&gt;insertImage&lt;/code&gt; function will handle how we'll insert images into our Editor. We'll have to set some rules.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If the Editor isn't focused, we'll add the image at the end of the Editor.&lt;/li&gt;
&lt;li&gt;If the Editor is focused on an empty Node or void Node (eg. image node), we'll replace the empty Node node with the image.&lt;/li&gt;
&lt;li&gt;If the Editor is focused on a non-empty Node, we'll add the image after the Node.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;insertImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;selection&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createImageNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;ReactEditor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;selection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;parentNode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parentPath&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Editor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;selection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isVoid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parentNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parentNode&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Insert the new image node after the void node or a node with content&lt;/span&gt;
      &lt;span class="nx"&gt;Transforms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertNodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;at&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parentPath&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="na"&gt;select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// If the node is empty, replace it instead&lt;/span&gt;
      &lt;span class="nx"&gt;Transforms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeNodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;at&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;parentPath&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="nx"&gt;Transforms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertNodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;at&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;parentPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Insert the new image node at the bottom of the Editor when selection&lt;/span&gt;
    &lt;span class="c1"&gt;// is falsey&lt;/span&gt;
    &lt;span class="nx"&gt;Transforms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertNodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#-raw-insertlink-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;insertLink&lt;/code&gt;
&lt;/h1&gt;

&lt;p&gt;Now that we're able to insert images, let's add functionality to insert links. Similar to the images, we need to set rules.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If the Editor isn't focused, insert the new link inside of a paragraph at the end of the Editor.&lt;/li&gt;
&lt;li&gt;If the Editor is focused on a void node (eg. image node), insert the new link inside of a paragraph below the void node.&lt;/li&gt;
&lt;li&gt;If the Editor is focused inside of a Paragraph, insert the new link at the selected spot.&lt;/li&gt;
&lt;li&gt;If a range of text is highlighted, convert the highlighted text into a link.&lt;/li&gt;
&lt;li&gt;If the selected text consists of a link, remove the link and follow Rule #3 and #4.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createLinkNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;link&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;removeLink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;Transforms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unwrapNodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;match&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;Editor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isEditor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;link&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;insertLink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;selection&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createLinkNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;New Link&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;ReactEditor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;selection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;parentNode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parentPath&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Editor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;selection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Remove the Link node if we're inserting a new link node inside of another&lt;/span&gt;
    &lt;span class="c1"&gt;// link.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;link&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;removeLink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isVoid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parentNode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Insert the new link after the void node&lt;/span&gt;
      &lt;span class="nx"&gt;Transforms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertNodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createParagraphNode&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;at&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parentPath&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="na"&gt;select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Range&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isCollapsed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selection&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Insert the new link in our last known location&lt;/span&gt;
      &lt;span class="nx"&gt;Transforms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertNodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Wrap the currently selected range of text into a Link&lt;/span&gt;
      &lt;span class="nx"&gt;Transforms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wrapNodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;split&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="c1"&gt;// Remove the highlight and move the cursor to the end of the highlight&lt;/span&gt;
      &lt;span class="nx"&gt;Transforms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collapse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;edge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;end&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Insert the new link node at the bottom of the Editor when selection&lt;/span&gt;
    &lt;span class="c1"&gt;// is falsey&lt;/span&gt;
    &lt;span class="nx"&gt;Transforms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertNodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createParagraphNode&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#custom-type-raw-link-endraw-"&gt;
  &lt;/a&gt;
  Custom Type &lt;code&gt;Link&lt;/code&gt;
&lt;/h1&gt;

&lt;p&gt;Now that we're able to insert links, let's make sure we're able to render a Link correctly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can then update our &lt;code&gt;renderElement&lt;/code&gt; function to include the new Link type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Image&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;link&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Paragraph&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#link-popup"&gt;
  &lt;/a&gt;
  Link Popup
&lt;/h2&gt;

&lt;p&gt;Since we can't really tell what URL the link has, we can create a simple popup whenever we focus on a link. We can do that by updating our &lt;code&gt;Link&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;editor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSlateStatic&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;selected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSelected&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;focused&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useFocused&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"element-link"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;selected&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;focused&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"popup"&lt;/span&gt; &lt;span class="na"&gt;contentEditable&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"noreferrer"&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FontAwesomeIcon&lt;/span&gt; &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;faExternalLinkAlt&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;removeLink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FontAwesomeIcon&lt;/span&gt; &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;faUnlink&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;With our rich text taking shape, we're starting to see the power of Slate and how you have the power to implement the way you want to.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h1&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/35inm"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>slate</category>
      <category>react</category>
      <category>javascript</category>
      <category>slatejs</category>
    </item>
    <item>
      <title>My first month as a Developer</title>
      <author>Vardana Bhanot</author>
      <pubDate>Sun, 11 Apr 2021 20:15:46 +0000</pubDate>
      <link>https://dev.to/vardanabhanot/my-first-month-as-a-developer-4805</link>
      <guid>https://dev.to/vardanabhanot/my-first-month-as-a-developer-4805</guid>
      <description>&lt;p&gt;So a little about me, I joined a company as a software developer a month back and it's my first job, in which I am  mostly working on PHP and JavaScript specifically jQuery.&lt;/p&gt;

&lt;p&gt;So most of the things I am gonna mention here are the once I learnt after writting a lot of jQuery speghetti. &lt;/p&gt;

&lt;p&gt;So as I started working on a new feature I was given a new file, so I was just trying to make things work in the front-end and ended up thinking that I will structure these things after I make up things work. So after the things were done and I had to add something new and after adding the new thing everything broke.&lt;br&gt;
And then I realised how difficult it was to read the code I had written.&lt;br&gt;
I was having difficult time reading my own code.&lt;br&gt;
So here I am gonna tell you things I learnt after getting I that situation.&lt;/p&gt;

&lt;p&gt;And all the code example are in &lt;strong&gt;&lt;em&gt;PHP&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#1divide-the-code-into-functions"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1.Divide the code into functions:&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;A single function should just do a single thing&lt;/em&gt;, and structure your code from the start, as it will make it easy for you to debug the code as well as for someone who might have to make changes to your code in future.&lt;br&gt;
Making your function do just one thing makes it more readable and modular so you can reuse it anywhere you want.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#2try-not-to-nest-ifelse-much-and-return-early"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2.Try not to nest if-else much and return early&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Nesting if else too much make it difficult to read &lt;br&gt;
for example.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bad Practice&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function is_winters($month){
   if(!empty($month)){
      if(is_string($month)){
         if($month == 'january'){
             return true;
         }
         else if($month == 'december'){
             return true;
         }
         else if($month == 'november'){
             return true;
         }
      }else{
            return false;
      }
   }else{
      return false;
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Good Practice&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function is_winters($month){
    if(empty($month)){
       return false;
    }
    $winter_months = ['november', 'december', 'january'];
return in_array(strtolower($month), $winter_months, true);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#3avoid-using-for-loops"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3.Avoid using for loops&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Here I am talking about the basic for loops like &lt;br&gt;
&lt;code&gt;for($i=0; $i&amp;lt; $num; $i++){}&lt;/code&gt;&lt;br&gt;
using foreach loops make the code more readable and reduces the need to map the variable in mind in for loops.&lt;br&gt;
for example we have an array of &lt;code&gt;$userProfiles=[...somedata];&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;using old school for loop&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for($i=0; $i&amp;lt;count($userProfiles); $i++){
    print_r($userProfiles[$i]['user_name'];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;using foreach(or any other equivalent form in your language)&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;foreach($userProfiles as $userProfile){
    print_r($userProfile['user_name']);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you might agree or disagree with me but this helped me, and you surely sometimes need the old school for loop or even while loops but it depends on what you are dealing with.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4dont-make-unneeded-long-descriptive-variable-name"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4.Don't make unneeded long descriptive variable name&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;I did this a lot trying to make good descriptive variable names but I ended up making them long.&lt;br&gt;
like &lt;code&gt;$user_profile_color;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bad Practice&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class UserProfile{
    $user_profile_color;
    $user_profile_picture;
    $user_profile_settings;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Good Practice&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class UserProfile{
    $profile_color;
    $profile_picture;
    $settings;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#5think-before-you-write"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5.Think before you write&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Just jumping on to write is not a wise thing to do, it's good to sit back for a while and think about how to do things, how to structure the function, which conditional to use , which loop to use, these small decisions help a lot.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;These where the few things that I learnt and helped me write more readable code. Its not that I have mastered the art of writing clean code but if I look a month back I am surely better at writing programs which are more readable.&lt;br&gt;
I knew most of these points before I ended up writing the code still I ended up writing messy code, but after I had faced how a messy code can make your life a hell, I am trying my best to keep things clean.&lt;/p&gt;

&lt;p&gt;I would love to know if you have suggestions on how to write better code.&lt;/p&gt;

&lt;p&gt;I hope you have an amazing day.&lt;/p&gt;

</description>
      <category>php</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Improve performance by deleting laravel log file via Routes. (Artisan &amp; exec)</title>
      <author>DON EJEH</author>
      <pubDate>Sun, 11 Apr 2021 20:13:39 +0000</pubDate>
      <link>https://dev.to/donejeh/improve-performance-by-deleting-laravel-log-file-via-routes-artisan-exec-1pe6</link>
      <guid>https://dev.to/donejeh/improve-performance-by-deleting-laravel-log-file-via-routes-artisan-exec-1pe6</guid>
      <description>&lt;p&gt;Laravel log file helps we developers in so many ways such logging of data and more importantly is that all errors generated by our web application are be logged in our laravel log file which is located at &lt;strong&gt;storage\logs\laravel.log&lt;/strong&gt;, this error generated by our web app can make log file size rapidly increasing to like 30GB in size 😲 according to this post =&amp;gt; &lt;a href="https://community.librenms.org/t/laravel-log-file-size-rapidly-increasing/7232"&gt;Laravel log file size rapidly increasing&lt;/a&gt;, this can be a bottle neck problem to some simple Laravel application out there that is been hosted in a small web shared hosting site with limit disk space. Instead of using &lt;strong&gt;ssh or filezilla&lt;/strong&gt; to delete this log file manually over and over, here i will show you how to do that with via route i.e when you goto &lt;strong&gt;&lt;a href="http://www.yoursite.come/clear"&gt;www.yoursite.come/clear&lt;/a&gt; or &lt;a href="http://www.yoursite.come/delete"&gt;www.yoursite.come/delete&lt;/a&gt;&lt;/strong&gt; that log file will be deleted and your server will have a breathing space. 👽 &lt;/p&gt;

&lt;p&gt;Let get started either by using existing project or creating new project this will still work.&lt;/p&gt;

&lt;p&gt;Goto your web.php file and paste this&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Route::get('/clear', function() {&lt;br&gt;
    exec('rm -f ' . storage_path('logs/&lt;em&gt;.log'));&lt;br&gt;
    exec('rm -f ' . base_path('&lt;/em&gt;.log'));&lt;br&gt;
    return "Log file deleted";&lt;br&gt;
});&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To run the Above route goto &lt;strong&gt;&lt;a href="http://www.yoursite.com/clear"&gt;www.yoursite.com/clear&lt;/a&gt;&lt;/strong&gt; and hit enter, BOOM it delete all the log file in &lt;strong&gt;storage_path or base_path.&lt;/strong&gt; So also you can change this to any location you log file is kept. 😁&lt;/p&gt;

&lt;p&gt;For bonus let me show you a simple way to run Artisan inside route (web.php or api.php) on live production with using terminal. WIth this Artisan command you can optimize your laravel web app.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Route::get('/cl', function() {&lt;br&gt;
    Artisan::call('config:cache');&lt;br&gt;
    Artisan::call('cache:clear');&lt;br&gt;
    Artisan::call('config:clear');&lt;br&gt;
    Artisan::call('view:clear');&lt;br&gt;
    Artisan::call('route:clear');&lt;br&gt;
    exec('rm -f ' . storage_path('logs/&lt;em&gt;.log'));&lt;br&gt;
    exec('rm -f ' . base_path('&lt;/em&gt;.log'));&lt;br&gt;
    return "Cache is cleared";&lt;br&gt;
})-&amp;gt;name('clear.cache');&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Above command helps you to Improve Laravel Performance by removing Config caching, Routes caching and view caching for better loading of your web app. 😜&lt;/p&gt;

&lt;p&gt;Post Motivation &lt;br&gt;
&lt;a href="https://laracasts.com/discuss/channels/laravel/my-laravellog-size-is-31-gb#:~:text=log%20size%20is%2031%20GB,-Hello%20everyone%2C%20I"&gt;My laravel.log size is 31 GB&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;For more tutorial share , comment and if any question or suggest drop it.&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>artisan</category>
    </item>
    <item>
      <title>SCSS make life more easier .</title>
      <author>Fatima Almashhor</author>
      <pubDate>Sun, 11 Apr 2021 20:03:24 +0000</pubDate>
      <link>https://dev.to/fatimaalmashhor/scss-make-life-more-easier-9h8</link>
      <guid>https://dev.to/fatimaalmashhor/scss-make-life-more-easier-9h8</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-scss-"&gt;
  &lt;/a&gt;
  What Scss ?
&lt;/h1&gt;

&lt;p&gt;Scss is Sassy Cascading Style Sheets. It wraps the CSS to allow you to use functions and variables exc.. make more likely language like JavaScript .&lt;/p&gt;

&lt;p&gt;Previously when we styled some of our projects we get repeated code and some time needed much work to design the things .&lt;/p&gt;

&lt;p&gt;Then after the Scss appears make the style more clean , easy to read and use multiple times . I am not here to explain what is Scss and how to start and all these PLA PLA things , So let's jump into the way to use it .&lt;/p&gt;

&lt;p&gt;Just Second before we dev deep into the example ?! Would you ever feel &lt;strong&gt;confused between the Scss and Sass&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;Sass is stand from (Syntactically Awesome Style Sheets) ,language that will be compiled into CSS . SassScript is itself a scripting language whereas SCSS is the main syntax for the SASS which builds on top of the existing CSS syntax.SASS has more developer community and support than SCSS&lt;/p&gt;

&lt;p&gt;let jump in into the basic syntax &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h3&gt;

&lt;p&gt;the most useful feature , It is really help for write the value once and get it all over the project and help for avoid the forgot value of the colors , fonts size and even the  break points&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Colors 
$color-primary : #333333;
$color-scondary :  #4F4F4F ;  
$color-oriange : #F2994A ;
$color-green : #B0C2AC ; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h3&gt;

&lt;p&gt;the second things that we absolutely aspect from script language is the methods , Which struct our code and reject the repetitions .In Scss there are two comment way to do that on is by using &lt;code&gt;@mixin&lt;/code&gt; and the other is &lt;code&gt;@function&lt;/code&gt;. &lt;br&gt;
And the equation is which one is better . Let me tell you the main differences between them first . Function are blocks of code that return a single value of any Sass data type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@function pow($base, $exponent) {
  $result: 1;
  @for $_ from 1 through $exponent {
    $result: $result * $base;
  }
  @return $result;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And invoke it like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.sidebar {
  float: left;
  margin-left: pow(4, 3) * 1px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But the mixin will compile directly into CSS styles, no need to return any value .&lt;br&gt;
like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@mixin reset-list {
  margin: 0;
  padding: 0;
  list-style: none;
}

@mixin horizontal-list {
  @include reset-list;

  li {
    display: inline-block;
    margin: {
      left: -2px;
      right: 2em;
    }
  }
}

nav ul {
  @include horizontal-list;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By using the &lt;code&gt;@include&lt;/code&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#import"&gt;
  &lt;/a&gt;
  Import
&lt;/h3&gt;

&lt;p&gt;Sometime we need to split the code into multiple file ,Then we need to call some of them into other Scss make the way possible by adding statements to do so . Like &lt;code&gt;@import&lt;/code&gt; and &lt;code&gt;@use&lt;/code&gt;.&lt;br&gt;
The main differences is how they handle members. @import makes everything globally accessible in the target file. The Sass team discourages the continued use of the @import rule and that because  it is allows for overlap and makes it difficult to trace back why your perfect css breaks .&lt;/p&gt;

&lt;p&gt;Same as @import, @use rule enables us to break our stylesheet into more practical, smaller sections and load them inside other stylesheets. The key difference is how you access the original files' members .&lt;br&gt;
and You can access variables, functions, and mixins from another module by writing .,&lt;/p&gt;

</description>
      <category>scss</category>
      <category>javascript</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>How Neural Networks work: activation functions</title>
      <author>Madeline</author>
      <pubDate>Sun, 11 Apr 2021 19:40:40 +0000</pubDate>
      <link>https://dev.to/madeline_pc/how-neural-networks-work-activation-functions-2nd7</link>
      <guid>https://dev.to/madeline_pc/how-neural-networks-work-activation-functions-2nd7</guid>
      <description>&lt;p&gt;In my post &lt;a href="https://madelinecaples.hashnode.dev/deep-learning-when-and-why-is-it-useful"&gt;Deep learning: when and why is it useful?&lt;/a&gt;, I discussed why a neural network uses non-linear functions. In this article we will see an example of &lt;em&gt;how&lt;/em&gt; to use those non-linear functions in a neural network. We'll be considering classification problems for the sake of simplicity. We'll also look at a few different kinds of non-linear functions, and see the different effects they have on the network. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-actually-is-an-activation-function"&gt;
  &lt;/a&gt;
  What actually &lt;em&gt;is&lt;/em&gt; an activation function?
&lt;/h2&gt;

&lt;p&gt;A neural network can have any number of layers. Each layer has a linear function followed by a non-linear function, called an &lt;strong&gt;activation function.&lt;/strong&gt; The activation function takes the output from the linear function and transforms it somehow. That activation becomes the input features for the next layer in the neural network. &lt;/p&gt;

&lt;p&gt;Here's a 3 layer neural network to help us visualize the process: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j98M30cd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618168960678/XMnZZXGfs.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j98M30cd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618168960678/XMnZZXGfs.jpeg" alt="20210411_151200.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We have features (x1, x2, x3, x4, x5) that go into the first hidden layer&lt;/li&gt;
&lt;li&gt;this layer calculates the linear functions (y=wx+b) on each input and then puts the result from that calculation through the activation function ReLU(max(0, x)&lt;/li&gt;
&lt;li&gt;the activations output from layer 1 becomes the inputs for layer 2 and the same calculations happen here&lt;/li&gt;
&lt;li&gt;the activations output from layer 2 become the input for layer 3 and then layer 3 does the same linear function-activation function combo&lt;/li&gt;
&lt;li&gt;the last set of activations from layer 3 go through a final activation layer, that will be different depending on what your model is trying to predict: if you have only two classes (a binary classifier), then you can use a &lt;strong&gt;sigmoid&lt;/strong&gt; function, but if you have more than two classes you will want to use &lt;strong&gt;softmax&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;those final activations are your predicted labels&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#why-would-we-want-to-do-that"&gt;
  &lt;/a&gt;
  Why would we want to do that?
&lt;/h3&gt;

&lt;p&gt;Linear models are great, but sometimes non-linear relationships exist and we want to know what they are. Consider the example below. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cQMZTyNk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618168740763/hJu2pIeI3.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cQMZTyNk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618168740763/hJu2pIeI3.jpeg" alt="20210409_145007.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We want to predict the boundary line between the blue and pink dots (fascinating, I know!).  &lt;/p&gt;

&lt;p&gt;This is what a linear function, such as logistic regression, can uncover: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UHzuLG1D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618168750925/-dNmQHb5b.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UHzuLG1D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618168750925/-dNmQHb5b.jpeg" alt="20210409_145210.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is what a non linear neural network can uncover, which gives us a better visualization of the boundaries between blue and pink dots: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xd8Q-fzn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618168797808/HzCF2vJaZ.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xd8Q-fzn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618168797808/HzCF2vJaZ.jpeg" alt="20210409_145518.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Furthermore, the more hidden layers we add to our network, the more complex relationships we can potentially find in the data—each layer is learning about some feature in the data. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#okay-but-how"&gt;
  &lt;/a&gt;
  Okay, but how?
&lt;/h3&gt;

&lt;p&gt;I find it helpful to think of activation functions in two categories (I don't know if this is an "official" distinction, it's just the way I think about them)—activations on hidden units and activations for the final output. The activations for the hidden units exist to make training easier for the neural network, and allow it to uncover non-linear relationships in the data. The activations for the final output layer are there to give us an answer to whatever question we are asking the neural network.&lt;/p&gt;

&lt;p&gt;For example, let's imagine we're training a binary classifier that distinguishes between pictures of cats and mice. We might use the &lt;strong&gt;ReLU activation function&lt;/strong&gt; on our &lt;em&gt;hidden&lt;/em&gt; units, but for our &lt;em&gt;final&lt;/em&gt; output layer we need to know the answer to our question: is this picture of a cat or a mouse? So we will want an activation function that outputs 0 or 1. &lt;/p&gt;

&lt;p&gt;Let's take a look at what each different activation function is actually doing. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-few-popular-activation-functions"&gt;
  &lt;/a&gt;
  A few popular activation functions:
&lt;/h3&gt;

&lt;p&gt;x here stands for the output from the linear function that is being fed into the activation function  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mAHoxVWj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618169062564/Q3JxGG6to.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mAHoxVWj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618169062564/Q3JxGG6to.jpeg" alt="20210411_151748.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Sigmoid&lt;/strong&gt; converts outputs to be between 0 and 1 &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HCjM_pqN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618168116473/2QMkQxm1k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HCjM_pqN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618168116473/2QMkQxm1k.png" alt="sigmoid.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Tanh:&lt;/strong&gt;  converts numbers to range from -1 to 1—you can picture it as a shifted version of sigmoid. It has the effect of centering the data so that the mean is closer to 0, which improves learning for the following layer.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ByybrVuz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618168142479/4U7DZhFDf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ByybrVuz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618168142479/4U7DZhFDf.png" alt="tanh.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ReLU (rectified linear unit):  max(0, x)&lt;/strong&gt; if the number is negative the function gives back 0, and if the number is positive it just gives back the number with no changes—ReLU tends to run faster than tanh in computations, so it is generally used as the default activation function for hidden units in deep learning&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Leaky ReLU:  max(0.001x, x)&lt;/strong&gt;—if the number x is negative, it gets multiplied by 0.01, but if the number x is positive, it stays the same x &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#final-layer-activation-functions"&gt;
  &lt;/a&gt;
  Final layer activation functions:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Sigmoid&lt;/strong&gt; is used to turn the activations into something interpretable for predicting the class in &lt;strong&gt;binary classification,&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;since we want to get an output of either 0 or 1, a further step to is added: &lt;/li&gt;
&lt;li&gt;decide which class your predictions belong to according to a certain threshold (often if the number is less than 0.5 the output is 0, and if the number is 0.5 or higher the output is 1)&lt;/li&gt;
&lt;li&gt;(Yes, sigmoid is on both lists—that's because it is more useful in deep learning in producing outputs, but it's helpful to know about for understanding Tanh and ReLU).&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Softmax&lt;/strong&gt; is used when you need more than one final output, such as in a classifier for more than one category/class. Suppose you want to know if a certain image depicts a cat, dog, alligator, onion, or none of the above. The &lt;strong&gt;motivation:&lt;/strong&gt; it provides outputs that are probabilities&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dqSN7sHC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618168170744/vaGO3TGvh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dqSN7sHC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618168170744/vaGO3TGvh.png" alt="softmax.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If that formula looks gross to you, come back next week—I plan to break it down step by step until if seems painfully simple&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>deeplearning</category>
      <category>machinelearning</category>
      <category>datascience</category>
      <category>neuralnetworks</category>
    </item>
    <item>
      <title>A Basic Setup for Web Developer</title>
      <author>CodeOzz</author>
      <pubDate>Sun, 11 Apr 2021 19:37:27 +0000</pubDate>
      <link>https://dev.to/codeozz/a-basic-setup-for-web-developer-5hg7</link>
      <guid>https://dev.to/codeozz/a-basic-setup-for-web-developer-5hg7</guid>
      <description>&lt;p&gt;Hey ! A few time ago I started a new Dev environment in a new computer so I needed to re-install all stuff linked to my dev stuff !&lt;/p&gt;

&lt;p&gt;I took this opportunity to create a list of thing to install in order to have a basic and good dev environment from scratch !&lt;/p&gt;

&lt;p&gt;(Check at the end of this article a link with every command linux in order to create this env with more stuff)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basics"&gt;
  &lt;/a&gt;
  🔧 Basics
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#curl"&gt;
  &lt;/a&gt;
  Curl
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://curl.se/"&gt;https://curl.se/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;curl is used in command lines or scripts to transfer data ! Very useful tools for every developer !&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vim"&gt;
  &lt;/a&gt;
  Vim
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.vim.org/"&gt;https://www.vim.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A powerful Text editor when you need to edit or check a file fastly !&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#zsh-amp-ohmyzsh"&gt;
  &lt;/a&gt;
  Zsh &amp;amp; oh-my-zsh
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://ohmyz.sh/"&gt;https://ohmyz.sh/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the best terminal ever to my mind ! for using oh-my-zsh you will need to install zsh.&lt;/p&gt;

&lt;p&gt;oh-my-zsh will improve a lot of thing and with this you will be able to use a lot of shortcut about git &amp;amp; shell command !&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(link to shortcut &lt;a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Cheatsheet"&gt;https://github.com/ohmyzsh/ohmyzsh/wiki/Cheatsheet&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dev-tools"&gt;
  &lt;/a&gt;
  💻 Dev tools
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#git"&gt;
  &lt;/a&gt;
  Git
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://git-scm.com/"&gt;https://git-scm.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Git is a free and open source distributed version control system, if you don't it, close this tab (no keep open but open a new tab :p) and learn git !&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#node"&gt;
  &lt;/a&gt;
  Node
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://nodejs.org/en/"&gt;https://nodejs.org/en/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For every javascript developper you will need to use NodeJs in a lot of project ! It's use for creating a server in JS !&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#npm-amp-nvm"&gt;
  &lt;/a&gt;
  Npm &amp;amp; Nvm
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/"&gt;https://www.npmjs.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What is the most heavy thing in the world ? Node module folder of course ! npm will help developper to add a lot of external module very easy !&lt;/p&gt;

&lt;p&gt;Nvm is used to handle npm versioning !&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#docker"&gt;
  &lt;/a&gt;
  Docker
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.docker.com/"&gt;https://www.docker.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Docker is very very usefull for every developper in the world ! If you don't know what is this, you should learn how and why it's a &lt;strong&gt;famous&lt;/strong&gt; tools !&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dev-software"&gt;
  &lt;/a&gt;
  📀 Dev Software
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#google-chrome-or-any-other-browser"&gt;
  &lt;/a&gt;
  Google Chrome or any other browser
&lt;/h3&gt;

&lt;p&gt;For me I used Google chrome but you are free of using any browser !&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#postman"&gt;
  &lt;/a&gt;
  Postman
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.postman.com/"&gt;https://www.postman.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I &lt;strong&gt;LOVE&lt;/strong&gt; this software, you can so easly make http(s) call for API, create custom API Library, test your api, import any call from curl to Postman call.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vs-code-or-any-other-ide"&gt;
  &lt;/a&gt;
  VS Code or any other IDE
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://code.visualstudio.com/"&gt;https://code.visualstudio.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I used it for every JS project and I love it ! I used a lot of extension (an incoming article from my VS Code setup and shortcut incoming !)&lt;/p&gt;

&lt;p&gt;So from now you are ready to start to learn basic web !&lt;/p&gt;

&lt;p&gt;I let my GitHub repository about my own setup on linux with &lt;strong&gt;every line&lt;/strong&gt; to put in your terminal in order to install and setup all thing.&lt;/p&gt;

&lt;p&gt;You will find a lot of tools that I have not mentioned in this article since I want to keep the very very basic !&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Code-Oz/setup-linux-dev"&gt;https://github.com/Code-Oz/setup-linux-dev&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>git</category>
      <category>node</category>
    </item>
    <item>
      <title>Animate Button text using only CSS</title>
      <author>Rahul Nayak</author>
      <pubDate>Sun, 11 Apr 2021 19:33:16 +0000</pubDate>
      <link>https://dev.to/pragyes31/animate-button-text-using-only-css-3dan</link>
      <guid>https://dev.to/pragyes31/animate-button-text-using-only-css-3dan</guid>
      <description>&lt;p&gt;Hello, Hola and Namaste!&lt;/p&gt;

&lt;p&gt;Today we are going to achieve what you see below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GKh7jbZD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608963039573/bjdKJE7PT.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GKh7jbZD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608963039573/bjdKJE7PT.gif" alt="deepin-screen-recorder_Select area_20201226113539.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basically, we would animate the button text to smoothly slide up and down and show a different text when one hovers over it.&lt;/p&gt;

&lt;p&gt;Without further ado, let's dive in. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-add-the-html-structure"&gt;
  &lt;/a&gt;
  Step 1: Add the html structure
&lt;/h3&gt;

&lt;p&gt;Needless to say that we would need two different text values for button. &lt;/p&gt;

&lt;p&gt;The primary text(&lt;code&gt;New Blog&lt;/code&gt;) would hold the current information while the hidden text(&lt;code&gt;Read it now!&lt;/code&gt;) would hold the value shown on button hover. &lt;/p&gt;

&lt;p&gt;Here is the  &lt;a href="https://codepen.io/pragyesh31/pen/PoGONVb"&gt;code&lt;/a&gt;  so far:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="btn blog-button"&amp;gt;
  &amp;lt;div class="primary text"&amp;gt;New Blog&amp;lt;/div&amp;gt;
  &amp;lt;div class="secondary text"&amp;gt;Read it now!&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
.btn {
  width: 200px;
  height: 50px;
  background-color: #0fabbc;
  border-radius: 25px;
  color:#fff;
  font-size:18px;
  font-weight:bold;
  font-family: "Lucida Console", "Courier New", monospace;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8yzb_RKB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608911982787/-AJ5ceAhG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8yzb_RKB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608911982787/-AJ5ceAhG.png" alt="Screenshot from 2020-12-25 21-28-52.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-initial-state-no-hover"&gt;
  &lt;/a&gt;
  Step 2: Initial state (No Hover)
&lt;/h3&gt;

&lt;p&gt;Right now both the text values are stacked against each other in the tiny button box. Let us use the &lt;code&gt;position&lt;/code&gt; property to separate them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.btn {
  width: 180px;
  height: 45px;
  background-color: #0d7377;
  border-radius: 25px;
  position: relative;
}

.text {
  width: 180px;
  height: 45px;
  position: absolute;
}

.primary {
  top: 0px;
}

.secondary {
  top: 80px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--43yMDSFW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608912040413/jaYo3JY9C.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--43yMDSFW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608912040413/jaYo3JY9C.png" alt="Screenshot from 2020-12-25 21-30-05.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you use &lt;code&gt;position: absolute;&lt;/code&gt;, it positions itself relative to the nearest positioned parent. If you look at the above code and the image, we gave the &lt;code&gt;.btn&lt;/code&gt; the position of relative and positioned the children divs absolute. &lt;/p&gt;

&lt;p&gt;So now whenever you try to change the position of the children elements(&lt;strong&gt;&lt;code&gt;.secondary and .primary&lt;/code&gt;&lt;/strong&gt;), they would move with respect to the &lt;code&gt;.btn&lt;/code&gt; div and not body.&lt;/p&gt;

&lt;p&gt;### Step 3: Hover state &lt;/p&gt;

&lt;p&gt;If you look at the code above, you'd notice that we have given the &lt;code&gt;.secondary&lt;/code&gt; class a top value of 80px. That's our button text to be displayed on hover. When one hover over the button, the top property should be 0 so it sits inside the button box. &lt;/p&gt;

&lt;p&gt;Similarly at this point, we want the existing text("New Blog") to clear space for the secondary text so we would move it up by setting the top to -80px. Let's see it in action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.btn:hover .primary {
  top:-80px
}

.btn:hover .secondary {
  top:0px
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LnnZ_Dwg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608909711163/aN-9ccwsF.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LnnZ_Dwg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608909711163/aN-9ccwsF.gif" alt="deepin-screen-recorder_Select area_20201225205114.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's the complete &lt;a href="https://codepen.io/pragyesh31/pen/KKgyzvv"&gt;code&lt;/a&gt;  used so far for your reference. But wait, isn't something missing here?&lt;/p&gt;

&lt;p&gt;Ohh yeah, the transition doesn't look very smooth. Plus why the other text is still visible. Let's fix it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-sprinkle-some-animation-here-and-there"&gt;
  &lt;/a&gt;
  Step 4: Sprinkle some animation here and there
&lt;/h3&gt;

&lt;p&gt;Right now, the sliding up and down behaviour is instant. Let's use the CSS &lt;code&gt;transition&lt;/code&gt; property to control the speed of this slide up/down behaviour. &lt;/p&gt;

&lt;p&gt;Additionally, time to get rid of the unwanted text. We only want to show whatever text is inside the button box with the &lt;code&gt;.btn&lt;/code&gt; class and so we would use &lt;code&gt;overflow:hidden&lt;/code&gt; to hide that text. Let's see it in action:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.btn {
  overflow:hidden;
}

.text {
  transition: top 0.7s;
  -moz-transition: top 0.7s; // Firefox
  -webkit-transition: top 0.7s; // Safari and Chrome 
  -o-transition: top 0.7s; // Opera 
  -ms-transition: top 0.7s; // Explorer
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GKh7jbZD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608963039573/bjdKJE7PT.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GKh7jbZD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608963039573/bjdKJE7PT.gif" alt="deepin-screen-recorder_Select area_20201226113539.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above code snippet is simplified to only show the code relevant to this section. You can find the final code  &lt;a href="https://codepen.io/pragyesh31/pen/KKgyZPL"&gt;here&lt;/a&gt;  for all the css styling that I have used. &lt;/p&gt;

&lt;p&gt;This brings me to the end of this article. I enjoyed animating this button and writing about it. I hope this brings the same joy to you when you read and try it on your website.&lt;/p&gt;

&lt;p&gt;My comment section is open to your feedback. If you want to chat over twitter, you can find me  &lt;a href="https://twitter.com/rhlnyk"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Concluding this article with the usual request: Like, share and comment. It would mean a lot to me. 🙂🙂&lt;/p&gt;

&lt;p&gt;Until Next time!&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>animation</category>
    </item>
    <item>
      <title>Using Docker secrets with MySQL in Docker Compose</title>
      <author>adithyasrinivasan</author>
      <pubDate>Sun, 11 Apr 2021 19:21:48 +0000</pubDate>
      <link>https://dev.to/adithyasrinivasan/using-docker-secrets-with-mysql-in-docker-compose-4dk7</link>
      <guid>https://dev.to/adithyasrinivasan/using-docker-secrets-with-mysql-in-docker-compose-4dk7</guid>
      <description>&lt;p&gt;Prefacing this that Docker secrets were built for Docker Swarm and not for single containers. From the docs:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : Docker secrets are only available to swarm services, not to standalone containers. To use this feature, consider adapting your container to run as a service. Stateful containers can typically run with a scale of 1 without changing the container code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also, this is not completely secure as we will be using files on the host machine to feed at the build time, so if you're considering commiting this to your repository, commit just the secrets' file structure with no content.&lt;/p&gt;

&lt;p&gt;Initial docker container that I used for a Laravel application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mysql:
    image: mysql:8.0.22
    container_name: mysql
    restart: unless-stopped
    tty: true
    volumes:
      - ./mysql:/var/lib/mysql
    ports:
      - "3307:3306"
    environment:
      MYSQL_DATABASE: db_name
      MYSQL_USER: user_name
      MYSQL_PASSWORD: db_password
      MYSQL_ROOT_PASSWORD: db_root_password
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To use Docker Secrets, we need to create two files (for two passwords). I created it in the same level as the docker-compose.yml inside a folder &lt;code&gt;secrets&lt;/code&gt; named &lt;code&gt;db_password.txt&lt;/code&gt; and &lt;code&gt;db_root_password.txt&lt;/code&gt; (commit at this point) and then add the passwords inside them.&lt;/p&gt;

&lt;p&gt;Now let's change the docker container definition to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mysql:
    image: mysql:8.0.22
    container_name: mysql
    restart: unless-stopped
    tty: true
    volumes:
      - ./mysql:/var/lib/mysql
    ports:
      - "3307:3306"
    environment:
      MYSQL_DATABASE: db_name
      MYSQL_USER: db_user
      MYSQL_PASSWORD_FILE: /run/secrets/db_password
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    secrets:
      - db_password
      - db_root_password


secrets:
  db_password:
    file: ./secrets/db_password.txt
  db_root_password:
    file: ./secrets/db_root_password.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Define a &lt;code&gt;secrets&lt;/code&gt; section on your docker-compose.yml with the file locations and then in the &lt;code&gt;mysql&lt;/code&gt; section, we'll just use those &lt;strong&gt;without&lt;/strong&gt; the extension during runtime.&lt;/p&gt;

&lt;p&gt;Important thing to note is that &lt;code&gt;MYSQL_PASSWORD&lt;/code&gt; and &lt;code&gt;MYSQL_ROOT_PASSWORD&lt;/code&gt; have been replaced by &lt;code&gt;MYSQL_PASSWORD_FILE&lt;/code&gt; and &lt;code&gt;MYSQL_ROOT_PASSWORD_FILE&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;docker-compose up -d&lt;/code&gt; and your MySQL installation should be using these passwords from the files :)&lt;/p&gt;

</description>
      <category>docker</category>
      <category>laravel</category>
      <category>mysql</category>
    </item>
    <item>
      <title>Day 1 of #100DaysOfCode</title>
      <author>Sarah</author>
      <pubDate>Sun, 11 Apr 2021 19:11:43 +0000</pubDate>
      <link>https://dev.to/sarahonmars/day-1-of-100daysofcode-5d35</link>
      <guid>https://dev.to/sarahonmars/day-1-of-100daysofcode-5d35</guid>
      <description>&lt;p&gt;Today is my first day starting this challenge after days of research to figure out what I want to learn and the plan and resources to help me achieve my goals.&lt;br&gt;
My goals are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To be proficient in Data structures and algorithms
&lt;/li&gt;
&lt;li&gt;To learn how to develop a simple website / blog 
I have started this challenge once before but stopped midway so this time I'm determined to be more consistent.&lt;/li&gt;
&lt;/ul&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1sfn9hqD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EytuwZsWgAY-F1r.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--nGCKys8z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1272143432681750534/QO8poJbZ_normal.jpg" alt="Sarah profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Sarah
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @saraonmars
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/hashtag/100DaysOfCode"&gt;#100DaysOfCode&lt;/a&gt; &lt;br&gt;&lt;a href="https://twitter.com/hashtag/DAY1"&gt;#DAY1&lt;/a&gt;&lt;br&gt;Today was my first day of the challenge. Since my end goal is to be proficient in data structures and algorithms I chose Java so what I did was just brush up on the basics (data types, if-else statements, loops, arrays ...) because I worked with java before. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      18:57 PM - 11 Apr 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1381320493911973892" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1381320493911973892" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1381320493911973892" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>java</category>
    </item>
  </channel>
</rss>
