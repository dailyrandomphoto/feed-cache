<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Get JavaScript Objects from a JSON File</title>
      <author>nikhil sharma</author>
      <pubDate>Tue, 11 Jan 2022 06:44:09 +0000</pubDate>
      <link>https://dev.to/sharma2288/get-javascript-objects-from-a-json-file-2c86</link>
      <guid>https://dev.to/sharma2288/get-javascript-objects-from-a-json-file-2c86</guid>
      <description>&lt;h4&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h4&gt;

&lt;p&gt;JSON stands for JavaScript Object Notation.JSON is a lightweight format for storing and transporting data.JSON is often used when data is sent from a server to a web page.JSON is "self-describing" and easy to understand. JavaScript objects are an integral part of the React app, so they need to get accessed from JSON files/data to be uses in components.&lt;/p&gt;

&lt;p&gt;This blog will demonstrate how to get a JavaScript object from a JSON file or access it using a fetch() HTTP request.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#rendering-values-from-a-json-file"&gt;
  &lt;/a&gt;
  Rendering Values from a JSON File
&lt;/h4&gt;

&lt;p&gt;Create one sample JSON file as given below, and save it as data.json&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
"employees":{
"employee1": {"firstName":"John", "lastName":"Doe"},
"employee2": {"firstName":"Anna", "lastName":"Smith"},
"employee3": {"firstName":"Peter", "lastName":"Jones"}
}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if you want to render any of the key-value pairs from the JSON, the .map() function would be useful to iterate the objects; the example is below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { Component } from "react";
// Import local JSON file
import Data from "./data";

export class Sample extends Component {
  render() {
    return (
      &amp;lt;&amp;gt;
        &amp;lt;div&amp;gt;
          &amp;lt;h3&amp;gt;Using local JSON file&amp;lt;/h3&amp;gt;
          {Object.keys(Data.employees).map((item, i) =&amp;gt; (
            &amp;lt;li key={i}&amp;gt;
              &amp;lt;span&amp;gt;Key name : {item}&amp;lt;/span&amp;gt;
            &amp;lt;/li&amp;gt;
          ))}
        &amp;lt;/div&amp;gt;
      &amp;lt;/&amp;gt;
    );
  }
}

export default Sample;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, to use the local JSON file needs to be consumed using the import statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Data from "./data";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, you can access all the JSON data using Data in your component by using Object.keys() along with the .map() function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{Object.keys(Data.employees).map((item, i) =&amp;gt; ())}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using a local JSON file in the React app is a common approach when you want to render some static data, maintain server config, etc.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#rendering-json-objects-from-an-api-call"&gt;
  &lt;/a&gt;
  Rendering JSON Objects from an API Call
&lt;/h4&gt;

&lt;p&gt;You have seen the example where a local JSON file is used, but at the same time you may need to access JSON data from the server.&lt;/p&gt;

&lt;p&gt;Implement the API call as demonstrated below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;componentDidMount() {
    fetch("https://jsonplaceholder.typicode.com/users")
      .then(res =&amp;gt; res.json())
      .then(
        result =&amp;gt; {
          this.setState({
            data: result
          });
        },
        error =&amp;gt; {
          console.log(error);
        }
      );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After implementing the API call, you can access the JSON data for the rendering as below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;render() {
    return (
      &amp;lt;&amp;gt;
        &amp;lt;div&amp;gt;
          &amp;lt;h3&amp;gt;Using API call&amp;lt;/h3&amp;gt;
          {this.state.data &amp;amp;&amp;amp;
            this.state.data.length &amp;gt; 0 &amp;amp;&amp;amp;
            this.state.data.map((item, i) =&amp;gt; (
              &amp;lt;li key={i}&amp;gt;
                &amp;lt;span&amp;gt;Email : {item.email}&amp;lt;/span&amp;gt;
              &amp;lt;/li&amp;gt;
            ))}
        &amp;lt;/div&amp;gt;
      &amp;lt;/&amp;gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Along with the state this.state.data, the additional function used is .map(), which iterates the array items from the state and renders them into the DOM.&lt;/p&gt;

&lt;p&gt;Hope ou enjoyed the blog post!!&lt;/p&gt;

&lt;p&gt;Please feel free to like, save and comment your thoughts!!&lt;/p&gt;

&lt;p&gt;Happy Reading!!!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>These cryptocurrencies combined have given returns of over 2,400% in 2021</title>
      <author>Shivashish Yadav</author>
      <pubDate>Tue, 11 Jan 2022 05:55:04 +0000</pubDate>
      <link>https://dev.to/shivashish/these-cryptocurrencies-combined-have-given-returns-of-over-2400-in-2021-4cdl</link>
      <guid>https://dev.to/shivashish/these-cryptocurrencies-combined-have-given-returns-of-over-2400-in-2021-4cdl</guid>
      <description>&lt;p&gt;While crypto investors expected that the month of December will see some decent jump in crypto, but nothing like this happened. After touching, it's All-Time High (ATH) on 10th November, Bitcoin will see a lot of declines has been found.&lt;/p&gt;

&lt;p&gt;Even amid such an upsurge, from the beginning of 2021 till now, a lot of cryptocurrencies have made very good returns to their investors. According to data from Coinmatrics, there are 35 cryptocurrencies that have given an average return of 2,400% this year.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v-hAfYkW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641844170969/DL8-jRduy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v-hAfYkW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641844170969/DL8-jRduy.png" alt="https___bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com_public_images_62b1d980-a9fb-4b30-a238-94bb6a583dcc_1436x1216.png" width="880" height="745"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On top of this comes the name of Axie infinity, which is a Play To Earn Blockchain game that has given a tremendous 17,213% returns this year, same category Blockchain gaming project Sandbox has also given 13,832% returns.&lt;/p&gt;

&lt;p&gt;Matic, which is working on Ethereum's Layer 2 Solution, has given 12,133% to its investors. Investors' eyes are very much on Matic as it is contributing hugely to scaling Ethereum and right now Matic is also working on many projects. It is working, due to which the investor expects it will increase further.&lt;/p&gt;

&lt;p&gt;During so many difficulties, the world's largest cryptocurrency, Bitcoin, did not anger people too much, from the beginning of this year to the end, Bitcoin has given a return of 62%, while the second number cryptocurrency Ethereum has given a return of 433%.&lt;/p&gt;

&lt;p&gt;As awareness is increasing among people about NFT, DeFi, its biggest advantage will be the leader cryptocurrency of this category, Ethereum. Everyone is eagerly waiting for Ethereum 2.0. With its arrival, Ethereum's network will see a lot of booms, and people will get rid of the high gas fees and its slow transaction speed.&lt;/p&gt;

&lt;p&gt;Its developers are working on Ethereum 2.0, it is expected that it will be completed by 2022, after which there will be no one to compete with Ethereum.&lt;/p&gt;

&lt;h2 id="heading-disclaimer"&gt;Disclaimer&lt;/h2&gt;

&lt;p&gt;Do not invest your money in any cryptocurrency without doing your own research, as you will find many crypto projects that will lure you to give you high returns, but you should not invest money anywhere without doing research.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Complete Amazon SEO Guide for Sellers 2022</title>
      <author>Bhavyashah</author>
      <pubDate>Tue, 11 Jan 2022 05:35:05 +0000</pubDate>
      <link>https://dev.to/bhavyashah/complete-amazon-seo-guide-for-sellers-2022-16ge</link>
      <guid>https://dev.to/bhavyashah/complete-amazon-seo-guide-for-sellers-2022-16ge</guid>
      <description>&lt;p&gt;Source Image was taken by this website: &lt;a href="https://www.blogtriggers.com/2022/01/complete-seo-guide-for-sellers-2022.html"&gt;Complete Amazon Guide for sellers 2022&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amazon is the big wheel of eCommerce. In 2021, it had more than 146,396 million U.S. dollars sales, which is expected to grow over 162K million U.S. Dollars by 2022. All the amazon businesses dream of being on page one, and it is obvious that the company listed on page one will have more visibility, so have more leads to convert. But how to hold a place on Amazon page one? The answer is- Amazon SEO. You need to learn and master Amazon Search Engine Optimization (SEO). This is the most reliable method to generate sales compared to Amazon PPC, influencer partnerships, other paid ads, etc. &lt;/p&gt;

&lt;p&gt;Today’s post will discuss all the steps you need to know to master Amazon SEO. but before that, let us see what Amazon SEO is-&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What Does Amazon SEO Entail?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon SEO is all about optimizing your product listings to get as much organic search traffic as possible. The main purpose is to place the business in top Amazon search results for various search queries. This will increase the visibility of your goods in the eyes of Amazon customers, resulting in more clicks and sales.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important Steps to Run Amazon SEO&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The following are the steps involved in Amazon SEO:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A9 algorithm from Amazon&lt;/li&gt;
&lt;li&gt;Keyword for Amazon Product listing&lt;/li&gt;
&lt;li&gt;Product title &lt;/li&gt;
&lt;li&gt;Product Description&lt;/li&gt;
&lt;li&gt;Image of the products&lt;/li&gt;
&lt;li&gt;Strategy for Pricing&lt;/li&gt;
&lt;li&gt;Reviews &amp;amp; Ratings from Customers&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;1) A9 algorithm from Amazon&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon's product search algorithm is called A9. The Amazon A9 algorithm is a ranking system that determines where products appear on the Amazon SERPs for a given phrase. This ranks products depending on the likelihood of the searcher purchasing the item. But how does Amazon's algorithm determine this? &lt;/p&gt;

&lt;p&gt;The shopper's search query terms are the first thing Amazon looks at. Because keyword optimization is an important part of Amazon SEO, it's unlikely to appear in the search results if your product listing doesn't include every keyword in the search query. &lt;/p&gt;

&lt;p&gt;Then, based on how well your product has performed in the past, Amazon attempts to assess purchase likelihood. The algorithm considers the click-through rate and total sales on the keyword level.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A10 Amazon Algorithm&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2H-SnEva--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2hs9d7snppl7lmeiopq6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2H-SnEva--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2hs9d7snppl7lmeiopq6.png" alt="Image description" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remember that the A9 algorithm is updated regularly. In reality, many people now refer to it as the "A10" algorithm. The purpose of the search algorithm is to generate satisfied, repeat consumers. It has recently modified its search criteria to place a greater emphasis on consumer behavior, resulting in which it has tied in several aspects. Your product will most likely be ranked higher in search results if it has a high sales velocity and generates more traffic than similar listings, while less popular items will get a place below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) Best Keywords for Amazon Product Listings&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Z_1hUx3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xibjab4yk6tno4hy11my.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Z_1hUx3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xibjab4yk6tno4hy11my.png" alt="Image description" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use an Amazon SEO tool to find keywords for Amazon product listings. These types of tools can inform you what customers are looking for on Amazon when they want to buy your goods. You should also look for the keyword for which your competitors are ranking. &lt;/p&gt;

&lt;p&gt;At the same time, backend keywords inform Amazon's algorithm that a certain product listing is aimed towards a specific keyword on the site. These are like meta tags that tell Google what your page is about, allowing the search engine to determine when to show the page to visitors looking for specific information. &lt;/p&gt;

&lt;p&gt;With their backend keywords, merchants can fill out five fields. If you exceed the limit, each line is limited to 50 characters and will not index your back-end keyword. Also, avoid repeating words, commas, excess variations, quotation marks, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) Product Title&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OGTMFc2y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/70kgm5osj20apx8vmoi8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OGTMFc2y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/70kgm5osj20apx8vmoi8.png" alt="Image description" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When a consumer searches for specific keywords, the product title of a listing will carry the most weight; according to Amazon's criteria for product title design, these should be around 60 characters long and should accurately reflect the contents of the item packing. &lt;/p&gt;

&lt;p&gt;When customers search for a product on Amazon, they will match their preferred keywords with those in the title, with the top results receiving the most attention. &lt;/p&gt;

&lt;p&gt;It needs to be brief enough to catch a customer's attention when reading a big list of search results, yet long enough to explain exactly what you're selling correctly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4) Bullet Points &amp;amp; Product Descriptions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XzXXltmr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qp2it97v9u4bbhv35r5m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XzXXltmr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qp2it97v9u4bbhv35r5m.png" alt="Image description" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The product description is the priceless real estate where you compose the screenplay and persuade potential buyers to part with their money. The use of bullet points in the product description is a method that many consumers agree on and that Amazon advises.&lt;/p&gt;

&lt;p&gt;Bullet points are short, concise statements that should create a persuasive case for your product while being easy to read. &lt;/p&gt;

&lt;p&gt;A customer's attention will be drawn to bullet points rather than a full text. Incorporating it in a bullet point is a good deal if your product has a specific function that people seek out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5) Images of the Products&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7kb60WPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ly881fegg4jz81m3ovsx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7kb60WPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ly881fegg4jz81m3ovsx.png" alt="Image description" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using high-quality photos to accompany your title and description is another crucial aspect of improving your Amazon listings. When picking one product out of many, product photos are frequently the deciding factor. &lt;/p&gt;

&lt;p&gt;While the title, description, and even reviews provide detailed and compelling information about a product, &lt;/p&gt;

&lt;p&gt;Amazon customers will focus on the product itself in photographs. Seeing an object before buying might help a client decide whether or not to buy it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6) Strategy for Pricing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gHlQ7o-K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j0j5brc81mjkw7ndcqrc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gHlQ7o-K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j0j5brc81mjkw7ndcqrc.png" alt="Image description" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Maintaining competitive prices is critical to improving click-through and conversion rates. Amazon is more likely to rank these listings higher if the conversion rate and, as a result, the sales volume improves.&lt;/p&gt;

&lt;p&gt;It is crucial to research rival pricing before putting your products on the market. This will ensure that your pricing is reasonable while remaining competitive, resulting in more visitors and sales.&lt;/p&gt;

&lt;p&gt;You can use an Amazon Repricer or any other pricing tool to fully automate your pricing to stay competitive, which will help with your listing's A10 ranking on Amazon.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7) Reviews &amp;amp; Ratings from Customers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KoTLSxBS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fmtq0nikz2grm57exyht.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KoTLSxBS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fmtq0nikz2grm57exyht.png" alt="Image description" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While you have less control over client feedback, you have a say in how they are treated overall. You need to aim at least for 4 or 5-star ratings, as the Amazon A10 algorithm might not recognize the lower ratings. &lt;/p&gt;

&lt;p&gt;According to Amazon's emphasis on customer satisfaction and ratings, customers directly impact the performance and ranking of your listings. As a result, it's necessary to promptly check your products' reviews and replies to unfavorable feedback.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Final Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At last, we can say that now you have good knowledge about major factors to focus on achieving a high ranking in Amazon SERPs. You need to master writing great product listings with titles displaying brand, model, version, category, and other relevant details.&lt;/p&gt;

&lt;p&gt;Additionally, give clear and concise descriptions, choose the right photos to convey the right messages, and use Amazon tools and services wherever needed. For sellers on Amazon, it is important to maintain a fine-tuning of all Amazon SEO elements to get desired results.&lt;/p&gt;

&lt;p&gt;If you Find any suggestion then please comment us.&lt;/p&gt;

</description>
      <category>beginners</category>
    </item>
    <item>
      <title>25 Day Check-In -- #100 Days of Code</title>
      <author>Josh Smith</author>
      <pubDate>Tue, 11 Jan 2022 05:24:54 +0000</pubDate>
      <link>https://dev.to/joshdevhub/25-day-check-in-100-days-of-code-837</link>
      <guid>https://dev.to/joshdevhub/25-day-check-in-100-days-of-code-837</guid>
      <description>&lt;p&gt;Hello again. Back with another update on my 100 days of code progress. I feel like I've gotten a lot done over these 5 days and have been feeling quite motivated and excited about coding coming off the holidays. So here's what's new:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#custom-enumerables"&gt;
  &lt;/a&gt;
  Custom Enumerables
&lt;/h2&gt;

&lt;p&gt;I mentioned this in my last update, but now I have a finished &lt;a href="https://github.com/JoshDevHub/Custom-Enumerables"&gt;product&lt;/a&gt;. Like the other projects I'll mention in this update, this was done as part of &lt;a href="https://theodinproject.com"&gt;The Odin Project&lt;/a&gt;. It's essentially a custom building of Ruby's built in &lt;a href="https://ruby-doc.org/core-3.1.0/Enumerable.html"&gt;enumerable module&lt;/a&gt;, which is a mixin that's included with 'iterable' standard classes like &lt;code&gt;Array&lt;/code&gt; and &lt;code&gt;Hash&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Technically each class that includes &lt;code&gt;Enumerable&lt;/code&gt; implements its own &lt;code&gt;#each&lt;/code&gt;. It wasn't in the specifications of the project to go about developing all that, so mine was mostly built with arrays in mind (and it's basically all I tested anything with).&lt;/p&gt;

&lt;p&gt;A few features of the Ruby language really came together for me while making this -- blocks, the &lt;code&gt;yield&lt;/code&gt; keyword, procs, and a little pattern matching. Excellent project for demystifying some of these mechanics for me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linked-list"&gt;
  &lt;/a&gt;
  Linked List
&lt;/h2&gt;

&lt;p&gt;This &lt;a href="https://github.com/JoshDevHub/linked-list"&gt;project&lt;/a&gt; involved building a Linked List Class in Ruby. A &lt;a href="https://en.wikipedia.org/wiki/Linked_list"&gt;linked list&lt;/a&gt; is a data structure where each node points to the next node in the list, and nodes are accessed through these chained pointers from one node to the next -- unlike in an array or a hash where data is accessed through indices or keys, respectively. This project was good fun and also a surprising challenge, as I'd never really thought of data structures outside of what's built into standard Ruby and JavaScript. So building this required doing away with a lot of silly assumptions.&lt;/p&gt;

&lt;p&gt;With the &lt;code&gt;LinkedList&lt;/code&gt; class, I not only developed a way to create a linked list structure, but I also have several methods on the class for manipulating and traversing the data held in a linked list. Really excellent project -- can't recommend Odin enough&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#balanced-binary-search-tree"&gt;
  &lt;/a&gt;
  Balanced Binary Search Tree
&lt;/h2&gt;

&lt;p&gt;Now this one was a doozy. With this &lt;a href="https://github.com/JoshDevHub/Balanced-BST"&gt;project&lt;/a&gt;, I built an implementation of another new-to-me data structure: the &lt;a href="https://en.wikipedia.org/wiki/Binary_search_tree"&gt;binary search tree&lt;/a&gt;. My &lt;code&gt;Tree&lt;/code&gt; class can build a balanced BST from an array of numbers. Also implemented are several methods for changing or reading the tree's data. This involved quite a bit of study on different traversal orders and also really tested my understanding of recursion.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#upcoming"&gt;
  &lt;/a&gt;
  Upcoming
&lt;/h2&gt;

&lt;p&gt;Tomorrow I will begin tackling the infamous &lt;a href="https://en.wikipedia.org/wiki/Knight's_tour"&gt;knight's tour&lt;/a&gt; problem. Hopefully I can get through it somewhat quickly as the next thing in the works is testing with rspec, something I'm quite excited for. In any case, I'll hopefully be back next Monday with another progress update. Happy coding&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>beginners</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Cheat sheets</title>
      <author>Padmashree Jha</author>
      <pubDate>Tue, 11 Jan 2022 05:23:34 +0000</pubDate>
      <link>https://dev.to/codewithpom/cheat-sheets-2imc</link>
      <guid>https://dev.to/codewithpom/cheat-sheets-2imc</guid>
      <description>&lt;p&gt;So I am back with my new blog 😎 and now I am telling you a secret that now I am going to start my new series of cheat sheets and in this series I am going to post cheat sheets of all (most famous languages) in parts like 3 blogs for c, c++, etc.&lt;/p&gt;

&lt;p&gt;So we will start with &lt;strong&gt;C&lt;/strong&gt; as it is the mother of most of the languages from today 🎉.&lt;/p&gt;

&lt;p&gt;If you are felling like this&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rHDPgyez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/PK_ln6GnJksAAAAM/jonah-hill-yay.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rHDPgyez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/PK_ln6GnJksAAAAM/jonah-hill-yay.gif" alt="Excited" width="220" height="158"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So &lt;strong&gt;comment down below&lt;/strong&gt; and I have put the languages whose cheat sheets I have decided yet.&lt;/p&gt;

&lt;p&gt;Wait wait make sure to post your ideas down below and also I started my own buy me a coffee page so you can now also sponsor me 😎, and using the money I am going to order my cart from DEV shop buy some programming books and buy the &lt;strong&gt;Octocat Figurine&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k3B_UiT_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.shopify.com/s/files/1/0051/4802/products/mona-1_882x882.jpg%3Fv%3D1571377850" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k3B_UiT_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.shopify.com/s/files/1/0051/4802/products/mona-1_882x882.jpg%3Fv%3D1571377850" alt="Octocat figurine" width="880" height="585"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/codewithpom"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kziPr3-e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png" alt='"Buy Me A Coffee"' width="170" height="37"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>c</category>
      <category>cpp</category>
      <category>go</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Top 5 text editors for mobile in India 2021 </title>
      <author>coding-land</author>
      <pubDate>Tue, 11 Jan 2022 05:23:19 +0000</pubDate>
      <link>https://dev.to/codingland/top-5-text-editors-for-mobile-in-india-2021-4683</link>
      <guid>https://dev.to/codingland/top-5-text-editors-for-mobile-in-india-2021-4683</guid>
      <description>&lt;p&gt;Top 5 text editors for mobile in India 2021&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2uqifsHt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2bc3svb0fyvtjiimjj9r.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2uqifsHt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2bc3svb0fyvtjiimjj9r.jpg" alt="Image description" width="639" height="426"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Many people don't have a PC or laptop and if they are interested in coding and web development then they think that they have to buy one of them but in this post, we are going to find out about the top 5 text editors for you through which you can practice coding on your mobile devices including Android, IOS, and more. So, if you will like our post and want more posts like this then share our post with your developer friend and &lt;a href="https://all-time-devlopment.blogspot.com"&gt;visit&lt;/a&gt; our blog. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quickedit"&gt;
  &lt;/a&gt;
  QuickEdit
&lt;/h2&gt;

&lt;p&gt;QuickEdit is a text editor from Rhythm Software. This text editor is a very stable fast and very featureful text editor you can use for web development, editing plain text files, and basic coding practices. It is optimized for both phones and tablets. So, if you have a tablet and want to code there too then you can use it there also. It has a syntax highlight feature for more than 50+ languages including C++, C#, Java, JavaScript, PHP, Perl, Python, Ruby, Swift, HTML, CSS, and a lot more languages. It doesn't lag on very large files too you can write more than 10000 lines of code without any problem, you can easily navigate between multiple tabs, you can undo and redo changes, it also supports a physical keyboard with multiple key combinations, you can quickly search and replace content, automatic decoding and detects charset, easily input of hex color values, you can preview HTML, CSS and markdown files, supports both light and dark themes, integrate and easy access to Github and Gitlab, automatically indent new lines, fast editing abilities, show or hide line numbers, supports smooth scrolling both vertical and horizontal, it provides various fonts and size for their text editors and there are a lot of features that this text editor provides which you will find when you will try it and I also recommend you using this if you want to code on mobile or tablet. But it has two cons that it is available only for android based mobiles and tablets on Google Play Store and the other con is that it is completely free but you will see some ads while using it but it's OK because you can use it for free. It also has a good rating and review on Google Play Store which is around 4.0 stars but if you have a lot of money then they also have a pro version in which you will get all the features that I have mentioned above and along with that you don't have to see ads while using it if you will buy their pro version. The price of their pro version is around $4.00.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#acode"&gt;
  &lt;/a&gt;
  Acode
&lt;/h2&gt;

&lt;p&gt;Acode is also a free and easy-to-use text editor like QuickEdit and this editor also has a lot of features. It is from Foxebug. It is a light-weight yet powerful text editor and web IDE for android but the problem with this text editor is that you can only create web designs using this text editor means you can only run HTML, CSS, and JavaScript and edit plain text files using this text editor. Let's also talk about its features even if it is free you will not see any ads on this text editor, so if you don't like the last text editor due to ads then you can use this, GitHub support, FTP/SFTP support, open-source, In-app HTML/Markdown preview, lot of themes including dark and light themes, user-friendly, supports interactive JavaScript console, In-app file browser, you can write 50000+ lines of code, customizable, fast workflow, file recovery, and file management, etc are its amazing. This text editor also has a good rating and review at Google Play Store which is around 4.5 stars and as the last text editor, this text editor also has a pro version but it has almost the same features as its free version. So, I won't recommend you buy its free version but if you won't buy it then the price of its paid version is around $1.00 but it has only a con that it is only available for android mobiles and tablets means you can cannot download or use it on IOS devices or tablets.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#trebedit"&gt;
  &lt;/a&gt;
  TrebEdit
&lt;/h2&gt;

&lt;p&gt;TrebEdit is a amazing text editor from Joel Etetafia it is completely free but you can only create web designs using this text editor. It has a HTML viewer through which you can view your project and along with that you can export your project on your mobile when you project is completed but in text editor there is a different feature through which you can get source from any website and you can save it as a project and you can open and edit it and present it in your own different way through like you can make it more beautiful using your CSS skills and more. They also have a feature through which you can learn HTML, CSS, JavaScript, PHP and more languages, this text editor provides you an HTML viewer, JavaScript console, source code viewer, text editor customizer, you can switch from mobile to desktop view, syntax highlighting, auto complete and different color themes etc but the best thing that I like about this app is that you won't see any ads while using it. TrebEdit also has a good rating and review in Google Play Store which 4.6 stars. So, if you want a text editor but want it to be a bit handy and different then you can use it but remember that this text editor is only available for android devices you cannot use it on IOS devices but if you want a text editor for your IOS devices then the next text editor will be best for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#textastic"&gt;
  &lt;/a&gt;
  Textastic
&lt;/h2&gt;

&lt;p&gt;Textastic is a very popular text editor on IOS devices and it is from Alexander Blach. This text editor is has a lot of features and it supports more than 80 programming and markup languages including C++, C#, JavaScript, PHP, PERL, Java, HTML, CSS, XML, MARKDOWN, Objective-C, Swift, SQL, Python, Shell scripts etc for full list you can visit their website, you can connect your FTP, SFTP, SSH and WEBDAV servers to your Google Drive or Dropbox account either you can use their build-in WEBDAV to easily transfer files from MAC or PC over WIFI, syntax highlight support for more than 80 languages some of them I have mentioned above, compatible with Textmate and Sublime themes and syntax definitions, Emmet support, JavaScript console support, SSH terminal connections, iCloud drive support, Symbol list to quickly navigate in a file, full external keyboard support, configurable keyboard support, virtual keyboard support to easily type characters faster while writing code or programs, cursor navigation wheel for easy text selection, easily move the cursor using swipe gestures, split view and slide over multitasking for iPad, open multiple files in tabs, multiple windows support for iPad OS, dark mode available, customizable fonts and font sizes, find and replace (including regular expression search), counts character and words, send files by email(electronic-mail), local and remote web preview and a lot of more features. So, if you wanted a good text editor for IOS devices then you can use this and also the ratings and reviews of code editor is very good which is 4.8 stars and if you will like their features then you can visit their website &lt;a href="https://textasticapp.com"&gt;https://textasticapp.com&lt;/a&gt; or you can use twitter to give your feedbacks about the code editor &lt;a href="https://twitter.com/Textastic"&gt;https://twitter.com/Textastic&lt;/a&gt; and this app is paid which means you don't have to view any ads while using the app but for those who want a free text editor for IOS can read about the next text editor. The price of Textastic is around $10.0&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#jsitor"&gt;
  &lt;/a&gt;
  Jsitor
&lt;/h2&gt;

&lt;p&gt;Jsitor is a completely free text or code editor for IOS devices. It is created by Ashvin Suthar. This text editor has a lot of features like it supports various languages modes like - JavaScript, JSX, TypeScript, CSS, SASS, SCSS, POSTCSS, LESS, HTML, PUG, code suggestions and quick shortcuts for keyboards to write faster, in-build options to to quickly select, cut, copy and paste code snippets, formate code snippets, easily manage snippet CDN libraries, settings, language modes etc, start with predefined boiler plates, start with previously left line with drafts, supports external, view, edit, share, fork what other developers are making with explore option, dark and light color themes etc for IOS devices, web and more. This text editor has a medium ratings and reviews around 3.6 stars but overall this is a good text editor if you want to use it for web then also you can use it by visiting their site &lt;a href="https://jsitor.com"&gt;https://jsitor.com&lt;/a&gt; . So, I have also used this text editor it is very good and you won't see any ads while using it so if you are interested then you can download it for your IOS devices or use it for web without downloading it.&lt;/p&gt;

&lt;p&gt;And if you liked this post then you can visit &lt;a href="https://all-time-devlopment.blogspot.com"&gt;https://all-time-devlopment.blogspot.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>mobile</category>
      <category>programming</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Authenticate in React with Firebase Auth</title>
      <author>Dylan Muraco</author>
      <pubDate>Tue, 11 Jan 2022 04:57:57 +0000</pubDate>
      <link>https://dev.to/dmuraco3/authenticate-in-react-with-firebase-auth-p3n</link>
      <guid>https://dev.to/dmuraco3/authenticate-in-react-with-firebase-auth-p3n</guid>
      <description>&lt;p&gt;Authentication is something almost every modern web app needs. I've user Auth0 and Next Auth but Firebase seems to provide the easiest way to get authentication up and running.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#registering-a-firebase-app"&gt;
  &lt;/a&gt;
  Registering a Firebase App
&lt;/h2&gt;

&lt;p&gt;Now we need to create a new project in firebase. Navigate to &lt;a href="https://console.firebase.google.com"&gt;Firebase Console&lt;/a&gt; and click &lt;code&gt;Add project&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VvcW8QSg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tcvmdont68dia5oytxta.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VvcW8QSg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tcvmdont68dia5oytxta.png" alt="Image description" width="302" height="218"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After creating this project and you are in the project console click on the Web icon to create a new web app. Follow the directions and copy the config which will look something like this.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IyDVNs87--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jsdgf9ovbqrcbjguf3bf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IyDVNs87--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jsdgf9ovbqrcbjguf3bf.png" alt="Image description" width="390" height="165"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After creating this project navigate to the authentication tab and click &lt;code&gt;Get Started&lt;/code&gt;. Then click &lt;code&gt;Google&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;firebase
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;create a new folders in &lt;code&gt;/src&lt;/code&gt; named &lt;code&gt;/lib/auth&lt;/code&gt;. Inside this auth folder create a file &lt;code&gt;index.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;first lets import what we need and initialize our constants&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;getAuth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;GoogleAuthProvider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;signInWithPopup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onAuthStateChanged&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firebase/auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;initializeApp&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firebase/app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;initializeApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REACT_APP_apiKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;authDomain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REACT_APP_authDomain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;projectId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REACT_APP_projectId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;storageBucket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REACT_APP_storageBucket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;messagingSenderId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REACT_APP_messagingSenderId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;appId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REACT_APP_appId&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getAuth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;googleProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GoogleAuthProvider&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to create a &lt;a href="https://reactjs.org/docs/context.html"&gt;context&lt;/a&gt; provider so that we can access the user object in all components&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-srclibauthindexjs-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;/src/lib/auth/index.js&lt;/code&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AuthProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;onAuthStateChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;UserContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;googleSignIn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;signInWithPopup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;googleProvider&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;onAuthStateChanged&lt;/code&gt; creates an observer for changes to the user's sign-in state.&lt;/p&gt;

&lt;p&gt;Now lets wrap out base level components with this &lt;code&gt;AuthProvider&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-indexjs-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;index.js&lt;/code&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AuthProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;AuthProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally lets create a &lt;code&gt;signInGoogle&lt;/code&gt;, a &lt;code&gt;signOut&lt;/code&gt; and a &lt;code&gt;useAuth&lt;/code&gt; function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useAuth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;UserContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;googleSignIn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;signInWithPopup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;googleProvider&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reason&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;)})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;signOut&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signOut&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reason&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;)})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now in our &lt;code&gt;App.js&lt;/code&gt; we can use these functions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;googleSignIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;signOut&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useAuth&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./lib/auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAuth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;googleSignIn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Sign in with google&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;signOut&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Sign Out&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Full code &lt;a href="https://github.com/dmuraco3/react-firebase-blog"&gt;&lt;code&gt;here&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>firebase</category>
      <category>authentication</category>
    </item>
    <item>
      <title>HtmlCollection vs NodeList in Javascript</title>
      <author>Jima Victor </author>
      <pubDate>Tue, 11 Jan 2022 04:43:32 +0000</pubDate>
      <link>https://dev.to/jimajs/htmlcollection-vs-nodelist-in-javascript-4337</link>
      <guid>https://dev.to/jimajs/htmlcollection-vs-nodelist-in-javascript-4337</guid>
      <description>&lt;p&gt;At some point in your journey as a developer, you might have come across this error.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o9sQh_uf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641872201610/ozp0-5R2S.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o9sQh_uf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641872201610/ozp0-5R2S.png" alt="htmCollectionerror.png" width="625" height="37"&gt;&lt;/a&gt;&lt;br&gt;
If you haven't come across this error, maybe one day you will.&lt;/p&gt;

&lt;p&gt;The above error occurs as a result of trying to use the forEach array method on an htmlCollection.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-an-htmlcollection"&gt;
  &lt;/a&gt;
  What is an htmlCollection
&lt;/h2&gt;

&lt;p&gt;Well, an htmlCollection is a live and ordered list of nodes that represents a collection of HTML elements extracted from the DOM. &lt;/p&gt;

&lt;p&gt;The htmlCollection may seem very much like an array, but it is not. That’s why whenever you try to use array methods like &lt;em&gt;forEach(), push(), or join()&lt;/em&gt; on an htmlCollection, you get different types of errors similar to the one above.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#difference-between-a-nodelist-and-an-htmlcollection"&gt;
  &lt;/a&gt;
  Difference between a nodeList and an htmlCollection
&lt;/h2&gt;

&lt;p&gt;Another collection of objects that happens to be very similar to the htmlCollection, is the nodeList. While they may both be an array-like list of html elements, the htmlCollection is a live list while the nodeList can either be live or static.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#difference-between-live-and-static"&gt;
  &lt;/a&gt;
  Difference between live and static
&lt;/h2&gt;

&lt;p&gt;Being live means that any changes made in the underlying document will be automatically updated in the htmlCollection while being static means that whenever there is a change in the DOM, it doesn’t affect the htmlCollection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The nodeList may not be an array. However, it is possible to iterate through nodeLists using the forEach() method in some browsers.&lt;/p&gt;

&lt;p&gt;In order to prevent the changes made in the DOM from affecting the elements in your htmlCollection, you will first need to convert the htmlCollection into an array.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-convert-an-htmlcollection-into-an-array"&gt;
  &lt;/a&gt;
  How to Convert an htmlCollection into an Array
&lt;/h2&gt;

&lt;p&gt;The following methods are some of the methods in javascript that can be used to convert an htmlCollection into an array:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-arrayfrom"&gt;
  &lt;/a&gt;
  1.  Array.from()
&lt;/h3&gt;

&lt;p&gt;For instance, if we have an htmlCollection as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByClassname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above can easily be converted into an array by using the following syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;arrayOfHeaders&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-spread-operator-"&gt;
  &lt;/a&gt;
  2.  Spread operator (…)
&lt;/h3&gt;

&lt;p&gt;For example:&lt;br&gt;
If we have a method that returns an htmlCollection like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;buttons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByClassname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can make use of the spread operator to input the values of buttons into an array and maybe store them into a variable if you want.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;arrayOfButtons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="nx"&gt;buttons&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-slice-method"&gt;
  &lt;/a&gt;
  3.  Slice() method
&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;slice()&lt;/em&gt; method can be used for converting an htmlCollection by creating a variable for the new array and using the following method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[].&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;classname&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#methods-that-return-a-nodelist"&gt;
  &lt;/a&gt;
  Methods that return a NodeList
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;document.querySelectorAll()&lt;/p&gt;

&lt;p&gt;document.getElementsByName()&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#methods-that-return-an-htmlcollection"&gt;
  &lt;/a&gt;
  Methods that return an htmlCollection
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;document.getElementsByClassName()&lt;/p&gt;

&lt;p&gt;document.getElementsByTagName()&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For a more detailed explanation, you can make reference to the documentation via the links below:&lt;/p&gt;

&lt;p&gt;For nodeList: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/NodeList"&gt;https://developer.mozilla.org/en-US/docs/Web/API/NodeList&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For htmlCollection: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection"&gt;https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My blog --- &lt;a href="https://webcodespace.com/"&gt;https://webcodespace.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>4 Ways to Level-Up Your JS Destructuring and Spread Syntax</title>
      <author>Scott O'Dea</author>
      <pubDate>Tue, 11 Jan 2022 04:29:28 +0000</pubDate>
      <link>https://dev.to/scottodea/4-ways-to-level-up-your-js-destructuring-and-spread-syntax-4eoo</link>
      <guid>https://dev.to/scottodea/4-ways-to-level-up-your-js-destructuring-and-spread-syntax-4eoo</guid>
      <description>&lt;p&gt;If you're a fan of Javascript and reading dev articles, you might share my addiction of clicking on every article with a title &lt;strong&gt;&lt;em&gt;'X number of cool JS tricks'&lt;/em&gt;.&lt;/strong&gt;&lt;br&gt;
 I've probably read 40-50 of them. Most of the ones that I found really handy were to do with destructuring and spread syntax. I thought I'd consolidate the best tips here.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-destructuring-an-array-with-index-numbers"&gt;
  &lt;/a&gt;
  1. Destructuring an array with index numbers
&lt;/h2&gt;

&lt;p&gt;Destructuring is a great way to pull exactly what you need from a data set. However, with arrays it can be frustrating if you need a property a few indexes down the line and don't care about the first few.&lt;/p&gt;

&lt;p&gt;I'm sure you've seen syntax like this before where properties are omitted using commas:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🍎&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🥭&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🍉&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🍋&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[,,,&lt;/span&gt;&lt;span class="nx"&gt;lemon&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lemon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 🍋&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To me this looks messy. A developer has to look at the number of commas to understand which property was taken from the array and if you need grab a few values not next to each other it can become very unwieldy.&lt;/p&gt;

&lt;p&gt;Thankfully, in JS, arrays are really just objects under the hood. The index is the key and the array property is the value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🍎&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🥭&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🍉&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🍋&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;// {0: '🍎', 1: '🥭', 2: '🍉', 3: '🍋'}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What this means is we can use object destructuring on our array. We can use the index of the property we want to access to pull it from the array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🍎&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🥭&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🍉&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🍋&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lemon&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lemon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 🍋&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now a developer can see exactly which property you took by checking the index. Also if you need multiple values that are not neighbours there's no need to awkwardly count the amount of commas that should be between them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-filtering-with-spread-and-destructure"&gt;
  &lt;/a&gt;
  2. Filtering with spread and destructure
&lt;/h2&gt;

&lt;p&gt;Removing properties from an object can be pretty straightforward. Simply use the &lt;code&gt;delete&lt;/code&gt; keyword and you're on your way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;food&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;watermelon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🍉&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;apple&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🍎&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;mango&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🥭&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;fries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;🍟&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fries&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// {watermelon: '🍉', apple: '🍎', mango: '🥭'}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is fine if you're happy with your object being mutated.&lt;br&gt;
However, objects can be passed around into different functions and accessed in several places, so suddenly removing a property could cause issues. &lt;br&gt;
  For this reason it's usually a safer idea to leave your initial object intact and create a new one for your filtering.&lt;/p&gt;

&lt;p&gt;We can achieve this by using destructuring to separate the unwanted property or properties from the rest of the object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;food&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;watermelon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🍉&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;apple&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🍎&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;mango&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🥭&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;fries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;🍟&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;food&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// { watermelon: '🍉', apple: '🍎', mango: '🥭' }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that compared with mutating the original object, we now have a new object with a suitable name to indicate more clearly what the object now contains.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;One caveat with this method is linters may underline the property you're removing (in this case &lt;code&gt;fries&lt;/code&gt;) as the variable won't be referenced anywhere.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-optional-object-building"&gt;
  &lt;/a&gt;
  3. Optional Object Building
&lt;/h2&gt;

&lt;p&gt;Sometimes we want to build an object conditionally. I usually find myself in such a predicament when I need to send data to an api. An api request could need different parameters depending on the state the application is in.&lt;/p&gt;

&lt;p&gt;One approach might be to use some &lt;code&gt;if&lt;/code&gt; statements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pageNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pageNumber&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://endpoint.com/data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This works fine, but can get bloated quickly. I also personally prefer to instantiate the object with the properties it needs from the get-go.&lt;/p&gt;

&lt;p&gt;We can achieve this by taking advantage of the fact that falsey values will be ignored when spread into an object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;131&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// { id: 131 }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So to conditionally add properties we need to check the property isn't falsely and if so add it to our object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;131&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...(&lt;/span&gt;&lt;span class="nx"&gt;pageNumber&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pageNumber&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Page number falsey value&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// { id: 131 }&lt;/span&gt;

&lt;span class="c1"&gt;// Page number truthy value&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// { id: 131, pageNumber: 2 }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So breaking this down, we start with the spread syntax for our conditional property. We then add parentheses to allow us to group our short circuit logic. &lt;/p&gt;

&lt;p&gt;If pageNumber is a falsey value the logical &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; will exit with a falsey value which won't add anything to our object when spread.&lt;/p&gt;

&lt;p&gt;If pageNumber is truthy however, the short-circuit logic will return the property we want to add and spread it into our object.&lt;/p&gt;

&lt;p&gt;So refactoring the api example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;...(&lt;/span&gt;&lt;span class="nx"&gt;pageNumber&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;pageNumber&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://endpoint.com/data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To me this is much nicer. We've avoided instantiating an empty object at the beginning like with the &lt;code&gt;if&lt;/code&gt; statement example and all possible params that might be sent to the api can be seen directly on the object rather than combing through the &lt;code&gt;if&lt;/code&gt; statements for possibilities.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-destructuring-length-from-array"&gt;
  &lt;/a&gt;
  4. Destructuring length from array
&lt;/h2&gt;

&lt;p&gt;Relating to the first tip, you can take it a step further by destructuring the length of an array. &lt;br&gt;
  You might ask how this is useful, but say you needed the last element of a huge dynamic array. You couldn't destructure this last element with either the comma method or the index method, as the last element would be a different index as data was added. So you could use the length property to grab the last element when destructuring.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bigDynamicArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;✌&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;😂&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;😝&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;😁&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;😱&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;👉&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🙌&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🍻&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🔥&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🌈&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;☀&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🎈&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🌹&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;💄&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🎀&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;⚽&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🎾&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🏁&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;😡&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;👿&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🐻&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🐶&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🐬&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🐟&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🍀&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;👀&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🚗&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🍎&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;💝&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;💙&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;👌&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;❤&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;😍&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;😉&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;😓&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;😳&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;💪&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;💩&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🍸&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🔑&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;💖&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🌟&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🎉&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🌺&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🎶&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;👠&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;lastItem&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bigDynamicArray&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lastItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 👠&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So first we pull out the length. We then use a computed property name to access correct index and finally give a name to our last item.&lt;/p&gt;

&lt;p&gt;I will add this tip is approaching the territory of too clever for its own good. You don't want to burden other developers with understanding some abstract functionality for what could have be a rudimentary, yet simple to understand piece of code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thanks for reading let me know if there's anything I missed or if you have some better tips and happy JS'ing!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>programming</category>
    </item>
    <item>
      <title>RippleX releases XLS-20 dev network: NFT-Devnet</title>
      <author>Nik Bougalis</author>
      <pubDate>Tue, 11 Jan 2022 03:23:48 +0000</pubDate>
      <link>https://dev.to/ripplexdev/ripplex-releases-xls-20-dev-network-nft-devnet-20fa</link>
      <guid>https://dev.to/ripplexdev/ripplex-releases-xls-20-dev-network-nft-devnet-20fa</guid>
      <description>&lt;p&gt;In May, RippleX invited the developer community to provide feedback on our &lt;a href="https://github.com/XRPLF/XRPL-Standards/discussions/46"&gt;proposal&lt;/a&gt; to enhance NFT support on the &lt;a href="https://xrpl.org/"&gt;XRP Ledger (XRPL)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We believe crypto and blockchain are powerful levelers in unlocking access and equity for everyone. The rapid rise and growth of non-fungible tokens – or NFTs – is key to that vision. On track to &lt;a href="https://cointelegraph.com/news/nft-sales-aim-for-a-17-7b-record-in-2021-report-by-cointelegraph-research"&gt;surpass $17B&lt;/a&gt; in global sales by the end of this year, it’s clear that NFTs are here to stay with many in the industry already building toward a tokenized future that allows new business models to prosper and people to engage more deeply with the communities and things they care most about.&lt;/p&gt;

&lt;p&gt;Today the NFT-Devnet is available, making it possible for all developers to &lt;a href="https://xrpl.org/nft-conceptual-overview.html"&gt;learn&lt;/a&gt; about and experiment with the native NFT capabilities introduced with XLS-20d. Developers are welcome to start building apps and tokenization use cases, as well as visit the &lt;a href="http://xrpl.org/nftoken-tester-tutorial.html"&gt;Technical Tutorial&lt;/a&gt; page to get started.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The NFT-Devnet: Getting Started with NFTs on XRPL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Non-fungible tokens serve to encode ownership of physical, non-physical or purely digital goods, such as works of art and in-game items.&lt;/p&gt;

&lt;p&gt;The XLS-20d proposal introduces extensions to the XRP Ledger that would support a native NFT type, along with operations to enumerate, transfer and hold such tokens. With XLS-20d &lt;a href="https://xrpl.org/nft-conceptual-overview.html"&gt;live on XLS-20 Sandbox&lt;/a&gt; today, developers can access all essential NFT functionality including minting, trading, and burning. Moreover, advanced features like automatic royalties, which enable more sophisticated royalty structures for creators, and co-ownership, which expands access possibilities to assets, are also built into the proposal.&lt;/p&gt;

&lt;p&gt;The NFT-Devnet is a beta environment where developers can preview, test and experiment with XLS-20d on XRPL before it is enabled on the Mainnet.&lt;/p&gt;

&lt;p&gt;As this is the first time developers can mint native NFTs on the XRP Ledger, an interactive Technical Tutorial in the documentation on xrpl.org can help them get started. We also encourage developers building NFT projects – or wanting to get started with NFTs – to apply to the &lt;a href="https://xrplgrants.org/"&gt;XRPL Grants&lt;/a&gt; program.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Community Spotlight: Carbonland Trust&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;RippleX is just one contributor to the XRPL – there’s a whole community of independent developers building on it today for its inherent performance advantages and tokenization capabilities. One such project is &lt;a href="https://www.carbonlandtrust.com/"&gt;Carbonland Trust&lt;/a&gt;, which is pushing the boundaries for potential NFT uses.&lt;/p&gt;

&lt;p&gt;Earlier this year, Ripple launched the XRPL Grants program – an initiative to engage, fund and support the independent developer community and their technical projects built on the XRP Ledger. Carbonland Trust is one of more than 20 projects to receive funding through the program, focused on protecting forest land with their CO2 Removal Bonded NFTs and Conservation Certificates. The project centers on creating the first CO2 Removal Credit Yielding NFT, a carbon credit producing digital asset and forest conservation DeFi protocol. In addition, the project includes CO2 Bonds which offer businesses and individuals a better way to remove CO2, hedge against rising carbon credit prices, and lock in a stable, long-term supply of high-quality offsets.&lt;/p&gt;

&lt;p&gt;Carbonland Trust is one of many projects funded through the XRPL Grants program that will build on the XRPL XLS-20 Sandbox environment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Experimenting on the NFT-Devnet&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We’re excited to bring our proposal for NFT capabilities to life on the NFT-Devnet, a test network with feature-functionality that will look exactly like the primary Devnet. This is a first step toward &lt;a href="https://ripple.com/insights/building-a-more-sustainable-scalable-and-accessible-future-for-nfts-with-xrpl/#"&gt;our vision&lt;/a&gt; of enabling developers to build apps that leverage the XRP Ledger’s native &lt;a href="https://xrpl.org/issued-currencies-overview.html"&gt;tokenization capabilities&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While the RippleX team is excited to contribute to NFT technology on the XRP Ledger, our engineers–along with others in the community–are also contributing to its stability and scalability. As such, XLS-20d will initially be released on the NFT-Devnet in order to allow developers to test NFT capabilities, and server operators to understand the performance characteristics and implications of the proposed changes without compromising the performance of the XRPL.&lt;/p&gt;

&lt;p&gt;Following today’s release, we invite the XRPL developer community to visit the &lt;a href="http://xrpl.org/nftoken-tester-tutorial.html"&gt;Technical Tutorial&lt;/a&gt; page. Feel free to comment and/or ask your questions below.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Using Docker Run inside of GitHub actions</title>
      <author>Andrew Schmelyun</author>
      <pubDate>Tue, 11 Jan 2022 03:03:18 +0000</pubDate>
      <link>https://dev.to/aschmelyun/using-docker-run-inside-of-github-actions-4gdk</link>
      <guid>https://dev.to/aschmelyun/using-docker-run-inside-of-github-actions-4gdk</guid>
      <description>&lt;p&gt;Recently I decided to take on the task of automating my site's build and deployment process through &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt;. I'm using my own static site generator &lt;a href="https://github.com/aschmelyun/cleaver"&gt;Cleaver&lt;/a&gt; to handle that, which requires both Node + PHP to be installed in order to run the asset compilation and build process. Now, GitHub Actions &lt;em&gt;supports&lt;/em&gt; both of those runtimes out of the box, but I had just created a perfectly good &lt;a href="https://github.com/aschmelyun/cleaver-docker"&gt;Docker image&lt;/a&gt; for using Cleaver, and instead wanted to use that.&lt;/p&gt;

&lt;p&gt;Ultimately it was a mixture of just wanting the fine-grain control that a single Docker image provides, and because, well &lt;strong&gt;I just wanted to see how to do it!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-didnt-work"&gt;
  &lt;/a&gt;
  What Didn't Work
&lt;/h2&gt;

&lt;p&gt;So, you're able to actually use Docker images in GitHub actions, but by default you're only able to use them one of two ways.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;compile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Compile site assets&lt;/span&gt;
        &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
        &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aschmelyun/cleaver:latest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This first option is as the base for an entire job. Normally a lot of GitHub actions have you start off with an Ubuntu distro as the base for the VM (there are other OS's you can choose from as well) and then add in your container image. But the entire rest of the job uses &lt;em&gt;whatever container you specify&lt;/em&gt; as the starting point for &lt;strong&gt;all&lt;/strong&gt; of the rest of the job's steps.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;compile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Compile site assets&lt;/span&gt;
        &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
        &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run the build process with Docker&lt;/span&gt;
            &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker://aschmelyun/cleaver&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This second option is as an action in the steps for a job. Instead of something like &lt;code&gt;uses: actions/checkout@v2&lt;/code&gt;, you can instead specify a Docker image from the hub to run in its place. The problem with this one though is that you have to generate a Docker image that runs &lt;strong&gt;specifically like a GitHub action expects&lt;/strong&gt;. That means things like avoiding &lt;code&gt;WORKDIR&lt;/code&gt; and &lt;code&gt;ENTRYPOINT&lt;/code&gt; attributes, as they're handled internally by the GitHub Actions worker.&lt;/p&gt;

&lt;p&gt;What I wanted was simply to be able to use &lt;code&gt;docker run ...&lt;/code&gt; under a &lt;em&gt;single&lt;/em&gt; action in a job.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-worked"&gt;
  &lt;/a&gt;
  What Worked
&lt;/h2&gt;

&lt;p&gt;I ended up finding an action available on GitHub by &lt;strong&gt;addnab&lt;/strong&gt; called &lt;a href="https://github.com/addnab/docker-run-action"&gt;docker-run-action&lt;/a&gt; that works exactly how I wanted. You specify an image, any options, and a list of commands to run with it, and only during that step of the build process is it used.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;compile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Compile site assets&lt;/span&gt;
        &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
        &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Check out the repo&lt;/span&gt;
            &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run the build process with Docker&lt;/span&gt;
            &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;addnab/docker-run-action@v3&lt;/span&gt;
            &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aschmelyun/cleaver:latest&lt;/span&gt;
                &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;-v ${{ github.workspace }}:/var/www&lt;/span&gt;
                &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
                    &lt;span class="s"&gt;composer install&lt;/span&gt;
                    &lt;span class="s"&gt;npm install&lt;/span&gt;
                    &lt;span class="s"&gt;npm run production&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let me break down what each of these lines does:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aschmelyun/cleaver:latest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This one is pretty obvious, it specifies the image that's pulled and used in the docker run command. I'm using mine for Cleaver that's on the public &lt;a href="https://hub.docker.com/r/aschmelyun/cleaver"&gt;Docker Hub&lt;/a&gt;, but you can also use a privately-owned image as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;-v ${{ github.workspace }}:/var/www&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here I'm creating a bind mount from the current workspace to &lt;code&gt;/var/www&lt;/code&gt;, which is the working directory that my Docker image expects. &lt;code&gt;github.workspace&lt;/code&gt; includes all of the code checked out from our current repo, and I'm mounting that whole directory as that's what my build process expects. Because I'm using a bind mount, &lt;strong&gt;anything done to this code will then be available to GitHub Actions&lt;/strong&gt; in any following step (like a deployment).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
    &lt;span class="s"&gt;composer install&lt;/span&gt;
    &lt;span class="s"&gt;npm install&lt;/span&gt;
    &lt;span class="s"&gt;npm run production&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is where I specify the actual commands I want to run against my container image. This action &lt;strong&gt;ignores the entrypoint of the container image&lt;/strong&gt;, so even though normally using &lt;code&gt;docker run aschmelyun/cleaver:latest&lt;/code&gt; it would run those three commands, using this action I have to actually specify them out again in the yaml. &lt;/p&gt;

&lt;p&gt;Once they complete, GitHub should now have a new &lt;code&gt;dist&lt;/code&gt; folder in the workspace containing the compiled site assets that can then be deployed out to a production server. Once the job finishes up, that's removed and is never committed to the repo or accessible to a separate job.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Sometimes during a CI/CD process it's helpful to use a ready-made Docker image to run one-off commands and processes. This could be especially helpful if the software you need isn't available on the actions platform, or requires a lengthy setup process that's already written out in a Dockerfile.&lt;/p&gt;

&lt;p&gt;If you have any questions about anything in this article, or if you'd like to get more smaller pieces of regular content regarding Docker and other web dev stuff, feel free to follow or reach out to me on &lt;a href="https://twitter.com/aschmelyun"&gt;Twitter&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>docker</category>
      <category>devops</category>
    </item>
    <item>
      <title>Develop a social network with ReactJS, Spring Boot and MongoDB</title>
      <author>Linh Truong Cong Hong</author>
      <pubDate>Tue, 11 Jan 2022 02:31:53 +0000</pubDate>
      <link>https://dev.to/linhtch90/develop-a-social-network-with-reactjs-spring-boot-and-mongodb-24l8</link>
      <guid>https://dev.to/linhtch90/develop-a-social-network-with-reactjs-spring-boot-and-mongodb-24l8</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K_w9vPAg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pid63yxzxjnyypgsi3r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K_w9vPAg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pid63yxzxjnyypgsi3r.png" alt="Image description" width="880" height="1265"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have developed a small social network web app for educational purpose and want to share this with the community. This app is built with ReactJS for frontend, Java Spring Boot for backend and MongoDB as the database.&lt;/p&gt;

&lt;p&gt;The app tries to mimic a few functions of Twitter, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create post with text and image&lt;/li&gt;
&lt;li&gt;The number of characters in each post is limited to 200 characters&lt;/li&gt;
&lt;li&gt;Like, comment and re-post a post&lt;/li&gt;
&lt;li&gt;View the number of likes, comments and shares of a post&lt;/li&gt;
&lt;li&gt;Comments are toggle&lt;/li&gt;
&lt;li&gt;The number of character in each comment is limited to 100 characters&lt;/li&gt;
&lt;li&gt;Follow, un-follow someone&lt;/li&gt;
&lt;li&gt;See who are following us and follow them back&lt;/li&gt;
&lt;li&gt;Check who we are following&lt;/li&gt;
&lt;li&gt;View all posts of an individual&lt;/li&gt;
&lt;li&gt;View our own posts&lt;/li&gt;
&lt;li&gt;List all user accounts in the entire social network (due to the number of users are still small, I did not develop search user function)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Due to limited storage space, client app compresses the uploaded image to the maximum of 250px (width or height) &lt;/li&gt;
&lt;li&gt;User avatar is created by hashing user id and convert that hash code into a hexagonal image&lt;/li&gt;
&lt;li&gt;Authentication and authorization use JWT&lt;/li&gt;
&lt;li&gt;Responsive frontend for desktop and mobile devices&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Technical stack:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Frontend: ReactJS, Redux Toolkit, React Router, React Bootstrap&lt;/li&gt;
&lt;li&gt;Backend: Java Spring Boot&lt;/li&gt;
&lt;li&gt;Database: MongoDB&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope you enjoy it and if this project is useful for you , please give me a ⭐ &lt;strong&gt;Github star&lt;/strong&gt; ⭐ for my effort!&lt;/p&gt;

&lt;p&gt;Source Code:&lt;br&gt;
&lt;a href="https://github.com/linhtch90/psn-social-network-public-source"&gt;https://github.com/linhtch90/psn-social-network-public-source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Live Demo:&lt;br&gt;
&lt;a href="https://psn-social-network.herokuapp.com/#/"&gt;https://psn-social-network.herokuapp.com/#/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
