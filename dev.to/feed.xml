<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to set up an index alias that points to multiple indices in Elasticsearch</title>
      <author>Jeiman Jeya</author>
      <pubDate>Wed, 11 Aug 2021 15:19:30 +0000</pubDate>
      <link>https://dev.to/jeiman/how-to-set-up-an-index-alias-that-points-to-multiple-indices-in-elasticsearch-4g7g</link>
      <guid>https://dev.to/jeiman/how-to-set-up-an-index-alias-that-points-to-multiple-indices-in-elasticsearch-4g7g</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0_DOukwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uim9qc5k8087lhz2sf04.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0_DOukwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uim9qc5k8087lhz2sf04.png" alt="Index alias"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Index aliasing&lt;/strong&gt; is a powerful feature in Elasticsearch that gives us the ability to control the indices. One could create as many indices as possible and use an alias to point to the right index or one can point the index alias to all indices, depending on your application needs. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scenarios"&gt;
  &lt;/a&gt;
  Scenarios
&lt;/h2&gt;

&lt;p&gt;Imagine if you had the following scenarios when working with Elasticsearch for your application needs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Scenario&lt;/strong&gt; &lt;strong&gt;1&lt;/strong&gt;: A snapshot of your index that needs to be restored to a new cluster, however, you forgot to restore it, and instead, you created a new index. As time passed, you realised that new data had amassed in the newly created index and you needed to combine the data from the snapshot with the new index.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Scenario 2&lt;/strong&gt;: You have an index that requires certain schema changes or re-indexing. To be able to ensure your users are able to search from your instance with almost no downtime, set up a new index with new schema changes and re-index the data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Introducing &lt;strong&gt;multi-index aliasing&lt;/strong&gt;. You can create a single index alias that points to multiple indices. There's an endpoint from Elasticsearch that allows you to perform one or more alias actions in a single atomic operation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Verify if the alias you'd like to use has not been used yet by using the &lt;code&gt;_alias/alias-name&lt;/code&gt; endpoint - &lt;code&gt;HEAD _alias/my-alias&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;If it returns a 404, it means the alias is available and can be used in setting up the multi-index aliasing&lt;/li&gt;
&lt;li&gt;If it returns a 200, it means it's being used and you need to choose another alias&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Verify your indices are readily available within your cluster/instance.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Ensure that your old snapshot is ready (if you don't have your secondary index setup).&lt;/li&gt;
&lt;li&gt;When you do restore the snapshot index, ensure that the index name is different than the newly created to avoid conflicts.

&lt;ul&gt;
&lt;li&gt;Clone the index from the old snapshot/cluster if you have to&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Run the following POST request to your designated cluster:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;POST&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;_aliases&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;actions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;add&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;index&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;new_index&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;alias&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;new_index_alias&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;add&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;index&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;old_index&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;alias&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;new_index_alias&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#but-wait-what-if-i-want-to-specify-the-new-data-is-written-to-a-specific-index"&gt;
  &lt;/a&gt;
  But wait, what if I want to specify the new data is written to a specific index?
&lt;/h3&gt;

&lt;p&gt;You can pass in the &lt;code&gt;**is_write_index**&lt;/code&gt; parameter in the payload as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;POST&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;_aliases&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;actions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;add&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;index&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;new_index&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;alias&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;new_index_alias&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;is_write_index&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;add&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;index&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;old_index&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;alias&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;new_index_alias&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, it's fairly straightforward to set up an index alias that points to multiple indices within your Elasticsearch instance.&lt;/p&gt;

&lt;p&gt;If you want to query data from the alias, simply perform the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;GET&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;new_index_alias&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;_search&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This would help you query across two indices &lt;code&gt;new_index&lt;/code&gt; and &lt;code&gt;old_index&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits"&gt;
  &lt;/a&gt;
  Benefits
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Zero downtime:&lt;/strong&gt; Bring up a new index with new changes, point alias to new index when it's ready. Keep the old index stale, in case it's needed for future reference or just as a backup.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Multiple Indices:&lt;/strong&gt; We want to be able to query multiple indices? Then create an alias that points to multiple indices.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html"&gt;https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-alias-exists.html"&gt;https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-alias-exists.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>elasticsearch</category>
      <category>elasticcloud</category>
      <category>index</category>
      <category>alias</category>
    </item>
    <item>
      <title>9 Amazing Things To Do With Python</title>
      <author>Mr. Unity Buddy</author>
      <pubDate>Wed, 11 Aug 2021 15:15:08 +0000</pubDate>
      <link>https://dev.to/unitybuddy/9-amazing-things-to-do-with-python-1ln5</link>
      <guid>https://dev.to/unitybuddy/9-amazing-things-to-do-with-python-1ln5</guid>
      <description>&lt;p&gt;Hello, buddies! We love python, right? So today we're going to see some amazing things that can be done with python(you may not know them). Interesting? Let's start! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-google-search-with-python"&gt;
  &lt;/a&gt;
  1. Google Search with Python
&lt;/h2&gt;

&lt;p&gt;Sometimes we get so much into programming that we feel lazy enough to open the browser and search our queries. But with the amazing python library &lt;code&gt;google&lt;/code&gt;, we can search our queries by just writing 3 lines of code without manually opening the browser and searching our query on it.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;To install,&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;pip install google
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Code,&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#import library 
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;googlesearch&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;
&lt;span class="c1"&gt;#write your query
&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"best course for python"&lt;/span&gt;
&lt;span class="c1"&gt;# displaying 10 results from the search
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tld&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"co.in"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pause&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#you will notice the 10 search results(website links) in the output.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-downloading-instagram-posts-and-profile-picture"&gt;
  &lt;/a&gt;
  2.  Downloading Instagram Posts and profile picture
&lt;/h2&gt;

&lt;p&gt;We all come across some wonderful posts on Instagram and want to save them offline on our devices. But the app provides posts to be saved online for later and not offline. This can be done with the amazing python library &lt;code&gt;instaloader&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To install library,&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;pip install instaloader
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Code,&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#to download all the posts of a profile 
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;instaloader&lt;/span&gt;
&lt;span class="c1"&gt;#creating object
&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;instaloader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Instaloader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;#sepcifying the profile name
&lt;/span&gt;&lt;span class="n"&gt;profile_Name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'enter the instagram_handle'&lt;/span&gt;
&lt;span class="c1"&gt;#do profile_pic_only = True, to download the profile picture
&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;download_profile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;profile_Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;profile_pic_only&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#you will notice a folder of this profile's name, under which all the posts will get downloaded
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-extracting-audio-from-the-video-files"&gt;
  &lt;/a&gt;
  3.  Extracting audio from the video files
&lt;/h2&gt;

&lt;p&gt;There are certain situations when we have the mp4 file but we only need the audio from it. Like making a video with audio of another video. We struggle enough to get the same audio file, but we fail and unfortunately, we decide to choose the other music file. This problem is solved with the python library &lt;code&gt;moviepy&lt;/code&gt;, as we can extract the audio from the video files through this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To install library,&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;pip install moviepy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Code,&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#import library 
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;moviepy.editor&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;mp&lt;/span&gt; 
&lt;span class="c1"&gt;#specify the mp4 file here(mention the file path if it is in different directory)
&lt;/span&gt;&lt;span class="n"&gt;clip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VideoFileClip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'video.mp4'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#specify the name for mp3 extracted
&lt;/span&gt;&lt;span class="n"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write_audiofile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Audio.mp3'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#you will notice mp3 file will be created at the specified location.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-url-shortener"&gt;
  &lt;/a&gt;
  4. URL Shortener
&lt;/h2&gt;

&lt;p&gt;Dealing with long URLs is a hectic task when you have to regularly work with them. There comes the idea of URL Shorteners(such as bit.ly and tinyurl). These services shorten the URL to below 50 characters. We can create our own URL shortener with the help of the python library &lt;code&gt;pyshorteners&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To install library,&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;pip install pyshorteners
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Code,&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#import library 
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pyshorteners&lt;/span&gt;
&lt;span class="c1"&gt;#creating object
&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pyshorteners&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Shortener&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;#type the url
&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"type the youtube link here"&lt;/span&gt;
&lt;span class="c1"&gt;#print the shortend url
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tinyurl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;short&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-image-to-pdf-convertor"&gt;
  &lt;/a&gt;
  5. Image to PDF Convertor
&lt;/h2&gt;

&lt;p&gt;Sometimes we have our notes or documents as photographs, and it becomes difficult to study in that manner. We might follow the wrong sequence and things become confusing and annoying.  To solve this problem one idea is to collect all the images and then convert them into a pdf file. This can be done with the python library &lt;code&gt;img2pdf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To install library,&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;pip install img2pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Code,&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#import libraries
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;img2pdf&lt;/span&gt;
&lt;span class="c1"&gt;#specify the name for pdf file
&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"converted.pdf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"wb"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;#collect all the images in a single folder and specify its location
&lt;/span&gt;    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img2pdf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;\&lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".jpg"&lt;/span&gt;&lt;span class="p"&gt;)]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#6-plagiarism-detector"&gt;
  &lt;/a&gt;
  6. Plagiarism detector
&lt;/h2&gt;

&lt;p&gt;One of the most important factors for dealing with content writing is Plagiarism. It’s not even possible to check the files manually when they are in bundles. There comes the need for the Plagiarism detector tool. We can also create our own plagiarism detector with the help of the  python library &lt;code&gt;difflib&lt;/code&gt;. It can be used to check similarities between two or more files on a device.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To install library,&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;pip install difflib
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Code,&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#import the required library
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;difflib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SequenceMatcher&lt;/span&gt;
   &lt;span class="c1"&gt;#opening two text files
&lt;/span&gt;   &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'file_one.txt'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;file_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'file_two.txt'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;file_2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
        &lt;span class="c1"&gt;#read the files in another variables
&lt;/span&gt;        &lt;span class="n"&gt;file1_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file_1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
        &lt;span class="n"&gt;file2_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file_2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
        &lt;span class="c1"&gt;#since we have taken two files for detecting plagiarism, we mention two them here
&lt;/span&gt;        &lt;span class="n"&gt;similarity_ratio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SequenceMatcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;file1_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;file2_data&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;ratio&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
        &lt;span class="c1"&gt;#print the plagiarsim ratio
&lt;/span&gt;        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;similarity_ratio&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#7-language-translator"&gt;
  &lt;/a&gt;
  7. Language Translator
&lt;/h2&gt;

&lt;p&gt;We live in a world of multilingual people. Therefore to understand each other’s language, we need a language translator, since we cannot learn these many languages. We can create our own language translator with the help of the python library &lt;code&gt;Translator&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To install library,&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;pip install translate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Code,&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#import the library 
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;translate&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Translator&lt;/span&gt;
&lt;span class="c1"&gt;#specifying the language 
&lt;/span&gt;&lt;span class="n"&gt;translator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Translator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Hindi"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#typing the message
&lt;/span&gt;&lt;span class="n"&gt;translation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;translator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Hello!!! Welcome to my class'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#print the translated message
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;translation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#8-qr-code-generator"&gt;
  &lt;/a&gt;
  8. QR code generator
&lt;/h2&gt;

&lt;p&gt;We see QR(Quick Response) code often in our day-to-day life. A very quick example is payment apps, where QR code saves a lot of user’s time. We can also create our unique QR code for website or profiles with the python library &lt;code&gt;qrcode&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To install library,&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;pip install qrcode
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Code,&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#import the library
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;qrcode&lt;/span&gt;
&lt;span class="c1"&gt;#link to the website
&lt;/span&gt;&lt;span class="n"&gt;input_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://car-price-prediction-project.herokuapp.com/"&lt;/span&gt;
&lt;span class="c1"&gt;#Creating object
#version: defines size of image from integer(1 to 40), box_size = size of each box in pixels, border = thickness of the border.
&lt;/span&gt;&lt;span class="n"&gt;qr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;qrcode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QRCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;box_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;border&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#add_date :  pass the input text
&lt;/span&gt;&lt;span class="n"&gt;qr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#converting into image
&lt;/span&gt;&lt;span class="n"&gt;qr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#specify the foreground and background color for the img 
&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;qr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'black'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;back_color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'white'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#store the image
&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'qrcode_img.png'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#9-download-youtube-videos"&gt;
  &lt;/a&gt;
  9. Download Youtube videos
&lt;/h2&gt;

&lt;p&gt;We all see some of the useful content on youtube whether it be educational or for entertainment purposes. This platform doesn’t charge us and it’s available free to watch an unlimited wide variety of videos. The only problem arises when we want to download these videos for the future. Here is a cool python library &lt;code&gt;pytube&lt;/code&gt; which supports downloading.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To install library,&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;pip install pytube
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Code,&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#import the library 
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pytube&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;YouTube&lt;/span&gt;
&lt;span class="c1"&gt;#ask user to type in the link 
&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter the link of youtube video:  "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#creating an object
&lt;/span&gt;&lt;span class="n"&gt;yt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;YouTube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#to get the highest resolution
&lt;/span&gt;&lt;span class="n"&gt;ys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;streams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_highest_resolution&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;#show the message until downloading
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Downloading..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#specifying the location for this video 
&lt;/span&gt;&lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Downloads\python"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#show the message when download is completed
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Download completed!!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or else, you can try &lt;a href="https://blog.codekaro.info/download-youtube-videos-using-python-your-own-youtube-downloader"&gt;this article's&lt;/a&gt; method by @&lt;a href="https://dev.to@codekaro"&gt;Siddharth Chandra&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So buddies, that's for now. Thanks for reading and Happy Coding!&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Finding and fixing memory leaks in Go</title>
      <author>Tyler Bui-Palsulich</author>
      <pubDate>Wed, 11 Aug 2021 15:05:22 +0000</pubDate>
      <link>https://dev.to/googlecloud/finding-and-fixing-memory-leaks-in-go-1k1h</link>
      <guid>https://dev.to/googlecloud/finding-and-fixing-memory-leaks-in-go-1k1h</guid>
      <description>&lt;p&gt;This post reviews how I found a memory leak, how I fixed it, how I fixed similar issues in Google's sample Go code, and how we're improving our libraries to prevent this in the future.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/googleapis/google-cloud-go"&gt;Google Cloud Client Libraries for Go&lt;/a&gt; generally use gRPC under the hood to connect with Google Cloud APIs. When you create an API client, the library initializes a connection to the API then leaves that connection open until you call &lt;code&gt;Close&lt;/code&gt; on the &lt;code&gt;Client&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;// Check err.&lt;/span&gt;
&lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Clients are safe to use concurrently, so you should keep the same &lt;code&gt;Client&lt;/code&gt; around until you're done with it. But, what happens if you don't &lt;code&gt;Close&lt;/code&gt; the client when you should?&lt;/p&gt;

&lt;p&gt;You get a memory leak. The underlying connections never get cleaned up.&lt;/p&gt;




&lt;p&gt;Google has a bunch of GitHub automation bots to help manage hundreds of GitHub repos. Some of our bots proxy their requests through a &lt;a href="https://github.com/googleapis/repo-automation-bots/tree/main/serverless-scheduler-proxy"&gt;Go server&lt;/a&gt; running on &lt;a href="https://cloud.google.com/run/docs/quickstarts/build-and-deploy/go"&gt;Cloud Run&lt;/a&gt;. Our memory usage looked like a classic sawtooth memory leak:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x0EN9AfL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dmpo6x8cky6t9dsqsex.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x0EN9AfL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dmpo6x8cky6t9dsqsex.png" alt='"Container memory utilization" chart showing a series of steady increases followed by steep drops to 0.'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I started debugging by adding the &lt;code&gt;pprof.Index&lt;/code&gt; handler to the server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;mux&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/debug/pprof/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pprof&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://pkg.go.dev/net/http/pprof"&gt;&lt;code&gt;pprof&lt;/code&gt;&lt;/a&gt; provides runtime profiling data, like memory usage. See &lt;a href="https://blog.golang.org/pprof"&gt;Profiling Go Programs&lt;/a&gt; on the Go Blog for more information.&lt;/p&gt;

&lt;p&gt;Then, I built and started the server locally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go build
$ PROJECT_ID=my-project PORT=8080 ./serverless-scheduler-proxy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, I sent a some requests requests to the server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for i in {1..5}; do
curl --header "Content-Type: application/json" --request POST --data '{"name": "HelloHTTP", "type": "testing", "location": "us-central1"}' localhost:8080/v0/cron
echo " -- $i"
done
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The exact payload and endpoint is specific to our server and is irrelevant for this post.&lt;/p&gt;

&lt;p&gt;To get a baseline for what memory is being used, I collected some initial &lt;code&gt;pprof&lt;/code&gt; data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl http://localhost:8080/debug/pprof/heap &amp;gt; heap.0.pprof
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inspecting the output, you can see some memory usage, but nothing immediately stands out as a large issue (which is good! We just started the server!):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go tool pprof heap.0.pprof
File: serverless-scheduler-proxy
Type: inuse_space
Time: May 4, 2021 at 9:33am (EDT)
Entering interactive mode (type "help" for commands, "o" for options)
(pprof) top10
Showing nodes accounting for 2129.67kB, 100% of 2129.67kB total
Showing top 10 nodes out of 30
      flat  flat%   sum%        cum   cum%
 1089.33kB 51.15% 51.15%  1089.33kB 51.15%  google.golang.org/grpc/internal/transport.newBufWriter (inline)
  528.17kB 24.80% 75.95%   528.17kB 24.80%  bufio.NewReaderSize (inline)
  512.17kB 24.05%   100%   512.17kB 24.05%  google.golang.org/grpc/metadata.Join
         0     0%   100%   512.17kB 24.05%  cloud.google.com/go/secretmanager/apiv1.(*Client).AccessSecretVersion
         0     0%   100%   512.17kB 24.05%  cloud.google.com/go/secretmanager/apiv1.(*Client).AccessSecretVersion.func1
         0     0%   100%   512.17kB 24.05%  github.com/googleapis/gax-go/v2.Invoke
         0     0%   100%   512.17kB 24.05%  github.com/googleapis/gax-go/v2.invoke
         0     0%   100%   512.17kB 24.05%  google.golang.org/genproto/googleapis/cloud/secretmanager/v1.(*secretManagerServiceClient).AccessSecretVersion
         0     0%   100%   512.17kB 24.05%  google.golang.org/grpc.(*ClientConn).Invoke
         0     0%   100%  1617.50kB 75.95%  google.golang.org/grpc.(*addrConn).createTransport
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step was sending a bunch of requests to the server and seeing if we could (1) reproduce the seeming memory leak and (2) identify what the leak is.&lt;/p&gt;

&lt;p&gt;Sending 500 requests:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for i in {1..500}; do
curl --header "Content-Type: application/json" --request POST --data '{"name": "HelloHTTP", "type": "testing", "location": "us-central1"}' localhost:8080/v0/cron
echo " -- $i"
done
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Collecting and analyzing more &lt;code&gt;pprof&lt;/code&gt; data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ curl http://localhost:8080/debug/pprof/heap &amp;gt; heap.6.pprof
$ go tool pprof heap.6.pprof
File: serverless-scheduler-proxy
Type: inuse_space
Time: May 4, 2021 at 9:50am (EDT)
Entering interactive mode (type "help" for commands, "o" for options)
(pprof) top10
Showing nodes accounting for 94.74MB, 94.49% of 100.26MB total
Dropped 26 nodes (cum &amp;lt;= 0.50MB)
Showing top 10 nodes out of 101
      flat  flat%   sum%        cum   cum%
   51.59MB 51.46% 51.46%    51.59MB 51.46%  google.golang.org/grpc/internal/transport.newBufWriter
   19.60MB 19.55% 71.01%    19.60MB 19.55%  bufio.NewReaderSize
    6.02MB  6.01% 77.02%     6.02MB  6.01%  bytes.makeSlice
    4.51MB  4.50% 81.52%    10.53MB 10.51%  crypto/tls.(*Conn).readHandshake
       4MB  3.99% 85.51%     4.50MB  4.49%  crypto/x509.parseCertificate
       3MB  2.99% 88.51%        3MB  2.99%  crypto/tls.Client
    2.50MB  2.49% 91.00%     2.50MB  2.49%  golang.org/x/net/http2/hpack.(*headerFieldTable).addEntry
    1.50MB  1.50% 92.50%     1.50MB  1.50%  google.golang.org/grpc/internal/grpcsync.NewEvent
       1MB     1% 93.50%        1MB     1%  runtime.malg
       1MB     1% 94.49%        1MB     1%  encoding/json.(*decodeState).literalStore
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;google.golang.org/grpc/internal/transport.newBufWriter&lt;/code&gt; really stands out as using a ton of memory! That's the first indication of what the leak is related to: gRPC. Looking at our application source code, the only place we were using gRPC was for &lt;a href="https://cloud.google.com/secret-manager/docs/quickstart"&gt;Google Cloud Secret Manager&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;secretmanager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"failed to create secretmanager client: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We never called &lt;code&gt;client.Close()&lt;/code&gt; and created a &lt;code&gt;Client&lt;/code&gt; on every request! So, I added a &lt;code&gt;Close&lt;/code&gt; call and the problem went away:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I submitted the fix, it &lt;a href="https://cloud.google.com/build/docs/deploying-builds/deploy-cloud-run"&gt;automatically deployed&lt;/a&gt;, and the sawtooth went away immediately!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C8VMv31H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z46xksxzus3aluo3cu4k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C8VMv31H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z46xksxzus3aluo3cu4k.png" alt='"Container memory utilization" showing the sawtooth pattern at the start then dropping to a consistently flat line near 0.'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Woohoo! 🎉🎉🎉&lt;/p&gt;




&lt;p&gt;Around the same time, a user filed an issue on our &lt;a href="https://github.com/GoogleCloudPlatform/golang-samples"&gt;Go sample repo for Cloud&lt;/a&gt;, which contains most of the Go samples for docs on &lt;a href="https://cloud.google.com"&gt;cloud.google.com&lt;/a&gt;. The user noticed we forgot to &lt;code&gt;Close&lt;/code&gt; the &lt;code&gt;Client&lt;/code&gt; in our of our samples!&lt;/p&gt;

&lt;p&gt;I had seen the same thing pop up a few other times, so I decided to investigate the entire repo.&lt;/p&gt;

&lt;p&gt;I started with a rough estimate of how many affected files there are. Using &lt;code&gt;grep&lt;/code&gt;, we can get a list of all files containing a &lt;code&gt;NewClient&lt;/code&gt; style call, then pass that list to another invocation of &lt;code&gt;grep&lt;/code&gt; to only list the files that &lt;em&gt;don't&lt;/em&gt; contain &lt;code&gt;Close&lt;/code&gt;, ignoring test files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ grep -L Close $(grep -El 'New[^(]*Client' **/*.go) | grep -v test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Oops! There were 207 files… For context, we have about 1300 .go files in the &lt;a href="https://github.com/GoogleCloudPlatform/golang-samples"&gt;GoogleCloudPlatform/golang-samples&lt;/a&gt; repo.&lt;/p&gt;

&lt;p&gt;Given the scale of the problem, I thought some automation would be &lt;a href="https://xkcd.com/1205/"&gt;worth it&lt;/a&gt; to get a rough start. I didn't want to write a full on Go program to edit the files, so I stuck with Bash:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ grep -L Close $(grep -El 'New[^(]*Client' **/*.go) | grep -v test | xargs sed -i '/New[^(]*Client/,/}/s/}/}\ndefer client.Close()/'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Is it perfect? No. Did it make a huge dent in the amount of work? Yes!&lt;/p&gt;

&lt;p&gt;The first part (up until &lt;code&gt;test&lt;/code&gt;) is the exact same as above -- get a list of all of the possibly affected files (the ones that seem to create a &lt;code&gt;Client&lt;/code&gt; but never call &lt;code&gt;Close&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Then, I passed that list of files to &lt;code&gt;sed&lt;/code&gt; for actual editing. &lt;code&gt;xargs&lt;/code&gt; invokes the command you give it with each line of stdin being passed as an argument to the given command.&lt;/p&gt;

&lt;p&gt;To understand the &lt;code&gt;sed&lt;/code&gt; command, it helps to see what a sample usually looks like in the &lt;code&gt;golang-samples&lt;/code&gt; repo (omitting imports and everything after client initialization):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// accessSecretVersion accesses the payload for the given secret version if one&lt;/span&gt;
&lt;span class="c"&gt;// exists. The version can be a version number as a string (e.g. "5") or an&lt;/span&gt;
&lt;span class="c"&gt;// alias (e.g. "latest").&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;accessSecretVersion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Writer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// name := "projects/my-project/secrets/my-secret/versions/5"&lt;/span&gt;
    &lt;span class="c"&gt;// name := "projects/my-project/secrets/my-secret/versions/latest"&lt;/span&gt;
    &lt;span class="c"&gt;// Create the client.&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;secretmanager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"failed to create secretmanager client: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At a high level, we initialize the client and check if there was an error. Whenever you check the error, there is a closing curly brace (&lt;code&gt;}&lt;/code&gt;). I used that information to automate the editing.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;sed&lt;/code&gt; command is still a douzy, though:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sed -i '/New[^(]*Client/,/}/s/}/}\ndefer client.Close()/'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;-i&lt;/code&gt; says to edit the files in place. I'm OK with this because &lt;code&gt;git&lt;/code&gt; can save me if I mess up.&lt;/p&gt;

&lt;p&gt;Next, I used the &lt;code&gt;s&lt;/code&gt; command to insert &lt;code&gt;defer client.Close()&lt;/code&gt; right after the presumed closing curly brace (&lt;code&gt;}&lt;/code&gt;) from checking the error.&lt;/p&gt;

&lt;p&gt;But, I don't want to replace &lt;em&gt;every&lt;/em&gt; &lt;code&gt;}&lt;/code&gt;, I only want the &lt;em&gt;first one after a call to &lt;code&gt;NewClient&lt;/code&gt;&lt;/em&gt;. To do that, you can give an &lt;a href="https://www.gnu.org/software/sed/manual/html_node/Addresses.html"&gt;&lt;em&gt;address range&lt;/em&gt;&lt;/a&gt; for &lt;code&gt;sed&lt;/code&gt; to search.&lt;/p&gt;

&lt;p&gt;An address range can include the start and end patterns to match before applying whatever command comes next. In this case, the start is &lt;code&gt;/New[^(]*Client/&lt;/code&gt;, matching &lt;code&gt;NewClient&lt;/code&gt; type calls, and the end (separated by a &lt;code&gt;,&lt;/code&gt;) is &lt;code&gt;/}/&lt;/code&gt;, matching the next curly brace. That means our search and replace will only apply between the call to &lt;code&gt;NewClient&lt;/code&gt; and the closing curly brace! &lt;/p&gt;

&lt;p&gt;From knowing the error handling pattern above, the closing brace of the &lt;code&gt;if err != nil&lt;/code&gt; condition is exactly where we want to insert our &lt;code&gt;Close&lt;/code&gt; call.&lt;/p&gt;




&lt;p&gt;Once I had automatically edited all of the samples, I ran &lt;code&gt;goimports&lt;/code&gt; to fix the formatting. Then, I went through each edited file to make sure it did the right thing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In server applications, should we actually close the client, or should we keep it around for future requests?&lt;/li&gt;
&lt;li&gt;Is the name of the &lt;code&gt;Client&lt;/code&gt; actually &lt;code&gt;client&lt;/code&gt; or is it something else?&lt;/li&gt;
&lt;li&gt;Is there more than one &lt;code&gt;Client&lt;/code&gt; to &lt;code&gt;Close&lt;/code&gt;?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once that was done, I was left with &lt;a href="https://github.com/GoogleCloudPlatform/golang-samples/pull/2080"&gt;180 files edited&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;The last order of business is trying to make it so this doesn't happen to users anymore. There are a few ways we have in mind:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Better samples. See above.&lt;/li&gt;
&lt;li&gt;Better GoDoc. We updated our library generator to include a comment in the generated libraries saying to &lt;code&gt;Close&lt;/code&gt; the &lt;code&gt;Client&lt;/code&gt; when you're done with it. See &lt;a href="https://github.com/googleapis/google-cloud-go/issues/3031"&gt;https://github.com/googleapis/google-cloud-go/issues/3031&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Better libraries. Is there a way we can automatically &lt;code&gt;Close&lt;/code&gt; clients? Finalizers? Have an idea of how we can do this better? Let us know on &lt;a href="https://github.com/googleapis/google-cloud-go/issues/4498"&gt;https://github.com/googleapis/google-cloud-go/issues/4498&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I hope you learned a bit about Go, memory leaks, &lt;code&gt;pprof&lt;/code&gt;, gRPC, and Bash. I'd love to hear your stories about memory leaks you've found and what it took to fix them! If you have ideas about how we can improve our &lt;a href="https://github.com/googleapis/google-cloud-go"&gt;libraries&lt;/a&gt; or &lt;a href="https://github.com/GoogleCloudPlatform/golang-samples"&gt;samples&lt;/a&gt;, let us know by filing an issue.&lt;/p&gt;

</description>
      <category>go</category>
      <category>pprof</category>
    </item>
    <item>
      <title>Crystal for the curious Ruby on Rails Developer</title>
      <author>Seth T.</author>
      <pubDate>Wed, 11 Aug 2021 14:46:16 +0000</pubDate>
      <link>https://dev.to/seesethcode/crystal-for-the-curious-ruby-on-rails-developer-1dc</link>
      <guid>https://dev.to/seesethcode/crystal-for-the-curious-ruby-on-rails-developer-1dc</guid>
      <description>&lt;p&gt;Have you been hearing about the language &lt;a href="https://www.crystal-lang.org"&gt;Crystal&lt;/a&gt; lately and you're curious what it's all about? Well, I'm right there with you! Specifically I'm curious how Crystal can be used to create web applications that are highly performant but use less resources.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-little-about-me"&gt;
  &lt;/a&gt;
  A little about me
&lt;/h2&gt;

&lt;p&gt;My name is Seth and I'm a self-taught full-stack Ruby on Rails developer. My strong suites are mostly back-end and infrastructure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-goal-of-this-article"&gt;
  &lt;/a&gt;
  The goal of this article
&lt;/h2&gt;

&lt;p&gt;Since I'm self-taught, and because of the way I learn, I rely heavily on video tutorials to help me build my understanding of how Ruby, Javascript, HTML/CSS and infrastructure work together to create functional web applications. &lt;/p&gt;

&lt;p&gt;Crystal caught my attention because of it's similarity to Ruby, but with benefits of a compiled language that I think Ruby is naturally trying to move towards. The challenge I find myself having is... &lt;strong&gt;a lack of videos helping introduce the different frameworks and the language&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So, I decided I'll take multiple Crystal web frameworks for a test drive and we'll build the same app in each one to explore how each one is different. I plan to personally highlight the differences I notice between the Crystal framework and Rails because most of my app development experience is with Rails. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#crystal-web-frameworks-ill-be-exploring"&gt;
  &lt;/a&gt;
  Crystal Web Frameworks I'll Be Exploring
&lt;/h2&gt;

&lt;p&gt;Here's the list of frameworks I will be making videos for. I'll be creating the same simple blog app on each framework so that anyone following along can compare how each one. I'll update each list item with a link to the article specifically about the framework with links to the videos and the source code for anyone to clone/fork and play around with. So if you don't see a link yet, please check back in the future 😄&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://amberframework.org/"&gt;Amber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.luckyframework.org/"&gt;Lucky&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://spider-gazelle.net/"&gt;Spider Gazelle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kemalcr/kemal"&gt;Kemal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://athenaframework.org/"&gt;Athena&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The order here is roughly based on the full featured-ness of the framework. I say that because from my current experience Lucky is more fully featured as an out of the box system, but  I'm already working with Amber currently and I'm more familiar with it so I plan to start there. Kemal and Athena are much lighter weight and are better compared to a Sinatra type framework.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blog-project-outline"&gt;
  &lt;/a&gt;
  Blog Project Outline
&lt;/h2&gt;

&lt;p&gt;I'm rarely this structured, but a simple blog site is a good way to explore a frameworks ORM, controller and view layer, routing, simple user authentication and all of the basic CRUD actions.&lt;/p&gt;

&lt;p&gt;Since the purpose of this project is to explore the frameworks themselves I'll be using bootstrap for the front-end and making all of the projects look essentially the same with standard bootstrap styling. If I use any Javascript, it'll be through Webpack and using Stimulus or just plain Javascript (clearly I haven't decided yet).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pages"&gt;
  &lt;/a&gt;
  Pages
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Home: This will act as the index page for the posts, displaying up to 10 posts and paginating any additional posts.&lt;/li&gt;
&lt;li&gt;Sign Up&lt;/li&gt;
&lt;li&gt;Sign In&lt;/li&gt;
&lt;li&gt;Post: the individual post page displaying the post contents. Post pages will accept comments from non-signed in users.&lt;/li&gt;
&lt;li&gt;User Account: screen showing all of the posts belonging to the signed in user, with all of the CRUD actions for all the posts belonging to that user.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All pages will have a sticky top nav with links to sign in/out and create/manage posts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-there-you-have-it"&gt;
  &lt;/a&gt;
  And there you have it!
&lt;/h2&gt;

&lt;p&gt;I'll update this post as I finish the videos and posts with each framework. If this has helped you, or caused you to have more questions that I didn't answer, please let me know. I'd love to get your feedback!&lt;/p&gt;

</description>
      <category>crystal</category>
      <category>webdev</category>
      <category>alwayslearning</category>
      <category>12monthsofmakes</category>
    </item>
    <item>
      <title>Rails redirect user to the previous page  after signup or login</title>
      <author>code Salley</author>
      <pubDate>Wed, 11 Aug 2021 14:34:16 +0000</pubDate>
      <link>https://dev.to/juxsalley/rails-redirect-user-to-the-previous-page-after-signup-or-login-1483</link>
      <guid>https://dev.to/juxsalley/rails-redirect-user-to-the-previous-page-after-signup-or-login-1483</guid>
      <description>&lt;h4&gt;
  &lt;a href="#lets-hit-the-ball-after-working-on-a-subscription-platform-for-a-while-i-realized-new-users-who-wanted-to-pay-for-services-on-the-go-have-to-sign-up-but-after-signup-devise-redirect-the-user-to-the-root-page-users-will-have-to-look-up-what-they-wanted-all-over-again"&gt;
  &lt;/a&gt;
  Let's hit the ball, After working on a subscription platform for a while I realized new user's who wanted to pay for service's on the go have to sign up but after signup, Devise redirect the user to the root page, user's will have to look up what they wanted all over again.
&lt;/h4&gt;

&lt;p&gt;devise allows us to override most of the implementation, &lt;br&gt;
we can create a registration controller.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Users::RegistrationsController &amp;lt; Devise::RegistrationsController



 protected


  def after_sign_up_path_for(resource)
     url = session[:fall_back_url]
       session[:fall_back_url] = nil
      if current_user &amp;amp;&amp;amp; url
        url
      end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And inside controller methods we might what to save user's url, we'll save it an session &lt;code&gt;fall_back_url&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def show
    if !current_user
      session[:fall_back_url] = request.url
    end
end

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>ruby</category>
      <category>rails</category>
      <category>devise</category>
      <category>code</category>
    </item>
    <item>
      <title>🤯 10 [Insightful] Programming Wisdom Quotes!</title>
      <author>Clean Code Studio</author>
      <pubDate>Wed, 11 Aug 2021 14:31:59 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/10-insightful-programming-wisdom-quotes-18ba</link>
      <guid>https://dev.to/cleancodestudio/10-insightful-programming-wisdom-quotes-18ba</guid>
      <description>&lt;p&gt;So this is a bit of a fun response to &lt;a class="mentioned-user" href="https://dev.to/inhuofficial"&gt;@inhuofficial&lt;/a&gt;
's (&lt;a href="https://dev.to/inhuofficial/10-tips-for-clean-dev-articles-59id"&gt;10 Tips For Clean DEV Articles!&lt;/a&gt;) - a fun post &lt;strong&gt;critiquing my &lt;a class="mentioned-user" href="https://dev.to/cleancodestudio"&gt;@cleancodestudio&lt;/a&gt;
 article&lt;/strong&gt; &lt;a href="https://dev.to/cleancodestudio/10-tips-for-clean-code-4nm6"&gt;10 Tips For Clean Code&lt;/a&gt; for its structure and accessibility.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To be clear&lt;/strong&gt;, the tips in the article are great, this is purely a post pointing out that I read and appreciated &lt;a class="mentioned-user" href="https://dev.to/inhuofficial"&gt;@inhuofficial&lt;/a&gt;
's accessibility tips (and am down to use them). &lt;/p&gt;

&lt;p&gt;There is no hate or malice here, I - like &lt;a class="mentioned-user" href="https://dev.to/inhuofficial"&gt;@inhuofficial&lt;/a&gt;
 - am just mischievous (as most of you know) and the article had loads of &lt;strong&gt;accessibility advice&lt;/strong&gt; given by a passionate spokesperson for digital accessibility...so you know I'm going to have to respond with my own article mimicking the structure of the article that critiqued my own. &lt;/p&gt;

&lt;p&gt;Anyway, it is silly with an important message, please treat it as such! &lt;/p&gt;

&lt;p&gt;Here is my list of &lt;strong&gt;10 [Insightful] Programming Wisdom Quotes!&lt;/strong&gt; (I would suggest going to read the article first or read them at the same time, otherwise some of these points used in this article and pointed out in &lt;a class="mentioned-user" href="https://dev.to/inhuofficial"&gt;@inhuofficial&lt;/a&gt;
's article may not make sense!)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-quotes"&gt;
  &lt;/a&gt;
  The Quotes
&lt;/h2&gt;

&lt;p&gt;1 &lt;strong&gt;John Carmack Quote:&lt;/strong&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Sometimes the elegant implementation is a function. Not a &lt;br&gt;
 method. Not a class. Not a framework. Just a function."&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2 &lt;strong&gt;Doug Linder Quote:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"A good programmer is someone who always looks both ways before crossing a one-way street."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;3 &lt;strong&gt;Mikko Hypponen Quote:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;_"Rarely is anyone thanked for the work they did to prevent the disaster that didn't happen."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;4 &lt;strong&gt;Jeff Atwood Quote:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;_"Hell isn't other people's code. Hell is your own code from 3 years ago."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;5 &lt;strong&gt;Rick Hickey Quote:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Programming is not about typing, it's about thinking"&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;6 &lt;strong&gt;Unknown Quote:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Weeks of coding can save you hours of planning"&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;7 &lt;strong&gt;Ron Jefferies Quote:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Always implement things when you actually need them, never when you just foresee that you need them."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;8 &lt;strong&gt;Nicoll Hunt Quote:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"The first step of any project is to grossly underestimate its complexity and difficulty"&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;9 &lt;strong&gt;Richard Pattis Quote:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"When debugging, novices insert corrective code; experts remove defective code."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;10 &lt;strong&gt;Filipe Fortes Quote:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Debugging is like being the detective in a crime movie where you are also the murderer."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The End
&lt;/h2&gt;

&lt;p&gt;Obviously this may all be a bit of fun but the &lt;strong&gt;quotes are all valid and important&lt;/strong&gt; (I might have had a quote or two in there that simply shares how projects typically go for programmers that aren't necessarily helpful and more so simply state truths, but &lt;em&gt;"8 valid quotes for programmers with a filler quote or two"&lt;/em&gt; wouldn't make for a good title - now would it? 🤣).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advice for everyone:&lt;/strong&gt; put some effort in to formatting your articles properly, it makes them easier to read and also has the added bonus of including everyone in the conversation!&lt;/p&gt;

&lt;p&gt;And yes, for those of you who read the original article, I did even steal the cover image style and design, if you are going to copy someone's work do it right!🤣 Technically, I just stole it back - I used that cover photo on my 10 Clean Code Tips article first and it's &lt;strong&gt;a damn good looking cover photo&lt;/strong&gt;! Feel free to steal it yourself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-quote-11"&gt;
  &lt;/a&gt;
  Bonus Quote 11
&lt;/h2&gt;

&lt;p&gt;Always have a bonus quote, people seem to love that!&lt;/p&gt;

&lt;p&gt;Bonus &lt;strong&gt;Clean Code Studio Quote:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Follow [inhuofficial on Twitter],(&lt;a href="https://twitter.com/InHuOfficial"&gt;https://twitter.com/InHuOfficial&lt;/a&gt;), I have as they put some insightful tweets out there!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Oh and I have some followers as well (although I only started tweeting daily this past week), so you could always follow @&lt;a href="https://twitter.com/cleancodestudio"&gt;CleanCodeStudio&lt;/a&gt; if you fancy it, my knowledge sharing will continue there."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hope this article made you smile and I hope you are having a great week!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>writing</category>
      <category>beginners</category>
      <category>discuss</category>
    </item>
    <item>
      <title>iOS App Development: Publishing a CocoaPods library that converts images to GIFs with Swift.</title>
      <author>Murmeko</author>
      <pubDate>Wed, 11 Aug 2021 14:12:08 +0000</pubDate>
      <link>https://dev.to/murmeko/ios-app-development-publishing-a-cocoapods-library-that-converts-images-to-gifs-with-swift-5ckm</link>
      <guid>https://dev.to/murmeko/ios-app-development-publishing-a-cocoapods-library-that-converts-images-to-gifs-with-swift-5ckm</guid>
      <description>&lt;h1&gt;
  &lt;a href="#step-1-install-cocoapods-on-your-mac"&gt;
  &lt;/a&gt;
  Step 1: Install CocoaPods on your Mac
&lt;/h1&gt;

&lt;p&gt;In order to create a CocoaPods, you must first install CocoaPods on your Mac. To install CocoaPods on your Mac, you need to open the Terminal application and run the following command.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;When you run the command, Terminal will ask you to type your password, and after entering your password, CocoaPods will be installed on your Mac.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ULueUi1---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lmlcckf4njhvsnta6lla.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ULueUi1---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lmlcckf4njhvsnta6lla.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-2-creating-the-pod"&gt;
  &lt;/a&gt;
  Step 2: Creating the pod
&lt;/h1&gt;

&lt;p&gt;After installing CocoaPods on your Mac, use the "cd" command to change to the directory where you want to create the Pod using Terminal. For me the command is as follows.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;After moving to the directory where you want to create your Pod, create the Pod by replacing the "POD NAME" part of the command below with the name of your Pod. Also, make sure that there are no spaces in the name of your Pod.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;After running the command, Terminal will ask you the following questions about your Pod.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;In the first question, you are asked on which platform you will use your Pod, we write “iOS” and continue. In the second, you are asked in which language you will write your Pod, we write "Swift" and continue. In the third question, you are asked whether to include a demo application with your Pod, we write “Yes” and continue. In the fourth question, which frameworks you will use to test your Pod, we write “None” and continue. In the fifth question, you are asked whether you want to do View-based testing, we write “No” and continue. If you followed the steps correctly, an Xcode window will open when the command finishes running.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-3-signing-in-to-xcode-with-github"&gt;
  &lt;/a&gt;
  Step 3: Signing in to Xcode with GitHub
&lt;/h1&gt;

&lt;p&gt;If you are already logged into your Xcode with GitHub, you can skip this step and go to Step 4.&lt;/p&gt;

&lt;p&gt;To sign in to Xcode with GitHub, you must first create a GitHub account. After opening a GitHub account, you should click the profile icon at the top right, click the "Settings" button from the drop-down list, and click the "Developer settings" button in the list on the left of the page you are directed to.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/gO366xH1ob5E6aoVwd/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/gO366xH1ob5E6aoVwd/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After pressing the button, you should press the "Personal access tokens" button on the left of the page you are directed to, and when the page is updated, you should press the "Generate new token" button, which is the 2nd button from the top right.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KzXPmvl7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2x2lkbxnxdkwax6aor66.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KzXPmvl7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2x2lkbxnxdkwax6aor66.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the Note section of the new page that opens, you must enter the name of the Token you want to create, I briefly write "Xcode". In the Expiration section, we are asked to specify the expiration date of your Token, we can choose the "No expiration" option because we will use it in Xcode. In the Select scopes section, you specify the access permissions of your Token. Here you need to tick “repo”, “admin:repo_hook”, “delete_repo” respectively. After checking the boxes, we press the "Generate token" button at the bottom and our token is created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rvC5oWWH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0hn19mvzzx79z3rztkw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rvC5oWWH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0hn19mvzzx79z3rztkw.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy your password in the green box on the page we are directed to and return to Xcode. After returning to Xcode, click the Xcode tab in the Menu Bar and click the "Preferences" button. Click the “Accounts” button at the top of the window that opens, and then click the “+” button at the bottom left. Select GitHub from the list in the window that opens and click the “Continue” button. In the renewed window, paste your e-mail address that you used to open your GitHub account in the “Account” section, and your Token password that you copied from the green box in the “Token” section and press the “Sign In” button. If you followed the guide correctly, congratulations, you have integrated your GitHub account into your Xcode.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YCYnA7eQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/djmbt6rmsp5pumlzm2yg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YCYnA7eQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/djmbt6rmsp5pumlzm2yg.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-4-update-your-pods-settings-and-export-to-github"&gt;
  &lt;/a&gt;
  Step 4: Update your pod's settings and export to GitHub
&lt;/h1&gt;

&lt;p&gt;After creating your pod, you can see a yellow warning sign appear to the left of the top middle bar of your Xcode. When you click on the sign, the Navigator part of your Xcode will switch to the Issue Navigator tab.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9xd-3ddI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v3n7nbxtfwssxfuf0f7k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9xd-3ddI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v3n7nbxtfwssxfuf0f7k.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AwdaLInX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p5lfpkbju3bl6lsg0yep.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AwdaLInX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p5lfpkbju3bl6lsg0yep.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the first warning in this section, Xcode tells us that it can convert your project's code to Swift 5 code. Click on the warning and convert your code of “Next, Next, Next” method to Swift 5 code. In the second and third warnings, Xcode is telling you that it can update the settings of your Pod and our example project to the recommended settings. Again, update the settings of your project with the “Next, Next, Next” method. The thing to keep in mind here is that Xcode is upgrading the minimum iOS version your sample project and Pod can run on from 9.0 to 12.0.&lt;/p&gt;

&lt;p&gt;After all the warnings disappear, click on the "Source Control Navigator" button, which is the second of the horizontal buttons at the top of the Navigator section on the left. There are 4 folders here, right click on the "Remotes" folder, which is the 3rd folder from the top, and click on the "New 'POD NAME' remote" button. When you click the "Create" button at the bottom right of the window that opens, your Pod will be transferred to your GitHub.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hDQdhJtV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qug4phiegj80jei5y7au.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hDQdhJtV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qug4phiegj80jei5y7au.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After transferring your code to GitHub, click the "Project Navigator" button, which is the 1st from the left among the buttons at the top of the Navigator section of Xcode. Project Navigator lists the files that make up our project. Here, click on the arrows to the left of the files named “POD NAME” and Pods if they are minimized and expand your files. Then expand the "Podspec Metadata" folder, which is the 1st one from the top. Click on the file named POD NAME.podspec in the expanding folder. This file acts as the identity of your Pod. Here, you are expected to enter a brief summary of your Pod in the "s.summary" section, and a description of your Pod in the "s.description" section. I am writing the following for my own Pod, respectively.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;After writing your summary and explanation, you need to update the minimum iOS version that your Pod can be used in from the "s.ios.deployment_target" section and specify the Swift version we used while writing your library. To specify the iOS version you used while writing our library, you should add "s.swift_version = '5.4'" under the "s.ios.deployment_target" section. At the end of all changes, your 'POD NAME'.podspec file should look like the one below.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;After updating your 'POD NAME'.podspec file, open the "README.md" file in the folder where your file is located. Add " :git =&amp;gt; '&lt;a href="https://github.com/Murmeko/POD"&gt;https://github.com/Murmeko/POD&lt;/a&gt; NAME.git'" line under the "pod 'POD NAME'" line under the "## Installation" section here.&lt;br&gt;
After you have done this, you finally need to update the “.podfile” file of your sample project. For this, open the "Podfile" file in Project Navigator and replace the "platform :ios, '9.0'" part with 12.0.&lt;/p&gt;

&lt;p&gt;Now that you have everything set up, it's time to make your first Commit. For this, click on the Source Control tab in the Menu Bar and click on the “Commit…” button in the drop-down list. Click on all the files that appear on the left of the window that opens and type the name of your commit in the "Enter commit message here" box at the bottom. I will write “Updated project settings” as the name. Finally, click the "Push to remote:" box at the bottom left and click the "Commit Files" button at the bottom right, your files on GitHub have been updated.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#step-5-creating-your-library"&gt;
  &lt;/a&gt;
  Step 5: Creating your library
&lt;/h1&gt;

&lt;p&gt;After updating your code on GitHub, expand the "Development Pods" folder from the Project Navigator section, and then expand the "POD NAME" folder in the same folder. Update the file named "ReplaceMe.swift" that appears here as "POD NAME.swift" and open the file. You will write your code here.&lt;/p&gt;

&lt;p&gt;First, import the frameworks you will use while writing your code.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Next, define a class. The point you should pay attention to here is that you must define the class as " public ", otherwise you cannot use your library.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;After defining your class, define an enum named “ colorSpace ” inside this class.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Then, inside the class you define, the function that will convert your images to GIF is a "UIImage" string, a "URL" that indicates where the file will be located, a "colorSpace" that will specify the color space of your GIF, an "Int" value that indicates the time between the photos that make up your GIF, and Define it to take an “Int” value that specifies how many times your GIF will repeat, and give it a “UIImage” string at the end. Also remember that when defining the function and enum they must be " public ".&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Next, define another function that will take a “String” into your function and return the URL of your GIF.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Finally, you must define a “public init” for the class you originally created. Otherwise, you won't be able to use your class in the project where you added your Pod.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Your library is ready! If you want, you can also add a sample application to the "Example" folder in the main folder of the project. You can use your library in your projects as follows.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#step-6-publish-the-pod"&gt;
  &lt;/a&gt;
  Step 6: Publish the Pod
&lt;/h1&gt;

&lt;p&gt;After creating your library, commit your project one last time. Then open the Terminal application and go to the directory where your project is located with the “cd” command. My directory is “Documents/Developer/GIFFromImages“. Then run the “pod lib lint” command in this directory. This script validates your files, if it successfully validates it will give the following output.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Then you need to register CocoaPods by running the “pod trunk register” command. Here, you should replace the "&lt;a href="mailto:address@e-mail.com"&gt;address@e-mail.com&lt;/a&gt;" part with your e-mail address, the "Your Name" part with your name, and the " — description='Name of your Mac'" part with the name of your Mac.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Once you've done this, open your project's GitHub page and click the "Releases" button on the right. Then click on the “Draft a new release” button on the top right of the page we are directed to.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p-k2FZFc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cx4p16gv5fiazdze0pc9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p-k2FZFc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cx4p16gv5fiazdze0pc9.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Type 0.1.0 in the “Tag version” section on the page you are directed to. This is the part where you specify the version of your Pod. As you update your pod, you have to update the .podspec file and the releases section on GitHub. Then write “Release 0.1.0” in the “Release title” section on this page. Actually, you can write whatever you want here, but I will write it like this to avoid confusion. Then click on the "Publish release" button at the bottom left of the page, so you publish the 0.1.0 version of your Pod on GitHub.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zfpx5JHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajlkozwbe1pzcqcu9c3e.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zfpx5JHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajlkozwbe1pzcqcu9c3e.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, go back to Terminal and run the command " pod trunk push NAME.podspec ". And congratulations, your Pod is officially live!&lt;/p&gt;

&lt;p&gt;For projects GitHub page: &lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Murmeko"&gt;
        Murmeko
      &lt;/a&gt; / &lt;a href="https://github.com/Murmeko/GIFFromImages"&gt;
        GIFFromImages
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
GIFFromImages&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.com/Murmeko/GIFFromImages" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1063d7862846357d3017f9f23f10d2a4c502ba131abdd971a550c5e9bf0db46b/68747470733a2f2f7472617669732d63692e636f6d2f4d75726d656b6f2f47494646726f6d496d616765732e7376673f6272616e63683d6d6173746572" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://cocoapods.org/pods/GIFFromImages" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/531e60ad3ea4261492fe06fc693b2a4cd653ad1fc1e6765b5790163d70c6a1dc/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f762f47494646726f6d496d616765732e7376673f7374796c653d666c6174" alt="Version"&gt;&lt;/a&gt;
&lt;a href="https://cocoapods.org/pods/GIFFromImages" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/4a2771e56c817c946367d120d8e515d4deb326ebb15aaeac32d463c3ac58617a/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f6c2f47494646726f6d496d616765732e7376673f7374796c653d666c6174" alt="License"&gt;&lt;/a&gt;
&lt;a href="https://cocoapods.org/pods/GIFFromImages" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f7ff7e9424dd557669f4c79abffdbe91db279eaef45311198485263c1f5645ab/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f702f47494646726f6d496d616765732e7376673f7374796c653d666c6174" alt="Platform"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Learn how to use / how to create&lt;/h2&gt;
&lt;h2&gt;
Requirements&lt;/h2&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Platform&lt;/th&gt;
&lt;th&gt;Installation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;iOS 12.0+&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/Murmeko/GIFFromImages#cocoapods"&gt;CocoaPods&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;GIFFromImages is available through &lt;a href="https://cocoapods.org" rel="nofollow"&gt;CocoaPods&lt;/a&gt;. To install
it, simply add the following line to your Podfile:&lt;/p&gt;
&lt;div class="highlight highlight-source-ruby position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-en"&gt;pod&lt;/span&gt; &lt;span class="pl-s"&gt;'GIFFromImages'&lt;/span&gt;
&lt;span class="pl-pds"&gt;:git&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;'https://github.com/Murmeko/GIFFromImages.git'&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Author&lt;/h2&gt;
&lt;p&gt;Murmeko, &lt;a href="https://github.com/Murmeko/GIFFromImagesmailto:yigiterdinc@gmail.com"&gt;yigiterdinc@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
License&lt;/h2&gt;
&lt;p&gt;GIFFromImages is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Murmeko/GIFFromImages"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


</description>
    </item>
    <item>
      <title>iOS App Development: Publishing a CocoaPods library with Swift that turns pictures to grayscale.</title>
      <author>Murmeko</author>
      <pubDate>Wed, 11 Aug 2021 14:01:19 +0000</pubDate>
      <link>https://dev.to/murmeko/ios-app-development-publishing-a-cocoapods-library-with-swift-that-turns-pictures-to-grayscale-2k2g</link>
      <guid>https://dev.to/murmeko/ios-app-development-publishing-a-cocoapods-library-with-swift-that-turns-pictures-to-grayscale-2k2g</guid>
      <description>&lt;h1&gt;
  &lt;a href="#step-1-install-cocoapods-on-your-mac"&gt;
  &lt;/a&gt;
  Step 1: Install CocoaPods on your Mac
&lt;/h1&gt;

&lt;p&gt;In order to create a CocoaPods, you must first install CocoaPods on your Mac. To install CocoaPods on your Mac, you need to open the Terminal application and run the following command.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;When you run the command, Terminal will ask you to type your password, after entering your password CocoaPods will be installed on your Mac.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5yayt1vn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/teodstg6q59z4au9op4n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5yayt1vn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/teodstg6q59z4au9op4n.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-2-creating-the-pod"&gt;
  &lt;/a&gt;
  Step 2: Creating the pod
&lt;/h1&gt;

&lt;p&gt;After installing CocoaPods on your Mac, use the "cd" command to change to the directory where you want to create the Pod using Terminal. For me the command is as follows.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;After moving to the directory where you want to create your Pod, create the Pod by replacing the "POD NAME" part of the command below with the name of your Pod. Also, make sure that there are no spaces in the name of your Pod.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;After running the command, Terminal will ask you the following questions about your Pod.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;In the first of the questions, you are asked on which platform you will use your Pod, write “iOS” and continue. In the second, you are asked in which language you will write your Pod, write "Swift" and continue. In the third question, you are asked whether to include a demo application with your Pod, write “Yes” and continue. In the fourth question, which frameworks you will use to test your Pod, write “None” and continue. In the fifth question, you are asked whether you want to do View-based testing, write “No” and continue. If you followed the steps correctly, an Xcode window will open when the command finishes running.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-3-signing-in-to-xcode-with-github"&gt;
  &lt;/a&gt;
  Step 3: Signing in to Xcode with GitHub
&lt;/h1&gt;

&lt;p&gt;If you are already logged into your Xcode with GitHub, you can skip this step and go to Step 4.&lt;/p&gt;

&lt;p&gt;To sign in to Xcode with GitHub, you must first create a GitHub account. After opening a GitHub account, you should click the profile icon at the top right, click the "Settings" button from the drop-down list, and click the "Developer settings" button in the list on the left of the page you are directed to.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/gO366xH1ob5E6aoVwd/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/gO366xH1ob5E6aoVwd/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After pressing the button, you should press the "Personal access tokens" button on the left of the page you are directed to, and when the page is updated, you should press the "Generate new token" button, which is the 2nd button from the top right.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UFiU7RF2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4i9wlf60b3s992wyybg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UFiU7RF2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4i9wlf60b3s992wyybg.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the Note section of the new page that opens, you must enter the name of the Token you want to create, I briefly write "Xcode". In the Expiration section, we are asked to specify the expiration date of your Token, we can choose the "No expiration" option because we will use it in Xcode. In the Select scopes section, you specify the access permissions of your Token. Here you need to tick “repo”, “admin:repo_hook”, “delete_repo” respectively. After checking the boxes, we press the "Generate token" button at the bottom and our token is created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tLmUpaP4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ahsz4jt7ilyorcqlo3xr.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tLmUpaP4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ahsz4jt7ilyorcqlo3xr.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy your password in the green box on the page we are directed to and return to Xcode. After returning to Xcode, click the Xcode tab in the Menu Bar and click the "Preferences" button. Click the “Accounts” button at the top of the window that opens, and then click the “+” button at the bottom left. Select GitHub from the list in the window that opens and click the “Continue” button. In the renewed window, paste your e-mail address that you used to open your GitHub account in the “Account” section, and your Token password that you copied from the green box in the “Token” section and press the “Sign In” button. If you followed the guide correctly, congratulations, you have integrated your GitHub account into your Xcode.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eauhg537--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ddch33325l1ts8c5fwkp.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eauhg537--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ddch33325l1ts8c5fwkp.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-4-updating-our-pods-settings-and-importing-our-pod-to-github"&gt;
  &lt;/a&gt;
  Step 4: Updating our Pod's settings and importing our Pod to GitHub
&lt;/h1&gt;

&lt;p&gt;After creating your pod, you'll see a yellow warning sign appear to the left of the top middle bar of your Xcode. When you click on the sign, the Navigator part of your Xcode will switch to the Issue Navigator tab.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mXabuqfb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/is6q6abutc11zp3q9mkf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mXabuqfb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/is6q6abutc11zp3q9mkf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QaGhDPUU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/29ojcyuyf8jnkxdmuier.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QaGhDPUU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/29ojcyuyf8jnkxdmuier.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the first warning in this section, Xcode tells us that it can convert your project's code to Swift 5 code. Click on the warning and convert your code of “Next, Next, Next” method to Swift 5 code. In the second and third warnings, Xcode is telling you that it can update the settings of your Pod and our example project to the recommended settings. Again, update the settings of your project with the “Next, Next, Next” method. The thing to keep in mind here is that Xcode is upgrading the minimum iOS version your sample project and Pod can run on from 9.0 to 12.0.&lt;/p&gt;

&lt;p&gt;After all the warnings disappear, click on the "Source Control Navigator" button, which is the second of the horizontal buttons at the top of the Navigator section on the left. There are 4 folders here, right click on the "Remotes" folder, which is the 3rd folder from the top, and click on the "New 'POD NAME' remote" button. When you click the "Create" button at the bottom right of the window that opens, your Pod will be transferred to your GitHub.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nVxDq4Ji--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gyzd8kypj2l97rduaoaj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nVxDq4Ji--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gyzd8kypj2l97rduaoaj.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After transferring your code to GitHub, click the "Project Navigator" button, which is the 1st from the left among the buttons at the top of the Navigator section of Xcode. Project Navigator lists the files that make up our project. Here, click on the arrows to the left of the files named “POD NAME” and Pods if they are minimized and expand your files. Then expand the "Podspec Metadata" folder, which is the 1st one from the top. Click on the file named POD NAME.podspec in the expanding folder. This file acts as the identity of your Pod. Here, you are expected to enter a brief summary of your Pod in the "s.summary" section, and a description of your Pod in the "s.description" section. I am writing the following for my own Pod, respectively.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;After writing your summary and explanation, you need to update the minimum iOS version that your Pod can be used in from the "s.ios.deployment_target" section and specify the Swift version we used while writing your library. To specify the iOS version you used while writing our library, you should add "s.swift_version = '5.4'" under the "s.ios.deployment_target" section. At the end of all changes, your 'POD NAME'.podspec file should look like the one below.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;After updating your 'POD NAME'.podspec file, open the "README.md" file in the folder where your file is located. Add " :git =&amp;gt; '&lt;a href="https://github.com/Murmeko/POD"&gt;https://github.com/Murmeko/POD&lt;/a&gt; NAME.git'" line under the "pod 'POD NAME'" line under the "## Installation" section here.&lt;/p&gt;

&lt;p&gt;After you have done this, you finally need to update the “.podfile” file of your sample project. For this, open the "Podfile" file in Project Navigator and replace the "platform :ios, '9.0'" part with 12.0.&lt;/p&gt;

&lt;p&gt;Now that we have everything set up, it's time to make our first Commit. For this, we click on the Source Control tab in the Menu Bar, click on the “Commit…” button from the drop-down list. We tick all the files that appear on the left of the window that opens, and write the name of our commit in the "Enter commit message here" box at the bottom. I will write “Updated project settings” as the name. After clicking the "Push to remote:" box at the bottom left, we click the "Commit Files" button at the bottom right and our files on GitHub are updated.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-5-creating-your-library"&gt;
  &lt;/a&gt;
  Step 5: Creating your library
&lt;/h1&gt;

&lt;p&gt;After updating your code on GitHub, expand the "Development Pods" folder from the Project Navigator section, and then expand the "POD NAME" folder in the same folder. Update the file named "ReplaceMe.swift" that appears here as "POD NAME.swift" and open the file. You will write your code here.&lt;/p&gt;

&lt;p&gt;First, import the Frameworks you will use while writing your code.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Next, create a class. The point you should pay attention to here is that you must define the class as " public ", otherwise you cannot use your library.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Then, define the function that will turn your images into black and white in this class that you have defined, so that it takes a “UIImage” and returns a “UIImage”. Also, remember that when defining the function, it must be "public".&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Define the properties of the UIImage you will draw in your function. Here, make sure that the new UIImage you are going to draw has its dimensions from the original, otherwise the aspect ratio of the new image will change. Also, make sure that the color space of the new UIImage you will draw is "CGColorSpaceCreateDeviceGray".&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Then draw your UIImage using all these definitions.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Finally, you must define a “public init” for the class you originally created. Otherwise, you won't be able to use your class in the project where you added your Pod.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Your library is ready! If you want, you can also add a sample application to the "Example" folder in the main folder of the project. You can use your library in your projects as follows.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#step-6-publish-the-pod"&gt;
  &lt;/a&gt;
  Step 6: Publish the Pod
&lt;/h1&gt;

&lt;p&gt;After creating your library, commit your project one last time. Then open the Terminal application and go to the directory where your project is located with the “cd” command. My directory is “Documents/Developer/GIFFromImages“. Then run the “pod lib lint” command in this directory. This script validates your files, if it successfully validates it will give the following output.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Then you need to register CocoaPods by running the “pod trunk register” command. Here, you should replace the "&lt;a href="mailto:address@e-mail.com"&gt;address@e-mail.com&lt;/a&gt;" part with your e-mail address, the "Your Name" part with your name, and the " — description='Name of your Mac'" part with the name of your Mac.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Once you've done this, open your project's GitHub page and click the "Releases" button on the right. Then click on the “Draft a new release” button on the top right of the page we are directed to.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8T4eSR7v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w3p1wlkbqo33fe8glg4e.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8T4eSR7v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w3p1wlkbqo33fe8glg4e.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Type 0.1.0 in the “Tag version” section on the page you are directed to. This is the part where you specify the version of your Pod. As you update your pod, you have to update the .podspec file and the releases section on GitHub. Then write “Release 0.1.0” in the “Release title” section on this page. Actually, you can write whatever you want here, but I will write it like this to avoid confusion. Then click on the "Publish release" button at the bottom left of the page, so you publish the 0.1.0 version of your Pod on GitHub.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ASphhXqi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ndep90ln0ezmcvgadm7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ASphhXqi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ndep90ln0ezmcvgadm7.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, go back to Terminal and run the command " pod trunk push NAME.podspec ". And congratulations, your Pod is officially live!&lt;/p&gt;

&lt;p&gt;For projects GitHub page: &lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Murmeko"&gt;
        Murmeko
      &lt;/a&gt; / &lt;a href="https://github.com/Murmeko/GrayscaleImages"&gt;
        GrayscaleImages
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
GrayscaleImages&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/Murmeko/GrayscaleImages" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a8f2ffa53e77c87ba9246e3c3bab3bda7615a83f1601b09c06806602cf60215c/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f4d75726d656b6f2f477261797363616c65496d616765732e7376673f7374796c653d666c6174" alt="CI Status"&gt;&lt;/a&gt;
&lt;a href="https://cocoapods.org/pods/GrayscaleImages" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c09bda7358c9ed4005b9a3df5fb2d9a433bce319295322d6aa5a1ab73e656836/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f762f477261797363616c65496d616765732e7376673f7374796c653d666c6174" alt="Version"&gt;&lt;/a&gt;
&lt;a href="https://cocoapods.org/pods/GrayscaleImages" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/fd20ecd7ebc1befded23f9e2652fef345dbc3d87bce8649fd9008b8a70521a2d/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f6c2f477261797363616c65496d616765732e7376673f7374796c653d666c6174" alt="License"&gt;&lt;/a&gt;
&lt;a href="https://cocoapods.org/pods/GrayscaleImages" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0002443333d41301997e37b1267af59b3a79bc13e72cebf3bf40d5b39c90b66e/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f702f477261797363616c65496d616765732e7376673f7374796c653d666c6174" alt="Platform"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Example&lt;/h2&gt;
&lt;p&gt;To run the example project, clone the repo, and run &lt;code&gt;pod install&lt;/code&gt; from the Example directory first.&lt;/p&gt;
&lt;h2&gt;
Requirements&lt;/h2&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Platform&lt;/th&gt;
&lt;th&gt;Installation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;iOS 12.0+&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/Murmeko/GrayscaleImages#cocoapods"&gt;CocoaPods&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;GrayscaleImages is available through &lt;a href="https://cocoapods.org" rel="nofollow"&gt;CocoaPods&lt;/a&gt;. To install
it, simply add the following line to your Podfile:&lt;/p&gt;
&lt;div class="highlight highlight-source-ruby position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-en"&gt;pod&lt;/span&gt; &lt;span class="pl-s"&gt;'GrayscaleImages'&lt;/span&gt;
&lt;span class="pl-pds"&gt;:git&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;'https://github.com/Murmeko/GrayscaleImages.git'&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Author&lt;/h2&gt;
&lt;p&gt;Murmeko, &lt;a href="https://github.com/Murmeko/GrayscaleImagesmailto:yigiterdinc@gmail.com"&gt;yigiterdinc@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
License&lt;/h2&gt;
&lt;p&gt;GrayscaleImages is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Murmeko/GrayscaleImages"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


</description>
      <category>ios</category>
      <category>swift</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>There Will Always Be More Work</title>
      <author>Tyler Hawkins</author>
      <pubDate>Wed, 11 Aug 2021 13:49:49 +0000</pubDate>
      <link>https://dev.to/thawkin3/there-will-always-be-more-work-22pf</link>
      <guid>https://dev.to/thawkin3/there-will-always-be-more-work-22pf</guid>
      <description>&lt;p&gt;Software engineering is an interesting field because the work never really ends. You may be working to finish a feature now, but after that there will be more features to build. More bugs to fix. More tech debt to pay down.&lt;/p&gt;

&lt;p&gt;You could spend your entire life working and never really "finish." I suspect the same is true of most other professions.&lt;/p&gt;

&lt;p&gt;And yet, I often feel a sense of urgency, that I must work later or longer to get more work done.&lt;/p&gt;

&lt;p&gt;To be clear, this isn't a result of poor time management –– I get plenty of work done throughout the day, more than is expected of me. I'm not trying to catch up because I've fallen behind. What I'm describing is an urge to continue working longer than necessary to get more work done simply because there is more work to do.&lt;/p&gt;

&lt;p&gt;Logically, I realize that this is a mistake. Working longer hours does not always lead to greater productivity. In the long run, it leads to burnout.&lt;/p&gt;

&lt;p&gt;So why do I feel this way? It may be because I enjoy my job. It may be because I feel a sense of ownership over the work. It may be because in the back of my mind it &lt;em&gt;feels&lt;/em&gt; like I'm accomplishing something that can ultimately be finished.&lt;/p&gt;

&lt;p&gt;But the truth is, none of these reasons are justifiable excuses for working longer hours, later nights, or during the weekend.&lt;/p&gt;

&lt;p&gt;So this is my reminder to myself –– and to you –– that there will always be more work. Take care of yourself.&lt;/p&gt;

&lt;p&gt;Don't burn yourself out. It's not worth it.&lt;/p&gt;

</description>
      <category>career</category>
      <category>leadership</category>
      <category>healthydebate</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>5 React.js UI Component libraries.</title>
      <author>Vaibhav Acharya</author>
      <pubDate>Wed, 11 Aug 2021 13:13:05 +0000</pubDate>
      <link>https://dev.to/vaibhavacharya/5-react-js-ui-component-libraries-58dm</link>
      <guid>https://dev.to/vaibhavacharya/5-react-js-ui-component-libraries-58dm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-a-reactjs-ui-component-library"&gt;
  &lt;/a&gt;
  What is a React.js UI Component library?
&lt;/h2&gt;

&lt;p&gt;These are pre-designed building blocks for projects where you need to construct things quickly and don't need much customization.&lt;br&gt;
We will look over my favorite top 5 libraries here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#material-ui"&gt;
  &lt;/a&gt;
  &lt;a href="https://material-ui.com/"&gt;Material UI&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It is an implementation of Google's design language which is &lt;a href="https://material.io/design"&gt;Material Design&lt;/a&gt;.&lt;br&gt;
It is easily the most popular component library in the React eco-system.&lt;br&gt;
Has a lot of components &amp;amp; good community support.&lt;br&gt;
They also offer some paid themes &amp;amp; components.&lt;br&gt;
In terms of drawbacks, I found the design language to be too boring. Although they do state that you can implement your own design system but I find the customization methods to be not so developer friendly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ant-ui"&gt;
  &lt;/a&gt;
  &lt;a href="https://ant.design/"&gt;Ant UI&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It is based on the Ant design language. It is a pretty looking design system. They offer &amp;gt; 60 high-quality components.&lt;br&gt;
They also have a professional version for enterprise applications. My experience with customization has been decent. You can utilize LESS variables to customize design tokens based on the appearance and feel of your brand.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#chakra-ui"&gt;
  &lt;/a&gt;
  &lt;a href="https://chakra-ui.com/"&gt;Chakra UI&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If &lt;a href="https://tailwindcss.com/"&gt;Tailwind CSS&lt;/a&gt; and React CSS-in-JS had a child it would be Chakra.&lt;br&gt;
It is entirely customizable, has excellent community support, and all of the components are designed with composition in mind, allowing you to easily construct your own components.&lt;br&gt;
One of the things I admire about it is that it does not make concessions in terms of accessibility. They also provide premium components to help you construct things even faster.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#base-web"&gt;
  &lt;/a&gt;
  &lt;a href="https://baseweb.design/"&gt;Base Web&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It is created, managed, and utilized by Uber.&lt;br&gt;
It includes a wide range of attractive components, with accessibility as the top focus.&lt;br&gt;
It is quick since it is built with the &lt;a href="https://www.styletron.org/"&gt;Styletron&lt;/a&gt; engine. Style overrides can be used to tweak themes, but in my experience, I've never required them because the design vibe they're trying for is precisely what I want.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#geist-ui"&gt;
  &lt;/a&gt;
  &lt;a href="https://react.geist-ui.dev/"&gt;Geist UI&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It is based on the design language of &lt;a href="https://vercel.com/"&gt;Vercel&lt;/a&gt;.&lt;br&gt;
It is without a doubt the most visually appealing library I have ever encountered.&lt;br&gt;
The components are well-made, however they are limited in quantity &amp;amp; I have noticed some accessibility issues. It is quite underappreciated and has a small community.&lt;br&gt;
You may use it for small projects that require a aesthetically pleasing look and feel.&lt;/p&gt;

&lt;p&gt;Here are some more to checkout:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rsuitejs.com/"&gt;React Suite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://seek-oss.github.io/braid-design-system/"&gt;Braid Design System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://v2.grommet.io/"&gt;Grommet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rebassjs.org/"&gt;Rebass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://react-bootstrap.github.io/"&gt;React Bootstrap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>ui</category>
      <category>components</category>
      <category>webdev</category>
    </item>
    <item>
      <title>First Flask app!</title>
      <author>Morris Mulitu</author>
      <pubDate>Wed, 11 Aug 2021 13:04:12 +0000</pubDate>
      <link>https://dev.to/mulitu/first-flask-app-3olk</link>
      <guid>https://dev.to/mulitu/first-flask-app-3olk</guid>
      <description>&lt;p&gt;If you want to build a web app in Python then it is highly likely that you will use a framework!. A &lt;a href="https://www.fullstackpython.com/web-frameworks.html"&gt;framework&lt;/a&gt; "is a code library that makes a developer's life easier when building reliable, scalable, and maintainable web applications" Flask is such a framework in Python.&lt;/p&gt;

&lt;p&gt;Flask is relatively a new framework. It has however taken the python web development world by storm. It has become quite popular. It is offering alot of extensibility, flexibility and clean code possibilities. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-flask"&gt;
  &lt;/a&gt;
  Why Flask?
&lt;/h2&gt;

&lt;p&gt;Flask is thought to be more pythonic than &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; due to the fact that the equivalent Flask web application is more explicit. Ideally, it is also easier to get started with for beginners. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hello-world-with-flask"&gt;
  &lt;/a&gt;
  Hello, World! with Flask
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello, World!'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install the Flask library. This code will show "Hello, World!" on localhost port 5000 if you run it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flask-startup"&gt;
  &lt;/a&gt;
  Flask startup!
&lt;/h2&gt;

&lt;p&gt;You can install the Flask package from PPI &lt;br&gt;
&lt;a href="https://pypi.python.org/"&gt;(Python Package Index)&lt;/a&gt;&lt;br&gt;
First make a directory eg, &lt;strong&gt;flask_todo&lt;/strong&gt; and then have the &lt;strong&gt;flask&lt;/strong&gt; package installed. Also install &lt;a href="https://flask-sqlalchemy.palletsprojects.com/en/2.x/"&gt;&lt;strong&gt;flask-sqlalchemy&lt;/strong&gt;&lt;/a&gt; to facilitate a simpler SQL database connection.&lt;br&gt;
It is best to work in a &lt;a href="https://docs.python.org/3/library/venv.html"&gt;virtual environment&lt;/a&gt;. &lt;br&gt;
Do enter the following commands;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir flask_todo
$ cd flask_todo
$ pipenv install --python 3.6
$ pipenv shell
(flask-someHash) $ pipenv install flask flask-sqlalchemy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just in case you want to make if a Git repo, do run &lt;em&gt;git init&lt;/em&gt; here.This will be the project's root. Just incase you intend to codebase to different machines you can have all the setup files in this directory.&lt;br&gt;
The best way to move it is to turn the codebase into an installable Python distribution. While at the root of the project create a &lt;strong&gt;setup.py&lt;/strong&gt; and a directory &lt;strong&gt;todo&lt;/strong&gt; to hold the source code.&lt;br&gt;
An example of the setup.py is as below;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;find_packages&lt;/span&gt;

&lt;span class="n"&gt;requires&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;'flask'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'flask-sqlalchemy'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'psycopg2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'flask_todo'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'0.0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'A To-Do List built with Flask'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;Your actual name here&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;author_email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;Your actual e-mail address here&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'web flask'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;find_packages&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;include_package_data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;requires&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this you will have all the needed packages in the &lt;strong&gt;requires&lt;/strong&gt; list.Additionally, you'll also have everything you need to set up and install the package in &lt;strong&gt;site-packages&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;todo&lt;/strong&gt; directory, create &lt;strong&gt;&lt;strong&gt;init&lt;/strong&gt;.py&lt;/strong&gt; and &lt;strong&gt;app.py&lt;/strong&gt; files.The &lt;strong&gt;init&lt;/strong&gt;.py file allows you to import from todo as if it was an installed package. The app.py file will be the application's root. Just in case you are using &lt;a href="https://pipenv.pypa.io/en/latest/"&gt;pipenv&lt;/a&gt; you can find your virtual environment with &lt;strong&gt;pipenv --venv&lt;/strong&gt; and set up that environment variable in your environment's &lt;strong&gt;active&lt;/strong&gt; script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export FLASK_APP=$VIRTUAL_ENV/../todo/app.py
export DEBUG='True'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#a-little-code"&gt;
  &lt;/a&gt;
  A little code!
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="s"&gt;"""Print 'Hello, world!' as the response body."""&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello, world!'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a basic Flask application.&lt;em&gt;app&lt;/em&gt; is an instance of Flask taking in the &lt;em&gt;&lt;strong&gt;name&lt;/strong&gt;&lt;/em&gt; of the script file.&lt;br&gt;
&lt;em&gt;app.route&lt;/em&gt; specifies the routes used to access the application.Any view you specify must be decorated by &lt;em&gt;app.route&lt;/em&gt; to be a functional part of the application.In this example, when the app is running and accessed at &lt;em&gt;&lt;a href="http://domainname/"&gt;http://domainname/&lt;/a&gt;&lt;/em&gt;, the user will receive "Hello, World!" as a response.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#connecting-the-database-in-flask"&gt;
  &lt;/a&gt;
  Connecting the database in Flask
&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;flask-sqlalchemy&lt;/em&gt; package connects a SQL database to a Flask application.You need the database URL to connect to a SQL database.You can use Postgres database.The intermediary to talk to the Postgres database is the &lt;em&gt;psycopg2&lt;/em&gt; package.Include it in the list of required packages in &lt;em&gt;setup.py&lt;/em&gt;. The &lt;em&gt;flask-sqlalchemy&lt;/em&gt; will recognize Postgres from the database URL. Flask will need the database URL to be part of its central configuration through the &lt;em&gt;SQLALCHEMY_DATABASE_URI&lt;/em&gt; attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SQLAlchemy&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'SQLALCHEMY_DATABASE_URI'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'postgres://localhost:5432/flask_todo'&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SQLAlchemy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can make use of environment variables to make things easier.They ensures that, no matter what machine the code is on, it will always point tp the right stuff if that stuff is configured in the running environment.&lt;br&gt;
In the same place you declared &lt;em&gt;FLASK_APP&lt;/em&gt;, declare a &lt;em&gt;DATABASE_URL&lt;/em&gt; pointing to the location of your Postgres database. Development tends to work locally, so just point to your local database.&lt;/p&gt;

&lt;p&gt;Your application has a database connection!&lt;/p&gt;

&lt;p&gt;Do enjoy!&lt;/p&gt;

</description>
      <category>python</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to Become a Backend Developer? - Backend Development</title>
      <author>Bikash</author>
      <pubDate>Wed, 11 Aug 2021 13:00:59 +0000</pubDate>
      <link>https://dev.to/inncod/how-to-become-a-backend-developer-backend-development-37o</link>
      <guid>https://dev.to/inncod/how-to-become-a-backend-developer-backend-development-37o</guid>
      <description>&lt;p&gt;&lt;span&gt;The field of web development has become a hotspot in recent years. With websites gaining more and more traction, organizations have realized that to capture more leads, they need to have a strong online presence. As a result, they seek out talented people who can use the latest technologies to design and develop the best-looking and best-performing web applications for them.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;When it is such a lucrative field, there’s bound to be good money in it. And there indeed is! That’s why it’s only natural that the young generation is attracted to web development as a career. However, wanting to follow a career path and actually pursuing it are two different things. It requires preparation, a series of steps, relevant education, and practice.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;If you’re an aspiring web developer, the first thing you need to know is that there are three categories of web developers – frontend, backend, and full-stack. Depending upon which category of web developer you wish to become, the steps to follow will vary. In this post, we’re going to focus on how to become a backend developer. We’ll be demonstrating every step of the process you need to follow.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;So let’s get started.&lt;/span&gt;&lt;/p&gt;
&lt;h3 id="first-things-first-who-is-a-backend-developer-and-what-does-he-do"&gt;&lt;strong&gt;First things first – Who is a Backend Developer, and what does he do?&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;As you would probably already be aware, in a typical &lt;a href="https://en.wikipedia.org/wiki/Client%E2%80%93server_model" rel="noopener"&gt;client-server architecture&lt;/a&gt;, application data is stored in the server-side and served as output to the client-side. The server-side working of a web application is known as backend. That’s where all the inner working of web applications takes place, and that’s where the work of backend developers lies.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Backend developers are responsible for using &lt;a href="https://www.codelivly.com/what-are-the-top-10-programmings-to-learn-in-2021/"&gt;programming languages&lt;/a&gt; to create the code, which actually makes web applications function the way they’re supposed to. The code that these developers write runs on the webserver. In addition to writing back-end code, such developers are also responsible for developing APIs used by the mobile version of such web applications.&lt;/span&gt;&lt;/p&gt;
&lt;h3 id="how-to-become-a-backend-developer"&gt;&lt;strong&gt;How to become a Backend Developer?&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;Learning back-end development helps you get acquainted with several programming languages, which can help your career a great boost. If you have a basic understanding of how logic works, it can prove to be quite beneficial. If not, you can always enroll for a basic computer language course to obtain exposure to the groundwork. This is only to ensure that you don't fall short at any stage once you set on the path of learning back-end development.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Here are the steps you will need to follow:&lt;/span&gt;&lt;/p&gt;
&lt;h4 id="step-1-be-well-versed-with-the-basics-of-data-structures-algorithm"&gt;&lt;strong&gt;Step 1: Be well versed with the basics of Data Structures &amp;amp; Algorithm&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;Most of the web developers skip this step and move forward to learning frameworks. However, it is always better to know the data structure and algorithm basics. Though not in-depth, you must have a basic idea about the process. You should revise basic Data Structures and Algorithm Stack, Queue, Linked List, Tree, Graph, Hashing, Sorting &amp;amp; Searching Algorithms, and other core concepts of programming.&lt;/span&gt;&lt;/p&gt;
&lt;h4 id="step-2-learn-a-programming-language-and-choose-a-framework"&gt;&lt;strong&gt;Step 2: Learn a Programming Language and choose a Framework.&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;Becoming a web developer takes effort, time, and patience. You cannot expect anyone to learn different coding languages overnight. So, decide on a timeline and the essential basic programming languages that you wish to learn. Learning languages like Python, PHP, Ruby, and JavaScript are sought after in recent times.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;You can go for learning multiple programming languages at once. Remember, the more, the merrier. Also, please be aware that understanding the basics of programming is a must. If you're not already familiar with them, start with languages like C, Java, or Python and try to understand how application logic works, the best practices of coding, etc.&lt;/span&gt;&lt;/p&gt;
&lt;h4 id="step-3-learn-the-basics-of-databases"&gt;&lt;strong&gt;Step 3: Learn the basics of Databases.&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;Adding a database system to your portfolio would be the next logical step. There are many easy to use relational database management systems available from which you can select one. Almost all websites today boast some sort of storage, so learning about databases is always beneficial.&lt;/span&gt;&lt;/p&gt;
&lt;h4 id="step-4-learn-framework-s"&gt;&lt;strong&gt;Step 4: Learn Framework(s)&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;Depending on the programming language you choose, you can learn the basics of at least one framework. Be it Django or Ruby-on-Rails; most frameworks follow the same MVC (Model-View-Controller) principle. Although writing the entire application code in a programming language is permissible, it takes more effort and time and extensive coding. Whereas, using frameworks lets, you create templates and codes which can be reused later. This reduces the lines of code you are required to write. So you become more efficient. That’s why learning a framework is also a good idea.&lt;/span&gt;&lt;/p&gt;
&lt;h4 id="step-5-start-your-practical-training"&gt;&lt;strong&gt;Step 5: Start your practical training.&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;You will not understand how stuff really works until you actually start doing it practically. You need to regularly use the tools and practice to better understand the ethical knowledge you have learned so far. The best way to do this is by working on small projects or assignments. You can start by doing projects like a simple To-do list, simple blog, photo gallery web app, resume builder, basic project management app, etc.&lt;/span&gt;&lt;/p&gt;
&lt;h4 id="step-6-innovate-and-create-something-new"&gt;&lt;strong&gt;Step 6: Innovate and create something new&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;Innovation and original ideas are valued in all fields. Probably the most in the tech field since they can change the entire game. If you already have a start-up or project idea, then you're going great. If not, you still have time to think and work on it.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;It's good to start with building a startup clone. It means that you would clone some products available in the market. Also, you might be interested in the following sites/apps that will be useful.&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span&gt;Buffer — A Smarter Way to Share on Social Media — Scheduling posts for various Social Media channels.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Hello Bar — Simple JavaScript plugin to help you in getting your marketing stuff done.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Airbnb / Fiverr — Marketplace of, anything&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="step-7-hosting-aws-heroku"&gt;&lt;strong&gt;Step 7: Hosting — AWS / Heroku&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span&gt;Now you're ready to spread your wings! Deploy your product on a cloud service provider so it can be accessed from the WWW. AWS can be the first preference as it provides almost a year of free hosting (limited usage).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;You May Also Interested In: &lt;b&gt;&lt;a href="https://www.codelivly.com/web-designers-roadmap-2021/"&gt;Web Designer Roadmap&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;h3 id="did-you-catch-all-of-that"&gt;&lt;strong&gt;Did you catch all of that?&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Well, now that you know how to be a backend developer, it's time to level up the game. Decide if you'd want to do a job as a backend developer or you want to be a freelancer. Becoming a backend developer may also boost your pay in most of the large scale industries. Keeping all these things in mind, work on developing a good resume. As a final takeaway, we’d just like to say that in addition to inculcating the required skills, to be successful as a backend developer, you need to be dedicated, patient, and hard-working.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Happy Coding&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
    </item>
  </channel>
</rss>
