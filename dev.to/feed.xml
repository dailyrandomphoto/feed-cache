<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Integrating Vercel with Doppler: Sync Secrets in Production</title>
      <author>uma victor</author>
      <pubDate>Thu, 07 Oct 2021 13:13:58 +0000</pubDate>
      <link>https://dev.to/umavictor6/integrating-vercel-with-doppler-sync-secrets-in-production-48bf</link>
      <guid>https://dev.to/umavictor6/integrating-vercel-with-doppler-sync-secrets-in-production-48bf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;One of the great benefits of &lt;a href="https://www.doppler.com/"&gt;Doppler&lt;/a&gt; is keeping your project in sync. We want to be able to sync our app wherever we develop and deploy. It only takes a few minutes to integrate the Vercel marketplace with Doppler, and that is what we will be doing in this tutorial&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#goals"&gt;
  &lt;/a&gt;
  Goals
&lt;/h2&gt;

&lt;p&gt;In this tutorial we will learn how to install the &lt;a href="https://www.doppler.com/integrations"&gt;Doppler integration&lt;/a&gt; from Vercel’s new marketplace. Learn how to sync the secrets in your doppler project for deployment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-your-project-to-vercel"&gt;
  &lt;/a&gt;
  Add your Project to Vercel
&lt;/h2&gt;

&lt;p&gt;The first thing we want to do is to login to our doppler account. I won’t be touching the details of creating an account and login into doppler, because I have already done an introduction to doppler in a &lt;a href="https://dev.to/umavictor6/intro-to-doppler-real-life-use-case-4g1a"&gt;previous post&lt;/a&gt;. So once we have logged into &lt;a href="https://www.doppler.com/"&gt;Doppler&lt;/a&gt;, we head over to &lt;a href="https://vercel.com/"&gt;Vercel&lt;/a&gt; and add our project we want to integerate doppler with.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#navigating-to-the-account-homepage"&gt;
  &lt;/a&gt;
  Navigating to the account homepage
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EwIJUxpD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633410861280_project-dashboard.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EwIJUxpD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633410861280_project-dashboard.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have an e-commerce site we want to integrate with Doppler, so we can hide secrets even as we deploy on vercel.&lt;br&gt;
Syncing Doppler with your projects is simple and quick. Just enter the details and you'll be notified when new updates are available. So let’s get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#syncing-secrets-in-doppler-with-vercel"&gt;
  &lt;/a&gt;
  Syncing secrets in doppler with vercel
&lt;/h2&gt;

&lt;p&gt;We want to first authorize Doppler. To do this, we click on the project we want to integrate doppler with, in my case, it’s an e-commerce site called &lt;code&gt;etsy-ecommerce&lt;/code&gt; and then we click on the integrations tab&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ddslKXLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633411583992_projectdash.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ddslKXLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633411583992_projectdash.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In our integeration page, we select vercel:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Co_XA0-H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633411701393_vercel.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Co_XA0-H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633411701393_vercel.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then click on &lt;code&gt;add integeration&lt;/code&gt;, and let Doppler know you want to select a personal account (your vercel account)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3zCyX4Ly--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633425706370_selectvercelaccount.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3zCyX4Ly--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633425706370_selectvercelaccount.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you click continue, you will be prompted to choose the particular project you want to integrate with Doppler from your list of projects in Vercel. Click on &lt;code&gt;Add Integration&lt;/code&gt; and you will be taken to the setup integration page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7GOYuuWU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633425934585_integerationsetup.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7GOYuuWU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633425934585_integerationsetup.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the setup integration page, we key in all our details, choose the project we want to integrate, and the vercel environment we will be deploying to, which is production. Click Setup Integration and your secret for that config will now be automatically synced to Vercel.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YMUfr3ev--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633427403977_vercelenv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YMUfr3ev--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633427403977_vercelenv.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can see all our environmental variables synced with vercel meaning we have successfully integerated doppler with vercel. Also, if we go to our doppler dashboard we can confirm by seeing that it is in sync with vercel. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e92DbsxM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633427628045_vercelinsync.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e92DbsxM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633427628045_vercelinsync.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automatically-trigger-vercel-redeploy"&gt;
  &lt;/a&gt;
  Automatically trigger Vercel re-deploy
&lt;/h2&gt;

&lt;p&gt;In this section we will look at how to automatically trigger a re-deploy in vercel when a secret is changed in doppler. To do this navigate to git in vercel and in our deploy hooks section, we give our hook a name and click the &lt;code&gt;create hook&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7H-JGlDx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633453404692_prodhook.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7H-JGlDx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633453404692_prodhook.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s copy the webhook link and go back to our doppler dashboard. To use the webhook, you have to be part of a subscription with Doppler. Luckily for us, we can access this feature by doing a 30 day subscription without adding our credit card.&lt;br&gt;
Now when we head back to the &lt;code&gt;etsy-ecommerce&lt;/code&gt; project and click on webhooks we get a pop-up to add a new webhook.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cx5Gfzgh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633462640256_webhook.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cx5Gfzgh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633462640256_webhook.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We paste in the link we copied and click on &lt;code&gt;add webhook&lt;/code&gt;. Now we can select through the input that a re-deploy should be triggered when a change is made in production.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JuzI3xC4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633462890078_webhookprod.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JuzI3xC4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633462890078_webhookprod.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now if we make a change to one of our secrets in production, and save it, the change will be instantly reflected in vercel and trigger a deploy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this tutorial we learned how to install the doppler integration from Vercel’s new marketplace. We also learned how to sync the secrets in our Doppler project for deployment.&lt;/p&gt;

</description>
      <category>security</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Rodando projetos x86_64 no Mac M1 (arm64) com UTM</title>
      <author>Joubert RedRat</author>
      <pubDate>Thu, 07 Oct 2021 12:06:08 +0000</pubDate>
      <link>https://dev.to/joubertredrat/rodando-projetos-x8664-no-mac-m1-arm64-com-utm-4h7l</link>
      <guid>https://dev.to/joubertredrat/rodando-projetos-x8664-no-mac-m1-arm64-com-utm-4h7l</guid>
      <description>&lt;p&gt;Desde que a Apple publicou sobre os novos Macs com o chip M1, houve um grande esforço para que vários aplicativos e problemas pudessem rodar na nova arquitetura, que é arm64, diferente da tradicional arquitetura x86_64 dos processadores Intel, AMD e outros, tanto de empresas donas dos softwares proprietários, quanto de comunidades de projetos open source.&lt;/p&gt;

&lt;p&gt;Muito deste ecossistema tem suporte nos Mac M1, porém, alguns projetos ainda apresentam problemas, como alguns projetos baseados em QEMU ou imagens de docker que ainda não tem suporte multi arquitetura, por exemplo.&lt;/p&gt;

&lt;p&gt;Uma forma de poder contornar essa situação é justamente poder executar esses projetos como arquitetura x86_64, e é ai que a virtualização pode nos ajudar.&lt;/p&gt;

&lt;p&gt;Para virtualização, iremos usar o UTM, que já escrevi sobre neste link, &lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/joubertredrat" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5QFfU5cZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Z1clzTGd--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/434421/b9af26ba-b19a-4d70-9392-1dff158a11f4.jpeg" alt="joubertredrat"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/joubertredrat/virtualizacao-nos-mac-m1-sim-com-utm-3l90" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Virtualização nos Mac M1? Sim, com UTM&lt;/h2&gt;
      &lt;h3&gt;Joubert RedRat ・ Oct 4 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#m1&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#virtualization&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#macbook&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Então, vou assumir que você já tenha o UTM instalado no seu Mac M1, então vamos lá.&lt;/p&gt;

&lt;p&gt;Para este artigo, vamos usar o Ubuntu 20.04 server, então você pode fazer o download no site da Canonical, ou direto no link abaixo, porém, você pode usar a distro de sua preferência.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://releases.ubuntu.com/20.04/ubuntu-20.04.3-live-server-amd64.iso"&gt;https://releases.ubuntu.com/20.04/ubuntu-20.04.3-live-server-amd64.iso&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#criando-a-m%C3%A1quina-virtual"&gt;
  &lt;/a&gt;
  Criando a máquina virtual
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Vamos criar nossa máquina virtual clicando no ícone "+" e depois em "Start from Scratch".&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ui03UTgx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/um38vpl7s9gk3wy9ri28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ui03UTgx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/um38vpl7s9gk3wy9ri28.png" alt="Criando nova máquina virtual no UTM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Na aba "Information" você vai configurar o nome e o ícone da máquina virtual conforme desejar.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i2AOBMAd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/35wdgyv3nidqcy5c1db7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i2AOBMAd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/35wdgyv3nidqcy5c1db7.png" alt="Configurando informações da máquina virtual"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Na aba "System" vem a parte importante, em "Architecture", selecione a opção "x86_64", a opção "System" logo abaixo será alterado automaticamente. Na opção "Memory" você vai selecionar a quantidade de memória que a máquina virtual deverá ter. O mínimo para conseguir rodar é 768Mb, porém, recomendo fortemente que coloque 1Gb ou mais.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b3QRIzks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3y6om1qq4zuv7mj3qy81.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b3QRIzks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3y6om1qq4zuv7mj3qy81.png" alt="Configurando arquitetura e memória da máquina virtual"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Na aba "Drives", você irá criar um disco rígido e uma unidade de CD/DVD. Eu recomendo fortemente criar um disco com pelo menos 30 Gb ou mais.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GKqV58nE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z0cwt8rf9yi66v7tpt0w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GKqV58nE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z0cwt8rf9yi66v7tpt0w.png" alt="Criação de disco rígido da máquina virtual"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b7po9qbx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/35wpzvlnaxdcegdm2fk5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b7po9qbx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/35wpzvlnaxdcegdm2fk5.png" alt="Criação de unidade de CD/DVD da máquina virtual"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D_T79DO9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ybeg00io3anqtjmz9tf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D_T79DO9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ybeg00io3anqtjmz9tf.png" alt="Disco rígido e unidade de CD/DVD da máquina virtual"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Na aba "Network", você irá criar um redirecionamento de portas, para que possamos acessar a máquina via SSH.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AlXfX8hI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fj05chkj3dy5khazgprw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AlXfX8hI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fj05chkj3dy5khazgprw.png" alt="Adicionando redirecionamento de portas da máquina virtual"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vFg6P6zJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1x157v0gz7fchi49j9p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vFg6P6zJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1x157v0gz7fchi49j9p.png" alt="Redirecionamento de portas da máquina virtual"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vale lembrar que você pode fazer redirecionamento de outras portas que desejar.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Por fim, só clicar em "Save" e pronto, sua máquina virtual estará criada.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mV4JQzDh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ntmurd97mqnx3a6trf6g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mV4JQzDh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ntmurd97mqnx3a6trf6g.png" alt="Máquina virtual criada"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Na parte inferior das informações da máquina virtual existe um select na opção de CD/DVD, você irá selecionar a ISO da distro que você escolheu, o que no nosso caso, é o Ubuntu Server 20.04.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q3g9eYzq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sbz9y1fpcl1z3m55rohd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q3g9eYzq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sbz9y1fpcl1z3m55rohd.png" alt="Máquina virtual com a ISO da distro selecionada"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Agora é só executar a máquina virtual e instalar a distro linux.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_g-GQNnl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0x6s47glbp8onmi0xxpz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_g-GQNnl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0x6s47glbp8onmi0xxpz.png" alt="Instalando linux na máquina virtual"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testando-a-m%C3%A1quina-virtual"&gt;
  &lt;/a&gt;
  Testando a máquina virtual
&lt;/h3&gt;

&lt;p&gt;Agora que você instalou sua máquina virtual, basta acessar ela por SSH e você verá que na máquina virtual, estará rodando um sistema x86_64, como na imagem abaixo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XPk-g7Hd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ow1bof85b0dcqygfidm1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XPk-g7Hd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ow1bof85b0dcqygfidm1.png" alt="Terminal ssh na máquina virtual"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hora-da-prova-de-fogo"&gt;
  &lt;/a&gt;
  Hora da prova de fogo
&lt;/h3&gt;

&lt;p&gt;Para a o exemplo da prova de fogo estou usando o docker e o container de um projeto chamado Kafdrop, que basicamente é uma Web UI para Kafka feito em Java e que também merece uma estrela no GitHub, &lt;del&gt;mesmo que tenha sido feito em java haha&lt;/del&gt; o repositório do projeto está abaixo. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/obsidiandynamics/kafdrop"&gt;https://github.com/obsidiandynamics/kafdrop&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Como o container deste projeto ainda não tem suporte a multi arquitetura, tentamos executar ele como se fosse &lt;code&gt;linux/amd64&lt;/code&gt;, em outros projetos até funciona, mas neste não.&lt;/p&gt;

&lt;p&gt;Como pode ser visto na imagem abaixo, no primeiro console ocorreu o erro &lt;code&gt;qemu: uncaught target signal 11 (Segmentation fault) - core dumped&lt;/code&gt;, pois mesmo tentando forçar x86_64 na arch arm64, neste caso não funciona.&lt;/p&gt;

&lt;p&gt;Porém, no segundo console o projeto executou normalmente, pois se trata de um container x86_64 rodando em uma distro x86_64.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bPQhsb-2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kq54vob71rwzulehep7u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bPQhsb-2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kq54vob71rwzulehep7u.png" alt="container executando no macOS e linux"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ou seja, é perfeitamente possível executar projetos x86_64 mesmo estando com um Mac M1.&lt;/p&gt;

&lt;p&gt;Então é isso pessoas, espero ter ajudado com este artigo e se tiverem mais dúvidas, fiquem a vontade para comentar por aqui mesmo ou me caçando em algum lugar da internet :)&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>virtualization</category>
      <category>arm64</category>
      <category>macbook</category>
    </item>
    <item>
      <title>Create a backend in Javascript (part 4): Create your first HTTP Server</title>
      <author>Eric The Coder</author>
      <pubDate>Thu, 07 Oct 2021 12:00:32 +0000</pubDate>
      <link>https://dev.to/ericchapman/create-a-backend-in-javascript-part-4-create-your-first-http-server-5k1</link>
      <guid>https://dev.to/ericchapman/create-a-backend-in-javascript-part-4-create-your-first-http-server-5k1</guid>
      <description>&lt;p&gt;Here is a series of articles to help you create backend applications in Javascript.&lt;/p&gt;

&lt;p&gt;Node.js is now a must, so it is essential for a developer to master it.&lt;/p&gt;

&lt;p&gt;I will publish a new article every two days and little by little you will learn everything there is to know about Node.js&lt;/p&gt;

&lt;p&gt;To not miss anything follow me on twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;https://twitter.com/EricTheCoder_&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-http-module"&gt;
  &lt;/a&gt;
  The HTTP module
&lt;/h2&gt;

&lt;p&gt;The HTTP module is a set of functions that allow you to create and manage your own web server.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#reminder-what-is-a-web-server"&gt;
  &lt;/a&gt;
  Reminder: What is a web server?
&lt;/h3&gt;

&lt;p&gt;A web server is a set of hardware and software that allow access to hosted files, web page and database stored on a computer.&lt;/p&gt;

&lt;p&gt;The web server also consists of an HTTP server. HTTP server is software that understands / receives URLs and requests via the HTTP protocol (the protocol used by the browser to display web pages).&lt;/p&gt;

&lt;p&gt;At the simplest level, whenever a browser needs a file or other hosted on a web server, the browser makes the request to the server (it is said to send an HTTP request). When the request reaches the server, the HTTP server processes it and returns the response.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KI6BAhvi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2efhol0cof1mhkerg8xl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KI6BAhvi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2efhol0cof1mhkerg8xl.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In summary, the bottom line is that although an HTTP server may seem complicated, in fact it is just a succession of requests and responses. You will see here below that NodeJS allows you very easily to create an HTTP server and that it is very easy to read a request and send a response.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#creating-an-http-server-with-nodejs"&gt;
  &lt;/a&gt;
  Creating an HTTP server with NodeJS
&lt;/h3&gt;

&lt;p&gt;Here is an example of creating an HTTP server&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Send response&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World from the server&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;localhost&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Server is listening at localhost on port 5000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see line by line the different steps for creating a server&lt;/p&gt;

&lt;p&gt;Loading the HTTP module&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Server creation with a callback function. Note that there are two parameters that are passed to the function: req and res.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;req: will contain info on the incoming request&lt;/li&gt;
&lt;li&gt;res: will be used to define the outgoing response
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// send the response&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World from the server&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;res.end() tells the server that the response is complete and can now be sent&lt;/p&gt;

&lt;p&gt;Starting the server. The server will wait and read the requests that arrive on port 5000.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;localhost&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Server is listening at localhost on port 5000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is an endless loop. Each time a request will be sent to our server at port 5000 (ex: localhost:5000), the server will execute the callback (see previous code block) and therefore in this case send the response 'Hello World from the server'&lt;/p&gt;

&lt;p&gt;If you want to test this server, launch the application&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;node app.js
Server is listening at localhost on port 5000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open your browser and visit localhost:5000&lt;/p&gt;

&lt;p&gt;The message 'Hello World from the server' should display in your browser&lt;/p&gt;

&lt;p&gt;In fact if you visit any page ex: &lt;a href="http://localhost:5000/about"&gt;localhost: 5000/about&lt;/a&gt; the same message will always be displayed.&lt;/p&gt;

&lt;p&gt;It is possible to read the url path of the request ex: /about or /home etc. and return a different response depending on the path.&lt;/p&gt;

&lt;p&gt;The path information is included in the request.&lt;/p&gt;

&lt;p&gt;To read information about the request we will use the 'req' object. which as you know contains all the information of the request.&lt;/p&gt;

&lt;p&gt;Specifically, the url path is in the 'req.url' property&lt;/p&gt;

&lt;p&gt;Here is an example of a small HTTP server which, depending on the url received, displays a different page&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;h1&amp;gt;Home page&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;h1&amp;gt;About page&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;page not found&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;    
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;localhost&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Server is listening at localhost on port 5000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#http-headers"&gt;
  &lt;/a&gt;
  HTTP Headers
&lt;/h3&gt;

&lt;p&gt;HTTP Headers allow the client and the server to pass additional information along with the request or response.&lt;/p&gt;

&lt;p&gt;For example, the Header of a request could contain the format of its content ex. HTML or JSON and / or related information for user authentication.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#response-header-example"&gt;
  &lt;/a&gt;
  Response Header example
&lt;/h3&gt;

&lt;p&gt;To add a header to the response, we need to add a function before the res.end() function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeHead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text/html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;h1&amp;gt;Page not found&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The writeHead function allows you to specify the content type of the message, either 'text/html'&lt;/p&gt;

&lt;p&gt;When running the res.end() function NodeJS will include the Header to the response.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#your-first-http-server"&gt;
  &lt;/a&gt;
  Your first HTTP server
&lt;/h3&gt;

&lt;p&gt;Voila, you have created your first HTTP server. Although this is a very basic server for the moment, remember that an HTTP server is simply a succession of requests and responses.&lt;/p&gt;

&lt;p&gt;So, in its simplest form, your web application will do just that. That is to say, process requests and return responses.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introduction-to-expressjs"&gt;
  &lt;/a&gt;
  Introduction to ExpressJS
&lt;/h3&gt;

&lt;p&gt;Although NodeJS allows us to create our own HTTP server, to create a real web application we would have to code hundreds or even thousands of lines of code in order to handle all the possibilities and all the exceptions.&lt;/p&gt;

&lt;p&gt;Fortunately for us there are several NodeJS libraries / frameworks that do this job for us.&lt;/p&gt;

&lt;p&gt;The most popular of all is ExpressJS. ExpressJS is a framework (set of libraries) designed with NodeJS in order to greatly simplify web application development.&lt;/p&gt;

&lt;p&gt;So we will see in detail later how to use ExpressJS in our NodeJS applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's all for today, follow me on twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;https://twitter.com/EricTheCoder_&lt;/a&gt; to be notified of the publication of the next article (within two days).&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Créer un backend en Javascript (partie 4) : Créer un serveur HTTP avec NodeJS</title>
      <author> Eric Le Codeur</author>
      <pubDate>Thu, 07 Oct 2021 11:51:52 +0000</pubDate>
      <link>https://dev.to/ericlecodeur/creer-un-backend-en-javascript-partie-4-creer-un-serveur-http-avec-nodejs-34ab</link>
      <guid>https://dev.to/ericlecodeur/creer-un-backend-en-javascript-partie-4-creer-un-serveur-http-avec-nodejs-34ab</guid>
      <description>&lt;p&gt;Voici une série d'articles qui vous permettra créer des applications backend en Javascript.&lt;/p&gt;

&lt;p&gt;Node.js est aujourd'hui un incontournable, il est donc essentiel pour un développeur de le maitriser.&lt;/p&gt;

&lt;p&gt;Je vais donc publier un nouvel article environ au deux jours et petit à petit vous apprendrez tout ce qu'il y a à savoir sur Node.js&lt;/p&gt;

&lt;p&gt;Pour ne rien manquer suivez moi sur twitter : &lt;a href="https://twitter.com/EricLeCodeur"&gt;https://twitter.com/EricLeCodeur&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#le-module-http"&gt;
  &lt;/a&gt;
  Le module HTTP
&lt;/h2&gt;

&lt;p&gt;Le module HTTP est un ensemble de fonctions qui permettent de créer et gérer votre propre serveur web. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#rappel-questce-quun-serveur-web-"&gt;
  &lt;/a&gt;
  Rappel: Qu'est-ce qu'un serveur web ?
&lt;/h3&gt;

&lt;p&gt;Un serveur web est un ensemble matériel et logiciel qui permettent l'accès aux fichiers hébergés, page web et base de données stocké sur un ordinateur. &lt;/p&gt;

&lt;p&gt;Le serveur web est constitué en autre d'un serveur HTTP. Le serveur HTTP est un logiciel qui comprend/reçoit les URL et les requêtes via le protocole HTTP (le protocole utilisé par le navigateur pour afficher les pages web).&lt;/p&gt;

&lt;p&gt;Au niveau le plus simple, à chaque fois qu'un navigateur a besoin d'un fichier ou autre hébergé sur un serveur web, le navigateur fait la demande au serveur (on dit qu'il envoie une requête HTTP). Quand la requête atteint le serveur, le serveur HTTP la traite et renvoie le réponse.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZQ-s4pdv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cg8p3lgmm1guuy4rbypq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZQ-s4pdv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cg8p3lgmm1guuy4rbypq.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;En résumé, ce qu'il faut retenir c'est que bien que un serveur HTTP peut semblé compliqué, en faite ce n'est qu'un succession de requêtes et réponses. Vous verrez ici bas que NodeJS vous permet très facilement de créer un serveur HTTP et qu'il est très facile d'y lire une requête et d'envoyer une réponse&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#cr%C3%A9ation-dun-serveur-http-avec-nodejs"&gt;
  &lt;/a&gt;
  Création d'un serveur HTTP avec NodeJS
&lt;/h3&gt;

&lt;p&gt;Voici un exemple de création d'un serveur HTTP&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// envoi la réponse au client&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World from the server&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;localhost&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Server is listening at localhost on port 5000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voyons ligne par ligne les différentes étapes pour la création d'un serveur&lt;/p&gt;

&lt;p&gt;Chargement du module HTTP&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Création du serveur  avec une fonction callback. À noter qu'il y a deux paramètres qui sont passé à la fonction: req et res. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;req : contiendra des info sur la requête entrante&lt;/li&gt;
&lt;li&gt;res : servira à définir la réponse sortante
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// envoi la réponse au client&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World from the server&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;res.end() indique au serveur que la réponse est complète et peut maintenant être envoyé&lt;/p&gt;

&lt;p&gt;Démarrage du serveur. Le serveur va attendre et lire les requêtes qui arriveront sur le port 5000.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;localhost&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Server is listening at localhost on port 5000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Il s'agit ici d'une boucle sans fin. Chaque fois qu'une requête sera envoyé sur notre serveur au port 5000 (ex: localhost:5000), le serveur va exécuter le callback (voir bloc de code précédant) et donc dans ce cas ci envoyer la réponse 'Hello World from the server'&lt;/p&gt;

&lt;p&gt;Si vous désirez tester ce serveur, lancer l'application&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;node app.js
Server is listening at localhost on port 5000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ouvrez votre navigateur et visitez localhost:5000&lt;/p&gt;

&lt;p&gt;Le message 'Hello World from the server' devrait afficher dans votre navigateur&lt;/p&gt;

&lt;p&gt;En faite si vous visitez n'importe quelle page ex:  &lt;a href="http://localhost:5000/about"&gt;localhost:5000/about&lt;/a&gt; le même message sera toujours affiché. &lt;/p&gt;

&lt;p&gt;Il est possible de lire le chemin url de la requête ex: /about ou /home etc. et renvoyer une réponse différente selon le chemin. &lt;/p&gt;

&lt;p&gt;L'information sur le chemin est inclut dans la requête. &lt;/p&gt;

&lt;p&gt;Pour lire des infos sur la requête nous allons utiliser l'objet 'req'. qui comme vous savez contient toutes les informations de la requête.&lt;/p&gt;

&lt;p&gt;Plus précisément, le chemin url se trouve dans la propriété 'req.url' &lt;/p&gt;

&lt;p&gt;Voici un exemple d'un petit serveur HTTP qui, selon le url reçu, affiche une page différent&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;h1&amp;gt;Home page&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;h1&amp;gt;About page&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;page not found&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;    
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;localhost&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Server is listening at localhost on port 5000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#http-headers"&gt;
  &lt;/a&gt;
  HTTP Headers
&lt;/h3&gt;

&lt;p&gt;Les HTTP Headers permettent au client et au serveur de transmettre des informations supplémentaires avec la requête ou la réponse. &lt;/p&gt;

&lt;p&gt;Par exemple, le Header d'une requête pourrait contenir le format de son contenue ex. HTML ou JSON et/ou les informations relative pour l'authentification de l'utilisateur. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exemple-de-response-header"&gt;
  &lt;/a&gt;
  Exemple de Response Header
&lt;/h3&gt;

&lt;p&gt;Pour  ajouter un header à la réponse,  nous devons ajouter une fonction avant la fonction res.end()&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeHead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text/html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;h1&amp;gt;Page not found&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La fonction writeHead permet de spécifier le type de contenu du message soit 'text/html'&lt;/p&gt;

&lt;p&gt;Lors de l'exécution de la fonction res.end() NodeJS inclura le Header à la réponse.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#votre-premier-serveur-http"&gt;
  &lt;/a&gt;
  Votre premier serveur HTTP
&lt;/h3&gt;

&lt;p&gt;Voila, vous avez créé votre premier serveur HTTP. Bien qu'il s'agit pour le moment d'un serveur très basique, n'oubliez pas qu'un serveur HTTP c'est simplement une succession de requêtes et de réponses. &lt;/p&gt;

&lt;p&gt;Donc, dans sa plus simple expression, votre application web, ne fera que cela. C'est à dire traiter des requêtes et renvoyer des réponses. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introduction-%C3%A0-expressjs"&gt;
  &lt;/a&gt;
  Introduction à ExpressJS
&lt;/h3&gt;

&lt;p&gt;Bien que NodeJS nous permet de créer notre propre serveur HTTP, pour créer une vraie application web il faudrait coder des centaines voir des milliers de lignes de code afin de gérer toutes les possibilités et toutes les exceptions.&lt;/p&gt;

&lt;p&gt;Heureusement pour nous il existe plusieurs librairie/framework NodeJS qui font ce travail pour nous.&lt;/p&gt;

&lt;p&gt;Le plus populaire d'entre tous est ExpressJS. ExpressJS est un framework (ensemble de librairies) conçu avec NodeJS afin de simplifier énormément le développement d'application web.&lt;/p&gt;

&lt;p&gt;Nous verrons donc en détail plus tard comment utiliser ExpressJS dans nos applications NodeJS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;C'est tout pour aujourd'hui, suivez moi sur twitter : &lt;a href="https://twitter.com/EricLeCodeur"&gt;https://twitter.com/EricLeCodeur&lt;/a&gt; afin d'être avisé de la parution du prochain article (d'ici deux jours).&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>express</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Liman Eklentilerinde Guzzle İle Express.js  Web API'ına İstek Göndermek</title>
      <author>Mete ARSLAN</author>
      <pubDate>Thu, 07 Oct 2021 11:49:58 +0000</pubDate>
      <link>https://dev.to/aciklab/liman-eklentilerinde-guzzle-i-le-express-js-web-api-ina-i-stek-gondermek-53np</link>
      <guid>https://dev.to/aciklab/liman-eklentilerinde-guzzle-i-le-express-js-web-api-ina-i-stek-gondermek-53np</guid>
      <description>&lt;h1&gt;
  &lt;a href="#liman-eklentilerinde-guzzle-i%CC%87le-expressjs-web-api%C4%B1na-i%CC%87stek-g%C3%B6ndermek"&gt;
  &lt;/a&gt;
  Liman Eklentilerinde Guzzle İle Express.js  Web API'ına İstek Göndermek
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#1-expressjs-i%CC%87le-web-api%C4%B1n-haz%C4%B1rlanmas%C4%B1"&gt;
  &lt;/a&gt;
  1- Express.js İle Web API'ın Hazırlanması
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;"liman" kullanıcısı ile liman sunucusuna bağlandıktan sonra  "home/liman" dosyasına gidin.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Express.js kurulumunu yapın.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  express myapp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Komutu ile projenizi oluşturun.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Web App olarak kullanmayacağımız için "view" ve "public" dosyasını silin.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"routes" dosyasının users.js dosyasını da silebilirisiniz.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3000 numaralı portu kontrol edin. Eğer doluysa express.js çalışmayacaktır.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dolu olması durumunda enviroment değişkeninini değiştirerek yada "bin/www" dosyasında
&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;normalizePort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;3000 değeriyle oynayarak boş bir portta çalıştırın.(Doğru port ataması için Wikipedia'ya bakabilirsiniz.)&lt;/p&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"app.js" dosyasında "view engine setup" "path" ve "userRouter"ın bulunduğu kısımları silin.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"error handler" kısmını tamamen silin yada başka bir hata kontrolü ekleyin. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bittiğin de "app.js" aşağıdaki gibi görülecektir.&lt;br&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;createError&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;anlamlı&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http-errors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cookieParser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cookie-parser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;morgan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;indexRouter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./routes/home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;



  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dev&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlencoded&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;extended&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cookieParser&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="nx"&gt;wikipedia&lt;/span&gt;

  &lt;span class="c1"&gt;// `/home` yerine `/api/v1/users` gibi daha anlamlı isimler de verebilirsiniz. &lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;indexRouter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


  &lt;span class="c1"&gt;// catch 404 and forward to error handler&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;createError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;


  &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-kullan%C4%B1c%C4%B1-i%CC%87simlerinin-eklenmesi-ve-okunmas%C4%B1"&gt;
  &lt;/a&gt;
  2- Kullanıcı İsimlerinin Eklenmesi ve Okunması
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;NOT&lt;/strong&gt;: Bu örneğin basit tutulması için kullanıcılar veritabanında değil memory'de tutulmuştur&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"routes" dizinin altında "home.js" dosyasında kullanıcı eklemek ve kullanıcıları almak için iki route ve bir array oluşturun oluşturun.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;


  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mete&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;arslan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mehmet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;basibuyuk&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ali&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;veli&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}];&lt;/span&gt;


  &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/getNames&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;


  &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/addName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="nx"&gt;konsolda&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;FAILED&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;OK&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;


  &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Kullanıcıları göndermeden önce karşı tarafta da kolay bir şekilde okunması için JSON formatına çevirip gönderin.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Gerçek projelerede "POST" işlemleri için "request" ile gönderilen bilgiye daha ayrıntılı  bir doğrulama yapmanız gerekir. "express-validator" yada başka bir modül kullanabilirsiniz.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bu işlemlerden sonra terminalden projenin olduğu dosyaya gidin ve&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  npm run start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;komutu ile uygulamanızı başlatın.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOT:&lt;/strong&gt;"Nodemon" yada benzeri bir modül ile çalıştırmaya başlarsanız yada uygulamayı kapatıp açarsanız kullanıcıların bulunduğu dizin memory'de olduğu için ilk duruma geri dönecektir.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-liman-eklentisinde-guzzle-i%CC%87le-controller-olu%C5%9Fturulmas%C4%B1"&gt;
  &lt;/a&gt;
  3- Liman Eklentisinde Guzzle İle Controller Oluşturulması
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Eklenti Oluşturulması:&lt;/strong&gt;&lt;a href="https://docs.liman.dev/eklenti-gelistirme/baslangic/yeni-eklenti-olusturma"&gt;https://docs.liman.dev/eklenti-gelistirme/baslangic/yeni-eklenti-olusturma&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Eklenti oluşturulduktan sonra(PHP OOP olarak oluşturun) VSCode ile "/liman/extensions/eklenti_adı" dosyasını açın.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;composer.json&lt;/code&gt; dosyasında require kısmınıa Guzzle'i ekleyin&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;eklemek&lt;/span&gt;&lt;span class="nl"&gt;"require"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"guzzlehttp/guzzle"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^7.0"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;"app/Controllers" altına bir controller oluşturun.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;  &lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

  &lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Controllers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Liman\Toolkit\Shell\Command&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;GuzzleHttp\Client&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


  &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GuzzleTestController&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$client&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;$client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
            &lt;span class="c1"&gt;// Base URI is used with relative requests&lt;/span&gt;
            &lt;span class="s1"&gt;'base_uri'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'10.154.127.120:3001/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="c1"&gt;// You can set any number of default request options.&lt;/span&gt;
            &lt;span class="s1"&gt;'timeout'&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getNames&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;$client&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'GET'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'home/getNames'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;json_decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$response&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getBody&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getContents&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;respond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$contents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;addName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
            &lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'required|string'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'surname'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'required|string'&lt;/span&gt;
        &lt;span class="p"&gt;]);&lt;/span&gt;

        &lt;span class="nv"&gt;$body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;json_encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="s1"&gt;'surname'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"surname"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;


        &lt;span class="nv"&gt;$response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;$client&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s1"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'home/addName'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'body'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'headers'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Content-Type'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'application/json'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nv"&gt;$contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$response&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getBody&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getContents&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;respond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$contents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;"constructor" kısmına oluşturmuş olduğumuz express serverına bağlanmak için bir client oluşturun.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Express.js'ten kullanıcıların bilgisini alacak ve kullanıcı ekleyecek iki metot yazın.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"getNames" metodunda istediğimiz kullanıcılar JSON formatında gelmektedir bu veriyi json_decode ile anlamlı hale getirip respond ile gönderin. Dilerseniz gelen veride bir sorun olması durumunda hata kontrolü de yaptırabilirsiniz.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"addName" metodunda kullanıcıdan da veri alınmaktadır. Alınan veri "validate" fonksiyonu ile doğrulandıktan sonra gönderinin "body" kısmına atamak için "request" fonksiyonunu kullanın.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"client" ile yapılacak olan istek için "$client-&amp;gt;request()" metodunuda header kısmında gönderilen verinin JSON formatında olduğunu belirtin.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"response" Express tarafında işlemin başarılı yada başarısız olmasına göre bir dönüt verecektir.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Son olarak "routes.php" dosyasına yaptığınız metotları ekleyin.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;  &lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
  &lt;span class="n"&gt;eklemekeklemek&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="s2"&gt;"index"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"HomeController@index"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

      &lt;span class="s2"&gt;"get_hostname"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"HostnameController@get"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"set_hostname"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"HostnameController@set"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

      &lt;span class="s2"&gt;"get_guzzletestnames"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"GuzzleTestController@getNames"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"add_guzzletestnames"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"GuzzleTestController@addName"&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-viewin-kodlanmas%C4%B1"&gt;
  &lt;/a&gt;
  4- View'in Kodlanması
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;NOT:&lt;/strong&gt; Yetki problemlerinden dolayı yeni oluşturduğun dosyalar okunamayabiliyor. Oluşturduğunuz dosyaların sahibinin doğru kişi olduğundan emin olun. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;"views" klasörünün altına yapmış olduğumuz Controller'ı çağaracak bir  blade.php dosyası ve kodun daha düzenli olması için JsScript kodlarının bulunduğu dosyaları oluşturun. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;index.blade.php dosyasına bu viewleri ekleyin.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  @extends('layouts.master')

  @section('content')
  &amp;lt;h2 class="text-bold"&amp;gt;{{ __("Deneme2") }}&amp;lt;/h2&amp;gt;

  &amp;lt;ul class="nav nav-tabs" role="tablist" style="margin-bottom: 15px;"&amp;gt;
      &amp;lt;li class="nav-item"&amp;gt;
          &amp;lt;a class="nav-link active" onclick="getHostname()" href="#hostname" data-toggle="tab"&amp;gt;
              &amp;lt;i class="fas fa-server"&amp;gt;&amp;lt;/i&amp;gt; {{ __("Hostname") }}
          &amp;lt;/a&amp;gt;
      &amp;lt;/li&amp;gt;
      &amp;lt;li class="nav-item"&amp;gt;
          &amp;lt;!--onclick kismina her guzzle test paneli sectildiginde tablonun yuklenmesi icin bir fonksiyon ekledim--&amp;gt;
          &amp;lt;a class="nav-link" onclick="guzzleTest()" href="#guzzleTest" data-toggle="tab"&amp;gt;
              &amp;lt;i class="fas fa-server"&amp;gt;&amp;lt;/i&amp;gt; {{ __("Guzzle Test") }}
          &amp;lt;/a&amp;gt;
      &amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;

  &amp;lt;div class="tab-content"&amp;gt;
      &amp;lt;div id="hostname" class="tab-pane active"&amp;gt;
          @include('hostname.main')
      &amp;lt;/div&amp;gt;
      &amp;lt;div id="guzzleTest" class="tab-pane"&amp;gt;
          &amp;lt;!--burada oluşturmuş olduğum view'i ekledim--&amp;gt;
          @include('guzzleTest.main')
      &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  @endsection
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Oluşturmuş olduğunuz blade.php dosyasında tabloyu ve inputları alacak kısmı kodlayın ve son kısmında yazacağımız scriptleri de ekleyin.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"row"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-12 mb-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"users"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"table"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-12 mb-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;onsubmit=&lt;/span&gt;&lt;span class="s"&gt;"addName(); return false;"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"row input-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-md-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"nameInput"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-md-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"surnameInput"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-md-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"addNameButton"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-warning"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Kullanici Ekle&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  @include("guzzleTest.scripts")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getNames&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;showSwal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{{ __('Yükleniyor...') }}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;info&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{{ API('get_guzzletestnames') }}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;final_html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;
                &amp;lt;th&amp;gt;Isim&amp;lt;/th&amp;gt;
                &amp;lt;th&amp;gt;Soyisim&amp;lt;/th&amp;gt;
            &amp;lt;/tr&amp;gt;&amp;lt;/thead&amp;gt;&amp;lt;tbody&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;final_html&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/td&amp;gt;
                &amp;lt;/tr&amp;gt;`&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;

            &lt;span class="nx"&gt;final_html&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

            &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;final_html&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="nx"&gt;Swal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;showSwal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;$nameInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#nameInput&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;$surnameInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#surnameInput&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$nameInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;surname&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$surnameInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;



        &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{{ API('add_guzzletestnames') }}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                    &lt;span class="nx"&gt;getNames&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                    &lt;span class="nx"&gt;$nameInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="nx"&gt;$surnameInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;guzzleTest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;getNames&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Sciptlerin bulunacağı dosya içeriginde panel aktive olduğunda çağırılacak bir fonksiyon yazın.(Bu durumda bu fonksiyon guzzleTest)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Controller içerisinde yazmış olduğumuz metotları çağıracak iki fonksiyon yazın.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bu fonksiyonlardan "getNames" kullanıcı listesini alıp tablo haline çeviriyor.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Controller'a istek göndermek için request fonksiyonu kullanılıyor. Eğer göndereciğiniz istekte veri varsa FormData sınıfından türemiş bir nesne ile ile ekleyip gönderin.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$nameInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;surname&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$surnameInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#github-linkleri"&gt;
  &lt;/a&gt;
  Github Linkleri
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/White-Hare/LimanGuzzleExpressOrnegi-Laravel"&gt;https://github.com/White-Hare/LimanGuzzleExpressOrnegi-Laravel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/White-Hare/LimanGuzzleExpressOrnegi-Express"&gt;https://github.com/White-Hare/LimanGuzzleExpressOrnegi-Express&lt;/a&gt;&lt;/p&gt;

</description>
      <category>liman</category>
      <category>express</category>
      <category>guzzle</category>
    </item>
    <item>
      <title>I'm Joining Amplication with a Vision to Democratize Engineering</title>
      <author>Matan Shidlov</author>
      <pubDate>Thu, 07 Oct 2021 11:41:53 +0000</pubDate>
      <link>https://dev.to/amplication/i-m-joining-amplication-with-a-vision-to-democratize-engineering-385</link>
      <guid>https://dev.to/amplication/i-m-joining-amplication-with-a-vision-to-democratize-engineering-385</guid>
      <description>&lt;p&gt;I've spent the last decade leading technology development, creating real-time low latency AI-based systems, processing billions of requests each day, and helping companies with their software architectures. Through the years, I've been working alongside highly talented software engineers and cloud architects. I've learned to appreciate the value of sound engineering that can make the difference in creating reliable, maintainable, flexible, and scalable software.&lt;br&gt;
Now I'm excited to try and make software architecture and good engineering practices more accessible to all by joining Amplication as VP of engineering.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-unicorns"&gt;
  &lt;/a&gt;
  The Unicorns
&lt;/h2&gt;

&lt;p&gt;In today's economy, what once was an unreachable title "unicorn", became another milestone in companies' way to success. Companies are experiencing hyper-growth, which leads to a severe shortage of talented developers. Any crisis in history (including COVID-19) accelerates evolution and creates new opportunities. The severe lack of gifted developers was a unique opportunity for new people to join the engineering community, and they've been integrated within both big and small organizations. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#good-engineering-is-a-scarce-commodity"&gt;
  &lt;/a&gt;
  Good Engineering Is a Scarce Commodity
&lt;/h2&gt;

&lt;p&gt;Unfortunately, tapping new sources of talent doesn't fill the shortage of experienced engineers who have extensive knowledge and understanding. Senior developers who can mentor inexperienced programmers and create intelligent, robust, scalable, maintainable, and flexible solutions are especially tough to find. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-cost-of-lack-of-good-engineering"&gt;
  &lt;/a&gt;
  The Cost of Lack of Good Engineering
&lt;/h2&gt;

&lt;p&gt;I've had the privilege of helping many companies with consulting on how to architect for scale. I noticed that, in many companies, low engineering standards and poor decisions were impacting business. So many developers today are writing code that "works" but doesn't stand the test of time. The main reason for this phenomenon is lack of knowledge and insufficient training. Writing code that only "works" will not withstand any of the following dynamics:&lt;br&gt;
Logic Changes - adding, removing, and updating business logic&lt;br&gt;
Data Changes - adding, removing, and updating fields and entities&lt;br&gt;
Data Accumulates - what was once thousands of entries grows to hundreds of thousands, millions, and billions&lt;br&gt;
Usage Changes - Getting more and more traffic as a result of growth and usage spikes that leads to uneven loads&lt;br&gt;
Infrastructure Changes - Changes in API's of 3rd party services or products (for example, databases)&lt;br&gt;
Staff changes - Original committers leave and which results in knowledge loss.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#democratization-of-engineering-is-the-need-of-the-hour"&gt;
  &lt;/a&gt;
  Democratization of Engineering Is the Need of the Hour
&lt;/h2&gt;

&lt;p&gt;I have a vision that with Amplication, an open-source low-code platform, we can empower developers. Amplication can take care of those necessities of repetitive code and function as a developer private architect helping implement great software with a solid foundation. In my vision, senior developers will appreciate Amplication as an uncompromising shortcut, and developers at the beginning of their career will find it extremely useful as an enabler tool for quality engineering.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amplication"&gt;
  &lt;/a&gt;
  Amplication
&lt;/h2&gt;

&lt;p&gt;Amplication is an open-source low-code platform for backend and full-stack developers. Amplication's goal is to help developers and empower their code generation. The application code owner is the developer, and Amplication supports the project by providing a robust base. When developing projects with Amplication, developers can create great applications without the nuisance of being "bogged down" with building and maintaining the application's infrastructure and architecture.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#open-as-a-policy"&gt;
  &lt;/a&gt;
  Open as a Policy
&lt;/h2&gt;

&lt;p&gt;What a better way to democratize software engineering than open-sourcing it and building a community around the principles of open engineering. &lt;br&gt;
I'm excited to start this journey with Amplication. I will use this platform to share our architecture decisions, best practices, and coding standards along the way and publicly build Amplication with this great community.&lt;/p&gt;

&lt;p&gt;Please share your experience using Amplication and your vision of how Amplication can help you in your next project.&lt;/p&gt;

&lt;p&gt;I'm always available along with the rest of the team at our Discord channel. So please join, to talk to me about anything.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#github-discord"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/amplication/amplication"&gt;github&lt;/a&gt;, &lt;a href="https://discord.com/invite/Z2CG3rUFnu"&gt;discord&lt;/a&gt;
&lt;/h3&gt;

</description>
      <category>opensource</category>
      <category>programming</category>
      <category>architecture</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Day 8: Positioning buttons over embedded Google Maps</title>
      <author>Masa Kudamatsu</author>
      <pubDate>Thu, 07 Oct 2021 11:39:31 +0000</pubDate>
      <link>https://dev.to/masakudamatsu/day-8-positioning-buttons-over-embedded-google-maps-3d5b</link>
      <guid>https://dev.to/masakudamatsu/day-8-positioning-buttons-over-embedded-google-maps-3d5b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;For a web app that embeds full-screen Google Maps, I position the menu button at the top-left corner of the screen, the search button at the top-right, and the buttons for the app's main features at the bottom-right (as seen in the image at the top of this article). &lt;/p&gt;

&lt;p&gt;For implementation, I use &lt;a href="https://styled-components.com/"&gt;Styled Components&lt;/a&gt; with “&lt;a href="https://css-tricks.com/what-are-design-tokens/"&gt;design tokens&lt;/a&gt;” and &lt;a href="https://css-tricks.com/a-complete-guide-to-data-attributes/#styling"&gt;data attribute selectors&lt;/a&gt; for making CSS code easy to maintain and for speeding up the browser's rendering of these buttons (at least a little bit).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;As explained in the previous article (&lt;a href="https://dev.to/masakudamatsu/day-7-making-buttons-look-like-clouds-for-embedded-google-maps-33po"&gt;&lt;strong&gt;Day 7 of this blog series&lt;/strong&gt;&lt;/a&gt;), I've designed (and written the HTML/CSS code for) a cloud-shaped button for &lt;em&gt;My Ideal Map App&lt;/em&gt;, a web app I'm currently making to improve the UX of Google Maps.&lt;/p&gt;

&lt;p&gt;Now I need to decide how many of, and which kinds of, buttons to display on the app's main user interface, with the appropriate choice of button labels (which will be described in Section 1 below). &lt;/p&gt;

&lt;p&gt;Then, I need to design the layout of these four buttons, with the least amount of friction with the user's mental model (Section 2). &lt;/p&gt;

&lt;p&gt;Finally, I need to implement the layout with CSS code, by taking into consideration the speed of rendering the app's UI and the ease of maintaining the code (Section 3).&lt;/p&gt;

&lt;p&gt;This article documents these three steps I've taken, including what I have learned during the process. Hopefully, these pieces of information will help someone who develop their own web app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-four-buttons-and-their-label-icons"&gt;
  &lt;/a&gt;
  1. Four buttons and their label icons
&lt;/h2&gt;

&lt;p&gt;First, I've decided to show &lt;em&gt;four&lt;/em&gt; buttons on the screen immediately after the user logs in to &lt;em&gt;My Ideal Map App&lt;/em&gt;. Beyond four, I believe the user will need to take a moment to figure out which button to tap/click. Too many options will backfire, making us less happy (&lt;a href="https://www.ted.com/talks/barry_schwartz_the_paradox_of_choice"&gt;Schwartz 2005&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w7X7a7et--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m4w5wr1z069ds0tx5si9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w7X7a7et--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m4w5wr1z069ds0tx5si9.jpg" alt="Homer Simpsons is scratching his head, surrounded by dozens of buttons around him"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Homer Simpsons scratches his head, surrounded by dozens of buttons&lt;/strong&gt; (image source: &lt;a href="https://babich.biz/7-rules-of-buttons/"&gt;Babich 2018&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The functions of these four buttons, and their label icons, are as follows.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-search-button"&gt;
  &lt;/a&gt;
  1.1 Search button
&lt;/h3&gt;

&lt;p&gt;The first is the search button. Tapping it will open a search box to find a place of interest. Searching for a place is one of the major features of &lt;em&gt;My Ideal Map App&lt;/em&gt;. It allows the user to find a place of their interest to save. It also allows the user to plan their trip by searching for a destination to discover the saved places around it (see &lt;a href="https://dev.to/masakudamatsu/day-2-finding-design-concept-to-drive-ui-design-process-49g3"&gt;&lt;strong&gt;Day 2 of this blog series&lt;/strong&gt;&lt;/a&gt; for an example of this user experience).&lt;/p&gt;

&lt;p&gt;An alternative is to show a search box at the top of the screen by default, as the Google Maps app does. But the top part of the map will then be hidden beneath the search box. Consequently, the user may miss some places of their interest near the top of the screen. There will be no difference in the number of taps/clicks to start the search if the app automatically focuses on the search box after the search button is tapped/clicked. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;My Ideal Map App&lt;/em&gt; uses the magnifying glass icon as the label of the search button. The magnifying glass icon is so common that the user can immediately tell what the button will do when tapped (&lt;a href="https://www.nngroup.com/articles/magnifying-glass-icon/"&gt;Sherwin 2014&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zBn_SP45--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9x5cqlq7g6x3vnkshl0h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zBn_SP45--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9x5cqlq7g6x3vnkshl0h.png" alt="Magnifying glass icon"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Search icon&lt;/strong&gt; (image source: &lt;a href="https://fonts.google.com/icons?selected=Material+Icons+Outlined:search:"&gt;Material Icons via Google Fonts&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12-save-button"&gt;
  &lt;/a&gt;
  1.2 Save button
&lt;/h3&gt;

&lt;p&gt;The second button is for saving a place of the user's interest. This is another of the major features of &lt;em&gt;My Ideal Map App&lt;/em&gt;, as it allows the user to remember the places of their interest for future (see &lt;a href="https://dev.to/masakudamatsu/day-3-visualizing-design-concept-with-mood-boards-nii"&gt;&lt;strong&gt;Day 3 of this blog series&lt;/strong&gt;&lt;/a&gt; for an example of this user experience). &lt;/p&gt;

&lt;p&gt;While the Google Maps app doesn't explicitly show how to save a place on its main UI, &lt;em&gt;My Ideal Map App&lt;/em&gt; will always show the save button on the map so the user can always start the process of saving a place with one tap. &lt;/p&gt;

&lt;p&gt;As the label of the save button, &lt;em&gt;My Ideal Map App&lt;/em&gt; uses the plus sign icon. It's an icon that we immediately associate with the addition of something to the user's database: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--odIhd0ow--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sr54khuaq1it9zt8vj8f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--odIhd0ow--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sr54khuaq1it9zt8vj8f.png" alt="Plus sign icon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Add icon&lt;/strong&gt; (image source: &lt;a href="https://fonts.google.com/icons?selected=Material%2BIcons%2BOutlined%3Aadd%3A&amp;amp;icon.query=add"&gt;Material Icons via Google Fonts&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13-location-button"&gt;
  &lt;/a&gt;
  1.3 Location button
&lt;/h3&gt;

&lt;p&gt;The third button is for showing the user's current location. Tapping it will enable GPS and show the place where the user is currently standing (or sitting). This button is also part of the core user experiences of &lt;em&gt;My Ideal Map App&lt;/em&gt;, where the user can find the saved places around their current location (see &lt;a href="https://dev.to/masakudamatsu/creating-saas-to-solve-my-own-problem-4gk9"&gt;&lt;strong&gt;Day 1 of this blog series&lt;/strong&gt;&lt;/a&gt; for an example of this user experience).&lt;/p&gt;

&lt;p&gt;While the Google Maps app uses &lt;a href="https://fonts.google.com/icons?selected=Material%2BIcons%2BOutlined%3Anear_me%3A"&gt;a compass needle icon&lt;/a&gt;, &lt;em&gt;My Ideal Map App&lt;/em&gt; uses an airplane takeoff icon often used for indicating the departure gates in the airport. Why? Because seeing our current location on the map is like flying up into the sky and looking down to understand where we are—the idea in line with the design concept of &lt;em&gt;My Ideal Map App&lt;/em&gt;: dyeing a map in the user's hue from the sky (see &lt;a href="https://dev.to/masakudamatsu/day-2-finding-design-concept-to-drive-ui-design-process-49g3"&gt;&lt;strong&gt;Day 2 of this blog series&lt;/strong&gt;&lt;/a&gt; for more detail on the design concept of &lt;em&gt;My Ideal Map App&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u-gdD47Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7l3lwhhpgsirb5fl3n0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u-gdD47Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7l3lwhhpgsirb5fl3n0.png" alt="Airplane taking off"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flight takeoff icon&lt;/strong&gt; (image source: &lt;a href="https://fonts.google.com/icons?selected=Material%2BIcons%2BOutlined%3Anear_me%3A&amp;amp;icon.query=flight%2Btakeoff"&gt;Material Icons via Google Fonts&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#14-menu-button"&gt;
  &lt;/a&gt;
  1.4 Menu button
&lt;/h3&gt;

&lt;p&gt;The last button is for showing the menu of other features of the map. Less important features of an app are best tucked away in the hidden menu which will be opened by clicking/tapping the menu button. This way, the user won't be visually distracted when they execute the app's main features.&lt;/p&gt;

&lt;p&gt;Its label should be nothing but the infamous hamburger icon. When it was first introduced to mobile webpage design in the mid-2010s, it stirred controversy (e.g., &lt;a href="https://www.nngroup.com/articles/hamburger-menus/"&gt;Pernice and Budiu 2016&lt;/a&gt;). But since then, so many websites have adopted it as a menu button. I think it's fair to assume that the user understands what those three horizontal stripes represent. Its use is also justified as the menu for secondary features (&lt;a href="https://uxdesign.cc/the-state-of-hamburger-menu-a0a0c0a93aec"&gt;Seno 2019&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6PpdWevp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsqapjo81hi1qn4d4w2u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6PpdWevp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsqapjo81hi1qn4d4w2u.png" alt="Three horizontal stripes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hamburger icon&lt;/strong&gt; (image source: &lt;a href="https://fonts.google.com/icons?selected=Material+Icons+Outlined:near_me:&amp;amp;icon.query=menu"&gt;Material Icons via Google Fonts&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#15-material-icons"&gt;
  &lt;/a&gt;
  1.5 Material Icons
&lt;/h3&gt;

&lt;p&gt;There are many icon repositories out there, but &lt;a href="https://fontawesome.com/"&gt;Font Awesome&lt;/a&gt; and &lt;a href="https://fonts.google.com/icons"&gt;Material Icons&lt;/a&gt; are the only ones that have all these four icons. Given that &lt;em&gt;My Ideal Map App&lt;/em&gt; embeds Google Maps, Material Icons, designed by Google, is more likely to ensure visual consistency in the user interface. &lt;/p&gt;

&lt;p&gt;So I download the SVG data of these four icons from &lt;a href="https://fonts.google.com/icons"&gt;Google Fonts&lt;/a&gt;, import each to &lt;a href="https://www.sketch.com/"&gt;Sketch&lt;/a&gt; to center-align them over the cloud-shaped button, and export the results as SVG code. (See &lt;a href="https://dev.to/masakudamatsu/day-7-making-buttons-look-like-clouds-for-embedded-google-maps-33po"&gt;&lt;strong&gt;Day 7 of this blog series&lt;/strong&gt;&lt;/a&gt; for how I've written the HTML code for showing buttons with the exported SVG code.)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QcT-yd52--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awtsxapu2zr83n84po0u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QcT-yd52--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awtsxapu2zr83n84po0u.png" alt="A row of four cloud-shaped buttons each of which has an icon label of the magnifying glass, the plus sign, the airplane taking-off, and the three horizontal stripes, respectively"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloud-shaped buttons created with Sketch app&lt;/strong&gt; (image source: author)&lt;/p&gt;

&lt;p&gt;Now buttons are ready. Next, I need to decide which button should be positioned in which part of the user interface.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-positioning-buttons-design-considerations"&gt;
  &lt;/a&gt;
  2. Positioning buttons: design considerations
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#21-search-button"&gt;
  &lt;/a&gt;
  2.1 Search button
&lt;/h3&gt;

&lt;p&gt;First of all, the search button should be placed at the &lt;em&gt;top-right&lt;/em&gt; corner of the screen. &lt;a href="https://www.nngroup.com/articles/magnifying-glass-icon/?lm=search-visible-and-simple&amp;amp;pt=article"&gt;Sherwin (2014)&lt;/a&gt; reports the following user research finding by Nielsen Norman Group:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“People first look to the upper-right corner for search. If they don’t find it there, they start scanning the top of the page.” &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It's a bit old research finding, but as far as I know, many websites and applications still place a search button at the top-right corner. So it's fair to assume that this research finding is still relevant in 2021.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#22-menu-button"&gt;
  &lt;/a&gt;
  2.2 Menu button
&lt;/h3&gt;

&lt;p&gt;The menu button is placed &lt;em&gt;top-left&lt;/em&gt;, following a common pattern of user interface. Some websites place it at top-right, but the search button already occupies the top-right corner of the screen. If the menu button is placed next to a search button, the user may get confused as it's not a common UI pattern. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#23-buttons-for-the-apps-core-features"&gt;
  &lt;/a&gt;
  2.3 Buttons for the app's core features
&lt;/h3&gt;

&lt;p&gt;The remaining two buttons are placed bottom-right, because the user needs to see the entire screen first before deciding whether to press these buttons.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://uxdesign.cc/buttons-placement-and-order-bb1c4abadfcb"&gt;Syzonenko (2019)&lt;/a&gt; argues that buttons at bottom-right make sense when the user scans the screen in a z-shaped manner, while buttons at bottom-left make more sense if the user interface contains just one column of left-aligned UI elements (which induces the F-shaped pattern of the user's eye movement). &lt;/p&gt;

&lt;p&gt;Applying this logic to a map application, the user will scan the map in a z-pattern or possibly diagonally from top-left to bottom-right. The user wants to tap the location button once they learn that the map is showing somewhere else. Or they want to tap the save button once they know a place of their interest is shown on the map. So it makes sense to place these two buttons at the bottom-right corner of the screen. &lt;/p&gt;

&lt;p&gt;For the menu and search buttons, in contrast, the user doesn't need to check what the map is currently showing. When they want to change the user setting, or when they want to search for a place, it doesn't matter which part of the earth the screen is currently showing. So it makes sense to place them at the top of the screen.&lt;/p&gt;

&lt;p&gt;Among the two bottom-right buttons, the location button is placed above the save button. Moving a map to the user's current location is like flying across the sky, and that's why the location button has the flight-takeoff icon on it. It'd be incongruent to this metaphor if the button to trigger this process is "capped" by another button from above.&lt;/p&gt;




&lt;p&gt;The overall design decision has been made. Now it's time to start coding while deciding the detail of button-positioning.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-positioning-buttons-using-styled-components"&gt;
  &lt;/a&gt;
  3. Positioning buttons: using Styled Components
&lt;/h2&gt;

&lt;p&gt;To implement the positioning of buttons as described above with &lt;a href="https://styled-components.com/"&gt;Styled Components&lt;/a&gt; (my favorite CSS-in-JS tool), I'll create a &lt;code&gt;&amp;lt;Button&amp;gt;&lt;/code&gt; component as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="s2"&gt;`
    &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;styleCloudButton&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;positionButton&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
};
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;where &lt;code&gt;styleCloudButton&lt;/code&gt; contains all the other CSS declarations for styling a button (see &lt;a href="https://dev.to/masakudamatsu/day-7-making-buttons-look-like-clouds-for-embedded-google-maps-33po"&gt;&lt;strong&gt;Day 7 of this blog series&lt;/strong&gt;&lt;/a&gt; for detail). In the rest of this article, I'll define the &lt;code&gt;positionButton&lt;/code&gt; variable with the CSS code for positioning a button. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#31-rendering-buttons-over-the-map"&gt;
  &lt;/a&gt;
  3.1 Rendering buttons over the map
&lt;/h3&gt;

&lt;p&gt;The first thing to do with CSS is to make each button shown over the full-screen embedded Google Maps.&lt;/p&gt;

&lt;p&gt;We have the following DOM structure in the HTML code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&amp;lt;/button&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;--&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt; &lt;span class="na"&gt;Menu&lt;/span&gt; &lt;span class="na"&gt;button&lt;/span&gt; &lt;span class="na"&gt;--&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&amp;lt;/button&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;--&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt; &lt;span class="na"&gt;Search&lt;/span&gt; &lt;span class="na"&gt;button&lt;/span&gt; &lt;span class="na"&gt;--&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&amp;lt;/button&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;--&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt; &lt;span class="na"&gt;Current&lt;/span&gt; &lt;span class="na"&gt;location&lt;/span&gt; &lt;span class="na"&gt;button&lt;/span&gt; &lt;span class="na"&gt;--&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&amp;lt;/button&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;--&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt; &lt;span class="na"&gt;Save-a-place&lt;/span&gt; &lt;span class="na"&gt;button&lt;/span&gt; &lt;span class="na"&gt;--&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"map"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;--&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt; &lt;span class="na"&gt;Embedded&lt;/span&gt; &lt;span class="na"&gt;Google&lt;/span&gt; &lt;span class="na"&gt;Maps&lt;/span&gt; &lt;span class="na"&gt;--&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;where I've set the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element (which embeds Google Maps) to spread across the whole screen with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nf"&gt;#map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This CSS code is what &lt;a href="https://developers.google.com/maps/documentation/javascript/overview#HTML5"&gt;Google Maps Platform documentation&lt;/a&gt; recommends.&lt;/p&gt;

&lt;p&gt;To show the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; elements over the &lt;code&gt;&amp;lt;div id="map"&amp;gt;&lt;/code&gt;, they need to be absolutely-positioned" with the "z-index" of 1:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;positionButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="s2"&gt;`
  position: absolute;
  z-index: 1;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As the map occupies the full screen, by default, browsers won't make buttons visible to the user. With &lt;code&gt;position: absolute;&lt;/code&gt;, the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; elements will be lifted up over other HTML elements.&lt;/p&gt;

&lt;p&gt;Plus, &lt;code&gt;z-index:1&lt;/code&gt; is necessary given our DOM structure where the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; elements come before the &lt;code&gt;&amp;lt;div id="map"&amp;gt;&lt;/code&gt;. I initially didn't understand why. But inspecting DevTools, I've learned that  &lt;code&gt;&amp;lt;div id="map"&amp;gt;&lt;/code&gt; is styled with &lt;code&gt;position: relative&lt;/code&gt;. Seems like Google Maps JavaScript API automatically does this. Consequently, the infamously confusing "stacking context" principle applies (see &lt;a href="https://philipwalton.com/articles/what-no-one-told-you-about-z-index/"&gt;Walton 2013&lt;/a&gt;, &lt;a href="https://www.joshwcomeau.com/css/stacking-contexts/"&gt;Comeau 2021b&lt;/a&gt;, for example), where the stacking order of HTML elements with &lt;code&gt;position:relative&lt;/code&gt; and &lt;code&gt;position:absolute&lt;/code&gt; will be based on its position in the HTML code: the first element goes beneath the second one. So the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; elements go beneath the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element. To lift up buttons over the map, we need &lt;code&gt;z-index:1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If we change the order of HTML elements so the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element comes first, we don't need &lt;code&gt;z-index:1&lt;/code&gt;. But I may need to change the order of these elements later, and I'm sure I'll get panicked by having buttons disappear. For future-proof, I think it's best to add &lt;code&gt;z-index:1&lt;/code&gt;.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#32-improving-code-readability-with-design-tokens"&gt;
  &lt;/a&gt;
  3.2 Improving code readability with "design tokens"
&lt;/h3&gt;

&lt;p&gt;The next step is to pick the exact pixel values to position each button relative to the screen edges. I start with the button's clickable area dimension (48px high and 56px wide) and divide these two values with 4 to obtain 12px for y-axis and 14px for x-axis. I use these values to create a space between the buttons and the screen edges, because the layout will look great when dimensions are set with multiples of the same numbers.&lt;/p&gt;

&lt;p&gt;I can hard-code these values into CSS code, but then the code doesn't tell us why I've picked 12px or 14px. This is a long-time headache for me, ever since I learned about CSS. But I realize that I can embed the reasons to choose particular values into CSS code by borrowing an idea of &lt;em&gt;design tokens&lt;/em&gt; (see &lt;a href="https://css-tricks.com/what-are-design-tokens/"&gt;Rendle 2019&lt;/a&gt; for a good introduction; see also &lt;a href="https://specifyapp.com/blog/introduction-to-design-tokens"&gt;Chenais 2021&lt;/a&gt; for how Adobe's Specify app adopts it). &lt;/p&gt;

&lt;p&gt;Specifically, I create a file called &lt;code&gt;designtokens.js&lt;/code&gt; in which I set the dimension values as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dimension&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 100&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;48px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;12px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width 100&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;56px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;14px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way, the code incorporates how I've derived the values of 12px and 14px. &lt;code&gt;48px&lt;/code&gt; is assigned the name of &lt;code&gt;height 100&lt;/code&gt;. A quarter of this length, &lt;code&gt;12px&lt;/code&gt;, is therefore called &lt;code&gt;height 25&lt;/code&gt;. Similarly, &lt;code&gt;56px&lt;/code&gt; is called &lt;code&gt;width 100&lt;/code&gt;. As a quarter of this length, &lt;code&gt;14px&lt;/code&gt; is called &lt;code&gt;width 25&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Incidentally, the above code doesn't exactly follow the &lt;a href="https://design-tokens.github.io/community-group/format/#design-token-0"&gt;recommended syntax of design tokens&lt;/a&gt;, but I think that's fine because I don't plan to use a tool like &lt;a href="https://amzn.github.io/style-dictionary/#/"&gt;Style Dictionary&lt;/a&gt;. I may need to follow the recommended syntax if I decide to create iOS/Android versions of &lt;em&gt;My Ideal Map App&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I can now refactor the code for setting a button's clickable area with these "design tokens":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./designtokens&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setClickableArea&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="s2"&gt;`
  height: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 100&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;;
  width: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width 100&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For your information, the original code for &lt;code&gt;setClickableArea&lt;/code&gt; is described in Section 5 of &lt;a href="https://dev.to/masakudamatsu/day-7-making-buttons-look-like-clouds-for-embedded-google-maps-33po"&gt;&lt;strong&gt;Day 7 of this blog series&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#33-positioning-buttons-at-the-screen-corners"&gt;
  &lt;/a&gt;
  3.3 Positioning buttons at the screen corners
&lt;/h3&gt;

&lt;p&gt;Now, to position the menu button at the top-left corder, I can code like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;positionButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="s2"&gt;`
  position: absolute;
  z-index: 1;
  top: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;;
  left: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It means that the top-left corner of the menu button is 12px down from the top screen edge and 14px to the right of the left screen edge.&lt;/p&gt;

&lt;p&gt;For the other three buttons, I can replace the last two CSS declarations in the above code as follows.&lt;/p&gt;

&lt;p&gt;For the search button at top-right:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]};&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It means that the top-right corner of the button is 12px down from the top screen edge and 14px to the left of the right screen edge.&lt;/p&gt;

&lt;p&gt;For the save button at bottom-right, I need to take into consideration that the embedded Google Maps will show a row of tiny rectangle buttons at the bottom-right corner (which seems to be never disabled):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BvVnHGmO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u2jge9abt98a89jjclqq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BvVnHGmO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u2jge9abt98a89jjclqq.png" alt='A series of four tiny rectangular buttons with the labels of "Keyboard shortcuts", "Map data © 2021", "Terms of Use", "Report a map error"'&gt;&lt;/a&gt; &lt;strong&gt;Bottom-right corner of embedded Google Maps&lt;/strong&gt; (screenshot by the author)&lt;/p&gt;

&lt;p&gt;So I add an extra 12px to the vertical distance between the save button and the bottom edge of the screen. I code like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 50&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]};&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;where I define &lt;code&gt;height 50&lt;/code&gt; to be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dimension&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 100&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;48px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 50&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;24px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;// ADDED&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;12px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width 100&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;56px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;14px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It means that the bottom-right corner of the button is 24px up from the bottom screen edge and 14px to the left of the right screen edge.&lt;/p&gt;

&lt;p&gt;For the current location button:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 175&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]};&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;where &lt;code&gt;height 175&lt;/code&gt; is defined as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dimension&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 175&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;84px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// ADDED&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 100&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;48px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 50&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;24px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;12px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width 100&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;56px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;14px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's the sum of the space between the two buttons (&lt;code&gt;height 25&lt;/code&gt;), the height of the save button (&lt;code&gt;height 100&lt;/code&gt;), and the space below the save button (&lt;code&gt;height 50&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;These CSS declarations will position the four buttons as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mJo1Y3va--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rhcdelxga7vfgxhx9yj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mJo1Y3va--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rhcdelxga7vfgxhx9yj.png" alt="Menu button at top-left, search button at top-right, the other two buttons at top-bottom over the embedded Google Map"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;User interface of &lt;em&gt;My Ideal Map App&lt;/em&gt; at this moment&lt;/strong&gt; (screenshot by the author)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#34-three-ways-of-switching-the-styling-for-positioning-buttons"&gt;
  &lt;/a&gt;
  3.4 Three ways of switching the styling for positioning buttons
&lt;/h3&gt;

&lt;p&gt;However, I haven't finished coding yet. I want to style all the four buttons as the same &lt;code&gt;&amp;lt;Button&amp;gt;&lt;/code&gt; component with only the styling for positioning switched by button.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#approach-1-props"&gt;
  &lt;/a&gt;
  Approach 1: Props
&lt;/h4&gt;

&lt;p&gt;To switch styling for each button, the standard approach with Styled Components is to use props  (see &lt;a href="https://styled-components.com/docs/basics#adapting-based-on-props"&gt;Styled Components Documentation&lt;/a&gt; for detail). For example, to position the menu button and the search button at top-left and top-right, respectively:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Button.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;positionButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="s2"&gt;`
  position: absolute;
  z-index: 1;
  &lt;/span&gt;&lt;span class="p"&gt;${({&lt;/span&gt;&lt;span class="nx"&gt;$topLeft&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;$topLeft&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="s2"&gt;`
    top: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;;
    left: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;;
  `&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;${({&lt;/span&gt;&lt;span class="nx"&gt;$topRight&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;$topRight&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="s2"&gt;`
    top: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;; 
    right: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;; 
  `&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="s2"&gt;`
    &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;styleCloudButton&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;positionButton&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
};
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, when rendering the search button, set the &lt;code&gt;&amp;lt;Button&amp;gt;&lt;/code&gt; component's &lt;code&gt;$topRight&lt;/code&gt; prop to be true:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// SearchButton.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SearchButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="na"&gt;topRight&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;SearchButton&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the menu button, use &lt;code&gt;&amp;lt;Button $topLeft /&amp;gt;&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;Initially I used this approach. However, I learned from &lt;a href="https://calendar.perfplanet.com/2019/the-unseen-performance-costs-of-css-in-js-in-react-apps/"&gt;Arvanitakis (2019)&lt;/a&gt; that such a "dynamic" styled component takes longer to be rendered. It's best to avoid using props for performance: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Some CSS-in-JS libraries will optimize their execution when your CSS has no dependencies on theme or props. The more “static” your tagged  templates are, the higher the chances that your CSS-in-JS runtime will  execute faster.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;—&lt;a href="https://calendar.perfplanet.com/2019/the-unseen-performance-costs-of-css-in-js-in-react-apps/"&gt;Aggelos Arvanitakis (2019)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But how can I switch the style by button without using props? &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#approach-2-css-variables-with-inline-style"&gt;
  &lt;/a&gt;
  Approach 2: CSS variables with inline style
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.joshwcomeau.com/css/styled-components/"&gt;Comeau (2021a)&lt;/a&gt; proposes using CSS variables with inline style (see also &lt;a href="https://www.joshwcomeau.com/react/demystifying-styled-components/"&gt;Comeau 2021c&lt;/a&gt; for why this improves performance). For the search button, it goes something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Button.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;positionButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="s2"&gt;`
  position: absolute;
  z-index: 1;
  top: var(--button-top, auto);     /* REVISED */
  left: var(--button-left, auto);   /* REVISED */
  right: var(--button-right, auto); /* REVISED */
  bottom: var(--button-bottom, auto); /* REVISED */
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="s2"&gt;`
    &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;styleCloudButton&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;positionButton&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
};
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, the &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt;, and &lt;code&gt;right&lt;/code&gt; properties are set with CSS variables. If these variables are not defined elsewhere, the &lt;code&gt;auto&lt;/code&gt; value will be applied (which is the default value for these properties).&lt;/p&gt;

&lt;p&gt;Then we inject the variable definitions as the &lt;code&gt;style&lt;/code&gt; attribute when rendering the &lt;code&gt;Button&lt;/code&gt; component. For the search button, the React code goes like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// SearchButton.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.Button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SearchButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;                                  &lt;span class="c1"&gt;// REVISED&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--button-top&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;  &lt;span class="c1"&gt;// REVISED&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--button-right&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;// REVISED&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'd never used CSS variables (aka. CSS custom properties), but it's increasingly becoming popular among web developers (see &lt;a href="https://epicreact.dev/css-variables"&gt;Dodds 2020&lt;/a&gt;). And the approach described above opened my eyes: CSS variables are NOT the substitute of Styled Components but they are complements! We can benefit from the best parts of both! &lt;/p&gt;

&lt;p&gt;So I decided to spend half a day to learn about it. &lt;a href="https://css-tricks.com/a-complete-guide-to-custom-properties/"&gt;Coyier (2021)&lt;/a&gt; was very helpful.&lt;/p&gt;

&lt;p&gt;But, personally, I don't like the idea that CSS declarations are part of the React component code (i.e, &lt;code&gt;SearchButton.js&lt;/code&gt;). I want all the pieces of information on styling buttons to be in one place, that is, &lt;code&gt;Button.js&lt;/code&gt;. Then I know where to look at in the future if I want to change the styling of buttons.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#approach-3-data-attribute-selectors"&gt;
  &lt;/a&gt;
  Approach 3: Data attribute selectors
&lt;/h4&gt;

&lt;p&gt;I've found a workaround: the use of data attribute selectors (see &lt;a href="https://css-tricks.com/a-complete-guide-to-data-attributes/"&gt;Coyier 2020&lt;/a&gt; for an introductory tutorial). This approach appears to be popular for switching the color scheme between light and dark modes (&lt;a href="https://css-tricks.com/a-complete-guide-to-dark-mode-on-the-web/#dark-mode-in-the-wild"&gt;Adhuham 2020&lt;/a&gt;, &lt;a href="https://epicreact.dev/css-variables/"&gt;Dodds 2020&lt;/a&gt;). &lt;/p&gt;

&lt;p&gt;Take the search button as an example. Render the button in the React code as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// SearchButton.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.Button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SearchButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"top-right"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* REVISED */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I add the &lt;code&gt;data-position&lt;/code&gt; attribute and set its value to be &lt;code&gt;top-right&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;For the menu button, I replace it with &lt;code&gt;&amp;lt;Button data-position="top-left" /&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, when styling the &lt;code&gt;&amp;lt;Button&amp;gt;&lt;/code&gt; component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Button.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;positionButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="s2"&gt;`
  position: absolute;
  z-index: 1;

  /* REVISED FROM HERE */
  &amp;amp;[data-position='top-left'] {
    top: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;;
    left: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;;
  }
  &amp;amp;[data-position='top-right'] {
    top: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;height 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;;
    right: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width 25&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;;
  }
  /* REVISED UNTIL HERE */
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="s2"&gt;`
    &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;styleCloudButton&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;positionButton&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
};
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can repeat this for the other two buttons. &lt;/p&gt;

&lt;p&gt;This way, depending on the value of the &lt;code&gt;data-position&lt;/code&gt; attribute, the &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt;, and &lt;code&gt;right&lt;/code&gt; property values will change, positioning each button at a different location.&lt;/p&gt;

&lt;p&gt;Now all the pieces of information on styling buttons are in one place. Plus, the styling of buttons is applied without running JavaScript code, because all the styling information is already written as CSS. It will speed up the rendering of buttons.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#performance-consequences"&gt;
  &lt;/a&gt;
  Performance consequences
&lt;/h4&gt;

&lt;p&gt;But how much? I deploy the app with Cloudflare Pages for both the versions with props and with the data attribute selectors. Then I test both versions with &lt;a href="https://www.webpagetest.org/"&gt;WebPageTest&lt;/a&gt;. Here are the results (click the link in the caption to see the deployed app):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0z8L45-t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ax0s4i4n4ebwixfyaux4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0z8L45-t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ax0s4i4n4ebwixfyaux4.png" alt="A table of WebPageTest performance results"&gt;&lt;/a&gt; &lt;strong&gt;WebPageTest performance results &lt;a href="https://ec8754af.mima.pages.dev/"&gt;when positioning buttons with props&lt;/a&gt;&lt;/strong&gt; (image source: WebPageTest)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C_NxTLAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17klmgwna93e8u1rcmvg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C_NxTLAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17klmgwna93e8u1rcmvg.png" alt="A table of WebPageTest performance results"&gt;&lt;/a&gt; &lt;strong&gt;WebPageTest performance results &lt;a href="https://23617a33.mima.pages.dev/"&gt;when positioning buttons with data attribute selectors&lt;/a&gt;&lt;/strong&gt; (image source: WebPageTest)&lt;/p&gt;

&lt;p&gt;With data attribute selectors, the rendering speed is slightly improved, with Largest Contentful Paint (LCP) 0.2 seconds faster. &lt;/p&gt;

&lt;p&gt;LCP is one of the &lt;a href="https://web.dev/vitals/#core-web-vitals"&gt;Core Web Vitals&lt;/a&gt;, which affects Google search ranking (&lt;a href="https://developers.google.com/search/blog/2020/05/evaluating-page-experience"&gt;Subramanian 2020&lt;/a&gt;). So it is desirable to have it as short as possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-step"&gt;
  &lt;/a&gt;
  Next step
&lt;/h2&gt;

&lt;p&gt;Making buttons for &lt;em&gt;My Ideal Map App&lt;/em&gt; is not finished yet, however. I need to set their color scheme for the dark mode. And there is a big gotcha for switching the color scheme between light and dark modes, because I use Next.js, a static site generator. Next article will discuss these experiences of mine.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;Adhuham (2020) “&lt;a href="https://css-tricks.com/a-complete-guide-to-dark-mode-on-the-web/"&gt;A Complete Guide to Dark Mode on the Web&lt;/a&gt;”, &lt;em&gt;CSS-Tricks&lt;/em&gt;, Jul 1, 2020.&lt;/p&gt;

&lt;p&gt;Arvanitakis, Aggelos (2019) “&lt;a href="https://calendar.perfplanet.com/2019/the-unseen-performance-costs-of-css-in-js-in-react-apps/"&gt;The unseen performance costs of modern CSS-in-JS libraries in React apps&lt;/a&gt;”, &lt;em&gt;Web Performance Calendar&lt;/em&gt;, Dec 9, 2019.&lt;/p&gt;

&lt;p&gt;Chenais, Louis (2021) “&lt;a href="https://specifyapp.com/blog/introduction-to-design-tokens"&gt;Introduction to design tokens&lt;/a&gt;”, &lt;em&gt;Specify Blog&lt;/em&gt;, May 27, 2021.&lt;/p&gt;

&lt;p&gt;Comeau, Josh (2021a) “&lt;a href="https://www.joshwcomeau.com/css/styled-components/"&gt;The styled-components Happy Path&lt;/a&gt;”, joshwcomeau.com, Feb 21, 2021.&lt;/p&gt;

&lt;p&gt;Comeau, Josh (2021b) “&lt;a href="https://www.joshwcomeau.com/css/stacking-contexts/"&gt;What the heck, z-index??&lt;/a&gt;”, &lt;em&gt;joshwcomeau.com&lt;/em&gt;, Jun 9, 2021.&lt;/p&gt;

&lt;p&gt;Comeau, Josh (2021c) “&lt;a href="https://www.joshwcomeau.com/react/demystifying-styled-components/"&gt;Demystifying styled-components&lt;/a&gt;”, joshwcomeau.com, Jun 27, 2021.&lt;/p&gt;

&lt;p&gt;Coyier, Chris (2020) “&lt;a href="https://css-tricks.com/a-complete-guide-to-data-attributes/"&gt;A Complete Guide to Data Attributes&lt;/a&gt;”, &lt;em&gt;CSS-Tricks&lt;/em&gt;, Feb 17, 2020.&lt;/p&gt;

&lt;p&gt;Coyier, Chris (2021) “&lt;a href="https://css-tricks.com/a-complete-guide-to-custom-properties/"&gt;A Complete Guide to Custom Properties&lt;/a&gt;”, &lt;em&gt;CSS-Tricks&lt;/em&gt;, Apr 27, 2021.&lt;/p&gt;

&lt;p&gt;Dodds, Kent C. (2020) “&lt;a href="https://epicreact.dev/css-variables/"&gt;Use CSS Variables instead of React Context&lt;/a&gt;”, &lt;em&gt;Epic React&lt;/em&gt;, Oct 2020.&lt;/p&gt;

&lt;p&gt;Pernice, Kara, and Raluca Budiu (2016) “&lt;a href="https://www.nngroup.com/articles/hamburger-menus/"&gt;Hamburger Menus and Hidden Navigation Hurt UX Metrics&lt;/a&gt;”, Nielsen Norman Group, Jun 26, 2016.&lt;/p&gt;

&lt;p&gt;Rendle, Robin (2019) “&lt;a href="https://css-tricks.com/what-are-design-tokens/"&gt;What Are Design Tokens?&lt;/a&gt;”, &lt;em&gt;CSS-Tricks&lt;/em&gt;, Apr 3, 2019.&lt;/p&gt;

&lt;p&gt;Schwartz, Barry (2005) “&lt;a href="https://www.ted.com/talks/barry_schwartz_the_paradox_of_choice"&gt;The paradox of choice&lt;/a&gt;”, TED, July 2005.&lt;/p&gt;

&lt;p&gt;Seno, Broto (2019) “&lt;a href="https://uxdesign.cc/the-state-of-hamburger-menu-a0a0c0a93aec"&gt;The state of the hamburger menu&lt;/a&gt;”, &lt;em&gt;UX Collective&lt;/em&gt;, Apr 5, 2019.&lt;/p&gt;

&lt;p&gt;Sherwin, Katie (2014) “&lt;a href="https://www.nngroup.com/articles/magnifying-glass-icon/"&gt;The Magnifying-Glass Icon in Search Design: Pros and Cons&lt;/a&gt;", &lt;em&gt;Nielsen Norman Group&lt;/em&gt;, Feb 23, 2014.&lt;/p&gt;

&lt;p&gt;Subramanian, Sowmya (2020) “&lt;a href="https://developers.google.com/search/blog/2020/05/evaluating-page-experience"&gt;Evaluating page experience for a better web&lt;/a&gt;”, Google Search Central Blog, May 28, 2020.&lt;/p&gt;

&lt;p&gt;Syzonenko, Artem (2019) “&lt;a href="https://uxdesign.cc/buttons-placement-and-order-bb1c4abadfcb"&gt;Buttons on the web: placement and order&lt;/a&gt;”, &lt;em&gt;UX Collective&lt;/em&gt;, May 26, 2019.&lt;/p&gt;

&lt;p&gt;Walton, Philip (2013) “&lt;a href="https://philipwalton.com/articles/what-no-one-told-you-about-z-index/"&gt;What No One Told You About Z-Index&lt;/a&gt;”, philipwalton.com, Jan 15, 2013.&lt;/p&gt;

</description>
      <category>googlemaps</category>
      <category>styledcomponents</category>
      <category>css</category>
      <category>uidesign</category>
    </item>
    <item>
      <title>Development Team You Need to Build an Investment App</title>
      <author>Anna</author>
      <pubDate>Thu, 07 Oct 2021 11:24:56 +0000</pubDate>
      <link>https://dev.to/husievaanna/development-team-you-need-to-build-an-investment-app-194b</link>
      <guid>https://dev.to/husievaanna/development-team-you-need-to-build-an-investment-app-194b</guid>
      <description>&lt;p&gt;Recently I came across the Forbes article that revealed some numbers related to investing. It turned out that investing has become prevalent, and more than 96 million people in the US are active investors. So this information got me thinking about the investment opportunities. Why do people invest and in what way do they actually do it? &lt;/p&gt;

&lt;p&gt;I completed my own research and discovered that people tend to invest because they are worried about their retirement and comfortable living in the near future, they strive to achieve higher level of financial security, and most importantly they want to increase their current wealth. &lt;/p&gt;

&lt;p&gt;And when it comes to the investment ways, it turned out that people prefer using digital helpers - web and mobile applications. So what does it all mean? Simply that investment popularity is growing and there is a huge demand in new custom investment platforms on the fintech market. &lt;/p&gt;

&lt;p&gt;This investment fever can be a perfect business opportunity. By developing an investment solution now and entering the market, a startup company can become highly profitable. &lt;/p&gt;

&lt;p&gt;So when it comes to investment app development, where should you start from? First of all, you need to find a reliable developers team who can guide you through all crucial development steps and deliver a top-notch solution. Speaking about the developers team, you need the following specialists to complete your investment platform: &lt;/p&gt;

&lt;p&gt;Business Analyst - who will complete all necessary researches and help you with the selection of necessary tech stack and app architecture, write technical documentation and project requirements.&lt;/p&gt;

&lt;p&gt;Designer - who is going to provide you first with wireframes of your future solution and its overall design concept, and then create a unique user-friendly design. &lt;/p&gt;

&lt;p&gt;Back-end developers - who will write high-quality code and perform all kinds of necessary integrations. &lt;/p&gt;

&lt;p&gt;HTML\CSS coders - who will be responsible for the front-end part of your solution.&lt;/p&gt;

&lt;p&gt;Quality assurance specialists - whose job will be to perform all kinds of quality, performance and security checks. &lt;/p&gt;

&lt;p&gt;Scrum Master - who will be in charge of all processes and make sure that everything is developed on time and within the discussed budget.  &lt;/p&gt;

&lt;p&gt;And while everything is quite clear with the team that you will need, there still can be one question left in your head. How much custom investment app development may cost in 2021? Well, the final price depends on many factors starting with the app complexity and feature set, and ending with the selection of a platform. &lt;/p&gt;

&lt;p&gt;The price of web and mobile investment apps differ greatly. If you take approximate prices - mobile apps may cost you up to $45,000 per one platform (iOS or Android) and web solutions can be up to $50,000-$75,000. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>startup</category>
      <category>mobile</category>
    </item>
    <item>
      <title>Copy Multiple Lines from different files in Vs Code</title>
      <author>Stacksjar</author>
      <pubDate>Thu, 07 Oct 2021 11:24:41 +0000</pubDate>
      <link>https://dev.to/stacksjar/copy-multiple-lines-from-different-files-in-vs-code-39c6</link>
      <guid>https://dev.to/stacksjar/copy-multiple-lines-from-different-files-in-vs-code-39c6</guid>
      <description>&lt;p&gt;While coding we might have felt a need copying multiple lines of code from different files and folders and paste all together in a single file. We don't have such option in our OS but our VS Code Editor provides an extension by which we can do this very easily and boost our productivity.&lt;/p&gt;

&lt;p&gt;In this post we are going to checkout an amazing extension for visual studio code Multicopy. This software extension lets you copy and paste multiple snippets of code in your workspace. We can copy multiple lines of code from different files using this extension.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9Pqycjic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6moon9t2gt4ui41jpehp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Pqycjic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6moon9t2gt4ui41jpehp.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a simple to use and handy extension which is very useful when you are working in development. It has a feature which allows to add code snippets to the memory called as stack. Then you can easily use and paste the snippets saved in the stack wherever you need. And you can anytime Delete all the saved Snippets from the stack.&lt;/p&gt;

&lt;p&gt;Below are Multicopy Usage Steps.&lt;/p&gt;

&lt;p&gt;1) Read Complete Article Here:- &lt;a href="https://stacksjar.com/post/copy-multiple-lines-from-different-files-in-vs-code"&gt;Copy Multiple Lines from different files in Vs Code&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Set Up a Decentralized Database with React and GunDB</title>
      <author>Saji Wang</author>
      <pubDate>Thu, 07 Oct 2021 11:17:42 +0000</pubDate>
      <link>https://dev.to/codesphere/set-up-a-decentralized-database-with-react-and-gundb-2e5m</link>
      <guid>https://dev.to/codesphere/set-up-a-decentralized-database-with-react-and-gundb-2e5m</guid>
      <description>&lt;p&gt;Earlier this week, &lt;a href="https://codesphere.com/articles/are-dapps-the-future-of-software-6d1ebf10a779"&gt;we spoke about decentralized applications&lt;/a&gt;, and the implications they might have on the future of the web. Now I'm not sure if we at Codesphere have unexpectedly been endowed with the power of prophecy, but only a few hours after publishing our article, Facebook sent the world a massive reminder on the dangers of centralized infrastructure, as a DNS error shut down all their services for nearly 24 hours.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/CodesphereCloud/status/1445075779545706508"&gt;https://twitter.com/CodesphereCloud/status/1445075779545706508&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the major benefits of decentralized apps is that these sorts of infrastructure failures become much rarer. While building a dApp might feel like a monumental endeavor, it's actually not too difficult.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In this tutorial, we're going to build a decentralized Google Docs clone with React and GunDB.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#how-gundb%C2%A0works"&gt;
  &lt;/a&gt;
  How GunDB Works
&lt;/h3&gt;

&lt;p&gt;GunDB is an easy-to-use peer-to-peer decentralized database that will allow you to store data on a network of individual users, instead of a singular server. Each peer in the app's network stores some amount of the web app's data, but in aggregate, the entire network will contain all the necessary information.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iIE4NCIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wlkptglybi6nhgsn358g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iIE4NCIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wlkptglybi6nhgsn358g.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While this approach to decentralized data storage has many similarities to Blockchain, it is important to note that it is its own technology. In fact, just like Blockchain, decentralized databases are a hot topic in Computer Science research. You can learn more about GunDB here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gun.eco/"&gt;https://gun.eco/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While our database could hypothetically run without any kind of additional servers, this is going to require a sufficient number of users to make sure that you can always access enough nodes in the network.&lt;/p&gt;

&lt;p&gt;To account for this, we're going to host our own relay peer that users can connect to even if no one else is using the app.&lt;/p&gt;

&lt;p&gt;In terms of data formatting, every node in our database is going to have a 'soul' which is its unique identifier, and then data stored in a standard JSON format.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#setting-up-our-relay%C2%A0peer"&gt;
  &lt;/a&gt;
  Setting up our Relay Peer
&lt;/h3&gt;

&lt;p&gt;For our relay peer, we are going to create a simple express server that uses the GunDB npm package.&lt;/p&gt;

&lt;p&gt;Install these in a new npm project with:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install express gun&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For our node, we're only going to need one file with the following code:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;This will create our express server and set it up with Gun.&lt;/p&gt;

&lt;p&gt;Keep in mind that in this example we are running everything locally, but for a production-grade app you are going to want to deploy it in the cloud. We of course recommend &lt;a href="https://link.codesphere.com/EL"&gt;Codesphere&lt;/a&gt; to deploy and configure your relay peer with ease.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#setting-up-our-react-application"&gt;
  &lt;/a&gt;
  Setting up Our React Application
&lt;/h3&gt;

&lt;p&gt;Next, we are going to create a React App to interact with a textbox along with other nodes in our network. Again, make sure to install Gun, and then we can do the following in the relevant component:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;And as simple as that, we have a working app!&lt;/p&gt;

&lt;p&gt;We can then run our react app with:&lt;br&gt;
&lt;code&gt;npm start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And our node relay script with&lt;br&gt;
&lt;code&gt;node server.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And now we can edit these live.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7_ikaERu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/elw4d1bbrkxk954gc7i2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7_ikaERu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/elw4d1bbrkxk954gc7i2.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The full project repo can be accessed &lt;a href="https://github.com/LiorB-D/GunJSDemo"&gt;here&lt;/a&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#where-to-go-from%C2%A0here"&gt;
  &lt;/a&gt;
  Where to Go From Here
&lt;/h3&gt;

&lt;p&gt;This is only the tip of the iceberg of what can be accomplished with GunDB and decentralized web technologies. There are countless applications of GunDB in areas like gaming, communication, and Defi. We also haven't even scratched the surface of the data storage, encryption, and P2P features that Gun includes. I encourage you to check out the full documentation here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gun.eco/docs/API"&gt;https://gun.eco/docs/API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Contrary to popular belief, decentralization and cloud aren't mutually exclusive. When dApps are first starting to grow, it's important to use the cloud to maximize your app's efficiency.&lt;/p&gt;

&lt;p&gt;Now when you're choosing your provider, ditch the big tech companies, and come check out what we're building at &lt;a href="https://link.codesphere.com/EL"&gt;Codesphere&lt;/a&gt;, an all-in-one code editor, DevOps toolkit, and cloud provider!&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

</description>
      <category>database</category>
      <category>react</category>
      <category>gundb</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What are the Best NodeJs IDEs that you should consider for app development?
</title>
      <author>Rachael Grey</author>
      <pubDate>Thu, 07 Oct 2021 11:15:24 +0000</pubDate>
      <link>https://dev.to/rachaelgrey3/what-are-the-best-nodejs-ides-that-you-should-consider-for-app-development-2hak</link>
      <guid>https://dev.to/rachaelgrey3/what-are-the-best-nodejs-ides-that-you-should-consider-for-app-development-2hak</guid>
      <description>&lt;p&gt;Node.js is an extremely compelling Java runtime. It has lately become a developer preference due to its expanding use in enterprise-level app development. Node.js can help your app manage asynchronous and parallel connections with ease. &lt;/p&gt;

&lt;p&gt;For this very reason, it is used in the development of high-performance and fast apps. To create smooth and effective Node Js apps, you must use the best IDEs and development tools. So I have composed a list of the best IDEs for &lt;b&gt;Node.js app development&lt;/b&gt; in this blog.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#top-nodejs-ides"&gt;
  &lt;/a&gt;
  Top Nodejs IDEs
&lt;/h2&gt;

&lt;h3&gt;1. Visual Studio Code&lt;/h3&gt;

&lt;p&gt;This IDE is considered the best by many people. It is transparent to use but the code editor is robust that you can download and use for free.&lt;/p&gt;

&lt;h3&gt;2. Sublime Text&lt;/h3&gt; 

&lt;p&gt;It is a NodeJS code editor and IDE. It comprises robust and excellent characteristics such as agile plan switching, split editing, and more.&lt;/p&gt;

&lt;p&gt;Moreover, Sublime Text gives various choices to support you in handling files quicker, which gives you the best performance.&lt;/p&gt;

&lt;h3&gt;3. WebStorm&lt;/h3&gt;

&lt;p&gt;JetBrains' WebStorm is a popular IDE. It includes excellent smart coding help and support and characteristics such as on-the-fly detecting errors, code generators, recompilation, and strong navigation attributes for most JavaScript programming languages, making it perfect for server-side growth with NodeJS.&lt;/p&gt;

&lt;h3&gt;4. Atom&lt;/h3&gt;

&lt;p&gt;Atom IDE is a code editor that you can use on all three working systems. Atom was created with NodeJS with the Github package being its useful feature, allowing developers to work directly with it.&lt;/p&gt;

&lt;h3&gt;5. Cloud9&lt;/h3&gt;

&lt;p&gt;This IDE encourages the development of apps using popular Java frameworks. The code editors and debuggers of Cloud9 are very strong, allowing various vital functions to operate nicely.&lt;/p&gt;

&lt;h3&gt;6. Eclipse&lt;/h3&gt;

&lt;p&gt;This IDE is far more popular than any other technology. It is a code editor with valuable features such as code refactoring, error checking, reference code generation, and code automated build.&lt;/p&gt;

&lt;h3&gt;7. WebMatrix&lt;/h3&gt;

&lt;p&gt;WebMatrix is a great IDE for NodeJS apps. Microsoft has created a cloud-based IDE. Although the device is only open to Windows developers and only supports web development, it allows developers to develop web apps speedily and efficiently using Node.js.&lt;/p&gt;

&lt;p&gt;Node.js development is gaining fame in the IT industry. This technology allows developers to create transparent app. You need to &lt;a href="https://www.bacancytechnology.com/hire-node-developer"&gt;&lt;b&gt;hire nodejs developers&lt;/b&gt;&lt;/a&gt; to use the best IDE for NodeJS development  and also get top-notch development services for your project as well as to earn more profit.&lt;/p&gt;

</description>
      <category>node</category>
      <category>ides</category>
      <category>appdevelopment</category>
      <category>technology</category>
    </item>
    <item>
      <title>[Python] Find the Largest Number From a Array.</title>
      <author>kuldeep_singh</author>
      <pubDate>Thu, 07 Oct 2021 10:58:19 +0000</pubDate>
      <link>https://dev.to/mavensingh/python-find-the-largest-number-from-a-array-54i0</link>
      <guid>https://dev.to/mavensingh/python-find-the-largest-number-from-a-array-54i0</guid>
      <description>&lt;p&gt;In this article we're about to code to get the largest number from array using python.&lt;/p&gt;

&lt;p&gt;Algorithm can't be easy it take time to learn but everyone can learn it how via learning and implementing it, Without implementing algorithms by our own it always seems hard but we should try, to avoid that hesitation let's start writing code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;

def largest( arr, n):
    large = 0
    for x in range(0,n):
        if arr[x] &amp;gt;= large:
            large = arr[x]
            continue
    print(large)


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;so what we've done in the code let's explore one by one&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;we've created a function which takes two arguments, first array 
of integers and second is the length of the array.&lt;/li&gt;
&lt;li&gt;created a variable which is used to hold the largest value&lt;/li&gt;
&lt;li&gt;we're running loop and inside loop we're checking if large 
variable is less then arr[x] then updating the value of large&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For More and you can subscribe me:&lt;br&gt;
&lt;a href="https://kdsingh4.blogspot.com/"&gt;https://kdsingh4.blogspot.com/&lt;/a&gt; &lt;/p&gt;

</description>
      <category>python</category>
      <category>algorithms</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
