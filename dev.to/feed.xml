<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Our Favorite Dev Tools at Codesphere</title>
      <author>Saji Wang</author>
      <pubDate>Mon, 27 Sep 2021 15:54:40 +0000</pubDate>
      <link>https://dev.to/codesphere/our-favorite-dev-tools-at-codesphere-41mb</link>
      <guid>https://dev.to/codesphere/our-favorite-dev-tools-at-codesphere-41mb</guid>
      <description>&lt;p&gt;‚ÄúA good craftsman never blames his tools‚Äù &lt;/p&gt;

&lt;p&gt;In the oh-so-exciting world of tech today there's an endless list of developer tools to choose from. My personal favorite dev tool is the button on my coffee machine!&lt;/p&gt;

&lt;p&gt;It so happens that I recently got a new laptop so it felt like the perfect time to ask the team here at &lt;a href="https://link.codesphere.com/DZ"&gt;Codesphere&lt;/a&gt;, and you guys, what some of the best dev tools out there are.&lt;/p&gt;

&lt;p&gt;So, here are our, and by extension probably some strangers in the comments, favorite dev tools as of September 2021:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#git"&gt;
  &lt;/a&gt;
  "Git."
&lt;/h3&gt;

&lt;p&gt;Git is the most popular version control system in the world, so it's no surprise it was the one-word answer given by our Senior Software Engineer, Mr. Roman Frolov, when I asked what his favorite tool was.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JcyzVPLd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iu8tfdw6m3eamxfta7je.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JcyzVPLd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iu8tfdw6m3eamxfta7je.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the uninitiated out there a version control system, in a nutshell, allows us to manage changes made to our project, track the history of changes, and most importantly, collaborate with others. Version control systems fall into two categories; Centralized and Distributed. &lt;/p&gt;

&lt;p&gt;In a centralized system, each team member connects a central server to get the latest copy of the code and push any changes to it, but the problem here is that if the central server goes down the team is unable to collaborate until the server comes back to life.&lt;/p&gt;

&lt;p&gt;Git is a Distributed system, meaning every team member has a copy of the project and its history on their own machine.¬†&lt;/p&gt;

&lt;p&gt;Git is not the only distributed version control system out there but it is the most popular because it's free, scalable, fast, and open-source. If your git knowledge is lacking, it might be time to get learning. An overwhelmingly large percentage of projects use Git and it should be a mainstay for any dev resume.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#prettier"&gt;
  &lt;/a&gt;
  Prettier
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OvUTamaF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkrhml0jawzgfq3awscp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OvUTamaF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkrhml0jawzgfq3awscp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lazy developers ARE good developers.¬†&lt;/p&gt;

&lt;p&gt;Prettier, one of the early IDE extensions installed for most new devs, is an opinionated code formatter that "enforces a consistent style by parsing your code and reprinting it with its own rules that take the maximum line length into account, wrapping code when necessary."&lt;/p&gt;

&lt;p&gt;It's one of the top 10 most popular Visual Code Studio extensions of 2021 for good reason‚Ää-‚Äähaving a common style guide when working in a dev team is just üëègood üëèpractice.&lt;/p&gt;

&lt;p&gt;Prettier is a fully automated style formatter that will re-shape all your code to adhere to the team style guide after each save, making it easier for other devs to read and keeping the whole project looking slick and professional.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#vim"&gt;
  &lt;/a&gt;
  Vim
&lt;/h3&gt;

&lt;p&gt;Vim is a text editor for code, in which you navigate with your keyboard instead of your mouse. But why? I hear you ask, would you ever want to use a keyboard to navigate everywhere in this modern age of IDEs. Because productivity. &lt;/p&gt;

&lt;p&gt;Every time your hand is moving the mouse your productivity declines, working with Vim keeps your fingers on the keyboard and that means more time writing code. Think of it like learning an instrument, learning to code with Vim is going to be difficult at first but after some practice, you'll be a rockstar. No pain, no gain‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XrsOzoDD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xizghuc9wiz49w0sxy6t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XrsOzoDD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xizghuc9wiz49w0sxy6t.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vim runs on the terminal and is installed on almost every machine. At some point in your coding career, you have probably found yourself dropped into Vim in your terminal with no way to escape? For those who might not know¬†&lt;code&gt;:q&lt;/code&gt; will help you back home in this situation.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#vim-modes"&gt;
  &lt;/a&gt;
  Vim Modes
&lt;/h4&gt;

&lt;p&gt;Vim has a variety of different modes -This isn't a tutorial so we will refrain from diving too deep into each but if you're not familiar with Vim yet, a quick overview might give you a better idea of how it works. &lt;/p&gt;

&lt;p&gt;Being entirely keyboard input there is obviously no mouse used to select specific things you want to interact with. In order to extend the functionality of the keyboard, Vim can be toggled into different modes, each of which has a different feature set.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Normal mode&lt;/strong&gt; is the default mode that Vim starts in and is mostly used for navigation, you'll spend most of your time in this mode using Vim.¬†&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Insert mode&lt;/strong&gt; is next up, this mode will have the most familiar behavior to most newcomers. Any key you press while in this mode will be displayed on the screen, as the name suggests this mode is used for inserting characters.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Visual mode&lt;/strong&gt;, similar to how clicking and dragging work with a mouse, this mode is used to select and apply commands to sections of text.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Command mode&lt;/strong&gt; is used to apply commands that cannot be easily done in normal mode, like replace or find for example.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Last up is &lt;strong&gt;Replace mode&lt;/strong&gt;, used to replace existing text to be replayed by typing over it.¬†&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Designed to help you spend more time writing code instead of editing code, Vim is a team favorite for productivity here at Codesphere. If you're not using it yet, maybe this has aroused your interest, go check it out and let us know in the comments what you think.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#colorzilla"&gt;
  &lt;/a&gt;
  ColorZilla
&lt;/h3&gt;

&lt;p&gt;A simple and common tool in any dev's browser, ColorZilla is a color picker extension for Chrome and Mozilla. Use it to quickly get the hex code for any color in your browsers and copy it directly to your clipboard to be pasted into wherever you need.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--13DA__SU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xpa0tvk4ii4mbyewjfvj.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--13DA__SU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xpa0tvk4ii4mbyewjfvj.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not much to say about this one except that it's a must-have for any dev or designer. Get it installed and get color picking today.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#tabnine"&gt;
  &lt;/a&gt;
  TabNine
&lt;/h3&gt;

&lt;p&gt;A personal favorite of mine when I was learning to code. TabNine is an AI code autocomplete plugin for your IDE, that predicts the line of code you are writing and makes intelligent suggestions for you to choose from. A great time saver and a great way to be a truly lazy developer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HAJc3D0o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gf2bs6gt4oc786w2gyun.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HAJc3D0o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gf2bs6gt4oc786w2gyun.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Similar to Google search word or phrase autocomplete works, as you type a list of suggested options will be provided for you to select from, and with a bit of practice, you can move quickly through previously laborious code blocks.¬†&lt;br&gt;
TabNine is by no means perfect, the suggestions aren't always perfect and the default key to select a suggestion is the same as the default to move to a new line so you can input a suggestion you didn't mean to if you're not paying attention. But overall I recommend giving it a go and seeing how you like it.¬†&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#tooled-up"&gt;
  &lt;/a&gt;
  Tooled up
&lt;/h3&gt;

&lt;p&gt;So these are some of our team's favorite dev tools here at &lt;a href="https://link.codesphere.com/DZ"&gt;Codesphere&lt;/a&gt;, and I'll be sure to use them on my new machine, but what are yours? What dev tools can't you live without? &lt;br&gt;
Maybe we misrepresented your favorite tool somewhere in our list today? Let us know and we can all get a little better together.&lt;/p&gt;

&lt;p&gt;Hopefully, we've turned you on to something new with our suggestions but with the endless list of tools available nowadays there will always be new toys to play with and new ways to make our coding lives a little better. &lt;/p&gt;

&lt;p&gt;Thanks for reading and have a great day, evening, night wherever you are!&lt;/p&gt;

&lt;p&gt;Written by Dan Parry. &lt;/p&gt;

</description>
      <category>tooling</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>coding</category>
    </item>
    <item>
      <title>3D Design: Creating Printable Solid Shapes from SVG Files with Inkscape and FreeCAD</title>
      <author>Erika Heidi</author>
      <pubDate>Mon, 27 Sep 2021 15:52:01 +0000</pubDate>
      <link>https://dev.to/erikaheidi/3d-design-creating-printable-solid-shapes-from-svg-files-with-inkscape-and-freecad-266e</link>
      <guid>https://dev.to/erikaheidi/3d-design-creating-printable-solid-shapes-from-svg-files-with-inkscape-and-freecad-266e</guid>
      <description>&lt;p&gt;In a previous post in this FreeCAD series, we built a pen holder using the Sketcher + Part Design workbenches. In this guide, which is part 3 of a &lt;a href="https://dev.to/erikaheidi/an-introduction-to-3d-design-with-freecad-part-1-navigation-3gjo"&gt;tutorial series about FreeCAD for beginners&lt;/a&gt;, you'll learn how to import an SVG file and transform it into a shape that can be fused into your 3D model.&lt;/p&gt;

&lt;p&gt;To pack in more useful tips, I'll also include how to create an original SVG file from a shape found on the web, using Inkscape. You can skip step 1 if you already have a simple SVG file that you plan on using, but it's useful to learn how to create your own shapes using a software like &lt;a href="https://inkscape.org/"&gt;Inkscape&lt;/a&gt;. This will give you a lot of freedom when designing your original objects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-preparing-the-svg-file"&gt;
  &lt;/a&gt;
  Step 1: Preparing the SVG file
&lt;/h2&gt;

&lt;p&gt;Ideally, your SVG file should have a single shape. If your SVG has multiple shapes, or a hole inside the shape, you'll need to think through each form separately, creating the individual shapes and using the appropriate boolean operations on FreeCAD to get to the result you want. For instance, something with the form of a letter "A" would need an outside shape that would get padded, and another shape to make a pocket or a boolean operation (difference) to remove that portion from inside.&lt;/p&gt;

&lt;p&gt;In this guide, we'll create an SVG file from scratch using Inkscape. Inkscape is a free and open source graphics software that can be used to create vectorized images and export them as SVG and other formats.&lt;/p&gt;

&lt;p&gt;For this example, we're gonna use &lt;a href="https://en.wikipedia.org/wiki/Rebel_Alliance"&gt;Star War's Rebel Alliance logo&lt;/a&gt;, because it's a rather simple shape and of course also because it's pretty cool:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E8qi0OVL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yas6yt3bmsrinl2onqow.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E8qi0OVL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yas6yt3bmsrinl2onqow.png" alt="Star Wars Rebel Alliance Logo. source: Wikipedia"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Source: Wikipedia&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Download the PNG file and open it with Inkscape. In the left tool bar, you'll find the vector tool. It's the one right below the pencil. Use it to draw a vector over the shape:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NMdGYpZb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ou6th9jalqqik9q70n4a.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NMdGYpZb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ou6th9jalqqik9q70n4a.gif" alt="Step 1: Start drawing a vector over the shape"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the initial shape is done, you will probably need to adjust some things. Use the node selection tool (the second tool from top to bottom) to adjust the shape to look more like the original.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AILA-k3I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hr4eibjbf84z59m9t7c.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AILA-k3I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hr4eibjbf84z59m9t7c.gif" alt="Step 2: Adjust the shape to match the original"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you're satisfied, delete the base PNG shape and set the fill color of your vectorized shape to black or any other color. Then, save the file as SVG.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BHjPTM8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ujd6s3nv68ekudcdook9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BHjPTM8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ujd6s3nv68ekudcdook9.gif" alt="Step 3: Save the SVG file"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Can't get the shape right? No worries, vectorizing can be tricky if you are not used to it (but totally worth practicing). You can create a simpler shape using the geometric tools on the left (a square or a circle, for instance, if you just want to practice), or you can &lt;a href="https://erikaheidi.ams3.digitaloceanspaces.com/design3d/rebel_aliance_logo_by_erika.svg"&gt;download my own SVG version of this logo in this link&lt;/a&gt;. Disclaimer: it's not perfect.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-importing-svg-on-freecad"&gt;
  &lt;/a&gt;
  Step 2: Importing SVG on FreeCAD
&lt;/h2&gt;

&lt;p&gt;Now, let's go to FreeCAD. To get started, you'll need to open the pen holder source file that we created in the previous tutorial of this series. In case you don't have that file available to you now, you can &lt;a href="https://erikaheidi.ams3.digitaloceanspaces.com/design3d/freecad_penholder_v01.zip"&gt;download this FreeCAD project file&lt;/a&gt; containing the base penholder object and get started from there. When prompted, select "SVG as Geometry (ImportSVG)" in the dialog box that will appear.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z7ADPW-e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ou5ko4klo0ohneodz11l.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z7ADPW-e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ou5ko4klo0ohneodz11l.gif" alt="importing the svg file into FreeCAD"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This shape is not an actual solid yet on FreeCAD; it is just a path. We'll now move to the "Draft" workbench, where we can turn this path into a sketch. First, we'll use the "Upgrade Shape" tool, which looks like an arrow pointing upwards.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vfL6RMxm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yp7wjv6ase23cd7ad1d2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vfL6RMxm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yp7wjv6ase23cd7ad1d2.gif" alt="Moving to the Draft Workbench and Upgrading shape"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, we'll transform this path into a sketch, using the "Draft to Sketch" tool. This tool has an icon with red and blue shapes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JPEfTeC3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idlootpa25ssvgk3zk19.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JPEfTeC3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idlootpa25ssvgk3zk19.gif" alt="Converting draft to sketch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll notice that a new sketch was created. This sketch's path might not coincide with the positioning of the original path, and that's OK, we'll move it around once we have a solid part. Working with this shape in a separate body will be an easier approach, then we can fuse both parts together later on.&lt;/p&gt;

&lt;p&gt;We'll create a new body, using the "Create New Body" icon on the top tool bar (Part Design Workbench) and move this sketch to it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qSReaTuL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rwp0rlynzn5z3ajikuve.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qSReaTuL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rwp0rlynzn5z3ajikuve.gif" alt="creating a new body"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, we'll use the "Pad" tool from the top tool bar to pad this sketch into a solid.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wDbjXtjO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73trzwc6ut4f8jpuo298.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wDbjXtjO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73trzwc6ut4f8jpuo298.gif" alt="Using the Pad tool"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You now have a solid shape that is already printable. Next, we'll adjust the size and positioning so that we can "glue" this shape on the existing pencil holder.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-adjusting-position-and-size"&gt;
  &lt;/a&gt;
  Step 3: Adjusting Position and Size
&lt;/h2&gt;

&lt;p&gt;Finally, we need to adjust the position and size of the logo so that it fits the external wall of the pen holder. Repositioning and resizing on FreeCAD sometimes can be tricky, so I typically use a combination of different methods to reach the positioning I want. For this example, I used all of these:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#manually-configuring-placement"&gt;
  &lt;/a&gt;
  Manually Configuring Placement
&lt;/h3&gt;

&lt;p&gt;You can set the placement of an object using the "Placement" dialog that can be accessed by selecting the object, then going to the left bottom panel where you find the object settings including positioning.&lt;/p&gt;

&lt;p&gt;In the dialog window that opens up, you can make rotations to the object around the various axis. In my case, I only wanted to move the orientation so that the logo was in the same orientation as the pen holder walls. I changed the X axis to -90 ant that gave me what I wanted.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dt7aKdOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uin2dv62o0onkwd7jqo2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dt7aKdOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uin2dv62o0onkwd7jqo2.gif" alt="Manually moving the logo via object settings - placement"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resizing-a-shape-in-the-draft-workbench"&gt;
  &lt;/a&gt;
  Resizing a Shape in the Draft Workbench
&lt;/h3&gt;

&lt;p&gt;The easiest way I found to resize a shape is to go to the Draft workbench, and use the "Resize" tool. This will in fact generate a clone shape that is a solid and you can use in boolean operations (essentially, what we want). To use that tool, first select the object, than go to the menu "Modification -&amp;gt; Resize". Click on the object again when asked, then a new dialog will show the proportions. Here, I resized to 0,3 (33% or the original size).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BjegTaft--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hsh2y7z5hifntj0auz9t.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BjegTaft--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hsh2y7z5hifntj0auz9t.gif" alt="Resizing a shape in the Draft Workbench"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the clone is created, you can use the "Transform" tool to move and position the logo exactly how you want it. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#visual-repositioning-via-transform"&gt;
  &lt;/a&gt;
  Visual Repositioning via "Transform"
&lt;/h3&gt;

&lt;p&gt;The "transform" tool allows you to move shapes more visually, using a set of arrows that represent all axis. Double-click the shape to access the "transform" controls. You can also move a whole body with the transform tool, by right-clicking the body name at the project list, and clicking on "transform" on the menu that will show up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Be3QimxW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1fv7niax3m41pc6lwg7s.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Be3QimxW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1fv7niax3m41pc6lwg7s.gif" alt="Using the Transform tool"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-fusing-shapes-in-the-part-workbench"&gt;
  &lt;/a&gt;
  Step 4: Fusing Shapes in the Part Workbench
&lt;/h2&gt;

&lt;p&gt;We have our model almost ready now, the only thing left to do is to fuse both parts together. Go to the "Part" Workbench, select the first body (pen holder base) and the cloned, resized version of the logo (it should have an icon that looks like a sheep). Select the "Union" button on the workbench tool bar on the top (the icon looks like two blue circles). Hit "apply" to confirm, and you'll have now the finished model (fusion resulting object).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C-4EjhlT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbvt702ul0e6wh3sgkor.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C-4EjhlT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbvt702ul0e6wh3sgkor.gif" alt="Fusing Shapes in the Part Workbench"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can now export this model to STL and slice it for 3D printing. To export, select the "fusion..." object that was generated in the final step, then go to "File -&amp;gt; Export". Select STL and save the file. You can now open this file with a slicing software.&lt;/p&gt;

&lt;p&gt;This is the final result as printed with our Prusa MK3S:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1W6frfyB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kh47270dkptz4plmmzl3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1W6frfyB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kh47270dkptz4plmmzl3.jpg" alt="Final result after 3D Printed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#print-specs"&gt;
  &lt;/a&gt;
  Print Specs:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;0.20mm layer height&lt;/li&gt;
&lt;li&gt;10% infill&lt;/li&gt;
&lt;li&gt;Filament: Prusament PLA (Galaxy Black)&lt;/li&gt;
&lt;li&gt;No supports, no brim&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If all you want is the final STL file to print, you can &lt;a href="https://www.myminifactory.com/object/3d-print-150408"&gt;download this model for free on MyMiniFactory&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope you have enjoyed this short tutorial series about FreeCAD for beginners. Would you like to see more FreeCAD tutorials here? Leave your suggestion in the comments section!&lt;/p&gt;

&lt;p&gt;See you next time ;)&lt;/p&gt;

</description>
      <category>3d</category>
      <category>freecad</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to use Angular content projection for prepare a burger</title>
      <author>Dany Paredes</author>
      <pubDate>Mon, 27 Sep 2021 15:13:40 +0000</pubDate>
      <link>https://dev.to/danywalls/use-angular-content-projection-for-prepare-a-burger-46pj</link>
      <guid>https://dev.to/danywalls/use-angular-content-projection-for-prepare-a-burger-46pj</guid>
      <description>&lt;p&gt;One of the easiest things is eating a burger, the burger has the same base but changes its content, so let's build our burger component.&lt;/p&gt;

&lt;p&gt;Today‚Äôs we explain how to use ng content to provide an area flexible and multiple slot.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use ng content for content projection.&lt;/li&gt;
&lt;li&gt;Use multiple slot for content projection.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to play with the &lt;a href="https://dev.todemo"&gt;https://burger-angular-content-projection-demo.stackblitz.io&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#our-scenario"&gt;
  &lt;/a&gt;
  Our scenario.
&lt;/h2&gt;

&lt;p&gt;We have a list of ingredients &lt;code&gt;components&lt;/code&gt; to be use for prepare our &lt;code&gt;burger component&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;top-bun&amp;gt;&amp;lt;/top-bun&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;cheese&amp;gt;&amp;lt;/cheese&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;bottom-bun&amp;gt;&amp;lt;/bottom-bun&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;tomato&amp;gt;&amp;lt;/tomato&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;onion&amp;gt;&amp;lt;/onion&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meat&amp;gt;&amp;lt;/meat&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The main idea is create a burger component and put our ingredients inside of him, like a normal burger using two great angular feature content projection.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#content-projection-and-ngcontent"&gt;
  &lt;/a&gt;
  Content Projection and ng-content
&lt;/h2&gt;

&lt;p&gt;Angular allows us to make our component reusable using content projection, it allows declaring an area to be suitable for changes, inside or a component.&lt;/p&gt;

&lt;p&gt;It helps us provide a wrapper, and we define which information or piece is part of the component.&lt;/p&gt;

&lt;p&gt;Using the ng-content tag, we tell to angular to replace the ng-content area with our elements or component.&lt;/p&gt;

&lt;p&gt;To begin, first create the burger component and use the tag ng-content into the template.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;burger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;templateUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./burger.component.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BurgerComponent&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"burger"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ng-content&amp;gt;&amp;lt;/ng-content&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Perfect, step complete, move the ingredients to body of the burger component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;burger&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;top-bun&amp;gt;&amp;lt;/top-bun&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;cheese&amp;gt;&amp;lt;/cheese&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;tomato&amp;gt;&amp;lt;/tomato&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;onion&amp;gt;&amp;lt;/onion&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meat&amp;gt;&amp;lt;/meat&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;bottom-bun&amp;gt;&amp;lt;/bottom-bun&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/burger&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It works, the burger component allow have child elements  components into it and the burge acts as wrapper.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QzhSyaEM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b6r63tk8322ig220vab9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QzhSyaEM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b6r63tk8322ig220vab9.png" alt="Burger complete"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why the meat is not in the middle ? &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#multiple-slots"&gt;
  &lt;/a&gt;
  Multiple slots
&lt;/h2&gt;

&lt;p&gt;All burgers have the meat in the center, we want to be flexible to add components or elements but without break our burger, so the burger component need to render elements but in specific area.&lt;/p&gt;

&lt;p&gt;The ng-content have a optional  property &lt;code&gt;selector&lt;/code&gt;, get the content related to css selector like class or attributes, so we define the areas.&lt;/p&gt;

&lt;p&gt;Update the default burger with the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add top-bun and bottom-bun as default for all burgers.&lt;/li&gt;
&lt;li&gt;3 ng-contents with the selector top, middle and botton&lt;/li&gt;
&lt;li&gt;ng content for the price &lt;/li&gt;
&lt;li&gt;default ng-content for ingredients without location.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"burger"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;top-bun&amp;gt;&amp;lt;/top-bun&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ng-content&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"[top]"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/ng-content&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ng-content&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"[middle]"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/ng-content&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ng-content&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"[bottom]"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/ng-content&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;bottom-bun&amp;gt;&amp;lt;/bottom-bun&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"price"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ng-content&lt;/span&gt; &lt;span class="na"&gt;select=&lt;/span&gt;&lt;span class="s"&gt;"[price]"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/ng-content&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;These ingredients don't have a location&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ng-content&amp;gt;&amp;lt;/ng-content&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have ready our burger component, if some ingredients or piece don't have location it will move to in other div.&lt;/p&gt;

&lt;p&gt;The tomato and the onion don't have attribute so, go to the default ng-content.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Burger with ingredients without location.--&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;burger&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;tomato&amp;gt;&amp;lt;/tomato&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;cheese&lt;/span&gt; &lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/cheese&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meat&lt;/span&gt; &lt;span class="na"&gt;middle&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/meat&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;onion&amp;gt;&amp;lt;/onion&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;4‚Ç¨&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/burger&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2jRAF0aT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cceifdrkk9mx766rsocg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2jRAF0aT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cceifdrkk9mx766rsocg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#done"&gt;
  &lt;/a&gt;
  Done!
&lt;/h2&gt;

&lt;p&gt;We have a reusable component with content projection reusable to build new burgers, also force to elements to be located in a specific area and default location.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://stackblitz.com/edit/burger-angular-content-projection-demo?embed=1&amp;amp;view=preview&amp;amp;" width="100%" height="500"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;That's it! Hopefully, give you a bit of help with ng-content and make your components flexible.&lt;/p&gt;

&lt;p&gt;If you enjoyed this post, share it!&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@haseebjkhan?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Haseeb Jamil&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/burger?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>webdev</category>
    </item>
    <item>
      <title>descargar libro de Laravel 8</title>
      <author>cybert code</author>
      <pubDate>Mon, 27 Sep 2021 15:02:04 +0000</pubDate>
      <link>https://dev.to/cybertcoder/descargar-libro-de-laravel-8-3p34</link>
      <guid>https://dev.to/cybertcoder/descargar-libro-de-laravel-8-3p34</guid>
      <description>&lt;p&gt;laravel es un framework web PHP de c√≥digo abierto y gratuito, creado por Taylor Otwell y destinado al desarrollo de aplicaciones web siguiendo el patr√≥n arquitect√≥nico modelo-vista-controlador (MVC) y basado en Symfony. Algunas de las caracter√≠sticas de Laravel son un sistema de empaquetado modular con un administrador de dependencias dedicado, diferentes formas de acceder a bases de datos relacionales, utilidades que ayudan en la implementaci√≥n y mantenimiento de aplicaciones y su orientaci√≥n hacia el az√∫car sint√°ctico.&lt;br&gt;
por derechos de autor est√° en c√≥digo encriptado.&lt;br&gt;
utilizar el link para traducir el binario =&amp;gt; &lt;a href="https://www.traductorbinario.com/"&gt;https://www.traductorbinario.com/&lt;/a&gt;&lt;br&gt;
Copiar el Binario y Pegar Y traducir&lt;br&gt;
lt;/p&gt;

</description>
      <category>laravel</category>
    </item>
    <item>
      <title>Code to Low-code: It‚Äôs A Happy Journey</title>
      <author>Sherfin Shamsudeen</author>
      <pubDate>Mon, 27 Sep 2021 15:01:12 +0000</pubDate>
      <link>https://dev.to/sherfin94/code-to-low-code-it-s-a-happy-journey-1380</link>
      <guid>https://dev.to/sherfin94/code-to-low-code-it-s-a-happy-journey-1380</guid>
      <description>&lt;p&gt;If you‚Äôre anything like me, then you appreciate what a superpower and privilege it is to write code. Coding, to me, is the ability to pour one‚Äôs ideas, emotions, and feelings into electronic devices and networks. It is a way to make one‚Äôs self manifest in the digital world.&lt;/p&gt;

&lt;p&gt;If you‚Äôre even more like me, then you also worried when you heard about the rising trend of No-code/Low-code products such as Bubble. Because these are the kind of tools that threatens to make developers like you and me invalid. Or at least that was my first impression of them.&lt;br&gt;
However, it would be arrogant of me to assume without trying it out myself. So I went ahead to work with a company named ToolJet(&lt;a href="https://github.com/ToolJet/ToolJet"&gt;https://github.com/ToolJet/ToolJet&lt;/a&gt;) which is building an open-source low code platform to build internal tools for enterprises.&lt;/p&gt;

&lt;p&gt;In addition to building the platform, I was tasked with using the platform to create internal tools for a large enterprise. I ended up delivering them a production-grade application which they now use to record and keep track of their service delivery, all within two weeks.&lt;br&gt;
What should have taken several months of programming effort was done in two weeks, with minimal code. Contrary to what I expected to feel, I now felt even more capable as a developer: developers are now equipped to quickly come up with software products, iterate with several startup ideas without having to write thousands of lines of code. No-code/Low-code tools don‚Äôt relegate developers, it empowers us!&lt;/p&gt;

&lt;p&gt;What the No-code revolution truly represents is perhaps the solution to a fundamental issue that the software development community has not addressed: It has factionalized into several cultures centred on different technologies that attempt to solve the same problems, making it difficult to abstract and automate features every app would need.&lt;br&gt;
Let me try to draw an example: To develop a web front-end, we have React, Angular, Svelte, Vue, and so forth, all philosophizing the greatness of their fundamental technical decisions, which may very well have been made by some developer while he was drunk or stoned. And this, for instance, makes it difficult to build a universal login/sign-up mechanism that developers can just plugin with minimal configuration.&lt;/p&gt;

&lt;p&gt;The bulk of the effort made in building software is currently about finding one‚Äôs way through this mesh of technologies, and in making them all work together, instead of writing code just where it matters. And this is precisely the selling point of low-code.&lt;br&gt;
I started this write-up by sharing my experience, but let me happily upgrade it to an invitation to try out a low-code tool. And while you‚Äôre at it, ToolJet would be a good place to start.&lt;/p&gt;

&lt;p&gt;NB: I use No-code and Low-code interchangeably in this article. However, No-code refers to application development without any code. While it is an ambitious proposition, I‚Äôm personally more inclined towards Low-code as it seems to solve a real issue with software development today, as opposed to No-code which focuses on arming non-coders with software development capability.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>programming</category>
    </item>
    <item>
      <title>Write rust code without english</title>
      <author>Rishit Khandelwal</author>
      <pubDate>Mon, 27 Sep 2021 14:35:09 +0000</pubDate>
      <link>https://dev.to/rishitkhandelwal/write-rust-code-without-english-3id6</link>
      <guid>https://dev.to/rishitkhandelwal/write-rust-code-without-english-3id6</guid>
      <description>&lt;p&gt;You reading the title, might be wondering HOW CAN YOU CODE WITHOUT ENGLISH???? you might think that i could have forked rust and changed the compiler to accept other keywords, but no.&lt;/p&gt;

&lt;p&gt;Rust, being a very awesome language, has a nice handy feature called &lt;strong&gt;Procedural macros&lt;/strong&gt;, with which we can parse code at compile time the way we want. And the other day I came across the &lt;a href="https://github.com/bnjbvr/rouille"&gt;Rouille&lt;/a&gt;, and then i wondered, "hmmm which language i know which i can use to make something like this?", and then i thought lets make a hindi version of this (because i didnt know any other language). But understanding proc_macros and all wasnt something i wanted to do just yet without having the fun of writing some code in hindi.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kb7tIHoM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ur3wv5k567id7gvq5732.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kb7tIHoM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ur3wv5k567id7gvq5732.png" alt="Fork"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-remove-french-words-to-be-replaced-with-hindi-words-gt"&gt;
  &lt;/a&gt;
  Step 1: Remove french words to be replaced with hindi words &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wtNG5Afo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n14zolmy7vc06v5zh14t.png" alt="image"&gt; -&amp;gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SndVmifz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nu5rvh6y1sodyaekm0og.png" alt="image"&gt;
&lt;/h2&gt;

&lt;h5&gt;
  &lt;a href="#yes-i-know-that-we-are-pretty-light-on-the-vocab-but-making-prs-wont-hurt-please"&gt;
  &lt;/a&gt;
  &lt;em&gt;(Yes i know that we are pretty light on the vocab, but making PRs wont hurt, please)&lt;/em&gt;
&lt;/h5&gt;

&lt;h2&gt;
  &lt;a href="#step-2-changing-the-readme"&gt;
  &lt;/a&gt;
  Step 2: Changing the readme.
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;THE HARDEST PART OF THIS WHOLE PROCESS.&lt;/strong&gt;&lt;br&gt;
Tho i managed to drag myself through it. And ended up with a semi-ripped off README :/&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-trying-to-get-people-to-try-this-this-part-failed-miserably"&gt;
  &lt;/a&gt;
  Step 3: Trying to get people to try this (this part failed miserably).
&lt;/h2&gt;

&lt;p&gt;I sent my dev friends the repo to try out....&lt;br&gt;
they ignored me.... üò•&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you find this cool go star &lt;a href="https://github.com/bnjbvr/rouille"&gt;Rouille&lt;/a&gt; and &lt;a href="https://github.com/rishit-khandelwal/zung"&gt;Zung&lt;/a&gt; and make PRs to add more words to the zung vocab.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>rust</category>
    </item>
    <item>
      <title>TypeScript Features Every Angular Developer Needs to Know</title>
      <author>F√°bio Englert Moutinho</author>
      <pubDate>Mon, 27 Sep 2021 14:33:57 +0000</pubDate>
      <link>https://dev.to/bitovi/typescript-features-every-angular-developer-needs-to-know-4b82</link>
      <guid>https://dev.to/bitovi/typescript-features-every-angular-developer-needs-to-know-4b82</guid>
      <description>&lt;p&gt;If you‚Äôre an Angular developer, you‚Äôre missing out if you‚Äôre not using advanced TypeScript features to help you build better code.&lt;/p&gt;

&lt;p&gt;And it‚Äôs well worth the effort: TypeScript has some great features that can make you a stronger Angular developer. üí™&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bigint"&gt;
  &lt;/a&gt;
  BigInt
&lt;/h1&gt;

&lt;p&gt;BigInt lets you represent numbers bigger than 2&lt;sup&gt;53&lt;/sup&gt;. This is useful when you need to perform mathematical operations on very large integers. And you can work directly with large integer IDs and &lt;a href="https://www.smashingmagazine.com/2019/07/essential-guide-javascript-newest-data-type-bigint/"&gt;high resolution timestamps&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can create a &lt;code&gt;bigint&lt;/code&gt; primitive in two ways:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;n0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;n1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BigInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is no interoperability between &lt;code&gt;bigint&lt;/code&gt; and &lt;code&gt;number&lt;/code&gt; primitives, but they can be compared.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: BigInt support is only available for the &lt;code&gt;esnext&lt;/code&gt; target.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#numeric-separators-"&gt;
  &lt;/a&gt;
  Numeric Separators _
&lt;/h1&gt;

&lt;p&gt;Numeric separators are great for readability. They don't change how the actual numeric value is interpreted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="c1"&gt;// which one is more readable?&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;someNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1782540173&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;anotherNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;_782_540_173&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someNumber&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;anotherNumber&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Keep in mind that you can't begin or end a number with a separator. Also, you can't use two in a row.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#private-fields"&gt;
  &lt;/a&gt;
  Private Fields
&lt;/h1&gt;

&lt;p&gt;TypeScript has the &lt;code&gt;private&lt;/code&gt; keyword that is stripped out during transpilation to JavaScript. If you need private properties at runtime, JavaScript's private fields come to the rescue. Unlike TypeScript's private keyword, private fields are prepended by a # character and are private even at runtime.&lt;/p&gt;

&lt;p&gt;If you need private properties at runtime, this is now the way to do it in modern JavaScript.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: TypeScript will gracefully implement this for older browsers given your target is at least ECMAScript 2015 (ES6).&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;someone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Property '#age' is not accessible outside class 'Person' because it has a private identifier.&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someone&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#age&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// Property '#age' does not exist on type 'Person'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#operators"&gt;
  &lt;/a&gt;
  Operators
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#nullish-coalescing-"&gt;
  &lt;/a&gt;
  Nullish Coalescing ??
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;In JavaScript, nullish refers to a value strictly equal (&lt;code&gt;===&lt;/code&gt;) to &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A common pattern used in JavaScript when we want a default value is to use the OR operator &lt;code&gt;||&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;milliseconds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wait&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;milliseconds&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the OR operator in this way can cause problems. Since we are dealing with numbers in the example above, then the value &lt;code&gt;0&lt;/code&gt; will be a valid &lt;code&gt;milliseconds&lt;/code&gt; value.&lt;br&gt;
However, &lt;code&gt;0&lt;/code&gt; is falsy, so the default value &lt;code&gt;100&lt;/code&gt; will be assigned to &lt;code&gt;wait&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It‚Äôs important to distinguish between falsy values (&lt;code&gt;false&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, empty string &lt;code&gt;‚Äú‚Äù&lt;/code&gt;, and &lt;code&gt;null/undefined&lt;/code&gt;) and nullish values (&lt;code&gt;null/undefined&lt;/code&gt;). Nullish values are a subset of falsy values.&lt;/p&gt;

&lt;p&gt;Nullish coalescing is an operator that returns a default value (the second operand) in case the first operand is nullish. If the first operand is not nullish, its value is returned.&lt;/p&gt;

&lt;p&gt;Sounds complicated, but here's a simple example.&lt;/p&gt;

&lt;p&gt;Consider &lt;code&gt;a ?? b&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;will return &lt;code&gt;a&lt;/code&gt; if &lt;code&gt;a&lt;/code&gt; is different than &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;will return &lt;code&gt;b&lt;/code&gt; if &lt;code&gt;a&lt;/code&gt; is equal to &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;coffee&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;awaken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;coffee&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;code&gt;awaken&lt;/code&gt; will be assigned either &lt;code&gt;coffee&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if &lt;code&gt;coffee&lt;/code&gt; is &lt;strong&gt;not nullish&lt;/strong&gt;, &lt;code&gt;awaken&lt;/code&gt; will be assigned &lt;code&gt;coffee&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;if &lt;code&gt;coffee&lt;/code&gt; is nullish, awaken will be assigned &lt;code&gt;false&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#optional-chaining-raw-endraw-"&gt;
  &lt;/a&gt;
  Optional Chaining &lt;code&gt;?&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Have you ever seen (or written) code like this?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prop1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prop1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prop2&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prop1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prop2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prop3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="c1"&gt;// do something&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Optional chaining changes how objects, properties and methods are accessed. Instead of throwing an error if they are nullish, it will short-circuit and return &lt;code&gt;undefined&lt;/code&gt;. Optional chaining also makes your code more readable.&lt;/p&gt;

&lt;p&gt;This is how we could rewrite the code above with optional chaining:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;prop1&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;prop2&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;prop3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="c1"&gt;// do something&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#non-null-assertion-raw-endraw-"&gt;
  &lt;/a&gt;
  Non Null Assertion &lt;code&gt;!&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Sometimes, TypeScript is unable to identify that some operand is nullish. The non null assertion operator &lt;code&gt;!&lt;/code&gt; comes in handy for those cases. You might use it when you want to tell TypeScript that at that specific point in the code, the operand is definitely not null and not undefined.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// imagine you have a state that represents an API response&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;State&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pending&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;complete&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;State&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;complete&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="na"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;some text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// we know that when status is 'complete' we must have a response&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;complete&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Object is possibly 'undefined'.&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// this works&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check out &lt;a href="https://dev.to/bitovi/non-null-assertion-operator-in-angular-g5l"&gt;this post&lt;/a&gt; by &lt;a href="https://dev.to/likeomgitsfeday"&gt;Jennifer Wadella&lt;/a&gt; to learn more about the non null assertion operator in Angular.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exponentiation-"&gt;
  &lt;/a&gt;
  Exponentiation **
&lt;/h2&gt;

&lt;p&gt;In 2 &lt;code&gt;**&lt;/code&gt; 3, raises the first operand &lt;code&gt;2&lt;/code&gt; to the power of the second, &lt;code&gt;3&lt;/code&gt;, being equivalent to 2&lt;sup&gt;3&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Contrary to Math.pow(), the exponentiation operator &lt;code&gt;**&lt;/code&gt; works with the new BigInt values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// the old way&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#assignment-operators-raw-endraw-raw-ampamp-endraw-raw-endraw-raw-endraw-"&gt;
  &lt;/a&gt;
  Assignment Operators &lt;code&gt;**=&lt;/code&gt;, &lt;code&gt;&amp;amp;&amp;amp;=&lt;/code&gt;, &lt;code&gt;||=&lt;/code&gt;, &lt;code&gt;??=&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Assignment operators are shorthand for common assignment operations. For example, &lt;code&gt;a += 1&lt;/code&gt; is equivalent to &lt;code&gt;a = a + 1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Assignment operators apply an operator to two arguments, then assign the result to the left operand.&lt;/p&gt;

&lt;p&gt;Additionally, the &lt;code&gt;&amp;amp;&amp;amp;=&lt;/code&gt;, &lt;code&gt;||=&lt;/code&gt;, &lt;code&gt;??=&lt;/code&gt; operators will short-circuit, which means if the operation is evaluated to false, no assignment will occur.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// a **= b, exponentiation&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// a &amp;amp;&amp;amp;= b, logical AND&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// a ||= b, logical OR&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// a ??= b, nullish coalescing&lt;/span&gt;
&lt;span class="c1"&gt;// a &amp;amp;&amp;amp;= b, also equivalent to:&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// a ||= b, also equivalent to:&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// a ??= b, also equivalent to:&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These TypeScript techniques can help you handle nullish values, improve readability, manipulate larger integers, and more. I hope you find these TypeScript features useful for your Angular code!&lt;/p&gt;

&lt;p&gt;To learn more about Angular and TypeScript, check out the &lt;a href="https://www.bitovi.com/academy/"&gt;Bitovi Academy&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Originally posted in &lt;a href="https://www.bitovi.com/blog/typescript-features-every-angular-developer-needs-to-know"&gt;Bitovi Blog&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>angular</category>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Bits of Xperience: Supercharged Page Custom Data Fields</title>
      <author>Sean G. Wright</author>
      <pubDate>Mon, 27 Sep 2021 14:12:57 +0000</pubDate>
      <link>https://dev.to/wiredviews/bits-of-xperience-supercharged-page-custom-data-fields-2h4h</link>
      <guid>https://dev.to/wiredviews/bits-of-xperience-supercharged-page-custom-data-fields-2h4h</guid>
      <description>&lt;p&gt;Kentico Xperience's custom Page Types let us model a site's content using a combination of powerful built-in Form Controls and the flexible structuring of information in a site's Content Tree.&lt;/p&gt;

&lt;p&gt;Usually, with Page Type fields, each field maps to one value (as a column in a database table), and each Page Type has a unique set of fields. But, what if we want to store multiple fields in a single database column, or have multiple Page Types that store data in a single location, making it easy to query ü§î?&lt;/p&gt;

&lt;p&gt;There might not be an out-of-the-box solution, but fortunately, with a little code and configuration ü§ì, we can use Page "Custom Data" to achieve both of these things.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to jump to the solution, check out our new NuGet package that does all the coding for you, &lt;a href="https://github.com/wiredviews/xperience-page-custom-data-control-extender"&gt;Xperience Page Custom Data Control Extender&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-will-we-learn"&gt;
  &lt;/a&gt;
  üìö What Will We Learn?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;What are Page "Custom Data" fields?&lt;/li&gt;
&lt;li&gt;What do the "Custom Data" Page fields lack?&lt;/li&gt;
&lt;li&gt;Using Global Events with Page "Custom Data"&lt;/li&gt;
&lt;li&gt;Using Custom Form Controls and a Control Extender&lt;/li&gt;
&lt;li&gt;Storing Page data directly in "Custom Data" fields&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-are-page-custom-data-fields"&gt;
  &lt;/a&gt;
  ‚ùì What are Page "Custom Data" fields?
&lt;/h2&gt;

&lt;p&gt;Before we get going, let's level set. Page "Custom Data" fields are the &lt;code&gt;DocumentCustomData&lt;/code&gt; column in the &lt;code&gt;CMS_Document&lt;/code&gt; table and the &lt;code&gt;NodeCustomData&lt;/code&gt; column in the &lt;code&gt;CMS_Tree&lt;/code&gt; table.&lt;/p&gt;

&lt;p&gt;Anything in, or related to, the &lt;code&gt;CMS_Tree&lt;/code&gt; table is going to apply to all cultures for a Page in the Content Tree, and likewise, anything in, or related to, the &lt;code&gt;CMS_Document&lt;/code&gt; table is going to be specific to a single culture. Many sites only have a single culture, so this distinction might not be something you're used to thinking about ü§®.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Read more about the &lt;a href="https://docs.xperience.io/custom-development/working-with-pages-in-the-api/page-database-structure"&gt;Kentico Xperience Page database architecture&lt;/a&gt; üßê.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;All "Custom Data" database columns (there are many in non-Page ones Xperience) have an XML structure, and the C# API to interact with them works with a &lt;code&gt;XmlData&lt;/code&gt; container behind the scenes, almost like a &lt;code&gt;string&lt;/code&gt;-keyed dictionary.&lt;/p&gt;

&lt;p&gt;"Custom Data" columns let us switch from a relational database architecture to more of a document structure where the schema of the data isn't defined in the database, but instead in our code.&lt;/p&gt;

&lt;p&gt;It would be great üëçüèæ to leverage this alternate way of storing data to achieve what was discussed earlier (multiple values per column and Pages storing field values for multiple Page Types in the same location, instead of separate Page Type database tables).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%97%83-what-do-the-page-custom-data-page-fields-lack"&gt;
  &lt;/a&gt;
  üóÉ What do the Page "Custom Data" Page Fields Lack?
&lt;/h2&gt;

&lt;p&gt;First, let's review why we can't üòû use Page "Custom Data" fields as they currently exist in Xperience.&lt;/p&gt;

&lt;p&gt;If we look at the the documentation on the features of the &lt;a href="https://docs.xperience.io/custom-development/extending-the-administration-interface/developing-form-controls/reference-field-editor#ReferenceFieldeditor-Creatingnewfields"&gt;field editor&lt;/a&gt;, which is used for creating fields for custom Page Types, we can see there are a couple options for the "Field type". The one we are interested in is the "Page Field":&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Page field ‚Äì only available for page type fields. Allows you to choose a general page column from the &lt;code&gt;CMS_Tree&lt;/code&gt; or &lt;code&gt;CMS_Document&lt;/code&gt; table, and link it to the page field.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When creating a new Page Type field and selecting a &lt;em&gt;Field type&lt;/em&gt; of &lt;em&gt;Page field&lt;/em&gt; we can select either &lt;code&gt;Page fields&lt;/code&gt; or &lt;code&gt;Node fields&lt;/code&gt; for the Group. This equates to columns from the &lt;code&gt;CMS_Document&lt;/code&gt; and &lt;code&gt;CMS_Tree&lt;/code&gt; tables.&lt;/p&gt;

&lt;p&gt;If we select &lt;code&gt;Page fields&lt;/code&gt; and then pick the &lt;em&gt;Field name&lt;/em&gt; of &lt;code&gt;DocumentCustomData&lt;/code&gt;, we can start interacting directly with this value for each Page of the given Page Type üòÄ.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V8EGZ3Dd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h5qfvguiohzrzczm4leg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V8EGZ3Dd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h5qfvguiohzrzczm4leg.jpg" alt="Page Type field editor using DocumentCustomData directly"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Because the XML schema of these fields is flexible, there's no special "Custom Data" Form Control üò¶ that let's us modify that XML in a way that is friendly to Content Managers.&lt;/p&gt;

&lt;p&gt;The best we can do is a Rich Text editor:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n1I0mdw9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ms5sdvphpwjb4zh2yie.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n1I0mdw9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ms5sdvphpwjb4zh2yie.jpg" alt="Rich text editor showing plain text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But it falls way too short of something usable for Content Managers üò£:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rskyt0da--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7o5omucm08on69wizry.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rskyt0da--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7o5omucm08on69wizry.jpg" alt="Rich text editor showing XML"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So what are we going to do if we want to leverage the schema flexibility of "Custom Data" fields for a Page? What Form Control gives us a good Content Management experience? Do we have to build a bunch of custom Web Forms Form Controls ‚ò†?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-global-events-and-page-custom-data"&gt;
  &lt;/a&gt;
  üìÖ Using Global Events and Page "Custom Data"
&lt;/h2&gt;

&lt;p&gt;Fortunately there's a couple different ways we can approach this problem üòÖ.&lt;/p&gt;

&lt;p&gt;We already have a bunch of pre-built Form Controls which are designed for ease-of-use for Content Managers. Let's make sure our solution includes those üëèüèº and doesn't require us to rewrite them!&lt;/p&gt;

&lt;p&gt;Let's create a new field on our Page Type named &lt;code&gt;ArticleIsInSitemap&lt;/code&gt;, using all the standard Page Type field functionality:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jCrt0aFs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/otf3ssd2rnx87e2t6t3o.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jCrt0aFs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/otf3ssd2rnx87e2t6t3o.jpg" alt="Page Type field dialog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we create new fields on our Page Type and use the appropriate standard Form Controls for those fields, we can get a solid Content Management experience, but the values go into individual database columns in each Page Type's database table ü§¶üèΩ‚Äç‚ôÄÔ∏è instead of the Page "Custom Data" columns.&lt;/p&gt;

&lt;p&gt;Thankfully, Kentico Xperience has a full set of &lt;a href="https://docs.xperience.io/custom-development/handling-global-events"&gt;Global Events&lt;/a&gt; that allow developers to react to things happening within the system üë®üèø‚Äçüî¨. We can use these events to copy data from our Page Type fields to the "Custom Data" XML structures of the Page.&lt;/p&gt;

&lt;p&gt;Let's create a Custom Module that will give us a place to react to these events:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;CMS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;CMS.DataEngine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;CMS.DocumentEngine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;CMSApp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;assembly&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;RegisterModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DocumentEventsModule&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;CMSApp&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DocumentEventsModule&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Module&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;DocumentEventsModule&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; 
            &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nameof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DocumentEventsModule&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;OnInit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="n"&gt;DocumentEvents&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Insert&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Before&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;Insert_Before&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="n"&gt;DocumentEvents&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Update&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Before&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;Update_Before&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Update_Before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DocumentEventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; 
            &lt;span class="nf"&gt;SetValuesInternal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Insert_Before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DocumentEventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="nf"&gt;SetValuesInternal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Both of the event handlers above let us run our logic when any Page is inserted or updated with the following method:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;SetValuesInternal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DocumentEventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;article&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DocumentCustomData&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;nameof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fields&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsInSitemap&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
            &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fields&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsInSitemap&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And that's it! Every time an Article is inserted into the Content Tree or updated, the value in &lt;code&gt;ArticleIsInSitemap&lt;/code&gt; will be copied to an XML element in &lt;code&gt;CMS_DocumentCustomData&lt;/code&gt; üòä, which will look like this in the database:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;CustomData&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;IsInSitemap&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/IsInSitemap&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/CustomData&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;What's the benefit here? Don't we already have the value in the &lt;code&gt;DancingGoatCore_Article&lt;/code&gt; table's &lt;code&gt;ArticleIsInSitemap&lt;/code&gt; column?&lt;/p&gt;

&lt;p&gt;Well, for data that determines whether or not a Page is in the sitemap, we want to be able to query across &lt;strong&gt;all&lt;/strong&gt; Pages of the site, not just  Articles, so that we generate the correct &lt;a href="https://developers.google.com/search/docs/advanced/sitemaps/overview"&gt;XML sitemap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If we have a column in each table for all of our custom Page Types, we'd end up with a real ugly SQL &lt;code&gt;UNION&lt;/code&gt; to get all the Pages in the sitemap. By copying the value to &lt;code&gt;DocumentCustomData&lt;/code&gt;, we ensure the full sitemap can be generated by &lt;em&gt;only&lt;/em&gt; querying the &lt;code&gt;CMS_Document&lt;/code&gt; table üí™üèª:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;CMS_Document&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="k"&gt;CAST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DocumentCustomData&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;XML&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'(//CustomData/IsInSitemap/text())[1]'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'bit'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Checkout Microsoft's documentation to read about &lt;a href="https://docs.microsoft.com/en-us/sql/t-sql/xml/xml-data-type-methods?view=sql-server-ver15"&gt;querying XML in SQL&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is great üëçüèæ! But it would be &lt;em&gt;really&lt;/em&gt; great if we didn't have to have an extra database table column per-Page Type and duplicate this data. We would prefer to write directly to the Page "Custom Data" field üòè.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#%F0%9F%8E%9B-custom-form-controls-and-control-extenders"&gt;
  &lt;/a&gt;
  üéõ Custom Form Controls and Control Extenders
&lt;/h2&gt;

&lt;p&gt;Lucky for us, Kentico Xperience provides a convenient feature in the CMS architecture - &lt;a href="https://docs.xperience.io/custom-development/extending-the-administration-interface/developing-form-controls/inheriting-from-existing-form-controls"&gt;Control Extenders&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Control Extenders let us enhance the functionality of inherited Form Controls. But what does that mean?&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/OQSNhk5ICTI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;We can create new Form Controls in the Administration application, with either new code or inheriting the code and functionality from an existing Form Control. The 2nd option is preferable because it means less work for us üòÑ!&lt;/p&gt;

&lt;p&gt;When we create a new Form Control that inherits from another, we can apply a Control Extender to it. A Control Extender is a component that wraps the original Form Control and gets to intercept interactions with the Control üßê.&lt;/p&gt;

&lt;p&gt;This is a valuable feature for us, because it will let us source the Control's value from &lt;code&gt;DocumentCustomData&lt;/code&gt; when it is read and write it to &lt;code&gt;DocumentCustomData&lt;/code&gt; when the Control value is updated - all without modifying the code or functionality of the original control. We can also apply this Control Extender to &lt;em&gt;any&lt;/em&gt; inheriting Form Control üòÆ.&lt;/p&gt;

&lt;p&gt;In summary, this is what we want to accomplish:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;‚úî Create a Control Extender that redirects interactions with the Form Control's value to the &lt;code&gt;DocumentCustomData&lt;/code&gt; field and store the value in an XML element with the same name as the field's name&lt;/li&gt;
&lt;li&gt;‚úî Create a new Form Control that inherits from the standard Check box Form Control and apply the Control Extender to the new Form Control&lt;/li&gt;
&lt;li&gt;‚úî Use the new Form Control as the control for our &lt;code&gt;Article&lt;/code&gt; Page Type &lt;code&gt;IsInSitemap&lt;/code&gt; field&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#%F0%9F%8F%97-control-extender"&gt;
  &lt;/a&gt;
  üèó Control Extender
&lt;/h3&gt;

&lt;p&gt;The code for the Control Extender is pretty simple:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomDataControlExtender&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;ControlExtender&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FormEngineUserControl&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// logic here&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;There are multiple events the Control emits that we can register event handlers for and when the underlying Form Control initializes, we register our event handlers in &lt;code&gt;Control_Init&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; 
    &lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Init&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;Control_Init&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Control_Init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;EventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnGetControlValue&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;Form_OnGetControlValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnAfterDataLoad&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;Form_OnAfterDataLoad&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FieldControls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ColumnNames&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We are going to be creating our Page Type field as a "Field without database representation", which means it won't be listed in the &lt;code&gt;FieldControls&lt;/code&gt; or &lt;code&gt;ColumnNames&lt;/code&gt; collections that get processed when we load/save our Form, so we explicitly add it.&lt;/p&gt;

&lt;p&gt;This way the Form treats our field as though it needs to be persisted/retrieved just like the other ones.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Form_OnAfterDataLoad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;EventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!(&lt;/span&gt;&lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;TreeNode&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DocumentCustomData&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Form_OnGetControlValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FormEngineUserControlEventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!(&lt;/span&gt;&lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;TreeNode&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ColumnName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;StringComparison&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InvariantCultureIgnoreCase&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DocumentCustomData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then we define two event handlers - the first supplies the Form Control value from the correct Page "Custom Data" field when the value is loaded by the Control, and the second accepts the value coming from the Control and stores it in the correct Page "Custom Data" field.&lt;/p&gt;

&lt;p&gt;After our interception, the Page gets created or saved and the field's value is saved along with it, except it's inside &lt;code&gt;DocumentCustomData&lt;/code&gt; and not a Page Type specific database column ü§©.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#inheriting-a-form-control"&gt;
  &lt;/a&gt;
  üëµüèΩ Inheriting a Form Control
&lt;/h3&gt;

&lt;p&gt;Inheriting from an existing Form Control and applying a Control Extender only takes a few steps!&lt;/p&gt;

&lt;p&gt;First, navigate to the "Administration interface" module in the CMS application:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---1yYXiyo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8r470gaphltyfcxin3zy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---1yYXiyo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8r470gaphltyfcxin3zy.jpg" alt="Administration interface menu item"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then create a new "inheriting" Form Control, using the Check box Form Control as the source:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--onxgiusD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfay5cva2ijs9wg65kwh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--onxgiusD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfay5cva2ijs9wg65kwh.jpg" alt="New Form Control dialog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Be sure to select the Control Extender you just created!&lt;/p&gt;

&lt;p&gt;Finally, select the places where this Form Control can be used. For our example it will be for "Boolean (Yes/No)" fields for "Page Types":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GCLyRb9f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwvdysx1zwykg7ihvufs.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GCLyRb9f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwvdysx1zwykg7ihvufs.jpg" alt="Form Control assignment configuration"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#using-a-page-custom-data-form-control"&gt;
  &lt;/a&gt;
  üìÉ Using a Page "Custom Data" Form Control
&lt;/h3&gt;

&lt;p&gt;Now we can create the new field for our Page Type üòä!&lt;/p&gt;

&lt;p&gt;Be sure to select &lt;strong&gt;"Field without database representation"&lt;/strong&gt; for the Field type (otherwise the value will be saved in a newly created database table column for the Page Type üò¨) and use our new extended Form Control (otherwise the value won't be saved &lt;em&gt;at all&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Whatever we name this new field will end up being the XML element that the value is stored in, so a field named &lt;code&gt;ABC&lt;/code&gt; would end up as &lt;code&gt;&amp;lt;CustomData&amp;gt;&amp;lt;ABC&amp;gt;value&amp;lt;/ABC&amp;gt;&amp;lt;/CustomData&amp;gt;&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BgVmXs2B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ivhidsqpv6ahumn8v2vy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BgVmXs2B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ivhidsqpv6ahumn8v2vy.jpg" alt="New Page Type field dialog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it! When we save a Page of this Page Type, this specific field will only be saved to &lt;code&gt;DocumentCustomData&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can add as many "Custom Data" fields to a Page Type as we want, and if we define the same field on multiple Page Types, they'll all put data of the same XML schema in our &lt;code&gt;CMS_Document.DocumentCustomData&lt;/code&gt; database column.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  üèÅ Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope by now both the motivation and process for using Page "Custom Data" fields as the backing store of Page Type fields are clear üîç.&lt;/p&gt;

&lt;p&gt;There's a few steps to set everything up - create a Control Extender, define new inheriting Form Controls using the Control Extender, and add a fields to Page Types using the extended Form Control - but the initial setup definitely pays off. It's worth noting the first step (creating a Control Extender) only needs performed once, and the second (creating an extended Form Control) only once per Form Control type (eg Text Box, Check Box, Page Selector).&lt;/p&gt;

&lt;p&gt;Our "Sitemap" example saves us from performing a large SQL &lt;code&gt;UNION&lt;/code&gt; when we generate a site's XML sitemap, but that's not the only use case.&lt;/p&gt;

&lt;p&gt;What about &lt;a href="https://ogp.me/"&gt;Open Graph&lt;/a&gt; metadata values for a Page - wouldn't it be nice to not have to create a separate database column for each value?&lt;/p&gt;

&lt;p&gt;Or, a standard field inherited from a base Page Type that we aren't going to be likely to filter in SQL - like a 'primary image path'.&lt;/p&gt;

&lt;p&gt;We could even make mixins, letting multiple Page Types share sets of fields and then access those field values across Page Types by querying the &lt;code&gt;CMS_Document&lt;/code&gt; table only üßê.&lt;/p&gt;

&lt;p&gt;Are you thinking about implementing this yourself? Well, it's dangerous to go alone... &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KFEU83ZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/ElSNi8FdSB7RS/giphy.gif%3Fcid%3Decf05e47ef4jrqak87upnitkvd0qjmetu2ynz0iu87w40p54%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KFEU83ZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/ElSNi8FdSB7RS/giphy.gif%3Fcid%3Decf05e47ef4jrqak87upnitkvd0qjmetu2ynz0iu87w40p54%26rid%3Dgiphy.gif%26ct%3Dg" alt="zelda meme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, take this... the &lt;a href="https://github.com/wiredviews/xperience-page-custom-data-control-extender"&gt;Xperience Page Custom Data Control Extender&lt;/a&gt;, a NuGet package containing an enhanced version of the above Control Extender with detailed setup instructions üëê.&lt;/p&gt;

&lt;p&gt;As always, thanks for reading üôè!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/wiredviews/xperience-page-custom-data-control-extender"&gt;Xperience Page Custom Data Control Extender&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.xperience.io/custom-development/extending-the-administration-interface/developing-form-controls/reference-field-editor#ReferenceFieldeditor-Creatingnewfields"&gt;Creating new fields in the Kentico Xperience field editor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.xperience.io/custom-development/handling-global-events"&gt;Kentico Xperience Global Events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/search/docs/advanced/sitemaps/overview"&gt;Google - XML sitemaps Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/sql/t-sql/xml/xml-data-type-methods?view=sql-server-ver15"&gt;SQL Server - xml Data Type Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.xperience.io/custom-development/extending-the-administration-interface/developing-form-controls/inheriting-from-existing-form-controls"&gt;Kentico Xperience - Control Extenders&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;We've put together a list over on &lt;a href="https://github.com/Kentico/Home/blob/master/RESOURCES.md"&gt;Kentico's GitHub account&lt;/a&gt; of developer resources. Go check it out!&lt;/p&gt;

&lt;p&gt;If you are looking for additional Kentico content, checkout the Kentico or Xperience tags here on DEV.&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__5339"&gt;
  
    .ltag__tag__id__5339 .follow-action-button{
      background-color:  !important;
      color:  !important;
      border-color:  !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/kentico" class="ltag__tag__link"&gt;kentico&lt;/a&gt; Follow
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;




&lt;div class="ltag__tag ltag__tag__id__57801"&gt;
  
    .ltag__tag__id__57801 .follow-action-button{
      background-color:  !important;
      color:  !important;
      border-color:  !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/xperience" class="ltag__tag__link"&gt;xperience&lt;/a&gt; Follow
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Or my &lt;a href="https://dev.to/seangwright/series"&gt;Kentico Xperience blog series&lt;/a&gt;, like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/seangwright/series/8185"&gt;Kentico Xperience Xplorations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/seangwright/series/9483"&gt;Kentico Xperience MVC Widget Experiments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/seangwright/series/10963"&gt;Kentico Xperience Design Patterns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>xperience</category>
      <category>kentico</category>
      <category>csharp</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>Debouncing React controlled components</title>
      <author>Derek Oware</author>
      <pubDate>Mon, 27 Sep 2021 14:11:46 +0000</pubDate>
      <link>https://dev.to/bugs_bunny/debouncing-react-controlled-components-588i</link>
      <guid>https://dev.to/bugs_bunny/debouncing-react-controlled-components-588i</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href="#motivation"&gt;Motivation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-is-debouncing"&gt;What is debouncing?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#controlled-and-uncontrolled-components"&gt;Controlled and Uncontrolled components&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#controlled"&gt;Controlled&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#uncontrolled"&gt;Uncontrolled&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#debouncing-controlled-components"&gt;Debouncing Controlled components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#usedebounce-hook"&gt;&lt;code&gt;useDebounce&lt;/code&gt; hook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#real-life-use-cases"&gt;Real-life use cases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;In my most recent application, I came across the need to debounce some form fields. Every time I had to debounce, it's usually an uncontrolled component. This time, I had to debounce a controlled component. A normal debounce function wouldn't work as expected, so I had to use another method and ended up creating a &lt;code&gt;useDebounce&lt;/code&gt; hook for reusability.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-debouncing"&gt;
  &lt;/a&gt;
  What is debouncing?
&lt;/h2&gt;

&lt;p&gt;If you don't know what it is, &lt;code&gt;debounce&lt;/code&gt; is usually a set of code that keeps a function from running too many times. You can read more about it in &lt;a href="https://www.freecodecamp.org/news/javascript-debounce-example"&gt;this article&lt;/a&gt;.&lt;br&gt;
It is usually used for user actions to prevent the user from spamming too many requests to the server. A usual use case is in search or toggle inputs. We listen to the user inputs and only send the result to the server when no more inputs coming in.&lt;br&gt;
Let's see some example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * A basic debounce function.
 * Most implementations you'll see look like this.
 * @params {VoidFunction} callback - A callback function to be called after timeout ends
 * @params {number} timeout - Timeout in milliseconds
 * @returns {VoidFunction} - A function to execute the callback
 */&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;debounce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;timer&lt;/span&gt;

  &lt;span class="c1"&gt;// inner function&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;clearTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The debounce function sets a timer(500ms in our example), when the inner function is called before the timer ends, we cancel the timer and start over. The callback function is only triggered when the timer ends without being interrupted.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;See a detailed implementation on &lt;a href="https://codesandbox.io/s/debouncing-uncontrolled-form-component-0w5wy?file=/src/utils.js:0-554"&gt;codesandbox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;using in our component;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt;
  &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"search-input"&lt;/span&gt;
  &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;debounce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See a detailed implementation on &lt;a href="https://codesandbox.io/s/debouncing-uncontrolled-form-component-0w5wy?file=/src/App.js:1855-2201"&gt;codesandbox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is an example with an &lt;a href="#uncontrolled"&gt;uncontrolled component&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#controlled-and-uncontrolled-components"&gt;
  &lt;/a&gt;
  Controlled and Uncontrolled components
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#controlled"&gt;
  &lt;/a&gt;
  &lt;a href="https://reactjs.org/docs/forms.html#controlled-components"&gt;Controlled&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;In a React controlled component, the input value is set by the &lt;code&gt;state&lt;/code&gt;. The &lt;code&gt;onChange&lt;/code&gt; handler listens to input changes and stores the value into the state. The input value is then updated with the value stored in the state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Controlled&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt; &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"search-input"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Search&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"search-input"&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Search&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Edit on &lt;a href="https://codesandbox.io/s/trusting-proskuriakova-jw3x5?file=/src/App.js:66-623"&gt;codesandbox&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uncontrolled"&gt;
  &lt;/a&gt;
  &lt;a href="https://reactjs.org/docs/uncontrolled-components.html"&gt;Uncontrolled&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;In an uncontrolled component, instead of updating the values with the state, you can use &lt;a href="https://reactjs.org/docs/refs-and-the-dom.html"&gt;a ref&lt;/a&gt; to get form values from the DOM. Basically, in an uncontrolled component, we allow the form elements to update their values with the normal HTML form behaviour&lt;br&gt;
For example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;UnControlled&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inputRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;inputRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt; &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"search-input"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Search&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;inputRef&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"search-input"&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Search&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The input field is updated by the DOM. We select the input element with our &lt;code&gt;inputRef&lt;/code&gt; and then read the value when we need it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Edit on &lt;a href="https://codesandbox.io/s/trusting-proskuriakova-jw3x5?file=/src/App.js:625-1056"&gt;codesandbox&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debouncing-controlled-components"&gt;
  &lt;/a&gt;
  Debouncing Controlled components
&lt;/h2&gt;

&lt;p&gt;We've already seen how to debounce an uncontrolled component &lt;a href="#what-is-debouncing"&gt;in our first example&lt;/a&gt;. You can also see and interact with the example on &lt;a href="https://codesandbox.io/s/debouncing-uncontrolled-form-component-0w5wy?file=/src/App.js"&gt;codesandbox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The approach used in the example doesn't work for controlled components.&lt;br&gt;
Instead of writing a debounce function to debounce our input,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Controlled&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;timerRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Store the previous timeout&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchUserDetails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;userDetails&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;API&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;?name=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="nx"&gt;setUserDetails&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevDetails&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;prevDetails&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;userDetails&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="c1"&gt;// Producing the same behaviour as the 'inner function' from the debounce function&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;clearTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timerRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// clear previous timeout&lt;/span&gt;

    &lt;span class="nx"&gt;timerRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;timerRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="c1"&gt;// Reset timerRef when timer finally ends&lt;/span&gt;
      &lt;span class="nx"&gt;fetchUserDetails&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;clearTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timerRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fetchUserDetails&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"search-label"&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"search-input"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Search for user details
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"search-input"&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Instead of storing the previous timer in a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures#lexical_scoping"&gt;lexical scope&lt;/a&gt;, we store it in &lt;a href="https://reactjs.org/docs/refs-and-the-dom.html"&gt;a ref&lt;/a&gt; and then send our request to the server with the &lt;code&gt;useEffect&lt;/code&gt; hook.&lt;br&gt;
It's a simple implementation but we have one problem. It's not reusable. We need to create a custom hook for this.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#-raw-usedebounce-endraw-hook"&gt;
  &lt;/a&gt;
  &lt;code&gt;useDebounce&lt;/code&gt; hook
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * @callback callbackFunc
 * @param {any[]} args - arguments passed into callback
 */&lt;/span&gt;
&lt;span class="cm"&gt;/**
 * Debounce function to reduce number executions
 * @param {callbackFunc} cb - callback function to be executed
 * @param {number} wait - number of milliseconds to delay function execution
 * @param {any[]} deps - dependencies array
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useDebounce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;wait&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;deps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;timerRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;clearTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timerRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;timerRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;clearTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timerRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="cm"&gt;/** used JSON.stringify(deps) instead of just deps
      * because passing an array as a dependency causes useEffect 
re-render infinitely
      * @see {@link https://github.com/facebook/react/issues/14324}
      */&lt;/span&gt;
    &lt;span class="cm"&gt;/* eslint-disable react-hooks/exhaustive-deps */&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;deps&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;My implementation isn't perfect and may contain bugs but it works fine for my case. Feel free to improve it and share yours in the comments.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we can &lt;code&gt;useDebounce&lt;/code&gt; in our component;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Controlled&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="c1"&gt;// Debounce our search&lt;/span&gt;
  &lt;span class="nx"&gt;useDebounce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;userDetails&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;API&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;?name=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                                                             &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

      &lt;span class="nx"&gt;setUserDetails&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevDetails&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;prevDetails&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;userDetails&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"search-label"&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"search-input"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Search for user details
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"search-input"&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See detailed implementation on &lt;a href="https://codesandbox.io/s/debouncing-controlled-form-fields-1mb86?file=/src/App.js:510-1277"&gt;codesandbox&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reallife-use-cases"&gt;
  &lt;/a&gt;
  Real-life use cases
&lt;/h2&gt;

&lt;p&gt;I'm currently working on an &lt;a href="http://pizza-app-mauve.vercel.app"&gt;app&lt;/a&gt;.&lt;br&gt;
In my app, for each item in the cart, the user can add different sizes and also increment or decrement the quantities of each size.&lt;br&gt;
The sizes and quantities are parsed into an object and stored in context before being sent to the server.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nBkkyk9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yh9eeeubgqippzus4q05.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nBkkyk9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yh9eeeubgqippzus4q05.gif" alt="Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While exploring this topic, I created a &lt;a href="https://codesandbox.io/s/jovial-engelbart-tu6jk?file=/src/App.js"&gt;demo application&lt;/a&gt; for validating a sign-up form with an API in real-time.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;After writing this article, I found a &lt;a href="https://usehooks.com/useDebounce"&gt;different approach on usehooks.com&lt;/a&gt; to this and I recommend checking it out&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>frontend</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to stop procrastinating and change your¬†life</title>
      <author>Bruno Noriller</author>
      <pubDate>Mon, 27 Sep 2021 14:04:17 +0000</pubDate>
      <link>https://dev.to/noriller/how-to-stop-procrastinating-and-change-your-life-463m</link>
      <guid>https://dev.to/noriller/how-to-stop-procrastinating-and-change-your-life-463m</guid>
      <description>&lt;p&gt;I'm sorry.&lt;/p&gt;

&lt;p&gt;Why I'm sorry? Because I'm late this week!&lt;/p&gt;

&lt;p&gt;I wanted to make this (post writing, I mean) a weekly deal, every weekend I would go and post.&lt;/p&gt;

&lt;p&gt;First time? No pressure, I just made it and posted it.&lt;/p&gt;

&lt;p&gt;Second time? I stalled to the limit, but managed to release it in time.&lt;/p&gt;

&lt;p&gt;Third, this one? I remembered when it was already late enough and started rambling... It was way past my sleep time and I was just making a mess. I stopped and gone to sleep.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#does-this-sound-familiar-to-you"&gt;
  &lt;/a&gt;
  Does this sound familiar to you?
&lt;/h2&gt;




&lt;h2&gt;
  &lt;a href="#do-you-show-up-late-to-work"&gt;
  &lt;/a&gt;
  Do you show up late to work?
&lt;/h2&gt;

&lt;p&gt;I'm guessing you would only show up late if something extreme happened right?&lt;/p&gt;

&lt;p&gt;Then, why can't we be more punctual with the stuff for &lt;strong&gt;US&lt;/strong&gt;?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#its-not-just-about-routine"&gt;
  &lt;/a&gt;
  It's not just about routine!
&lt;/h3&gt;

&lt;p&gt;Routine does play a part, yes. But it's more than that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#its-about-people"&gt;
  &lt;/a&gt;
  It's about PEOPLE!
&lt;/h3&gt;

&lt;p&gt;People depending on &lt;strong&gt;YOU&lt;/strong&gt;! Or you just not wanting to let people down.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#its-about-honoring-your-promises-or-debts"&gt;
  &lt;/a&gt;
  It's about honoring your promises (or debts)!
&lt;/h3&gt;

&lt;p&gt;You show up to work because it's a contract (a promise if you will), it's also a way to earn money to honor your debts (a promise of payment).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#its-fun-and-a-major-part-of-your-life"&gt;
  &lt;/a&gt;
  It's fun and a major part of your life!
&lt;/h3&gt;

&lt;p&gt;This could be controversial... not everyone can work on what they really wanted or other factors make it not being "fun".&lt;/p&gt;

&lt;p&gt;But it IS a major part of your life and it should be fun, or else it loses meaning.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#why-we-dont-have-time-for-the-important-stuff"&gt;
  &lt;/a&gt;
  Why we "don't have time" for the important stuff?
&lt;/h2&gt;

&lt;p&gt;The boss needs you to make overtime? Sure boss! (you might not &lt;em&gt;want&lt;/em&gt; to, but you probably will... specially when it's sporadic and &lt;em&gt;they&lt;/em&gt; really, really need you.)&lt;/p&gt;

&lt;p&gt;This is basically the default, working 8 hours a day. But I had a internship of 4 hours a day and also worked almost 9 hours a day. I also worked 6 hours a day and I gotta say... 6 hours is a sweet spot and those extra hours you get I wouldn't trade for anything. That said... I will work 8 hours a day.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-about-stuff-outside-work"&gt;
  &lt;/a&gt;
  What about stuff outside work?
&lt;/h3&gt;

&lt;p&gt;Studying? No time!&lt;/p&gt;

&lt;p&gt;Bingeing a series? Hell yeah!&lt;/p&gt;

&lt;p&gt;Running? To tired...&lt;/p&gt;

&lt;p&gt;Games? I'm ready!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-know-the-drill"&gt;
  &lt;/a&gt;
  You know the drill...
&lt;/h3&gt;




&lt;h2&gt;
  &lt;a href="#what-can-we-even-do"&gt;
  &lt;/a&gt;
  What can we even do?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#a-meeting-with-yourself"&gt;
  &lt;/a&gt;
  A meeting with yourself
&lt;/h3&gt;

&lt;p&gt;You know those endless meetings? You attend them because people barged in and put them in &lt;strong&gt;YOUR&lt;/strong&gt; schedule right? How about &lt;strong&gt;YOU&lt;/strong&gt; put a meeting there &lt;strong&gt;YOURSELF&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;That will be your &lt;em&gt;ME&lt;/em&gt; time for you to do stuff for &lt;em&gt;YOU&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wait-to-announce-to-others"&gt;
  &lt;/a&gt;
  Wait to announce to others
&lt;/h3&gt;

&lt;p&gt;Who never said to someone: "I will do this thing!" and then never again?&lt;/p&gt;

&lt;p&gt;I've read somewhere you might end up with a &lt;em&gt;"mission accomplished"&lt;/em&gt; feeling if you speak of something too soon, you feel like you're already done something and then you just... stop.&lt;/p&gt;

&lt;p&gt;So, wait for it. Have something concrete to show and when you do announce it... make the people you've announce it to &lt;em&gt;want more.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If they start being dependent on that, all that about not letting people down and about honoring your promises will kick in and when you're feeling like procrastinating, that will help you keep going.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#make-it-worth-your-while"&gt;
  &lt;/a&gt;
  Make it worth your while
&lt;/h3&gt;

&lt;p&gt;For work, we have money... but why do you want to study? &lt;/p&gt;

&lt;p&gt;What do you hope to achieve with whatever you want to do?&lt;/p&gt;

&lt;p&gt;If you can focus on that... you can really do it.&lt;/p&gt;

&lt;p&gt;For me, these posts are a way to connect to people, to share experiences and knowledge and to make myself visible to the world. I want to change my life! I might find a new opportunity or even more. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#nothing-is-too-small"&gt;
  &lt;/a&gt;
  Nothing is too small!
&lt;/h2&gt;

&lt;p&gt;But what if all you want to learn how to juggle... just because? &lt;/p&gt;

&lt;p&gt;Any challenge gives you a thrill.&lt;/p&gt;

&lt;p&gt;Well, satisfaction in itself is something worth going for too.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://buymeacoffee.com/noriller"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---mXuVFrU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qb0vze1tmvesteacr8ez.png" alt="Buy me a Coffe!"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@bullterriere?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Simon Hurry&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>motivation</category>
      <category>procrastination</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Laser Focus priority strategy</title>
      <author>Cihat G√ºnd√ºz</author>
      <pubDate>Mon, 27 Sep 2021 14:03:47 +0000</pubDate>
      <link>https://dev.to/jeehut/laser-focus-priority-strategy-31ok</link>
      <guid>https://dev.to/jeehut/laser-focus-priority-strategy-31ok</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;Have you ever worked on a bigger change for an app and struggled with the release schedule? Have you ever wanted to get feedback from users early but weren't sure when exactly the right time is? Here's a simple but effective prioritization technique that can help slim down your scope and give you more confidence in it with different stages that can be mapped to Alpha, Beta &amp;amp; Release.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are lots of prioritization techniques that aim to solve different problems. You've probably already used some form of value vs. effort-based prioritization techniques, such as &lt;a href="https://www.productplan.com/glossary/rice-scoring-model/"&gt;RICE&lt;/a&gt;. Maybe you've even asked your target audience with a purposefully designed survey to learn from them, e.g. using the &lt;a href="https://en.wikipedia.org/wiki/Kano_model"&gt;KANO model&lt;/a&gt;. Every prioritization technique has its use cases and maybe they already helped you make a lot of useful decisions.&lt;/p&gt;

&lt;p&gt;But these strategies are designed for a &lt;strong&gt;higher-level&lt;/strong&gt; kind of &lt;strong&gt;prioritization&lt;/strong&gt;, as in deciding if you should be implementing feature A or feature B first or if feature C is even needed in the next version at all. They &lt;strong&gt;don't scale down&lt;/strong&gt; to tasks or even sub-tasks of your features though, so it's quite possible to do too much within a specific feature. Also, they don't help answer when you can start putting the feature in users' hands for early feedback to apply user-focused approaches, such as the &lt;a href="https://en.wikipedia.org/wiki/Lean_startup"&gt;Lean Startup&lt;/a&gt; methodology. One could of course opt for a method that is independent of scale, like the &lt;a href="https://en.wikipedia.org/wiki/MoSCoW_method"&gt;MoSCoW method&lt;/a&gt;, but their categories wouldn't be easy to rate because they're so abstract that different people would have different expectations for each category.&lt;/p&gt;

&lt;p&gt;The goal of the Laser Focus prioritization strategy is to provide clear rating categories, help with task scopes and provide an easy to apply method for interpretation. All three aspects together help you stay laser-focused.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#laser-focus-categories"&gt;
  &lt;/a&gt;
  Laser Focus categories
&lt;/h2&gt;

&lt;p&gt;There are three goals we want to reach with our categories: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Decide which tasks are &lt;strong&gt;in the scope&lt;/strong&gt; of the currently planned release. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Prioritize&lt;/strong&gt; tasks needed for an Alpha or Beta version &lt;strong&gt;higher&lt;/strong&gt; than the others.&lt;/li&gt;
&lt;li&gt;The Categories names should have an actionable, self-contained &lt;strong&gt;meaning&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We're suggesting the following categories which fulfill all requirements:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YQYUGd45--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jv363gqbqzboan3ocvl1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YQYUGd45--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jv363gqbqzboan3ocvl1.png" alt="VECtOR"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vital"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Vital&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Absolute minimum needed for the first round of testing. Can be ugly.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This allows for shipping a product with just "Vital" features or tasks implemented to a small group of testers to get feedback early. Of course, the scope of this Alpha testing should be made clear stating what basic features or tasks are still missing so they are not unnecessarily reported by the testers. But the vitals of the product or feature can be tested already and we get a first round of feedback if we're headed in the right direction.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#essential"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Essential&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Core aspects required for basic functionality. Can have rough edges.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A second and bigger round of testing can be started as soon as all "Essential" features or tasks are implemented. At this level, no specific testing scope needs to be communicated, it should be enough to call the version a "Beta" version where the base features are available but still a lot of things are missing or incomplete.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#completing"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Completing&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Ironing out rough-edges and completing aspects of functionality.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The "Completing" level defines the scope where the final product is ready to be released. In some situations, e.g. if a new version was announced for a specific date, the product can also be released while still, some "Completing" tasks are open, but then it should be publicly marked as "Beta". Typically this level includes all kinds of features or tasks that are important for a bigger customer base but are not relevant to evaluate the core of the product.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optional"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Optional&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Nice-to-haves that can be delayed to later (versions) or skipped entirely.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The "Optional" level has the notion that the features or tasks rated as such are wanted things, but that they are in no way necessary to release a finalized version of a product, even long term. Hence they can also be easily delayed or scrapped if needed as per the resources of the team.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#retracting"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Retracting&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Nice-to-haves (at first sight) that can (potentially) cause more harm than improve things.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Unlike "Optional", features or tasks rated as "Retracting" should be &lt;em&gt;actively avoided&lt;/em&gt;. That means it can make sense to document or keep them somewhere including the rationale why they should be avoided for long-term decision making. This saves time when the same idea comes up again sometime in the future. Also, if multiple people are involved in the rating, it can help identify the tasks where discussion might be necessary to clarify the effect of a task on the product.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#laser-focus-matrix"&gt;
  &lt;/a&gt;
  Laser Focus matrix
&lt;/h2&gt;

&lt;p&gt;The second pillar of the Laser Focus strategy is its &lt;strong&gt;multi-dimensional scalability&lt;/strong&gt;. To explain what this means and why it is important, let's apply the categories we have so far with an example: Let's develop a stopwatch app to track time for different things done throughout a day. This is the initial list of feature ideas, rated using the Laser Focus categories:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create projects ‚Üí &lt;strong&gt;Essential&lt;/strong&gt; (essential to app, but pre-filled projects enough for first test)&lt;/li&gt;
&lt;li&gt;Edit projects ‚Üí &lt;strong&gt;Completing&lt;/strong&gt; (not a necessity for testing purposes, but for final release)&lt;/li&gt;
&lt;li&gt;Delete projects ‚Üí &lt;strong&gt;Completing&lt;/strong&gt; (cleanup task, not needed for testing purposes, but for final)&lt;/li&gt;
&lt;li&gt;Start/Stop a timer ‚Üí &lt;strong&gt;Vital&lt;/strong&gt; (core idea of app, vital part of the app)&lt;/li&gt;
&lt;li&gt;Select a project for the timer ‚Üí &lt;strong&gt;Vital&lt;/strong&gt; (without selecting project, app idea not fulfilled)&lt;/li&gt;
&lt;li&gt;Edit past tracked times ‚Üí &lt;strong&gt;Retracting&lt;/strong&gt; (V2 with competitive feature, risk of cheating)&lt;/li&gt;
&lt;li&gt;Delete past tracked times ‚Üí &lt;strong&gt;Optional&lt;/strong&gt; (nice to have, no risk of cheating as no added time)&lt;/li&gt;
&lt;li&gt;Show historical time tracked on a selected project ‚Üí &lt;strong&gt;Essential&lt;/strong&gt; (core use case for app)&lt;/li&gt;
&lt;li&gt;Show projects with the most tracked time ‚Üí &lt;strong&gt;Essential&lt;/strong&gt; (core use case for app)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thanks to the categorization, we can already exclude two features from the first release and recognized even a feature we should probably never implement (6) that should be permanently documented. But more importantly, we now know that 4 and 5 are the "Vital" features to implement first. Let's start working on their sub-tasks:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Start/Stop a timer ‚Üí &lt;strong&gt;Vital&lt;/strong&gt;

&lt;ol&gt;
&lt;li&gt;Design Start/Stop button layout (low fidelity)&lt;/li&gt;
&lt;li&gt;Design Start/Stop button coloring &amp;amp; icons (high fidelity)&lt;/li&gt;
&lt;li&gt;Design Start/Stop button pulsating shadow effect (animations)&lt;/li&gt;
&lt;li&gt;Implement Start/Stop button layout (low fidelity)&lt;/li&gt;
&lt;li&gt;Implement Start/Stop button coloring &amp;amp; icons (high fidelity)&lt;/li&gt;
&lt;li&gt;Implement Start/Stop button pulsating shadow effect (animations)&lt;/li&gt;
&lt;li&gt;Setup basic tracked time database models&lt;/li&gt;
&lt;li&gt;Persist Start/Stop actions into the database&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Select a project for the timer ‚Üí &lt;strong&gt;Vital&lt;/strong&gt;

&lt;ol&gt;
&lt;li&gt;Design project selector navigation &amp;amp; layout (low fidelity)&lt;/li&gt;
&lt;li&gt;Design project selector shapes, colors &amp;amp; icons (high fidelity)&lt;/li&gt;
&lt;li&gt;Design project selector navigation &amp;amp; layout (low fidelity)&lt;/li&gt;
&lt;li&gt;Design project selector shapes, colors &amp;amp; icons (high fidelity)&lt;/li&gt;
&lt;li&gt;Persist selected project into the tracked time database model&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All clear, let's get started, right? &lt;em&gt;Right?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;No. I'm sure you noticed it already while reading/skimming through them. There's a problem. We have prioritized the features thinking about what's really necessary for being testable, for putting the app into users' hands. But now we have the same problem again, just on a different level. These tasks (and potentially also their sub-tasks) aren't all "Vital" for our very first version to put in users' hands. How can we fix this? Should we apply another rating for the tasks, too?&lt;/p&gt;

&lt;p&gt;Yes, absolutely! This is actually a requirement in the Laser Focus strategy: Apply the rating on all levels down the road! Not necessarily above levels, where you are allowed to choose any alternative prioritization technique. But the lower levels from wherever you want to start from should all be rated like this. Let's assign the Laser Focus categories to the tasks, too and then see what this means for overall priority:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Start/Stop a timer ‚Üí &lt;strong&gt;Vital&lt;/strong&gt;

&lt;ol&gt;
&lt;li&gt;Design Start/Stop button layout (low fidelity) ‚Üí &lt;strong&gt;Vital&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Design Start/Stop button coloring &amp;amp; icons (high fidelity) ‚Üí &lt;strong&gt;Completing&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Design Start/Stop button pulsating shadow effect (animations) ‚Üí &lt;strong&gt;Optional&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Implement Start/Stop button layout (low fidelity) ‚Üí &lt;strong&gt;Vital&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Implement Start/Stop button coloring &amp;amp; icons (high fidelity) ‚Üí &lt;strong&gt;Completing&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Implement Start/Stop button pulsating shadow effect (animations) ‚Üí &lt;strong&gt;Optional&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Setup basic tracked time database models ‚Üí &lt;strong&gt;Essential&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Persist Start/Stop actions into database ‚Üí &lt;strong&gt;Essential&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Select a project for the timer ‚Üí &lt;strong&gt;Vital&lt;/strong&gt;

&lt;ol&gt;
&lt;li&gt;Design project selector navigation &amp;amp; layout (low fidelity) ‚Üí &lt;strong&gt;Vital&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Design project selector shapes, colors &amp;amp; icons (high fidelity) ‚Üí &lt;strong&gt;Completing&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Implement project selector navigation &amp;amp; layout (low fidelity) ‚Üí &lt;strong&gt;Vital&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Implement project selector shapes, colors &amp;amp; icons (high fidelity) ‚Üí &lt;strong&gt;Completing&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Persist selected project into tracked time database model ‚Üí &lt;strong&gt;Essential&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It's important to note that the reference value for the ratings of the tasks was the feature because it's the direct parent. This means that I asked myself the question "Is persisting Start/Stop actions into database vital or essential &lt;em&gt;to the feature&lt;/em&gt; Start/Stop a timer?" and not to the app or anything else. This makes answering the questions much easier.&lt;/p&gt;

&lt;p&gt;Let's visualize these two different levels of rating with a simple matrix. On the X-axis we put the ratings of the features. On the Y-axis the ratings of the tasks. The circles represent the tasks:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r4LInRmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2lsufkxgoiiuwxicxlw5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r4LInRmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2lsufkxgoiiuwxicxlw5.png" alt="Example Matrix"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;As you can see, tasks 4a, 4d, 5a, and 5c are in the bottom left field, the "Vital-Vital" field, or short "VV". The field's background is tinted red. It contains all tasks the focus should be on first. Once they're all implemented, the very first testing round can begin, the Alpha phase starts.&lt;/p&gt;

&lt;p&gt;The tasks 4g, 4h, and 5e in the yellow-tinted field "Vital-Essential" or short "VE" should be tackled next. Once all tasks in all three yellow-tinted fields are completed, the Beta phase starts.&lt;/p&gt;

&lt;p&gt;The "VC" field with its "Completing" tasks for the "Vital" features should be tackled last among the tasks we defined so far. Once all tasks in all green-tinted fields are done, it's Release time.&lt;/p&gt;

&lt;p&gt;In the above example, we skipped the tasks for all non-Vital features. If we had rated them also, the full matrix could have looked something like this, including also the "Retracting" rating:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GB4b-NaZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wgxx6ldb4ff81zrht2md.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GB4b-NaZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wgxx6ldb4ff81zrht2md.png" alt="General Matrix"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We can see how the Alpha, Beta, and Release tasks are circularly layered around the origin point (bottom left corner), visually providing us a priority for each task based on its distance to the origin. This easily scales to a third axis if for example sub-tasks were added to each task. Formally speaking, this scales to any number of dimensions. To calculate the overall category of any given element, just look up all ancestors and just select the lowest priority as the overall category of the "atomic" (lowest level) element. For example, imagine a sub-task with the category rating "Essential", a parent task rated "Vital" and its parent feature rated "Completing". Overall, the lowest priority is "Completing", so this is the overall category of the sub-task.&lt;/p&gt;

&lt;p&gt;Calculating the overall category alone can lead to many tasks being on the same level, especially at "Completing" where we have 5 different fields. A way of prioritizing features or tasks within the same category is by calculating the average of its own category combined with that of all its ancestor's categories. To do this, let's assign each category a number (from 1 "Vital" to 5 "Retracting"), the lowest level (e.g. a sub-task) can then be represented by a tuple, e.g. &lt;code&gt;(2, 1, 3)&lt;/code&gt; in the above example. The average of these numbers is simply calculated by &lt;code&gt;(2 + 1 + 3) / 3 = 2.0&lt;/code&gt;. Another task with more ancestors and the same overall "Completing" category might be rated as &lt;code&gt;(3, 2, 3, 1)&lt;/code&gt; and therefore have an average of &lt;code&gt;(3 + 2 + 3 + 1) / 4 = 2.25&lt;/code&gt;, so it should be prioritized lower. The higher the overall average, the lower the priority ‚Äì that makes a lot of sense as the average number roughly resembles the distance to the origin ‚Äì the highest possible priority.&lt;/p&gt;

&lt;p&gt;But don't worry, you don't actually have to calculate these averages, there's a simpler way based on the matrix we've seen above with enough precision:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U-9ak1X_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c648lfmlqhowe2430cfr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U-9ak1X_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c648lfmlqhowe2430cfr.png" alt="Priority Order"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above diagram shows in which order the fields should be tackled, based on origin distance. Note that there are two fields placed 2nd, 4th, and 5th each. For these fields, there's a choice to be made that can be different depending on the situation: Should we focus more on adding more features? Or should we focus more on improving the already started features? For a feature focus expansion first, you should continue in direction of the "Feature category", e.g. "EV" before "VE". For improving existing features first, it should be the other way around. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#laser-focus-breakdown"&gt;
  &lt;/a&gt;
  Laser Focus breakdown
&lt;/h2&gt;

&lt;p&gt;In the above section, we learned that categorization on multiple levels is key to the Laser Focus concept. If you try to apply this to your project right away, you may realize though that many or even all of your features or tasks are actually "Vital" or "Essential" to you. If this is the case, then it's a sign that you have probably not efficiently split your tasks yet.&lt;/p&gt;

&lt;p&gt;That's why it's important to break down your tasks the right way before categorizing them. The guiding question you should ask yourself while splitting features into tasks or tasks into sub-tasks should not be restricted to "which steps do I need to make to finalize it". You should also think about the effort for each step and if the effort isn't negligibly small, you might want to consider splitting it away. Sometimes it might seem to be hard doing that, but more often than not, it's a good idea to follow the approach "make it work, then make it better" while splitting the tasks.&lt;/p&gt;

&lt;p&gt;For example, for the above feature "Start/Stop a timer" we could have split it up into 3 tasks: "Design the Start/Stop buttons", "Implement the Start/Stop buttons" and "Persist data". The problem with this is that there are no different levels of completion. It's better to break it down even further. Of course, we could do that as sub-tasks under these tasks, but to make priority calculation easier, it is recommended to do it in fewer levels. So instead we opted for "Design the Start/Stop button &lt;em&gt;layout&lt;/em&gt;", "Implement Start/Stop button &lt;em&gt;layout&lt;/em&gt;" and the same two tasks also for "... coloring &amp;amp; icons" and "... pulsating shadow effect".&lt;/p&gt;

&lt;p&gt;Ask yourself which parts have their own effort and split them so each task is worth being prioritized based on the effort needed. Don't split micro-tasks away, it's not worth prioritizing such small tasks, just keep them as part of another task.&lt;/p&gt;

&lt;p&gt;A proper breakdown is very important for the Laser Focus strategy to be effective.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Let's sum up the Laser Focus prioritization strategy:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Break down&lt;/strong&gt; your features and tasks into smaller steps of different completion levels&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Rate them&lt;/strong&gt; on each level with "Vital", "Essential", "Completing", "Optional" or "Retracting"&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Visualize or calculate&lt;/strong&gt; the overall priority for the lowest level by considering all ancestors&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Apply these steps at any given time for your project and it will help you keep focusing on the important things and confidently putting your work-in-progress versions into users' hands early.&lt;/p&gt;

&lt;p&gt;I hope this helps!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article was written &lt;strong&gt;by &lt;a href="https://twitter.com/Jeehut"&gt;Cihat G√ºnd√ºz&lt;/a&gt;&lt;/strong&gt;,&lt;br&gt;
Head of Mobile at &lt;strong&gt;&lt;a href="https://www.papershift.com/"&gt;Papershift&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>management</category>
      <category>prioritization</category>
      <category>efficiency</category>
      <category>focus</category>
    </item>
    <item>
      <title>nopCommerce CLI</title>
      <author>Diogenes Polanco</author>
      <pubDate>Mon, 27 Sep 2021 13:56:06 +0000</pubDate>
      <link>https://dev.to/diogenespolanco/nopcommerce-cli-4do5</link>
      <guid>https://dev.to/diogenespolanco/nopcommerce-cli-4do5</guid>
      <description>&lt;h1&gt;The modern web developer's tool.&lt;/h1&gt;
 

&lt;p&gt; 
  nopCommerce CLI is a development tool for build plugins for nopCommerce Solutions.
&lt;/p&gt; 
 



&lt;h2&gt;
  &lt;a href="#development-setup"&gt;
  &lt;/a&gt;
  Development Setup
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Install &lt;a href="https://nodejs.org/es/download/"&gt;[node.js] &lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Install &lt;a href="https://dotnet.microsoft.com/download"&gt;[dotnet core]&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Clone &lt;a href="https://github.com/nopSolutions/nopCommerce"&gt;[nopCommerce]&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#setting-up-a-plugin-of-nopcommerce"&gt;
  &lt;/a&gt;
  Setting Up a Plugin of nopCommerce
&lt;/h3&gt;

&lt;p&gt;Install the nopCommerce CLI globally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm install -g nopcli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create plugin:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ nopcli new -g=[GROUP NAME] -p=[PLUGIN NAME]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Build the plugin:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ nopcli build -g=[GROUP NAME] -p=[PLUGIN NAME]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;nopCommerce CLI is cross-platform, fast, scalable, has incredible tooling, and is loved by millions.&lt;/p&gt;

&lt;p&gt;
    &lt;a href="https://www.paypal.com/donate/?hosted_button_id=VM4NMF6PY4SMG"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lR4KkDKC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/DiogenesPolanco/nopCommerce-cli/development/src/assets/images/badge.svg" alt="Badge"&gt;
    &lt;/a&gt;
    &lt;br&gt;&lt;br&gt;
    &lt;b&gt;üôå Use &lt;a href="https://www.npmjs.com/package/nopcli"&gt;donations&lt;/a&gt; to help support &lt;b&gt;this&lt;/b&gt; project! üôå&lt;/b&gt;
    &lt;br&gt; 
    &lt;br&gt; 
    &lt;b&gt;Love &lt;a href="https://github.com/DiogenesPolanco/nopCommerce-cli"&gt;nopCommerce CLI?&lt;/a&gt; Give our repo a star ‚≠ê ‚¨ÜÔ∏è.&lt;/b&gt;
&lt;/p&gt;

</description>
      <category>nopcommerce</category>
      <category>cli</category>
      <category>ecommerce</category>
      <category>dotnet</category>
    </item>
  </channel>
</rss>
