<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The Technical Debt explained with a kitchen analogy.</title>
      <author>Samuel FAURE</author>
      <pubDate>Thu, 08 Jul 2021 07:44:12 +0000</pubDate>
      <link>https://dev.to/samuelfaure/the-technical-debt-explained-with-a-kitchen-analogy-518h</link>
      <guid>https://dev.to/samuelfaure/the-technical-debt-explained-with-a-kitchen-analogy-518h</guid>
      <description>&lt;p&gt;&lt;em&gt;This article is also available on &lt;a href="https://suchdevblog.com/opinions/TechnicalDebtKitchen.html"&gt;my blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I'm often confronted to the challenge of explaining to a non-tech person what the "Technical Debt" is. Or maybe I have to explain the difference between Good code VS Bad code, or between a good codebase VS a bad codebase.&lt;/p&gt;

&lt;p&gt;More importantly, I often need people to &lt;em&gt;feel&lt;/em&gt; what it's like to work with or without Technical Debt. How can a tech person convey the &lt;em&gt;feelings&lt;/em&gt; of a work environment full of Technical Debt to someone who never coded in their life?&lt;/p&gt;

&lt;p&gt;The best metaphor I could find is the kitchen.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-technical-debt-explained-for-tech-people"&gt;
  &lt;/a&gt;
  The Technical Debt explained for tech people:
&lt;/h2&gt;

&lt;p&gt;The Technical Debt is what happens when you try to take shortcuts in the development or maintenance of your application :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You developed a new feature but the code is hacky, slightly disgusting, and you won't factorize it and polish it? That's technical debt.&lt;/li&gt;
&lt;li&gt;You're not taking the time to test your application? This adds to your technical debt.&lt;/li&gt;
&lt;li&gt;No time to update to the last version of your framework? More technical debt.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TD can come from pure laziness, or from a lack of technical skill, but that's extremely rare. The overwhelming majority of cases is a lack of time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-technical-debt-is-very-bad%C2%A9"&gt;
  &lt;/a&gt;
  The Technical Debt is Very BadÂ©
&lt;/h2&gt;

&lt;p&gt;Every developer worth their salt knows it: while small amounts of TD are not a big issue, and can even be desirable in some cases (i.e. you have a deadline you can't miss) in the long run an out-of-control Technical Debt will be a terrible burden for your whole company:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It drastically slows your development speed in the middle / long term.&lt;/li&gt;
&lt;li&gt;It works as a feedback loop: the more TD you currently have, the more you will generate.&lt;/li&gt;
&lt;li&gt;It will make your engineers hate the work. More on that later.&lt;/li&gt;
&lt;li&gt;It can, in the end, literally destroy your company.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-its-like-to-work-with-technical-debt-the-kitchen-analogy"&gt;
  &lt;/a&gt;
  What it's like to work with Technical Debt: the Kitchen Analogy.
&lt;/h2&gt;

&lt;p&gt;Imagine that you're a professional cook. A very good one, actually: after years and years of hard studies, you developed skills that are sought-after in the best 3-stars restaurants.&lt;/p&gt;

&lt;p&gt;You just got hired in a new, promising restaurant: "The Unicorn". The pay is good. The team is great. You're psyched up for your first day.&lt;/p&gt;

&lt;p&gt;Then on your first morning, you enter the kitchen and this is what you see:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BypofE_i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3otj0teuqnumyb8xjhwl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BypofE_i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3otj0teuqnumyb8xjhwl.jpg" alt="Very dirty kitchen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your first thought, obviously, is "What a f**** mess. This needs to be cleaned immediately and urgently". But the manager tells you there is no time, customers are arriving right now, so you'd better start cooking this instant.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you think you'll have a good, enjoyable first day of work?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now realize this is what you'll be dealing with, 5 days a week, 4 weeks a month, for many years of your precious life.&lt;/p&gt;

&lt;p&gt;Working in a dirty kitchen is extremely depressing. It will make everything you do a terrible chore. Even the simplest plate will be hard to prepare. You're going to serve shit, sometimes literal shit, to your customers. There will be bugs crawling everywhere, and every time you squash one, two more will appear. You will lose more time removing squashed bug parts from the customer's plates than you would spend cleaning or, you know, actually cooking good food.&lt;/p&gt;

&lt;p&gt;Now imagine instead that this is what you saw when you arrived:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wbb4S_3N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b609sx2z41d0qulgwpsz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wbb4S_3N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b609sx2z41d0qulgwpsz.jpg" alt="Very clean kitchen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clean. Polished. Everything well organized, easy to access. Just beautiful.&lt;/p&gt;

&lt;p&gt;Will it be the same work experience?&lt;/p&gt;

&lt;p&gt;There's a reason for the popular saying: &lt;em&gt;"Technical Debt is debt you repay with your soul"&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-allow-technical-debt-to-exist"&gt;
  &lt;/a&gt;
  Why do we allow Technical Debt to exist?
&lt;/h2&gt;

&lt;p&gt;There's a lot of reasons for a TD to grow out of control. None of them are good.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#young-startup-on-takeoff"&gt;
  &lt;/a&gt;
  Young start-up on takeoff
&lt;/h3&gt;

&lt;p&gt;The only maybe-somehow-acceptable situation where a TD can grow significantly would be at the very early stages in a start-up creation. You need to conquer market shares fast, so you need to develop fast.&lt;/p&gt;

&lt;p&gt;Here's where the issues starts to appear, though. Because TD generates more TD, the start-up which doesn't take care of its TD early will then carry it for years and years, until it turns into a black hole destroying your company efficiency and slurping your developers wellbeing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bad-management"&gt;
  &lt;/a&gt;
  Bad management
&lt;/h3&gt;

&lt;p&gt;Non-tech managers, sadly, do not understand what the TD is, and as I mentioned earlier, it is extremely difficult to explain to them the extent of the issue.&lt;/p&gt;

&lt;p&gt;They will only see what is actually produced by the dev team, i.e. which features are getting out. They don't realize most of the work that happens under the hood.&lt;/p&gt;

&lt;p&gt;If they end up measuring your productivity in features (or worse, in amount of code produced) without any regard for the Technical Debt, then &lt;strong&gt;programmers are actually incentivized to sabotage the codebase.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Bill gates said "Measuring programming progress by lines of code is like measuring aircraft building progress by weight.". A great analogy, since heavy aircrafts are harder to fly &amp;amp; more fuel-consuming.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#never-worked-in-the-clean"&gt;
  &lt;/a&gt;
  Never worked in the clean
&lt;/h3&gt;

&lt;p&gt;Programming schools often don't spend enough time on the necessity of a clean codebase. They usually just ask you to code small or medium-sized projects with a given list of features.&lt;/p&gt;

&lt;p&gt;Therefore, a junior developer just out of school won't realize the importance of a clean work environment.&lt;/p&gt;

&lt;p&gt;Now, if the junior joins a team of professionals who uphold themselves to high standards, he will realize &lt;em&gt;how much better&lt;/em&gt; cooking in a clean kitchen is.&lt;/p&gt;

&lt;p&gt;But usually, they will join a company with subpar coding practices. This will reinforce in them the idea that this is what coding is. Coding is hard, and annoying, and there's shit everywhere, that's just how the work is, and nothing can be done about it.&lt;/p&gt;

&lt;p&gt;It is normal for a kitchen to look disgusting. That's how kitchens are.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I often hear stories of junior developers, "realizing the work is not for them" and wanting to quit the industry.&lt;/p&gt;

&lt;p&gt;They feel stressed, burned-out, everything seems just so damn complex all the damn time. They're exhausted. They don't think they can keep doing the same work for 40 more years.&lt;/p&gt;

&lt;p&gt;Every time I ask them about their work conditions, it becomes clear they've been working in the dirtiest kitchen.&lt;/p&gt;

&lt;p&gt;We are literally losing developers under the dirty dishes.&lt;/p&gt;

&lt;p&gt;It needs to stop. The Technical Debt culture is &lt;a href="https://dev.to/samuelfaure/the-problem-with-the-basecamp-books-or-why-our-work-culture-sucks-3a7b"&gt;one of the major reasons why our work culture suck&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And it really doesn't have to. Just clean your damn kitchen.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>management</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Simplify condition rendering in React.js
</title>
      <author>RedÅ¾ep Murati</author>
      <pubDate>Thu, 08 Jul 2021 07:43:03 +0000</pubDate>
      <link>https://dev.to/ornio/simplify-condition-rendering-in-react-js-33l8</link>
      <guid>https://dev.to/ornio/simplify-condition-rendering-in-react-js-33l8</guid>
      <description>&lt;p&gt;As a professional developer you are forced to stay up to date with the latest trends in technology. This year I've added Svelte to my bucket list as a new framework to learn.&lt;br&gt;
While researching Svelte I was surprised by the way they handle condition rendering.&lt;br&gt;
Take a look at this example found in their docs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loggedIn&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Log&lt;/span&gt; &lt;span class="nx"&gt;out&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sr"&gt;/if&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Everything is neatly wrapped with if clause and separated from normal flow.&lt;/p&gt;

&lt;p&gt;After a quick prototyping I present to you the most powerful component I have ever written, an IF component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;IF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;   &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By offloading condition into a separate component this will improve code cleanness and readability by quite a margin (for free).&lt;/p&gt;

&lt;p&gt;Letâs imagine the Svelte example in our React app. It would go something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;â¦&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loggedIn&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Log&lt;/span&gt; &lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is not an end of the world issue when you have just one condition but as our apps grow, so do the conditions. &lt;/p&gt;

&lt;p&gt;Take a look at the same component now refactored to use IF:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;â¦&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IF&lt;/span&gt; &lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loggedIn&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Log&lt;/span&gt; &lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/IF&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now itâs easier to track down conditions and debug faulty ones, plus the code looks way cleaner now that conditions are gone from JSX. &lt;/p&gt;

&lt;p&gt;Hope you found this helpful â¤ï¸&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>I Created 500+ Dev questions and Launched a Quiz platform ðð</title>
      <author>Madza</author>
      <pubDate>Thu, 08 Jul 2021 07:41:17 +0000</pubDate>
      <link>https://dev.to/madza/i-created-500-dev-questions-and-launched-a-quiz-platform-4d3k</link>
      <guid>https://dev.to/madza/i-created-500-dev-questions-and-launched-a-quiz-platform-4d3k</guid>
      <description>&lt;p&gt;Companies usually want to test a specific area of knowledge. Quizzes are an engaging method to measure your expertise in the particular field.&lt;/p&gt;

&lt;p&gt;That's why I created &lt;a href="https://quizzes.madza.dev"&gt;DevQuizzes&lt;/a&gt;, an online platform where you can test your knowledge across various DEV topics.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#content"&gt;
  &lt;/a&gt;
  Content
&lt;/h2&gt;

&lt;p&gt;Over the last 6 months I read a lot of official documentation and studied dozens of tutorials to create the content basis for initial launch. &lt;/p&gt;

&lt;p&gt;I ended up creating over 500 questions in 20 categories. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3I4QJ_sU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.madza.dev/uploads/2021/07/1625687995_1920x937.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3I4QJ_sU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.madza.dev/uploads/2021/07/1625687995_1920x937.png" alt="Main"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Numbers in the parentheses show the questions in each quiz. Grey color represents the quizzes in progress, while white - all the new ones. &lt;/p&gt;

&lt;p&gt;Percentages are shown just for completed quizzes, with green and red colors representing the passed and failed quizzes, respectively.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quiz"&gt;
  &lt;/a&gt;
  Quiz
&lt;/h2&gt;

&lt;p&gt;When a category is selected, user gets presented with a quiz. By default unanswered questions are shown first.&lt;/p&gt;

&lt;p&gt;Each question usually provides 2 to 4 possible answers. For the reference each question has a topic/title.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4jTCEQCp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.madza.dev/uploads/2021/07/1625603254_1920x937.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4jTCEQCp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.madza.dev/uploads/2021/07/1625603254_1920x937.png" alt="Correct"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next question is only available if the current question is answered. The previous questions are available as soon as there are some.&lt;/p&gt;

&lt;p&gt;When provided, user can click a Hint button. This way an additional information about the question will be revealed.&lt;/p&gt;

&lt;p&gt;Some questions do provide a code snipped, which the question is based on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#progress"&gt;
  &lt;/a&gt;
  Progress
&lt;/h2&gt;

&lt;p&gt;All the progress is stored in the Local storage.&lt;/p&gt;

&lt;p&gt;Users are also able to clear the Local storage, for both - all quizzes at once or any particular quiz separately.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6UTGtV21--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.madza.dev/uploads/2021/07/1625603590_1920x937.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6UTGtV21--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.madza.dev/uploads/2021/07/1625603590_1920x937.png" alt="Progress"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At any point during the quiz, the user has an access to the list of questions, meaning the questions can be manually picked or reviewed later. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rewards"&gt;
  &lt;/a&gt;
  Rewards
&lt;/h2&gt;

&lt;p&gt;After completion of the quiz, user gets awarded ether gold (&amp;gt;90%), silver (&amp;gt;75%), bronze (&amp;gt;60%). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YzSOXePI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.madza.dev/uploads/2021/07/1625602912_1920x937.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YzSOXePI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.madza.dev/uploads/2021/07/1625602912_1920x937.png" alt="Results"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If user scores in the range from 60% to 40%, test is passed but no award is given.  All the results below 40% fail.&lt;/p&gt;

&lt;p&gt;Users have an option to share their achievements in social media.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contributions"&gt;
  &lt;/a&gt;
  Contributions
&lt;/h2&gt;

&lt;p&gt;Everyone is welcome to submit questions via &lt;a href="https://airtable.com/shrB1hZYi32q9AxYM"&gt;Airtable form&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Questions will be accepted unless they duplicate an existing content. The database will be updated daily.&lt;/p&gt;

&lt;p&gt;Each contributor gets credited as well as included in the the most recent and/or most active contributors list in the Top section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-notes"&gt;
  &lt;/a&gt;
  Final notes
&lt;/h2&gt;

&lt;p&gt;The project is &lt;a href="https://quizzes.madza.dev"&gt;live&lt;/a&gt;, feel free you try it. The quiz platform is responsive, meaning it is easy to play on both desktop and mobile devices.&lt;/p&gt;

&lt;p&gt;I'm hoping the project will help the community. I'm also looking forward to add questions and features to the platform itself in the future.&lt;/p&gt;




&lt;p&gt;If you have any questions, feel free to reach out!&lt;/p&gt;

&lt;p&gt;Connect me on &lt;a href="https://twitter.com/madzadev"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/madzadev/"&gt;LinkedIn&lt;/a&gt; and &lt;a href="https://github.com/madzadev"&gt;GitHub&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>productivity</category>
      <category>webdev</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>Navigation Menu design Concept</title>
      <author>SUDIPTA PRADHAN</author>
      <pubDate>Thu, 08 Jul 2021 07:39:19 +0000</pubDate>
      <link>https://dev.to/sudipta/navigation-menu-design-concept-1hn4</link>
      <guid>https://dev.to/sudipta/navigation-menu-design-concept-1hn4</guid>
      <description>&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/sudipta95/embed/GRmZmYw?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>animation</category>
      <category>css</category>
      <category>html</category>
      <category>javascript</category>
    </item>
    <item>
      <title>An introduction to Deno</title>
      <author>NARUHODO</author>
      <pubDate>Thu, 08 Jul 2021 07:24:13 +0000</pubDate>
      <link>https://dev.to/naruhodo/an-introduction-to-deno-5e88</link>
      <guid>https://dev.to/naruhodo/an-introduction-to-deno-5e88</guid>
      <description>&lt;p&gt;&lt;a href="https://deno.land/"&gt;Deno&lt;/a&gt; is a JavaScript and TypeScript runtime build in Rust. It was created by &lt;a href="https://github.com/ry"&gt;Ryan Dahl&lt;/a&gt;, who is also the original creator of Node.js.&lt;/p&gt;

&lt;p&gt;Eventually Deno might take over Node.js but at the moment, it's not there yet. Node.js is too popular and is already used in many projects. It has a much bigger community and much more modules/packages available.&lt;/p&gt;

&lt;p&gt;Deno does not provide a strong enough incentive for companies to decide to make the switch. At least not yet.&lt;/p&gt;

&lt;p&gt;Performance-wise it is comparable to Node.js, another reason not to switch.&lt;/p&gt;

&lt;p&gt;So why am I writing an article about it? And what does Deno have that Node.js doesn't?&lt;/p&gt;

&lt;p&gt;Well, I believe that if Ryan Dahl decided to build a new JS runtime, he must have had a good reason. He actually gave &lt;a href="https://www.youtube.com/watch?v=M3BM9TB-8yA"&gt;a talk about this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In his talk he mentions multiple things he regrets about Node.js. Two big ones are that Node.js is insecure, by default it has access to everything (filesystem, network, etc) and NPM, the default package manager (bundled with Node.js) is centralized and private.&lt;/p&gt;

&lt;p&gt;Deno by default does not have access to your network or your filesystem. It also allows you to use modules from anywhere without relying on a 3rd party tool, you just need to provide the full URL pointing to the module.&lt;/p&gt;

&lt;p&gt;Another nice thing about Deno is that it runs TypeScript out of the box, you don't need a transpilation step nor a complicated configuration.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-are-we-going-to-build"&gt;
  &lt;/a&gt;
  What are we going to build?
&lt;/h4&gt;

&lt;p&gt;Now that I've introduced Deno, I will show you how to build a simple API with it. I will reproduce the example I made in &lt;a href="https://naruhodo.dev/build-an-api-in-rust-part-1"&gt;my Rust guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We will create an API with the following endpoints&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;GET /&lt;/code&gt;&lt;br&gt;
This endpoint will simply return a text message &lt;code&gt;Hello World!&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;GET /items&lt;/code&gt;&lt;br&gt;
This endpoint will return the list of items we have in the database in a JSON format.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;POST /items&lt;/code&gt;&lt;br&gt;
This endpoint will allow us to create a new item in the database.&lt;br&gt;
It expects a body of type:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;POST /items&lt;/code&gt; endpoint will be protected with an authorization middleware using JWT (JSON Web Token).&lt;/p&gt;

&lt;p&gt;We will also setup &lt;code&gt;velociraptor&lt;/code&gt; which allows us to define scripts in a file to run Deno commands more easily. It is a bit similar to the &lt;code&gt;scripts&lt;/code&gt; property in Node.js's &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h4&gt;

&lt;p&gt;To be able to follow the guide, you will need to have &lt;a href="https://deno.land/#installation"&gt;Deno&lt;/a&gt; installed. You will need &lt;code&gt;velociraptor&lt;/code&gt; as well, you can go ahead and install it by following the &lt;a href="https://velociraptor.run/docs/installation/"&gt;official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You will also need to have a MongoDB running. If you're not sure how to install MongoDB, there are 3 ways I can think of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can either install MongoDB on your machine. Follow the &lt;a href="https://docs.mongodb.com/manual/administration/install-community/"&gt;official documentation&lt;/a&gt; to do so.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you have Docker, you can run a MongoDB container. Check out the &lt;a href="https://hub.docker.com/_/mongo/"&gt;&lt;code&gt;mongo&lt;/code&gt; image documentation&lt;/a&gt;. This is the command I use to run the &lt;code&gt;mongo&lt;/code&gt; container:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; 27017:27017 &lt;span class="nt"&gt;--name&lt;/span&gt; mongo mongo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;If you prefer to avoid installing anything (MongoDB/Docker), you can create a free cluster on &lt;a href="https://www.mongodb.com/cloud/atlas"&gt;MongoDB Atlas&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#set-up-the-environment"&gt;
  &lt;/a&gt;
  Set up the environment
&lt;/h4&gt;

&lt;p&gt;We need to add a couple environment variables in a &lt;code&gt;.env&lt;/code&gt; file. If you haven't done it yet, create a new directory for our project and move inside it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;deno-example &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;deno-example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then create the &lt;code&gt;.env&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch&lt;/span&gt; .env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the following two variables inside the file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MONGODB_URI=mongodb://127.0.0.1:27017
JWT_SECRET=my_secret
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Adapt the &lt;code&gt;MONGODB_URI&lt;/code&gt; if necessary. For the &lt;code&gt;JWT_SECRET&lt;/code&gt; variable, change it to whatever you like.&lt;/p&gt;

&lt;p&gt;It is good practice to have a &lt;code&gt;.env.example&lt;/code&gt; as well, to document the environment variables. Go ahead and create that file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch&lt;/span&gt; .env.example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the following in it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MONGODB_URI= ** MongoDB connection string (e.g. mongodb://127.0.0.1:27017)
JWT_SECRET= ** Secret to encode/decode JWTs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're using Git, make sure to add &lt;code&gt;.env&lt;/code&gt; inside your &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#add-the-dependencies"&gt;
  &lt;/a&gt;
  Add the dependencies
&lt;/h4&gt;

&lt;p&gt;In Deno you can import the modules directly in your code by using their URL. To make things a bit cleaner and avoid having to copy and paste modules URLs all the time, we can instead create a &lt;code&gt;import-map.json&lt;/code&gt; file where we define our dependencies and give them an alias.&lt;/p&gt;

&lt;p&gt;Create the &lt;code&gt;import-map.json&lt;/code&gt; file at the project root&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;import-map.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"imports"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"oak"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://deno.land/x/oak@v7.7.0/mod.ts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"denodb"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://deno.land/x/denodb@v1.0.38/mod.ts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"dotenv"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://deno.land/x/dotenv@v2.0.0/mod.ts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"djwt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://deno.land/x/djwt@v2.2/mod.ts"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now import these modules using their alias: &lt;code&gt;oak&lt;/code&gt;, &lt;code&gt;denodb&lt;/code&gt;, &lt;code&gt;dotenv&lt;/code&gt; and &lt;code&gt;djwt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's review the dependencies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;oak&lt;/code&gt; is our web library / framework, it is heavily inspired of &lt;code&gt;koa&lt;/code&gt; the "successor" of &lt;code&gt;express&lt;/code&gt; in Node.js.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;denodb&lt;/code&gt; is an ORM supporting multiple databases including MongoDB.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;dotenv&lt;/code&gt; is similar to the module of the same name in Node.js. It allows to inject environment variables from a file (by default &lt;code&gt;.env&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;djwt&lt;/code&gt; is a JWT encoding/parsing library.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#define-the-scripts"&gt;
  &lt;/a&gt;
  Define the scripts
&lt;/h4&gt;

&lt;p&gt;Now we will define two scripts to launch the API more easily.&lt;/p&gt;

&lt;p&gt;Create a &lt;code&gt;scripts.json&lt;/code&gt; file at the root of the project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;scripts.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And add the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"imap"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"import-map.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"cmd"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"src/main.ts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"watch"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"allow"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"net"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"read"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"env"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"cmd"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"src/main.ts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"watch"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"allow"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"net"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"read"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"env"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've configured a global &lt;code&gt;imap&lt;/code&gt; (short for import map) that will be used by all the scripts. Then I've defined two scripts, &lt;code&gt;dev&lt;/code&gt; and &lt;code&gt;start&lt;/code&gt;. They both do the same thing except that &lt;code&gt;dev&lt;/code&gt; will watch for file changes.&lt;/p&gt;

&lt;p&gt;The API will need access to the &lt;strong&gt;network&lt;/strong&gt; to communicate with MongoDB and receive requests from the outside. It will also need &lt;strong&gt;read&lt;/strong&gt; access to the filesystem to read the &lt;code&gt;.env&lt;/code&gt; file. And finally it needs access to the &lt;strong&gt;environment&lt;/strong&gt; to be able to add the variables defined in the &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lets-code"&gt;
  &lt;/a&gt;
  Let's code
&lt;/h4&gt;

&lt;p&gt;First, create the &lt;code&gt;src&lt;/code&gt; directory&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;src
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then create a &lt;code&gt;main.ts&lt;/code&gt; file inside that directory&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;src/main.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From now on all the code that I will show should go inside that &lt;code&gt;src/main.ts&lt;/code&gt; file. Of course in a real project you should split the code and logic in different subdirectories.&lt;/p&gt;

&lt;p&gt;Let's start by importing the modules. Add the following at the top of the file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;RouterMiddleware&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;oak&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;DataTypes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MongoDBConnector&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;denodb&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;jwt&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;djwt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nothing complicated so far.&lt;/p&gt;

&lt;p&gt;Now we will use &lt;code&gt;dotenv&lt;/code&gt; to inject the environment variables from the &lt;code&gt;.env&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import environment variables from the ".env" file&lt;/span&gt;
&lt;span class="c1"&gt;// and ensure all the variables are defined&lt;/span&gt;
&lt;span class="nx"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;safe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;export&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the &lt;code&gt;safe&lt;/code&gt; option ensure that our &lt;code&gt;.env&lt;/code&gt; matches variables defined in &lt;code&gt;.env.example&lt;/code&gt;. The &lt;code&gt;export&lt;/code&gt; option is to inject the variable inside Deno's environment (&lt;code&gt;Deno.env&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;To ensure the environment variables are set up correctly I will double check that &lt;code&gt;Deno.env&lt;/code&gt; contains the variables defined in the &lt;code&gt;.env&lt;/code&gt; file like so&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;missingEnvVars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="c1"&gt;// Double check that the the "MONGODB_URI" is defined&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MONGODB_URI&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;missingEnvVars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MONGODB_URI&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Double check that the the "JWT_SECRET" is defined&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JWT_SECRET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;missingEnvVars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JWT_SECRET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// If any environment variable is missing throw an error&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;missingEnvVars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;`The following environment variables are missing: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;missingEnvVars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If any environment variable is missing I throw an error and the process stops.&lt;/p&gt;

&lt;p&gt;Now I will set up the database. First I need to define the &lt;code&gt;Item&lt;/code&gt; model&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Define the Item model from MongoDB&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Model&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;items&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;timestamps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;primaryKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DataTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;STRING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DataTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DECIMAL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Item&lt;/code&gt; class extends the &lt;code&gt;Model&lt;/code&gt; class from the &lt;code&gt;denodb&lt;/code&gt; module. The &lt;code&gt;table&lt;/code&gt; static variable is in our case the name of the collection in MongoDB.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;timestamps&lt;/code&gt; static variable indicates whether or not to automatically add timestamps (&lt;code&gt;createdAt&lt;/code&gt; and &lt;code&gt;updatedAt&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;fields&lt;/code&gt; static variable defines the structure of an &lt;code&gt;Item&lt;/code&gt; document. In MongoDB, we need a &lt;code&gt;_id&lt;/code&gt; which is the primary key. Then we have the two fields, &lt;code&gt;name&lt;/code&gt; of type string and &lt;code&gt;price&lt;/code&gt; of type number.&lt;/p&gt;

&lt;p&gt;Let's connect and initialize the database&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create a MongoDB connection&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;connector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MongoDBConnector&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MONGODB_URI&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;database&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;deno-example&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Instantiate the database&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connector&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Define the database models&lt;/span&gt;
&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="c1"&gt;// Setup the models in the database&lt;/span&gt;
&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we will define our three controllers, the first one will simply return &lt;code&gt;Hello World!&lt;/code&gt; as plain text&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Controller for the GET / route that simply returns "Hello World!"&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;helloController&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RouterMiddleware&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next one will retrieve all the items from the database and send them in JSON format&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Controller for the GET /items route to retrieve all the items from the database&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getItemsController&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RouterMiddleware&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Retrieve all the items from the database&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="c1"&gt;// Send the items in JSON format&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last one will allow to create new items in the database&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Controller for the POST /items route to create a new item in the database&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postItemController&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RouterMiddleware&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// If there is no body return 400&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasBody&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Missing body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// If the body is no in JSON format return 400&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Body should be in JSON format&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// If there was an error parsing the body return 400&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Could not parse the request's body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Extract "price" and "name" properties from the body&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// If the "price" is not a number return 400&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Property "price" is incorrect or missing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// If the "name" is not a string return 400&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Property "name" is incorrect or missing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Create a new item in the database with the values from the body&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// Return 200&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've added comments in the controllers' code so that you understand what I'm doing, but it's pretty straightforward.&lt;/p&gt;

&lt;p&gt;Unlike in &lt;a href="https://naruhodo.dev/build-an-api-in-rust-part-2"&gt;my Rust tutorial&lt;/a&gt;, this time I made sure to validate the request's body in the &lt;code&gt;postItemController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We have one extra middleware to create, the authorization middleware. Here is the code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Authorization middleware that checks that&lt;/span&gt;
&lt;span class="c1"&gt;// the "Authorization" header is present&lt;/span&gt;
&lt;span class="c1"&gt;// and that the token is valid&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;authMiddleware&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RouterMiddleware&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Retrieve the request's headers&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// Attempt to get the "Authorization" header if it exists&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;authorizationHeader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Authorization&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// If the "Authorization" header is missing&lt;/span&gt;
  &lt;span class="c1"&gt;// or if it doesn't start with the prefix "Bearer " return 401&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;authorizationHeader&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
    &lt;span class="nx"&gt;authorizationHeader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bearer &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;401&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Extract the JWT from the header&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;authorizationHeader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bearer &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Verify that the JWT is valid, if not return 401&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JWT_SECRET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;HS256&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;401&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Token is valid, proceed with the next middleware&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, there are comments to help you understand. I'm checking that the &lt;code&gt;Authorization&lt;/code&gt; header is present and starts with the prefix &lt;code&gt;Bearer&lt;/code&gt;. Then I validate the token using the &lt;code&gt;djwt&lt;/code&gt; module.&lt;/p&gt;

&lt;p&gt;If anything goes wrong the middleware responds with the HTTP status code &lt;code&gt;401&lt;/code&gt; for &lt;code&gt;Unauthorized&lt;/code&gt;. Otherwise it calls the &lt;code&gt;next&lt;/code&gt; function that simply runs the next middleware in the chain.&lt;/p&gt;

&lt;p&gt;We just have to glue it all together now&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an "oak" app&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Create a router&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;helloController&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/items&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getItemsController&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/items&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;authMiddleware&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;postItemController&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Add router's routes to the "oak" app&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// Register middleware that automatically returns 405 or 501 when appropriate&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;allowedMethods&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="c1"&gt;// Start the server on port 8080&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I created the &lt;code&gt;oak&lt;/code&gt; app and a new &lt;code&gt;router&lt;/code&gt;. I defined the three routes. For the &lt;code&gt;POST /items&lt;/code&gt; route I adde the &lt;code&gt;authMiddleware&lt;/code&gt; to ensure that only users with the token can create items.&lt;/p&gt;

&lt;p&gt;Finally I simply added the router's routes to the &lt;code&gt;oak&lt;/code&gt; app and started the server.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lets-try-out-the-api"&gt;
  &lt;/a&gt;
  Let's try out the API
&lt;/h4&gt;

&lt;p&gt;We can now try out the API! Run it using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;vr start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The API should be running on port &lt;code&gt;8080&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Send a &lt;code&gt;GET&lt;/code&gt; request to &lt;code&gt;/&lt;/code&gt;. You should receive a response with the HTTP status code &lt;code&gt;200&lt;/code&gt; and a plain text message &lt;code&gt;Hello World!&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now let's try to create an item. Send a &lt;code&gt;POST&lt;/code&gt; request to &lt;code&gt;/posts&lt;/code&gt; with the following body&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"coffee"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will also need to add an authorization header to the request with the &lt;code&gt;Bearer&lt;/code&gt; prefix. You can generate the JWT on &lt;a href="https://jwt.io/"&gt;jwt.io&lt;/a&gt; using the secret you defined in the &lt;code&gt;.env&lt;/code&gt; file. Make sure to change the payload to an empty JSON object &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You should receive a response with the HTTP status code &lt;code&gt;200&lt;/code&gt; and no content.&lt;/p&gt;

&lt;p&gt;If you try sending the &lt;code&gt;POST&lt;/code&gt; request without the authorization header or with an invalid token you will receive a HTTP status code &lt;code&gt;401&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;Finally send a &lt;code&gt;GET&lt;/code&gt; request to &lt;code&gt;/items&lt;/code&gt;. You should receive a response with the HTTP status code &lt;code&gt;200&lt;/code&gt; and a list with the item you just created like so&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"coffee"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In conclusion
&lt;/h4&gt;

&lt;p&gt;That's it! I hope you enjoyed the article and that it was helpful :)&lt;/p&gt;

&lt;p&gt;You can find the the full example of this walk-through on GitHub: &lt;a href="https://github.com/ncribt/deno-example"&gt;https://github.com/ncribt/deno-example&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#bonus-set-up-visual-studio-code-for-deno"&gt;
  &lt;/a&gt;
  Bonus: Set up Visual Studio Code for Deno
&lt;/h4&gt;

&lt;p&gt;If you're using Visual Studio Code, I would advise you to install the following extensions&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=denoland.vscode-deno"&gt;Deno by denoland (denoland.vscode-deno)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=umbo.vscode-velociraptor"&gt;Velociraptor by umbo (umbo.vscode-velociraptor)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And add the following to your settings&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"editor.defaultFormatter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"denoland.vscode-deno"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"deno.enable"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"deno.lint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"deno.importMap"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./import-map.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"deno.suggest.imports.hosts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"https://deno.land"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Discover more posts from me on my personal blog: &lt;a href="https://naruhodo.dev"&gt;https://naruhodo.dev&lt;/a&gt;&lt;/p&gt;

</description>
      <category>deno</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 Useful React Libraries âï¸ Part-2</title>
      <author>Chetan AtrawalkarðCA.</author>
      <pubDate>Thu, 08 Jul 2021 06:58:06 +0000</pubDate>
      <link>https://dev.to/chetan_atrawalkar/5-useful-react-libraries-part-2-4l0c</link>
      <guid>https://dev.to/chetan_atrawalkar/5-useful-react-libraries-part-2-4l0c</guid>
      <description>&lt;p&gt;&lt;strong&gt;Hello Everyoneð&lt;/strong&gt;&lt;br&gt;
Here another part of my series &lt;strong&gt;React Useful Librariesâï¸&lt;/strong&gt;. So today, I want to share 5 react libraries that will help you to make react projects better and more customized.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1ï¸â£ React-Toastify&lt;/strong&gt;&lt;br&gt;
ð React-Toastify allows you to add notifications to your app with easily. You Can display a react component inside the toast. It's super easy to customize and provide dark mode.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PZcwVgbw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625646732/RL/RTF_1_cmzkfe.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PZcwVgbw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625646732/RL/RTF_1_cmzkfe.jpg" alt="toast"&gt;&lt;/a&gt;&lt;br&gt;
ð&lt;a href="https://github.com/fkhadra/react-toastify#readme"&gt;Homepage&lt;/a&gt;&lt;br&gt;
ð¡&lt;a href="https://github.com/fkhadra/react-toastify"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ðInstallation&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;$ npm install --save react-toastify&lt;/code&gt;&lt;br&gt;
&lt;code&gt;$ yarn add react-toastify&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;ðUsage&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';
import { ToastContainer, toast } from 'react-toastify';
  import 'react-toastify/dist/ReactToastify.css';
 function App(){
    const notify = () =&amp;gt; toast("Wow so easy!");
return (
      &amp;lt;div&amp;gt;
        &amp;lt;button onClick={notify}&amp;gt;Notify!&amp;lt;/button&amp;gt;
        &amp;lt;ToastContainer /&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2ï¸â£ RC-Slider&lt;/strong&gt;&lt;br&gt;
It is provide Slider UI component for React. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nquURky4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625646732/RL/RCS_2_fb6mqj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nquURky4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625646732/RL/RCS_2_fb6mqj.jpg" alt="Slide"&gt;&lt;/a&gt;&lt;br&gt;
ð&lt;a href="http://github.com/react-component/slider/"&gt;Homepage&lt;/a&gt;&lt;br&gt;
ð¡&lt;a href="https://github.com/react-component/slider"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ðInstallation&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;npm install rc-slider&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;ðUsage&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Slider, { Range } from 'rc-slider';
import 'rc-slider/assets/index.css';

export default () =&amp;gt; (
  &amp;lt;&amp;gt;
    &amp;lt;Slider /&amp;gt;
    &amp;lt;Range /&amp;gt;
  &amp;lt;/&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3ï¸â£ &lt;strong&gt;React Intl&lt;/strong&gt;&lt;br&gt;
React Intl is a library that helps to internationalize React applications. It provides components and API to format text, numbers, and dates. With the internationalization context provided by React Intl, we can use translation and formatting in any React component throughout the application.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fZ58h7VJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625646731/RL/RINT_3_atpwwd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fZ58h7VJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625646731/RL/RINT_3_atpwwd.jpg" alt="intl"&gt;&lt;/a&gt;&lt;br&gt;
ð&lt;a href="https://formatjs.io/docs/react-intl"&gt;Homepage&lt;/a&gt;&lt;br&gt;
ð¡&lt;a href="https://github.com/formatjs/formatjs"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ð&lt;strong&gt;Installation&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;npm i -S react-intl&lt;/code&gt;&lt;br&gt;
ð&lt;strong&gt;Usage&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';
import ReactDOM from 'react-dom';
import {injectIntl, IntlProvider, FormattedRelative, useIntl} from 'react-intl';

const MS_IN_DAY = 1e3 * 3600 * 24

const PostDate = ({date}) =&amp;gt; {
  const intl = useIntl()
  return (
    &amp;lt;span title={intl.formatDate(date)}&amp;gt;
      &amp;lt;FormattedRelativeTime value={(Date.now() - date)/MS_IN_DAY} unit="day"/&amp;gt;
    &amp;lt;/span&amp;gt;
  )
});

const App = ({post}) =&amp;gt; (
  &amp;lt;div&amp;gt;
    &amp;lt;h1&amp;gt;{post.title}&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;
      &amp;lt;PostDate date={post.date} /&amp;gt;
    &amp;lt;/p&amp;gt;
    &amp;lt;div&amp;gt;{post.body}&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
);

ReactDOM.render(
  &amp;lt;IntlProvider locale={navigator.language}&amp;gt;
    &amp;lt;App
      post={{
        title: 'Hello, World!',
        date: new Date(1459913574887),
        body: 'Amazing content.',
      }}
    /&amp;gt;
  &amp;lt;/IntlProvider&amp;gt;,
  document.getElementById('container')
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;4ï¸â£ &lt;strong&gt;React Tippy&lt;/strong&gt;&lt;br&gt;
Tippy.js is a lightweight, easy-to-use library that provides tooltip solutions, as well as other pop-out style GUI tools. A tooltip is a textbox that appears while your cursor hovers over an element in an application and is useful for displaying additional information that a user may need.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O9XaAh54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625646731/RL/RTT_4_wwlrve.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O9XaAh54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625646731/RL/RTT_4_wwlrve.jpg" alt="tooltip"&gt;&lt;/a&gt; &lt;br&gt;
ð&lt;a href="https://github.com/tvkhoa/react-tippy"&gt;Homepage&lt;/a&gt;&lt;br&gt;
ð¡&lt;a href="https://github.com/tvkhoa/react-tippy"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ð&lt;strong&gt;Installation&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;npm install react-tippy&lt;/code&gt;&lt;br&gt;
ð&lt;strong&gt;Usage&lt;/strong&gt;&lt;br&gt;
First, you need import css&lt;br&gt;
&lt;code&gt;import 'react-tippy/dist/tippy.css'&lt;/code&gt;&lt;br&gt;
Second, add tooltip component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {
  Tooltip,
} from 'react-tippy';


&amp;lt;Tooltip
  // options
  title="Welcome to React"
  position="bottom"
  trigger="click"
&amp;gt;
  &amp;lt;p&amp;gt;
    Click here to show popup
  &amp;lt;/p&amp;gt;
&amp;lt;/Tooltip&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;5ï¸â£&lt;strong&gt;React Moment&lt;/strong&gt;&lt;br&gt;
It's a react component for the moment date library. Moment date library for parsing, validating, manipulating, and formatting dates.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6EGtXdJh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625646731/RL/RM_5_bqajlh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6EGtXdJh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625646731/RL/RM_5_bqajlh.jpg" alt="moment"&gt;&lt;/a&gt;&lt;br&gt;
ð&lt;a href="https://github.com/headzoo/react-moment#readme"&gt;Homepage&lt;/a&gt;&lt;br&gt;
ð¡&lt;a href="https://github.com/headzoo/react-moment"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ð&lt;strong&gt;Installation&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;npm install --save moment react-moment&lt;/code&gt;&lt;br&gt;
ð&lt;strong&gt;Usage&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React  from 'react';
import Moment from 'react-moment';

export default class MyComponent extends React.Component {
    render() {
        return (
            const dateToFormat = '1976-04-19T12:59-0500';
            &amp;lt;Moment&amp;gt;{dateToFormat}&amp;lt;/Moment&amp;gt;
        );
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope you like this react libraries please drop your comments about your thoughts and suggest more libraries you used  in react projects.&lt;br&gt;
For more content follow me on&lt;br&gt;
Instagram &lt;a class="mentioned-user" href="https://dev.to/chetan"&gt;@chetan&lt;/a&gt;
 .fullstack&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank You&lt;/strong&gt;&lt;br&gt;
ð &lt;strong&gt;Keep Claim And Just Code It!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>github</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Start Your Blog for Free : Best Platforms</title>
      <author>Mayank Pathak</author>
      <pubDate>Thu, 08 Jul 2021 06:57:03 +0000</pubDate>
      <link>https://dev.to/mayankpathak/start-your-blog-for-free-best-platforms-5198</link>
      <guid>https://dev.to/mayankpathak/start-your-blog-for-free-best-platforms-5198</guid>
      <description>&lt;p&gt;Hey all ð, how you doing! Hope everything going in your way.&lt;/p&gt;

&lt;p&gt;Many of you would be looking for a place where you can write and share your content and knowledge with several others and to connect with others to build some great amount of community.&lt;/p&gt;

&lt;p&gt;So, this post is going to be very useful for those who wants to write their articles, blogs, technical stuff etc through which they want to share their knowledge and content to whole of the needy people out there looking for some true and on-point information to solve their issues or to gain or learn what you can offer them.&lt;/p&gt;

&lt;p&gt;Hence, with this post all your queries related to where to write, where to publish, how to reach the community of readers and most importantly the valuable and known platform where to share the knowledge and content related to any niche of your interest.&lt;/p&gt;

&lt;p&gt;As I said, we will walk through some of the advanced and great writing platforms which is accessed and used by Millions of people out there like you, to share their knowledge and experience with the others to help them, to get suggestion and feedback and most importantly to learn new things and techniques through all these.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Because when, knowledge_is_shared = (knowledge)2 &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hence not taking your much time and making you bored letâs check which are those platforms on which you can write and find great audience to you blog or the article.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#list-of-platforms-to-write-the-blog-or-articles%E2%9C%8D"&gt;
  &lt;/a&gt;
  List of Platforms to write the Blog or Articlesâ
&lt;/h3&gt;

&lt;p&gt;The list of platforms is in decreasing order based on the features they provide you as a writer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-blogger"&gt;
  &lt;/a&gt;
  5. Blogger
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Iz9lu3r8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rxx07pfi5zb33hb2e3n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Iz9lu3r8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rxx07pfi5zb33hb2e3n.png" alt="Blogger as a platform to write"&gt;&lt;/a&gt;&lt;br&gt;
Blogger is an American online content management system owned by Google. It provides you to write the blogs and articles in the easiest way with a free sub-domain named as blogspost.com. Like if you want to keep the name of your blog as XYZ then the domain for your blog can be xyz.blogspost.com â it is the name through which the audience will find your blog posts.&lt;/p&gt;

&lt;p&gt;Blogger provides you to upload images, videos, text etc, you can use different templates provided by Blogger which can change the view of your blog or you can map your own template by finding it on google or writing the coding by yourself. &lt;/p&gt;

&lt;p&gt;It also provides you a way to earn from your blog posts through connecting your Blogger account to the Goggle AdSense or any web monetization platform or to any Ad network to show ads to your blog. But for this you have to be somewhat wait as it has to meet certain requirements.&lt;/p&gt;

&lt;p&gt;You also have to connect your blogger to Google web master like Google search console, Google analytics, Goggle tag manager, Bing etc to reach your content to a greater number of people.&lt;/p&gt;

&lt;p&gt;You can check my Blog that I made using Blogger â &lt;a href="https://thecodingbro.xyz/"&gt;https://thecodingbro.xyz/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-wordpress"&gt;
  &lt;/a&gt;
  4. WordPress
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ffdOAZAB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4tcbbslrjtz5c3sc4pb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ffdOAZAB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4tcbbslrjtz5c3sc4pb.png" alt="WordPress as a platform to write"&gt;&lt;/a&gt;&lt;br&gt;
WordPress is a free and open-source content management system written in PHP and paired with a MySQL or MariaDB database. It is much popular than the Blogger and provides many more features than Blogger. Here you can create your website or the blog for all free. But need have some basic knowledge of using the WordPress platform as it is not easy and confusing to use.&lt;/p&gt;

&lt;p&gt;It also provides a free subdomain named as wordpress.com. Like if you want to keep the name of your blog as XYZ then the domain for your blog can be xyz.wordpress.com or the available domain name â it is the name through which the audience will find your blog posts.&lt;/p&gt;

&lt;p&gt;It has many more functions and extensions than Blogger which are called as plugins. You need to have some good knowledge to use these plugins and if you can use them pretty well then, a great number of audiences can end up to coming to your website or the blog.&lt;/p&gt;

&lt;p&gt;Same as Blogger you have to connect your WordPress domain to the Google web master to reach more audience and better list your posts and articles on google. Also, you can earn by connecting your domain to any web monetization tool or the Ad network, but again here came the play of plugins because through only plugins you can show something to your website or blog while using WordPress as a platform.&lt;/p&gt;

&lt;p&gt;Start your Blog or website using WordPress - &lt;a href="https://wordpress.com/"&gt;https://wordpress.com/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-medium"&gt;
  &lt;/a&gt;
  3. Medium
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RzL019VY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ujejo38u0fo3wwcbr08.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RzL019VY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ujejo38u0fo3wwcbr08.png" alt="Medium as a platform to write"&gt;&lt;/a&gt;&lt;br&gt;
Medium is an open platform where readers find dynamic thinking, and where expert and undiscovered voices can share their writing on any topic. Itâs a place to write, read and connect. It accessed and used by a very large community of writers, readers and learners and all of those are professional, hence you get a quality content to read on the medium.&lt;/p&gt;

&lt;p&gt;It also provides a free subdomain named as medium.com. Like if you want to keep the name of your profile as XYZ then the domain for your blog is xyz.medium.com or the available domain name â it is the name through which the audience will find your blog posts.&lt;/p&gt;

&lt;p&gt;It doesnât provide you more features like WordPress but what makes it better then WordPress is its popularity and ranking of the posts on any search engine. If you write a post on medium then it will rank very high on the google and hence people notice and reach to your post. Also, the available community of people that are registered on medium find your post on the homepage of medium and hence if find interesting many of them comes to read to your blog.&lt;/p&gt;

&lt;p&gt;You donât have to do much on medium just have to focus on writing the articles and other thing will happen automatically, you can also earn by using their medium partner program where you get earning by the readers who read your posts.&lt;/p&gt;

&lt;p&gt;Want to start at Medium or Check my Medium Blog - &lt;a href="https://mayankpathak4513.medium.com/"&gt;https://mayankpathak4513.medium.com/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-dev-community"&gt;
  &lt;/a&gt;
  2. Dev Community
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PWxBm9x4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e9zkyq233tquqt8259g3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PWxBm9x4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e9zkyq233tquqt8259g3.png" alt="Dev Community as a platform to write"&gt;&lt;/a&gt;&lt;br&gt;
DEV Community is a community of 650,754 amazing developers. They are a place where coders share, stay up-to-date and grow their careers. Itâs a great platform to write your articles and blog posts. You can read thousands of articles on their feed as published daily by several others â thatâs what I love about dev community, because you donât know which great article can help you to grow your knowledge.&lt;/p&gt;

&lt;p&gt;It provides you a lot of features like you can write your article using Markdown feature â this is truly amazing, a dashboard where you can check your post views, comments and likes, link to your personal website or portfolio, web monetization, import your articles using RSS and GitHub. You can also connect your GitHub profile to Dev community. &lt;/p&gt;

&lt;p&gt;As of now you will be provided with a username of your choice and you can land on this page, where all your posts, comments and activities will be visible to the other users, this page will help you to connect with thousands of developers registered on Dev Community.&lt;/p&gt;

&lt;p&gt;Let me tell you, on their new updates they have provided a feature where you can make your own website or the blog using the free domain name by netlify and stackbit. They mentioned something like âGenerate a personal blog from your DEV Community postsâ. You can check this and then surely you will have a separate blog for all your posts on dev community.&lt;/p&gt;

&lt;p&gt;Thereâs a lot more features to try and I insist you to check the Dev Community platform as it helps you to create a great community and helps to meet developers from different part of the world. &lt;/p&gt;

&lt;p&gt;Want to explore Dev Community or check my Dev Profile - &lt;a href="https://dev.to/mayankpathak"&gt;https://dev.to/mayankpathak&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-hashnode"&gt;
  &lt;/a&gt;
  1. Hashnode
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KqA_dz7k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2e7n4fx3ifo5ycjdqq0s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KqA_dz7k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2e7n4fx3ifo5ycjdqq0s.png" alt="Hashnode as a platform to write"&gt;&lt;/a&gt;&lt;br&gt;
Hashnode is a free developer blogging platform that allows you to publish articles on your own domain and helps you stay connected with a global developer community. Yes, thatâs right it allows you to publish articles on your own domain. It allows you to read thousands of articles on their feed as published daily by several others â thatâs what excite me a lot for Hashnode.&lt;/p&gt;

&lt;p&gt;The most important thing about Hashnode that it provides you with a personal Blog for your all articles and posts and the domain customization option which makes the Hashnode a stand-out platform for blogging purpose.&lt;/p&gt;

&lt;p&gt;With Hashnode you can connect with several other developers, writers and publishers from all parts of the world and by visiting and reading the best technical articles on their feed itâs help you to enrich and boost your knowledge to next level.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coming-to-the-features-of-hashnode-let-me-tell"&gt;
  &lt;/a&gt;
  Coming to the features of Hashnode let me tell,
&lt;/h3&gt;

&lt;ul&gt; 
&lt;li&gt;You will have a several Blog and its dashboard for all your content and articles with the subdomain as xyz.hashnode.dev or the custom domain of your choice.&lt;/li&gt;
&lt;li&gt;You can customize the appearance of your personal blog using the pure CSS, to give a great feel and next level to your blog.&lt;/li&gt;
&lt;li&gt;You can create different posts, pages and several series and link them to the navbar of the personal blog provided by Hashnode.&lt;/li&gt;
&lt;li&gt;It provides you with the analytics section for your blog where you can check the views and find what all articles community finds interesting to read.&lt;/li&gt;
&lt;li&gt;It provides you with a personal newsletter to connect people with you and widgets section where you can add different widgets of your use using some coding.&lt;/li&gt;
&lt;li&gt;It also provides you with integrations like SEO for your blog, google analytics, google search console where you can work to rank your article pretty well on any search engine.&lt;/li&gt;
&lt;li&gt;Also, it allows you to connect your GitHub and import, export and back-up your articles to GitHub, from GitHub and also using the RSS Feed URL.&lt;/li&gt;
&lt;li&gt;You can also earn through several hackathons and giveaways if you are in the top 100 publishers based on the reading of your published post, also using the web monetization option you can earn for views on your articles.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If something is not listed here about Hashnode then sorry for that but there is much more to try and check about the Hashnode.&lt;/p&gt;

&lt;p&gt;Want to explore Hashnode check - &lt;a href="https://hashnode.com/@mayankpathak/joinme"&gt;hashnode.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check my Hashnode Blog, after checking this you will be eager to start your blog on the Hashnode platform, visit - &lt;a href="https://mayankpathak.hashnode.dev/"&gt;https://mayankpathak.hashnode.dev/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;So, each of these platforms are great to start your blog and show the readers and audience what you have got in your hands. Coming to the conclusion which is the best platform to choose then I will suggest you with two options&lt;/p&gt;

&lt;p&gt;First, if you are very good with SEO techniques i.e., Search Engine Optimization and knows very well how to rank your articles on the top of any search engine then you can go with either Blogger or the WordPress.&lt;/p&gt;

&lt;p&gt;Secondly, if you donât have any idea about SEO them surely go with either Medium or Dev Community or the Hashnode. In my opinion Hashnode is the best platform to start your blogging career as it provides you with all the things needed to write the Blog.&lt;/p&gt;

&lt;p&gt;Thatâs what we have in this articleâ¦With this hope you find the platform that suits you. Drop a link to your blog in the comment section if you started your Blog after reading this article.&lt;br&gt;
Thank you for Reading, would Love â¤ to hear your valuable feedback.&lt;/p&gt;

&lt;p&gt;If anything is confusing or incorrect then let me know in the comment section. Thanks, from my side, this is Mayank, keep learning and exploring!!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-connect-twitter-linkedin"&gt;
  &lt;/a&gt;
  Let's Connect &lt;a href="https://twitter.com/mayankp4513"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/mayank-pathak4513/"&gt;Linkedin&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#support-me"&gt;
  &lt;/a&gt;
  Support Me ð
&lt;/h3&gt;

&lt;p&gt;If you liked the artticle, Consider &lt;a href="https://www.buymeacoffee.com/mayankpathak"&gt;Buying me a Coffee â&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/mayankpathak"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y61HrVIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-blue.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blogging</category>
      <category>blog</category>
      <category>help</category>
      <category>newbie</category>
    </item>
    <item>
      <title>ð¤ Creating your own discord bot using JS ð¤</title>
      <author>Kaiwalya Koparkar</author>
      <pubDate>Thu, 08 Jul 2021 06:41:23 +0000</pubDate>
      <link>https://dev.to/kaiwalyakoparkar/creating-your-own-discord-bot-using-js-2ep0</link>
      <guid>https://dev.to/kaiwalyakoparkar/creating-your-own-discord-bot-using-js-2ep0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hey everyone, I have been developing my first discord bot from couple of days and I am finally here to share with you how you can create your bot very easily. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-will-you-build"&gt;
  &lt;/a&gt;
  What will you build?
&lt;/h2&gt;

&lt;p&gt;In this blog I am going to tell you how can you make a bot which replies 'Pong' when you say &lt;code&gt;!ping&lt;/code&gt;. Again this can be constructed into anything you want. Like you say &lt;code&gt;Hey&lt;/code&gt; and bot will say 'Hola' you get the idea right.&lt;/p&gt;

&lt;p&gt;I have used &lt;strong&gt;Discord Js&lt;/strong&gt; to build this bot. Yes you can build this in python as well using Discord py.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can invite my bot &lt;a href="https://discord.com/api/oauth2/authorize?client_id=861212506251984906&amp;amp;permissions=8&amp;amp;scope=bot"&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-requisites
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Computer (of-course)&lt;/li&gt;
&lt;li&gt;Text editor(Using sublime in this tutorial)&lt;/li&gt;
&lt;li&gt;Discord account and a discord server where you have admin access (You can create new one to test the bot out)&lt;/li&gt;
&lt;li&gt;A bit of node js and express knowledge. If not refer &lt;a href="https://youtu.be/TlB_eWDSMt4"&gt;this&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#lets-start"&gt;
  &lt;/a&gt;
  Let's start
&lt;/h2&gt;

&lt;p&gt;Before you do anything make sure you have developer mode enable in your discord. We won't be needing it for this tutorial but you will eventually need it so why not enable it now :)&lt;/p&gt;

&lt;p&gt;For this head over to &lt;code&gt;Setting &amp;gt; Advanced &amp;gt; Developer Mode: ON&lt;/code&gt; in your discord account&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V1W4UzaB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/YcLgrSO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V1W4UzaB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/YcLgrSO.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#setting-up-application-and-creating-bot-account"&gt;
  &lt;/a&gt;
  Setting up application and creating bot account
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Okay so now you will have to visit &lt;a href="https://discord.com/developers/applications/"&gt;https://discord.com/developers/applications/&lt;/a&gt; website.&lt;/li&gt;
&lt;li&gt;Login with your discord account and you should see interface like this. (Ignore my previous applications, you may find this blank and that's alright)
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GQPnp-Zf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/48ud7oo.png"&gt;
&lt;/li&gt;
&lt;li&gt;Now head over to &lt;code&gt;New Application&lt;/code&gt; button.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iJyDr20Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ej7TQan.png"&gt;
&lt;/li&gt;
&lt;li&gt;Now name your application (You can change it afterwards). I have named it &lt;code&gt;Tutorial-Bot&lt;/code&gt; and hit &lt;code&gt;Create&lt;/code&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R3W7MBXS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/oGMzNzU.png"&gt;
&lt;/li&gt;
&lt;li&gt;Now you are on your application dashboard. You can add description, image and all to make it beautiful and explore other options.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lhSN_HYW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/c4gp2zt.png"&gt;
&lt;/li&gt;
&lt;li&gt;Now as you have successfully created application account and now it's time to create bot instance. Head over to &lt;code&gt;Bot&lt;/code&gt; and click on &lt;code&gt;Add Bot&lt;/code&gt;.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gu5at8B6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Qo2PH0E.png"&gt;
&lt;/li&gt;
&lt;li&gt;After this you will be prompted with a message. Click on &lt;code&gt;Yes, do it&lt;/code&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7UnK8ha7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Hqrz3is.png"&gt;
&lt;/li&gt;
&lt;li&gt;Awesome now you may see something like below. (You can customize image, description as you want before moving ahead)
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v7ZJBHN---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/2z8VGtI.png"&gt;
&lt;/li&gt;
&lt;li&gt;Now head over to &lt;code&gt;OAuth2&lt;/code&gt; section and copy &lt;code&gt;Application Id&lt;/code&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pdMng1K7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/KfDD5rY.png"&gt;
&lt;/li&gt;
&lt;li&gt;Now we will generate the bot invite link. There are many ways to do that. I will be telling you easiest way. Just replace &lt;code&gt;&amp;lt;app-id&amp;gt;&lt;/code&gt; with the &lt;code&gt;application id&lt;/code&gt; you copied into the following link :&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Caution!&lt;/strong&gt; This would give admin access to the bot.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://discord.com/api/oauth2/authorize?client_id=&amp;lt;app-id&amp;gt;&amp;amp;permissions=8&amp;amp;scope=bot
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Paste this &lt;em&gt;edited&lt;/em&gt; link into the browser search-box and you should see something like below.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;--:-&amp;gt; You will land here&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ClKYGcy5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/7QSj1Uw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ClKYGcy5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/7QSj1Uw.png"&gt;&lt;/a&gt;&lt;br&gt;
--:-&amp;gt; Select the server&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0yvKy1Lq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/3BHdSHy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0yvKy1Lq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/3BHdSHy.png"&gt;&lt;/a&gt;&lt;br&gt;
--:-&amp;gt; Click on &lt;code&gt;Continue&lt;/code&gt; and &lt;code&gt;Authorize&lt;/code&gt; (Authorize would be on next window after clicking on continue)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O_0efxJ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/8uyDu9S.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O_0efxJ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/8uyDu9S.png"&gt;&lt;/a&gt;&lt;br&gt;
--:-&amp;gt; If you did everything correctly then you should see something like this&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i4hV56_l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/FKuFsrT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i4hV56_l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/FKuFsrT.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now you can see your bot on right hand side of your discord (Where all the participants are shown)
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DffwjAnK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/tZUfX1X.png"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#lets-code-it-now"&gt;
  &lt;/a&gt;
  Let's code it now.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create a folder with your bot name (Or anything where you will store the code potentially).&lt;/li&gt;
&lt;li&gt;Open that folder with any text editor (I will be doing that in sublime text)&lt;/li&gt;
&lt;li&gt;Now Also open a cmd (on windows) or terminal (on linux/mac) in that folder and type
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Again here you can remove the &lt;code&gt;-y&lt;/code&gt; flag to customize it. But I will keep it for now to make it a bit easy. After running command you might see something like this or similar&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A14Lv1ik--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/mK0eInC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A14Lv1ik--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/mK0eInC.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now type in command
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;you should see something like this or similar&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_eRx8MeK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/q9533x9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_eRx8MeK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/q9533x9.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now create 4 files &lt;code&gt;index.js&lt;/code&gt;, &lt;code&gt;config.json&lt;/code&gt; ,&lt;code&gt;.env&lt;/code&gt;, &lt;code&gt;.gitignore&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now create a folder &lt;code&gt;Commands&lt;/code&gt; and add &lt;code&gt;pong.js&lt;/code&gt; &amp;amp; &lt;code&gt;command.js&lt;/code&gt; file in it. Now your file/folder structure should look something like this (only &lt;code&gt;pong.js&lt;/code&gt; and &lt;code&gt;command.js&lt;/code&gt; are in &lt;code&gt;Commands&lt;/code&gt; folder)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iEXSxcNC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/HANwnvc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iEXSxcNC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/HANwnvc.png"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now add the code to the respective files as heading&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#in-indexjs-"&gt;
  &lt;/a&gt;
  In index.js :-
&lt;/h3&gt;

&lt;p&gt;Add the following code&lt;br&gt;
&lt;/p&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Discord&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;discord.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Discord&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Commands/command.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pong&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Commands/pong.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Yay your bot is live&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ready&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Bot is currently running on version v&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./package.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;version&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ping&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;pong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BOTTOKEN&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#in-commandjs"&gt;
  &lt;/a&gt;
  In command.js
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../config.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aliases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;aliases&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;aliases&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;aliases&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nx"&gt;aliases&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;alias&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Running the command &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#in-pongjs"&gt;
  &lt;/a&gt;
  In pong.js
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Pong!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#in-configjs"&gt;
  &lt;/a&gt;
  In config.js
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"prefix"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"!"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#in-gitignore"&gt;
  &lt;/a&gt;
  In .gitignore
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/node_modules/
.env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#in-env"&gt;
  &lt;/a&gt;
  In .env
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;First go to the developer portal from where you created the bot application.&lt;/li&gt;
&lt;li&gt;Then go to &lt;code&gt;Bot&lt;/code&gt; and then copy the token as shown in the below image&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Caution! :- This is a secret key and should not be added to github or internet or told to anyone.&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JLAAFpB0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/PrKwvDM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JLAAFpB0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/PrKwvDM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now add it to your env file (replace XXXXX with your secret key &lt;strong&gt;don't&lt;/strong&gt; add any spaces or something just add as it is.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;BOTTOKEN=XXXXXXXXXX
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#-now-go-to-cmdterminal-again-and-run-commands"&gt;
  &lt;/a&gt;
  - Now go to cmd/terminal again and run commands
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;discord.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Okay so now you are done with coding and it's time for checking it out.&lt;/li&gt;
&lt;li&gt;Run command
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Now go to your discord where this bot was invited.
and send command &lt;code&gt;!ping&lt;/code&gt; you should receive pong in response like below.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B3rvjjwe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/C8ItQi1.png"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#but-what-did-we-do"&gt;
  &lt;/a&gt;
  But what did we do?
&lt;/h2&gt;

&lt;p&gt;I will try to explain it in most simple way possible. We created &lt;code&gt;index.js&lt;/code&gt; which will be the entry point point of the application/bot. then we authenticatied it using &lt;code&gt;client.login('process.env.BOTTOKEN')&lt;/code&gt; and we checked if your application was online.&lt;/p&gt;

&lt;p&gt;Our bot will monitor each and every message being posted on the server while it is online and it will check if the posted message was a valid command using &lt;code&gt;command.js&lt;/code&gt; if it was then we will run the operation present in &lt;code&gt;pong.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Next what? If you followed through then you have created somewhat scalable bot structure. Now everytime you have to add the command then you have to just make a file of the command. Import it to &lt;code&gt;index.js&lt;/code&gt; and write at what keyword would you like it to get triggered. and that's it.&lt;/p&gt;

&lt;p&gt;Okay so now we have set up our project and you can do lot more with discord bots . Look at the references below to increase the commands and power of your bot.&lt;/p&gt;

&lt;p&gt;If you would like me to tell you how to host your bot for free then please let me know in the comments below.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://discordjs.guide/"&gt;Discord Js Doumentation&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtube.com/playlist?list=PLRqwX-V7Uu6avBYxeBSwF48YhAnSn_sA4"&gt;The coding train yt channel&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/kaiwalyakoparkar/Lilliputian-Bot"&gt;My discord bot&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  â¤ï¸ Thank you for reading â¤ï¸
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;ð Like | Follow | Share ð&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;My Socials:&lt;/strong&gt; &lt;a href="https://twitter.com/kaiwalya_13"&gt;Twitter&lt;/a&gt; | &lt;a href="https://linkedin.com/in/kaiwalyakoparkar"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/kaiwalyakoparkar"&gt;GitHub&lt;/a&gt; | &lt;a href="https://discord.com/invite/jvdcY2NkXa"&gt;Discord Server&lt;/a&gt;&lt;/p&gt;

</description>
      <category>todayilearned</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>OpenAI Codex - The Model behind GitHub Copilot</title>
      <author>Danyson</author>
      <pubDate>Thu, 08 Jul 2021 06:15:44 +0000</pubDate>
      <link>https://dev.to/danyson/openai-codex-the-model-behind-github-copilot-j0l</link>
      <guid>https://dev.to/danyson/openai-codex-the-model-behind-github-copilot-j0l</guid>
      <description>&lt;p&gt;OpenAI has released the research paper,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;"Evaluating Large Language Models Trained on Code"&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Which powers &lt;strong&gt;Codex&lt;/strong&gt;, a highly improved &lt;strong&gt;Autoregressive language model&lt;/strong&gt; than the 3rd generation &lt;strong&gt;Generative Pre-trained Transformer&lt;/strong&gt; (GPT-3) language model.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Codex&lt;/strong&gt; is much improved than GPT-3 due to its model been trained on a dataset that includes a much larger concentration of public source code from GitHub.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Codex&lt;/strong&gt; has been fine-tuned on publicly available code from GitHub, and study its Python code-writing capabilities.&lt;/p&gt;

&lt;p&gt;An evaluation harness for the &lt;strong&gt;HumanEval problem solving dataset&lt;/strong&gt; from the research paper is also available on &lt;strong&gt;OpenAI Github repository&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;"A distinct production version of Codex powers GitHub Copilot" says the paper&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Which explains that the sucessor of &lt;strong&gt;Codex&lt;/strong&gt; is used to train on code dataset from &lt;strong&gt;GitHub&lt;/strong&gt; repositories for the &lt;strong&gt;GitHub Copilot&lt;/strong&gt; project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8srXzB8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1doiga28dxjnwyd32o7v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8srXzB8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1doiga28dxjnwyd32o7v.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The paper claims it has solved 10,000 competitive programming problems and problems from open source projects related to Continuous Integration.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The paper concludes,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;"We found that our models displayed strong performance on a dataset of human-written problems with difficulty level comparable to easy interview problems"&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;About data collection, the paper says,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;"Our training dataset was collected in May 2020 from 54 million public software repositories hosted on GitHub, containing 179 GB of unique Python files under 1 MB. We filtered out files which were likely auto-generated, had average line length greater than 100, had maximum line length greater than 1000, or contained a small percentage of alphanumeric characters. After filtering, our final dataset totaled 159 GB"&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;The economic impact that CODEX going to do will be observed in programming related jobs in future by improving productivity of the coder and also a change in Competitive Programming World.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where may be the difficulty level of coding questions will be increased or may be Competitive Programming will be left alone to AI and Humans have to focus on much higher level of problem solving than that of just writing repeatable codes.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Check out the following resources,&lt;/p&gt;

&lt;p&gt;Link to the paper : &lt;a href="https://arxiv.org/abs/2107.03374"&gt;https://arxiv.org/abs/2107.03374&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OpenAI Github repository : &lt;a href="https://github.com/openai/human-eval"&gt;https://github.com/openai/human-eval&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Personal Blog @ &lt;a href="https://danyson.github.io"&gt;danyson.github.io&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>opensource</category>
      <category>programming</category>
      <category>ai</category>
    </item>
    <item>
      <title>Learning Python- Basic course: Day 12, Basic algorithms</title>
      <author>Aatmaj</author>
      <pubDate>Thu, 08 Jul 2021 05:56:00 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-basic-course-day-12-basic-algorithms-1edc</link>
      <guid>https://dev.to/aatmaj/learning-python-basic-course-day-12-basic-algorithms-1edc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#today-let-us-explore-sequential-search-binary-search-and-bubble-sort-in-python"&gt;
  &lt;/a&gt;
  Today let us explore Sequential search, Binary search and Bubble sort in Python.ð
&lt;/h2&gt;




&lt;p&gt;Today we will check out sequential search, binary search and bubble sort in Python lists. We will not go into the mathematical details of the complexity and all but just see how the algorithms are implemented. More complicated searching and sorting algorithms, complex data structures will be referenced and covered in the later parts. In case anyone among you are coming across these algorithms for the first time, please do google these terms out. I have also provided Geeksforgeeks references for further reading.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sequential-search"&gt;
  &lt;/a&gt;
  Sequential search
&lt;/h3&gt;

&lt;p&gt;The sequential search is the most easy and simple program for searching. We can just traverse through the list or use the inbuilt &lt;code&gt;in&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Please enter the number to be searched "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;#Method-1
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Method-1 Yes, the number is in the list "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;

&lt;span class="c1"&gt;#Method-2
&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Method-2 Yes, the number is in the list "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Please enter the number to be searched 6
Method-1 Yes, the number is in the list 
Method-2 Yes, the number is in the list 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Python provides a shortcut for searching as shown in method 2. This is a sequential search method for searching. It can search not only numbers, but characters or any other data types as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#binary-search"&gt;
  &lt;/a&gt;
  Binary search
&lt;/h3&gt;

&lt;p&gt;Binary search is another simple algorithm to search for numbers in a sorted list. In case you are new with Binary search, see &lt;a href="https://www.geeksforgeeks.org/binary-search/"&gt;GeeksForGeeks&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Please enter a number "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="c1"&gt;# If x is greater, ignore left half
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="c1"&gt;# If x is smaller, ignore right half
&lt;/span&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="c1"&gt;# means x is present at mid
&lt;/span&gt;        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;     
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Please enter a number 6
4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#bubble-sort"&gt;
  &lt;/a&gt;
  Bubble sort
&lt;/h3&gt;

&lt;p&gt;Bubble sort is a good sorting algorithm, and quite easy comparatively. more about it on &lt;a href="https://www.geeksforgeeks.org/bubble-sort/"&gt;GeeksForGeeks&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="c1"&gt;# Traverse through all array elements
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="c1"&gt;# Last i elements are already in place
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="c1"&gt;# traverse the array from 0 to n-i-1
&lt;/span&gt;            &lt;span class="c1"&gt;# Swap if the element found is greater
&lt;/span&gt;            &lt;span class="c1"&gt;# than the next element
&lt;/span&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;#Swapping the two
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Sorted array is:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Sorted array is: [2, 3, 4, 5, 6, 7, 9, 10, 12]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#exercises"&gt;
  &lt;/a&gt;
  Exercises-
&lt;/h3&gt;

&lt;p&gt;1) &amp;amp; 2) In the samples above, the programs give no output if the item is not in the list. Modify the programs to include it. Answers - &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/blob/97d78151fd6bfccb02ac1da1c042f807d08c6f06/Basic/Day%2012/Exercise%20solutions/Exercise%201.py"&gt;Sequential search&lt;/a&gt;, &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/blob/97d78151fd6bfccb02ac1da1c042f807d08c6f06/Basic/Day%2012/Exercise%20solutions/Exercise%202.py"&gt;binary search&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3) Write a program to bubble sort a list and then search using binary search. &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/blob/97d78151fd6bfccb02ac1da1c042f807d08c6f06/Basic/Day%2012/Exercise%20solutions/Exercise%203.py"&gt;Answer&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;ð Your suggestions motivate me, so please please please let me know in the comment section if you this part or not. ð§ And don't forget to like the post if you did. ð Follow me on github and star the &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python"&gt;Learning-Python repo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>learningpython</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Using loading animation on websites : Blazor Examples</title>
      <author>Techguy</author>
      <pubDate>Thu, 08 Jul 2021 05:53:12 +0000</pubDate>
      <link>https://dev.to/techguy/using-loading-animation-on-websites-blazor-examples-do1</link>
      <guid>https://dev.to/techguy/using-loading-animation-on-websites-blazor-examples-do1</guid>
      <description>&lt;p&gt;In this video we will discuss how to display loading animation in a Blazor web application.&lt;/p&gt;

&lt;p&gt;In a real world there are many usecases where we need a loading spinner or indicator. For example&lt;/p&gt;

&lt;p&gt;Your app is processing a report and it takes a few seconds to complete or&lt;br&gt;
A server-side REST API is being called and it's taking a few seconds to retrieve data maybe because of a slow network connection, server busy or just because you are retrieving lots and lost of data.&lt;br&gt;
Whatever maybe the case, if your app is taking a bit of time to do something it's better to display a loading indicator so the enduser knows the application is busy processing the request and not frozen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.syncfusion.com/blazor-components/blazor-spinner"&gt;Syncfusion Blazor Spinner Component&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Blazor Spinner - Simple, Animated Circular Progress Indicator&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Show indeterminate progress indicators.&lt;/li&gt;
&lt;li&gt;Utilize built-in support for theme-based spinners.&lt;/li&gt;
&lt;li&gt;Customize spinnersâ appearance, labels, size, type, z-index, and overlay.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/tERsRtmRAe0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>blazor</category>
      <category>spinner</category>
      <category>webdev</category>
      <category>webassembly</category>
    </item>
    <item>
      <title>ð© Creating an Interactive JS Donut Chart in 4 Steps ð</title>
      <author>andreykh1985</author>
      <pubDate>Thu, 08 Jul 2021 05:28:09 +0000</pubDate>
      <link>https://dev.to/andreykh1985/creating-a-js-donut-chart-in-4-steps-592k</link>
      <guid>https://dev.to/andreykh1985/creating-a-js-donut-chart-in-4-steps-592k</guid>
      <description>&lt;p&gt;Wondering how data designers and developers create compelling donut charts using JavaScript? Then youâve come to the right place at the right time. Follow along and you will learn how to build an interactive JS donut chart with great ease even if you are a beginner!&lt;/p&gt;

&lt;p&gt;In this tutorial, we will be visualizing data about the global market share of the top online music streaming platforms. It is a good example of information that can be nicely represented in a donut chart.&lt;/p&gt;

&lt;p&gt;To make sure we are on the same page, letâs first see what a donut chart is and then get down to charting straight away!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-donut-chart"&gt;
  &lt;/a&gt;
  What Is a Donut Chart?
&lt;/h2&gt;

&lt;p&gt;Basically, &lt;a href="https://www.anychart.com/chartopedia/chart-type/donut-chart/"&gt;donut charts&lt;/a&gt; (or doughnut charts) are &lt;a href="https://www.anychart.com/chartopedia/chart-type/pie-chart/"&gt;pie charts&lt;/a&gt; with a cut-out area of the center which can be filled with additional information. They are frequently used as a way to visualize the proportions of categorical data.&lt;/p&gt;

&lt;p&gt;In a donut chart, the size of each slice (or piece) depicts how much of the total each category represents. Consequently, this type of data visualization can help you quickly understand the proportional composition of a variable.&lt;/p&gt;

&lt;p&gt;As a rule of thumb, the number of categories visualized in a donut chart graphic should be limited to a few to keep the representation uncluttered and avoid legibility issues.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#js-donut-chart-preview"&gt;
  &lt;/a&gt;
  JS Donut Chart Preview
&lt;/h2&gt;

&lt;p&gt;Take a look at how the JS donut chart will turn out at the end of this tutorial. And it will be interactive!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ggqO5okQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d45igagc2uzfps3fkyh7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ggqO5okQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d45igagc2uzfps3fkyh7.png" alt="Interactive JavaScript-based donut chart which will be created along this tutorial on JS HTML5 data visualization"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-a-basic-javascript-donut-chart"&gt;
  &lt;/a&gt;
  Building a Basic JavaScript Donut Chart
&lt;/h2&gt;

&lt;p&gt;A beautiful JS donut chart can be built in just four easy steps. Isnât that music to our ears?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create an HTML page.&lt;/li&gt;
&lt;li&gt;Include JavaScript files.&lt;/li&gt;
&lt;li&gt;Add the data.&lt;/li&gt;
&lt;li&gt;Write some JS charting code.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#1-create-an-html-page"&gt;
  &lt;/a&gt;
  1. Create an HTML page
&lt;/h3&gt;

&lt;p&gt;The first thing we do is create a basic HTML page with a block element designed to hold the donut chart.&lt;/p&gt;

&lt;p&gt;To identify this &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; later in the code, we give it an id attribute. Let it be just âcontainerâ this time.&lt;/p&gt;

&lt;p&gt;We also specify the &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; parameters inside the &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; block as â100%â so the donut chart fills the whole page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;JavaScript Donut Chart&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;      
      &lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;#container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
      &lt;span class="p"&gt;}&lt;/span&gt; 
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-include-javascript-files"&gt;
  &lt;/a&gt;
  2. Include JavaScript files
&lt;/h3&gt;

&lt;p&gt;There are many JavaScript charting libraries out there providing ready-made features that are of great help to quickly visualize data in graphs even without a lot of technical skills and experience. Some of them support donut charts out of the box.&lt;/p&gt;

&lt;p&gt;In this tutorial, we are using the &lt;a href="https://www.anychart.com/"&gt;AnyChart JS library&lt;/a&gt;. It is a lightweight, strong, and flexible solution for interactive data visualization. AnyChart is also great for beginners because of extensive and detailed &lt;a href="https://docs.anychart.com/"&gt;documentation&lt;/a&gt; and a whole lot of &lt;a href="https://www.anychart.com/products/anychart/gallery/"&gt;chart examples&lt;/a&gt; with the source code that can be played with on the dedicated &lt;a href="https://playground.anychart.com/"&gt;playground&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, as step two, letâs include the necessary JavaScript files from the libraryâs &lt;a href="https://cdn.anychart.com/"&gt;CDN&lt;/a&gt; (or you can download them if you want).&lt;/p&gt;

&lt;p&gt;AnyChartâs JavaScript charting library features a modular system to ensure optimal performance. To create an interactive HTML5 donut chart using it, we need to add two scripts â the &lt;a href="https://docs.anychart.com/Quick_Start/Modules#core"&gt;core module&lt;/a&gt; and the &lt;a href="https://docs.anychart.com/Quick_Start/Modules#pie_and_doughnut"&gt;pie-and-donut module&lt;/a&gt; â to the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section of the HTML page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;JavaScript Donut Chart&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.anychart.com/releases/8.10.0/js/anychart-core.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.anychart.com/releases/8.10.0/js/anychart-pie.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;      
      &lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;#container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
      &lt;span class="p"&gt;}&lt;/span&gt; 
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class="c1"&gt;// All the code for the JS donut chart will come here&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-add-the-data"&gt;
  &lt;/a&gt;
  3. Add the data
&lt;/h3&gt;

&lt;p&gt;A donut chart is a simple chart type that requires a straightforward and limited dataset. So, although AnyChart supports &lt;a href="https://docs.anychart.com/Working_with_Data/Supported_Data_Formats"&gt;multiple ways to load data&lt;/a&gt;, we will just pass the data directly in a hassle-free manner.&lt;/p&gt;

&lt;p&gt;For this tutorial, I decided to take data on the market share of the leading music streaming apps, which I collected from the &lt;a href="https://www.businessofapps.com/data/spotify-statistics/"&gt;Business of Apps&lt;/a&gt; website. So, I am just adding it as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;anychart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Spotify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Apple Music&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Amazon Music&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tencent apps&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;YouTube Music&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Others&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have everything all set, letâs get ready to see the donut chart shape up by adding some JavaScript code! Basically, this is quite intuitive.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-write-the-js-charting-code-for-our-donut-chart"&gt;
  &lt;/a&gt;
  4. Write the JS charting code for our donut chart
&lt;/h3&gt;

&lt;p&gt;The first thing we do is add a function enclosing all the code, which makes sure that the code inside it will only execute once the page is ready.&lt;/p&gt;

&lt;p&gt;Donut charts are very straightforward to create with an appropriate JS library and in this case, it will actually be just a couple of lines of code!&lt;/p&gt;

&lt;p&gt;As we have learned just above, a donut chart is fundamentally a pie chart with a hole, like a ring all in all. So, we simply create a pie chart instance and give it an inner radius value to make it a donut chart.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// create a pie chart with the data&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;chart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;anychart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// set the chart radius making a donut chart&lt;/span&gt;
&lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerRadius&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;55%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we give our donut chart a title and set the container id before finally drawing the resulting visualization.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Music Streaming Apps Global Market Share&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thatâs it â a fully functional interactive JavaScript-based donut chart is ready! Isnât this absolutely easy?&lt;/p&gt;

&lt;p&gt;Notice that the legend was created automatically. Also, go ahead and click on its items or any piece to see the cool interactive donut slicing behavior.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--79jgac6q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obm2sg41xib4n2cgnh0t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--79jgac6q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obm2sg41xib4n2cgnh0t.png" alt="Basic JavaScript Donut Chart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The initial version of this basic JS donut chart with the full code is available on &lt;a href="https://playground.anychart.com/oGg0sx87/"&gt;AnyChart Playground&lt;/a&gt; and &lt;a href="https://codepen.io/shacheeswadia/pen/eYvJxJQ"&gt;CodePen&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This donut chart distinctly shows that Spotify is the global leader and that Spotify and Apple Music together hold more than half of the market of music streaming apps.&lt;/p&gt;

&lt;p&gt;Now, letâs customize our donut chart to make it look even cooler and communicate the insights in a clearer manner (like shown in the preview at the beginning of the article):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Change the color palette.&lt;/li&gt;
&lt;li&gt;Add labels.&lt;/li&gt;
&lt;li&gt;Improve the tooltip.&lt;/li&gt;
&lt;li&gt;Add details to the center of the donut.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.anychart.com/blog/2021/07/06/donut-charts-javascript/"&gt;CONTINUE READING HERE&lt;/a&gt; FOR A WALKTHROUGH OF THESE JS DONUT CHART CUSTOMIZATIONS&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>datascience</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
