<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>10 Awesome Ruby Gems for Ruby on Rails Web Development</title>
      <author>Brayan Arrieta</author>
      <pubDate>Sat, 21 Aug 2021 20:28:59 +0000</pubDate>
      <link>https://dev.to/brayanarrieta/10-awesome-ruby-gems-for-ruby-on-rails-web-development-4964</link>
      <guid>https://dev.to/brayanarrieta/10-awesome-ruby-gems-for-ruby-on-rails-web-development-4964</guid>
      <description>&lt;p&gt;&lt;strong&gt;Ruby on Rails&lt;/strong&gt; is one of the most popular for developing web applications with influential features that aid to increase the speed of your web app development utilizing an MVC pattern.  It is intended in such a manner that it can be simply prolonged employing the most popular Ruby gems presented by the &lt;strong&gt;Rails community&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-gems-in-ruby-on-rails"&gt;
  &lt;/a&gt;
  What are gems in Ruby on Rails?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Ruby Gems&lt;/strong&gt; is known as the package administrator for &lt;strong&gt;Ruby&lt;/strong&gt; language that presents a classic format for dispensing Ruby libraries and programs. It distributes in an independent format termed a &lt;strong&gt;gem&lt;/strong&gt; a tool designed to provide some awesome features for our project.&lt;/p&gt;

&lt;p&gt;In the next list, we will see some &lt;strong&gt;Ruby&lt;/strong&gt; useful Gems that developers often use for adding various functionalities to their projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rspec"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/rspec/rspec"&gt;RSpec&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;One of the most popular Ruby Gems that‚Äôs also been downloaded the most, &lt;strong&gt;RSpec&lt;/strong&gt; is fantastic for writing unit test cases. It is mainly used in BDD and TDD environments. The clear syntax of &lt;strong&gt;RSpec&lt;/strong&gt; enables writing tests as close to human language as possible.&lt;/p&gt;

&lt;p&gt;The Rails gem is efficient in testing the behavior of a particular model or a library. It is simple to use and can be executed by installing the configuration files and spec helpers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#devise"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/heartcombo/devise"&gt;Devise&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Devise&lt;/strong&gt; is a flexible authentication solution for &lt;strong&gt;Ruby on Rails&lt;/strong&gt; based on Warden. The &lt;strong&gt;Devise&lt;/strong&gt; Gem is used for user authentication, It creates sign-up and sign-in forms, it also can be used to create user accounts for privacy, and many more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rubocop"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/rubocop/rubocop"&gt;RuboCop&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;RuboCop&lt;/strong&gt; is used for analyzing the code quality, which assures that your code matches the &lt;strong&gt;Ruby Style Guide&lt;/strong&gt; for writing the best program. &lt;strong&gt;RuboCop&lt;/strong&gt; no leaves a chance for style violations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#omniauth"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/omniauth/omniauth"&gt;OmniAuth&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;OmniAuth&lt;/strong&gt; is a library that standardizes multi-provider authentication for web applications. It was created to be powerful, flexible, and do as little as possible. Any developer can create strategies for &lt;strong&gt;OmniAuth&lt;/strong&gt; that can authenticate users via disparate systems. &lt;strong&gt;OmniAuth&lt;/strong&gt; strategies have been created for everything including &lt;strong&gt;Facebook&lt;/strong&gt;, &lt;strong&gt;Google&lt;/strong&gt;, and even &lt;strong&gt;GitHub&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pry"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/pry/pry"&gt;Pry&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Pry&lt;/strong&gt; is a runtime developer console and IRB alternative with powerful introspection capabilities. &lt;strong&gt;Pry&lt;/strong&gt; aims to be more than an IRB replacement. It is an attempt to bring REPL driven programming to the Ruby language. &lt;strong&gt;Pry&lt;/strong&gt; facilitates the process of debugging&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#faker"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/faker-ruby/faker"&gt;Faker&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Faker&lt;/strong&gt; is an awesome library that will allow us to generate fake data such as names, addresses, phone numbers, and many other topics. &lt;strong&gt;Faker&lt;/strong&gt; can be used to generate test data to populate our database.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#simple-form"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/heartcombo/simple_form"&gt;Simple Form&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; aims to be as flexible as possible while helping you with powerful components to create your forms. The basic goal of &lt;strong&gt;Simple Form&lt;/strong&gt; is to not touch your way of defining the layout, letting you find a better design for your eyes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#webpacker"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/rails/webpacker"&gt;Webpacker&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Webpacker&lt;/strong&gt; makes it easy to use the JavaScript pre-processor and bundler Webpack v5 to manage application-like JavaScript in Rails. It coexists with the asset pipeline, as the primary purpose for &lt;strong&gt;Webpack&lt;/strong&gt; is app-like JavaScript, not images, CSS, or even JavaScript Sprinkles (that all continues to live in app/assets).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bullet"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/flyerhzm/bullet"&gt;Bullet&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;Bullet&lt;/strong&gt; gem is designed to help you increase your application's performance by reducing the number of queries it makes. It will watch your queries while you develop your application and notify you when you should add eager loading (N+1 queries), when you're using eager loading that isn't necessary and when you should use counter cache.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#capistrano"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/capistrano/capistrano"&gt;Capistrano&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Capistrano&lt;/strong&gt; is a framework for building automated deployment scripts. Although &lt;strong&gt;Capistrano&lt;/strong&gt; itself is written in Ruby, it can easily be used to deploy projects of any language or framework, be it Rails, Java, or PHP. When &lt;strong&gt;Capistrano&lt;/strong&gt; is installed, this gem gives you a ‚Äòcap‚Äô tool for deployments straight from your command line.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As you may see, there are many great gems that we can use on our web applications. During this post, we have seen some awesome Ruby gems that will help us to do more effective work and quality code to develop the best application for our clients. &lt;/p&gt;

&lt;p&gt;I hope you find this article really helpful. I will be updating this post based on your comments and recommendations so let me know in any case. Thanks! üëç&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/brayanarrieta"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bs6qmXj6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520coffee%26emoji%3D%26slug%3Dbrayanarrieta%26button_colour%3D5F7FFF%26font_colour%3Dffffff%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3DFFDD00"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rubocop/rubocop"&gt;RuboCop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/heartcombo/devise"&gt;Devise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rspec/rspec"&gt;RSpec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/heartcombo/simple_form"&gt;Simple Form&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/omniauth/omniauth"&gt;OmniAuth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pry/pry"&gt;Pry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/faker-ruby/faker"&gt;Faker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rails/webpacker"&gt;Webpacker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/flyerhzm/bullet"&gt;Bullet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/capistrano/capistrano"&gt;Capistrano&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Reverse Engineering Keyboard Driver: Part 1 (Introduction)</title>
      <author>Rishit Bansal</author>
      <pubDate>Sat, 21 Aug 2021 20:00:05 +0000</pubDate>
      <link>https://dev.to/rishit/reverse-engineering-keyboard-driver-part-1-introduction-2hdg</link>
      <guid>https://dev.to/rishit/reverse-engineering-keyboard-driver-part-1-introduction-2hdg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr-what-is-the-series-about"&gt;
  &lt;/a&gt;
  Tldr; (What is the series about)
&lt;/h2&gt;

&lt;p&gt;This post is an introductory post to a series that will describe my journey to analyze and learn how the keyboard backlight driver on my laptop works, and then re-implement it on my own. I wanted a place to dump my thoughts and different things I try, and learn in the process. &lt;br&gt;
This post is just an intro to the series, if you're looking for the actual action, head over to the next post in the series!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h2&gt;

&lt;p&gt;I recently upgraded to a new laptop &lt;strong&gt;(HP Omen 15-en0037AX)&lt;/strong&gt;. The laptop has a four-zone RGB LED backlight on the keyboard. Like most laptops that ship with such a keyboard, the manufacturer shipped a preinstalled app &lt;strong&gt;(Omen Light Studio)&lt;/strong&gt; on windows to customize the various lighting modes on the keyboard. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N6jEcSUN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5pgzdsm3ihnkyqxx4fhu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N6jEcSUN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5pgzdsm3ihnkyqxx4fhu.png"&gt;&lt;/a&gt;&lt;br&gt;HP Omen Light Studio
  &lt;/p&gt;

&lt;p&gt;Unfortunately, this app is only available for Windows, which is a problem, as I am primarily a Linux user.&lt;/p&gt;

&lt;p&gt;Since I have always been interested in cybersecurity and have taken part in multiple &lt;a href="https://ctftime.org/ctf-wtf/"&gt;CTF (Capture the Flag)&lt;/a&gt; events, I have a basic understanding of how to Reverse Engineer C/C++ binaries using tools like &lt;a href="https://ghidra-sre.org/"&gt;Ghidra&lt;/a&gt; but have never reversed an actual real-life application. In this series I want to (hopefully) achieve two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Reverse Engineer the Omen Light Studio App, and figure out how it interfaces with the hardware on the laptop to control the keyboard's lighting.&lt;/li&gt;
&lt;li&gt;Re implementing the functionality on Linux (maybe in C/C++/Python/NodeJS) and possibly make a similar desktop app.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h2&gt;

&lt;p&gt;This series is going to be me documenting all my approaches (right or wrong), and also explaining various concepts I learned in the process. Currently, I have no idea where this will lead to or what tools/languages I need to know/learn, but all that begins from the next post. See you there!&lt;/p&gt;

</description>
      <category>security</category>
    </item>
    <item>
      <title>Anatomy of a Dockerfile</title>
      <author>Mehmet Barƒ±≈ü Kalkar</author>
      <pubDate>Sat, 21 Aug 2021 18:27:36 +0000</pubDate>
      <link>https://dev.to/mbaris/anatomy-of-a-dockerfile-4b4p</link>
      <guid>https://dev.to/mbaris/anatomy-of-a-dockerfile-4b4p</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-a-dockerfile"&gt;
  &lt;/a&gt;
  What is a Dockerfile?
&lt;/h2&gt;

&lt;p&gt;Dockerfile is a text document containing commands which can be run in sequence to assemble a docker image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.docker.com/get-started/02_our_app/"&gt;A sample Dockerfile from the official docs&lt;/a&gt; looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# syntax=docker/dockerfile:1&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:12-alpine&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;apk add &lt;span class="nt"&gt;--no-cache&lt;/span&gt; python g++ make
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--production&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["node", "src/index.js"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-do-we-need-them"&gt;
  &lt;/a&gt;
  Why do we need them?
&lt;/h2&gt;

&lt;p&gt;There are millions of images on &lt;a href="https://hub.docker.com/search?q=&amp;amp;type=image"&gt;dockerhub&lt;/a&gt; that we can directly start using with a command like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; 8080:80 &lt;span class="nt"&gt;--name&lt;/span&gt; web nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For various reasons, we may want to customize these base images. Docker images are immutable, so we can't &lt;em&gt;exactly&lt;/em&gt; modify them.&lt;br&gt;
We can technically run a container using an existing image, make some changes on it and then create a &lt;em&gt;new&lt;/em&gt; image with these modifications using the &lt;em&gt;commit&lt;/em&gt; command but there is a better way to accomplish this task &lt;br&gt;
However, before we start modifying images, we need to understand the concept of &lt;a href="https://docs.docker.com/storage/storagedriver/"&gt;layers in docker&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#images-layers-and-containers"&gt;
  &lt;/a&gt;
  Images, Layers and Containers
&lt;/h3&gt;

&lt;p&gt;Each Docker container consists of a readable and writable layer on top of multiple read only layers.&lt;br&gt;
These read only layers represent instructions in Dockerfiles, and they are deltas on previous layers(similar to git commits)&lt;/p&gt;

&lt;p&gt;Multiple containers can share the underlying layers since they have their own writable/readable layer on top.&lt;br&gt;
The readable and writable layer is a thin layer which has a lifespan associated with the container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# syntax=docker/dockerfile:1&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; tiangolo/uvicorn-gunicorn-fastapi:python3.7&lt;/span&gt;
&lt;span class="k"&gt;LABEL&lt;/span&gt;&lt;span class="s"&gt; maintainer="Mehmet Baris Kalkar"&lt;/span&gt;
&lt;span class="k"&gt;LABEL&lt;/span&gt;&lt;span class="s"&gt; version="1.1"&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;addgroup api &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; adduser fast &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; adduser fast api 
&lt;span class="k"&gt;USER&lt;/span&gt;&lt;span class="s"&gt; fast:api&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; GREETING="hola"&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ./app /project/app&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /project&lt;/span&gt;
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 8090&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8090"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we create a container from this same dockerfile, we will see a log similar to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;1/4] FROM docker.io/tiangolo/uvicorn-gunicorn-fastapi:python3.7@sha256:a0e0188a485fd8c232d8774ae4680d3b834f95dd2deccdb0211ce71cfd778b97
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;internal] load build context
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; transferring context: 56B
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;2/4] RUN addgroup api &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; adduser fast &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; adduser fast api
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;3/4] COPY ./app /project/app 
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;4/4] WORKDIR /project 
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; exporting to image 
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; exporting layers 
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; writing image sha256:3cef1a7b7ddc037fa375a1fb37daa907bc31031fedb4142b98e98e582c0bead5
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; naming to docker.io/library/fastapi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One important thing to understand is &lt;a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#leverage-build-cache"&gt;how these instructions are cached&lt;/a&gt;.&lt;br&gt;
The result of some commands like FROM, COPY/ADD, RUN and WORKDIR can be cached.&lt;/p&gt;

&lt;p&gt;Cached instructions are marked in the build command. If we build the same image by changing only the WORKDIR instruction to project2, we would see something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; CACHED &lt;span class="o"&gt;[&lt;/span&gt;1/4] FROM docker.io/tiangolo/uvicorn-gunicorn-fastapi:python3.7@sha256:a0e0188a485fd8c232d8774ae4680d3b834f95dd2deccdb0211ce71cfd778b97
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;internal] load build context
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; transferring context: 56B
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; CACHED &lt;span class="o"&gt;[&lt;/span&gt;2/4] RUN addgroup api &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; adduser fast &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; adduser fast api
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; CACHED &lt;span class="o"&gt;[&lt;/span&gt;3/4] COPY ./app /project/app
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;4/4] WORKDIR /project2
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; exporting to image
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; exporting layers
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; writing image sha256:fe482845750cf79708d1a6cc107578e76bd843f92fb3092d636180547b32b897
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; naming to docker.io/library/fastapi   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's take a look at this Dockerfile line by line&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# syntax=docker/dockerfile:1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(Optional) &lt;em&gt;&lt;a href="https://docs.docker.com/engine/reference/builder/#syntax"&gt;syntax&lt;/a&gt;&lt;/em&gt; is only enabled if we are building the image with &lt;a href="https://docs.docker.com/engine/reference/builder/#buildkit"&gt;BuildKit&lt;/a&gt;&lt;br&gt;
In this line, we can inform the Dockerfile builder which syntax to use while parsing the Dockerfile&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; tiangolo/uvicorn-gunicorn-fastapi:python3.7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;FROM&lt;/em&gt; instruction is used to set the base image that we are going to use. &lt;br&gt;
This should always be the first instruction in a Dockerfile.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;LABEL&lt;/span&gt;&lt;span class="s"&gt; maintainer="Mehmet Baris Kalkar"&lt;/span&gt;

&lt;span class="k"&gt;LABEL&lt;/span&gt;&lt;span class="s"&gt; version="1.1"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;LABEL&lt;/em&gt; instructions are used to add metadata to images.&lt;/p&gt;

&lt;p&gt;Side note, There used to be a MAINTAINER instruction in the past, but it is deprecated now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;RUN &lt;/span&gt;addgroup api &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; adduser fast &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; adduser fast api 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;RUN&lt;/em&gt; instruction is used to execute commands in a new layer on top of the current image and commit changes.&lt;br&gt;
Following steps will use the new image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;USER&lt;/span&gt;&lt;span class="s"&gt; fast:api&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;USER&lt;/em&gt; instruction sets the user and group for the following steps.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; GREETING="hola"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;ENV&lt;/em&gt; is used to add environment variables to the container. This variable can be used in the following steps during build as well.&lt;br&gt;
If we want to use a variable in only a single command and not in the image, we can define use the RUN command with a variable instead.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nv"&gt;LOCUST_LOCUSTFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;custom_locustfile.py locust
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ./app /project/app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;COPY [--chown=:] ... &lt;/em&gt; copies files from source and adds it to the file system of the container&lt;br&gt;
Target path is always relative to the working directory.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;ADD&lt;/em&gt; command also has a similar function, but it can also be used to fetch files from a remote URL or extract tar files. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#add-or-copy"&gt;It is preferred to use COPY&lt;/a&gt; &lt;br&gt;
over add because COPY is a more transparent and simple instruction.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /project&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;WORKDIR&lt;/em&gt; Sets the working directory to run instructions like CMD, RUN, ENTRYPOINT and COPY after this step.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 8090&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;EXPOSE&lt;/em&gt; is an informational instruction. It does not actually publish any ports, but it is used as a documentation to let &lt;br&gt;
users know which ports should be published to use the image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8090"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;CMD&lt;/em&gt; is the instruction to define the command you want to execute when run a container from an image. &lt;br&gt;
It is possible to override this command while actually running the image, so it acts as a default. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;ENTRYPOINT&lt;/em&gt; and &lt;em&gt;CMD&lt;/em&gt; are similar commands, &lt;a href="https://www.ctl.io/developers/blog/post/dockerfile-entrypoint-vs-cmd/"&gt;the differences are explained here pretty well&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;VOLUME&lt;/em&gt; command is used to create mounting points within the container. &lt;br&gt;
We can use these volumes to &lt;a href="https://docs.docker.com/storage/volumes/"&gt;share files between containers or the native host&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>docker</category>
      <category>devops</category>
    </item>
    <item>
      <title>Animation React</title>
      <author>Gustavo Scarpim</author>
      <pubDate>Sat, 21 Aug 2021 18:08:27 +0000</pubDate>
      <link>https://dev.to/guscarpim/animation-react-2old</link>
      <guid>https://dev.to/guscarpim/animation-react-2old</guid>
      <description>&lt;p&gt;Today I'm bringing an animation made with GSAP/React, I won't post the entire code because it got a little big, but you can see in my github all the code.&lt;/p&gt;

&lt;p&gt;GSAP is a library that facilitates the creation of animations, making it simple and intuitive.&lt;br&gt;
With it we can animate (CSS properties, canvas library objects, SVG, React, Vue, Angular, generic objects, whatever) and also resolve countless browser inconsistencies, all with incredible speed (up to 20x faster than jQuery ), including automatic GPU acceleration of transforms.&lt;/p&gt;

&lt;p&gt;The GSAP community is very active, and for those who have doubts about creating some animation, I recommend posting it on the GSAP forum &lt;a href="https://greensock.com/forums/"&gt;https:/ /greensock.com/forums/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's an example of an animation that I managed to create using GSAP to help me, I hope you like it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LEgmLkR1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kxy0wnii3wnw800jk43t.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LEgmLkR1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kxy0wnii3wnw800jk43t.gif" alt="Gustavo Scarpim"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See the complete code here on GitHub &lt;a href="https://github.com/GuScarpim/Cat-Animation"&gt;&lt;b&gt;Click here&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out the Project in action &lt;a href="https://cat-animation.netlify.app/"&gt;&lt;b&gt;Deploy&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>gsap</category>
    </item>
    <item>
      <title>
Emotion Detection CNN using keras</title>
      <author>Mayank Choudhary</author>
      <pubDate>Sat, 21 Aug 2021 17:42:47 +0000</pubDate>
      <link>https://dev.to/rado_mayank/emotion-detection-cnn-using-keras-20n7</link>
      <guid>https://dev.to/rado_mayank/emotion-detection-cnn-using-keras-20n7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tools-and-libraries-used-"&gt;
  &lt;/a&gt;
  Tools and Libraries used -
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Install anaconda&lt;/li&gt;
&lt;li&gt;Jupyter notebook&lt;/li&gt;
&lt;li&gt;VSCode&lt;/li&gt;
&lt;li&gt;matplotlib &lt;/li&gt;
&lt;li&gt;numpy&lt;/li&gt;
&lt;li&gt;openCV&lt;/li&gt;
&lt;li&gt;keras


  dataset
  &lt;a href="https://www.kaggle.com/jonathanoheix/face-expression-recognition-dataset"&gt;https://www.kaggle.com/jonathanoheix/face-expression-recognition-dataset&lt;/a&gt;&lt;br&gt;



&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#given-dataset-of-different-expressions"&gt;
  &lt;/a&gt;
  Given dataset of different expressions:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lZT2CSNf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ro6l2u6nolark9a44atu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lZT2CSNf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ro6l2u6nolark9a44atu.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;source code - &lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mayankchaudhary26"&gt;
        mayankchaudhary26
      &lt;/a&gt; / &lt;a href="https://github.com/mayankchaudhary26/Emotion_Detection_CNN_keras"&gt;
        Emotion_Detection_CNN_keras
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Emotion_Detection_CNN_keras&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/56837137/129614646-5261538f-e67e-45ef-969d-91cce64fc103.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FjZNx3OP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/56837137/129614646-5261538f-e67e-45ef-969d-91cce64fc103.png" alt="Screenshot (237)"&gt;&lt;/a&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
Given dataset of different expressions:&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/56837137/129614578-81814958-85f9-4a19-b52d-cfd9eaa492f9.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vxwh4HDj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/56837137/129614578-81814958-85f9-4a19-b52d-cfd9eaa492f9.png" alt="Screenshot (234)"&gt;&lt;/a&gt;
&lt;br&gt;
&lt;a href="https://www.kaggle.com/jonathanoheix/face-expression-recognition-dataset" rel="nofollow"&gt;https://www.kaggle.com/jonathanoheix/face-expression-recognition-dataset&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/mayankchaudhary26/Emotion_Detection_CNN_keras"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Emotion Detection ‚Äî Classifying the emotion on the face as happy, angry, sad, neutral, and surprise.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2_J5qyya--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sj67dfophwicj3uqat14.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2_J5qyya--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sj67dfophwicj3uqat14.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>keras</category>
      <category>python</category>
      <category>cnn</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>Macbook's Shopping Cart</title>
      <author>Al Siam</author>
      <pubDate>Sat, 21 Aug 2021 17:05:43 +0000</pubDate>
      <link>https://dev.to/alsiamworld/macbook-s-shopping-cart-4ogo</link>
      <guid>https://dev.to/alsiamworld/macbook-s-shopping-cart-4ogo</guid>
      <description>&lt;h1&gt;
  &lt;a href="#100daysofcode-day-11"&gt;
  &lt;/a&gt;
  100daysofcode [Day -11]
&lt;/h1&gt;

&lt;p&gt;Hey, would you like to buy a MacBook? Click on the link below and set up the configuration and I will give it to you when I become a pro developer.&lt;br&gt;
Today I created this shopping cart and you will get all the costs in the real-time update.&lt;br&gt;
Live Preview: &lt;a href="https://macbook-carts.netlify.app"&gt;https://macbook-carts.netlify.app&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tPY5PwBE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a6bak6173pfbq81uu7v6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tPY5PwBE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a6bak6173pfbq81uu7v6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#javascript-developer-programming"&gt;
  &lt;/a&gt;
  javascript # #developer #programming
&lt;/h1&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>ASP.NET Core Unit Testing with FluentAssertions</title>
      <author>EzzyLearning.net</author>
      <pubDate>Sat, 21 Aug 2021 17:00:29 +0000</pubDate>
      <link>https://dev.to/ezzylearning/asp-net-core-unit-testing-with-fluentassertions-59fg</link>
      <guid>https://dev.to/ezzylearning/asp-net-core-unit-testing-with-fluentassertions-59fg</guid>
      <description>&lt;p&gt;Writing and releasing a bug-free software product is a goal of every software developer and one of the tools to achieve this goal is unit testing. Unfortunately, the unit test coverage is not very high in many software projects and the main reason for this low coverage is that many developers think that they are either too busy in writing business logics and can‚Äôt give enough time to unit tests or they complain that most of the time unit tests written by other developers are not easy to read. Luckily, we have a library called &lt;a href="https://fluentassertions.com/"&gt;FluentAssertions&lt;/a&gt; that makes our unit test look like the sentences written in plain English which are very easy to write and read by developers. In this tutorial, I will cover different features available in the FluentAssertions library so that you can also develop robust and bug-free software.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-unit-testing"&gt;
  &lt;/a&gt;
  What is Unit Testing?
&lt;/h2&gt;

&lt;p&gt;A unit test is a way to test the smallest unit of the software. In almost all programming languages, this smallest unit is normally a function (method), a subroutine, or a property. When we do unit testing, we check whether a particular property has the expected value or a particular method is returning a value or result we are expecting it to return. There are many popular unit test frameworks available for almost all programming languages and all types of applications. The three most popular unit tests frameworks used by many .NET developers around the world are &lt;a href="https://nunit.org/"&gt;NUnit&lt;/a&gt;, &lt;a href="https://xunit.net/"&gt;xUnit&lt;/a&gt;, and &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-mstest"&gt;MSTest&lt;/a&gt;. All of these frameworks have their pros and cons but they all have an extensive set of features for writing unit tests. These three unit test frameworks are so popular that Microsoft Visual Studio has built-in project templates for these frameworks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PCGDL-Wp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qyu192v7c11d9wkcaive.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PCGDL-Wp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qyu192v7c11d9wkcaive.jpg" alt="Unit Test Projects in Visual Studio 2019"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://fluentassertions.com/"&gt;FluentAssertions&lt;/a&gt; library supports many unit test frameworks including NUnit, xUnit, and MSTest. It has a feature to automatically detect the test framework you are using in your project and it will immediately start using the test framework for throwing framework specific exceptions.&lt;/p&gt;

&lt;p&gt;For this tutorial, I will write all unit tests using the NUnit framework which I have been using recently in some of my projects. Here is an example of a simple unit test written using the NUnit framework. Let‚Äôs say you have a simple Add method that simply returns the sum of two numbers passed as parameters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public int Add(int a, int b)
{
    return a + b;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The following unit test shows how to test the above method using NUnit by adding a &lt;strong&gt;[Test]&lt;/strong&gt; attribute and using the &lt;strong&gt;AreEqual&lt;/strong&gt; method of &lt;strong&gt;Assert&lt;/strong&gt; class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[Test]
public void TestAddMethod()
{
    var result = Add(2, 3);
    var expected = 5;
    Assert.AreEqual(expected, result);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the Add method is working as expected, our above test should pass and you will see the Success message in the Unit Test session running inside Visual Studio.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LDktHB9I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0leqiziu7q6psnzmshz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LDktHB9I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0leqiziu7q6psnzmshz.jpg" alt="Unit Test Passed in Visual Studio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let‚Äôs assume that a developer made some changes in the Add method and by mistake changed the + operator with the ‚Äì operator in the method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public int Add(int a, int b)
{
    return a - b;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you will run your Unit Test again, your test will fail because you are expecting the value 5 but due to a bug in the Add method, it is not returning what you are expecting. This is the simplest example to demonstrate to you how Unit Tests can help you in identifying the bugs in your method quickly so that you can fix those bugs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eHCrY8FH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dd9qeemsg441ia7j6y4c.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eHCrY8FH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dd9qeemsg441ia7j6y4c.jpg" alt="Unit Test Failed in Visual Studio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In real-world applications, your methods will not be as simple as our &lt;strong&gt;Add&lt;/strong&gt; method shown in the above example. Maybe you have a method similar to below that returns the array of integers and you want to test it in multiple ways.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public int[] GetNumbers()
{
    return new int[] { 1, 2, 3, 4, 5};
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You want to write unit tests to test all of the following conditions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The returned array is not empty&lt;/li&gt;
&lt;li&gt;Array length is 5&lt;/li&gt;
&lt;li&gt;The first value in the array is 1&lt;/li&gt;
&lt;li&gt;The last value in the array is 5&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Your unit test will look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[Test]
public void TestAddMethod()
{
    int[] data = GetNumbers();

    var expectedLength = 5;
    var expectedFirstNumber = 1;
    var expectedLastNumber = 5;

    Assert.IsNotEmpty(data);
    Assert.AreEqual(expectedLength, data.Length);
    Assert.AreEqual(expectedFirstNumber, data\[0\]);
    Assert.AreEqual(expectedLastNumber, data\[expectedLength - 1\]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is nothing wrong with the above Unit Test but you need to spend a few seconds if not minutes to understand what‚Äôs going on. This is the biggest complaint developers normally have that their unit tests are not easy to read and understand. Before I deep dive into FluentAssertions, let me show you how you can write the above Unit Test using FluentAssertions. The following example shows how you can write a human readable, English style statements to test the same conditions mentioned above using the FluentAssertions library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[Test]
public void TestAddMethod()
{
    int[] data = GetNumbers();

    var expectedLength = 5;
    var expectedFirstNumber = 1;
    var expectedLastNumber = 5;

    data.Should().NotBeEmpty();
    data.Should().HaveCount(expectedLength);
    data.Should().StartWith(expectedFirstNumber);
    data.Should().EndWith(expectedLastNumber);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can make your code even shorter by combing multiple conditions with And method as shown below. I am sure you will agree with me that reading the following unit tests is much easier than what we have written without FluentAssertions above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;data.Should().NotBeEmpty()
    .And.HaveCount(expectedLength)
    .And.StartWith(expectedFirstNumber)
    .And.EndWith(expectedFirstNumber);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-is-fluentassertions"&gt;
  &lt;/a&gt;
  What is FluentAssertions?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://fluentassertions.com/"&gt;FluentAssertions&lt;/a&gt; is one of the most popular (over 66 million downloads on &lt;a href="https://www.nuget.org/packages/FluentAssertions/5.10.3"&gt;Nuget&lt;/a&gt;) .NET library that contains a large collection of .NET extension methods that allow .NET developers to write unit tests using a fluent syntax which is very easy to read and write and clearly shows the intent of the unit test. The library has extension methods to test almost everything related to .NET such as Strings, Booleans, Dates, Guids, Collections, Exceptions, and even Nullable Types. You can add this library to your unit test projects via &lt;a href="https://www.nuget.org/packages/FluentAssertions/5.10.3"&gt;Nuget&lt;/a&gt; package manager and start using this library in few minutes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k0vxl7bf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/il2vmpag0lrklaqu26fv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k0vxl7bf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/il2vmpag0lrklaqu26fv.jpg" alt="Download FluentAssertions from Nuget"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the library is downloaded from Nuget, you just need to add the following using statement in your unit test file and you have a big list of .NET extensions methods at your disposal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using FluentAssertions;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let‚Äôs write some basic unit tests to become comfortable with FluentAssertions. The following test is using the most common FluentAssertions method called ‚Äú&lt;strong&gt;Should&lt;/strong&gt;‚Äù which can be chained with many other extension methods of the library. In the following example, we have a string and we want to test whether a string starts with the word ‚ÄúUS‚Äù or not. Of course, the following test will pass as our currency variable hold the string ‚ÄúUS Dollars‚Äù which starts with the word ‚ÄúUS‚Äù.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[Test]
public void TestAddMethod()
{
    var currency = "US Dollars";
    currency.Should().StartWith("US");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are expecting a currency string to start with the word ‚ÄúGB‚Äù then the following test will fail.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[Test]
public void TestAddMethod()
{
    var currency = "US Dollars";
    currency.Should().StartWith("GB");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see a clear message ‚Äú&lt;strong&gt;Expected currency to start with ‚ÄúGB‚Äù but ‚ÄúUS Dollars‚Äù differs near ‚ÄúUS ‚Äú (index 0).&lt;/strong&gt;‚Äù to show you exactly why the test failed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aL9KEZwt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2tdfr3p4c7w9nodr03c1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aL9KEZwt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2tdfr3p4c7w9nodr03c1.jpg" alt="Failed Unit Test with FluentAssertions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You also have an option to customize the above message even further by setting the &lt;strong&gt;because&lt;/strong&gt; parameter available in most FluentAssertions extension methods.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var currency = "US Dollars";

currency.Should().StartWith("GB", because: "We only accepts GB Pounds.");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running the above test with a custom message will display the following message when the test will fail.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Expected currency to start with "GB" because We only accepts GB Pounds., but "US Dollars" differs near "US " (index 0).
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may have already noticed that the FluentAssertions library is automatically inferring the values we are testing into the test failure messages. This feature is called 'Subject Identification'. In the example above, see how the library is extracting the words like ‚ÄúGB‚Äù and ‚ÄúUS Dollars‚Äù automatically and adding them into the failure message. This is a very useful feature for developers who want to see the data and the reason for their test failures in the quickest way possible.&lt;/p&gt;

&lt;p&gt;Another cool feature of FluentAssertions library is the ability to combine multiple unit tests with the &lt;strong&gt;And&lt;/strong&gt; method as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[Test]
public void TestAddMethod()
{
    int[] data = GetNumbers();
    data.Should().NotBeEmpty()
        .And.HaveCount(5)
        .And.StartWith(1)
        .And.EndWith(5);
}

public int[] GetNumbers()
{
    return new int[] { 1, 2, 3, 4, 5 };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#assertion-scopes"&gt;
  &lt;/a&gt;
  Assertion Scopes
&lt;/h2&gt;

&lt;p&gt;If you have multiple Assertions in your unit tests and one of the tests failed, the exception will be thrown immediately and the methods below the failed test will never be called. For example, in the following code snipped the unit test method &lt;strong&gt;HaveCount(5)&lt;/strong&gt; will fail as we have 6 elements in the data array, and the methods &lt;strong&gt;StartWith&lt;/strong&gt; and &lt;strong&gt;EndWith&lt;/strong&gt; will never get executed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[Test]
public void TestAddMethod()
{
    int[] data = GetNumbers();

    data.Should().NotBeEmpty();
    data.Should().HaveCount(5);
    data.Should().StartWith(1);
    data.Should().EndWith(5);
}

public int[] GetNumbers()
{
    return new int[] { 1, 2, 3, 4, 5, 6 };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running the above unit test will throw the exception with the following message.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Expected data to contain 5 item(s), but found 6.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to run multiple assertions in a batch then you can use &lt;strong&gt;AssertionScope&lt;/strong&gt; which combines multiple assertions in a group and an exception is thrown at the end once the entire batch is executed. If multiple tests will fail, then failure messages of all those tests will be displayed. Here is an example of creating a batch of multiple tests using AssertionScope.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[Test]
public void TestAddMethod()
{
    int[] data = GetNumbers();

    using (new AssertionScope())
    {
        data.Should().NotBeEmpty();
        data.Should().HaveCount(5);
        data.Should().StartWith(1);
        data.Should().EndWith(5);
    }
}

public int[] GetNumbers()
{
    return new int[] { 7, 2, 3, 4, 5, 9 };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, the entire batch of tests will execute and you will see all failure messages in the end as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Expected data to contain 5 item(s), but found 6.
Expected data to start with {1}, but {7, 2, 3, 4, 5, 9} differs at index 0.
Expected data to end with {5}, but {7, 2, 3, 4, 5, 9} differs at index 5.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#basic-fluentassertions-examples"&gt;
  &lt;/a&gt;
  Basic FluentAssertions Examples
&lt;/h2&gt;

&lt;p&gt;In almost all of the above examples, I have either used strings or an array of integers but please keep in mind that FluentAssertions has a huge collection of methods to test almost every data type or object in .NET. Let‚Äôs go through some quick examples of the most common data types we use in our projects on daily basis.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nullable-types"&gt;
  &lt;/a&gt;
  Nullable Types
&lt;/h3&gt;

&lt;p&gt;The common methods to test Booleans are BeNull, NotBeNull, HaveValue, NotHaveValue.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;short? number = 5;

number.Should().NotBeNull();
number.Should().HaveValue();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#booleans"&gt;
  &lt;/a&gt;
  Booleans
&lt;/h3&gt;

&lt;p&gt;The common methods to test Booleans are BeTrue, BeFalse, NotBeTrue, NotBeFalse and Be.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[Test]
public void TestAddMethod()
{
    var isAvailable = IsAvailableInStock();

    isAvailable.Should().BeTrue();

    bool expectedResult = true;
    isAvailable.Should().Be(expectedResult);
}

public bool IsAvailableInStock()
{
    return true;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#strings"&gt;
  &lt;/a&gt;
  Strings
&lt;/h3&gt;

&lt;p&gt;FluentAssertions library has a huge collection of methods to test Strings. Here are some common examples and a full list can be found &lt;a href="https://fluentassertions.com/strings/"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;string value = "Fluent Assertions";

value.Should().NotBeNullOrWhiteSpace();
value.Should().Contain("Fluent");
value.Should().Contain("s", Exactly.Thrice());
value.Should().Be("Fluent Assertions");
value.Should().NotBe("FluentAssertions");
value.Should().BeOneOf(
    "Fluent Assertions",
    "FluentAssertions"
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#datetime"&gt;
  &lt;/a&gt;
  DateTime
&lt;/h3&gt;

&lt;p&gt;FluentAssertions library has many methods to test Dates and TimeSpans. Some examples are given below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DateTime? date = new DateTime(2020, 11, 28);

date.Should().Be(28.November(2020));
date.Should().BeBefore(1.December(2020));
date.Should().NotBeAfter(1.December(2020));
date.Should().HaveDay(28);
date.Should().HaveMonth(11);
date.Should().HaveYear(2020);

DateTime deadline = new DateTime(2020, 11, 30);
date.Should().BeMoreThan(1.Days()).Before(deadline);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#collections"&gt;
  &lt;/a&gt;
  Collections
&lt;/h3&gt;

&lt;p&gt;FluentAssertions library also has methods to test Collections and IEnumerable. Here are some common examples and a full list of methods is available &lt;a href="https://fluentassertions.com/collections/"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;IEnumerable collection = new[] { 1, 2, 3, 4 };

collection.Should().NotBeEmpty();
collection.Should().NotContainNulls();
collection.Should().HaveCount(4);
collection.Should().OnlyHaveUniqueItems();
collection.Should().Contain(3);
collection.Should().BeSubsetOf(new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#unit-testing-aspnet-core-mvc-controllers"&gt;
  &lt;/a&gt;
  Unit Testing ASP.NET Core MVC Controllers
&lt;/h2&gt;

&lt;p&gt;So far we wrote unit tests to test basic .NET types and objects. If you are developing an ASP.NET Core MVC web application, you may want to unit test MVC controllers. Let say you have the following HomeController that returns a list of strings as the model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class HomeController : Controller
{ 
    public IActionResult Index()
    {
        var list = new string\[\] { "One", "Two", "Three" };

        ViewData\["ListCount"\] = list.Length;
        ViewBag.Message = "Success";

        return View("Index", list);        
    } 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To unit test this controller, first, you need to add a reference of your MVC project in your unit test project and then you can create an object of HomeController just like a normal C# class. Finally, you can invoke the Index action method as shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[Test]
public void HomeControllerTests()
{
     HomeController controller = new HomeController();
     var result = controller.Index() as ViewResult;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you have the ViewResult object available, you can use FluentAssertions methods to test whether our ViewResult is null or not.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;result.Should().NotBeNull();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also test if the Index action is returning a ViewResult type object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;result.Should().BeOfType(typeof(ViewResult));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also write a test to check the data stored in the ViewData dictionary&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;result.ViewData\["ListCount"\].Should().Be(3);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also check the ViewName&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;result.ViewName.Should().Be("Index");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to test whether the ViewBag.Message property contains the ‚ÄúSuccess‚Äù message, you can write the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;((string) controller.ViewBag.Message).Should().Be("Success");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let‚Äôs say you also want to test the Model returned from the Index action. You can achieve this by checking the Model property as shown below. The code snippet below not only checking whether the Model is a type of string[] array but also checking that it‚Äôs not empty and has three elements in it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var model = result.Model as string\[\];

model.Should().BeOfType&amp;lt;string\[\]&amp;gt;();
model.Should().NotBeEmpty();
model.Should().HaveCount(3);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the complete code of all the unit tests we wrote above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[Test]
public void HomeControllerTests()
{
     HomeController controller = new HomeController();
     var result = controller.Index() as ViewResult;

     result.Should().NotBeNull();
     result.Should().BeOfType(typeof(ViewResult));
     result.ViewName.Should().Be("Index");
     result.Model.Should().NotBeNull();

     var model = result.Model as string\[\];

     model.Should().BeOfType&amp;lt;string\[\]&amp;gt;();
     model.Should().NotBeEmpty();
     model.Should().HaveCount(3);

     ((string) controller.ViewBag.Message).Should().Be("Success");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;In this tutorial, I gave you an overview of one of my favorite Nuget library FluentAssertions. Of course, it‚Äôs a huge library and I can‚Äôt cover all of its methods in this tutorial. If you want to know more about FluentAssertions then you can read the official documentation &lt;a href="https://fluentassertions.com/introduction"&gt;here&lt;/a&gt;. I hope you will like this library and will start using it in your projects to make your unit tests more human friendly.&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>csharp</category>
      <category>testing</category>
      <category>fluentassertions</category>
    </item>
    <item>
      <title>The Developer Feedback You Are Actually Getting is Survivorship Bias</title>
      <author>Ben Halpern</author>
      <pubDate>Sat, 21 Aug 2021 16:57:18 +0000</pubDate>
      <link>https://dev.to/ben/the-developer-feedback-you-are-actually-getting-is-survivorship-bias-4b54</link>
      <guid>https://dev.to/ben/the-developer-feedback-you-are-actually-getting-is-survivorship-bias-4b54</guid>
      <description>&lt;p&gt;Lots of people will get in touch with you about improvements to your developer-oriented product or library. This feedback is great, but take it with a grain of salt, there is a much quieter group with much bigger struggles.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--3YEt48ds--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1281071936605323266/wc1KRZLK_normal.jpg" alt="Sarah Drasner profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Sarah Drasner
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/sarah_edo"&gt;@sarah_edo&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      The folks that bounced due to bad docs, tutorials, and onboarding aren't telling you. They're just leaving.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:05 PM - 21 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1429097365563052034" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1429097365563052034" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1429097365563052034" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;The people who are getting in touch with you are the ones who aren't having the biggest problems. They understand your docs enough not to fear embarrassment of asking the wrong questions. They overcame missing context themselves, only to be able to ask questions which represent their group.&lt;/p&gt;


&lt;div class="ltag__wikipedia--container"&gt;
  &lt;div class="ltag__wikipedia--header"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sew3uq9H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/wikipedia-logo-0a3e76624c7b1c3ccdeb9493ea4add6ef5bd82d7e88d102d5ddfd7c981efa2e7.svg" class="ltag__wikipedia--logo" alt="Wikipedia Logo"&gt;
    &lt;a href="https://en.wikipedia.org/wiki/Survivorship_bias" rel="noopener noreferrer"&gt;Survivorship bias&lt;/a&gt;
  &lt;/div&gt;
  &lt;div class="ltag__wikipedia--extract"&gt;&lt;p&gt;&lt;b&gt;Survivorship bias&lt;/b&gt; or &lt;b&gt;survival bias&lt;/b&gt; is the logical error of concentrating on the people or things that made it past some selection process and overlooking those that did not, typically because of their lack of visibility. This can lead to some false conclusions in several different ways. It is a form of selection bias.&lt;/p&gt;&lt;/div&gt;
  &lt;div class="ltag__wikipedia--btn--container"&gt;
    
      &lt;a href="https://en.wikipedia.org/wiki/Survivorship_bias" rel="noopener noreferrer"&gt;View on Wikipedia&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;They did not get tripped up by implied dependency installation steps. They did not get lost due to assumptions of typical CLI behavior that you did not document. They survived to give you feedback.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;During World War II, the statistician Abraham Wald took survivorship bias into his calculations when considering how to minimize bomber losses to enemy fire. The Statistical Research Group (SRG) at Columbia University, which Wald was a part of, examined the damage done to aircraft that had returned from missions and recommended adding armor to the areas that showed the least damage, based on his reasoning. This contradicted the US military's conclusions that the most-hit areas of the plane needed additional armor. Wald noted that the military only considered the aircraft that had survived their missions; any bombers that had been shot down or otherwise lost had logically also been rendered unavailable for assessment. The bullet holes in the returning aircraft, then, represented areas where a bomber could take damage and still fly well enough to return safely to base. Thus, Wald proposed that the Navy reinforce areas where the returning aircraft were unscathed, inferring that planes hit in those areas were lost. His work is considered seminal in the then-nascent discipline of operational research.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These are the planes which came home for you. Please find a way to account for the ones which never made it.&lt;/p&gt;

</description>
      <category>dx</category>
      <category>documentation</category>
      <category>ux</category>
      <category>management</category>
    </item>
    <item>
      <title>Top 5 vscode tips &amp; tricks</title>
      <author>Abdul Malik </author>
      <pubDate>Sat, 21 Aug 2021 16:13:49 +0000</pubDate>
      <link>https://dev.to/zihadm654/top-5-vscode-tips-tricks-44ik</link>
      <guid>https://dev.to/zihadm654/top-5-vscode-tips-tricks-44ik</guid>
      <description>&lt;h4&gt;
  &lt;a href="#if-your-are-a-developer-for-quite-some-times-you-will-be-familiar-with-these-names-these-top-5-vscode-tips-will-make-you-code-efficiently"&gt;
  &lt;/a&gt;
  If your are a developer for quite some times you will be familiar with these names. These top 5 vscode tips will make you code efficiently.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Emmet
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Emmet&lt;/strong&gt; is a life saver for any developer who is working with any kind of language. Emmet makes it easier to write code faster. Emmet is just a auto compelete tool. It auto compelete your syntax based on what your writing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;command Pallete
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Command Pallete&lt;/strong&gt; is shortcut way of finding any of the vscode functionality. It's the fastest way to open any thing in vs code without touching the mouse. Just type and open it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SidePanel
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;SidePanel&lt;/strong&gt; As a developer you are mostly engaged with the keyboard most often. And It make you efficient when you are using mouse less or not using it. So, It is a pain to open or close side panel. It's ctrl + b and it's done now you can go with your coding.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Prettier
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Prettier&lt;/strong&gt; Its a real pain when you have format your code. And prettier makes it easier to format your code and forget about formating. You need to just install prettier and your are done. set it to save on format.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Bracket coloraizer 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Bracket coloraizer 2&lt;/strong&gt; is a extension which highlight your brackets. When their is too many code you find it difficult to find the specific bracket. And bracket coloraizer made it easier for you. If you need to now the a specific bracket opening and ending tag just select a tag and it will highlight the opening and ending of that tag.&lt;/p&gt;

&lt;p&gt;Thanks for the patience.&lt;br&gt;
Have a nice day&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>react</category>
      <category>html</category>
      <category>javascript</category>
    </item>
    <item>
      <title>[Part 3] ‚öõÔ∏è Senior React Coding Interview, By A Professional React Developer üë®‚Äçüíª</title>
      <author>Better Coding Academy</author>
      <pubDate>Sat, 21 Aug 2021 16:08:58 +0000</pubDate>
      <link>https://dev.to/bettercodingacademy/senior-react-coding-interview-by-a-professional-react-developer-part-3-13dd</link>
      <guid>https://dev.to/bettercodingacademy/senior-react-coding-interview-by-a-professional-react-developer-part-3-13dd</guid>
      <description>&lt;p&gt;&lt;strong&gt;About Me:&lt;/strong&gt; I've been a professional web developer for just over 10 years now. I'm currently the lead web development instructor at &lt;a href="https://codebetter.com.au"&gt;Better Coding Academy&lt;/a&gt;, and as part of what I do, I post videos on our YouTube channel at &lt;a href="https://www.youtube.com/c/BetterCodingAcademy"&gt;https://www.youtube.com/c/BetterCodingAcademy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Subscribe for awesome web development content!)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here's part 3 of the mock React coding interview! I take the reusable table hook a bit further, showing how I'd implement a basic pagination system, and explaining some of the conscious decisions I've made in designing the system this way so far. I hope you enjoy!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/WEu7AFbFIzw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>What is a Frontend and a Backend? Basics of web development to clear your doubts</title>
      <author>Kunal Bagaria</author>
      <pubDate>Sat, 21 Aug 2021 15:54:01 +0000</pubDate>
      <link>https://dev.to/kb24x7/what-is-a-frontend-and-a-backend-basics-of-web-development-to-clear-your-doubts-3j57</link>
      <guid>https://dev.to/kb24x7/what-is-a-frontend-and-a-backend-basics-of-web-development-to-clear-your-doubts-3j57</guid>
      <description>&lt;p&gt;So you wanna be a full stack web developer but are confused with simple topics like a Frontend or a Backend. Stick around this article, and I'll guide you on how you can start with web development.&lt;/p&gt;

&lt;p&gt;Before we start, you may wanna join my Discord if you have any doubts or just want to hang out: &lt;a href="https://discord.gg/eBaFj2ytTU"&gt;Invite Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's start with Frontend. The Frontend is basically the visual content that is rendered when you open a website. The browser renders that using HTML, CSS and JavaScript.&lt;/p&gt;

&lt;p&gt;You can make a Frontend either in fully Vanilla JavaScript, or you can use a JavaScript framework like React.js or Vue.js. Larger web applications typically use frameworks like these to make workflows easier.&lt;/p&gt;

&lt;p&gt;You might be asking, wait a minute, how is the content dynamic in websites? Those topics are better covered in web networking, but in a nutshell, the Frontend uses network requests from your server (which is the Backend) to display dynamic data onto the website.&lt;/p&gt;

&lt;p&gt;And this is a nice segue to the Backend, the backbone of web applications. The Backend handles everything from user authentication to handling user data.&lt;/p&gt;

&lt;p&gt;You can make a Backend with a Backend framework like Django, Ruby on Rails, Laravel, Express.js, etc.&lt;/p&gt;

&lt;p&gt;A Backend is deployed on a server, you can use cloud services like AWS, GCloud, DigitalOcean, Azure, etc for this.&lt;/p&gt;

&lt;p&gt;So how does the Backend store data? A Backend interacts with a database that stores all the data. You can use databases like Postgresql, MongoDB, etc.&lt;/p&gt;

&lt;p&gt;So, onto the final question, where do I start?&lt;/p&gt;

&lt;p&gt;For the Frontend, you MUST learn HTML, CSS and JavaScript to build dynamic websites. And then comes the option of frameworks, you may choose any one of them, React.js and Vue.js are the most widely used ones in this industry.&lt;/p&gt;

&lt;p&gt;For the Backend, if you have already learnt JavaScript and don't want to learn another language, I recommend you use Express.js. Otherwise if you're familiar with multiple languages or just want to learn Backend development, you may learn Django or Ruby on Rails. Those are the best options for beginners.&lt;/p&gt;

&lt;p&gt;Hit the like and follow button if you liked this article, I'll see you in the next one.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>guide</category>
      <category>react</category>
    </item>
    <item>
      <title>Updating Node.js to 16+ in Replit</title>
      <author>Arnav Kumar</author>
      <pubDate>Sat, 21 Aug 2021 15:42:55 +0000</pubDate>
      <link>https://dev.to/arnavkr/updating-node-js-to-16-in-replit-1ep0</link>
      <guid>https://dev.to/arnavkr/updating-node-js-to-16-in-replit-1ep0</guid>
      <description>&lt;p&gt;Hey There,&lt;br&gt;
Welcome to my first post, today i'll tell you how can you update your &lt;a href="https://replit.com/"&gt;Replit&lt;/a&gt;'s &lt;a href="https://nodejs.dev/"&gt;Nodejs&lt;/a&gt; version to 16+, so lets get started. &lt;/p&gt;

&lt;p&gt;Many want to do that as to support &lt;a href="https://discordjs.guide/"&gt;Discord&lt;/a&gt;'s latest v13 as it would only run on &lt;a href="https://nodejs.dev/"&gt;Nodejs&lt;/a&gt; v16.6 or higher. But there maybe your own reasons (Nobody likes old versions üòÖ).&lt;/p&gt;

&lt;p&gt;Here's our repl at version 12.x.x after this tutorial it will be updated to 16+&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3L4eudGV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhti8xzbpzsujxceh32o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3L4eudGV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhti8xzbpzsujxceh32o.png" alt="Unupdated Repl"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At first go to your &lt;code&gt;repl&lt;/code&gt; or if you don't have any just create one.&lt;/p&gt;

&lt;p&gt;Go to the &lt;code&gt;shell prompt&lt;/code&gt; and run the following code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm i &lt;span class="nt"&gt;--save-dev&lt;/span&gt; node@16 &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm config &lt;span class="nb"&gt;set &lt;/span&gt;&lt;span class="nv"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;/node_modules/node &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;/node_modules/node/bin:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UU9DIANS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/clhm66g6yv5dtli0mcer.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UU9DIANS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/clhm66g6yv5dtli0mcer.png" alt="Shell with code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After running the code you would see the following output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Gn9ZlGm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cam7gfk1d86g38mcz8ot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Gn9ZlGm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cam7gfk1d86g38mcz8ot.png" alt="Shell after Run"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And congo üéâ your repl's nodejs has been successfully updated to 16+. &lt;br&gt;
You could further confirm it by running &lt;code&gt;node -v&lt;/code&gt; in the shell&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Od4kyPvc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ka4desxua80e6tokpz2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Od4kyPvc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ka4desxua80e6tokpz2.png" alt="Success"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>replit</category>
      <category>javascript</category>
      <category>v16</category>
    </item>
  </channel>
</rss>
