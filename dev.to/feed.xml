<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Ethical Hacking Roadmap 2021</title>
      <author>Gigogh</author>
      <pubDate>Fri, 13 Aug 2021 05:51:13 +0000</pubDate>
      <link>https://dev.to/gigogh/ethical-hacking-roadmap-2021-gh3</link>
      <guid>https://dev.to/gigogh/ethical-hacking-roadmap-2021-gh3</guid>
      <description>&lt;h1&gt;Skills Required to Become a Ethical Hacker&lt;/h1&gt;
&lt;p&gt;Ethical Hacking¬†is compromising computer systems for assessing security and acting in good faith by informing the vulnerable party. Ethical hacking is a key skill for many job roles related to securing the online assets of an organization. The professionals working on these job roles maintain the organization‚Äôs computers, servers, and other components of its infrastructure in working conditions preventing unauthorized access through non-physical channels.¬†&lt;/p&gt;
&lt;p&gt;¬†&lt;/p&gt;
&lt;p&gt;People believe that ‚Äúhacking‚Äù means to hack any website within a minute. This concept comes from watching movies, so they do not even know the original basic concept of what it means to hack or how to do it.¬†&lt;strong&gt;To crack passwords or to steal data?&lt;/strong&gt;¬†No,¬†&lt;strong&gt;Ethical Hacking&lt;/strong&gt;¬†is much more than that. Ethical hacking is to scan vulnerabilities and to find potential threats on a computer or network. An ethical hacker finds the weak points or loopholes in a computer, web applications, or network and reports them to the organization. So, let‚Äôs explore the skills required to become an ethical hacker.¬†&lt;/p&gt;

&lt;p&gt;Read More: &lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/skills-required-to-become-a-ethical-hacker/"&gt;Skill Required To Become Ethical Hacker&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Top 20 JavaScript tips and tricks to increase your Speed and Efficiency</title>
      <author>Gigogh</author>
      <pubDate>Fri, 13 Aug 2021 05:39:30 +0000</pubDate>
      <link>https://dev.to/gigogh/top-20-javascript-tips-and-tricks-to-increase-your-speed-and-efficiency-2n7b</link>
      <guid>https://dev.to/gigogh/top-20-javascript-tips-and-tricks-to-increase-your-speed-and-efficiency-2n7b</guid>
      <description>&lt;h3&gt;Convenient and useful techniques to reduce the lines of code and pace up your Dev Work!&lt;/h3&gt;
&lt;p&gt;In our daily tasks, we get to write functions such as sorting, searching, finding unique values, passing parameters, swapping values etc, so here I present my list of shorthand techniques to write all of them as a Pro!‚úåüèª&lt;/p&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WgxQe1g9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh2m04o3fgw3a6i8bzha.jpg"&gt;&lt;img alt="Increase Your Performance" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ftNfvGUp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--WgxQe1g9--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh2m04o3fgw3a6i8bzha.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;JavaScript is truly an awesome languageüíõ to learn and work with. And there can be more than one approach to reach to the same solution for given problem. In this article, we will discuss only the quickest ones.üöÄ&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;These approaches will definitely help you in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reducing the number of LOC(lines of code),&lt;/li&gt;
&lt;li&gt;Coding Competitions,&lt;/li&gt;
&lt;li&gt;Hackathons or&lt;/li&gt;
&lt;li&gt;Other time bound tasks.‚è±&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of these JavaScript Hacks uses techniques from ECMAScript6(ES2015) onwards, though the latest version is ECMAScript11(ES2020).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: All below tricks have been tested on the Console of Google Chrome.&lt;/em&gt;&lt;/p&gt;
&lt;br&gt;Read More: &lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/top-20-javascript-tips-and-tricks/"&gt;Top 20 JavaScript tips and tricks to increase your Speed and Efficiency&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;

</description>
    </item>
    <item>
      <title>"INTERFACES - WHY USE THEM?" üò¶ (my reply) </title>
      <author>Clean Code Studio</author>
      <pubDate>Fri, 13 Aug 2021 05:29:25 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/interfaces-why-use-them-my-reply-2jm2</link>
      <guid>https://dev.to/cleancodestudio/interfaces-why-use-them-my-reply-2jm2</guid>
      <description>&lt;center&gt;
&lt;h6&gt;
  &lt;a href="#would-you-reply"&gt;
  &lt;/a&gt;
  &lt;em&gt;Would &lt;strong&gt;you&lt;/strong&gt; reply?&lt;/em&gt; üëÄ
&lt;/h6&gt;


&lt;h2&gt;
  &lt;a href="#interfaces-why-use-them"&gt;
  &lt;/a&gt;
  "INTERFACES - WHY USE THEM?"
&lt;/h2&gt;
&lt;h6&gt;
  &lt;a href="#my-reply-to-a-provoking-youtube-comment"&gt;
  &lt;/a&gt;
  (my üî• reply) to a PROVOKING [YouTube] comment üò¶
&lt;/h6&gt;


&lt;/center&gt;




&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #343c35 !important;
      color: #f5f5f5 !important;
      border-color: #343c35 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YeAAvjHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GeGRizPU--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/4f170830-7e2c-4f3e-81fe-b666a90b7e3f.gif" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;





&lt;p&gt;As many of you already know, Clean Code Studio is also a YouTube channel. &lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Comments, ever get 'em?&lt;/strong&gt; ------&amp;gt; &lt;em&gt;Tons!&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now and again a comment will come in that &lt;strong&gt;PROVOKES&lt;/strong&gt; the living &lt;strong&gt;HELL&lt;/strong&gt; out of me. &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;You know which one I mean?&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;A üî• under your a** is lit, your inner Shakespearian rockets from the abyss of your sub-conscience, and &lt;strong&gt;WHAMMMYY!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Before you know it, you've written the greatest monologue since Hamlet's &lt;strong&gt;"To Be Or Not To Be"&lt;/strong&gt; spiel.  &lt;/p&gt;




&lt;p&gt;A while back, one of those &lt;small&gt;&lt;strong&gt;provoking&lt;/strong&gt;&lt;/small&gt; comments came up.&lt;/p&gt;

&lt;p&gt;Check it...I've posted the comment and my Shakespearian monologue of a response below.&lt;/p&gt;


&lt;center&gt;


&lt;h3&gt;
  &lt;a href="#the-comment-that-provoked-my-inner-shakespeare"&gt;
  &lt;/a&gt;
  The Comment (That Provoked My Inner Shakespeare)
&lt;/h3&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"The code after you added the interface was far longer, far more cluttered and far more difficult to follow than it was without the interface. Nothing in this example makes me want to use interfaces. I still don't see any reason to use them at all."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;small&gt;(Comment made on: &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;Interfaces - Object Oriented PHP - Lesson 5&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;


&lt;/center&gt;


&lt;h3&gt;
  &lt;a href="#my-reply-to-why-use-interfaces"&gt;
  &lt;/a&gt;
  My Reply [To why use interfaces]
&lt;/h3&gt;
&lt;h6&gt;
  &lt;a href="#interfaces-why-use-them-a-shakespearian-monologue"&gt;
  &lt;/a&gt;
  ("Interfaces, why use them?" - A Shakespearian Monologue)
&lt;/h6&gt;



&lt;blockquote&gt;
&lt;p&gt;That's a &lt;strong&gt;verrryy&lt;/strong&gt; reasonable perspective that I respect quite a bit.&lt;/p&gt;

&lt;p&gt;Given this series wasn't an extremely in depth overview covering the reasons behind &lt;strong&gt;WHY&lt;/strong&gt; &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;interfaces&lt;/a&gt; and &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/4"&gt;abstract classes&lt;/a&gt; are useful for implementing &lt;a href="https://cleancode.studio/design-patterns"&gt;design principles&lt;/a&gt; -- I highly recommend you checkout our &lt;a href="https://www.cleancode.studio/series/solid-principles"&gt;SOLID principles series&lt;/a&gt; and specifically the lesson diving into the &lt;a href="https://www.cleancode.studio/series/solid-principles/episodes/2"&gt;Open Closed Principle&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Personally, the fact that you challenge adding seemingly needless code is awesome - in my opinion. I'm with you, and whenever possible, opt out of adding needless code if it isn't necessary.&lt;/p&gt;

&lt;p&gt;In the lessons offered through out this &lt;a href="https://cleancode.studio/series/object-oriented-php"&gt;object oriented PHP&lt;/a&gt;, we're covering the very basics. &lt;/p&gt;

&lt;p&gt;We only cover &lt;strong&gt;HOW&lt;/strong&gt; to implement concepts like &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/4"&gt;abstract classes&lt;/a&gt; and &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;interfaces&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this &lt;a href="https://cleancode.studio/series/object-oriented-php"&gt;OOP PHP series&lt;/a&gt; we also, very deliberately, avoid many of the &lt;strong&gt;WHY&lt;/strong&gt; questions behind using &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/2"&gt;object oriented&lt;/a&gt; concepts like &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/4"&gt;abstract classes&lt;/a&gt; and &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;interfaces&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here's a quick &lt;em&gt;"why &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;interfaces&lt;/a&gt;"&lt;/em&gt; example.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-imagine-we-have-3-classes"&gt;
  &lt;/a&gt;
  1. Imagine we have 3 &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/1"&gt;classes&lt;/a&gt;
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;Class&lt;/span&gt; &lt;span class="nc"&gt;CsvFile&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JsonFile&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HtmlFile&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#2-imagine-we-have-a-parse-function"&gt;
  &lt;/a&gt;
  2. Imagine we have a parse function
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;is_a&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'CsvFile'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="c1"&gt;// parse csv file&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;is_a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'JsonFile'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// parse json file&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;is_a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'HtmlFile'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="c1"&gt;// parse html file&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;br&gt;
php&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: Any time  we add a &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/2"&gt;new file type&lt;/a&gt;, we have to find our parse function and add a new else if conditional to parse the given file type.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#3-imagine-we-have-a-file-interfaces"&gt;
  &lt;/a&gt;
  3. Imagine we have a file &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;interfaces&lt;/a&gt;
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;File&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CsvFile&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;File&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JsonFile&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;File&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt;  &lt;span class="nc"&gt;HtmlFile&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;File&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: Currently Everything breaks because each of our classes implements a given &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;interface&lt;/a&gt;&lt;br&gt;
 but none actually has the parse method. &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;Interfaces contractually obligate&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/1"&gt;Classes&lt;/a&gt; to implement methods.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#4-correctly-implement-file-interface"&gt;
  &lt;/a&gt;
  4. Correctly Implement File Interface
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CsvFile&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;File&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="c1"&gt;// parse csv file &lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JsonFile&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;File&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// parse json file&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HtmlFile&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;File&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="c1"&gt;// parse html file&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://cleancode.studio/refactoring"&gt;Refactor&lt;/a&gt; the parse method
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;File&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: Each class implements the file &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;interface&lt;/a&gt;. This forces each &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/1"&gt;class&lt;/a&gt; to Have a parse method. The parse(File $file) function accepts an &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/2"&gt;instance&lt;/a&gt; that implements the _File Interface&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This means we know that the &lt;code&gt;$file&lt;/code&gt; passed in can &lt;code&gt;parse()&lt;/code&gt; even if we don't know exactly how it will parse. &lt;/p&gt;

&lt;p&gt;Each &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/1"&gt;class&lt;/a&gt; implementing the File &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;Interface&lt;/a&gt; is contractually bound to implement their own parse method. Each &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/1"&gt;class&lt;/a&gt; implement the File &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;Interface&lt;/a&gt; defines how it will parse itself. &lt;/p&gt;

&lt;p&gt;In the short term, this does lead to more verbose code. In fact, if you do only have two or three file types and absolutely never need to add any more file types I would recommend sticking with &lt;a href="https://cleancode.studio/refactoring"&gt;else if conditionals&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;That being said, if you are unsure how many file types there will be in the future then I recommend using &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;interfaces&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;That way, you only have to &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/1"&gt;create a new class&lt;/a&gt; and &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;implement the given interface&lt;/a&gt;. You don't have to &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;add a new class&lt;/a&gt; (SqlFile Class for example) and then update the parse function with another &lt;a href="https://cleancode.studio/refactoring"&gt;if else conditional&lt;/a&gt; because you &lt;a href="https://cleancode.studio/series/solid-principles/episodes/5"&gt;removed a dependency from your code depending on an interface&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://cleancode.studio/design-patterns"&gt;Design principles in software&lt;/a&gt; are recommendations for best practices, but by no means are they absolutes for designing the &lt;a href="https://cleancode.studio/clean-code"&gt;cleanest most simplified code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the short run, they usually add verbosity - it's up to you as the software engineer to decide if you need to plan for the long run and &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;implement interfaces&lt;/a&gt; and specific &lt;a href="https://cleancode.studio/design-patterns"&gt;design principles&lt;/a&gt; that'll &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;use interfaces&lt;/a&gt; to &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;force functions to be implemented&lt;/a&gt; or if this is the last time you'll ever need to &lt;a href="https://cleancode.studio/refactoring"&gt;change this code&lt;/a&gt; and &lt;a href="https://cleancode.studio/refactoring"&gt;if else conditionals&lt;/a&gt; are the &lt;a href="https://cleancode.studio/clean-code"&gt;simplest way to create your software&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Context, attentive care, and intuition based on experience are by far more important than any &lt;a href="https://cleancode.studio/design-patterns"&gt;design principles&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;The catch is understanding the &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/5"&gt;purpose behind interface&lt;/a&gt;, &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/4"&gt;abstract classes&lt;/a&gt;, and the &lt;a href="https://cleancode.studio/design-pattern"&gt;design principles&lt;/a&gt; they allow you to implement are necessary to learn if you truly want to &lt;a href="https://cleancode.studio/design-patterns"&gt;make the best decision based on the context of your problem&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sometimes &lt;a href="https://ceancode.studio/series/solid-principles/4"&gt;interfaces are incredible&lt;/a&gt; sometimes they are not. Understanding how, why, and when they are valuable or inhibiting gives you the control to make the best decision based on the context of your software.&lt;/p&gt;

&lt;p&gt;Understanding &lt;a href="https://cleancode.studio/clean-code"&gt;visual simplicity&lt;/a&gt; vs. &lt;a href="https://cleancode.studio/design-patterns"&gt;longer term architecture requirements as well as design principles&lt;/a&gt; best fit to meet longer term architecture requirements gives you contextual understanding of your software.&lt;/p&gt;

&lt;p&gt;Contextual understanding along with intimate care and a love for simplifying - together - &lt;a href="https://cleancode.studio"&gt;make great software engineers and helps build world shifting applications&lt;/a&gt;.&lt;/p&gt;




&lt;center&gt;
&lt;br&gt;
&lt;a href="https://cleancode.studio"&gt;Clean Code Studio&lt;/a&gt;&lt;br&gt;
‚òïÔ∏è Code Tips&lt;br&gt;
‚òïÔ∏è Career Advice&lt;br&gt;
‚òïÔ∏è Developer Memes&lt;br&gt;
&lt;small&gt;Shiny button, Clean Code ùó°ùó≤ùòÑùòÄùóπùó≤ùòÅùòÅùó≤ùóø üëá, juicy dev tips...wanna join?&lt;/small&gt; 

&lt;p&gt;&lt;a href="https://cleancodestudio.paperform.co/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dgj1OcQv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f7hwc3k4pzedr59fnr9r.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;(Discover [50+ pages] of my personal FAANG interview notes!)&lt;/small&gt;&lt;br&gt;
&lt;/p&gt;


&lt;/center&gt;





&lt;center&gt;

&lt;p&gt;&lt;a href="https://twitter.com/cleancodestudio"&gt;Follow @cleancodestudio on Twitter!&lt;/a&gt;&lt;/p&gt;




&lt;/center&gt;

</description>
      <category>php</category>
      <category>devjournal</category>
      <category>laravel</category>
      <category>beginners</category>
    </item>
    <item>
      <title>üöÄ20 Best CSS3 Library For Developers.</title>
      <author>Gigogh</author>
      <pubDate>Fri, 13 Aug 2021 05:09:45 +0000</pubDate>
      <link>https://dev.to/gigogh/20-best-css3-library-for-developers-3ikm</link>
      <guid>https://dev.to/gigogh/20-best-css3-library-for-developers-3ikm</guid>
      <description>&lt;p&gt;Web Developers used to spend a lot of time creating beautiful CSS. Thanks to the CSS libraries, we now have a better, faster, and more effective way to build responsive websites and web applications.&lt;/p&gt;
&lt;p&gt;Are you still looking for the best CSS libraries? Do you want to know which library you should try? In this article, we have 20 best CSS libraries for your inspiration.&lt;/p&gt;
&lt;h2&gt;
&lt;br&gt;
&lt;a href="https://dev.to/chetan_atrawalkar/20-best-css3-library-for-developers-58p#how-do-css-libraries-work"&gt;&lt;/a&gt;ü§î How do CSS libraries work?&lt;/h2&gt;
&lt;p&gt;CSS library gives web developers a basic structure, which includes grid, interactive UI patterns, web typography, tooltips, buttons, form elements, icons. This structure helps web developers to start quickly and efficiently when they are designing a website or web applications.&lt;/p&gt;
&lt;p&gt;Here we have put together¬†&lt;span&gt;20 best CSS libraries.&lt;/span&gt;¬†We hope you like them, and most importantly, find the best one for your needs.&lt;/p&gt;
&lt;h4&gt;
&lt;br&gt;
&lt;a href="https://dev.to/chetan_atrawalkar/20-best-css3-library-for-developers-58p#lets-go"&gt;&lt;/a&gt;Let's go....ü§©&lt;/h4&gt;
&lt;br&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/20-best-css3-library-for-developers/&amp;amp;ved=2ahUKEwii76qFzaPyAhWvyzgGHX9RA-kQFnoECAMQBQ&amp;amp;usg=AOvVaw2AtoxfMkY_y5JPLB2VuSdV"&gt;üöÄ20 Best CSS3 Library For Developers&lt;/a&gt;&lt;/b&gt;.

</description>
    </item>
    <item>
      <title>Designing Hotel Management System With RADZEN Blazor Web Assembly Part 3 (Setup Of Security Infrastructure)</title>
      <author>Benjamin Fadina</author>
      <pubDate>Fri, 13 Aug 2021 05:03:09 +0000</pubDate>
      <link>https://dev.to/benjaminsqlserver/designing-hotel-management-system-with-radzen-blazor-web-assembly-part-3-setup-of-security-infrastructure-n58</link>
      <guid>https://dev.to/benjaminsqlserver/designing-hotel-management-system-with-radzen-blazor-web-assembly-part-3-setup-of-security-infrastructure-n58</guid>
      <description>&lt;p&gt;In this video, I show you how to set up the app's security infrastructure. I show you how to create roles and I create a user.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/TmJagcFw744"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webassembly</category>
      <category>radzen</category>
      <category>csharp</category>
      <category>blazor</category>
    </item>
    <item>
      <title>10 Magical JavaScript Tips for Every Web Developer</title>
      <author>Gigogh</author>
      <pubDate>Fri, 13 Aug 2021 04:17:28 +0000</pubDate>
      <link>https://dev.to/gigogh/10-magical-javascript-tips-for-every-web-developer-136o</link>
      <guid>https://dev.to/gigogh/10-magical-javascript-tips-for-every-web-developer-136o</guid>
      <description>&lt;p id="f6cc"&gt;In this article, we will discuss the 15 useful JavaScript tips for every web developer to save their valuable and precious time.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p id="e1bb"&gt;I am always ready to learn although I do not always like being taught&lt;/p&gt;

&lt;p id="0fe5"&gt;‚Äî Winston Churchill&lt;/p&gt;


&lt;/blockquote&gt;
&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;h1 id="fa85"&gt;Tip 1. Flatten the array of the array&lt;/h1&gt;
&lt;p id="4e31"&gt;This tip will help you to flatten a deeply nested array of arrays by using¬†&lt;code&gt;Infinity&lt;/code&gt;¬†in¬†&lt;code&gt;flat&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;span id="e3aa"&gt;var array = [123, 500, [1, 2, [34, 56, 67, [234, 1245], 900]], 845, [30257]]&lt;/span&gt;&lt;span id="16da"&gt;//flatten array of array&lt;br&gt;array.flat(Infinity)&lt;/span&gt;&lt;span id="b0d8"&gt;// output:&lt;br&gt;// [123, 500, 1, 2, 34, 56, 67, 234, 1245, 900, 845, 30257]&lt;/span&gt;&lt;/pre&gt;
&lt;h1 id="902c"&gt;Tip 2. Easy Exchange Variables&lt;/h1&gt;
&lt;p id="ebf9"&gt;You probably swap the two variables using a third variable¬†&lt;code&gt;temp&lt;/code&gt;. But this tip will show you a new way to exchange variables using destructuring.&lt;/p&gt;
&lt;pre&gt;&lt;span id="298c"&gt;//example 1&lt;/span&gt;&lt;span id="3316"&gt;var a = 6;&lt;br&gt;var b = 7;&lt;/span&gt;&lt;span id="b133"&gt;[a,b] = [b,a]&lt;/span&gt;&lt;span id="aa36"&gt;console.log(a,b) // 7 6&lt;/span&gt;&lt;/pre&gt;
&lt;br&gt;Read More: &lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/magical-javascript-tips-for-every-web-developer/"&gt;10 Magical JavaScript Tips for Every Web Developer&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;

</description>
    </item>
    <item>
      <title>10 VSCode Extension Every Front-end Developer should use</title>
      <author>Gigogh</author>
      <pubDate>Fri, 13 Aug 2021 04:10:09 +0000</pubDate>
      <link>https://dev.to/gigogh/10-vscode-extension-every-front-end-developer-should-use-59d3</link>
      <guid>https://dev.to/gigogh/10-vscode-extension-every-front-end-developer-should-use-59d3</guid>
      <description>&lt;p&gt;¬†&lt;span&gt;Hello everyone, my name is suman and I'm a frontend developer. In this blog post, I would like to share 10 VS code extensions that every frontend developer should use. The purpose of using these extensions is to write faster, cleaner, and more consistent code.¬†&lt;/span&gt;&lt;span&gt;Let's Jump in!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;a href="https://www.codelivly.com/10-vs-code-extensions-every-frontend-developer-should-use/"&gt;10 VS Code extensions every Frontend Developer should use&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Make VSCode Lighter</title>
      <author>Gigogh</author>
      <pubDate>Fri, 13 Aug 2021 04:09:16 +0000</pubDate>
      <link>https://dev.to/gigogh/make-vscode-lighter-1fco</link>
      <guid>https://dev.to/gigogh/make-vscode-lighter-1fco</guid>
      <description>&lt;p&gt;VSCode is a really great Code Editor rather say nearly an IDE or better than that. But this costs a great amount of RAM and CPU in bigger projects. That's not all related VSCode but to most of its extensions. VSCode's extensions are good, by far best. But these are written for Nodejs with JS so unsurprisingly these take a handy amount of resource but efficiently. And people unknowingly accuse vscode for this. Though most of the time it doesn't cause that much of issue. But in bigger projects this tiny problem gets bigger as most of the people don't have a AMD Thread Ripper, Samsung NVMe SSD with 16GB RAM &amp;amp; a RTX3090&lt;/p&gt;
&lt;p&gt;Let's find out the reasons of this high resource usage &amp;amp; fix 'em&lt;/p&gt;

&lt;p&gt;&lt;span&gt;READ More: &lt;/span&gt;&lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/make-vscode-lighter/"&gt;Make Vs Code Lighter&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;





</description>
    </item>
    <item>
      <title>Implementing a web app using Azure Static Web Apps.</title>
      <author>Rafael Alexander Reyes Perez</author>
      <pubDate>Fri, 13 Aug 2021 03:11:12 +0000</pubDate>
      <link>https://dev.to/rareyesrd/implementing-a-web-app-using-azure-static-web-apps-4a03</link>
      <guid>https://dev.to/rareyesrd/implementing-a-web-app-using-azure-static-web-apps-4a03</guid>
      <description>&lt;p&gt;Video: &lt;a href="https://lnkd.in/dwvHBKTf"&gt;https://lnkd.in/dwvHBKTf&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#microsoft-azure-website-github-deploy-learning"&gt;
  &lt;/a&gt;
  microsoft #azure #website #github #deploy #learning
&lt;/h1&gt;

</description>
      <category>azure</category>
      <category>github</category>
      <category>website</category>
      <category>deployment</category>
    </item>
    <item>
      <title>Create a Netflix clone from Scratch: JavaScript PHP + MySQL Day 18</title>
      <author>Christopher Glikpo</author>
      <pubDate>Fri, 13 Aug 2021 02:48:14 +0000</pubDate>
      <link>https://dev.to/cglikpo/create-a-netflix-clone-from-scratch-javascript-php-mysql-day-18-468c</link>
      <guid>https://dev.to/cglikpo/create-a-netflix-clone-from-scratch-javascript-php-mysql-day-18-468c</guid>
      <description>&lt;p&gt;Netflix provides streaming movies and TV shows to over 75 million subscribers across&lt;br&gt;
the globe. Customers can watch as many shows/ movies as they want as long as they are&lt;br&gt;
connected to the internet for a monthly subscription fee of about ten dollars. Netflix produces&lt;br&gt;
original content and also pays for the rights to stream feature films and shows.&lt;/p&gt;

&lt;p&gt;In this video,we will validate the Password&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8o65ZiRN1ow"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you like my work, please consider&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/cglikpo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c23TxQOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jm11knj7d8zwcvo150q2.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;br&gt;
so that I can bring more projects, more articles for you&lt;/p&gt;

&lt;p&gt;If you want to learn more about Web Development, feel free to &lt;a href="https://www.youtube.com/c/ChristopherGlikpo"&gt;follow me on Youtube!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>August 13th, 2021: What did you learn this week?</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Fri, 13 Aug 2021 02:42:27 +0000</pubDate>
      <link>https://dev.to/nickytonline/august-13th-2021-what-did-you-learn-this-week-24ln</link>
      <guid>https://dev.to/nickytonline/august-13th-2021-what-did-you-learn-this-week-24ln</guid>
      <description>&lt;p&gt;It's that time of the week again. So wonderful devs, what did you learn this week? It could be programming tips, career advice etc.&lt;/p&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/yDYAHbqe5DfyM/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/yDYAHbqe5DfyM/giphy.gif" alt="Yoda wooping someone's butt"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;


&lt;/center&gt;

&lt;p&gt;Feel free to comment with what you learnt and/or reference your TIL post to give it some more exposure.&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__5305"&gt;
  
    .ltag__tag__id__5305 .follow-action-button{
      background-color: #ffedc9 !important;
      color: #820000 !important;
      border-color: #ffedc9 !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/todayilearned" class="ltag__tag__link"&gt;todayilearned&lt;/a&gt; Follow
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        Summarize a concept that is new to you.
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>weeklylearn</category>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>15 Beginner JavaScript Projects to Improve Your Front-End Skills!</title>
      <author>Miguel Nunez</author>
      <pubDate>Fri, 13 Aug 2021 02:29:02 +0000</pubDate>
      <link>https://dev.to/codefoxx/15-beginner-javascript-projects-to-improve-your-front-end-skills-5bcj</link>
      <guid>https://dev.to/codefoxx/15-beginner-javascript-projects-to-improve-your-front-end-skills-5bcj</guid>
      <description>&lt;p&gt;The fastest way for you to become a good web developer is to practice. This means completing as many beginner projects as you can. That‚Äôs because each project presents a unique problem and solution. Hence, the more projects you complete, the more knowledge you will gain. Think of each completed project as a medal you earned.&lt;/p&gt;

&lt;p&gt;In this list of JavaScript challenges, I‚Äôve included some of my favorite projects for beginners. In fact, these are the same projects that I built when I was first learning JavaScript. Hopefully you can learn from them like I did. If you get stuck, don‚Äôt worry, I included a video tutorial next to each project that shows you how to solve it step by step.&lt;/p&gt;

&lt;p&gt;Before watching the solutions, I encourage you to attempt them on your own first. This is key to becoming a good developer. In programming there isn‚Äôt any shortcuts so if you don‚Äôt put in the work, you will not see improvement no matter how many tutorials you watch. If your feeling overwhelmed, take a break and relax it happens to the best of us. Remember that it takes even the brightest developer a lot of time and practice to begin to master this stuff.&lt;/p&gt;

&lt;p&gt;Finally, I left a ‚Äútry it before you build it‚Äù section next to each project. Each project is hosted for free with GitHub Pages so after you complete your first project, learn how to host it the same way by reading &lt;a href="https://medium.com/@iamcodefoxx/host-your-website-for-free-with-github-pages-in-4-easy-steps-1f468ad0135b"&gt;this&lt;/a&gt; super easy to follow guide.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Hex Colors&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/4nCH8EA55js"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
Make the web a little prettier with this simple hex colors application. This app changes the background color and displays that color‚Äôs hexadecimal code on the screen all on the click of a button.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/Hex-Colors-Gradient/"&gt;Hex Colors Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Data structures&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
Building this project taught me how to use onclick, which is used to attach a function to a button. In this case that function was generating a random hex color and making it the color of the background. Learning this was very useful since nearly every modern web application uses buttons. I have a feeling this is a technique I will use over and over.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Random Quotes&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/LdzcRuMnlvs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
If your in need of a little motivation, I got you covered. In this project, we will build a random quote generator equipped with plenty of motivational quotes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/Random-Quote-Generator/"&gt;Random Quotes Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Objects&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
This application can be created in various ways but it was interesting to see it being solved using an object, an often under-utilized data structure. I also learned a simple algorithm that‚Äôs responsible for generating a random quote each time the user clicks on the button.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Image Carousel&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/-5yNF2J0Coc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
Need an application to display all your cool pictures in? Awesome, in project number three we‚Äôll create an application that allows us to navigate pictures on the click of a button. In programming, we call these photo carousels or image sliders.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/ImageCarousel/"&gt;Image Carousel Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Control structures&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
It was interesting to learn how this sort of project was implemented. At first, we used CSS to block all of the images from the screen. Then we used JavaScript to manipulate the CSS style into revealing one image at a time. Before completing this project I was unsure if it was possible to change the CSS styles directly with JavaScript, it turns out that it is.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Digital Clock&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/QxfQJlEBdNI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
Thinking of purchasing a digital clock? Not anymore, in this project you‚Äôll learn how to build your own.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/DigitalClock/"&gt;Digital Clock Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Data structures&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Objects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
In building this project, I learned that with JavaScript we can create a built in object and retrieve the time from it using built in functions. This is great because it eliminates having to include an additional library, like we do in Python or C++. I also learned about a built in function called setTimeout, which is used to call another function over and over. For this project it was necessary to use setTimeout to ensure that our time was being updated properly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Calculator&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kaq9w0MUInc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
A calculator. No JavaScript beginner project list would be complete without it and we aren‚Äôt making any exceptions here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/Calculator/"&gt;Calculator Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
It was almost unbelievable to see how simple this was to build. Before building this I thought each expression needed to be solved manually with some sort of complex function. It turns out there‚Äôs a built in JavaScript function named eval that takes care of this for us. I really enjoyed building this app and even changed the style of it to give it my own flavor.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Grocery List&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8I5UCTlMa34"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
Hungry? Let‚Äôs go to the grocery store with this grocery list app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/Grocery-List/"&gt;Grocery List Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Control structures&lt;/li&gt;
&lt;li&gt;Event listeners&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
This is a really cool looking app and it‚Äôs the first project on the list where we made use of event listeners. Indeed, we used an event listener to add a new item to the grocery list whenever the user clicked on the ‚Äúenter‚Äù key and another to scratch an item off the list when they clicked on that particular item. It was useful to learn how the function that‚Äôs responsible for deleting all the elements within a div was written. In this case, this function deleted all of the items in our grocery list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Tip Calculator&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/I4tNOpNIU5Q"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
No more looking around the table to see who‚Äôs taking care of the tip with this tip calculator.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/TipCalculator/"&gt;Tip Calculator Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
Developing the function that determines the amount each person will tip was rather easy. Perhaps the greatest challenge here was using CSS to mimic the design of the app. It looks like a rather simple design but it‚Äôs actually a little challenging to do without watching the tutorial first.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. To-do List&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/H5tuwAO-_Kg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
Let‚Äôs make the most of our day with this awesome to-do list app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/To-do-list/"&gt;To-do List Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Control structures&lt;/li&gt;
&lt;li&gt;Data structures&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
The solution to this one was very similar to the grocery list application. I found myself looking back at the code for that one to help me solve this one. One thing that was different, however, was the function to change the background color of each item on the list. I thought that was a very nice addition to the project, as it makes it look a lot nicer. Overall, I would say this was more of a review project but it was still great practice nonetheless.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. Flashcards&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/wtqbOFYivxw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
This is an application that allows you to create flashcards so put away those paper flashcards because there‚Äôs a new boss in town.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/Flashcards/"&gt;Flashcards Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Control structures&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
First off what a great looking application. It can help students study and keep them from spending money on paper flashcards. This is the first project on the list where we used flexbox so it was little challenging at first. Once I got the hang of it, however, it was actually very easy to use and it made the project a lot more dynamic. In particular, I really enjoyed the align-item, flex-wrap, and justify-content options because they made the flashcards responsive.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10. Sticky Notes&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/_B-54mvPup4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
Lets build a sticky notes application. Yes, you may throw all of those paper sticky notes away now.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/Sticky-Notes/"&gt;Sticky Notes Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Event listeners&lt;/li&gt;
&lt;li&gt;Data structures&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
The code for building this project was very similar to the flashcards project but that‚Äôs no problem because the practice was needed. Indeed, if I didn‚Äôt have the code for that project to fall back on, I would of had to watch the flashcards tutorial video again to check if I was doing this one correctly. Of course, this project does have some unique features so it was challenging figuring out how to code those parts. Overall, I learned a great deal from this project since its built using a combination of everything we have learned so far.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;11. Timer&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/_bvutuhUxHY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
Let‚Äôs build a timer. Ready, set, go!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/Timer/"&gt;Timer Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Event listeners&lt;/li&gt;
&lt;li&gt;Objects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
It turns out that building a simple timer is harder than it seems. One would think that using the same setInterval function from the digital clock project would be sufficient to display the correct time. It turns out that technique simply doesn‚Äôt work for this. For this project, we create variables to hold different information about the time, for example, when the time was started, when the time was stopped, and how long the time was stopped. Without these variables and the calculations we perform with them, our digital clock would simply be unable to correctly display the time elapsed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;12. Math 4 Kids&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Uw9wc5wm_mw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
A cool application that teaches kids basic arithmetic operations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/Math4Kids/"&gt;Math 4 kids Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Event listeners&lt;/li&gt;
&lt;li&gt;Control structures&lt;/li&gt;
&lt;li&gt;Data structures&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
In this project, I learned how to switch from one web page to another and how to play a sound file. It turns out both of these tasks are rather simple to do. The hardest part was figuring out how to randomly place the answers in different boxes so the correct answer isn‚Äôt always in the same location. I tried my best to figure it out on my own but ended up watching the tutorial for the solution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;13. Unsplash API ( Image Generator )&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/7QQkl0NLxBQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
Need some images for your new website? Let‚Äôs build an image generator.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/UnsplashAPI/"&gt;Image Generator Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Event listeners&lt;/li&gt;
&lt;li&gt;Control structures&lt;/li&gt;
&lt;li&gt;Promises&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Fetch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
Completing this project taught me how to use JavaScript‚Äôs built in fetch to make API requests. Before building this project, I was completely unaware that the Unsplash API existed. It was interesting to learn that many established companies integrate this API into their website. It‚Äôs also cool to have an image generator for whenever I need a new wallpaper on my desktop.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;14. Quotes API ( Typewriter )&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/3rDEQYg8UWU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
An application that fetches a random quote from an API and displays it on the screen with a typewriter effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/Typewriter/"&gt;Typewriter Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Event listeners&lt;/li&gt;
&lt;li&gt;Control structures&lt;/li&gt;
&lt;li&gt;Promises&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Fetch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
Learning how to write the typewriter script was awesome. I‚Äôve actually seen this effect implemented in video games. Now I can use it when I build my own games. As far as the code is concerned, it was interesting to learn that we don‚Äôt always need CSS to make cool animations. In this project we used the built in JavaScript substring function to make the typewriter effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;15. Square Cards ( Template )&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/MvgiPlVF0Tg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will build&lt;/strong&gt;&lt;br&gt;
A stylish way to display data or simply a square card.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try it before you build it ( Hosted with GitHub Pages)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://iamcodefoxx.github.io/SquareCards/"&gt;Square Cards Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Event listeners&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Takeaway and thoughts&lt;/strong&gt;&lt;br&gt;
In this project I learned how to open up YouTube videos and webpage articles directly from JavaScript. This was a great addition to the arsenal of tools I now possess ( thanks to 15 beginner projects! ) as a web developer.&lt;/p&gt;

&lt;p&gt;Need more JavaScript beginner project ideas? Check out my &lt;a href="https://jsprospect.com/"&gt;jsprospect&lt;/a&gt; website.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>projects</category>
      <category>coding</category>
    </item>
  </channel>
</rss>
