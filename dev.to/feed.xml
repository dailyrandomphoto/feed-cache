<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>CSS 3 VS Tailwind CSS</title>
      <author>Abdur-Rahman</author>
      <pubDate>Sat, 22 Jan 2022 20:58:15 +0000</pubDate>
      <link>https://dev.to/shafspecs/css-3-vs-tailwind-css-25le</link>
      <guid>https://dev.to/shafspecs/css-3-vs-tailwind-css-25le</guid>
      <description>&lt;p&gt;The first point to note before we even start the article is, &lt;em&gt;This post is a crime&lt;/em&gt;. Now, let us get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  &lt;u&gt;üî∞ Intro&lt;/u&gt;:
&lt;/h2&gt;

&lt;p&gt;Welcome to this weeks article, peeps. We would be discussing a topic that should not be discussed üôÑ, CSS vs Tailwind CSS. A lot of confusion (&lt;em&gt;or ignorance, IMO&lt;/em&gt;) has been going on in frontend communities about what to learn, whatnot and "why" Tailwindcss is a better CSS 3 and a potential replacement.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I already learnt HTML&lt;br&gt;
I don't wanna learn CSS because of Tailwind&lt;br&gt;
I don't see the point of learning CSS when a better version (Tailwind) is already there&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;-Anonymous Dev&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tailwind should replace CSS, CSS is just long and boring while Tailwind is interesting and the same thing&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;-Anonymous Dev 2&lt;/p&gt;

&lt;p&gt;These and other similar texts I have come across are numerous (and equally triggering) and common amongst new web developers which shouldn't be. Let me break down what CSS and Tailwind is, and why comparing them is a &lt;em&gt;crime&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%8C%A9-the-calm-before-the-storm"&gt;
  &lt;/a&gt;
  &lt;u&gt;üå© The calm before the storm&lt;/u&gt;:
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  &lt;strong&gt;üöÄ CSS:&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;CSS stands for "Cascading Style Sheet". Cascading style sheets are used to format the styles, format and layout of any document written in a markup language. In simple language, format and layout of Web pages, they can be used to define text styles, table sizes, font styles, and other aspects of Web pages. CSS helps Web developers create a uniform look across several pages of a Web site. CSS is used for formatting other aspects of Web page layout as well. CSS is a programming language.&lt;/p&gt;

&lt;p&gt;CSS came in 3 different versions, CSS level 1 published in 1996, CSS level 2, which was an improvement on level 1, was released in 2004 as a candidate recommendation for W3C and CSS level 3 had its first draft published in 1999!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#%F0%9F%8F%8E-tailwind-css"&gt;
  &lt;/a&gt;
  &lt;strong&gt;üèé Tailwind CSS:&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Tailwind CSS is described as a &lt;strong&gt;utility first CSS framework&lt;/strong&gt;. First released in May 2019, Tailwind has become the most popular CSS framework out there, boasting over 261k developers using it to enhance their design systems.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Utility first frameworks provide low-level utility classes to build out custom designs within your HTML file. Utility classes are named according to their intended purpose, such that they‚Äôre easily understandable to the average person (most times). They tend to have a small, specific purpose and can be used across your app easily.&lt;br&gt;
&lt;code&gt;&amp;lt;div class="text-white"&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%8C%AA-tailwind-vs-css"&gt;
  &lt;/a&gt;
  &lt;u&gt;üå™ Tailwind VS CSS&lt;/u&gt;
&lt;/h2&gt;

&lt;p&gt;The first point to make here, Tailwind cannot be compared to CSS on several bases. &lt;/p&gt;

&lt;p&gt;This post is like a "React vs Javascript" conversation, one is a language, while the other one is a framework. A fundamental understanding, not just in programming, but in other fields as well, is that the core basics are always learnt before moving on to the secondary topics. You always build a foundation before building a skyscraper, no matter the size or height. The same ideology can be applied to this issue as well, Tailwind is a utility class while CSS is a stylesheet language. &lt;/p&gt;

&lt;p&gt;The purpose of having a utility first framework is to allow a developer to develop custom user interfaces faster, and also allow developers to build components easily. &lt;/p&gt;

&lt;p&gt;Another reason is due to the fact that Tailwind is one of tens of CSS utility first frameworks out there. Based on this, what would be the next argument? You should learn how to use those frameworks and forget all about CSS? Tailwind doesn't teach the basics of styling, in my own opinion, it doesn't even teach &lt;strong&gt;anything&lt;/strong&gt;. It delivers functionality to a developer, but without background knowledge of how it works, a developer would never understand the full implementation of that functionality.&lt;/p&gt;

&lt;p&gt;TailwindCSS is very popular and has a lot of advantages for experienced developers who just need utility classes to quickly build beautiful custom designs and move on to other aspects of their application, while it isn't bad (per se) for someone who just finished learning HTML to learn Tailwind, I think it is bad to shun CSS or to try and compare and contrast. Learn the basics in everything you do and it would save you a lot of frustration and agony. TailwindCSS is not and would never be a replacement for CSS.&lt;/p&gt;




&lt;p&gt;Thank y'all for reading, I hope you got an extra point or two from this article to tell those who like to argue without doing any research üòÑ. Your feedback is welcomed. Like always, happy learning and make sure to always have fun in whatever you learn. Like seriously, spice it up! Till next time üëã.&lt;/p&gt;

</description>
      <category>css</category>
      <category>tailwindcss</category>
      <category>webdev</category>
      <category>design</category>
    </item>
    <item>
      <title>AWS Peacock Management Console enables to change console color as you like.</title>
      <author>hiroga</author>
      <pubDate>Sat, 22 Jan 2022 20:23:39 +0000</pubDate>
      <link>https://dev.to/hiroga/aws-peacock-management-console-enables-to-change-console-color-as-you-like-9oa</link>
      <guid>https://dev.to/hiroga/aws-peacock-management-console-enables-to-change-console-color-as-you-like-9oa</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/xhiroga/aws-peacock-management-console"&gt;AWS Peacock Management Console&lt;/a&gt; enables user to change the color of AWS management console as like.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bvDfKvMI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/meqynob4nr6scn1g14h6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bvDfKvMI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/meqynob4nr6scn1g14h6.png" alt="Image description" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The browser extension is now available on both &lt;a href="https://chrome.google.com/webstore/detail/aws-peacock-management-co/bknjjajglapfhbdcfgmhgkgfomkkaidj?utm_source=dev.to"&gt;Chrome Web Store&lt;/a&gt; and &lt;a href="https://addons.mozilla.org/ja/firefox/addon/aws-peacock-management-console/"&gt;mozzila add-on&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this article, the developer of the extension explain the motivation of development and how it works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#motivation-of-development"&gt;
  &lt;/a&gt;
  Motivation of development
&lt;/h2&gt;

&lt;p&gt;My company starts switching from AWS Switch Role to AWS SSO by security reason. However, we worried that AWS SSO does not provide change color feature.&lt;/p&gt;

&lt;p&gt;Changing color is very simple, but efficient technique to avoid wrong operation. For example, make production environment as red helps operator to remind which environment they use.&lt;/p&gt;

&lt;p&gt;AWS SSO has another problem. Account name is not shown in menu button. Not setting account alias is usual if AWS SSO is used. In my opinion, account name instead of account alias should shown in menu button.&lt;/p&gt;

&lt;p&gt;After little inspection, I decide to create browser extension.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h2&gt;

&lt;p&gt;There are 3 steps to change color and show account name.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Getting account name from AWS SSO screen&lt;/li&gt;
&lt;li&gt;Getting account id and region in management console.&lt;/li&gt;
&lt;li&gt;Change color and menu button name in management console.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#1-getting-account-name-from-aws-sso-screen"&gt;
  &lt;/a&gt;
  1. Getting account name from AWS SSO screen
&lt;/h3&gt;

&lt;p&gt;AWS SSO screen has the pair of account id and account name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RUQDiyM9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92w2y73flzjnav2buasq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RUQDiyM9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92w2y73flzjnav2buasq.png" alt="Image description" width="880" height="701"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cookie also has account name, but using it is not enough. When the user switched role beyond account from AWS SSO logged in user, the parameter does not change.&lt;/p&gt;

&lt;p&gt;The account name information is stored in browser extensions storage area. If you want to delete it, just uninstall browser extension.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-getting-account-id-and-region-in-management-console"&gt;
  &lt;/a&gt;
  2. Getting account id and region in management console.
&lt;/h2&gt;

&lt;p&gt;Both account id and region is hidden in management console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// to get account id&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button[data-testid="awsc-copy-accountid"]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)?.&lt;/span&gt;&lt;span class="nx"&gt;previousElementSibling&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;HTMLSpanElement&lt;/span&gt;&lt;span class="p"&gt;)?.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\-&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// to get region&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;region&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;awsc-mezz-region&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)?.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;content&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-change-color-and-menu-button-name-in-management-console"&gt;
  &lt;/a&gt;
  3. Change color and menu button name in management console.
&lt;/h2&gt;

&lt;p&gt;Chage console color is just embedding css, but not simple.&lt;/p&gt;

&lt;p&gt;To ensure visibility, AWS Peacock Management Console can invert the menu icon and string color.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rqDRQbyS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajmlkfnyx2iy1z9l9ts8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rqDRQbyS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajmlkfnyx2iy1z9l9ts8.png" alt="Image description" width="880" height="78"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Extension also detects how user logged in. If AWS SSO is used, menu button name is replaced by account name.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;AWS Peacock Management Console is developed to use AWS SSO convenient as AWS Switch Role.&lt;/p&gt;

&lt;p&gt;The extension is released in &lt;a href="https://chrome.google.com/webstore/detail/aws-peacock-management-co/bknjjajglapfhbdcfgmhgkgfomkkaidj?utm_source=dev.to"&gt;Chrome Web Store&lt;/a&gt; and &lt;a href="https://addons.mozilla.org/ja/firefox/addon/aws-peacock-management-console/"&gt;mozzila add-on&lt;/a&gt;. Source code is also available in &lt;a href="https://github.com/xhiroga/aws-peacock-management-console"&gt;GitHub&lt;/a&gt;. Any issues or contribution is welome!&lt;/p&gt;

&lt;p&gt;If this extension helps to improve your productivity, it is glad for me.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>extension</category>
    </item>
    <item>
      <title>Notification Panel </title>
      <author>Jatin Sharma</author>
      <pubDate>Sat, 22 Jan 2022 19:19:51 +0000</pubDate>
      <link>https://dev.to/j471n/notification-panel-50p6</link>
      <guid>https://dev.to/j471n/notification-panel-50p6</guid>
      <description>&lt;p&gt;In this article, we are going to build a notification panel style with CSS and will toggle the button with JS. It's very simple to do, just follow the below code. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preview"&gt;
  &lt;/a&gt;
  Preview
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wN9IzLyj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/S60LlTA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wN9IzLyj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/S60LlTA.png" alt="preview" width="402" height="268"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Requirements-&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To get all the icons you can Sign Up to the &lt;a href="https://fontawesome.com/"&gt;FontAwesome&lt;/a&gt;. It has various types of icons that are free to use, you can also upgrade to the paid version if needed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-wifi"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm showing just a single icon button (&lt;code&gt;.icon&lt;/code&gt;), but there are more than just one. And you can add as many you want.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--icon-bg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#212121&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--icon-fg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;gray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.icon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;all&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;unset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* removing all the pre defined style */&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.4rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;999px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* making icon center horizontally and vertically */&lt;/span&gt;
  &lt;span class="py"&gt;place-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--icon-bg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--icon-fg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;background&lt;/span&gt; &lt;span class="m"&gt;200ms&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-tap-highlight-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Removing Blue Highlight box */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* To Prevent Hover on smaller Devices */&lt;/span&gt;
&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.icon&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;-5px&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;/* Change the bg and fg */&lt;/span&gt;
&lt;span class="nc"&gt;.active-icon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--icon-bg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--icon-fg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  Javascript
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;icons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.icon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Adding an event listener to the icons to change the active status&lt;/span&gt;
&lt;span class="nx"&gt;icons&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;active-icon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/j471n/embed/QWqeOjg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/j471n/pen/QWqeOjg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--18divsXc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/R1eBvYU.png" alt="codepen" width="300" height="66"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h3&gt;

&lt;p&gt;If you enjoyed this article then don't forget to press ‚ù§Ô∏è. If you have any queries or suggestions don't hesitate to drop them. See you. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#you-might-be-interested-in-"&gt;
  &lt;/a&gt;
  You might be interested in -
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/colorful-rain-with-js-514j"&gt;Colorful Rain with JS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/creative-hover-menu-with-css-513c"&gt;Creative Hover Menu with CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/image-slider-with-vanila-js-22bf"&gt;Image Slider with JS &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>TypeORM Tips (Part 2: Use where() with care)</title>
      <author>Rishit Bansal</author>
      <pubDate>Sat, 22 Jan 2022 19:15:01 +0000</pubDate>
      <link>https://dev.to/rishit/optimizing-typeorm-tips-from-experience-part-2-use-where-with-care-40jp</link>
      <guid>https://dev.to/rishit/optimizing-typeorm-tips-from-experience-part-2-use-where-with-care-40jp</guid>
      <description>&lt;p&gt;Hey everyone! This is the second post in my series on tips while developing with TypeORM, a popular typescript ORM library. In this post I will remark on a common pitfall when using the &lt;code&gt;where()&lt;/code&gt; method in the library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-raw-where-endraw-with-care"&gt;
  &lt;/a&gt;
  Use &lt;code&gt;where()&lt;/code&gt; with care
&lt;/h2&gt;

&lt;p&gt;TypeORM's &lt;code&gt;QueryBuilder&lt;/code&gt; provides a &lt;code&gt;where()&lt;/code&gt; method to add SQL &lt;code&gt;WHERE&lt;/code&gt; clauses in a your queries which allows you to specify a condition to control the records which your query processes. Here's a code snippet illustrating how you can use this method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createQueryBuilder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
             &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
             &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user.id=:userId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;123&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
             &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getOne&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method follows a similar pattern to several other methods of &lt;code&gt;QueryBuilder&lt;/code&gt; which let you successively chain methods. Each method call returns back another &lt;code&gt;QueryBuilder&lt;/code&gt; instance. Here is an example of a chain which performs multiple LEFT JOINS, filters by a where condition and finally limits the query result to just 10 rows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createQueryBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user)
            .leftJoinAndSelect(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;)
            .leftJoinAndSelect(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;comments&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;comments&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;)
            .where(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;minAge&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, { minAge: 18 })
            .limit(10)
            .getMany();

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Neat! Now lets say I want to add another filter on this query to ensure that the user age is also under 65 years old. Naturally, if I were to follow the chain pattern offered by the library I might do the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createQueryBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user)
            .leftJoinAndSelect(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;)
            .leftJoinAndSelect(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;comments&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;comments&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;)
            .where(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;minAge&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, { minAge: 18 })
            .where(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;maxAge&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, { maxAge: 65 })
            .limit(10)
            .getMany();
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;TypeORM successfully executes the above and doesn't give any compile-time/runtime warnings at all. But this piece of code &lt;strong&gt;will not filter out records correctly&lt;/strong&gt;!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-the-problem"&gt;
  &lt;/a&gt;
  What's the problem?
&lt;/h2&gt;

&lt;p&gt;Adding multiple &lt;code&gt;where()&lt;/code&gt; clauses to a query doesn't make sure all of them are satisfied. Rather, TypeORM only picks the last &lt;code&gt;where()&lt;/code&gt; in the chain and uses that as the &lt;strong&gt;sole filter&lt;/strong&gt; for the query. In other words, successive &lt;code&gt;where()&lt;/code&gt; clauses just override previous clauses instead of adding new conditions. Thus the above code snippet will just return users whose age is less than 65 (i.e, The condition user &amp;gt; 18 won't be enforced!).&lt;/p&gt;

&lt;p&gt;This is vague as the library doesn't complain with this usage and can sometimes blindside developers. If a developer didn't test the above code on corner-cases, he/she might unknowingly deploy this on production and may discover the edge case only much later when the bug is reported.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-you-fix-this"&gt;
  &lt;/a&gt;
  How do you fix this?
&lt;/h2&gt;

&lt;p&gt;The correct usage is to use &lt;code&gt;andWhere&lt;/code&gt; or &lt;code&gt;orWhere&lt;/code&gt; depending on if you want to concatenate multiple conditions using &lt;code&gt;AND&lt;/code&gt; or &lt;code&gt;OR&lt;/code&gt;. For example, the above code snippet can be correct to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createQueryBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user)
            .leftJoinAndSelect(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;)
            .leftJoinAndSelect(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;comments&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;comments&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;)
            .where(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;minAge&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, { minAge: 18 })
            .andWhere(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;maxAge&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, { maxAge: 65 })
            .limit(10)
            .getMany();
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also use the &lt;code&gt;Brackets&lt;/code&gt; function to create more complicated queries. Say I wanted to check if the user falls in either of two age ranges (18&amp;lt;age&amp;lt;35 OR 50&amp;lt;age&amp;lt;65), I could do the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createQueryBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user)
            .leftJoinAndSelect(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;)
            .leftJoinAndSelect(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;comments&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;comments&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;)
            .where(new Brackets(qb =&amp;gt; 
                qb.where(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;minAge&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, { minAge: 18 })
                  .andWhere(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;maxAge&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, { maxAge: 35 }))
            .orWhere(new Brackets(qb =&amp;gt; 
                qb.where(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;minAge&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, { minAge: 50 })
                  .andWhere(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;maxAge&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, { maxAge: 65 }))
            .limit(10)
            .getMany();
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that here it was completely safe to use multiple &lt;code&gt;where()&lt;/code&gt; clauses as the other usages actually operate on a seperate &lt;code&gt;QueryBuilder&lt;/code&gt; instance and not the parent one. The basic rule to follow is to avoid multiple &lt;code&gt;where()&lt;/code&gt; method calls on the same &lt;code&gt;QueryBuilder&lt;/code&gt; instance.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>database</category>
      <category>node</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Ruby on Rails event invitation add to calendar using icalendar gem</title>
      <author>Code Salley</author>
      <pubDate>Sat, 22 Jan 2022 19:13:17 +0000</pubDate>
      <link>https://dev.to/codesalley/ruby-on-rails-event-invitation-add-to-calendar-using-icalendar-gem-42jf</link>
      <guid>https://dev.to/codesalley/ruby-on-rails-event-invitation-add-to-calendar-using-icalendar-gem-42jf</guid>
      <description>&lt;p&gt;In rails sending an event invitation is simple, But getting an invite recognized by Gmail for easy "add to calendar" feature is tricky. After experimenting with it for a while, this simple config does the trick.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'icalendar/tzinfo'&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EventMailer&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationMailer&lt;/span&gt;
 &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_invitation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# initialize a new icalendar class&lt;/span&gt;
  &lt;span class="n"&gt;ical&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Icalendar&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Calendar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;

  &lt;span class="c1"&gt;# Define default time&lt;/span&gt;
  &lt;span class="n"&gt;time_zone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'UTC'&lt;/span&gt;
  &lt;span class="n"&gt;cal_tz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;TZInfo&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Timezone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt; &lt;span class="n"&gt;time_zone&lt;/span&gt;

  &lt;span class="c1"&gt;# add timezone to icalendar &lt;/span&gt;
  &lt;span class="n"&gt;ical&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add_timezone&lt;/span&gt; &lt;span class="n"&gt;cal_tz&lt;/span&gt;

  &lt;span class="c1"&gt;# new icalendar event &lt;/span&gt;
  &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Icalendar&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;

  &lt;span class="c1"&gt;# event start date&lt;/span&gt;
  &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dtstart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Icalendar&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Values&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="n"&gt;_event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;start_time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'tzid'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cal_tz&lt;/span&gt;

  &lt;span class="c1"&gt;# event end date&lt;/span&gt;
  &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dtend&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Icalendar&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Values&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="n"&gt;_event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;end_time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'tzid'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cal_tz&lt;/span&gt;


  &lt;span class="c1"&gt;# event organizer&lt;/span&gt;
  &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;organizer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Icalendar&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Values&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CalAddress&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"mailto:"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# event created date&lt;/span&gt;
  &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;created&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;

  &lt;span class="c1"&gt;# event location&lt;/span&gt;
  &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;_event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;venue&lt;/span&gt;

  &lt;span class="c1"&gt;# if there's an external link e.g, google meet&lt;/span&gt;
  &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;uid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;meeting_link&lt;/span&gt;


  &lt;span class="c1"&gt;# event title&lt;/span&gt;
  &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;summary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;title&lt;/span&gt;


  &lt;span class="c1"&gt;# event description&lt;/span&gt;
  &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;description&lt;/span&gt;


  &lt;span class="c1"&gt;# attach the configured event to icalendar class&lt;/span&gt;
  &lt;span class="n"&gt;ical&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


  &lt;span class="c1"&gt;# protocol&lt;/span&gt;
  &lt;span class="n"&gt;ical&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;append_custom_property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"METHOD"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"REQUEST"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# this add's an attachment name `event.ics`, &lt;/span&gt;
  &lt;span class="c1"&gt;# when clicked, the event gets added to the calendar. &lt;/span&gt;

  &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;attachments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'event.ics'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;mime_type: &lt;/span&gt;&lt;span class="s1"&gt;'application/ics'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;content: &lt;/span&gt;&lt;span class="n"&gt;ical&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_ical&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;


  &lt;span class="c1"&gt;# send mail&lt;/span&gt;
  &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;to: &lt;/span&gt;&lt;span class="n"&gt;_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;subject:  &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;_event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; - &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;_event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;summary&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;enjoy!&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>calendar</category>
      <category>coding</category>
    </item>
    <item>
      <title>React 18 Suspense minimal example </title>
      <author>vaukalak</author>
      <pubDate>Sat, 22 Jan 2022 19:07:22 +0000</pubDate>
      <link>https://dev.to/vaukalak/react-18-suspense-minimal-example-3j0k</link>
      <guid>https://dev.to/vaukalak/react-18-suspense-minimal-example-3j0k</guid>
      <description>&lt;p&gt;In the current version of React (&lt;code&gt;17.0.2&lt;/code&gt; at the day of this article creation) &lt;code&gt;Suspense&lt;/code&gt; is a component, that allows developers to lazy-load application parts. It accepts &lt;code&gt;fallback&lt;/code&gt; property, with content to display, while the child component is lazy-loading.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SomePage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lazy&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./modules/somepage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Suspense&lt;/span&gt; &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Loading...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SomePage&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Suspense&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However from React 18 it will be possible to use &lt;code&gt;Suspense&lt;/code&gt; for data fetching. This means, that &lt;code&gt;fallback&lt;/code&gt; will be displayed until component will fetch all the data needed. Or in general all events that component expect will occur. Let say we want to just display placeholder for 2 seconds:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;useTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Component loaded&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Suspense&lt;/span&gt; &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Loading...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Suspense&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you could guess, &lt;code&gt;Loading...&lt;/code&gt; will be displayed for 2 seconds and &lt;code&gt;Component loaded&lt;/code&gt; afterwards.&lt;br&gt;
However when I first saw the code above, I didn't understand &lt;em&gt;HOW&lt;/em&gt; did that happen.. What is that magic mechanism in the &lt;code&gt;useTimeout&lt;/code&gt; hook? In short it has to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stop component code execution.&lt;/li&gt;
&lt;li&gt;Let &lt;code&gt;Suspense&lt;/code&gt; know that the component isn't yet ready&lt;/li&gt;
&lt;li&gt;Notify &lt;code&gt;Suspence&lt;/code&gt; know when it should re-attempt with rendering component.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To stop code execution you need use &lt;code&gt;throw&lt;/code&gt; statement. In order to make &lt;code&gt;Suspense&lt;/code&gt; know it's expected, the value thrown need to be a &lt;code&gt;Promise&lt;/code&gt;. &lt;code&gt;Suspense&lt;/code&gt; will catch this promise and subscribe to it, to re-attempt rendering.&lt;br&gt;
Please note: the code bellow is just for a demo purpose:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fullfilled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useTimeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// check if timeout already occurred.&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;fullfilled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// if promise doesn't exist create and throw it.&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// on next attempt consider timeout completed.&lt;/span&gt;
        &lt;span class="nx"&gt;fullfilled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// resolve promise (will ask react to re-render).&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(Confused about &lt;code&gt;||=&lt;/code&gt; ? Check &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment"&gt;this doc&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It turns out that suspense uses quite simple mechanisms, but there's a hard part. You might ask why &lt;code&gt;fullfilled&lt;/code&gt; and &lt;code&gt;promise&lt;/code&gt; couldn't be stored in a ref, so the hook would be reusable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fullfilled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It turns out, that while component is not loaded, hooks can't be really used. Component will be unmounted / mounted on every render attempt before the render will complete without throwing promises. Hence to figure out, if this component has actually started data loading process, we should rely on a globally available cache. (In our simplified case it's just &lt;code&gt;fullfilled&lt;/code&gt; variable). Of course in a real-world example such simple approach wouldn't work (this hook works only one time).&lt;/p&gt;

&lt;p&gt;This is why it's advised to use good libraries that supports suspense (like &lt;a href="https://swr.vercel.app/"&gt;swr&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/suspense-timeout-example-4g7rh"&gt;Full code&lt;/a&gt; of the example above.&lt;/p&gt;

&lt;p&gt;üëã&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>redux</category>
      <category>swr</category>
    </item>
    <item>
      <title>Some Best Practices of Javascript for clean and better code quality...</title>
      <author>Vinay Dagar</author>
      <pubDate>Sat, 22 Jan 2022 19:01:49 +0000</pubDate>
      <link>https://dev.to/_vinay_dagar/some-best-practices-of-javascript-for-clean-and-better-code-quality-2cd3</link>
      <guid>https://dev.to/_vinay_dagar/some-best-practices-of-javascript-for-clean-and-better-code-quality-2cd3</guid>
      <description>&lt;p&gt;JavaScript is a very popular and widely used programming language. Initially it was developed only as a scripting language, but now it is doing way more than that. It's community is growing so is the Javascript. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As the new features is being added frequenty, it is hard to write optimized and clean code, mostly happens when you are a beginner.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#today-im-going-to-show-you-some-of-the-best-practice-that-you-can-follow-to-write-optimized-and-clean-code"&gt;
  &lt;/a&gt;
  Today I'm going to show you some of the best practice that you can follow to write optimized and clean code.
&lt;/h2&gt;

&lt;p&gt;So with out any further due, let's get started&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Chain array methods&lt;/strong&gt;
Yes, you read it correct, the thing that we use more often is Array Prototype methods like, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;find&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;basic scenario will be mapping through the filtered list, instead of storing the filter result in a varibale and then mapping on, we can directly chain the methods.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const userList = [
  {
    name: 'Jhon Doe',
    age: 26,
    occupation: 'Software Engineer',
  },
  {
    name: 'Kapil',
    age: 19,
    occupation: 'Student',
  },
  {
    name: 'Matt',
    age: 32,
    occupation: 'Software Architect',
  },
];


const mappedUsers = userList.filter(user =&amp;gt; user.age &amp;gt; 26)
                    .map(user =&amp;gt; ({ isVerified: true, ...user}))
                    .reduce(...)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2.&lt;br&gt;
&lt;strong&gt;Logical assignment&lt;/strong&gt;&lt;br&gt;
There might be hte scenario where we need to assign something when any given variable is null or undefined, normal way using &lt;code&gt;if&lt;/code&gt; would be like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let userProfile;
let value = {
   name: 'someValue',
};
if(userProfile === null || userProfile === undefined) {
   userProfile = value
}

 //   OR
if(!userProfile) {
   userProfile = value
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we can simply do assign using logical or nullish collision operator, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;userProfile ??= value;

// OR

userProfile &amp;amp;&amp;amp;= value
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3.&lt;br&gt;
&lt;strong&gt;Parallel API calls&lt;/strong&gt;&lt;br&gt;
While building any Application, mostly in frontend, sometimes we might need to call several API simultaneously, if the APIs are not dependent on each other, we can send a paraller request using &lt;code&gt;Promise&lt;/code&gt; in Javascript&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const getData = async () =&amp;gt; {
  try {
    const first = await fetch();
    const second = await fetch();
    const third = await fetch();
    const fourth = await fetch();
  } catch (err) {
    // ...
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of this we can send the parllel call,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const getData = async () =&amp;gt; {
  try {
    const [ first, second, thrird, fourth] = await Promise.all([
      fetch(),
      fetch(),
      fetch(),
      fetch(),
    ])
  } catch (err) {
    // ...
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;we can also use &lt;code&gt;Promise.allSettled()&lt;/code&gt; instead of &lt;code&gt;Promise.all()&lt;/code&gt; based &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;4.&lt;br&gt;
&lt;strong&gt;Using Objects instead of Switch for event binding&lt;/strong&gt;&lt;br&gt;
In most of the applications that we develop, there are some scenario where we need to handle events, and mostly we do that using switch statement or if...else,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const handleEvent = (event) =&amp;gt; {
  switch(event) {
    case 'success': {
      // handleSuccess
    }
    case 'error': {
      // handle error
    }
    case 'pending': {
      // handle pending 
    }
    default:  {
      // handle default
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;instead of doing this, we can simply create the object with event as &lt;code&gt;key&lt;/code&gt; and function as its &lt;code&gt;value&lt;/code&gt; something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const eventHandler = {
  success: handleSuccess(),
  error: handleError(),
  pending: handlePending()
}

const handleEvent = (event) =&amp;gt; {
  eventHandler[event];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;here we need to use bracket notation to call the appropriate functions out of object.&lt;/p&gt;

&lt;p&gt;5.&lt;br&gt;
&lt;strong&gt;Doing one thing in a function&lt;/strong&gt;&lt;br&gt;
So, the basic behaviour of a function is to perform a particular task, and whatever we write in it, will be executed.&lt;/p&gt;

&lt;p&gt;making a single function perform every thing will make the code hard to read, lenghty, and hard to debug.&lt;br&gt;
Dividing the single functionality inside a function and calling the rest one after or inside the other fucntion, will help for better understanding of code and make our code easy to debug&lt;/p&gt;

&lt;p&gt;the best scenario for this will be &lt;code&gt;user registeration&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const signupUser = () =&amp;gt; {

  // checking for existing user

  // password encryption

  // creting new user
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;so doing all of this stuff in one function make it more clumsy, what we can do instead is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const signupUser = () =&amp;gt; {

  const isUserAlreayExist = checkExistingUser(/* username */);

  // handle if user already Exist 

  const hashedPAssword = encryptPAssword(salt, password);

  createUserAndReturn(/* user data */)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;6.&lt;br&gt;
&lt;strong&gt;Using &lt;code&gt;console.trace()&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
To check some result and or sometime to debug small things, we use &lt;code&gt;console.log()&lt;/code&gt; right?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;which just give us the message that we wrote.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;but some times in bigger applications, we can have log statements, and keeping track of the log statement, which log represents which part might get a little hard, so to prevent that we can use &lt;code&gt;console.trace()&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The trace() method displays a trace that show how the code ended up at a certain point.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It returns some additional information, apart from the message that we wrote, the information includes from where this statement has been logged, from which function and line number.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Using Logpoint in vscode&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While debugging the application we add breakpoints to stop the execution of the program at a certain point, but sometime we just wnat to see if the particular code got executed or not, for for that we can add &lt;code&gt;Logpoint&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;the result will show the output in the console as it has been logged while going through that point, in this way we don't event have to worry about the console statements in production.&lt;/p&gt;

&lt;p&gt;We can add the logpoint by &lt;code&gt;right clicking&lt;/code&gt; the line number in the &lt;code&gt;vscode&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U44_YJk5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yiuef80lzxpl53355bbn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U44_YJk5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yiuef80lzxpl53355bbn.png" alt="vscode logpoint image" width="880" height="282"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#some-honourable-mentions"&gt;
  &lt;/a&gt;
  Some honourable mentions
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;async / await&lt;/code&gt; instead of promise callback chain&lt;/li&gt;
&lt;li&gt;Use Typescript for larger applications.&lt;/li&gt;
&lt;li&gt;Use comments in the code where ever necessary.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;destructing&lt;/code&gt; instead of chaining &lt;code&gt;object&lt;/code&gt; or using &lt;code&gt;indexe&lt;/code&gt; in array&lt;/li&gt;
&lt;li&gt;Use less third part library (only use when necessary).&lt;/li&gt;
&lt;li&gt;Read...&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;These are some of the best practices that I follow to make my code clean, neat, readable and easy to debug. The key for clean code is an ongoing journey as the Javascript is contionusly evolving language.&lt;br&gt;
I hope this might help you in your coding journey.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>node</category>
      <category>cleancode</category>
    </item>
    <item>
      <title>Loopple - Change your dashboard colors</title>
      <author>rarestoma</author>
      <pubDate>Sat, 22 Jan 2022 18:53:32 +0000</pubDate>
      <link>https://dev.to/rarestoma/loopple-change-your-dashboard-colors-1f3i</link>
      <guid>https://dev.to/rarestoma/loopple-change-your-dashboard-colors-1f3i</guid>
      <description>&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;Loopple is a Low Code Dashboard Builder that aims to help developers to speed up their development process.&lt;/p&gt;

&lt;p&gt;Today we just published the newest release that updates our dashboard with the theme color editor.&lt;/p&gt;

&lt;p&gt;Currently, you can edit the following colors: Body Color, Primary Color, Info Color, Success Color, Warning Color and Danger Color.&lt;/p&gt;

&lt;p&gt;You can also see how it works &lt;a href="https://www.youtube.com/watch?v=2jYJsCvMN0Q"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Loopple - &lt;a href="https://www.loopple.com/"&gt;Loopple website&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Github - &lt;a href="https://github.com/Loopple/loopple"&gt;Loopple Github Repo&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Discord - &lt;a href="https://bit.ly/3FTaFEP"&gt;Loopple Discord&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More colors to the color editor and features will be available soon!&lt;/p&gt;

&lt;p&gt;Please let me know what you think.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

</description>
      <category>html</category>
      <category>developers</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Content Projection in Angular</title>
      <author>Anubhab Mukherjee</author>
      <pubDate>Sat, 22 Jan 2022 18:29:37 +0000</pubDate>
      <link>https://dev.to/this-is-angular/content-projection-in-angular-1n9b</link>
      <guid>https://dev.to/this-is-angular/content-projection-in-angular-1n9b</guid>
      <description>&lt;p&gt;Today we will learn about a very important concept called &lt;code&gt;Content Projection&lt;/code&gt;. It's very useful concept and helps to make an application dynamic.&lt;/p&gt;

&lt;p&gt;Let's dive in by creating our playground first -&lt;br&gt;
Lets create a component called &lt;code&gt;my-cards&lt;/code&gt; and use it in the &lt;code&gt;app.component.html&lt;/code&gt; file (Hint üòâ using the selector)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--leUvAQ1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p3svdhrx92pevx5y7051.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--leUvAQ1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p3svdhrx92pevx5y7051.PNG" alt="Image description" width="616" height="144"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Now lets try out a simple exercise. Add the below code in the &lt;code&gt;app.component.html&lt;/code&gt; file -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;app-my-cards&amp;gt;
    &amp;lt;span&amp;gt;
        This is some content in between the card selector!
    &amp;lt;/span&amp;gt;
&amp;lt;/app-my-cards&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you open the browser to check the output you will see the text you typed in between the selector i.e. &lt;code&gt;This is some content in between the card selector!&lt;/code&gt; is not visible/ not getting displayed.&lt;/p&gt;

&lt;p&gt;The output -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qHG3dAt_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n881ut4xqdv6lzoh70xf.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qHG3dAt_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n881ut4xqdv6lzoh70xf.PNG" alt="Image description" width="331" height="152"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So the span element which is the child of the selector is the &lt;code&gt;content&lt;/code&gt; and it's also the child element. So if we combine both the term we get &lt;code&gt;content child&lt;/code&gt;. The span element is the content child.&lt;/p&gt;

&lt;p&gt;Now as we saw earlier in the demo the content child is not getting displayed. So in order to display the content child we need to project it. Or in simple term we need to have a special placeholder (in the child component - &lt;code&gt;MyCardsComponent&lt;/code&gt;) which will catch/ receive the value and display it.&lt;/p&gt;

&lt;p&gt;This special placeholder is &lt;code&gt;ng-content&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So now let's update the &lt;code&gt;MyCardsComponent&lt;/code&gt;'s template to have-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;ng-content&amp;gt;&amp;lt;/ng-content&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and now you will see the below output -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rRcIVzr6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vxij4i958mq7tryee6x.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rRcIVzr6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vxij4i958mq7tryee6x.PNG" alt="Image description" width="399" height="175"&gt;&lt;/a&gt;&lt;br&gt;
So what exactly happens ?&lt;br&gt;
The child content here in this case the &lt;code&gt;span&lt;/code&gt; gets projected in the &lt;code&gt;ng-content&lt;/code&gt;. So &lt;code&gt;ng-content&lt;/code&gt; acts as a placeholder.&lt;/p&gt;

&lt;p&gt;Now what if you need multiple placeholders? For example you will pass a content that would sit on the card-header another content as the card-body and another in the card-footer???&lt;br&gt;
For that we need to use something called &lt;code&gt;select&lt;/code&gt; - It is very powerful.&lt;br&gt;
The select can accept a &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;attribute&lt;/code&gt; or an &lt;code&gt;element&lt;/code&gt;. Confused?&lt;/p&gt;

&lt;p&gt;Lets see a quick example. Paste in the below code in the &lt;code&gt;app.component.html&lt;/code&gt; file -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;app-my-cards&amp;gt;
    &amp;lt;header&amp;gt;Card Header&amp;lt;/header&amp;gt;
    &amp;lt;span id='card-sub-header'&amp;gt;Card Sub Header&amp;lt;/span&amp;gt;
    &amp;lt;div class="card-body"&amp;gt;
        This is a card Body!!!
    &amp;lt;/div&amp;gt;
    &amp;lt;footer title="card-footer"&amp;gt;
        Card Footer.
    &amp;lt;/footer&amp;gt;
&amp;lt;/app-my-cards&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in the &lt;code&gt;my-cards.component.html&lt;/code&gt; file i.e. &lt;code&gt;MyCardsComponent&lt;/code&gt;'s template file paste in the below code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;ng-content select='header'&amp;gt;&amp;lt;/ng-content&amp;gt;
&amp;lt;ng-content select='#card-sub-header'&amp;gt;&amp;lt;/ng-content&amp;gt;
&amp;lt;ng-content select='.card-body'&amp;gt;&amp;lt;/ng-content&amp;gt;
&amp;lt;ng-content select='[title]'&amp;gt;&amp;lt;/ng-content&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bVAHlOIk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g9rzv54uxcja2qzrfae5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bVAHlOIk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g9rzv54uxcja2qzrfae5.PNG" alt="Image description" width="328" height="175"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So the 1Ô∏è‚É£ first &lt;code&gt;ng-content&lt;/code&gt; has a selector which matches an element/ tag - the header tag&lt;br&gt;
2Ô∏è‚É£ Second &lt;code&gt;ng-content&lt;/code&gt; selector matches an id &lt;code&gt;card-sub-header&lt;/code&gt;&lt;br&gt;
3Ô∏è‚É£ Third &lt;code&gt;ng-content&lt;/code&gt; selector matches a class &lt;code&gt;card-body&lt;/code&gt;&lt;br&gt;
4Ô∏è‚É£ Fourth &lt;code&gt;ng-content&lt;/code&gt; selector matches an attribute &lt;code&gt;title&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There can also be a scenario where instead of using header tag (in the above example) you need to use a div tag like below -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;app-my-cards&amp;gt;
    &amp;lt;div &amp;gt;Card Header&amp;lt;/div&amp;gt;
    &amp;lt;span id='card-sub-header'&amp;gt;Card Sub Header&amp;lt;/span&amp;gt;
    &amp;lt;div class="card-body"&amp;gt;
        This is a card Body!!!
    &amp;lt;/div&amp;gt;
    &amp;lt;footer title="card-footer"&amp;gt;
        Card Footer.
    &amp;lt;/footer&amp;gt;
&amp;lt;/app-my-cards&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then the header will not work right? And suppose you don't have the option to change the card component also. Then what's the solution ???&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ngProjectAs&lt;/code&gt; comes to the rescue!!!&lt;/p&gt;

&lt;p&gt;Paste in the below code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;app-my-cards&amp;gt;
    &amp;lt;div ngProjectAs='header'&amp;gt;Card Header&amp;lt;/div&amp;gt;
    &amp;lt;span id='card-sub-header'&amp;gt;Card Sub Header&amp;lt;/span&amp;gt;
    &amp;lt;div class="card-body"&amp;gt;
        This is a card Body!!!
    &amp;lt;/div&amp;gt;
    &amp;lt;footer title="card-footer"&amp;gt;
        Card Footer.
    &amp;lt;/footer&amp;gt;
&amp;lt;/app-my-cards&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here you can see the first line is the &lt;code&gt;div&lt;/code&gt; tag. And we have used &lt;code&gt;ngProjectAs='header'&lt;/code&gt;. In this case Angular will consider the selector as &lt;code&gt;header&lt;/code&gt; and the output will work as it is.&lt;/p&gt;

&lt;p&gt;That's all for now.&lt;/p&gt;

&lt;p&gt;Hope you enjoyed reading the post&lt;/p&gt;

&lt;p&gt;If you liked it please &lt;em&gt;like&lt;/em&gt; ‚ù§Ô∏è &lt;em&gt;share&lt;/em&gt; üíû &lt;em&gt;comment&lt;/em&gt; üß°.&lt;/p&gt;

&lt;p&gt;Coming up &lt;code&gt;ContentChild&lt;/code&gt; and &lt;code&gt;ContentChildren&lt;/code&gt;.&lt;br&gt;
So stay tuned.&lt;/p&gt;

&lt;p&gt;I will be &lt;a href="https://twitter.com/Anubhab_0905"&gt;tweeting&lt;/a&gt; more on &lt;code&gt;Angular&lt;/code&gt; &lt;code&gt;JavaScript&lt;/code&gt; &lt;code&gt;TypeScript&lt;/code&gt; &lt;code&gt;CSS&lt;/code&gt; tips and tricks.&lt;/p&gt;

&lt;p&gt;So hope to see you there too üòÉ&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Cheers&lt;/em&gt;&lt;/strong&gt; üçª &lt;br&gt;
&lt;em&gt;Happy Coding&lt;/em&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>beginners</category>
      <category>typescript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>A Step by Step Guide: The Writing Process to Use to Write Good Technical Articles</title>
      <author>Bonnie</author>
      <pubDate>Sat, 22 Jan 2022 18:14:31 +0000</pubDate>
      <link>https://dev.to/the_greatbonnie/a-step-by-step-guide-the-writing-process-to-use-to-write-good-technical-articles-703</link>
      <guid>https://dev.to/the_greatbonnie/a-step-by-step-guide-the-writing-process-to-use-to-write-good-technical-articles-703</guid>
      <description>&lt;p&gt;A good technical writer is someone who can break down complex concepts into simple and straightforward language that is easy to understand.&lt;/p&gt;

&lt;p&gt;To be able to do that, you need a good writing process. A good writing process will help you to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Understand the topic you are writing about.&lt;/li&gt;
&lt;li&gt;Know your audience.&lt;/li&gt;
&lt;li&gt;Know how to structure an article.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This article will show you the writing process you can use to write good technical articles that clients will like and make them come for more.&lt;/p&gt;

&lt;p&gt;Here are the steps we will be covering:&lt;/p&gt;

&lt;p&gt;Step 1: Brainstorming&lt;br&gt;
Step 2: Preparing to write&lt;br&gt;
Step 3: Writing your first draft.&lt;br&gt;
Step 4: Editing and Revising.&lt;br&gt;
Step 5: Proofreading your final draft.&lt;br&gt;
Step 6: Publishing your finished work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-brainstorming"&gt;
  &lt;/a&gt;
  Step 1: Brainstorming
&lt;/h2&gt;

&lt;p&gt;Brainstorming is where you google the topic you will be writing about. Googling will help you understand and get a firmer grasp of the topic.&lt;/p&gt;

&lt;p&gt;Brainstorming will be very important, especially when you start getting Technical Writing work from clients. Sometimes, a client will ask you to write about a topic you are unfamiliar with.&lt;/p&gt;

&lt;p&gt;Being unfamiliar with a particular topic can be pretty intimidating and overwhelming. When you get yourself in such a situation, you only need two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Knowing how to google.&lt;/li&gt;
&lt;li&gt;Willingness to learn&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, in my first paid Technical Article, I was asked by a client to write about ‚ÄòHow to get Stripe payment data, load the data into a database, and visualize the data using graphs or charts.‚Äô&lt;/p&gt;

&lt;p&gt;I didn‚Äôt know how to do that, but I figured things out since I knew how to google, and I was willing to learn.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-preparing-to-write"&gt;
  &lt;/a&gt;
  Step 2: Preparing to write
&lt;/h2&gt;

&lt;p&gt;Preparing to write is where you put together all the information and ideas you collected during the brainstorming stage. You then use that information to develop the structure or outline of the article.&lt;/p&gt;

&lt;p&gt;An outline, in simple terms, is basically a skeleton of a finished piece of writing that maps the topics you will cover in an article. An outline provides a structure that helps ensure your ideas flow logically and clearly.&lt;/p&gt;

&lt;p&gt;Here is what an outline of an article looks like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Title&lt;/li&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Body&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A title should be a headline that demands attention and should have keyword combinations that reflect what the article is about.&lt;/p&gt;

&lt;p&gt;The introduction should describe the problem and the solutions the article will cover. Ensure that the introduction lets the reader know what the article is about.&lt;/p&gt;

&lt;p&gt;In the body part of the article, describe the problem and the solution in detail. Try to tell a story. The story should keep the reader engaged at every step. Make a list of your main points. Then progress from one point to another logically to lead to a conclusion.&lt;/p&gt;

&lt;p&gt;The conclusion should essentially include a summary of all the main points mentioned in the body.&lt;/p&gt;

&lt;p&gt;NB: Preparing to write is also the coding stage. Most of the technical articles you will write will need you to work on a project then write about the process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-writing-your-first-draft"&gt;
  &lt;/a&gt;
  Step 3: Writing your first draft
&lt;/h2&gt;

&lt;p&gt;Writing your first draft is when you write the words on the page. Here you should focus only on writing and not on grammar or writing a good piece ready to publish.&lt;/p&gt;

&lt;p&gt;You will do that during the editing stage.&lt;/p&gt;

&lt;p&gt;Use the outline you created in the preparing to write stage to build your draft, sentence by sentence and paragraph.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-editing-and-revising"&gt;
  &lt;/a&gt;
  Step 4: Editing and revising
&lt;/h2&gt;

&lt;p&gt;Editing and revising is the stage where you shape the completed rough draft into a final draft. Make sure that you take a break between writing and editing. Taking a break will enable you to view your work with fresh eyes.&lt;/p&gt;

&lt;p&gt;One way to quickly find areas to make your writing stronger is to read it aloud.&lt;/p&gt;

&lt;p&gt;By listening to the rhythm of your writing, you can hear:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Words that feel out of place,&lt;/li&gt;
&lt;li&gt;Awkward transitions,&lt;/li&gt;
&lt;li&gt;Redundant phrases&lt;/li&gt;
&lt;li&gt;Inconsistent tenses and tone&lt;/li&gt;
&lt;li&gt;Points where you need more details.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One tool that will come in handy in this stage is Grammarly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-proofreading-your-final-draft"&gt;
  &lt;/a&gt;
  Step 5: Proofreading your final draft
&lt;/h2&gt;

&lt;p&gt;Proofreading your final draft is the stage where you have finished your writing, but you are not quite ready to publish it or hand it to your client.&lt;/p&gt;

&lt;p&gt;Here you go through your article to catch:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Any spelling mistakes&lt;/li&gt;
&lt;li&gt;Grammar errors&lt;/li&gt;
&lt;li&gt;Typos&lt;/li&gt;
&lt;li&gt;Formatting errors&lt;/li&gt;
&lt;li&gt;Incorrect structure or syntax&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#step-6-publishing-your-finished-work"&gt;
  &lt;/a&gt;
  Step 6: Publishing your finished work
&lt;/h2&gt;

&lt;p&gt;Publishing your finished work is the stage where you hand your work to the client or publish the work on your blog or on any blogging platforms like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dev To&lt;/li&gt;
&lt;li&gt;Hash node&lt;/li&gt;
&lt;li&gt;Medium&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Writing an excellent technical article that solves a problem for the reader is all about using the proper writing process.&lt;/p&gt;

&lt;p&gt;If you have any questions concerning Technical Writing, feel free to reach out to me, and I will be more than willing to help.&lt;/p&gt;

</description>
      <category>writing</category>
      <category>programming</category>
      <category>webdev</category>
      <category>career</category>
    </item>
    <item>
      <title>How To Stay Curious as a Coder</title>
      <author>David Amos</author>
      <pubDate>Sat, 22 Jan 2022 18:04:00 +0000</pubDate>
      <link>https://dev.to/somacdivad/how-to-stay-curious-as-a-coder-510b</link>
      <guid>https://dev.to/somacdivad/how-to-stay-curious-as-a-coder-510b</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1TYEa2aS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54kgofj2tn3pbi4jyrlk.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1TYEa2aS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54kgofj2tn3pbi4jyrlk.jpeg" alt="Man holding a torch looking down a dark tunnel" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover photo by &lt;a href="https://unsplash.com/@wilstewart3?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Wil Stewart&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/curious?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;It's easy to be complacent about curiosity. Our lives are filled with stress. We craft routines around that stress. Sometimes those routines turn life into an inescapable turnstile. It isn't easy to be curious when your life depends on keeping the wheel turning.&lt;/p&gt;

&lt;p&gt;I spend a lot of my time solving problems with Python. Problem-solving demands creativity. Curiosity breeds creativity. The demand for creative software solutions is constant, but curiosity comes and goes.&lt;/p&gt;

&lt;p&gt;When your curiosity wanes, don't resign yourself to the idea that some people are naturally more curious about things and that perhaps you're not one of them. Curiosity is not an immutable trait. You can learn how to be more curious.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-cultivate-curiosity"&gt;
  &lt;/a&gt;
  How To Cultivate Curiosity
&lt;/h2&gt;

&lt;p&gt;Curiosity is contagious. Follow curious people, and you'll likely catch the bug. Once your mind is infected with a framework for curiosity, you instinctively apply that framework to everything.&lt;/p&gt;

&lt;p&gt;Mystery is the key to curiosity. Embrace feeling puzzled because puzzles are everywhere. Question absolutes and axioms, even the ones in this article. Devise experiments to test premises.&lt;/p&gt;

&lt;p&gt;Learn to recognize when your curiosity ebbs. I know that my curiosity is critically low whenever I stop reading consistently. I'm not talking about reading code‚Ää-‚ÄäI mean reading anything. It's a case of intellectual malnutrition, and the cure is a content-rich diet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#consume-content-voraciously"&gt;
  &lt;/a&gt;
  Consume Content Voraciously
&lt;/h3&gt;

&lt;p&gt;Get into a habit of passive consumption. Listen to podcasts during your commute or household chores. Watch documentaries during your lunch break. If your mind wanders, let it. Don't focus on one topic. A diverse content diet is more likely to reveal a mystery that stirs you.&lt;/p&gt;

&lt;p&gt;Actively consume content about mysteries that particularly draw your attention. Read long-form articles and books. Listen intently and take notes. But refrain from forcing yourself into active consumption. Forced activity stifles joy.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ü¶Å &lt;strong&gt;Key Takeaway:&lt;/strong&gt; Consume content the same way a lion consumes prey. Spend most of your time passively observing the stream of information before you. When hunger strikes, ferociously stalk your curiosity.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#dive-deeply-into-things-that-interest-you-right%C2%A0now"&gt;
  &lt;/a&gt;
  Dive Deeply Into Things That Interest You Right¬†Now
&lt;/h3&gt;

&lt;p&gt;Unlike diets that nourish our bodies, a curiosity-inducing content diet has no plan and no schedule. Explore topics haphazardly, but also explore them deeply. Don't delay your curiosity. Pursue topics that interest you &lt;em&gt;right now&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Get lost in rabbit holes, but avoid ones generated algorithmically. Algorithms have a knack for surfacing similar content. Actively search for answers to questions that arise.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üí¶ &lt;strong&gt;Key takeaway:&lt;/strong&gt; Curiosity moves like water pulled upwards through a tree's xylem by capillary action. Surrender to the twists and turns. Allow the final destination to be a mystery.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#embrace-learning-as-a-conversation"&gt;
  &lt;/a&gt;
  Embrace Learning as a Conversation
&lt;/h3&gt;

&lt;p&gt;Curiosity is a tug-of-war between selfishness and humility. You're compelled by a primal urge to know more. Yet learning requires you to expose a gap in your understanding, to recognize that there is still more to be known.&lt;/p&gt;

&lt;p&gt;Learning is a conversation. Participate in that conversation. Ask questions. A good question synthesizes existing knowledge and addresses an acknowledged gap in understanding.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ôªÔ∏è &lt;strong&gt;Key takeaway:&lt;/strong&gt; Curiosity is like a REPL:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read: Consume content.&lt;/li&gt;
&lt;li&gt;Evaluate: Think critically, ask questions, and discover solutions.&lt;/li&gt;
&lt;li&gt;Print: Share what you've learned&lt;/li&gt;
&lt;li&gt;Loop: Interpret feedback and start over.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#how-to-practice-curiosity-as-a%C2%A0coder"&gt;
  &lt;/a&gt;
  How To Practice Curiosity as a¬†Coder
&lt;/h2&gt;

&lt;p&gt;Getting better at being curious requires practicing curiosity. Fortunately, coding is full of puzzles. There are packages and tools to discover, languages to learn, and implementation details to explore.&lt;/p&gt;

&lt;p&gt;Here are two techniques I've used to practice curiosity while coding.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-things-in-ways-they-werent-intended-to-be%C2%A0used"&gt;
  &lt;/a&gt;
  Use Things In Ways They Weren't Intended to Be¬†Used
&lt;/h3&gt;

&lt;p&gt;Push boundaries and perform experiments.&lt;/p&gt;

&lt;p&gt;I once worked as a programmer for a commercial audio/visual installation company. On one job, we installed a distributed video switching system controlled by an app. The app sent TCP packets from an iPad to a network switch and used VLAN untagging to connect video receivers on the network to broadcasts streamed by transmitters.&lt;/p&gt;

&lt;p&gt;The app was incompatible with the latest switch firmware. The IT department refused to downgrade the firmware, and the app developer couldn't deliver a patch until well after the project deadline. But I could configure the app to send commands to any IP address.&lt;/p&gt;

&lt;p&gt;I could write a TCP server to accept commands from the app, convert them to the network switch's protocol, and forward them to the switch. I needed a machine to host the script. The audio processing unit (APU) was a Linux box with plenty of storage and memory. Installing a custom script would void the warranty.&lt;/p&gt;

&lt;p&gt;The APU was programmed by a drag-and-drop visual coding interface. One of the available "blocks" could run Lua scripts inside the application's sandbox. But, could a script running in the sandbox receive commands from the app and communicate with the network switch?&lt;/p&gt;

&lt;p&gt;There were no documented restrictions, so I ran an experiment. It worked! Even better, script blocks automatically started whenever the APU booted. Video switching worked effortlessly even after reboots from power outages and other incidents.&lt;/p&gt;

&lt;p&gt;My curiosity paid off. We completed the job on time. My discoveries created new solutions for clients and spawned internal tools that saved time and money on installations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#try-to-break%C2%A0things"&gt;
  &lt;/a&gt;
  Try To Break¬†Things
&lt;/h3&gt;

&lt;p&gt;Destruction can be productive.&lt;/p&gt;

&lt;p&gt;I enjoy finding ways to "break" a language. It isn't about finding bugs. It's about finding code examples that exhibit surprising behavior. It always starts with a question.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"How does a Python set determine if two objects are distinct?"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Knowing where to start looking for answers is a crucial skill. The Python docs on sets are pretty good.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"Oh, ok. Sets use an algorithm that checks if two objects have the same hash value and compare equal to each other. If both checks are true, then those objects are indistinguishable from each other, and the set can only contain one of them."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A little bit of knowledge opens the door to new questions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"Can you 'trick' a set into thinking two different objects are nondistinct?"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now there's a fun little puzzle. Think about it. An integer hashes to its value. You can control a custom object's hash value with the¬†&lt;code&gt;.__hash__()&lt;/code&gt; method. That means you can create an object that hashes to the same value as the integer &lt;code&gt;1&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NotOne&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__hash__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To confuse a set into thinking &lt;code&gt;NotOne&lt;/code&gt; instances are equal to &lt;code&gt;1&lt;/code&gt;, you need them to compare equal to &lt;code&gt;1&lt;/code&gt;. You can make &lt;code&gt;NotOne&lt;/code&gt; objects compare equal to any object by implementing an¬†&lt;code&gt;.__eq__()&lt;/code&gt; method that always returns &lt;code&gt;True&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NotOne&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__hash__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__eq__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now see what happens when you create a set containing &lt;code&gt;1&lt;/code&gt; and an instance of &lt;code&gt;NotOne&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NotOne&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# Create a set S containing 1 and n
&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# S only contains 1
&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# But somehow n is in S!
&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;n&lt;/code&gt; is very much a distinct object from &lt;code&gt;1&lt;/code&gt;. &lt;code&gt;n&lt;/code&gt; isn't even a number. It doesn't support arithmetic operations. But you'll never be able to put &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; in a set together because they fail to meet a set's criteria for distinctness. It feels weird that any set containing &lt;code&gt;1&lt;/code&gt; also contains &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"That's pretty weird. I wonder if there's a way to trick a set into thinking two nondistinct objects are distinct from each other?"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For such a thing to be possible requires an object that doesn't compare equal to itself. If you've ever worked with IEEE 754 NaN objects before, you know they fit the bill.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"What happens when you try to put several NaN values into a Python set?"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's find out.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"nan"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"nan"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"nan"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;nan&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nan&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nan&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;"Ok, *that&lt;/em&gt; is weird. But surely you can verify that the set contains a NaN object. Right?"*&lt;/p&gt;

&lt;p&gt;Behold:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"nan"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I love examples like this. In all honesty, nothing is broken‚Ää-‚Ääexcept maybe my brain for a little bit. Seeking out and understanding examples like these strengthens your intuition about code and surfaces new ideas for solving problems.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-to-go-from%C2%A0here"&gt;
  &lt;/a&gt;
  Where To Go From¬†Here
&lt;/h2&gt;

&lt;p&gt;Start practicing curiosity today. Ask more questions and do more experiments. Be thankful that it's impossible to know everything. There's always a new puzzle to be solved. There are always new things to wonder about.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#continue-learning"&gt;
  &lt;/a&gt;
  Continue Learning
&lt;/h2&gt;

&lt;p&gt;Here are five resources to help you learn more about the science of curiosity and cultivate more of it for yourself:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;&lt;a href="https://www.scotthyoung.com/blog/2020/11/30/curious/"&gt;How to become more curious&lt;/a&gt;&lt;/em&gt; by Scott H. Young. More on the science of curiosity and tips for cutlivating more of it.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;&lt;a href="https://youtu.be/SmaTPPB-T_s"&gt;This is your brain on curiosity&lt;/a&gt;&lt;/em&gt; by Matthias Gruber. Explore curiosity's role in how well we remember information.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;&lt;a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4635443/"&gt;The psychology and neuroscience of curiosity&lt;/a&gt;&lt;/em&gt; by Celeste Kidd and Benjamin Y. Haden. A survey of research into curiosity.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;&lt;a href="https://youtu.be/iAcvYqDKznE"&gt;Finding curiosity&lt;/a&gt;&lt;/em&gt; by Steve Mould. In the autumn of 1989 Steve found out that his brain was weird and it changed the course of his life. In a good way. This is the story of his growing passion for education and his quest to find out how people learn.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;&lt;a href="https://github.com/satwikkansal/wtfpython#-deep-down-were-all-the-same"&gt;What the f*ck Python!&lt;/a&gt;&lt;/em&gt; Here's a fun project attempting to explain what exactly is happening under the hood for some counter-intuitive snippets and lesser-known features in Python.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Thanks for reading! If you enjoyed this story, you can read all of my content on &lt;a href="https://davidamos.dev"&gt;my blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Practice curiosity with me each week by subscribing to my &lt;a href="https://davidamos.dev/curious-about-code-newsletter"&gt;"Curious About Code" newsletter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>motivation</category>
      <category>curiosity</category>
      <category>python</category>
    </item>
    <item>
      <title>Language Interoperability</title>
      <author>Ifihan Olusheye</author>
      <pubDate>Sat, 22 Jan 2022 17:43:34 +0000</pubDate>
      <link>https://dev.to/ifihan/language-interoperability-1eik</link>
      <guid>https://dev.to/ifihan/language-interoperability-1eik</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  INTRODUCTION
&lt;/h3&gt;

&lt;p&gt;Client/server architecture and many distributed computing systems use multiple languages and technologies for differing parts of their system. The difference in these languages or technologies could pose a serious barrier to creating a workable system. That‚Äôs where interoperability comes in.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-interoperability"&gt;
  &lt;/a&gt;
  WHAT IS INTEROPERABILITY?
&lt;/h3&gt;

&lt;p&gt;Interoperability in programming could be defined as the ability for two or more languages to interact or communicate for effective information in a system. This study of interoperability is advantageous because it enables languages and technological design to be improved or enhanced to perform specific tasks. It also allows languages to communicate effectively, which helps build a better system.&lt;/p&gt;

&lt;p&gt;Interoperability is essential in building workable systems. For instance, it is what allows HTML, CSS, and JavaScript to work together when used to make web pages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#types-of-interoperability"&gt;
  &lt;/a&gt;
  TYPES OF INTEROPERABILITY
&lt;/h3&gt;

&lt;p&gt;The degree of interoperability among interconnected systems varies. These include:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-syntactic-interoperability"&gt;
  &lt;/a&gt;
  1. Syntactic interoperability
&lt;/h4&gt;

&lt;p&gt;This is also sometimes referred to as "Structural interoperability." This is when two or more systems can communicate and exchange information with compatible protocols. Recognized formatting standards, such as XML and SQL, help with syntactic compatibility. The structure and design of the data to be utilized in the exchange of information are determined by the standards in this field.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-semantic-interoperability"&gt;
  &lt;/a&gt;
  2. Semantic interoperability
&lt;/h4&gt;

&lt;p&gt;This is the ability of systems to automatically share and comprehend information. Machine computable logic, inferencing, knowledge discovery, and data federation amongst information systems require semantic interoperability.&lt;/p&gt;

&lt;p&gt;As a result, semantic interoperability concerns data packing (syntax) and the simultaneous transfer of meaning with the data (semantics). This is performed by adding metadata (information about the data) and tying each element to a standardized or shared vocabulary. Syntactic interoperability is a prerequisite for semantic interoperability.&lt;/p&gt;

&lt;p&gt;Data is not only shared between two or more systems with semantic interoperability, but each system also understands it. Two or more systems can communicate and share data through syntactic interoperability, but the interface and programming languages must be compatible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#condition-for-interoperability"&gt;
  &lt;/a&gt;
  CONDITION FOR INTEROPERABILITY
&lt;/h3&gt;

&lt;p&gt;To be interoperable, two or more systems must be capable of exchanging, interpreting, and displaying shared data in a way that each can understand the other. This requires the establishment of 'syntactic' interoperability, which necessitates using standard data formats and data structure protocols. Then there's 'semantic' interoperability, which necessitates metadata to link each data element to a standardized, shared vocabulary.&lt;/p&gt;

&lt;p&gt;This shared vocabulary contains associated links to an ontology ‚Äì a data model representing a set of concepts within a domain ‚Äì along with relationships amongst those concepts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#benefits-of-interoperability"&gt;
  &lt;/a&gt;
  BENEFITS OF INTEROPERABILITY
&lt;/h3&gt;

&lt;p&gt;The benefits of interoperability are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;All appropriate parties can have access to data.&lt;/li&gt;
&lt;li&gt;Reduces the time it takes to process data, enhancing organizational efficiency.&lt;/li&gt;
&lt;li&gt;Interoperable systems have lower costs since they demand fewer resources and more upkeep.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#interoperability-vs-integration"&gt;
  &lt;/a&gt;
  INTEROPERABILITY VS INTEGRATION?
&lt;/h3&gt;

&lt;p&gt;Interoperability isn't the same as integration.&lt;/p&gt;

&lt;p&gt;While the words are used interchangeably, there's a difference between the two concepts. Although integration also ensures two or more applications are able to work together such that data from one can be accessed by the other, it is necessary to use a third-party‚Äîmiddleware in software terms‚Äîto translate the data and make it "function" for the receiving system. Interoperability on the other hand ensures a direct link between the two different systems.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#compatibility-vs-interoperability"&gt;
  &lt;/a&gt;
  COMPATIBILITY VS INTEROPERABILITY?
&lt;/h3&gt;

&lt;p&gt;They are quite similar but differ at a point.&lt;/p&gt;

&lt;p&gt;Two or more programs in the same environment interacting while separately conducting duties without interfering with another app or system are referred to as Compatibility.&lt;/p&gt;

&lt;p&gt;Compatibility differs from interoperability in that the two apps or systems do not have to communicate. They both reside in the same location.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  CONCLUSION
&lt;/h3&gt;

&lt;p&gt;The concept of interoperability is one that has revolutionized the way systems interact. And the more it is taken into consideration when building applications, the more efficient a product could be. &lt;/p&gt;

</description>
      <category>architecture</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
