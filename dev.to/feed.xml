<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Fail-Fast Reliable Software Strategy. Debug Failures Effectively</title>
      <author>Shai Almog</author>
      <pubDate>Wed, 08 Dec 2021 06:09:40 +0000</pubDate>
      <link>https://dev.to/codenameone/fail-fast-reliable-software-strategy-debug-failures-effectively-3162</link>
      <guid>https://dev.to/codenameone/fail-fast-reliable-software-strategy-debug-failures-effectively-3162</guid>
      <description>&lt;p&gt;&lt;strong&gt;A broken kitchen appliance leads me down the path of intelligent failure, downside risk, exponential growth and cloud computing.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I love cooking and use my  &lt;a href="https://www.thermomix.com/"&gt;Thermomix&lt;/a&gt;  a lot. If you hadn’t heard about that amazing innovation, it's a kitchen robot… Well, it’s a magical super cooking machine. When designing the Thermomix, its designers took the approach of  &lt;strong&gt;&lt;a href="https://en.wikipedia.org/wiki/Fail-safe"&gt;fail-safe&lt;/a&gt;&lt;/strong&gt;  instead of  &lt;strong&gt;&lt;a href="https://en.wikipedia.org/wiki/Fail-fast"&gt;fail-fast&lt;/a&gt;&lt;/strong&gt;. This is a smart choice in this case, but it has its drawbacks.&lt;/p&gt;

&lt;p&gt;E.g. my machine tried to recover from a failure which sent it into an infinite recovery loop. I literally couldn’t pull out the food from the lid that was sealed shut. But normally, it’s one of the most reliable devices I own.&lt;/p&gt;

&lt;p&gt;Which approach should we take and how does that impact our long-term reliability?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#failfast-vs-failsafe-approach"&gt;
  &lt;/a&gt;
  Fail-Fast vs. Fail-Safe Approach
&lt;/h2&gt;

&lt;p&gt;In case you aren’t familiar with the terms, fail-fast means a system that would quickly fail in an unexpected condition. A fail-safe system will try to recover and proceed even with bad input.&lt;/p&gt;

&lt;p&gt;Java tries to take the fail-fast approach, whereas JavaScript leans a bit more towards the fail-safe approach. A good example of fail-fast behavior would be their respective approaches to null. In Java, a null produces a NullPointerException which fails the code instantly and clearly. JavaScript uses “undefined” which can propagate through the system. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#which-one-should-we-pick"&gt;
  &lt;/a&gt;
  Which one Should we Pick?
&lt;/h3&gt;

&lt;p&gt;This is hard to tell. There's very little research and I can't think of a way to apply the scientific method objectively to measure this sort of methodology. It has both technical aspects and core business aspects. It's pretty hard to determine something conclusively. What I can say for sure is that this shouldn't be a senior executive decision alone. This is a sort of policy that management should integrate with engineering to mitigate the downside risk. This applies to you, whether you're an engineer or a business leader. Whether you're a Silicon Valley startup, Amazon or a bank. These principles are universal. &lt;/p&gt;

&lt;p&gt;Companies using Microservices are probably more committed to some form of fail-safe. Resiliency is a common trait of Microservices, that’s in the fail-safe camp.&lt;/p&gt;

&lt;p&gt;Modern approaches to fail-safe try to avoid some pitfalls of the approach by using thresholds to limit failure. A good example of this is a circuit breaker, both the physical one and software based. A circuit breaker disconnects functionality that fails so it doesn’t produce a cascading failure. &lt;/p&gt;

&lt;p&gt;Companies who pick the fail-fast approach take some risks but reap some big rewards. When you pick that approach, the failure can be painful if a bug reaches production, but there are two significant advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It's easier to catch bugs in fail-fast systems during the development/debugging cycle&lt;/li&gt;
&lt;li&gt;These bugs are usually easier to fix&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The fail-fast approach handles such bugs better since there's a lower risk of cascading effect. A fail-safe environment can try to recover from an error and postpone it. As a result, the developer will see an error at a much later stage and might miss the root cause of the error.&lt;/p&gt;

&lt;p&gt;Historically, &lt;strong&gt;I prefer fail-fast&lt;/strong&gt;; I believe it makes systems more stable when we reach production. But this is anecdotal and very hard to prove empirically. I think a fail-fast system requires some appetite for risk, both from engineering and from the executives. Maybe even more so from the executives.&lt;/p&gt;

&lt;p&gt;Notice that despite that opinion I said that the Thermomix was smart to pick fail-safe. Thermomix is hardware running in an unknown and volatile environment. This means a fix in production would be nearly impossible and very expensive to deploy. Systems like that must survive the worst scenarios.&lt;/p&gt;

&lt;p&gt;We need to learn from previous failure. Successful companies use both approaches, so it's very hard to pick the best approach.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hybrid-environment-in-the-cloud"&gt;
  &lt;/a&gt;
  Hybrid Environment in the Cloud
&lt;/h3&gt;

&lt;p&gt;A more common "strategy" for handling failure is to combine the best aspects of both worlds:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fail-fast when invoking local code or services, e.g. DB&lt;/li&gt;
&lt;li&gt;Fail-safe when depending on remote resource, e.g. remote web service&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The core assumptions behind this direction is that we can control our local environment and test it well. Businesses can't rely on a random service in the cloud. They can build fault-tolerant systems by avoiding external risks but taking the calculated risks of a fail-fast system.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defining-failure"&gt;
  &lt;/a&gt;
  Defining Failure
&lt;/h2&gt;

&lt;p&gt;When discussing failure the assumptions we make focus around a 500 error page, crash, etc. Those are serious P1 failures. But by no means are they the only type of failures or even the worst types of failure... A crash usually marks a problem we can fix and even workaround by spinning up a new server instance automatically. This is actually a failure we can handle relatively elegantly.&lt;/p&gt;

&lt;p&gt;A far more sinister failure is data corruption. A bug can cause bad data making its way into the database and potentially causing long-term problems. Even security risks and crashes can result from corrupted data and those will be much harder to fix. A fail-fast system can sometimes nip such issues in the bud. &lt;/p&gt;

&lt;p&gt;With cloud computing, we're seeing a rise in defensive programming such as circuit breakers, retries, etc. This is unavoidable, as the assumptions behind this is that everything in the cloud can fail. We need to develop core knowledge on the failures we can expect. One approach I found useful is to review logs from long running integration tests (nightly tests).&lt;/p&gt;

&lt;p&gt;An important part of a good QA process is long running tests that take hours to run and stress the system. When reviewing the logs of these tests, we can sometimes notice issues that didn't fail but conflict with our assumptions about the system. This can help find the insidious bugs that went through.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-fix-the-bug"&gt;
  &lt;/a&gt;
  Don't Fix the Bug
&lt;/h2&gt;

&lt;p&gt;Not right away. Well, unless it's in production, obviously...&lt;/p&gt;

&lt;p&gt;We should understand bugs before we fix them. Why didn't the testing process find it? Is it a cascading effect or is it missing test coverage? How did we miss that?&lt;/p&gt;

&lt;p&gt;When developers resolve a bug, they should be able to answer that question on the issue tracker. Then comes the hard problem, find the root cause of the failure and fix the process so such issues won't happen again. This is obviously an extreme approach to take on every bug, so we need to apply some discretion when we pick the bugs to focus on. But this must always apply to a bug in production. We must investigate bugs in production thoroughly since failure in the cloud can be very problematic to the business, especially when experiencing exponential growth.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debugging-failure"&gt;
  &lt;/a&gt;
  Debugging Failure
&lt;/h2&gt;

&lt;p&gt;Now that we have a general sense of the subject, let’s get into the more practical aspects of a blog focused on debugging. There's no special innovation here. Debugging a fail-fast system is pretty darn easy.&lt;/p&gt;

&lt;p&gt;But there are some gotchas, tips and tricks we can use to promote fail-fast. There are other strategies we can use to debug a fail-safe system.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ensuring-we-failfast"&gt;
  &lt;/a&gt;
  Ensuring we Fail-Fast
&lt;/h3&gt;

&lt;p&gt;Use the following strategies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Throw exceptions - define the contract of every API in the documentation and fail immediately if the API is invoked with out of bounds state, values, etc.&lt;/li&gt;
&lt;li&gt;Enforce this strategy with unit tests - go over every statement made in the documentation for every API. Write a test that enforces that behavior&lt;/li&gt;
&lt;li&gt;If you rely on external sources, create tests for unavailable situations, low performance and sudden unavailability&lt;/li&gt;
&lt;li&gt;Define low timeouts, never retry&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The core idea is to fail quickly. Say we need to invoke an Amazon web service. A networking issue can trigger a failure. A fail-fast system will expect a failure and present an error to the user.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intelligent-failure-for-failsafe"&gt;
  &lt;/a&gt;
  Intelligent Failure for Fail-Safe
&lt;/h3&gt;

&lt;p&gt;The core idea isn't so much to avoid failure, it's unavoidable. The core idea is to soften the blow of a failure. E.g. if we take the Amazon web service example from above... A fail-safe environment could cache responses from Amazon and would try to show an older response. &lt;/p&gt;

&lt;p&gt;The problem here is that users might get out-of-date information and this might cause a cascading effect. It might mean it will take us longer to find the problem and fix it since the system might seem in order.&lt;/p&gt;

&lt;p&gt;The obvious tip here is to log and alert on every failure and mitigation so we can address them. But there's another hybrid approach that isn't as common but might be interesting to some.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hybrid-failsafe"&gt;
  &lt;/a&gt;
  Hybrid Fail-Safe
&lt;/h2&gt;

&lt;p&gt;A hybrid fail-safe environment starts as a fail-fast environment. This is also true for the testing environment and staging. The core innovation is wrappers that enclose individual components and provide a failsafe layer. This can be very similar to CloudFlare or Amazon cloud front providing a cached version of the website.  &lt;/p&gt;

&lt;p&gt;But how can we apply this in the code or the OPS layer?&lt;/p&gt;

&lt;p&gt;When the system is nearing production, we need to review the fault points within the system, focusing on external dependencies but also on internal components. &lt;/p&gt;

&lt;p&gt;A simplistic example like the Amazon example from above will include a quick failure by default. The failsafe wrapper can retry the operation and can implement various policies. There's some ready-made software tools that let us define failsafe strategy after the fact, e.g. failsafe, spring-retry and many other such tools. Some of these tools are at the SaaS API levels and can mitigate availability/networking issues.&lt;/p&gt;

&lt;p&gt;This has the downside of adding a production component that's mostly missing in development and QA. But it includes many of the advantages of fail-fast and keeps the code relatively clean.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#additional-best-practices-for-all"&gt;
  &lt;/a&gt;
  Additional Best Practices for all
&lt;/h2&gt;

&lt;p&gt;Here are some best practices you should keep in mind, regardless of the strategy you pick:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run the software in the debugger with exception breakpoints turned on. Exclude APIs that use exceptions to control flow (ugh, please fix those APIs) from the breakpoint. This lets you challenge your assumptions about the reliability of the application&lt;/li&gt;
&lt;li&gt;Make sure the environment is random. If you use native code, randomize memory locations. Always randomize test execution to promote failure&lt;/li&gt;
&lt;li&gt;Proper code review - I can't stress this enough. I love code reviews. I despise nitpicking! 
When I get a response on variable naming, code styling etc. it pushes my buttons... Sometimes comments like that ignore an actual bug.
People hate code review because of that type of nitpicking. Companies should train developers in substantive processes and evaluation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;Failure can come in many shapes and forms. We should accept that failure happens. It happens to Amazon, Facebook and Google despite all their efforts to avoid it. We need to decide on a strategy. Make assumptions and get support from senior management all the way through engineering.&lt;/p&gt;

&lt;p&gt;We need to make choices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do we fail more often and recover quickly?&lt;/li&gt;
&lt;li&gt;Do we fail rarely but take time to recover?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Software reliability is still a function of QA/testing. But ultimately, failure is inevitable and we need to make strategic choices. I believe most startups should focus on fail-fast, since the growth mindset makes it very hard to keep fail-safe strategies functional. Since we have QA and testing, most of these issues are outliers and they are very hard to optimize for.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Using Azure automation and Events to monitor a parent Key Vault and update the secret in child Key Vault(s)</title>
      <author>Venkatesan Rethinam</author>
      <pubDate>Wed, 08 Dec 2021 05:50:35 +0000</pubDate>
      <link>https://dev.to/vengi83644/using-azure-automation-and-events-to-monitor-a-parent-key-vault-and-update-the-secret-in-child-key-vaults-194k</link>
      <guid>https://dev.to/vengi83644/using-azure-automation-and-events-to-monitor-a-parent-key-vault-and-update-the-secret-in-child-key-vaults-194k</guid>
      <description>&lt;p&gt;Before going into the actual blog, I wanted to explain the Azure resources that we are going to discuss in simple words,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/key-vault/general"&gt;Key Vault&lt;/a&gt; is a resource in Azure to store secret information that can be accessed by your apps through managed identities or service principal authentication.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/automation"&gt;Azure Automation&lt;/a&gt; is a service that gives you the ability to automate tasks, do configuration changes, do updates to your azure resources using Az Cmds through runbooks in it. So, practically, we can run any automation using the Az cmds.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/event-grid"&gt;Azure Event Grid&lt;/a&gt; is a service that fires events to your chosen event handlers or webhooks for the events that happen in your Azure resources. In this blog, we are going to have KVs as the event source and Webhooks as the handler.&lt;/p&gt;

&lt;p&gt;Now, in this blog, I am going to explain how you can use Azure Automation to detect changes in a KV and update the secret value in another KV. &lt;/p&gt;

&lt;p&gt;Why would someone do that? OK, consider having 100s of KVs in Azure and are being used by 100s of apps. If you have a secret value that is in all these KVs and you don't want your apps connecting to multiple KVs, then it's muscle work to update the secret value in that many KVs.&lt;/p&gt;

&lt;p&gt;So, Azure Automation and Event Grid subscriptions come in to help us detect the new version of the secret in a KV and update its value in the other KVs.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;Make sure, you have access to do the below in Azure,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create Automation resource&lt;/li&gt;
&lt;li&gt;Create Key Vault&lt;/li&gt;
&lt;li&gt;Create Events in Key Vault&lt;/li&gt;
&lt;li&gt;Edit Access Policies in Key Vault&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#step-1-create-azure-automation"&gt;
  &lt;/a&gt;
  Step 1: Create Azure Automation
&lt;/h2&gt;

&lt;p&gt;Follow &lt;a href="https://docs.microsoft.com/en-us/azure/automation/quickstarts/create-account-portal"&gt;this&lt;/a&gt; to create a new Azure Automation account with System assigned identity. We will use this system assigned identity to access the secrets in the KV.&lt;/p&gt;

&lt;p&gt;By default, the Azure Key Vault module is enabled in the Azure Automation. Make sure you have it in the Modules section. I am using the Runtime version 5.1 for this blog.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v1piD65z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5276778/144612469-991f3faf-2271-40b8-98b8-1daea709bfd6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v1piD65z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5276778/144612469-991f3faf-2271-40b8-98b8-1daea709bfd6.png" alt="image" width="880" height="579"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-create-key-vaults"&gt;
  &lt;/a&gt;
  Step 2: Create Key Vaults
&lt;/h2&gt;

&lt;p&gt;Follow &lt;a href="https://docs.microsoft.com/en-us/azure/key-vault/general/quick-create-portal#create-a-vault"&gt;this&lt;/a&gt; to create a new KV. For this blog, I am creating 2 Key vaults - 1 for parent and 1 for children. I want to update the secret in child KVs when there is a new version of the secret in the parent.&lt;/p&gt;

&lt;p&gt;Both the parent and child KVs needs to be set up with Access policies including the Automation account we created in Step 1 as like in the below pic,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mus1WSqC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5276778/144611707-a5b2eb2d-dfe0-49e5-8429-e86c01185ab3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mus1WSqC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5276778/144611707-a5b2eb2d-dfe0-49e5-8429-e86c01185ab3.png" alt="image" width="880" height="439"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Populate the KVs with secrets in it by following &lt;a href="https://docs.microsoft.com/en-us/azure/key-vault/secrets/quick-create-portal#add-a-secret-to-key-vault"&gt;this&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-create-runbook-in-the-azure-automation-account"&gt;
  &lt;/a&gt;
  Step 3: Create Runbook in the Azure Automation account
&lt;/h2&gt;

&lt;p&gt;Follow &lt;a href="https://docs.microsoft.com/en-us/azure/automation/learn/automation-tutorial-runbook-textual#create-new-runbook"&gt;this&lt;/a&gt; to create a new Runbook in the Azure Automation account. For this blog, we will use the PowerShell workflow runbook and we will use the Az cmds.&lt;/p&gt;

&lt;p&gt;Follow &lt;a href="https://docs.microsoft.com/en-us/azure/automation/automation-webhooks#from-the-portal"&gt;this&lt;/a&gt; to create a Webhook under the newly created Runbook. Make sure you copy the Webhook URL while creating, as it cannot be retrieved later. We will need this URL to be added to the KV's Event Handler.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-setup-event-subscription-and-handlers-in-parent-kv"&gt;
  &lt;/a&gt;
  Step 4: Setup Event Subscription and handlers in Parent KV
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Go to your parent KV.&lt;/li&gt;
&lt;li&gt;Select Events from the left section.&lt;/li&gt;
&lt;li&gt;Create an Event Subscription.&lt;/li&gt;
&lt;li&gt;Give the subscription and the topic unique names.&lt;/li&gt;
&lt;li&gt;For the &lt;strong&gt;Event Types&lt;/strong&gt;, choose "Secret New Version Created" as this is what we are going to monitor in this blog.&lt;/li&gt;
&lt;li&gt;For the &lt;strong&gt;Endpoint Type&lt;/strong&gt;, choose "WebHook" and type in the URL we got from Step 3 for the endpoint.&lt;/li&gt;
&lt;li&gt;Click on create to save the Event Subscription&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As of now, we have subscribed to the new secret version create an event in the KV, and set Runbook's Webhook as the event handler.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-catch-the-event-data-in-the-azure-automation-runbook"&gt;
  &lt;/a&gt;
  Step 5: Catch the event data in the Azure Automation Runbook
&lt;/h2&gt;

&lt;p&gt;In this step, we will catch the event data in the webhook as use Az cmds for setting the secret value in our child KV. &lt;/p&gt;

&lt;p&gt;Go to your Runbook's Edit window and type in the below PS code in it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;param
(
[Parameter (Mandatory = $false)]
[object] $WebhookData
)

if ($WebhookData) 
{
    Write-Output $WebhookData.RequestBody

    $bodyJson =  $WebhookData.RequestBody | ConvertFrom-Json # Converting to json for easier manipulation

    # Getting the KV's name, Secret's name and the Event Type
    $secretName = $bodyJson[0].data.ObjectName
    $parentKv = $bodyJson[0].data.VaultName    
    $eventType = $bodyJson[0].eventType
    $childKv = ""

    if($eventType -eq "Microsoft.KeyVault.SecretNewVersionCreated")
    {
        # Authenticate using the System assigned identity of the Azure Automation account
        Connect-AzAccount -Identity

        # Using Az cmd for getting the secret's latest version value from the KV
        $secretValue = Get-AzKeyVaultSecret -VaultName $parentKv -Name $secretName -AsPlainText

        Write-Output "A new version for secret $($secretName) has been created in KV - $($parentKv) with value - $($secretValue)"

        if($secretName -eq "secret-child-1")
        {
            $childKv = "child-1-kv"           
        }
        elseif($secretName -eq "secret-child-2")
        {
            $childKv = "child-2-kv"
        }

        if($childKv -eq "")
        {
            Write-Output "No secrets have been set in the child KVs as the updated key in parent is not associated with the children"
        }
        else
        {
            # Setting the child KV with the secret value that is set in the parent KV
            $Secret = ConvertTo-SecureString -String $secretValue -AsPlainText -Force
            Set-AzKeyVaultSecret -VaultName $childKv -Name $secretName -SecretValue $Secret

            Write-Output "A new version of secret $($secretName) has been created in KV - $($childKv) with value - $($secretValue)"
        }        
    }
}
else
{
    write-Error "No input data found." 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;$WebhookData is the parameter where we will get the event data. I have converted the data into JSON for easier manipulation and ripped the KV's name, Secret name and event type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$bodyJson =  $WebhookData.RequestBody | ConvertFrom-Json
$secretName = $bodyJson[0].data.ObjectName
$parentKv = $bodyJson[0].data.VaultName    
$eventType = $bodyJson[0].eventType
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After checking the event type we needed, I am using the Az cmd to authenticate the current execution.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Connect-AzAccount -Identity
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Getting the secret's latest version value from the KV&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$secretValue = Get-AzKeyVaultSecret -VaultName $parentKv -Name $secretName -AsPlainText
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Setting the child KV with the secret value that is set in the parent KV&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$Secret = ConvertTo-SecureString -String $secretValue -AsPlainText -Force
Set-AzKeyVaultSecret -VaultName $childKv -Name $secretName -SecretValue $Secret
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Publish this runbook and we shall test the setup in the next step. For this blog, I have hardcoded the secret names; you can change the logic as per your need.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-6-test-the-setup"&gt;
  &lt;/a&gt;
  Step 6: Test the setup
&lt;/h2&gt;

&lt;p&gt;Now, create a new version in the Parent KV's secret. This will fire an event to the Webhook. You can monitor this in the KV's metric as like in the below pic,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qVqJ_3kh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5276778/144619881-3cc645b8-466d-4229-aed9-7899d976cf02.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qVqJ_3kh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5276778/144619881-3cc645b8-466d-4229-aed9-7899d976cf02.png" alt="image" width="880" height="276"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also check the Webhook for the Last triggered value,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G9VCeHw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5276778/144620210-bd687145-51ed-47c3-a75a-f38285f864d4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G9VCeHw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5276778/144620210-bd687145-51ed-47c3-a75a-f38285f864d4.png" alt="image" width="880" height="271"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Output section in the Jobs section will give you the output of the PS code that was executed for the event. Here is the example output,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[{"id":"6e1c172c-26f5-49e6-a065-f9ee3818b7e1","topic":"Removing this for security","subject":"secret-child-2","eventType":"Microsoft.KeyVault.SecretNewVersionCreated","data":{"Id":"Removing this for security","VaultName":"parent-kv","ObjectType":"Secret","ObjectName":"secret-child-2","Version":"Removing this for security","NBF":null,"EXP":null},"dataVersion":"1","metadataVersion":"1","eventTime":"2021-12-03T12:18:25.6002045Z"}]


Environments                                                                                                            
------------                                                                                                            
{[AzureChinaCloud, AzureChinaCloud], [AzureCloud, AzureCloud], [AzureGermanCloud, AzureGermanCloud], [AzureUSGovernme...

A new version for secret secret-child-2 has been created in KV - parent-kv with value - 741258963


SecretValue : System.Security.SecureString
Attributes  : Microsoft.Azure.Commands.KeyVault.Models.PSKeyVaultSecretAttributes
Enabled     : True
Expires     : 
NotBefore   : 
Created     : 12/3/2021 12:18:30 PM
Updated     : 12/3/2021 12:18:30 PM
ContentType : 
Tags        : 
TagsTable   : 
VaultName   : child-2-kv
Name        : secret-child-2
Version     : Removing this for security
Id          : Removing this for security

A new version of secret secret-child-2 has been created in KV - child-2-kv with value - 741258963
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>azure</category>
      <category>powershell</category>
      <category>automation</category>
      <category>runbook</category>
    </item>
    <item>
      <title>How to build Azure Log Analytics URL with KQL Query?</title>
      <author>Venkatesan Rethinam</author>
      <pubDate>Wed, 08 Dec 2021 05:48:10 +0000</pubDate>
      <link>https://dev.to/vengi83644/how-to-build-azure-log-analytics-url-with-kql-query-3p52</link>
      <guid>https://dev.to/vengi83644/how-to-build-azure-log-analytics-url-with-kql-query-3p52</guid>
      <description>&lt;p&gt;This is a requirement I had for one of my projects where we retrieve app insights data from several azure web apps on their flow performances. I used App Insights API for posting the KQL query and the timespan to get the flow performances which are logged using custom dimensions in the specific insights' logs.&lt;/p&gt;

&lt;p&gt;I also had a requirement where I had to give the users who are seeing the data, the ability to see the query and timespan I used for retrieving the data they are seeing. There is no direct way Azure gives you this ability. So, I researched the Log Analytics 'Share' functionality on how they are sharing the queries in the URLs.&lt;/p&gt;

&lt;p&gt;Here is the format they are using,&lt;br&gt;
&lt;a href="https://portal.azure.com/#blade/Microsoft_Azure_Monitoring_Logs/LogsBlade/resourceId/%2Fsubscriptions%2F%7BsubscriptionId%7D%2FresourceGroups%2F%7Brg%7D%2Fproviders%2Fmicrosoft.insights%2Fcomponents%2F%7Bresourcename%7D/source/LogsBlade.AnalyticsShareLinkToQuery/query/%7Bquery%7D"&gt;https://portal.azure.com/#blade/Microsoft_Azure_Monitoring_Logs/LogsBlade/resourceId/%2Fsubscriptions%2F{subscriptionId}%2FresourceGroups%2F{rg}%2Fproviders%2Fmicrosoft.insights%2Fcomponents%2F{resourcename}/source/LogsBlade.AnalyticsShareLinkToQuery/query/{query}&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The values you see inside {} are to be replaced with actuals. However, for {query}, it does not take the KQL directly.&lt;/p&gt;

&lt;p&gt;I eventually found that they are converting the KQL into Base64 bytes and compressing them. They have this property by default set to true =&amp;gt; isQueryBase64Compressed=true in the query string.&lt;/p&gt;

&lt;p&gt;So, the URL would become like this,&lt;br&gt;
&lt;a href="https://portal.azure.com/#blade/Microsoft_Azure_Monitoring_Logs/LogsBlade/resourceId/%2Fsubscriptions%2F%7BsubscriptionId%7D%2FresourceGroups%2F%7Brg%7D%2Fproviders%2Fmicrosoft.insights%2Fcomponents%2F%7Bresourcename%7D/source/LogsBlade.AnalyticsShareLinkToQuery/query/%7Bquery%7D/isQueryBase64Compressed/true"&gt;https://portal.azure.com/#blade/Microsoft_Azure_Monitoring_Logs/LogsBlade/resourceId/%2Fsubscriptions%2F{subscriptionId}%2FresourceGroups%2F{rg}%2Fproviders%2Fmicrosoft.insights%2Fcomponents%2F{resourcename}/source/LogsBlade.AnalyticsShareLinkToQuery/query/{query}/isQueryBase64Compressed/true&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OK, Here is the code for that KQL query conversion to fit into this URL.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var queryBytes = Encoding.UTF8.GetBytes(query);
var memoryStream = new MemoryStream();
var gZipStream = new GZipStream(memoryStream, CompressionMode.Compress);

gZipStream.Write(queryBytes, 0, queryBytes.Length);
gZipStream.Close();

var compressedData = memoryStream.ToArray();

var encodedText = Convert.ToBase64String(compressedData);
encodedText = encodedText.Replace("/", "%2F");
encodedText = encodedText.Replace("+", "%2B");
encodedText = encodedText.Replace("=", "%3D");

var portalUrl = "https://portal.azure.com/#@sample.onmicrosoft.com/resource/subscriptions/guid-guid-guid-guid-guid/resourceGroups/rg-name/providers/microsoft.insights/components/app-insights-name/overview";

var (subscriptionId, rg, resourcename) = GetAzureResourceDetailsFromLogUrl(portalUrl);

url = "https://portal.azure.com/#blade/" + $"Microsoft_Azure_Monitoring_Logs/LogsBlade/resourceId/%2Fsubscriptions%2F{subscriptionId}%2FresourceGroups%2F{rg}%2Fproviders%2Fmicrosoft.insights%2Fcomponents%2F{resourcename}/source/LogsBlade.AnalyticsShareLinkToQuery/query/{encodedText}/isQueryBase64Compressed/true";

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Additional Perks&lt;/strong&gt;&lt;br&gt;
Here is an additional perk for getting the Subscription Id, Resource Group Name, and the Resource Name from an Azure App Insights resource URL.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
private static (string, string, string) GetAzureResourceDetailsFromLogUrl(string portalUrl)
{
  var uri = new Uri(portalUrl.Replace("#", ""));

  var subscriptionId = uri.Segments[uri.Segments.ToList().FindIndex(f =&amp;gt; f.Equals(SubscriptionsUrlSegment, StringComparison.OrdinalIgnoreCase)) + 1].Replace("/", "");

  var rg = uri.Segments[uri.Segments.ToList().FindIndex(f =&amp;gt; f.Equals(RGUrlSegment, StringComparison.OrdinalIgnoreCase)) + 1].Replace("/", "");

  var resourceName = uri.Segments[uri.Segments.ToList().FindIndex(f =&amp;gt; f.Equals(ComponentUrlSegment, StringComparison.OrdinalIgnoreCase)) + 1].Replace("/", "");

  return (subscriptionId, rg, resourceName);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>azure</category>
      <category>analytics</category>
      <category>insights</category>
      <category>kql</category>
    </item>
    <item>
      <title>JavaScript - Episode 1 (The Beginning)</title>
      <author>Chugil.C</author>
      <pubDate>Wed, 08 Dec 2021 05:46:32 +0000</pubDate>
      <link>https://dev.to/chugilc/javascript-episode-1-the-beginning-3p2b</link>
      <guid>https://dev.to/chugilc/javascript-episode-1-the-beginning-3p2b</guid>
      <description>&lt;h3&gt;
  &lt;a href="#why-we-need-javascript-"&gt;
  &lt;/a&gt;
  Why we need JavaScript ?
&lt;/h3&gt;

&lt;p&gt;If you see a modern website it will be having a lot of interaction like clicking a button, drag and drop, etc. These interactions make our lives easier, Imagine if there is no way to interact with a website that would be awful right? So to make these interactions happen, we need JavaScript&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-birth-of-javascript"&gt;
  &lt;/a&gt;
  The Birth of JavaScript
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M996PcR_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/thi81med5k48zbc3db0e.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M996PcR_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/thi81med5k48zbc3db0e.jpg" alt="Image description" width="880" height="275"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It all began in the mid-1990s the usage of the internet rises to its peak. At that time the all the tech companies tried to create their own browser but the major competition between Netscape's "Navigator" and Microsoft's Internet Explorer. At the time Netscape's programmer named Brandan Eich developed a scripting language in just 10 days, He called that as Mocha but quickly become known as LiveScript and then later it was named as JavaScript ( Because at the period of time Java was so popular so they renamed to JavaScript to get attention in the Java developers &amp;amp; community ). JavaScript still tops the list of most popular technologies in stack overflow survey&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D1tTOEj0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7th1dk0t0iv2932m86vk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D1tTOEj0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7th1dk0t0iv2932m86vk.png" alt="Image description" width="714" height="497"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://insights.stackoverflow.com/survey/2021"&gt;Link to Stack Overflow survey&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ecmascript"&gt;
  &lt;/a&gt;
  ECMAScript
&lt;/h3&gt;

&lt;p&gt;So when JavaScript was created it become a huge hit so after that all of the tech companies created their own version of JavaScript and used it in their browser and this became a developer's nightmare because now the developers want to write different codes so that their application didn't break on a specific browser. It came clear that JavaScript need to be managed so Netscape handed the job to European Computer Manufacturers Association (ECMA)&lt;/p&gt;

&lt;p&gt;Now all the browser follows the specification defined by ECMA of how JavaScript should look like. They called the versions like ES1, ES2 like that. For some year they didn't released a version but in the year 2015 they released a huge update on JavaScript that changed the whole community these changes were so powerful, It's called as ES2015 or ES6 &lt;/p&gt;

&lt;p&gt;But now they are changing and updating small features of JavaScript every year and releasing it officially instead of big update in a single year. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-what-now-"&gt;
  &lt;/a&gt;
  So what now ?
&lt;/h3&gt;

&lt;p&gt;In the upcoming episodes of "Breaking Language" we will dig deep down into JavaScript and explore various features in it. Stay tuned 😉&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Web Dev Made Easy</title>
      <author>The Nerdy Dev</author>
      <pubDate>Wed, 08 Dec 2021 04:56:03 +0000</pubDate>
      <link>https://dev.to/thenerdydev/web-dev-made-easy-85d</link>
      <guid>https://dev.to/thenerdydev/web-dev-made-easy-85d</guid>
      <description>&lt;p&gt;Hey everyone 👋🏻,&lt;/p&gt;

&lt;p&gt;In this article, I will tell you about a website using which you can use as a resource for learning Web Development. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article was first published on&lt;/em&gt; &lt;a href="https://the-nerdy-dev.com/"&gt;https://the-nerdy-dev.com/&lt;/a&gt;.&lt;br&gt;
&lt;em&gt;Check the website for more interesting articles and tutorials on Web Development.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So the website name is this : &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#webdev"&gt;
  &lt;/a&gt;
  web.dev
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://web.dev"&gt;https://web.dev&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gIusUTbg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yf5l5b4p6oy7odj1xccp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gIusUTbg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yf5l5b4p6oy7odj1xccp.png" alt="Image description" width="880" height="490"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now some of the featured courses on their website are : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tUkyONHA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/asfyvpugpqaihtynzl29.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tUkyONHA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/asfyvpugpqaihtynzl29.png" alt="Image description" width="880" height="479"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-learn-responsive-design"&gt;
  &lt;/a&gt;
  1. Learn Responsive Design
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AHNZM2A_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9qnos2dlaih0y5sjz8u2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AHNZM2A_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9qnos2dlaih0y5sjz8u2.png" alt="Image description" width="400" height="408"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This course takes you on a journey through the many facets of modern responsive web design. The first few modules will ease you in with a history of where responsive design came from and a look at the fundamentals of responsive layouts. From there, you’ll learn about responsive images, typography, accessibility and more.&lt;/p&gt;

&lt;p&gt;Along the way you’ll find out how to make websites responsive to user preferences and device capabilities. By the end, you’ll also have an understanding of what the future might hold for responsive design.&lt;/p&gt;

&lt;p&gt;Each module has demos and self-assessments for you to test your knowledge.&lt;/p&gt;

&lt;p&gt;This course is created for beginner and intermediate designers and developers. A basic understanding of HTML and CSS should be enough. You don’t need to know any JavaScript. If you’re completely new to making websites, there's an introduction to HTML and another course to help you learn CSS. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-learn-forms"&gt;
  &lt;/a&gt;
  2. Learn Forms
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gEccin0L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r9bz7bug2697hjuvsz7j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gEccin0L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r9bz7bug2697hjuvsz7j.png" alt="Image description" width="392" height="422"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This course breaks down HTML forms into easy to understand pieces. Over the next few modules, you'll learn how an HTML form works and how to use them effectively in your projects. Use the menu pane by the Learn Forms logo to navigate the modules.&lt;/p&gt;

&lt;p&gt;You'll learn how to build a basic HTML form, about HTML form elements, styling forms, help users re-entering data, ensuring the form is accessible, and secure, how to test your forms, and about specific form types.&lt;/p&gt;

&lt;p&gt;Each module is full of interactive demos and self-assessments for you to test your knowledge.&lt;/p&gt;

&lt;p&gt;This course is suitable for beginners and advanced HTML developers. The first few modules help you get started with building HTML forms, the other modules give more detail. You can go through the series from start to finish to get a general understanding of HTML forms, or pick a specific module you want to learn more about.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-learn-progressive-web-apps"&gt;
  &lt;/a&gt;
  3. Learn Progressive Web Apps
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xFd14x8J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7qqz98zdf5g482ykoxhc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xFd14x8J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7qqz98zdf5g482ykoxhc.png" alt="Image description" width="393" height="407"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This course covers the fundamentals of Progressive Web App development into easy-to-understand pieces. Over the following modules, you'll learn what a Progressive Web App is, how to create one or upgrade your existing web content, and how to add all the pieces for an offline, installable app. Use the menu pane by the "Learn PWA" logo to navigate the modules.&lt;/p&gt;

&lt;p&gt;You'll learn PWA fundamentals like the Web App Manifest, Service Workers, how to design with an app in mind, what's different from a classic web app, how to use other tools to test and debug your PWA. After these fundamentals, you'll learn about integration with the platform and operating system, how to enhance your PWA's installation and usage experience, and how to offer an offline experience.&lt;/p&gt;

&lt;p&gt;Each module includes interactive demos and self-assessments for you to test your knowledge. You will be able to test and try demos on your mobile phone, tablet, or laptop while playing with the code to understand the fundamentals of what makes a Progressive Web App.&lt;/p&gt;

&lt;p&gt;This course is created for a beginner and advanced web developers alike. You can go through the series from start to finish to get a general understanding of PWA from top to bottom, or you can use it as a reference for specific subjects. For those new to web development you will need a grounding in HTML, CSS, and JavaScript to follow along. Check out Learn CSS, and the HTML and JavaScript courses on MDN. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#4-learn-css"&gt;
  &lt;/a&gt;
  4. Learn CSS
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q02Apsok--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x137q1oab21lhbyiyohl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q02Apsok--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x137q1oab21lhbyiyohl.png" alt="Image description" width="396" height="403"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This course breaks down the fundamentals of CSS into digestible, easy to understand pieces. Over the next few modules, you'll learn how the core aspects of CSS work and how to use them effectively in your projects. Use the menu pane by the "Learn CSS" logo to navigate the modules.&lt;/p&gt;

&lt;p&gt;You'll learn CSS fundamentals like the box model, cascade and specificity, flexbox, grid and z-index. And, along with these fundamentals, you'll learn about functions, color types, gradients, logical properties and inheritance to make you a well-rounded front-end developer, ready to take on any user interface.&lt;/p&gt;

&lt;p&gt;Each module is full of interactive demos and self-assessments for you to test your knowledge. In addition to learning through reading and demos, there is an accompanying podcast episode for each topic as another way to learn and continue expanding your knowledge.&lt;/p&gt;

&lt;p&gt;This course is created for beginner and advanced CSS developers alike. You can go through the series from start to finish to get a general understanding of CSS from top to bottom, or you can use it as a reference for specific styling subjects. For those new to web development overall, check out the intro to HTML course from MDN to learn all about how to write markup and link your stylesheets.&lt;/p&gt;

&lt;p&gt;So this is it for this article. Thanks for reading. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you enjoy my articles, consider following me on Twitter for more interesting stuff :&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xdzF7_iP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lf9dc7pby59jmgkstw74.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xdzF7_iP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lf9dc7pby59jmgkstw74.png" alt="Image description" width="284" height="255"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;⚡Twitter : &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't forget to leave a like if you loved the article. Also share it with your friends and colleagues.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" alt="Alt Text" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt; - If you are looking to learn Web Development, I have curated a &lt;strong&gt;FREE&lt;/strong&gt; course for you on my YouTube Channel, check the below article :&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/2021-web-developer-full-course-html-css-javascript-node-js-and-mongodb-27pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;(2021) - Web Developer Full Course : HTML, CSS, JavaScript, Node.js and MongoDB&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Apr 28 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Looking to learn React.js with one Full &lt;strong&gt;Project&lt;/strong&gt;, check this out : &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/learn-react-with-one-big-project-notes-included-demo-and-video-link-4fe5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Learn React with one BIG Project [NOTES included] - Demo and Video Link&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Jun 10 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginnners</category>
    </item>
    <item>
      <title>AWS Amplify, Secured DevOps - Part 2, Regenerate</title>
      <author>Daniel Hagen</author>
      <pubDate>Wed, 08 Dec 2021 04:37:16 +0000</pubDate>
      <link>https://dev.to/aws-builders/aws-amplify-secured-devops-part-2-1mja</link>
      <guid>https://dev.to/aws-builders/aws-amplify-secured-devops-part-2-1mja</guid>
      <description>&lt;p&gt;Ok, so if you've read &lt;a href="https://dev.to/aws-builders/aws-amplify-secured-devops-part-1-25oo"&gt;Part 1&lt;/a&gt;, you know that you should protect the &lt;code&gt;aws-exports.js&lt;/code&gt; file. The first method I will show is using only AWS Amplify tools.&lt;/p&gt;

&lt;p&gt;Why store it when it gets generated every time, right? In part 1, I mentioned that &lt;code&gt;amplify init&lt;/code&gt;, &lt;code&gt;amplify pull&lt;/code&gt;, and any &lt;code&gt;amplify add &amp;lt;feature&amp;gt;&lt;/code&gt; or &lt;code&gt;amplify remove &amp;lt;feature&amp;gt;&lt;/code&gt; will cause the &lt;code&gt;aws-exports.js&lt;/code&gt; file to be recreated.&lt;/p&gt;

&lt;p&gt;I've committed the source tree on several projects with dependencies on &lt;code&gt;src/aws-exports.js&lt;/code&gt;, which will more than break the build if it doesn't exist.&lt;/p&gt;

&lt;p&gt;So let's say that you're on your laptop. You've successfully &lt;code&gt;amplify init&lt;/code&gt; to create your environment or used the AWS Amplify Studio UI to set up your environment and then run &lt;code&gt;amplify pull --appId &amp;lt;snip&amp;gt; --envName dev&lt;/code&gt;. You've got your &lt;code&gt;src/aws-exports.js&lt;/code&gt; setup, and you're building locally. You commit your code in and move over to your desktop, and pull your code down. But running dev breaks, &lt;code&gt;src/aws-exports.js&lt;/code&gt; doesn't exist.&lt;/p&gt;

&lt;p&gt;It's pretty straightforward. We're going to run &lt;code&gt;amplify pull --appId &amp;lt;snip&amp;gt; --envName dev&lt;/code&gt; again to have it pull down all the backend settings and generate your &lt;code&gt;src/aws-exports.js&lt;/code&gt; for you.&lt;/p&gt;

&lt;p&gt;A quick note there, if you added a feature on your desktop, let's say new storage (S3) for the application, the next time you commit and switch to your laptop, you'll perform another &lt;code&gt;amplify pull&lt;/code&gt; to get back in sync. You can always run &lt;code&gt;amplify status&lt;/code&gt; to see if you are up to date against the deployed version.&lt;/p&gt;




&lt;p&gt;Now let's talk builds and CI/CD. One of the most fantastic features that you get pretty much out of the box in Amplify is a complete CI/CD pipeline. I'll look at doing a dedicated post for that feature, but I'm going to leave the details out of scope for now. The big thing that I want to point out is how it to can generate the &lt;code&gt;src/aws-exports.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Each build is executed inside a container in the AWS build environment; it inherits the IAM role provided, which allows it to authenticate to the Amplify framework and pull down the settings. This permission configuration happens by default with the default build settings. In Part 3, I'll show you how to override or specify these settings using Environment Variables.&lt;/p&gt;

&lt;p&gt;The key to this, though, is to think of it as doing a &lt;code&gt;amplify pull&lt;/code&gt; at the beginning of every build. If you're modifying your &lt;code&gt;aws-exports.js&lt;/code&gt; file (you never should), those modifications will not make it in this build. If the backend had changed and you didn't &lt;code&gt;amplify pull&lt;/code&gt; before developing, validating, and committing, your backend references may be out of sync.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>amplify</category>
      <category>fullstack</category>
      <category>cicd</category>
    </item>
    <item>
      <title>20 Awesome Github Repos Every Web Developer Should Know</title>
      <author>Human ai</author>
      <pubDate>Wed, 08 Dec 2021 04:21:51 +0000</pubDate>
      <link>https://dev.to/huai/10-awesome-github-repos-every-web-developer-should-know-2ng3</link>
      <guid>https://dev.to/huai/10-awesome-github-repos-every-web-developer-should-know-2ng3</guid>
      <description>&lt;p&gt;&lt;span&gt;Here I list 10 excellent JavaScript based GitHub resources that will help you to understand the language better and help you to write clean code. This list is based on my personal preference. &lt;/span&gt;&lt;/p&gt;
&lt;span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;ReadUI&amp;amp;quot More: &lt;b&gt;&lt;a href="https://news.google.com/articles/CAIiEHRNZDbK-6L3wLhhd1mvgX8qGQgEKhAIACoHCAow7-ynCzDc978DMKOIlgc?hl=en-US&amp;amp;gl=US&amp;amp;ceid=US%3Aen"&gt;20 Awesome Github Repos Every Web Developer Should Know&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;

</description>
    </item>
    <item>
      <title>Pitch for MQTT in IoT device Communication.  </title>
      <author>Dhruvin Vekariya</author>
      <pubDate>Wed, 08 Dec 2021 04:14:19 +0000</pubDate>
      <link>https://dev.to/dhruvinv/pitch-for-mqtt-in-iot-device-communication-mdi</link>
      <guid>https://dev.to/dhruvinv/pitch-for-mqtt-in-iot-device-communication-mdi</guid>
      <description>&lt;h3&gt;
  &lt;a href="#iot-primer"&gt;
  &lt;/a&gt;
  IoT Primer
&lt;/h3&gt;

&lt;p&gt;The internet landscape is continuously evolving, and with the introduction of faster networks such as 5G, virtually everything will be connected. This capability of more rapid, low latency internet access will spur innovation and create previously unforeseen devices. Hence, the term IoT is often broached up when talking about the future of internet connectivity. &lt;/p&gt;

&lt;p&gt;The Internet of Things — IoT, for short — is made up of devices that connect to the internet and share data with each other. Any device or object that is equipped with a  Wi-Fi chip that connects to the internet and shares/receives information is an IoT device. For instance, voice-activated speakers, thermostats or motion-sensing Wi-FI routers. All of them are examples of IoT devices. While connecting to the internet is the only requirement, actual value comes from the communication to a back-end service that can perform computations, mutations, aggregations, and all that fancy jazz!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#limitations-of-iot-communication-over-http"&gt;
  &lt;/a&gt;
  Limitations of IoT Communication over HTTP
&lt;/h3&gt;

&lt;p&gt;Communication between the devices becomes a critical aspect of the IoT infrastructure. The underlying communication protocol needs to be fast, secure, reliable and scalable enough to support mass-produced devices and simultaneously provide value. Most developers are familiar with the HTTP protocol used in web services, so why not connect IoT devices with HTTP-supported web services and call it a day? Depending on the type of use case, you can, but it only works for a small subset of cases. There are several limitations when using HTTP with IoT infrastructure. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;HTTP is one-way communication&lt;/strong&gt; - All requests are initiated by the client, and the server responds with a response. IoT devices act as a client and hence can only create requests but cannot receive any commands passively to perform an action. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;HTTP is a synchronous protocol&lt;/strong&gt; - All web browsers wait for the server to respond to a particular request, whereas this may not be the case for IoT devices. For instance, a group of sensors posting data in a high latent/unreliable network, synchronous communication may be problematic or even detrimental where precision calculations are fundamental. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;HTTP is intrinsically optimized for one-to-one communication&lt;/strong&gt; - The client makes a request, and the server responds. When a collection of IoT devices are working together, it might make sense to broadcast a response to a group of devices which is inherently complicated to achieve with HTTP protocol. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;HTTP is document-centric&lt;/strong&gt; - HTTP is optimized to share documents, meaning message sizes are much larger and need to be parsed, evaluated, etc. Thus this creates bottlenecks for already resource-constrained devices such as sensors. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For the above reasons, HTTP can not provide a suitable ecosystem for several IoT use cases. Thus, an alternative that overcomes these obstacles is MQTT. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-mqtt"&gt;
  &lt;/a&gt;
  What is MQTT
&lt;/h3&gt;

&lt;p&gt;MQTT stands for Message Queue Telemetry Transport is built on top TCP/IP stack, initially tailored towards facilitating communication between sensors and oil pipelines. It became an OASIS standard messaging protocol for IoT devices in 2014. However, its name has nothing to do with messaging queues and is actually based on Publish-Subscribe or pub-sub model. It has minimal overhead and is designed for reliable communication over unreliable connectivity. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#key-characteristics-of-mqtt"&gt;
  &lt;/a&gt;
  Key Characteristics of MQTT
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Binary Responses&lt;/strong&gt; - MQTT is a binary-based protocol; the control element, unlike HTTP, is bytes. Text-based protocols are not suitable for machines as all machines operate via binary data manipulation. The smallest possible response over MQTT is 2 bytes, whereas the minimum possible response is 17 bytes over HTTP. Therefore, MQTT is lightweight and super-efficient.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Bi-Directional Communication&lt;/strong&gt; - MQTT allows messaging between the device to cloud and cloud to the device. Thus, enabling message broadcasting.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Data Agnostic&lt;/strong&gt; - The transport of payload itself is agnostic to the content of payload, hence it is possible to send a payload of all imaginable data types (even custom data types).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Built on top TCP/IP&lt;/strong&gt; - This provides necessary benefits of using TCP such as packet reliability, persistence etc. Furthermore, MQTT can also run SSL/TLS, ensuring the data communication is encrypted and secure. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The above-listed benefits are vital in supporting IoT devices while providing necessary scalability. However, the actual benefits stem from the publish-subscribe architecture embodied by the MQTT protocol.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#publishsubscribe-model"&gt;
  &lt;/a&gt;
  Publish-Subscribe Model
&lt;/h3&gt;

&lt;p&gt;In a traditional server-client architecture, the client communicates to a server, and the server responds back with a response. In contrast to the conventional view, client-server entities are decoupled into two entities in the pub-sub model, &lt;strong&gt;broker&lt;/strong&gt; and &lt;strong&gt;clients&lt;/strong&gt;. There are two types of clients, a &lt;strong&gt;publisher&lt;/strong&gt;, a client that sends messages and a &lt;strong&gt;subscriber&lt;/strong&gt;, which receives messages. &lt;/p&gt;

&lt;p&gt;The purpose of the broker, as the name suggests, is to facilitate message passing between the clients. All messaging in the MQTT broker is distributed based on topics. A subscriber client subscribes to particular topics, and similarly, a Publisher client publishes a message and topic to the broker. The broker then, based on the topic, forwards the messages to appropriate clients. This decoupling provides numerous benefits over traditional client-server architecture.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Each client does not need to know every other client's existence. To receive or publish messages, the client only needs to know the broker's host IP.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Each client does not need to run simultaneously. Brokers can store messages and enable the creation of new topics on the fly. Hence, clients go through their cycle of receiving and sending notifications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Each client can work asynchronously to send and receive messages. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#figure-1-pubsub-in-the-smart-speaker"&gt;
  &lt;/a&gt;
  Figure 1:  Pub-Sub in the smart speaker
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GtULHAhV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jgw9v3ussk2l4dc2cvf5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GtULHAhV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jgw9v3ussk2l4dc2cvf5.png" alt="Smart Speaker example" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;This article provides a high-level overview of the MQTT protocol and contrasts it against the beloved HTTP. It only introduces MQTT at a surface but reasons about the benefits of using it over the widely popular HTTP. If you are interested in learning more about MQTT, check out the links attached below.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#suggested-readings"&gt;
  &lt;/a&gt;
  Suggested Readings
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.hivemq.com/mqtt-client-library-encyclopedia/"&gt;Guide to starting coding with MQTT&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.hivemq.com/mqtt-essentials/"&gt;Further Reading to MQTT&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mqtt.org/use-cases/"&gt;MQTT Use Cases&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.ibm.com/articles/iot-mqtt-why-good-for-iot/"&gt;Intro to MQTT&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Git Cheat Sheet- 20 commands I Use Everyday</title>
      <author>Human ai</author>
      <pubDate>Wed, 08 Dec 2021 04:07:25 +0000</pubDate>
      <link>https://dev.to/huai/git-cheat-sheet-20-commands-i-use-everyday-3o3b</link>
      <guid>https://dev.to/huai/git-cheat-sheet-20-commands-i-use-everyday-3o3b</guid>
      <description>&lt;p&gt;Hey Coders!&lt;br&gt;When I started coding, tracking changes in my codes was always painful and the fear of losing files was always there. But now we have Git to tackle these problems, it has everything you need to make your coding environment safe and easy. Git is so important for every programmer's daily life especially when you are working with a team. The software industry widely uses it but mastering all the commands can take time, so keep practising! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Read More&lt;/strong&gt;: &lt;strong&gt;&lt;span&gt;&lt;a href="https://www.codelivly.com/git-cheat-sheet-20-commands-i-use-everyday/" rel="noreferrer noopener"&gt;Git Cheat Sheet- 20 commands I Use Everyday&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Projects ideas to become a javascript master 🚀 Resource compilation 💥</title>
      <author>Human ai</author>
      <pubDate>Wed, 08 Dec 2021 03:36:56 +0000</pubDate>
      <link>https://dev.to/huai/projects-ideas-to-become-a-javascript-master-resource-compilation-3leo</link>
      <guid>https://dev.to/huai/projects-ideas-to-become-a-javascript-master-resource-compilation-3leo</guid>
      <description>&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;The best way to learn a new programming language is to build projects.

I have created a list of 40 beginner friendly project tutorials in Vanilla JavaScript, React, and TypeScript.

My advice for tutorials would be to watch the video, build the project, break it apart and rebuild it your own way. Experiment with adding new features or using different methods.

That will test if you have really learned the concepts or not.

You can click on any of the projects listed below to jump to that section of the article.

&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/40-javascript-projects-for-beginners/&amp;amp;ved=2ahUKEwiB9tj0rPjyAhUMX30KHZQ5CG0QFnoECAgQAQ&amp;amp;usg=AOvVaw26RDQjHugdhbATVS83LI83"&gt;Projects ideas to become a javascript master 🚀 Resource compilation 💥

&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>15 JavaScript Tips &amp; Tricks That No One Teaches 🚀</title>
      <author>Human ai</author>
      <pubDate>Wed, 08 Dec 2021 03:35:40 +0000</pubDate>
      <link>https://dev.to/huai/15-javascript-tips-tricks-that-no-one-teaches-5cc6</link>
      <guid>https://dev.to/huai/15-javascript-tips-tricks-that-no-one-teaches-5cc6</guid>
      <description>&lt;p&gt;JavaScript is no doubt one of the coolest languages in the world and is gaining more and more popularity day by day. So the developer community has found some tricks and tips after using JS for quite a while now. Today I will share 15 Tips &amp;amp; Tricks With You!&lt;/p&gt;

&lt;p&gt;So let's get started &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Read More: &lt;span&gt;&lt;a href="https://www.codelivly.com/8-javascript-tips-tricks-that-no-one-teaches/" rel="noreferrer noopener nofollow"&gt;15 JavaScript Tips &amp;amp; Tricks That No One Teaches 🚀&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Bases de datos y ORM</title>
      <author>Pablo Agustín Canale</author>
      <pubDate>Wed, 08 Dec 2021 02:53:29 +0000</pubDate>
      <link>https://dev.to/pablocanale/bases-de-datos-y-orm-3d5m</link>
      <guid>https://dev.to/pablocanale/bases-de-datos-y-orm-3d5m</guid>
      <description>&lt;p&gt;La base de datos es una recopilación de datos e información de forma organizada y estructurada.&lt;br&gt;
Normalmente cuentan con un sistema de gestión de base de datos (DBMS).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bases-de-datos-relacionales"&gt;
  &lt;/a&gt;
  BASES DE DATOS RELACIONALES
&lt;/h2&gt;

&lt;p&gt;Es el modelo más utilizado hoy en día.&lt;br&gt;
En esencia las bases de datos relacionales son un conjunto de tablas formadas por columnas (campos) y filas (registros). La estructura nos ayuda a hacer &lt;strong&gt;relaciones&lt;/strong&gt; entre tablas mediante &lt;strong&gt;claves foráneas&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;¿QUÉ ES UN DBMS?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Es un programa que te permite crear, editar y administrar las bases de datos. La mayoria de las relacionales utilizan SQL, como MySQL o PostgreSQL.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;¿QUÉ ES SQL?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Es un lenguaje de programación usado por casi todas las bases de datos relacionales para consultar, definir y manipular datos. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PRINCIPIOS ACID&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H1Ar2Gcs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfa3addre1obkoiatdmj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H1Ar2Gcs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfa3addre1obkoiatdmj.png" alt="Image description" width="386" height="491"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#object-relational-mapping-orm"&gt;
  &lt;/a&gt;
  OBJECT RELATIONAL MAPPING (ORM)
&lt;/h2&gt;

&lt;p&gt;Es un modelo de programación que consiste en la transformación de las tablas de una base de datos, en una serie de entidades que simplifiquen las tareas básicas de acceso a los datos para el programador. &lt;/p&gt;

&lt;p&gt;¿Porqué queremos un ORM?&lt;/p&gt;

&lt;p&gt;Como sabemos SQL es el lenguaje más utilazado de consulta pero existen varios sistemas de gestión de base de datos que cuentan con diferencias en los mismos tipos de consultas, por ejemplo&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EFo_-GFR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijdhmv8idums8b0exjue.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EFo_-GFR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijdhmv8idums8b0exjue.png" alt="Image description" width="429" height="72"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Esto nos lleva a dificultades en el desarrollo ya que deberiamos aprendernos estas variaciones para cada base de datos distinta en la que trabajemos, y mas importante aún, si en un futuro deseamos migrar la aplicación, habría que reescribir una gran cantidad de consultas.&lt;/p&gt;

&lt;p&gt;Con el ORM nos facilitamos el trabajo, nos brinda ayuda en las labores básicas de cualquier acceso a datos, el CRUD (Create, Read, Update, Delete). Realizando todas estas labores a través de un lenguaje orientado a objetos.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>orm</category>
      <category>webdev</category>
      <category>database</category>
    </item>
  </channel>
</rss>
