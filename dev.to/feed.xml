<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>When to use the useRef hook ? </title>
      <author>The Nerdy Dev</author>
      <pubDate>Tue, 18 Jan 2022 13:38:56 +0000</pubDate>
      <link>https://dev.to/thenerdydev/when-to-use-the-useref-hook--3iom</link>
      <guid>https://dev.to/thenerdydev/when-to-use-the-useref-hook--3iom</guid>
      <description>&lt;p&gt;Hey everyone üëãüèª,&lt;/p&gt;

&lt;p&gt;In this article, let us learn about a very special React Hook called as the &lt;strong&gt;useRef&lt;/strong&gt; hook and understand how and when to use it. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article was first published on &lt;a href="https://the-nerdy-dev.com/when-to-use-the-usecallback-hook/"&gt;https://the-nerdy-dev.com&lt;/a&gt;.&lt;br&gt;
Check the website for more interesting articles and tutorials on Web Development.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-the-raw-useref-endraw-hook-"&gt;
  &lt;/a&gt;
  What is the &lt;code&gt;useRef&lt;/code&gt; hook ?
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;useRef&lt;/code&gt; hook is something that I briefly discussed in one of my articles where I described useRef hook as something equivalent to &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Removing the state updating function from the &lt;code&gt;useState&lt;/code&gt;, so basically just extracting the piece of state and take away the ability of state updation. This is something that will be equivalent to the &lt;code&gt;useRef&lt;/code&gt; hook. I also discussed in that article that both the ref and state values persists across renders, so it is not the case that on every subsequent re-render they get set back to some default. So do make a note of the above points.&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;useRef&lt;/code&gt; is a React Hook which accepts a single argument as the initial default value and gives us something called as a &lt;code&gt;ref&lt;/code&gt;. A ref is kind of an object that has a property called as &lt;code&gt;current&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Let us see an example :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SomeComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;usernameRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSomething&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;usernameRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currrent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;usernameRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;someOtherValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now the things to note here is that &lt;code&gt;usernameRef.current&lt;/code&gt; is used to access the value of the ref and if we want to update the ref value, then we can simply do so by setting &lt;code&gt;usernameRef.current&lt;/code&gt; to a value of our choice. &lt;/p&gt;

&lt;p&gt;To know more about refs, check my existing article on useRef hook. Here is the link for the same : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VANdOKgU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nc3fgautoc93fi2ive0u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VANdOKgU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nc3fgautoc93fi2ive0u.png" alt="Image description" width="880" height="494"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/useref-hook-useref-vs-usestate-3i7k" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;useRef Hook | useRef vs useState&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev „Éª Jul 21 '21 „Éª 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;In the above article, I have also taken some examples where I have demonstrated the usage of the &lt;code&gt;useRef&lt;/code&gt; hook, we have discussed : &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Ref Example - 1 (An Interval Timer)&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;2. Ref Example - 2 (Working with DOM using refs)&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;3. The third thing that we discussed in that article was :&lt;/strong&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;useRef just like useState persists a value across renders but unlike useState it does not trigger a re-render of the component.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So in essence, &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;useRef = useState - state updating function&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you don't know about the &lt;code&gt;useState&lt;/code&gt;, no worries. You can learn about the same in this article : &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/react-hooks-demystifying-the-usestate-hook-in-under-10-minutes-examples-video-29ab" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;React Hooks : Demystifying the useState hook in under 10 minutes [examples + video]&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev „Éª Jun 28 '21 „Éª 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#lets-sum-up-what-we-learnt-"&gt;
  &lt;/a&gt;
  Let's sum up what we learnt :
&lt;/h2&gt;

&lt;p&gt;A ref is a plain JavaScript Object &lt;br&gt;
&lt;code&gt;{ current: &amp;lt;some_value&amp;gt; }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you want to create a ref with the current value as null, then you can also make use of the &lt;code&gt;createRef&lt;/code&gt; method, &lt;br&gt;
&lt;code&gt;React.createRef()&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;This gives us : &lt;br&gt;
&lt;code&gt;{ current: null }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next, &lt;code&gt;useRef(someInitialValue)&lt;/code&gt; also gives us a ref &lt;code&gt;{ current: someInitialValue }&lt;/code&gt;. The interesting thing about &lt;code&gt;useRef&lt;/code&gt; is that it memoizes this ref so that it stays persistent across multiple renders of the component. &lt;/p&gt;

&lt;p&gt;Another point to make a note of is that : &lt;/p&gt;

&lt;p&gt;&lt;code&gt;useRef(null)&lt;/code&gt; is basically equivalent to &lt;code&gt;useState(React.createRef())[0]&lt;/code&gt;&lt;br&gt;
But this kind of abuses the functionality. &lt;/p&gt;

&lt;p&gt;Lastly, we learnt that &lt;code&gt;useState&lt;/code&gt; causes a re-render in contrast to &lt;code&gt;useRef&lt;/code&gt;. The state and the ref values (both) persist across re-renders. &lt;/p&gt;

&lt;p&gt;So this is it for this article. Thanks for reading. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you enjoy my articles, consider following me on Twitter for more interesting stuff :&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xdzF7_iP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lf9dc7pby59jmgkstw74.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xdzF7_iP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lf9dc7pby59jmgkstw74.png" alt="Image description" width="284" height="255"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;‚ö°Twitter : &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't forget to leave a like if you loved the article. Also share it with your friends and colleagues.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" alt="Alt Text" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt; - If you are looking to learn Web Development, I have curated a &lt;strong&gt;FREE&lt;/strong&gt; course for you on my YouTube Channel, check the below article :&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/2021-web-developer-full-course-html-css-javascript-node-js-and-mongodb-27pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;(2021) - Web Developer Full Course : HTML, CSS, JavaScript, Node.js and MongoDB&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev „Éª Apr 28 '21 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Looking to learn React.js with one Full &lt;strong&gt;Project&lt;/strong&gt;, check this out : &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/learn-react-with-one-big-project-notes-included-demo-and-video-link-4fe5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Learn React with one BIG Project [NOTES included] - Demo and Video Link&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev „Éª Jun 10 '21 „Éª 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>react</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Simple Quiz Project Using Vue</title>
      <author>MedanInCode</author>
      <pubDate>Tue, 18 Jan 2022 13:21:49 +0000</pubDate>
      <link>https://dev.to/medan_in_code/simple-quiz-project-using-vue-4hc9</link>
      <guid>https://dev.to/medan_in_code/simple-quiz-project-using-vue-4hc9</guid>
      <description>&lt;p&gt;Simple Quiz app using vue js&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link To Code
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://github.com/medanincode/vue-simple-quiz"&gt;Github Link&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h4&gt;

&lt;p&gt;Project is demo on &lt;a href="https://simple-quiz-vue.netlify.app/"&gt;https://simple-quiz-vue.netlify.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I7d5kBCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ofznbdms8dbjhl73mim.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I7d5kBCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ofznbdms8dbjhl73mim.png" alt="Simple Quiz" width="880" height="447"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>quiz</category>
    </item>
    <item>
      <title>Introduction to Machine Learning with AWS - Part 1</title>
      <author>Adit Modi</author>
      <pubDate>Tue, 18 Jan 2022 13:17:35 +0000</pubDate>
      <link>https://dev.to/aws-builders/introduction-to-machine-learning-with-aws-part-1-476m</link>
      <guid>https://dev.to/aws-builders/introduction-to-machine-learning-with-aws-part-1-476m</guid>
      <description>&lt;p&gt;AWS offers the broadest and deepest set of machine learning services and supporting cloud infrastructure, putting machine learning in the hands of every developer, data scientist and expert practitioner.&lt;/p&gt;

&lt;p&gt;In this blog post, we will discuss some of the most important AWS machine learning services that help you make accurate predictions, get deeper insights from your data, reduce operational overhead, and improve customer experience. AWS helps you at every stage of your ML adoption journey with the most comprehensive set of artificial intelligence (AI) and ML services, infrastructure, and implementation resources.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9-h_GGkg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dovlzi24raggblu8n3ld.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9-h_GGkg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dovlzi24raggblu8n3ld.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;The Introduction to AWS&lt;/strong&gt; is a Series containing different articles that provide a basic introduction to different aws topics/categories. Each article covers the detailed guide on how to work with particular topic/category . This series aims at providing "A Getting Started Guide on Different aws topics / categories ."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#aws-machine-learning-services"&gt;
  &lt;/a&gt;
  AWS Machine Learning Services
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;AWS helps streamline self-service processes and reduce operational costs through chatbots and virtual assistants.&lt;/li&gt;
&lt;li&gt;AWS compiles data from siloed and unstructured sources across your organization to drive business productivity and customer satisfaction.&lt;/li&gt;
&lt;li&gt;AWS helps drive customer engagement and conversion with websites tailored to individual visitors‚Äîand see your conversion rates soar.&lt;/li&gt;
&lt;li&gt;Using AWS, customers can instantly extract text and data from virtually any document, such as loan applications and medical forms, without manual effort.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#sagemaker"&gt;
  &lt;/a&gt;
  SageMaker
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V-YXppNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7tgpvim9ms3gt12tjyo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V-YXppNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7tgpvim9ms3gt12tjyo.png" alt="image" width="133" height="134"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;SageMaker is a fully-managed platform that enables developers and data scientists to quickly and easily build, train, and deploy machine learning models at any scale. SageMaker removes all the barriers that typically slow down developers who want to use machine learning.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Machine learning often feels a lot harder than it should be to most developers because the process to build and train models, and then deploy them into production is too complicated and too slow. First, you need to collect and prepare your training data to discover which elements of your data set are important. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then, you need to select which algorithm and framework you‚Äôll use. After deciding on your approach, you need to teach the model how to make predictions by training, which requires a lot of compute. Then, you need to tune the model so it delivers the best possible predictions, which is often a tedious and manual effort. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After you‚Äôve developed a fully trained model, you need to integrate the model with your application and deploy this application on infrastructure that will scale. All of this takes a lot of specialized expertise, access to large amounts of compute and storage, and a lot of time to experiment and optimize every part of the process. In the end, it's not a surprise that the whole thing feels out of reach for most developers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SageMaker removes the complexity that holds back developer success with each of these steps. SageMaker includes modules that can be used together or independently to build, train, and deploy your machine learning models.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#sagemaker-ground-truth"&gt;
  &lt;/a&gt;
  SageMaker Ground Truth
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BNifetzv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5u7ra2g1j7kk7xpiawwd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BNifetzv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5u7ra2g1j7kk7xpiawwd.png" alt="image" width="138" height="139"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;SageMaker Ground Truth helps you build highly accurate training datasets for machine learning quickly. SageMaker Ground Truth offers easy access to public and private human labelers and provides them with built-in workflows and interfaces for common labeling tasks. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Additionally, SageMaker Ground Truth can lower your labeling costs by up to 70% using automatic labeling, which works by training Ground Truth from data labeled by humans so that the service learns to label data independently.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Successful machine learning models are built on the shoulders of large volumes of high-quality training data. But, the process to create the training data necessary to build these models is often expensive, complicated, and time-consuming. The majority of models created today require a human to manually label data in a way that allows the model to learn how to make correct decisions. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For example, building a computer vision system that is reliable enough to identify objects - such as traffic lights, stop signs, and pedestrians - requires thousands of hours of video recordings that consist of hundreds of millions of video frames. Each one of these frames needs all of the important elements like the road, other cars, and signage to be labeled by a human before any work can begin on the model you want to develop.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon SageMaker Ground Truth significantly reduces the time and effort required to create datasets for training to reduce costs. These savings are achieved by using machine learning to automatically label data. The model is able to get progressively better over time by continuously learning from labels created by human labelers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Where the labeling model has high confidence in its results based on what it has learned so far, it will automatically apply labels to the raw data. Where the labeling model has lower confidence in its results, it will pass the data to humans to do the labeling. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The human-generated labels are provided back to the labeling model for it to learn from and improve. Over time, SageMaker Ground Truth can label more and more data automatically and substantially speed up the creation of training datasets.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#amazon-comprehend"&gt;
  &lt;/a&gt;
  Amazon Comprehend
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sYzaNuIS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uspyi1v6h346errzrck7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sYzaNuIS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uspyi1v6h346errzrck7.png" alt="image" width="140" height="141"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon Comprehend is a natural language processing (NLP) service that uses machine learning to find insights and relationships in text. No machine learning experience required.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is a treasure trove of potential sitting in your unstructured data. Customer emails, support tickets, product reviews, social media, even advertising copy represents insights into customer sentiment that can be put to work for your business. The question is how to get at it? As it turns out, Machine learning is particularly good at accurately identifying specific items of interest inside vast swathes of text (such as finding company names in analyst reports), and can learn the sentiment hidden inside language (identifying negative reviews, or positive customer interactions with customer service agents), at almost limitless scale.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Comprehend uses machine learning to help you uncover the insights and relationships in your unstructured data. The service identifies the language of the text; extracts key phrases, places, people, brands, or events; understands how positive or negative the text is; analyzes text using tokenization and parts of speech; and automatically organizes a collection of text files by topic. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can also use AutoML capabilities in Amazon Comprehend to build a custom set of entities or text classification models that are tailored uniquely to your organization‚Äôs needs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For extracting complex medical information from unstructured text, you can use Amazon Comprehend Medical. The service can identify medical information, such as medical conditions, medications, dosages, strengths, and frequencies from a variety of sources like doctor‚Äôs notes, clinical trial reports, and patient health records. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Comprehend Medical also identifies the relationship among the extracted medication and test, treatment and procedure information for easier analysis. For example, the service identifies a particular dosage, strength, and frequency related to a specific medication from unstructured clinical notes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#amazon-lex"&gt;
  &lt;/a&gt;
  Amazon Lex
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--728IKWGD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k3x5ye021m3wzo31v9lt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--728IKWGD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k3x5ye021m3wzo31v9lt.png" alt="image" width="140" height="141"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon Lex is a service for building conversational interfaces into any application using voice and text. Lex provides the advanced deep learning functionalities of automatic speech recognition (ASR) for converting speech to text, and natural language understanding (NLU) to recognize the intent of the text, to enable you to build applications with highly engaging user experiences and lifelike conversational interactions. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With Amazon Lex, the same deep learning technologies that power Amazon Alexa are now available to any developer, enabling you to quickly and easily build sophisticated, natural language, conversational bots (‚Äúchatbots‚Äù).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Speech recognition and natural language understanding are some of the most challenging problems to solve in computer science, requiring sophisticated deep learning algorithms to be trained on massive amounts of data and infrastructure. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Lex democratizes these deep learning technologies by putting the power of Alexa within reach of all developers. Harnessing these technologies, Amazon Lex enables you to define entirely new categories of products made possible through conversational interfaces.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#amazon-polly"&gt;
  &lt;/a&gt;
  Amazon Polly
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vDQ8La5P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5d4e97r0unoj9mvppl1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vDQ8La5P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5d4e97r0unoj9mvppl1.png" alt="image" width="133" height="134"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon Polly is a service that turns text into lifelike speech. Polly lets you create applications that talk, enabling you to build entirely new categories of speech-enabled products. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Polly is an Amazon artificial intelligence (AI) service that uses advanced deep learning technologies to synthesize speech that sounds like a human voice. Polly includes 47 lifelike voices spread across 24 languages, so you can select the ideal voice and build speech-enabled applications that work in many different countries.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Polly delivers the consistently fast response times required to support real-time, interactive dialog. You can cache and save Polly‚Äôs speech audio to replay offline or redistribute. And Polly is easy to use. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You simply send the text you want converted into speech to the Polly API, and Polly immediately returns the audio stream to your application so your application can play it directly or store it in a standard audio file format, such as MP3.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With Polly, you only pay for the number of characters you convert to speech, and you can save and replay Polly‚Äôs generated speech. Polly‚Äôs low cost per character converted, and lack of restrictions on storage and reuse of voice output, make it a cost-effective way to enable Text-to-Speech everywhere.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#amazon-rekognition"&gt;
  &lt;/a&gt;
  Amazon Rekognition
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UHpzbzDx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ppjzk80dgkiq0095itw2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UHpzbzDx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ppjzk80dgkiq0095itw2.png" alt="image" width="134" height="134"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon Rekognition is a service that makes it easy to add image analysis to your applications. With Rekognition, you can detect objects, scenes, and faces in images. You can also search and compare faces. The Amazon Rekognition API enables you to quickly add sophisticated deep-learning-based visual search and image classification to your applications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Rekognition is based on the same proven, highly scalable, deep learning technology developed by Amazon‚Äôs computer vision scientists to analyze billions of images daily for Prime Photos. Amazon Rekognition uses deep neural network models to detect and label thousands of objects and scenes in your images, and we are continually adding new labels and facial recognition features to the service.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Amazon Rekognition API lets you easily build powerful visual search and discovery into your applications. With Amazon Rekognition, you only pay for the images you analyze and the face metadata you store. There are no minimum fees, and there are no upfront commitments.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#amazon-translate"&gt;
  &lt;/a&gt;
  Amazon Translate
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZwiLdf42--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0shi3f5g3p2anppo7mkf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZwiLdf42--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0shi3f5g3p2anppo7mkf.png" alt="image" width="138" height="139"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon Translate is a neural machine translation service that delivers fast, high-quality, and affordable language translation. Neural machine translation is a form of language translation automation that uses deep learning models to deliver more accurate and more natural sounding translation than traditional statistical and rule-based translation algorithms. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Translate allows you to localize content - such as websites and applications - for international users, and to easily translate large volumes of text efficiently.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#amazon-transcribe"&gt;
  &lt;/a&gt;
  Amazon Transcribe
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z7zK_KLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4rwezftk5qttgigy8mq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z7zK_KLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4rwezftk5qttgigy8mq.png" alt="image" width="143" height="143"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon Transcribe is an automatic speech recognition (ASR) service that makes it easy for developers to add speech-to-text capability to their applications. Using the Amazon Transcribe API, you can analyze audio files stored in Amazon S3 and have the service return a text file of the transcribed speech. You can also send a live audio stream to Amazon Transcribe and receive a stream of transcripts in real time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Transcribe can be used for lots of common applications, including the transcription of customer service calls and generating subtitles on audio and video content. The service can transcribe audio files stored in common formats, like WAV and MP3, with time stamps for every word so that you can easily locate the audio in the original source by searching for the text. Amazon Transcribe is continually learning and improving to keep pace with the evolution of language.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#amazon-forecast"&gt;
  &lt;/a&gt;
  Amazon Forecast
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q3qWeMrs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bcwse141z84opqp5x9gw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q3qWeMrs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bcwse141z84opqp5x9gw.png" alt="image" width="141" height="141"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon Forecast is a fully managed service that uses machine learning to deliver highly accurate forecasts.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Companies today use everything from simple spreadsheets to complex financial planning software to attempt to accurately forecast future business outcomes such as product demand, resource needs, or financial performance. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;These tools build forecasts by looking at a historical series of data, which is called time series data. For example, such tools may try to predict the future sales of a raincoat by looking only at its previous sales data with the underlying assumption that the future is determined by the past. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This approach can struggle to produce accurate forecasts for large sets of data that have irregular trends. Also, it fails to easily combine data series that change over time (such as price, discounts, web traffic, and number of employees) with relevant independent variables like product features and store locations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Based on the same technology used at Amazon.com, Amazon Forecast uses machine learning to combine time series data with additional variables to build forecasts. Amazon Forecast requires no machine learning experience to get started. You only need to provide historical data, plus any additional data that you believe may impact your forecasts. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For example, the demand for a particular color of a shirt may change with the seasons and store location. This complex relationship is hard to determine on its own, but machine learning is ideally suited to recognize it. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once you provide your data, Amazon Forecast will automatically examine it, identify what is meaningful, and produce a forecasting model capable of making predictions that are up to 50% more accurate than looking at time series data alone.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Forecast is a fully managed service, so there are no servers to provision, and no machine learning models to build, train, or deploy. You pay only for what you use, and there are no minimum fees and no upfront commitments.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#amazon-textract"&gt;
  &lt;/a&gt;
  Amazon Textract
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b43Cbexx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6diu7xchy6pwrge3nux.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b43Cbexx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6diu7xchy6pwrge3nux.png" alt="image" width="138" height="139"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon Textract is a service that automatically extracts text and data from scanned documents. Amazon Textract goes beyond simple optical character recognition (OCR) to also identify the contents of fields in forms and information stored in tables.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Many companies today extract data from documents and forms through manual data entry that‚Äôs slow and expensive or through simple optical character recognition (OCR) software that is difficult to customize. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rules and workflows for each document and form often need to be hard-coded and updated with each change to the form or when dealing with multiple forms. If the form deviates from the rules, the output is often scrambled and unusable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Textract overcomes these challenges by using machine learning to instantly ‚Äúread‚Äù virtually any type of document to accurately extract text and data without the need for any manual effort or custom code. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With Textract you can quickly automate document workflows, enabling you to process millions of document pages in hours. Once the information is captured, you can take action on it within your business applications to initiate next steps for a loan application or medical claims processing. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Additionally, you can create smart search indexes, build automated approval workflows, and better maintain compliance with document archival rules by flagging data that may require redaction.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#amazon-personalize"&gt;
  &lt;/a&gt;
  Amazon Personalize
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cmQLQeib--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tkkn1rtao4y0uxu3kvmx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cmQLQeib--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tkkn1rtao4y0uxu3kvmx.png" alt="image" width="133" height="134"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon Personalize is a machine learning service that makes it easy for developers to create individualized recommendations for customers using their applications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Machine learning is being increasingly used to improve customer engagement by powering personalized product and content recommendations, tailored search results, and targeted marketing promotions. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;However, developing the machine-learning capabilities necessary to produce these sophisticated recommendation systems has been beyond the reach of most organizations today due to the complexity of developing machine learning functionality. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Personalize allows developers with no prior machine learning experience to easily build sophisticated personalization capabilities into their applications, using machine learning technology perfected from years of use on Amazon.com.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With Amazon Personalize, you provide an activity stream from your application ‚Äì page views, signups, purchases, and so forth ‚Äì as well as an inventory of the items you want to recommend, such as articles, products, videos, or music. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can also choose to provide Amazon Personalize with additional demographic information from your users such as age, or geographic location. Amazon Personalize will process and examine the data, identify what is meaningful, select the right algorithms, and train and optimize a personalization model that is customized for your data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All data analyzed by Amazon Personalize is kept private and secure, and only used for your customized recommendations. You can start serving your personalized predictions via a simple API call from inside the virtual private cloud that the service maintains. You pay only for what you use, and there are no minimum fees and no upfront commitments.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Personalize is like having your own Amazon.com machine learning personalization team at your disposal, 24 hours a day.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Hope this guide helps you with the Introduction to Machine Learning with AWS - Part-1. In the Next Blog Post, we will discuss more about different Machine learning Services that are available with AWS.&lt;/p&gt;

&lt;p&gt;Let me know your thoughts in the comment section üëá&lt;br&gt;
And if you haven't yet, make sure to follow me on below handles:&lt;/p&gt;

&lt;p&gt;üëã &lt;strong&gt;connect with me on &lt;a href="https://www.linkedin.com/in/adit-modi-2a4362191/"&gt;LinkedIn&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
ü§ì &lt;strong&gt;connect with me on &lt;a href="https://twitter.com/adi_12_modi"&gt;Twitter&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
üê±‚Äçüíª &lt;strong&gt;follow me on &lt;a href="https://github.com/AditModi"&gt;github&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
‚úçÔ∏è &lt;strong&gt;Do Checkout &lt;a href="https://aditmodi.hashnode.dev"&gt;my blogs&lt;/a&gt;&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Like, share and follow me üöÄ for more content.&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__497987"&gt;
  
    .ltag__user__id__497987 .follow-action-button {
      background-color: #000000 !important;
      color: #fa6c00 !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/aditmodi" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FYJrtrA_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--mUzXbt1U--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/497987/edde8513-7308-4a4d-9592-2be160d074d2.png" alt="aditmodi image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/aditmodi"&gt;Adit Modi&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/aditmodi"&gt;Cloud Engineer | AWS Community Builder | 8x AWS Certified | 3x Azure Certified | Author of Cloud Tech , DailyDevOps &amp;amp; BigDataJournal | DEV moderator&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>aws</category>
      <category>machinelearning</category>
      <category>beginners</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Apply Filter when history.push() using React.JS and Umi.JS</title>
      <author>Manas Mishra</author>
      <pubDate>Tue, 18 Jan 2022 12:35:15 +0000</pubDate>
      <link>https://dev.to/manas_dev/apply-filter-when-historypush-using-reactjs-and-umijs-2fje</link>
      <guid>https://dev.to/manas_dev/apply-filter-when-historypush-using-reactjs-and-umijs-2fje</guid>
      <description>&lt;p&gt;Recently, working on a project (Which is built using ReactJS and routing is based on Umi.JS). And, I got a scenario where, I created a statistics page (in which I am showing the count of every different type of data of a particular category), and then I have to create a button of each category, which should push to that particualr category page (using history.push()).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---UsVhZxR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5ng6dpp66mnl615aftb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---UsVhZxR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5ng6dpp66mnl615aftb.png" alt="Branch Statistics page" width="880" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, initially, when I click over "View Complaints" button then it used to just take me to &lt;em&gt;Complaints&lt;/em&gt; page. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bUMR-V7m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vetkegyua1hph3pk7mq1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bUMR-V7m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vetkegyua1hph3pk7mq1.png" alt="View Complaints" width="880" height="279"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, what I want to do is when I click on the "View Complaints" then instead of just pushing the history to that specific page, it should even pass the specific &lt;code&gt;branchId&lt;/code&gt; as a &lt;code&gt;query&lt;/code&gt;, which will behave as a filter over the pushed page (complaints page). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-did"&gt;
  &lt;/a&gt;
  What I did?
&lt;/h2&gt;

&lt;p&gt;At first, I focused on the button to be clicked, which means "View Complaints" Page. &lt;/p&gt;

&lt;p&gt;At first, my button code was looking like this...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt;
  &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;primary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stopPropagation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/complaints/all`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="nx"&gt;Complaints&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As, I already mentioned that I have to send branchId as a query to apply filter, so I have to send the query with the path, inside &lt;code&gt;history.push()&lt;/code&gt; and now, it looks like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt;
&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;primary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stopPropagation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="na"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`/complaints/all`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;branchId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;profileId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
 &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="nx"&gt;Complaints&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and now with this thing, it will pass query, when you click on the button. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--neDwGEIT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e7tmprd005vdz0xzclwa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--neDwGEIT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e7tmprd005vdz0xzclwa.png" alt="query id" width="487" height="57"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But, this will still not apply the filter, and for that, I have to pass query to the filter function, which is eventually getting the filtered data from the API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useLocation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;umi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;branchQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLocation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then, I am calling the query inside the function, where we are dispatching the API, with the query as a payload.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFinishedComplaints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;statusId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CRQ_CLOSED&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;customerId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;currentUser&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;personal_details&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;organizationDetails&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;orgPartyId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;keyword&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;searchText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;startIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;completeStartIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;viewSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;completeViewSize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;branchQuery&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;branchId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;branchId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;branchQuery&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;branchId&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;product/getFinishedComplaints&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And, in this way, you can easily apply filter functionality, by passing query using history.push() of Umi.js. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alternative-way"&gt;
  &lt;/a&gt;
  Alternative way
&lt;/h2&gt;

&lt;p&gt;You can even use &lt;code&gt;react-router-dom&lt;/code&gt; for above given functionality. &lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>routing</category>
      <category>webdev</category>
    </item>
    <item>
      <title>GitLab CI/CD Tutorial For Beginners | Learn GitLab In 1 Hour</title>
      <author>LambdaTest</author>
      <pubDate>Tue, 18 Jan 2022 12:29:47 +0000</pubDate>
      <link>https://dev.to/lambdatest/gitlab-cicd-tutorial-for-beginners-learn-gitlab-in-1-hour-4cpm</link>
      <guid>https://dev.to/lambdatest/gitlab-cicd-tutorial-for-beginners-learn-gitlab-in-1-hour-4cpm</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/B68jcGfH4C8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In this GitLab Tutorial for beginners and experienced QA engineers, deep dive into the fundamentals of CI/CD, which helps you understand what is CI/CD in DevOps, what is CI/CD Pipeline and the difference between Continuous Delivery and Continuous Deployment. Further, this video explains what is GitLab trigger, what are GitLab environment variables, and how to set environment variables in GitLab. By the end of this video, you will be able to build and run an automated tested GitLab CI/CD pipeline and perform cross browser testing using Lambda Test. &lt;/p&gt;

&lt;p&gt;Also Learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is CI/CD in GitLab?&lt;/li&gt;
&lt;li&gt;How do you write CI/CDs in GitLab? &lt;/li&gt;
&lt;li&gt;How do you create a GitLab CI CD pipeline?&lt;/li&gt;
&lt;li&gt;What is Gitlab trigger?&lt;/li&gt;
&lt;li&gt;How do I run a GitLab pipeline?&lt;/li&gt;
&lt;li&gt;How do you run CI/CD pipeline?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Key Takeaway:&lt;br&gt;
‚ó¶ You will learn what is CI/CD and the fundamentals of Continuous Integration, Continuous Deployment, and Continuous Delivery.&lt;br&gt;
‚ó¶ You will learn the benefit of GitLab CI/CD and GitLab CI/CD Pipeline&lt;br&gt;
‚ó¶ You will learn about environment variables, cached dependencies, triggers, and parameters in GitLab CI/CD&lt;br&gt;
‚ó¶ You will learn to configure a CI/CD pipeline with GitLab CI/CD using LambdaTest&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>gitlab</category>
    </item>
    <item>
      <title>How to use Svelte Keyed Each Block?</title>
      <author>Saurabh Dashora</author>
      <pubDate>Tue, 18 Jan 2022 12:28:08 +0000</pubDate>
      <link>https://dev.to/dashsaurabh/how-to-use-svelte-keyed-each-block-pmf</link>
      <guid>https://dev.to/dashsaurabh/how-to-use-svelte-keyed-each-block-pmf</guid>
      <description>&lt;p&gt;In this post, we learn how to use &lt;strong&gt;Svelte Keyed Each Block&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the normal  &lt;a href="https://progressivewebninja.com/how-to-use-svelte-each-block-to-render-arrays/"&gt;Svelte Each Block&lt;/a&gt;, we use the &lt;code&gt;each&lt;/code&gt; keyword to render an array or list. While it works perfectly when we have static lists, there is a serious issue when we delete items from the list. We are going to first look at the issue and then come up with the solution to it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-svelte-each-block-issue"&gt;
  &lt;/a&gt;
  1 ‚Äì Svelte Each Block Issue
&lt;/h3&gt;

&lt;p&gt;To demonstrate the issue, we will take the example of displaying books and their respective authors.&lt;/p&gt;

&lt;p&gt;Below is our &lt;code&gt;App&lt;/code&gt; component.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-appsvelte-endraw-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;code&gt;App.svelte&lt;/code&gt;&lt;/strong&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Book&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Book.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
        &lt;span class="na"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Eye of the World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Way of Kings&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Name of the Wind&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}]&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Welcome&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;Fantasy&lt;/span&gt; &lt;span class="nx"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Book&lt;/span&gt; 
    &lt;span class="nx"&gt;bookName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sr"&gt;/each&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;Remove&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="nx"&gt;Book&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above piece of code, we have the &lt;code&gt;books&lt;/code&gt; array with three hard-coded books. We use the &lt;code&gt;each&lt;/code&gt; block to render the &lt;code&gt;books&lt;/code&gt; using the &lt;code&gt;Book&lt;/code&gt; component. Finally, we also have a button to remove the first book from the &lt;code&gt;each&lt;/code&gt; block. When the user clicks the button, we invoke the &lt;code&gt;handleClick()&lt;/code&gt; function that slices the &lt;code&gt;books&lt;/code&gt; array.&lt;/p&gt;

&lt;p&gt;Below is the code for the &lt;code&gt;Book&lt;/code&gt; component.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-booksvelte-endraw-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;code&gt;Book.svelte&lt;/code&gt;&lt;/strong&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Eye of the World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Robert Jordan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Way of Kings&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Brandon Sanderson&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Name of the Wind&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Patrick Rothfuss&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Book&lt;/span&gt; &lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// Author: {author}&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this component, we have the &lt;strong&gt;book&lt;/strong&gt; to &lt;strong&gt;author&lt;/strong&gt; map. Based on the input &lt;code&gt;bookName&lt;/code&gt;, we basically determine the name of the author.&lt;/p&gt;

&lt;p&gt;If we run the app now and then click the button to remove first book once, we will see the below output.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DfcT4Tvm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://progressivewebninja.com/wp-content/uploads/2022/01/svelte-each-block-issue.png.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DfcT4Tvm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://progressivewebninja.com/wp-content/uploads/2022/01/svelte-each-block-issue.png.webp" alt="svelte-each-block-issue.png" width="880" height="295"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the &lt;code&gt;bookName&lt;/code&gt; and the &lt;code&gt;authorName&lt;/code&gt; does not match. Though the first book was correctly deleted, the &lt;code&gt;authorName&lt;/code&gt; got mixed up.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Why does this happen?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The reason is that when we modify the underlying array of an &lt;code&gt;each&lt;/code&gt; block, Svelte adds and removes items from the end of the block. It also updates any values that have changed. This is the default behaviour.&lt;/p&gt;

&lt;p&gt;Due to this, the last item is removed and the items above it are updated. However, the &lt;code&gt;author&lt;/code&gt; value is not updated because it is the local constant of the &lt;code&gt;Book&lt;/code&gt; component. Its value was fixed at the time of component initialization. This leads to the data mismatch.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-the-svelte-keyed-each-block"&gt;
  &lt;/a&gt;
  2 ‚Äì The Svelte Keyed Each Block
&lt;/h3&gt;

&lt;p&gt;To get around this issue, we need to use &lt;strong&gt;keyed each block&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;See below example:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-appsvelte-endraw-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;code&gt;App.svelte&lt;/code&gt;&lt;/strong&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Book&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Book.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Eye of the World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Way of Kings&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Name of the Wind&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}]&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Welcome&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;Fantasy&lt;/span&gt; &lt;span class="nx"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Book&lt;/span&gt; 
    &lt;span class="nx"&gt;bookName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sr"&gt;/each&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;Remove&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="nx"&gt;Book&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically, here we introduce an &lt;code&gt;id&lt;/code&gt; field in the &lt;code&gt;books&lt;/code&gt; array. Each book has a unique id. In a real life application, this &lt;code&gt;id&lt;/code&gt; could also be the database id. The point is that it should be unique for every item.&lt;/p&gt;

&lt;p&gt;We also utilise this &lt;code&gt;id&lt;/code&gt; in the each block as below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically, the role of this &lt;code&gt;id&lt;/code&gt; field is to help Svelte figure out which DOM node should be changed when the &lt;code&gt;each&lt;/code&gt; block updates. After this modification, if we run the application and click the button, we will see proper data as below.&lt;/p&gt;

&lt;p&gt;In this post, we learn how to use &lt;strong&gt;Svelte Keyed Each Block&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the normal  &lt;a href="https://progressivewebninja.com/how-to-use-svelte-each-block-to-render-arrays/"&gt;Svelte Each Block&lt;/a&gt;, we use the &lt;code&gt;each&lt;/code&gt; keyword to render an array or list. While it works perfectly when we have static lists, there is a serious issue when we delete items from the list. We are going to first look at the issue and then come up with the solution to it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-svelte-each-block-issue"&gt;
  &lt;/a&gt;
  1 ‚Äì Svelte Each Block Issue
&lt;/h3&gt;

&lt;p&gt;To demonstrate the issue, we will take the example of displaying books and their respective authors.&lt;/p&gt;

&lt;p&gt;Below is our &lt;code&gt;App&lt;/code&gt; component.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-appsvelte-endraw-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;code&gt;App.svelte&lt;/code&gt;&lt;/strong&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Book&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Book.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
        &lt;span class="na"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Eye of the World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Way of Kings&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Name of the Wind&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}]&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Welcome&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;Fantasy&lt;/span&gt; &lt;span class="nx"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Book&lt;/span&gt; 
    &lt;span class="nx"&gt;bookName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sr"&gt;/each&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;Remove&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="nx"&gt;Book&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above piece of code, we have the &lt;code&gt;books&lt;/code&gt; array with three hard-coded books. We use the &lt;code&gt;each&lt;/code&gt; block to render the &lt;code&gt;books&lt;/code&gt; using the &lt;code&gt;Book&lt;/code&gt; component. Finally, we also have a button to remove the first book from the &lt;code&gt;each&lt;/code&gt; block. When the user clicks the button, we invoke the &lt;code&gt;handleClick()&lt;/code&gt; function that slices the &lt;code&gt;books&lt;/code&gt; array.&lt;/p&gt;

&lt;p&gt;Below is the code for the &lt;code&gt;Book&lt;/code&gt; component.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-booksvelte-endraw-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;code&gt;Book.svelte&lt;/code&gt;&lt;/strong&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Eye of the World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Robert Jordan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Way of Kings&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Brandon Sanderson&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Name of the Wind&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Patrick Rothfuss&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Book&lt;/span&gt; &lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// Author: {author}&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this component, we have the &lt;strong&gt;book&lt;/strong&gt; to &lt;strong&gt;author&lt;/strong&gt; map. Based on the input &lt;code&gt;bookName&lt;/code&gt;, we basically determine the name of the author.&lt;/p&gt;

&lt;p&gt;If we run the app now and then click the button to remove first book once, we will see the below output.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E4gQeHC5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://progressivewebninja.com/wp-content/uploads/2022/01/svelte-keyed-each-block-2048x480.png.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E4gQeHC5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://progressivewebninja.com/wp-content/uploads/2022/01/svelte-keyed-each-block-2048x480.png.webp" alt="svelte-each-block-issue.png" width="880" height="206"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the &lt;code&gt;bookName&lt;/code&gt; and the &lt;code&gt;authorName&lt;/code&gt; does not match. Though the first book was correctly deleted, the &lt;code&gt;authorName&lt;/code&gt; got mixed up.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Why does this happen?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The reason is that when we modify the underlying array of an &lt;code&gt;each&lt;/code&gt; block, Svelte adds and removes items from the end of the block. It also updates any values that have changed. This is the default behaviour.&lt;/p&gt;

&lt;p&gt;Due to this, the last item is removed and the items above it are updated. However, the &lt;code&gt;author&lt;/code&gt; value is not updated because it is the local constant of the &lt;code&gt;Book&lt;/code&gt; component. Its value was fixed at the time of component initialization. This leads to the data mismatch.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-the-svelte-keyed-each-block"&gt;
  &lt;/a&gt;
  2 ‚Äì The Svelte Keyed Each Block
&lt;/h3&gt;

&lt;p&gt;To get around this issue, we need to use &lt;strong&gt;keyed each block&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;See below example:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-appsvelte-endraw-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;code&gt;App.svelte&lt;/code&gt;&lt;/strong&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Book&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Book.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Eye of the World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Way of Kings&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Name of the Wind&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}]&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Welcome&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;Fantasy&lt;/span&gt; &lt;span class="nx"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Book&lt;/span&gt; 
    &lt;span class="nx"&gt;bookName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bookName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sr"&gt;/each&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;Remove&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="nx"&gt;Book&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically, here we introduce an &lt;code&gt;id&lt;/code&gt; field in the &lt;code&gt;books&lt;/code&gt; array. Each book has a unique id. In a real life application, this &lt;code&gt;id&lt;/code&gt; could also be the database id. The point is that it should be unique for every item.&lt;/p&gt;

&lt;p&gt;We also utilise this &lt;code&gt;id&lt;/code&gt; in the each block as below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically, the role of this &lt;code&gt;id&lt;/code&gt; field is to help Svelte figure out which DOM node should be changed when the &lt;code&gt;each&lt;/code&gt; block updates. After this modification, if we run the application and click the button, we will see proper data as below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wEtOwunZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642385377572/W9TmhfFzW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wEtOwunZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642385377572/W9TmhfFzW.png" alt="svelte-keyed-each-block-fix.png" width="880" height="206"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The book name and author name match as expected. The first book was successfully removed. However, Svelte only removed the appropriate DOM node and other nodes were left as they were before the update.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;With this, we have learnt how to use &lt;strong&gt;Svelte Keyed Each Block&lt;/strong&gt;. This is extremely useful when we have a requirement to update elements within our each blocks.&lt;/p&gt;

&lt;p&gt;Hope this little post was useful. If you have any comments or queries about this post, please feel free to write them in the comments section below.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>svelte</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Improve Your Developer Onboarding Path With the 10-3-10 Test</title>
      <author>Matthew Revell</author>
      <pubDate>Tue, 18 Jan 2022 12:19:07 +0000</pubDate>
      <link>https://dev.to/codesee/improve-your-developer-onboarding-path-with-the-10-3-10-test-253j</link>
      <guid>https://dev.to/codesee/improve-your-developer-onboarding-path-with-the-10-3-10-test-253j</guid>
      <description>&lt;p&gt;Getting to the point is essential for a smooth developer onboarding. Within seconds, you need to answer your product or project's what, why, and how.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yGgmRDU9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cscgt7bg628kjqmrtw9u.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yGgmRDU9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cscgt7bg628kjqmrtw9u.jpg" alt="Microscope" width="880" height="583"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But it can be hard to put ourselves in the shoes of a developer who knows nothing of what we do. That's why it's essential that we test and improve the onboarding path we give developers.&lt;/p&gt;

&lt;p&gt;One way to do that is the 10-3-10 test. It's quick to perform, requires no special tools, and pretty much anyone can do it. Here's how.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#from-zero-to-hello-world-in-ten-minutes"&gt;
  &lt;/a&gt;
  From zero to Hello World in ten minutes
&lt;/h2&gt;

&lt;p&gt;The idea behind the 10-3-10 test is pretty simple. A developer should land on your site without any context and achieve the Hello World state within 10 minutes.&lt;/p&gt;

&lt;p&gt;Before a developer can get to that point, they need to know what the product does and then register to get a developer account.&lt;/p&gt;

&lt;p&gt;Within all three of those milestones -- &lt;strong&gt;understanding&lt;/strong&gt;, &lt;strong&gt;registration&lt;/strong&gt;, and &lt;strong&gt;first product use&lt;/strong&gt; -- lurks danger. At each stage, you're asking the developer to give you something on trust. At first, it's their time, then a small amount of information about themselves, and finally, it's both their time and their mental energy. It might sound over the top, but you need to reward the developer for each of those. Get the reward wrong, and the danger becomes apparent: the developer will lose trust and look elsewhere.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dropoff-is-real"&gt;
  &lt;/a&gt;
  Drop-off is real
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dl.acm.org/doi/10.1145/1835449.1835513"&gt;Work by Microsoft Research&lt;/a&gt; shows that typical web users decide whether to stay or go within 10 seconds of arriving at a web page. There is even &lt;a href="https://www.tandfonline.com/doi/abs/10.1080/01449290500330448"&gt;an old study&lt;/a&gt; that suggests web page visitors form an opinion within 50 milliseconds of landing.&lt;/p&gt;

&lt;p&gt;Keeping someone on the page long enough to explain the offering is just the start, though. &lt;a href="https://heap.io/blog/good-conversion-rate-signup-flow"&gt;Research on conversion rates&lt;/a&gt; by product analytics firm Heap suggests that 63% of SaaS users fail to complete product sign-up.&lt;/p&gt;

&lt;p&gt;We are operating in a world of spam, clickbait, unregulated advertising, and other underhanded attempts to grab our attention. People have trained themselves to apply harsh relevance criteria to the information they find on the web.&lt;/p&gt;

&lt;p&gt;Arguably, developers are not typical web users. Whether that makes them more or less patient will depend on their level of motivation, among other factors. What is clear, though, is that you have very little time in which to capture a developer's attention and then turn that into an interest in your product.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#three-questions"&gt;
  &lt;/a&gt;
  Three questions
&lt;/h2&gt;

&lt;p&gt;There are multiple pressures on your developer onboarding flow. Product marketing might have a particular wording they want you to use. Someone in the growth team wants to try an experiment they read about recently. The VP of Sales is pushing for more data collection to assign new developer sign-ups to the appropriate salesperson.&lt;/p&gt;

&lt;p&gt;Whether good or bad, the reality of these demands is that they can lead to a loss of focus. And in most companies, the demand for such change never really stops.&lt;/p&gt;

&lt;p&gt;The 10-3-10 test is simple, repeatable, and quick, helping you measure whether you're continuing to serve developers. It asks three questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;10 (understanding):&lt;/strong&gt; Can a developer get a solid idea of what your product does within ten seconds of arriving on a developer-targeted landing page?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;3 (registration):&lt;/strong&gt; Can that person register for a developer account within three minutes of landing?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;10 (first use):&lt;/strong&gt; Can they get to Hello World ten minutes after first landing on the site? Whether you perform each test informally yourself or set up an ethnographic research session, it's worth diving into some of the factors that influence each stage first.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#understanding"&gt;
  &lt;/a&gt;
  Understanding
&lt;/h2&gt;

&lt;p&gt;How often have you been to a product website and come away none the wiser about what it does?&lt;/p&gt;

&lt;p&gt;Competing demands too often lead to product pages that say a lot but communicate nothing. A common scenario is messaging that attempts to address too many different audiences at once. If a vendor compromises its message to serve both developers and, say, procurement managers, it'll serve neither well.&lt;/p&gt;

&lt;p&gt;Sometimes, it's just that companies overthink how they talk about their products. As someone writing about a product, it can be hard to extract yourself from the context you have. It's tempting to build every comment, every meeting about the Chief Marketing Officer's vocab preferences, every barb thrown by the competition into that one very clever headline. But does that serve someone who just wants to know what problem your product solves and how?&lt;/p&gt;

&lt;p&gt;The first step to passing the understanding test is to make sure you have a dedicated space to speak primarily to developers.&lt;/p&gt;

&lt;p&gt;Next, stay specific and tell developers what your product does for them. Consider CodeSee's own home page. The headline and sub-head get straight to the action:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Visualize codebases faster&lt;/p&gt;

&lt;p&gt;Map an entire codebase in just a few clicks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The short follow-up paragraph then expands on that in a way that sticks entirely to the facts of how the product benefits developers.&lt;/p&gt;

&lt;p&gt;Avoid the temptation to over-egg how you describe your offering. "SMS API," rather than "customer engagement solution." That kind of messaging has its place for certain audiences, and it makes product marketers feel good, but for developers, it's just another hurdle in the way of understanding whether that thing solves a problem that they have.&lt;/p&gt;

&lt;p&gt;To pass the first test, a typical developer should understand the practical purpose of your product within ten seconds of landing on your developer home page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#registration"&gt;
  &lt;/a&gt;
  Registration
&lt;/h2&gt;

&lt;p&gt;Registration is a chasm in your developer onboarding. This is where developers must put the most trust in you by providing personal information without a clear idea of the pay-off. Provide them with guide ropes, way finding, and a hint of the reward that is to come.&lt;/p&gt;

&lt;p&gt;First, how do you get a developer from the landing page to sign-up? The button or link you provide needs to be immediately obvious, not so wordy that people are tempted to skip it, and yet still communicate what's to come. Oh, and the copy must avoid scaring people off.&lt;/p&gt;

&lt;p&gt;"Get started" and "Start now" are common choices. However, &lt;a href="https://www.nngroup.com/articles/get-started/"&gt;at least one study&lt;/a&gt; has shown that "Get started" attracts clicks, but not all are from people who are ready to try, download, or buy your product.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://miro.com/api/"&gt;The Miro API&lt;/a&gt;'s "Start building" is clearer. Click that, and you know you're about to get hands-on with the API.&lt;/p&gt;

&lt;p&gt;CodeSee's "Try Maps now" communicates a lot in three words. "Try" tells you that you're going to be hands-on with the product while making it feel casual rather than intimidating. Naming the product enforces what's coming next, and "now" adds a sense that clicking will lead to a fast pay-off.&lt;/p&gt;

&lt;p&gt;That's a lot for a button.&lt;/p&gt;

&lt;p&gt;The registration process itself must stick to the principle of "minimum viable information". Sales and marketing colleagues might push to capture more and more information during registration, but your primary aim here is not to add another lead to the CRM. Instead, registration is about enabling access and then allowing the rest of the experience and product to win over the developer.&lt;/p&gt;

&lt;p&gt;That doesn't mean you can't ask for more than just an email address and password. Most people have some tolerance for providing extra information. However, you should aim to frame at least some of those additional questions in terms of how they'll benefit the developer. Twilio's registration process is great for this. It asks some questions that might help their sales funnel but also collects information, such as your preferred programming language, that makes the developer dashboard more helpful.&lt;/p&gt;

&lt;p&gt;To pass the second test, a typical developer should be able to get a developer account within three minutes of landing on your developer home page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hello-world"&gt;
  &lt;/a&gt;
  Hello World
&lt;/h2&gt;

&lt;p&gt;Providing a smooth path through registration is good, but it's only a staging post. The developer's goal is to see for themselves whether your product solves their problem and whether they like the idea of working with your company.&lt;/p&gt;

&lt;p&gt;There is enormous scope for ways to improve the path to Hello World, so let's focus on one thing. When the developer first logs into your dashboard, take them by the hand through the steps they need to achieve something worthwhile.&lt;/p&gt;

&lt;p&gt;Such a first use experience is more than flashing up a quick-start guide or a click-through signposting of the dashboard's UI. It is a highly focused path that takes the developer from no knowledge of your product to that Hello World interaction. It builds on the supplemental information you've gathered during sign-up. Are they a Ruby developer? Great, get them to download your SDK's gem. They told you they work for a large company? Suggest they link their new account with Okta or other SSO providers to simplify integration with corporate sign-on.&lt;/p&gt;

&lt;p&gt;That highly focused first use experience should contain everything the developer needs to get a feel for your solution and what it's like to develop with, in as efficient a way as possible.&lt;/p&gt;

&lt;p&gt;If a typical developer can get to Hello World within ten minutes of the first landing on your developer pages, you've passed the 10-3-10 test.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-theres-more"&gt;
  &lt;/a&gt;
  And there's more
&lt;/h2&gt;

&lt;p&gt;The 3-10-3 test is a blunt instrument, but it's useful as a way to keep us honest about whether our onboarding serves developers. It works well for commercial products, and there's plenty of scope to adapt it to onboarding a developer onto a team building a product or a developer joining an open source project.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Microscope picture by &lt;a href="https://www.pexels.com/photo/technology-lens-laboratory-medical-60022/"&gt;Public Domain Pictures&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Javascript's reduce method in a nutshell.</title>
      <author>Amine zoldyck</author>
      <pubDate>Tue, 18 Jan 2022 11:57:56 +0000</pubDate>
      <link>https://dev.to/amiinequ/javascripts-reduce-method-in-a-nutshell-gik</link>
      <guid>https://dev.to/amiinequ/javascripts-reduce-method-in-a-nutshell-gik</guid>
      <description>&lt;p&gt;The word "reduce" in the English language means¬†:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;to diminish in size, amount, extent, or number&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's suppose that we have an array of items&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const cartItems = [1,3,5,7,9];&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I want the sum of all the items.&lt;/p&gt;

&lt;p&gt;I could use the For Loop but it's going to be a bit hairy. The method &lt;code&gt;reduce()&lt;/code&gt; will give us one total number with less code (always go for the less-code option).&lt;/p&gt;

&lt;p&gt;reduce() takes two arguments: a callback function (the reducer itself) and an initial value. The callback function takes two arguments: the previous value and the current value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let total = cartItems.reduce((previousValue, currentValue) =&amp;gt; {
    return previousValue + currentValue;
}, 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's calculate the first rotation on the array.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;previousValue&lt;/code&gt; is going to be equal to 0 while the &lt;code&gt;currentValue&lt;/code&gt; is going to be equal to the first item in the array, which is 1.&lt;/p&gt;

&lt;p&gt;Next, the &lt;code&gt;previousValue&lt;/code&gt; is going to be equal to 1 while the &lt;code&gt;currentValue&lt;/code&gt; is going to be equal to 3 and so it goes. The total amount will be sum of all the numbers: 25&lt;/p&gt;

&lt;p&gt;Note: the reverse of the &lt;code&gt;reduce()&lt;/code&gt; method is &lt;code&gt;reduceRight()&lt;/code&gt;. Yes! It takes items from right to left.&lt;/p&gt;

&lt;p&gt;Ladies and gentlemen, that was a quick tutorial of the reduce() method. &lt;/p&gt;

&lt;p&gt;Don't forget to practice.&lt;/p&gt;

&lt;p&gt;Thank you.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Rockpack 2.0 Official Release</title>
      <author>Sergey</author>
      <pubDate>Tue, 18 Jan 2022 11:36:57 +0000</pubDate>
      <link>https://dev.to/alexsergey/rockpack-20-official-release-5ak9</link>
      <guid>https://dev.to/alexsergey/rockpack-20-official-release-5ak9</guid>
      <description>&lt;p&gt;More than a year has passed since the release of version 1.0. During this time, I received feedback from users, made many fixes, and also updated all dependencies to the current state. And today I would like to proudly present you the release of the second version of this tool.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/AlexSergey/rockpack"&gt;Rockpack repository is here!&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-rockpack"&gt;
  &lt;/a&gt;
  What is Rockpack?
&lt;/h2&gt;

&lt;p&gt;Starting a new React project, whether it's a small module or a React component, or vice versa, a &lt;strong&gt;large application with SSR support&lt;/strong&gt;, we spend a lot of time solving routine tasks, slowing down the development process. We can‚Äôt dive into solving business problems without setting up Webpack, including all plugins and modules, setting up ESLint, Jest, Babel, TypeScript, as well as dependencies and configurations for them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--69YoAtH5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.natrube.net/rockpack/readme_assets/rockpack_main_1.v2.0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--69YoAtH5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.natrube.net/rockpack/readme_assets/rockpack_main_1.v2.0.png" alt="Usual flow" width="880" height="573"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But this process can be automated!&lt;/p&gt;

&lt;p&gt;Rockpack is a tool that can deploy one of the 4 types of React applications on your computer in one console command, which will be described below, with fully configured &lt;strong&gt;Webpack 5&lt;/strong&gt;, &lt;strong&gt;ESLint 8&lt;/strong&gt;, &lt;strong&gt;Babel&lt;/strong&gt;, &lt;strong&gt;Jest&lt;/strong&gt;, &lt;strong&gt;TypeScript&lt;/strong&gt; and more with perfectly optimized settings, for stable and fast work. You not only get the generated settings, but also the basic framework of the project, based on the best development practices and experience of the entire React community.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aVcUb9_j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.natrube.net/rockpack/readme_assets/rockpack_main_2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aVcUb9_j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.natrube.net/rockpack/readme_assets/rockpack_main_2.png" alt="Rockpack flow" width="880" height="641"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rockpack's main goal is to reduce project setup from weeks to 5 minutes!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-new-in-rockpack-20"&gt;
  &lt;/a&gt;
  What's new in Rockpack 2.0?
&lt;/h2&gt;

&lt;p&gt;As part of the work on Rockpack 2.0, absolutely all dependencies have been updated. Now using the latest version of &lt;strong&gt;Webpack 5&lt;/strong&gt;, &lt;strong&gt;Typescript 4.5+&lt;/strong&gt;, &lt;strong&gt;ESLint 8+&lt;/strong&gt;, &lt;strong&gt;Jest 27+&lt;/strong&gt;, etc. All modules, plugins, loaders have been updated. Configs have been rewritten, taking into account the features of new versions.&lt;/p&gt;

&lt;p&gt;The project supports &lt;strong&gt;React 17+&lt;/strong&gt; versions. It is no longer necessary to import React into every component. Also, the latest React Router 6 is available out of the box.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-rockpack-support"&gt;
  &lt;/a&gt;
  What does Rockpack support?
&lt;/h2&gt;

&lt;p&gt;Out of the box, you can take advantage of the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TypeScript support 4.5+&lt;/li&gt;
&lt;li&gt;Babel 7, Babel-preset-env (&amp;gt; 5%)&lt;/li&gt;
&lt;li&gt;Support build nodejs scripts with nodemon&lt;/li&gt;
&lt;li&gt;Hot Module Replacement for SPA&lt;/li&gt;
&lt;li&gt;Livereload for SSR&lt;/li&gt;
&lt;li&gt;Source maps and Extended dev mode&lt;/li&gt;
&lt;li&gt;Dotenv support and Dotenv safe support&lt;/li&gt;
&lt;li&gt;React optimizations&lt;/li&gt;
&lt;li&gt;Monorepo support&lt;/li&gt;
&lt;li&gt;Write file webpack plugin (in dev mode)&lt;/li&gt;
&lt;li&gt;Copy Webpack Plugin&lt;/li&gt;
&lt;li&gt;ESLint support&lt;/li&gt;
&lt;li&gt;Templates: HTML/Jade/Handlebars&lt;/li&gt;
&lt;li&gt;CSS: CSS/SASS (dart-sass)/LESS + Postcss&lt;/li&gt;
&lt;li&gt;Postcss, Autoprefixer&lt;/li&gt;
&lt;li&gt;CSS Modules support&lt;/li&gt;
&lt;li&gt;Imagemin&lt;/li&gt;
&lt;li&gt;Formats support: Markdown, Video, Audio, Fonts, SVG, Script, Shaders etc&lt;/li&gt;
&lt;li&gt;SVG + SVGO, SVGR (import SVG like React Component)&lt;/li&gt;
&lt;li&gt;Antd optimizations (With optimizations: auto replace momentjs to dayjs, import antd)&lt;/li&gt;
&lt;li&gt;Terser minification&lt;/li&gt;
&lt;li&gt;Generate stats.json (in production mode)&lt;/li&gt;
&lt;li&gt;SEO Optimizations&lt;/li&gt;
&lt;li&gt;Bundle Analyze (webpack-bundle-analyzer, Statoscope)&lt;/li&gt;
&lt;li&gt;Isomorphic compile support (include isomorphic styles, isomorphic dynamic imports - @loadable)&lt;/li&gt;
&lt;li&gt;Vendor array splitting support (You can set dependency libraries to this array to split it on separate vendor.js file)&lt;/li&gt;
&lt;li&gt;MD/MDX support&lt;/li&gt;
&lt;li&gt;GraphQL support (webpack-graphql-loader)&lt;/li&gt;
&lt;li&gt;–°ross-env included&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rockpack comes with a set of the best ESLint rules, Babel plugins and Jest plugins.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-i-need-rockpack-when-there-is-createreactapp"&gt;
  &lt;/a&gt;
  Why do I need Rockpack when there is create-react-app?
&lt;/h2&gt;

&lt;p&gt;The main difference between Rockpack and create-react-app is that you can generate 4 types of applications, including those with SSR support, using best practices and feature-based project structure approach.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;CSR (Client Side Render)&lt;/strong&gt; is an ordinary Single Page Application that has a project structure &lt;a href="https://dev.to/alexsergey/project-structure-repository-and-folders-review-of-approaches-4kh2"&gt;Project Structure Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;SSR (Server Side Render)&lt;/strong&gt; is an application with a configured server to work with Server Side Render support as well as SEO best practices &lt;a href="https://dev.to/alexsergey/server-side-rendering-from-zero-to-hero-2610"&gt;SSR Article&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;React Component&lt;/strong&gt; is a boilerplate for building a React Component. If you need to create a React Component and expose it to NPM, then this option is for you.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;UMD Library&lt;/strong&gt; - This option is for you if you just need to create and publish to NPM just a library.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;The SSR project will also have a number of best practices for SEO, which will make it possible to get a project with a high level in the lighthouse&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D7pQ58mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.natrube.net/rockpack/readme_assets/seo_performance.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D7pQ58mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.natrube.net/rockpack/readme_assets/seo_performance.jpg" alt="SEO Performance" width="880" height="308"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-get-started-with-rockpack"&gt;
  &lt;/a&gt;
  How to get started with Rockpack?
&lt;/h2&gt;

&lt;p&gt;It's very simple! To start using Rockpack now, you need to:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1.&lt;/strong&gt; Install the package globally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; @rockpack/starter
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 2.&lt;/strong&gt; Run the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rockpack folder_name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rockpack my-awesome-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 3.&lt;/strong&gt; Select the required project type from the list&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n2r1Wi5b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.natrube.net/rockpack/readme_assets/rockpack_starter_1.v3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n2r1Wi5b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.natrube.net/rockpack/readme_assets/rockpack_starter_1.v3.jpg" alt="Rockpack Starter" width="777" height="105"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to learn more, Rockpack readme is &lt;a href="https://github.com/AlexSergey/rockpack"&gt;here&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h2&gt;

&lt;p&gt;The Rockpack project is over 2 years old. During this time, it has become stable and does not require changes to the main API. We will support the project and expand its functionality.&lt;/p&gt;

&lt;p&gt;Thanks to everyone who read this article! I hope Rockpack will be handy in your work.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Basic Banking System </title>
      <author>Banka Uday</author>
      <pubDate>Tue, 18 Jan 2022 10:45:25 +0000</pubDate>
      <link>https://dev.to/uday_dev/basic-banking-system-56ak</link>
      <guid>https://dev.to/uday_dev/basic-banking-system-56ak</guid>
      <description>&lt;p&gt;About the Site :&lt;br&gt;
It is a &lt;a href=""&gt;Banking Website&lt;/a&gt; created as a part of the GRIP Internship at Sparks foundation. We can quickly open the account by entering the details. We can transfer the money from one customer to another. And keep track of all the transactions.&lt;/p&gt;

&lt;p&gt;Link to Code :&lt;br&gt;
&lt;a href="https://github.com/Uday-GIT-hub/bluestarbank"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r5Fky_vR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3rzoibm8cn5t1x3nh7td.jpg" alt="Image description" width="880" height="412"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flow of the  Website :&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Home Page&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NC0tK86B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obpy09vzf2dwogqpx9x4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NC0tK86B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obpy09vzf2dwogqpx9x4.gif" alt="Image description" width="600" height="333"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Account Creation&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--10QyACte--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lo6lgmicvxvhv78gy5y3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--10QyACte--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lo6lgmicvxvhv78gy5y3.gif" alt="Image description" width="600" height="277"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Transfering money&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HVgJn1nD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jlgv1j1p9nxztk0ipgic.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HVgJn1nD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jlgv1j1p9nxztk0ipgic.gif" alt="Image description" width="600" height="277"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technologies Used:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;HTML&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PHP&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MY SQL&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CSS&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Javascript&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ajax&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bootstrap&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>php</category>
      <category>css</category>
      <category>database</category>
    </item>
    <item>
      <title>Day 81 of 100 Days of Code &amp; Scrum: Picking Up MySQL AKA Dolphin Database</title>
      <author>Rammina</author>
      <pubDate>Tue, 18 Jan 2022 10:31:36 +0000</pubDate>
      <link>https://dev.to/rammina/day-81-of-100-days-of-code-scrum-picking-up-mysql-aka-dolphin-database-175k</link>
      <guid>https://dev.to/rammina/day-81-of-100-days-of-code-scrum-picking-up-mysql-aka-dolphin-database-175k</guid>
      <description>&lt;p&gt;Hello there, everyone!&lt;/p&gt;

&lt;p&gt;Today was my weekly visit to my physical therapist, so I couldn't do much coding.&lt;/p&gt;

&lt;p&gt;I built around half of the content for the Writing Services section for my &lt;a href="https://www.rammina.com"&gt;business site&lt;/a&gt;. It should be ready for deployment by tomorrow or the next day. Also, I learned a little bit more Next.js.&lt;/p&gt;

&lt;p&gt;I decided to pick up MySQL because I'm going to need it soon. I've been relying too much on MongoDB, which is a noSQL database.&lt;/p&gt;

&lt;p&gt;Anyway, let's move on to my daily report!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;p&gt;I set my goals for this week, which are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;finishing the Services pages and then deploying them.&lt;/li&gt;
&lt;li&gt;learning more Next.js and Scrum.&lt;/li&gt;
&lt;li&gt;pick up either MySQL or Flutter, and I decided to go for the former.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#company-website"&gt;
  &lt;/a&gt;
  Company Website
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;coded around half of the content for the Writing Services section.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#nextjs"&gt;
  &lt;/a&gt;
  Next.js
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;continued going through &lt;a href="https://www.udemy.com/course/nextjs-react-the-complete-guide/"&gt;Next.js &amp;amp; React by Maximilian Schwarzm√ºller&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;learn a little bit more SWR.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#scrum"&gt;
  &lt;/a&gt;
  Scrum
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I didn't have the time to read an article about Scrum for today.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#mysql"&gt;
  &lt;/a&gt;
  MySQL
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I learned some basic concepts in MySQL.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for reading! Have a good day!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" alt="Rammina Thank You Banner" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/course/nextjs-react-the-complete-guide/"&gt;Next.js &amp;amp; React by Maximilian Schwarzm√ºller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/docs/getting-started"&gt;Next.js official documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://swr.vercel.app/"&gt;SWR official documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/7S_tz1z_5bA"&gt;MySQL Tutorial for Beginners by Mosh Hamedani&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#other-media"&gt;
  &lt;/a&gt;
  Other Media
&lt;/h2&gt;

&lt;p&gt;Feel free to reach out to me in other media!&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://www.rammina.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BK-zilS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1638444046/rammina-button-128_x9ginu.png" alt="Rammina Logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://twitter.com/RamminaR"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C341ckO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636792959/twitter-logo_laoyfu_pdbagm.png" alt="Twitter logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://github.com/Rammina"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u4ZlXeay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636795051/GitHub-Emblem2_epcp8r.png" alt="Github logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Did we just build a Netflix clone with Appwrite?</title>
      <author>Matej Baƒço</author>
      <pubDate>Tue, 18 Jan 2022 10:17:29 +0000</pubDate>
      <link>https://dev.to/appwrite/did-we-just-build-a-netflix-clone-with-appwrite-28ok</link>
      <guid>https://dev.to/appwrite/did-we-just-build-a-netflix-clone-with-appwrite-28ok</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  üëã Introduction
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IIUyr74i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l1qgdzaxva2blpnpfiuw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IIUyr74i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l1qgdzaxva2blpnpfiuw.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Welcome to the beginning of our 3 part series where we build a fully functional Netflix clone we like to call, Almost Netflix! Almost Netflix is a movie streaming app just like Netflix, but completely open source and built with technologies you love! We'll be using Appwrite to handle all the backend functionality and walk you through the process of creating the frontend in Web, Flutter, Android and iOS. &lt;/p&gt;

&lt;p&gt;Stay tuned, as we will be continuing this series in future Appwrite releases and improving our demo step by step. Today's blog post is a setup to prepare you for what's to come tomorrow. üòâ &lt;/p&gt;

&lt;p&gt;Before jumping into the frontend, we need to prepare an Appwrite instance. This post will guide you through the installation of Appwrite, project setup, database preparation, and data insertion.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ü§î What is Appwrite ?&lt;/strong&gt; &lt;br&gt;
&lt;a href="https://appwrite.io/"&gt;Appwrite&lt;/a&gt; is open source backend-as-a-service that abstracts all the complexity involved in building a modern application by providing you with a set of REST APIs for your core backend needs. Appwrite handles user authentication and authorization, databases, file storage, cloud functions, webhooks and much more! If there is anything missing, you can extend Appwrite using your favourite backend language.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#appwrite-installation"&gt;
  &lt;/a&gt;
  ü§ñ Appwrite installation
&lt;/h2&gt;

&lt;p&gt;Appwrite runs its services using a Docker infrastructure, so to install Appwrite, we will need Docker up and running on our machine. We will be running this project on a $10 DigitalOcean droplet with the Linux operating system. On Linux, we can installation Docker using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-fsSL&lt;/span&gt; https://get.docker.com &lt;span class="nt"&gt;-o&lt;/span&gt; get-docker.sh &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sh get-docker.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;You can skip this step if you have Docker already installed on your machine. To check that, you can run the &lt;code&gt;docker --version&lt;/code&gt;, and if this command does not fail, you have Docker already installed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With Docker installed, we can continue to install Appwrite. Installing Appwrite on any platform is as simple as running a single docker command in the terminal or command prompt. The command is tiny-bit different for each platform, so make sure to use the correct one from our &lt;a href="https://appwrite.io/docs/installation"&gt;installation docs&lt;/a&gt;. We are using the operating system Linux, so we use the insulation script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--volume&lt;/span&gt; /var/run/docker.sock:/var/run/docker.sock &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--volume&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;/appwrite:/usr/src/code/appwrite:rw &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--entrypoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"install"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    appwrite/appwrite:0.12.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Make sure you use the latest Appwrite version to access all the cool features we are releasing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Just like that ‚ú® we now have Appwrite installed on our machine, and when we enter the IP address into our browser, we should see Appwrite's sign-up page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lpoKhQyD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/reoxlux93dp6hq9x8jos.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lpoKhQyD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/reoxlux93dp6hq9x8jos.png" alt="Signup page" width="880" height="771"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are running Docker on your computer, you can use the word &lt;code&gt;localhost&lt;/code&gt; instead of the IP address. Throughout this tutorial, we will use the domain &lt;code&gt;demo.appwrite.io&lt;/code&gt; to reference our server running Appwrite.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-appwrite-project"&gt;
  &lt;/a&gt;
  üõ†Ô∏è New Appwrite project
&lt;/h2&gt;

&lt;p&gt;We are on the sign-up page already, so let's make an account, shall we? This process is pretty straightforward. Enter your account information and click &lt;code&gt;Sign Up&lt;/code&gt;. Once we create the account, the website will redirect us to a dashboard where we can see a list of our projects - an empty list.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k2FhihbT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/00stuxe8qyk1xcg50e6c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k2FhihbT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/00stuxe8qyk1xcg50e6c.png" alt="Projects list" width="880" height="414"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To interact with Appwrite, we need to create a project. By clicking on the &lt;code&gt;Create Project&lt;/code&gt; button, we open a modal where we can set the project's name and ID. Let's set the name to &lt;code&gt;Almost Netflix&lt;/code&gt; and ID to &lt;code&gt;almostNetflix&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ID is auto-generated by default, but you can click on the edit icon to allow any custom string in this field. You can learn more about this process in our &lt;a href="https://dev.to/appwrite/what-are-appwrites-new-custom-ids--5g6a"&gt;custom IDs article&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mbNimD0V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uya431222zjt0e490enk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mbNimD0V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uya431222zjt0e490enk.png" alt="New project modal" width="721" height="656"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The project is created within a few seconds, and we are redirected to the project dashboard. There we go, another step finished! üí™&lt;/p&gt;

&lt;p&gt;Appwrite provides many services to make app development more accessible and joyful, but we won't be needing all these services for our Almost Netflix project. Thanks to the latest Appwrite update, we can disable specific services we don't need to prevent users from (ab)using them.&lt;/p&gt;

&lt;p&gt;To disable a service, click &lt;code&gt;Settings&lt;/code&gt; at the bottom of the sidebar. In there, we switch to the &lt;code&gt;Services&lt;/code&gt; tab, and by clicking on toggles of &lt;code&gt;Locale&lt;/code&gt;, &lt;code&gt;Health&lt;/code&gt;, &lt;code&gt;Teams&lt;/code&gt; and &lt;code&gt;Functions&lt;/code&gt;, we disable these services.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pBWUGKd4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iyjo9ykmtn0lu7l2nkwq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pBWUGKd4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iyjo9ykmtn0lu7l2nkwq.png" alt="Settings services page" width="880" height="578"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perfect, services configured üëå There's one more security feature we can enable! This time, let's click &lt;code&gt;Users&lt;/code&gt; in the left menu and switch to the &lt;code&gt;Settings&lt;/code&gt; tab. In this view, we can see all authentication methods allowed by Appwrite. We will only use &lt;code&gt;email/password&lt;/code&gt; to disable the rest.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xp5EeoVB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ypegvedycecdt6rknb77.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xp5EeoVB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ypegvedycecdt6rknb77.png" alt="Users settings page" width="880" height="578"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, we are satisfied with our project setup. Let's continue by setting up the services we will be using. Thankfully, Almost Netflix only requires one service - &lt;strong&gt;database&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%97%84-databases-collections-attributes-and-indexes"&gt;
  &lt;/a&gt;
  üóÑ Databases, collections, attributes, and indexes
&lt;/h2&gt;

&lt;p&gt;Appwrite database consists of collections. A collection is a group of multiple documents that share the same structure and potentially the same permissions. A document is a simple key-value stored in a JSON format which can also have its own permissions. Every key in a document is called an attribute, and we can configure it to a specific type, maximum length, or default value. Finally, we have indexes to optimize specific filters and sort queries.&lt;/p&gt;

&lt;p&gt;Now that we understand the terms and know what we need to configure for every collection, let's see what collections we will need. For the sake of simplicity, we will store all movie's data in one &lt;code&gt;movies&lt;/code&gt; collection, without any relations. Alongside that, we want to support watchlists so that we will have one collection for that. Let's see how we can configure these two collections.&lt;/p&gt;

&lt;p&gt;The process is explained step-by-step in the Appwrite console, but you can also do this programmatically! ü§© If you want to use a programmatic setup, you can skip a few following sections and start reading from &lt;a href="#programming-setup"&gt;Programming setup&lt;/a&gt; section.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#movies-collection"&gt;
  &lt;/a&gt;
  Movies collection
&lt;/h3&gt;

&lt;p&gt;We start by clicking on &lt;code&gt;Database&lt;/code&gt; in the sidebar. We should see an empty database without any collections, so let's make one! We click on &lt;code&gt;Add collection&lt;/code&gt;, set &lt;code&gt;name&lt;/code&gt; to &lt;code&gt;Movies&lt;/code&gt; and &lt;code&gt;Collection ID&lt;/code&gt; to &lt;code&gt;movies&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--humvjLpe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rwboyaw01736lgc2gzvz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--humvjLpe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rwboyaw01736lgc2gzvz.png" alt="New movies collection" width="880" height="578"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After creating the collection, we will be redirected to the settings page of our collection. We should set up permissions here because by default, Appwrite would not allow anyone to &lt;code&gt;read&lt;/code&gt; from our new collection. First, we need to decide if we should be using &lt;code&gt;collection-level&lt;/code&gt; or &lt;code&gt;document-level&lt;/code&gt; permission. Our Almost Netflix use case does not call for document specific permissions, so we'll stick to &lt;code&gt;Collection Level&lt;/code&gt; permissions in our settings page. This option opens up some more customization and allows us to specify who can read documents in this collection and who can create new ones. We want logged-in users to see all movies, and we don't need to allow anyone to create new movies because every user is just a viewer. To write this into the Appwrite permission system, we set &lt;code&gt;read&lt;/code&gt; permissions to &lt;code&gt;role:member&lt;/code&gt; and keep &lt;code&gt;write&lt;/code&gt; permissions empty. Last but not least, we click &lt;code&gt;Update&lt;/code&gt; to apply these changes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xO986M4V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4na7tgo1383mis6rp7i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xO986M4V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4na7tgo1383mis6rp7i.png" alt="Movies collection settings" width="880" height="1137"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perfect, permissions configured! üí™ Next step, let's configure attributes. We click on the &lt;code&gt;Attributes&lt;/code&gt; tab to see that we don't have any attributes yet.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H3A_mzSk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6hs1dxsw6l6tvvn0is88.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H3A_mzSk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6hs1dxsw6l6tvvn0is88.png" alt="Movies collection attributes" width="880" height="465"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will need to add a bunch of attributes, so let's make a list with all settings:&lt;/p&gt;

&lt;p&gt;String attributes:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;key&lt;/th&gt;
&lt;th&gt;size&lt;/th&gt;
&lt;th&gt;required&lt;/th&gt;
&lt;th&gt;array&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;255&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;description&lt;/td&gt;
&lt;td&gt;5000&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;thumbnailImageId&lt;/td&gt;
&lt;td&gt;255&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cast&lt;/td&gt;
&lt;td&gt;255&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tags&lt;/td&gt;
&lt;td&gt;255&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;genres&lt;/td&gt;
&lt;td&gt;255&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Integer attributes:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;key&lt;/th&gt;
&lt;th&gt;min&lt;/th&gt;
&lt;th&gt;max&lt;/th&gt;
&lt;th&gt;required&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;durationMinutes&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;netflixReleaseDate&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;releaseDate&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Float attributes:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;key&lt;/th&gt;
&lt;th&gt;min&lt;/th&gt;
&lt;th&gt;max&lt;/th&gt;
&lt;th&gt;required&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;trendingIndex&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Boolean attributes:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;key&lt;/th&gt;
&lt;th&gt;required&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;isOriginal&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Enum attributes:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;key&lt;/th&gt;
&lt;th&gt;required&lt;/th&gt;
&lt;th&gt;elements&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ageRestriction&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;AR7, AR13, AR16, AR18&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;When we click on &lt;code&gt;Add Attribute&lt;/code&gt; and select the type of attribute we want to add, a modal will be opened, and we can configure data from the list above. Once configured, we click &lt;code&gt;Create&lt;/code&gt; to create one attribute. We repeat these steps for all the attributes until we have the list complete.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h1n8PNf9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfxqupijiqfoed01qls7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h1n8PNf9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfxqupijiqfoed01qls7.png" alt="Movies collection with all attributes" width="880" height="904"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Woah, that took quite some time. Good thing we played with so many different types and configurations. Now we can call ourselves experts of Appwrite attributes üòé&lt;/p&gt;

&lt;p&gt;To finish the setup of the movies collection, let's switch to the indexes tab. Again, we are presented with an empty list since we didn't add anything yet. We will need multiple indexes for different filters and sorting we will do in our application in the future, so let's prepare the list again:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;key&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;attributes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;trendingIndexDESC&lt;/td&gt;
&lt;td&gt;key&lt;/td&gt;
&lt;td&gt;trendingIndex(DESC)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;isOriginalDESC&lt;/td&gt;
&lt;td&gt;key&lt;/td&gt;
&lt;td&gt;isOriginal(DESC)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;durationMinutesDESC&lt;/td&gt;
&lt;td&gt;key&lt;/td&gt;
&lt;td&gt;durationMinutes(DESC)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;releaseDateDESC&lt;/td&gt;
&lt;td&gt;key&lt;/td&gt;
&lt;td&gt;releaseDate(DESC)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nameFULLTEXT&lt;/td&gt;
&lt;td&gt;fulltext&lt;/td&gt;
&lt;td&gt;name(ASC)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;genresFULLTEXT&lt;/td&gt;
&lt;td&gt;fulltext&lt;/td&gt;
&lt;td&gt;genres(ASC)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;castFULLTEXT&lt;/td&gt;
&lt;td&gt;fulltext&lt;/td&gt;
&lt;td&gt;cast(ASC)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tagsFULLTEXT&lt;/td&gt;
&lt;td&gt;fulltext&lt;/td&gt;
&lt;td&gt;tags(ASC)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Similarly to attributes, we now click on &lt;code&gt;Add Index&lt;/code&gt; and fill the form with information from our list. We repeat until we have all indexes added.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3J6R6MSt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2s84qvkrnmh9xj9gusro.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3J6R6MSt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2s84qvkrnmh9xj9gusro.png" alt="Movies collection with all indexes" width="880" height="847"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Believe it or not, the movies collection is ready! ü•≥ By making this huge collection, we learned a lot of concepts and got really confident with the Appwrite interface. Here is cookie üç™ for your effort if you followed along this far! If you ever meet me, you can trade this for a real cookie üòâ &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#watchlists-collection"&gt;
  &lt;/a&gt;
  Watchlists collection
&lt;/h3&gt;

&lt;p&gt;Let's do the same for the watchlist collection, but since we already understand the process, let's speed it up a little üòè&lt;/p&gt;

&lt;p&gt;We create a new collection with name &lt;code&gt;Watchlists&lt;/code&gt; and ID &lt;code&gt;watchlists&lt;/code&gt;. We keep permissions on &lt;code&gt;document-level&lt;/code&gt;, since users should only see their documents. We add the following attributes:&lt;/p&gt;

&lt;p&gt;String attributes:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;key&lt;/th&gt;
&lt;th&gt;size&lt;/th&gt;
&lt;th&gt;required&lt;/th&gt;
&lt;th&gt;array&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;userId&lt;/td&gt;
&lt;td&gt;255&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;movieId&lt;/td&gt;
&lt;td&gt;255&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Integer attributes:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;key&lt;/th&gt;
&lt;th&gt;min&lt;/th&gt;
&lt;th&gt;max&lt;/th&gt;
&lt;th&gt;required&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;createdAt&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;We also add the following indexes:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;key&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;attributes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;createdAtDESC&lt;/td&gt;
&lt;td&gt;key&lt;/td&gt;
&lt;td&gt;createdAt(DESC)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;userIdASCmovieIdASC&lt;/td&gt;
&lt;td&gt;key&lt;/td&gt;
&lt;td&gt;userId(ASC), movieId(ASC)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Voil√†, watchlist collection setup finished ‚ú® There's one final step though. We need to add documents into our collections.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#programming-setup"&gt;
  &lt;/a&gt;
  üåé Programming setup &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We need to create hundreds of documents, which we don't want to do manually, of course. We also don't have any data, so we will need to use some 3rd party API... What do we do now? ü§î&lt;/p&gt;

&lt;p&gt;Thanks to Appwrite server-side SDKs, we can pick any coding language and write a programmatic setup of Appwrite documents using it. I decided to pick JavaScript for this example because this language is easy to follow along and understand when reading, in my opinion. You can also find the complete source code of the project setup in &lt;a href="https://github.com/Meldiron/almost-netflix-project-setup"&gt;this GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, let's clone the programmatic setup GitHub repository to download all the source code. Then, let's enter the folder and install all NPM libraries needed for the script to work properly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/Meldiron/almost-netflix-project-setup.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;almost-netflix-project-setup
&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to set up some secrets for the script to work correctly. Let's create &lt;code&gt;.env&lt;/code&gt; file and put this information in there:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;APPWRITE_ENDPOINT=
APPWRITE_PROJECT_ID=
APPWRITE_API_KEY=
MDB_API_KEY=
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;You can find the Appwrite endpoint and project ID in the settings of your project&lt;/li&gt;
&lt;li&gt;You can create an API key in the &lt;code&gt;API Keys&lt;/code&gt; section of your Appwrite project. You can give it all permissions to make sure it has access to all services we might need to use&lt;/li&gt;
&lt;li&gt;You can get your MDB API key by signing up to TMDB. Learn more in &lt;a href="https://www.themoviedb.org/documentation/api"&gt;TMDB docs&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are set! üòé Let's now use this script.&lt;/p&gt;

&lt;p&gt;If you set up the database manually, you can ignore the following paragraph and command.&lt;/p&gt;

&lt;p&gt;If you didn't follow previous sections to set up movies and watchlists collections, now it's a great time to use a programmatic setup for that. I personally prefer using a programmatic setup to create collections, attributes, and indexes. This way, I keep the setup in a file that can be pushed to version control (Git). To run the script that creates all of that, we run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;node src/migrations.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The final step is to insert documents. Thankfully, we have a script for downloading the movie list and their images from TMDB, so all we need to do is to run the script and wait until it's finished:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;node src/seeds.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If everything goes well, we can see documents in our movies collections and many movie covers in our storage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--80W1inSr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7efw054t5tsa5ix96k74.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--80W1inSr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7efw054t5tsa5ix96k74.png" alt="Movies collection documents" width="880" height="993"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qdDHpTKt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mqdqfghzfzq6guqapfa0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qdDHpTKt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mqdqfghzfzq6guqapfa0.png" alt="Storage with images" width="880" height="995"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%EF%B8%8F-conclusion"&gt;
  &lt;/a&gt;
  ‚ú®Ô∏è Conclusion
&lt;/h2&gt;

&lt;p&gt;That's it! We successfully prepared our Appwrite project for Almost Netflix, and we are ready to use it in a frontend application. In the next tutorial, we'll build a Netflix Clone using Nuxt ( or Vue ) and walk you through the process of building apps with Appwrite! As always, we can't wait to see what you will build with Appwrite! You can also join our &lt;a href="https://appwrite.io/discord"&gt;Discord server&lt;/a&gt; to become part of the friendly and supportive Appwrite community.&lt;/p&gt;

&lt;p&gt;Here are some handy links and resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Meldiron/almost-netflix-project-setup"&gt;Almost Netflix programmatic setup GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite"&gt;Appwrite Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/docs"&gt;Appwrite Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#learn-more"&gt;
  &lt;/a&gt;
  üîó Learn more
&lt;/h2&gt;

&lt;p&gt;You can use the following resources to learn more and get help regarding Appwrite and its services.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;üöÄ &lt;a href="https://github.com/appwrite"&gt;Appwrite Github&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;üìú &lt;a href="https://appwrite.io/docs"&gt;Appwrite Docs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;üí¨ &lt;a href="https://appwrite.io/discord"&gt;Discord Community&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>opensource</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
