<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Django Admin Template - Volt Bootstrap 5</title>
      <author>Sm0ke</author>
      <pubDate>Wed, 06 Oct 2021 10:11:02 +0000</pubDate>
      <link>https://dev.to/sm0ke/django-admin-template-volt-bootstrap-5-5bn3</link>
      <guid>https://dev.to/sm0ke/django-admin-template-volt-bootstrap-5-5bn3</guid>
      <description>&lt;p&gt;Hello Coders!&lt;/p&gt;

&lt;p&gt;This article presents an open-source &lt;a href="https://blog.appseed.us/django-admin-template-volt-bootstrap-5/"&gt;Django Admin Template&lt;/a&gt; that after the installation overwrites the default &lt;code&gt;admin&lt;/code&gt; interface (all widgets). This &lt;strong&gt;Django Template&lt;/strong&gt; is crafted on top of Bootstrap 5 using the latest version without a jQuery dependency by &lt;strong&gt;Themesberg&lt;/strong&gt;. For newcomers, Django is a leading web framework coded and actively supported by experienced developers that provides a default admin interface. &lt;strong&gt;Django Template Volt&lt;/strong&gt; aims to enhance the admin section with a responsive layout and more appealing components and widgets. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;✨ &lt;a href="https://pypi.org/project/django-admin-volt/"&gt;Django Admin Template Volt&lt;/a&gt; - PyPi Page&lt;/li&gt;
&lt;li&gt;✨ &lt;a href="https://appseed.us/admin-dashboards/django-dashboard-volt"&gt;Django Volt Dashboard&lt;/a&gt; - open-source starter (same design)&lt;/li&gt;
&lt;li&gt;✨ &lt;a href="https://django-volt-dashboard.appseed-srv1.com/"&gt;Django Volt Dashboard&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7lcqunBX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnqtu2ipgb97v99ypnod.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7lcqunBX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnqtu2ipgb97v99ypnod.png" alt="Django Admin Template Volt - Edit Users Page"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;The product can be downloaded and used via &lt;code&gt;PyPi&lt;/code&gt; (as a Python package) using &lt;code&gt;PIP&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;django-admin-volt
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;git+https://github.com/app-generator/django-admin-volt.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the installation is complete, the next step is to update the &lt;code&gt;Django&lt;/code&gt; configuration with a few things to activate the template:&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;👉 &lt;strong&gt;Step #1&lt;/strong&gt; - Add &lt;code&gt;admin_volt&lt;/code&gt; to &lt;code&gt;INSTALLED_APPS&lt;/code&gt; node in project settings:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;  &lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
        &lt;span class="s"&gt;'admin_volt.apps.AdminVoltConfig'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'django.contrib.admin'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 &lt;strong&gt;Step #2&lt;/strong&gt; - Check &lt;code&gt;django.template.context_processors.request&lt;/code&gt;  is enabled&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="n"&gt;TEMPLATES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;'BACKEND'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'django.template.backends.django.DjangoTemplates'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;'DIRS'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
            &lt;span class="s"&gt;'APP_DIRS'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;'OPTIONS'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;'context_processors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="p"&gt;...&lt;/span&gt;
                    &lt;span class="s"&gt;'django.template.context_processors.request'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="p"&gt;...&lt;/span&gt;
                &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;As specified by the product &lt;a href="https://docs.appseed.us/boilerplate-code/django-templates/volt-dashboard"&gt;documentation&lt;/a&gt;, for legacy apps built with Django 1.8 (of bellow) the context processors should be specified using a different syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;global_settings&lt;/span&gt;

    &lt;span class="n"&gt;TEMPLATE_CONTEXT_PROCESSORS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;global_settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TEMPLATE_CONTEXT_PROCESSORS&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;'django.core.context_processors.request'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 &lt;strong&gt;Step #3&lt;/strong&gt; - Create the superuser and access the admin section&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Create Admin User&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py createsuperuser
&lt;span class="nv"&gt;$ &lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Start the application (development mode)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py runserver &lt;span class="c"&gt;# default port 8000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Access the admin section in the browser: &lt;code&gt;http://127.0.0.1:8000/admin/&lt;/code&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#django-dashboard-volt"&gt;
  &lt;/a&gt;
  ✨ Django Dashboard Volt
&lt;/h2&gt;

&lt;p&gt;This is an open-source Django Seed project that used the same UI as the admin template. The product can be downloaded and used directly from Github, without a registration lock. For more information about this Django dashboard, feel free to access the product page hosted by AppSeed:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://appseed.us/admin-dashboards/django-dashboard-volt"&gt;Django Dashboard Volt&lt;/a&gt; open-source seed project - Product Features:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Up-to-date dependencies: Django 3.2.6 LTS&lt;/li&gt;
&lt;li&gt;SCSS compilation via Gulp&lt;/li&gt;
&lt;li&gt;SQLite Database, Django Native ORM&lt;/li&gt;
&lt;li&gt;Modular design, clean code-base&lt;/li&gt;
&lt;li&gt;Session-Based Authentication, Forms validation&lt;/li&gt;
&lt;li&gt;Deployment scripts: Docker, Gunicorn / Nginx&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YSiVpYlN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q82hqm0vz72albkdi7vv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YSiVpYlN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q82hqm0vz72albkdi7vv.png" alt="Django Admin Template Volt - Open-source seed project crafted by AppSeed."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks for Reading! For more resources, please access:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;🔥 &lt;a href="https://appseed.us/"&gt;AppSeed&lt;/a&gt; for more starters and &lt;a href="https://appseed.us/support"&gt;support&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🔥 &lt;a href="https://appseed.us/admin-dashboards/open-source"&gt;Open-Source Admin Dashboards&lt;/a&gt; - crafted in Flask, Django, and &lt;a href="https://appseed.us/apps/react"&gt;React&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>django</category>
      <category>dashboards</category>
      <category>appseed</category>
    </item>
    <item>
      <title>How to Become a Full Stack Web Developer🔥</title>
      <author>Deepak Gupta</author>
      <pubDate>Wed, 06 Oct 2021 10:01:59 +0000</pubDate>
      <link>https://dev.to/deepakguptacoder/how-to-become-a-full-stack-web-developer-h50</link>
      <guid>https://dev.to/deepakguptacoder/how-to-become-a-full-stack-web-developer-h50</guid>
      <description>&lt;h1&gt;
  &lt;a href="#how-to-become-a-full-stack-web-developers-"&gt;
  &lt;/a&gt;
  How to become a full stack web developers ?
&lt;/h1&gt;

&lt;p&gt;If you want a become a full stack developer,you need to know HTML,CSS,JAVASCRIPT along with a BACK-END but making the right choice in an error where there are a lot of options creates a lot of confusion for New developers.&lt;/p&gt;

&lt;p&gt;The Bucket Technique&lt;br&gt;
As apart of this technique. we wil study each technology just enough to start building sites.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#list-of-backend-and-frontend-developers"&gt;
  &lt;/a&gt;
  List of BACK-END and FRONT-END Developers
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#frontend"&gt;
  &lt;/a&gt;
  FRONT-END
&lt;/h2&gt;

&lt;p&gt;*80% HTML&lt;br&gt;
*60% CSS&lt;br&gt;
*50% JAVASCRIPT&lt;br&gt;
*20% DATABASE&lt;/p&gt;

&lt;p&gt;After you finishing learning all these technologies,you will be able to build good designs but it is not possible to build a stunning website without Graphic designing skills.&lt;br&gt;
you need to either to be a good designer or refer to some design which is good enough for your site to look fabulous.&lt;/p&gt;

&lt;p&gt;You can also refer the free website to build designers or degisn resources for developers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rainboestrykr"&gt;
  &lt;/a&gt;
  rainboestrykr
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#backend"&gt;
  &lt;/a&gt;
  BACK-END
&lt;/h2&gt;

&lt;p&gt;*PHP&lt;br&gt;
*NODEJs&lt;br&gt;
*JAVA&lt;br&gt;
*C#&lt;br&gt;
*GOLANG&lt;/p&gt;

&lt;p&gt;That's for the Back-end developers &lt;br&gt;
*PHP = Easy to Learn, best for beginners,limited support of libraries.&lt;br&gt;
*NodeJs = JavaScript whisch you already know from frounted,Its difficult to learn JavaScript concepts like callbacks are used&lt;br&gt;
Djoango/Flask[Python based back-end Frameworks] includes ORM, Great set of python libraries need to learn python Not Recommended for beginners Front-end Frameworks are amazing.&lt;br&gt;
YOU also need to master HTML,CSS,JAVASCRIPT.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tools-every-web-developers-should-know-about"&gt;
  &lt;/a&gt;
  Tools every Web Developers Should know about.
&lt;/h1&gt;

&lt;p&gt;a] UX wing for Icons.&lt;br&gt;
b] PixaBay for free Images&lt;br&gt;
c] FreeHtml5 for Free Tamplates&lt;br&gt;
d] UnSplash for Image API&lt;br&gt;
e] Json Placeholder for fake Online REST API&lt;br&gt;
f] More Resources are available on here&lt;/p&gt;

&lt;p&gt;Also view the Video From the you Youtube&lt;br&gt;
fullstack developers&lt;/p&gt;

&lt;p&gt;If you liked this turtorial,you can support me and follow me..&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>devops</category>
      <category>startup</category>
    </item>
    <item>
      <title>Learning Python- Intermediate course: Day 38, OOP</title>
      <author>Aatmaj</author>
      <pubDate>Wed, 06 Oct 2021 09:46:53 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-intermediate-course-day-38-oop-197</link>
      <guid>https://dev.to/aatmaj/learning-python-intermediate-course-day-38-oop-197</guid>
      <description>&lt;h2&gt;
  &lt;a href="#today-we-will-learn-about-oop-in-python-today-we-will-make-a-simple-class-and-use-instances-of-the-classes"&gt;
  &lt;/a&gt;
  Today we will learn about OOP in Python. Today we will make a simple class and use instances of the classes.
&lt;/h2&gt;




&lt;p&gt;Almost everything in Python is an Object, with its properties and methods. A class is like an object blueprint for creating objects. To create a class, use the keyword class:&lt;/p&gt;

&lt;p&gt;Here is an example of a sample class commented wherever required&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# creating a class named sample
&lt;/span&gt;
    &lt;span class="c1"&gt;# ATTRIBUTES
&lt;/span&gt;    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;# class data has variable  named x with value five.
&lt;/span&gt;
&lt;span class="c1"&gt;# OBJECT CREATION(INSTANTIAZATION OF AN OBJECT)
&lt;/span&gt;&lt;span class="n"&gt;mysample&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# creating an instance of the class
&lt;/span&gt;
&lt;span class="c1"&gt;#Accessing the parameters
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mysample&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# We can access the attribute values using the '.' operator.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let us see one more sample&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
    &lt;span class="n"&gt;character&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'3'&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;character&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;23
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#class-methods"&gt;
  &lt;/a&gt;
  Class methods
&lt;/h3&gt;

&lt;p&gt;We can put functions inside a class, which are called as 'methods' &lt;br&gt;
Syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def functionname (classname,......arguments......):
 ...
 ...
 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The below example will make things very clear&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Tom"&lt;/span&gt;
    &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
    &lt;span class="n"&gt;character&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'3'&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printname&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Tom
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the method, one of the arguments passed was the class itself. This is necessary syntax in Python. If it is not done in the same manner, the program won't run. Below are code snippets of how a program won't run.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Common mistakes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1) Didnt use the dot operator in the method syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Tom"&lt;/span&gt;
    &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
    &lt;span class="n"&gt;character&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'3'&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printname&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Traceback (most recent call last):
  File "main.py", line 9, in &amp;lt;module&amp;gt;
    a.printname()
  File "main.py", line 6, in printname
    print(name)
NameError: name 'name' is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2) Forgot to mention the classname in the arguments&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Tom"&lt;/span&gt;
    &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
    &lt;span class="n"&gt;character&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'3'&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printname&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printname&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Traceback (most recent call last):
  File "main.py", line 9, in &amp;lt;module&amp;gt;
    a.printname()
TypeError: printname() takes 0 positional arguments but 1 was given

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#tired-of-writing-the-name-of-the-class-every-time-well-use-the-raw-self-endraw-keyword"&gt;
  &lt;/a&gt;
  Tired of writing the name of the class every time? Well use the &lt;code&gt;self&lt;/code&gt; keyword
&lt;/h6&gt;

&lt;p&gt;The &lt;code&gt;self&lt;/code&gt; keyword can be used in place of the entire class name&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Tom"&lt;/span&gt;
    &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
    &lt;span class="n"&gt;character&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'3'&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printname&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Tom
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even replacing the class name by self &lt;strong&gt;inside&lt;/strong&gt; the method works&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Tom"&lt;/span&gt;
    &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
    &lt;span class="n"&gt;character&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'3'&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printname&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Tom
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#returning-values"&gt;
  &lt;/a&gt;
  Returning values
&lt;/h3&gt;

&lt;p&gt;We can make the methods return value as we would do in the usual methods&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Tom"&lt;/span&gt;
    &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
    &lt;span class="n"&gt;character&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'3'&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printname&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Tom
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let us take one more example related to the methods.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;rate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_amount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_tax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_amount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="c1"&gt;# Exercise why not self.set_amount(self,amount) ?
&lt;/span&gt;        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rate&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_tax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;3.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, &lt;code&gt;set_amount(self)&lt;/code&gt; is a setter method, i.e. This methods sets the values of the method object. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exercise"&gt;
  &lt;/a&gt;
  Exercise
&lt;/h3&gt;

&lt;p&gt;1) What will happen if we replace &lt;code&gt;self.set_amount(amount)&lt;/code&gt; by &lt;code&gt;self.set_amount(self,amount)&lt;/code&gt;? &lt;br&gt;
2) Write a program which contains a class student which contains variables Id, name and roll number&lt;br&gt;
The class must have methods &lt;code&gt;showId&lt;/code&gt; and &lt;code&gt;showrollnumber()&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#private-methods"&gt;
  &lt;/a&gt;
  Private methods
&lt;/h3&gt;

&lt;p&gt;We will now see how to make class methods as private. The private methods can only be accessed from &lt;strong&gt;inside&lt;/strong&gt; the class. No one outside can access it.&lt;br&gt;
In the above example, the &lt;code&gt;set_amount&lt;/code&gt; is used only inside the class. So why not mark it private? We can set private methods in Python by adding two underscores to the class name, like this &lt;code&gt;__set_amount&lt;/code&gt; Rest all remains the same&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;rate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__set_amount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_tax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__set_amount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rate&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_tax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;3.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This private method can not be accessed outside of the class&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;rate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__set_amount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_tax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__set_amount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rate&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__set_amount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_tax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Traceback (most recent call last):
  File "main.py", line 12, in &amp;lt;module&amp;gt;
    a.__set_amount(2)
AttributeError: 'sample' object has no attribute '__set_amount'

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;So friends that was all for this part. In the next part we will study the &lt;code&gt;__init__&lt;/code&gt; or the class constructor.&lt;/p&gt;

&lt;p&gt;Thank you&lt;/p&gt;

</description>
      <category>learningpython</category>
      <category>python</category>
      <category>oop</category>
      <category>programming</category>
    </item>
    <item>
      <title>A first update on our salary survey</title>
      <author>DEVOPS-JOBS.NET</author>
      <pubDate>Wed, 06 Oct 2021 09:10:01 +0000</pubDate>
      <link>https://dev.to/devops_jobsnet/a-first-update-on-our-salary-survey-5e0b</link>
      <guid>https://dev.to/devops_jobsnet/a-first-update-on-our-salary-survey-5e0b</guid>
      <description>&lt;p&gt;🎉 We have a little update on our salary survey which we launched roughly &lt;a href="https://insights.devops-jobs.net/share-your-salary-and-see-what-everyone-else-is-making-in-devops/"&gt;three months ago&lt;/a&gt; (check out &lt;a href="https://salaries.devops-jobs.net/"&gt;https://salaries.devops-jobs.net/&lt;/a&gt; if you haven’t yet) and needless to say we’re still pretty excited about it.&lt;/p&gt;

&lt;p&gt;About four weeks after the launch we enabled the &lt;a href="https://salaries.devops-jobs.net/download/"&gt;download&lt;/a&gt; feature on the site so everyone can get the latest dataset in JSON and CSV format. Furthermore there’s now a weekly sync of these results to a dedicated &lt;a href="https://github.com/foorilla/devops-jobs-net-salaries"&gt;github repo&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;As initially announced, but not yet implemented during that time, we built our own &lt;a href="https://fxdata.foorilla.com/"&gt;FX data API&lt;/a&gt; to provide free and public currency data (yes, you can use it as well if you like!) for the Forex calculations taking place on the dataset in the salary_in_usd column. This is because we allow people to fill in their annual salary in their home or actually paid out currency and then do the work for you to translate that into its corresponding USD amount (yearly average) for better comparability/reference, with data provided by the &lt;a href="https://www.bis.org/"&gt;Bank for International Settlements&lt;/a&gt; (🏦 the bank for the central banks, basically).&lt;/p&gt;

&lt;p&gt;Well, it’s always fascinating how much effort can go into something seemingly simple like a salary survey (hint: way more than you anticipated). But still, it looks like it’s worth the effort.&lt;/p&gt;

&lt;p&gt;We also put in some more descriptive information on the &lt;a href="https://salaries.devops-jobs.net/download/"&gt;download page&lt;/a&gt; about what each column in the dataset represents or how to interpret it. Should be pretty straight forward by now, and hopefull very easy to work with.&lt;/p&gt;

&lt;p&gt;Now the plan is to keep this site up there indefinitely for the future to collect remote work salary information year by year on an ongoing basis. With this in mind it should be a good reason now to share this with your colleagues and friends if you haven’t done so yet. 😉&lt;/p&gt;

&lt;p&gt;It’ll be very interesting to see how much data we can gather in the long term, and also keep in mind that all this is in the &lt;a href="https://salaries.devops-jobs.net/download/"&gt;public domain&lt;/a&gt; (though mentioning the data came from us would be nice and also increases the amount of data available to share). Meaning it’s free to use by anyone for anything. 🙂&lt;/p&gt;

&lt;p&gt;Last but not least: Many thanks to all of you who filled out the survey form and shared the site with others. That’s pretty awesome! 💪&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post first appeared on &lt;a href="https://insights.devops-jobs.net/a-first-update-on-our-salary-survey/"&gt;https://insights.devops-jobs.net/a-first-update-on-our-salary-survey/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>devops</category>
      <category>cloud</category>
      <category>salary</category>
    </item>
    <item>
      <title>The simplicity of ASP.NET Endpoints</title>
      <author>Tim Deschryver</author>
      <pubDate>Wed, 06 Oct 2021 09:09:46 +0000</pubDate>
      <link>https://dev.to/this-is-learning/the-simplicity-of-asp-net-endpoints-49g8</link>
      <guid>https://dev.to/this-is-learning/the-simplicity-of-asp-net-endpoints-49g8</guid>
      <description>&lt;p&gt;Follow me on Twitter at &lt;a href="https://timdeschryver.dev/twitter"&gt;@tim_deschryver&lt;/a&gt; | Subscribe to the &lt;a href="https://timdeschryver.dev/newsletter"&gt;Newsletter&lt;/a&gt; | Originally published on &lt;a href="https://timdeschryver.dev/blog/the-simplicity-of-net-endpoints"&gt;timdeschryver.dev&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://timdeschryver.dev/blog/the-simplicity-of-net-endpoints?tldr=true"&gt;Read the TLDR version on timdeschryver.dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this post, we continue where we left off in &lt;a href="https://timdeschryver.dev/blog/maybe-its-time-to-rethink-our-project-structure-with-dot-net-6"&gt;Maybe it's time to rethink our project structure with ASP.NET 6&lt;/a&gt;, and we're going to take a closer look at an Endpoint.&lt;/p&gt;

&lt;p&gt;The short recap of that post is that there are benefits by dividing an application into domain modules instead of grouping files by technical tiers, which is also known as the &lt;a href="https://jimmybogard.com/vertical-slice-architecture/"&gt;vertical slice architecture&lt;/a&gt;. The biggest benefit is that the code is simpler and more adaptable to changes, this plays nice with the new Endpoint feature of ASP.NET 6.&lt;/p&gt;

&lt;p&gt;In this post, we're taking a closer look at an endpoint and see how we can leverage the ASP.NET 6 dependency system to keep things simple.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;WebApplication
│   appsettings.json
│   Program.cs
│   WebApplication.csproj
│
├───Modules
│   └───Customers
│       │   CustomersModule.cs
│       ├───Endpoints
│       │       GetCustomer.cs
│       │       BlockCustomer.cs
│       ├───Core
│       │       Customer.cs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In traditional MVC ASP.NET API applications, you'll find controllers that include one or more routes.&lt;br&gt;
Because of this, a controller file can quickly become cluttered and often requires multiple constructor arguments. In production code, this isn't something that we have to think of because the dependency framework of your choice takes care of this. But still, a constructor that takes a lot of arguments is a bad practice and might be a problem in the future (e.g. when you need to move things around), if it isn't already causing troubles (e.g. in test setups).&lt;/p&gt;

&lt;p&gt;To give an example, we start with the following controller.&lt;br&gt;
In this case, we're keeping the example lightweight and only add one dependency to the customers' repository.&lt;br&gt;
The controller has 2 routes, a &lt;code&gt;GET&lt;/code&gt; and a &lt;code&gt;PUT&lt;/code&gt;, the implementation of both routes are written inline in the controller file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ApiController&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"api/[controller]"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomersController&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ControllerBase&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;ICustomersRepository&lt;/span&gt; &lt;span class="n"&gt;_customersRepository&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;CustomersController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ICustomersRepository&lt;/span&gt; &lt;span class="n"&gt;customersRepository&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_customersRepository&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;customersRepository&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;HttpGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{customerId}"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IActionResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetCustomer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;customerId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_customersRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetCustomer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customerId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;HttpPut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"block/{customerId}"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IActionResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;BlockCustomer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;customerId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BlockCustomer&lt;/span&gt; &lt;span class="n"&gt;blockCustomer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_customersRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetCustomer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customerId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reason&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_customersRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cancellationToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is still pretty straightforward, but things can get complicated real fast with this approach.&lt;/p&gt;

&lt;p&gt;That's one of the reasons why I think that a lot of teams have shifted towards using the &lt;a href="https://en.wikipedia.org/wiki/Mediator_pattern"&gt;Mediator pattern&lt;/a&gt;, more specific towards the &lt;a href="https://github.com/jbogard/MediatR"&gt;MediatR&lt;/a&gt; package.&lt;/p&gt;

&lt;p&gt;Using MediatR results in a low coupling between the routes of a controller and the implementation of the request, thus the request handlers can evolve independently from each other.&lt;br&gt;
All incoming requests are mapped to MediatR requests, often suffixed with &lt;code&gt;Query&lt;/code&gt; or &lt;code&gt;Command&lt;/code&gt;, and is then sent to the mediator pipeline.&lt;/p&gt;

&lt;p&gt;The result is that the controller:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;goes from possible multiple dependencies to only one dependency, the &lt;code&gt;IMediator&lt;/code&gt; instance&lt;/li&gt;
&lt;li&gt;has less (almost no) code because the route implementations are extracted into separate &lt;code&gt;IRequest&lt;/code&gt; handlers, the route only acts as a dispatcher to send the request to a handler&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The refactored controller, using MediatR, now looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ApiController&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"api/[controller]"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomersController&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ControllerBase&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IMediator&lt;/span&gt; &lt;span class="n"&gt;_mediator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;CustomersController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IMediator&lt;/span&gt; &lt;span class="n"&gt;mediator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_mediator&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mediator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;HttpGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{customerId}"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IActionResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetCustomer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;customerId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_mediator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;GetCustomerQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customerId&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;HttpPut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"block/{customerId}"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IActionResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;BlockCustomer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;customerId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BlockCustomer&lt;/span&gt; &lt;span class="n"&gt;blockCustomer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_mediator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;BlockCustomerCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customerId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blockCustomer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reason&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To give you the full picture, the associate handler of the &lt;code&gt;BlockCustomerCommand&lt;/code&gt; request looks like this.&lt;br&gt;
It's simply a copy-paste of the route's code to the &lt;code&gt;Handle&lt;/code&gt; method of a request handler.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BlockCustomerCommandHandler&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IRequestHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;BlockCustomerCommand&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;ICustomersRepository&lt;/span&gt; &lt;span class="n"&gt;_customersRepository&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;BlockCustomerCommandHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ICustomersRepository&lt;/span&gt; &lt;span class="n"&gt;customersRepository&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_customersRepository&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;customersRepository&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Unit&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BlockCustomerCommand&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CancellationToken&lt;/span&gt; &lt;span class="n"&gt;cancellationToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_customersRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CustomerId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cancellationToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reason&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_customersRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cancellationToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Unit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is better than before &lt;em&gt;though it might not be clearly visible based on this trivial example&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;But now we can go a step further and simplify the code by rewriting the request handler as an endpoint.&lt;br&gt;
The endpoint expects 2 arguments, a pattern and a &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.requestdelegate?view=aspnetcore-6.0"&gt;RequestDelegate&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can think of the pattern as the &lt;code&gt;Route&lt;/code&gt; attribute from the MVC controller, and the request delegate as a function that is called when the endpoint is hit. The arguments of the request delegate are resolved from the request, and also from the configured services of the dependency container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebApplication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddTransient&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ICustomersRepository&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CustomersRepository&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapPut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"customers/block/{customerId}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;FromRoute&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;customerId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;FromBody&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;BlockCustomer&lt;/span&gt; &lt;span class="n"&gt;blockCustomer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;FromServices&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;ICustomersRepository&lt;/span&gt; &lt;span class="n"&gt;customersRepository&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_customersRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CustomerId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cancellationToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reason&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_customersRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cancellationToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also emit the attribute tags, so the shorthand version of the above snippet becomes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebApplication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddTransient&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ICustomersRepository&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CustomersRepository&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapPut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"customers/block/{customerId}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;customerId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BlockCustomer&lt;/span&gt; &lt;span class="n"&gt;blockCustomer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ICustomersRepository&lt;/span&gt; &lt;span class="n"&gt;customersRepository&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_customersRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CustomerId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cancellationToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reason&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_customersRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cancellationToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is similar to what we had with MVC controllers, except that the DI is handled by the endpoint itself.&lt;/p&gt;

&lt;p&gt;By following the &lt;code&gt;IModule&lt;/code&gt; convention, we can easily refactor this code and move the handler to its own file, a la MediatR.&lt;br&gt;
Doing this gives us the following result.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomersModule&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IModule&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IServiceCollection&lt;/span&gt; &lt;span class="nf"&gt;RegisterModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IServiceCollection&lt;/span&gt; &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddTransient&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ICustomersRepository&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CustomersRepository&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IEndpointRouteBuilder&lt;/span&gt; &lt;span class="nf"&gt;MapEndpoints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IEndpointRouteBuilder&lt;/span&gt; &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"customers/{customerId}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GetCustomer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapPut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"customers/block/{customerId}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BlockCustomer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the extracted handler:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BlockCustomer&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;customerId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BlockCustomer&lt;/span&gt; &lt;span class="n"&gt;blockCustomer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ICustomersRepository&lt;/span&gt; &lt;span class="n"&gt;customersRepository&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_customersRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CustomerId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cancellationToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reason&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_customersRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cancellationToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is similar to what we're used to but it's simpler and doesn't require a dependency on MediatR to handle an incoming request. You can even get rid of MediatR entirely if you're just using MediatR to send requests to handlers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The new Endpoints feature of ASP.NET 6 makes handling incoming requests simple.&lt;br&gt;
An endpoint can be extracted into a separate class, which makes sure that &lt;strong&gt;the code fits in your head&lt;/strong&gt;.&lt;br&gt;
Besides resolving route parameters and request bodies, the request handler also can inject dependencies from the dependency container.&lt;/p&gt;

&lt;p&gt;Besides the simplicity, an additional benefit of ASP.NET endpoints is that they're faster than controller based APIs &lt;a href="https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-6-preview-4/"&gt;faster&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;These new routing APIs have far less overhead than controller-based APIs. Using the new routing APIs, ASP.NET Core is able to achieve ~800k RPS in the &lt;a href="https://www.techempower.com/benchmarks/"&gt;TechEmpower JSON benchmark&lt;/a&gt; vs ~500k RPS for MVC.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Follow me on Twitter at &lt;a href="https://timdeschryver.dev/twitter"&gt;@tim_deschryver&lt;/a&gt; | Subscribe to the &lt;a href="https://timdeschryver.dev/newsletter"&gt;Newsletter&lt;/a&gt; | Originally published on &lt;a href="https://timdeschryver.dev/blog/the-simplicity-of-net-endpoints"&gt;timdeschryver.dev&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>csharp</category>
      <category>architecture</category>
    </item>
    <item>
      <title>🆕 New feature in the Luos #release 2.0.0: Profiles to simplify user API</title>
      <author>Emanuel Allely</author>
      <pubDate>Wed, 06 Oct 2021 08:21:45 +0000</pubDate>
      <link>https://dev.to/luos/new-feature-in-the-luos-release-2-0-0-profiles-to-simplify-user-api-2842</link>
      <guid>https://dev.to/luos/new-feature-in-the-luos-release-2-0-0-profiles-to-simplify-user-api-2842</guid>
      <description>&lt;p&gt;🆕 New feature in the Luos &lt;strong&gt;release 2.0.0&lt;/strong&gt;: Profiles to simplify user &lt;strong&gt;API&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Profiles are predefined structures representing a &lt;strong&gt;embedded service&lt;/strong&gt; type. Since Luos 2.0.0, you can comply services to a specific profile allowing anyone to know how your feature work.&lt;/p&gt;

&lt;p&gt;For example, any motor (stepper, brushless, Dynamixel, ...) can use the servo-motor profile. Then you can control any of them the same way. Profiles also simplify your motor driver development. Instead of dealing with messages, profiles give you input and output variables to interact with anything else (other services, cloud app, ...).&lt;/p&gt;

&lt;p&gt;You can easily create your own profiles and share them with the community or your team as a feature API definition. Luos is &lt;strong&gt;open-source&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.luos.io/pages/luos-technology/services/profile.html"&gt;Check the Luos documentation dedicated to profiles&lt;/a&gt;&lt;/p&gt;

</description>
      <category>release</category>
      <category>luos</category>
      <category>embedded</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Multi paramers in yii2</title>
      <author>Mylaw.vn</author>
      <pubDate>Wed, 06 Oct 2021 07:58:49 +0000</pubDate>
      <link>https://dev.to/mylawvietnam/multi-paramers-in-yii2-1513</link>
      <guid>https://dev.to/mylawvietnam/multi-paramers-in-yii2-1513</guid>
      <description>&lt;p&gt;I want get params from search controllers in yii2, howover link one errors.&lt;br&gt;
sort city, province..&lt;br&gt;
Ex: index?cate_id=129&amp;amp;city_id=79&amp;amp;provin_id=54&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;index/cate-name/city-nam/province-name
Please help this errors. Thanks.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>yii2</category>
    </item>
    <item>
      <title>7 things to make your portfolio projects stand out and make any employer hire you</title>
      <author>Kati Frantz</author>
      <pubDate>Wed, 06 Oct 2021 07:53:12 +0000</pubDate>
      <link>https://dev.to/bahdcoder/7-things-to-make-your-portfolio-projects-stand-out-and-make-any-employer-hire-you-17gb</link>
      <guid>https://dev.to/bahdcoder/7-things-to-make-your-portfolio-projects-stand-out-and-make-any-employer-hire-you-17gb</guid>
      <description>&lt;p&gt;You do not need any job experience to land an amazing developer job.&lt;/p&gt;

&lt;p&gt;7 things to make your portfolio projects stand out and make any employer hire you:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;🏘️ Build projects with real-world use cases and solutions. Consider yourself a contractor, and someone came to you with a real problem, asking for a real solution. Build it and launch it like you are working for a real business. Deploy it, purchase a domain, make it live and functional. Add it to your resume as prior experience. Make the code open-source. Do 7 of these, and not only your skills, but your experience itself will shoot to the roof.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;💅 No ugly projects. Build a beautiful, fully-branded solution. For example, you are building an airbnb clone. Don't call it that. Give the company a name, for example, Vacasa. Go to ui8.net, buy a Figma design for the kind of project you are building. Implement the design from scratch. Make it perfectly responsive, create a logo for the project. How do you know you did a great job? If someone sees the website online, they should be sold and think this is a legit existing business.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;📝Document your project completely. Write a useful and fully detailed case study. Explain why you used x framework or y technology. This explanation should be in the project readme, or be part of your projects on your website. Your documentation should have the designs for the project, explanation of design patterns used, project architecture, how it was deployed, development problems you ran into, and a list of all features and functionality.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🛠️ Your code should check all the boxes for production grade software: Accessibility, testability, scalability and maintainability. Write semantic HTML, create accessible components, fully test that your code works on both the backend and frontend, make sure its Easily maintainable by any developer, clean code best practices, fully typed, can scale to millions of users without performance drops, and beautifully structured and organized code. You can ask for feedback and make as many tweaks as needed to get the perfect code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🚀 Collaborate with other developers. Create a 3-4 people team, distribute tasks, work together to complete the project. Full history of collaboration should be on Github and a public Trello board. Show your employer you have team experience, and can fit into their team.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;👓 Take some time to find a very experienced developer to review your code on Github, provide Github PR reviews, and give you the best tips to make your solution the best quality possible. If you can't find someone willing to do this for you, pay for their time. I promise you its worth it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;📻 My final tip is a list of possible projects you can build that will match the quality I am talking about:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;i. &lt;a href="//circle.so"&gt;circle.so&lt;/a&gt;&lt;br&gt;
ii. &lt;a href="//udemy.com"&gt;udemy.com&lt;/a&gt;&lt;br&gt;
iii. &lt;a href="//tinder.com"&gt;tinder.com&lt;/a&gt;&lt;br&gt;
iv. &lt;a href="//ui8.net"&gt;ui8.net&lt;/a&gt;&lt;br&gt;
v. &lt;a href="//reform.app"&gt;reform.app&lt;/a&gt;&lt;br&gt;
vi. &lt;a href="//attract.io"&gt;attract.io&lt;/a&gt;&lt;br&gt;
vii. Implement a design system from scratch. Pick any one on Figma and write the code for it. Make it open-source. I got my eyes on &lt;a href="//sargam.design"&gt;sargam.design&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please share this content and help someone in need of a guide.&lt;/p&gt;

&lt;p&gt;Did you love this content? You can get even much more by subscribing for free to my email list . No spam, just tons and tons of value for your career 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://katifrantz.com/newsletter"&gt;https://katifrantz.com/newsletter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>developer</category>
      <category>portfolio</category>
      <category>career</category>
    </item>
    <item>
      <title>Css Gradient Icon</title>
      <author>Sankarraj R</author>
      <pubDate>Wed, 06 Oct 2021 07:24:40 +0000</pubDate>
      <link>https://dev.to/sankar254/css-gradient-icon-2bpn</link>
      <guid>https://dev.to/sankar254/css-gradient-icon-2bpn</guid>
      <description>&lt;p&gt;Just a small try with css gradient.&lt;br&gt;
Made a gradient shield icon using clipping mask and linear gradient.&lt;/p&gt;

&lt;p&gt;Please support and give your valuable feedbacks&lt;br&gt;
Codepen : &lt;a href="https://codepen.io/sankar254/pen/RwgXwGZ"&gt;https://codepen.io/sankar254/pen/RwgXwGZ&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>Dart Programming Full Course for Absolute Beginners 2021</title>
      <author>Hosney Ara Smrity</author>
      <pubDate>Wed, 06 Oct 2021 07:02:17 +0000</pubDate>
      <link>https://dev.to/learn_flutter_with_smrity/dart-programming-full-course-for-absolute-beginners-2021-3l2o</link>
      <guid>https://dev.to/learn_flutter_with_smrity/dart-programming-full-course-for-absolute-beginners-2021-3l2o</guid>
      <description>&lt;p&gt;Dart is a Powerful language, it’s a new platform for modern App, Web, Game, A.I. development. It’s a superb place to start learning to program. With this Dart course, you have everything that you will need to “learn to code” with cutting-edge tools. The goal of this course to make learning to program as straightforward as possible.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/MDm368e3tjs"&gt;Watch on Youtube&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Who Is This Course For?&lt;br&gt;
This Course is aimed at those with a very limited knowledge of dart Programming who wish to learn them from the ground up. More than anything else, though, this course is an&lt;br&gt;
introduction to programming.&lt;br&gt;
If you are already an experienced programmer, this course is not for you. If you know a little HTML but want to take your skillset to the next level, this course is probably for you. If you simply have an intense curiosity about computers but have no knowledge of programming, this course may be for you. If you want to get started developing&lt;br&gt;
your own apps, websites with Dart &amp;amp; Flutter but have no prior experience, then this book is definitely for you.&lt;/p&gt;

&lt;p&gt;Programming is not easy. The viewers of this course cannot expect to have mastered programming by its end. She can expect to be capable of writing her own small-to-medium-size programs. She will be able to understand others’ source code. She will have a firm grasp on the fundamental knowledge and skills necessary to continue her journey. In short, she will&lt;br&gt;
be on her way to being a programmer.&lt;/p&gt;

&lt;p&gt;Why Should I Learn Dart?&lt;br&gt;
Dart is a new, relatively easy-to-learn programming language from Google. Dart has a large built-in library (think of this as a real library: you can borrow code from this virtual library to help you do things with your program, just as you can borrow books from the real library to help you do things in real life) that makes doing many common programming tasks easier. Dart also has a powerful packaging system, so that libraries built by other institutions and programmers can easily be utilized by anyone. In short, Dart is a modern, convenient, and compatible language designed for productivity.&lt;/p&gt;

&lt;p&gt;About This Course&lt;br&gt;
This book is structured in short, easy-to-digest section, highly practical that concentrate on one key concept each. This course includes 2 cool Programs. Each chapter ends with exercises to give you more practice with the section's concepts. The more you do, the more the chapter’s concepts will begin to seem clear.&lt;/p&gt;

&lt;p&gt;TABLE OF CONTENT&lt;/p&gt;

&lt;p&gt;Introduction &lt;br&gt;
Intro &lt;br&gt;
Dart Overview &lt;br&gt;
Advantages of Dart&lt;br&gt;
Set Up your Dart Environment &lt;br&gt;
Your First Dart Program &lt;br&gt;
Comment System &lt;br&gt;
Variable &lt;br&gt;
Data Type &lt;br&gt;
Deep Dive into Variable &lt;br&gt;
Deep Dive into Data Type &lt;br&gt;
Arithmetic Operators &lt;br&gt;
Equality or Relational Operators &lt;br&gt;
Increment &amp;amp; Decrement Operators &lt;br&gt;
Type test Operators &lt;br&gt;
Assignment Operators &lt;br&gt;
Assignment Operators &lt;br&gt;
Exercise &lt;br&gt;
String &lt;br&gt;
Exercise &lt;br&gt;
String &lt;br&gt;
Flow Control Statements(If else) &lt;br&gt;
Exercise &lt;br&gt;
Switch Statement &lt;br&gt;
Exercise &lt;br&gt;
While loop &lt;br&gt;
Do While loop &lt;br&gt;
For loop &lt;br&gt;
Compare While loop, Do While loop, For loop &lt;br&gt;
For loop with List &lt;br&gt;
For each loop &lt;br&gt;
For in loop &lt;br&gt;
Summary &lt;br&gt;
Number guessing Game &lt;br&gt;
Temperature Converter Program &lt;br&gt;
Keywords &lt;br&gt;
Closing &lt;br&gt;
Functions&lt;/p&gt;

&lt;p&gt;Get in Touch with the Instructor&lt;br&gt;
Do you have questions or comments? Do you need help working through an example or exercise? Please, do not hesitate to reach out on e-mail at &lt;a href="mailto:h.a.smrity24@gmail.com"&gt;h.a.smrity24@gmail.com&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How GitHub Uses Codespaces to Build GitHub</title>
      <author>Davide 'CoderDave' Benvegnù</author>
      <pubDate>Wed, 06 Oct 2021 07:00:57 +0000</pubDate>
      <link>https://dev.to/n3wt0n/how-github-uses-codespaces-to-build-github-17eb</link>
      <guid>https://dev.to/n3wt0n/how-github-uses-codespaces-to-build-github-17eb</guid>
      <description>&lt;p&gt;GitHub Codespaces is a great service. But did you know that GitHub Engineering has switched over to it, so now &lt;strong&gt;GitHub uses Codespaces to build GitHub&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;In this live stream, we talk with Mike McQuaid (Staff Software Engineer at GitHub) about how GitHub uses Codespaces to Build GitHub, the challenges, the gains, and the future of how GitHub builds GitHub.&lt;/p&gt;

&lt;p&gt;The GitHub.com codebase is almost 14 years old. And over those 14 years, the core repository powering GitHub has seen over a million commits And over the past months, GitHub's Engineering has evolved and moved to GitHub Codespaces for the majority of GitHub development.&lt;/p&gt;

&lt;p&gt;This is your chance to discover how GitHub uses GitHub to build GitHub :)&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xrZo4SHOdg0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/xrZo4SHOdg0"&gt;Link to the video: https://youtu.be/xrZo4SHOdg0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
📧 &lt;a href="https://coderdave.io/newsletter"&gt;Newsletter&lt;/a&gt;&lt;br&gt;
🌐 &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xrZo4SHOdg0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>github</category>
      <category>devops</category>
      <category>podcast</category>
      <category>techtalks</category>
    </item>
    <item>
      <title>Bring some fresh AIR and write effective code review comments</title>
      <author>Sandor Dargo</author>
      <pubDate>Wed, 06 Oct 2021 06:51:24 +0000</pubDate>
      <link>https://dev.to/sandordargo/bring-some-fresh-air-and-write-effective-code-review-comments-3akg</link>
      <guid>https://dev.to/sandordargo/bring-some-fresh-air-and-write-effective-code-review-comments-3akg</guid>
      <description>&lt;p&gt;A few years ago, I shared some &lt;a href="https://www.sandordargo.com/blog/2018/03/28/codereview-guidelines"&gt;guidelines about how not to ruin the team mojo with code reviews&lt;/a&gt;, what practices should the different involved people follow to avoid feeling bad about each other, yet to fulfil the aims of a code review.&lt;/p&gt;

&lt;p&gt;It's time to talk about how to write comments that won't be neglected but will be taken into account. These practices will not work all the time, but they will help someone with a higher chance. Personally, I haven't worked with anyone who'd reject ideas based on gender, skin or whether you call a &lt;em&gt;pain au chocolat&lt;/em&gt; a &lt;em&gt;chocolatine&lt;/em&gt;, I'm sure there are such people out there. It's enough to "open the internet" to see examples from whatever groups.&lt;/p&gt;

&lt;p&gt;Jerks are jerks.&lt;/p&gt;

&lt;p&gt;Yet, as a stoic, you shouldn't care about them. At least you should try to care less.&lt;/p&gt;

&lt;p&gt;If my comment doesn't achieve its purpose, the question I should ask myself is what I should have done better and why it bothers me if my point was neglected.&lt;/p&gt;

&lt;p&gt;I think that a good code review comment consists of 3 parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Action&lt;/li&gt;
&lt;li&gt;Information&lt;/li&gt;
&lt;li&gt;Reference&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adding these three items and staying polite will make sure that there is no smell of resentment in the AIR, at least not because of code reviews.&lt;/p&gt;

&lt;p&gt;Let's take a very simple, short comment and I'll show you how to transform it into something AIRy.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Not all comments need these 3 elements. Sometimes you should really just ask for some info or highlight a typo.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Widet&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;iWidgetToUpdate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Comment:&lt;/strong&gt; &lt;em&gt;"Why don't you take it by value?"&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-a-clear-action"&gt;
  &lt;/a&gt;
  Add a clear &lt;strong&gt;action&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;There are many problems with the above comment. One might interpret it as a bit passive-aggressive and besides it definitely lacks a clear action.&lt;/p&gt;

&lt;p&gt;If you want the author to perform an action, ask for it.&lt;/p&gt;

&lt;p&gt;So many relationships are broken or much worse than they could be simply because we fail to communicate what we want. You might expect that someone else does something - while you should not expect anything from others... - yet the other fails to get the message. Or simply he doesn't want to do it if it's not explicitly asked for.&lt;/p&gt;

&lt;p&gt;So let's transform the above comment into something &lt;em&gt;actionable&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Please, take the smart pointer parameter by value instead of a const&amp;amp;."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note the word &lt;em&gt;"please"&lt;/em&gt;. It makes wonders, yet we forget to use it so often.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-information"&gt;
  &lt;/a&gt;
  Add information
&lt;/h2&gt;

&lt;p&gt;If I received the above comment, I would ask for an explanation. Okay, but why? I think that's the right attitude as someone whose code is being reviewed. But maybe the author is too shy to ask back or simply is too overwhelmed with the comments or with work, maybe with life in general.&lt;/p&gt;

&lt;p&gt;As a reviewer, you should not be waiting and rubbing your palms until the author asks back. Don't have such expectations and don't be surprised if the author&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ignores your comment&lt;/li&gt;
&lt;li&gt;asks someone else as well&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even if you're a &lt;em&gt;C++ guru&lt;/em&gt; or even a &lt;em&gt;C++ maven&lt;/em&gt;, don't expect others to comply with your comments without giving more information.&lt;/p&gt;

&lt;p&gt;So how would a better comment look like?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Please, take the smart pointer parameter by value instead of a const&amp;amp;.&lt;br&gt;
If you pass them by reference, you don't pass or share ownership. If you don't want to deal with ownership, prefer passing a raw pointer or a reference. If you do want to share the ownership, you must pass by value." &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Are we good enough already?&lt;/p&gt;

&lt;p&gt;Not yet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-references"&gt;
  &lt;/a&gt;
  Add references
&lt;/h2&gt;

&lt;p&gt;Even if you're a major authority in the given domain, you shouldn't expect people to take your comments blindly without any proof.&lt;/p&gt;

&lt;p&gt;The above comment is already not bad, but it lacks any proof or reference. If I see such a comment, I either look for a reference myself if I have the time, or I might ask back to include some references, or I ask another also experienced colleague. After all, if two people say the same, maybe it's worth taking the advice.&lt;/p&gt;

&lt;p&gt;In fact, if I don't share references, I'd expect the others to ask back or to ask for confirmation from others. But once again, having expectations towards others' behaviour is not wise.&lt;/p&gt;

&lt;p&gt;Either way, you cannot blame people who look for confirmation even if it hurts your ego.&lt;/p&gt;

&lt;p&gt;Let's say get a big stack of cash and it was just counted in front of you. will you just take it, or will you count it? Of course, you will count it. You will count it until you two get the same result twice.&lt;/p&gt;

&lt;p&gt;So to complete the AIRy code review, let's add some references.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Please, take the smart pointer parameter by value instead of a const&amp;amp;.&lt;br&gt;
If you pass them by reference, you don't pass or share ownership. If you don't want to deal with ownership, prefer passing a raw pointer or a reference. If you do want to share the ownership, you must pass by value.&lt;br&gt;
For more details, pleaser refer to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://herbsutter.com/2013/06/05/gotw-91-solution-smart-pointer-parameters/"&gt;GotW #91 Solution: Smart Pointer Parameters&lt;/a&gt;"&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.sandordargo.com/blog/2021/07/21/const-and-smart-pointers"&gt;const and smart pointers&lt;/a&gt;"&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Oh by the way, if you add only one reference, probably it shouldn't be your article, unless... No, there is no unless.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Imagine that you live in a world where code review comments always bring some fresh AIR: they bring &lt;em&gt;action&lt;/em&gt;, &lt;em&gt;information&lt;/em&gt; and &lt;em&gt;reference&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Sometimes such a world might seem far away, but you can make it closer. Start using this technique to comment on non-basic mistakes, non-typos.&lt;/p&gt;

&lt;p&gt;With such comments, you will not simply ask for a change, but you'll teach, probably also learn by reviewing why you ask for something and you'll even share some resources that later others can use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-deeper"&gt;
  &lt;/a&gt;
  Connect deeper
&lt;/h2&gt;

&lt;p&gt;If you liked this article, please &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hit on the like button,
&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://eepurl.com/gvcv1j"&gt;subscribe to my newsletter&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;and let's connect on &lt;a href="https://twitter.com/SandorDargo"&gt;Twitter&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>codereview</category>
      <category>teaching</category>
      <category>knowledgesharing</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
